
PA_UHF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c7c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08006d34  08006d34  00016d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f14  08006f14  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006f14  08006f14  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f14  08006f14  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f14  08006f14  00016f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f18  08006f18  00016f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000070  08006f8c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08006f8c  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f05  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ab  00000000  00000000  00030f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00034048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  00034dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001837a  00000000  00000000  000359f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142fe  00000000  00000000  0004dd72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bbc0  00000000  00000000  00062070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000edc30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031d8  00000000  00000000  000edc80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006d1c 	.word	0x08006d1c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08006d1c 	.word	0x08006d1c

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	; 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f8f0 	bl	80003f8 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__divsi3>:
 8000224:	4603      	mov	r3, r0
 8000226:	430b      	orrs	r3, r1
 8000228:	d47f      	bmi.n	800032a <__divsi3+0x106>
 800022a:	2200      	movs	r2, #0
 800022c:	0843      	lsrs	r3, r0, #1
 800022e:	428b      	cmp	r3, r1
 8000230:	d374      	bcc.n	800031c <__divsi3+0xf8>
 8000232:	0903      	lsrs	r3, r0, #4
 8000234:	428b      	cmp	r3, r1
 8000236:	d35f      	bcc.n	80002f8 <__divsi3+0xd4>
 8000238:	0a03      	lsrs	r3, r0, #8
 800023a:	428b      	cmp	r3, r1
 800023c:	d344      	bcc.n	80002c8 <__divsi3+0xa4>
 800023e:	0b03      	lsrs	r3, r0, #12
 8000240:	428b      	cmp	r3, r1
 8000242:	d328      	bcc.n	8000296 <__divsi3+0x72>
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d30d      	bcc.n	8000266 <__divsi3+0x42>
 800024a:	22ff      	movs	r2, #255	; 0xff
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	ba12      	rev	r2, r2
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d302      	bcc.n	800025c <__divsi3+0x38>
 8000256:	1212      	asrs	r2, r2, #8
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	d065      	beq.n	8000328 <__divsi3+0x104>
 800025c:	0b03      	lsrs	r3, r0, #12
 800025e:	428b      	cmp	r3, r1
 8000260:	d319      	bcc.n	8000296 <__divsi3+0x72>
 8000262:	e000      	b.n	8000266 <__divsi3+0x42>
 8000264:	0a09      	lsrs	r1, r1, #8
 8000266:	0bc3      	lsrs	r3, r0, #15
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x4c>
 800026c:	03cb      	lsls	r3, r1, #15
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b83      	lsrs	r3, r0, #14
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x58>
 8000278:	038b      	lsls	r3, r1, #14
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b43      	lsrs	r3, r0, #13
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x64>
 8000284:	034b      	lsls	r3, r1, #13
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b03      	lsrs	r3, r0, #12
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x70>
 8000290:	030b      	lsls	r3, r1, #12
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0ac3      	lsrs	r3, r0, #11
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x7c>
 800029c:	02cb      	lsls	r3, r1, #11
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a83      	lsrs	r3, r0, #10
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x88>
 80002a8:	028b      	lsls	r3, r1, #10
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a43      	lsrs	r3, r0, #9
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x94>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a03      	lsrs	r3, r0, #8
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0xa0>
 80002c0:	020b      	lsls	r3, r1, #8
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	d2cd      	bcs.n	8000264 <__divsi3+0x40>
 80002c8:	09c3      	lsrs	r3, r0, #7
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xae>
 80002ce:	01cb      	lsls	r3, r1, #7
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0983      	lsrs	r3, r0, #6
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xba>
 80002da:	018b      	lsls	r3, r1, #6
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0943      	lsrs	r3, r0, #5
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xc6>
 80002e6:	014b      	lsls	r3, r1, #5
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0903      	lsrs	r3, r0, #4
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xd2>
 80002f2:	010b      	lsls	r3, r1, #4
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	08c3      	lsrs	r3, r0, #3
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xde>
 80002fe:	00cb      	lsls	r3, r1, #3
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0883      	lsrs	r3, r0, #2
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xea>
 800030a:	008b      	lsls	r3, r1, #2
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0843      	lsrs	r3, r0, #1
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xf6>
 8000316:	004b      	lsls	r3, r1, #1
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	1a41      	subs	r1, r0, r1
 800031e:	d200      	bcs.n	8000322 <__divsi3+0xfe>
 8000320:	4601      	mov	r1, r0
 8000322:	4152      	adcs	r2, r2
 8000324:	4610      	mov	r0, r2
 8000326:	4770      	bx	lr
 8000328:	e05d      	b.n	80003e6 <__divsi3+0x1c2>
 800032a:	0fca      	lsrs	r2, r1, #31
 800032c:	d000      	beq.n	8000330 <__divsi3+0x10c>
 800032e:	4249      	negs	r1, r1
 8000330:	1003      	asrs	r3, r0, #32
 8000332:	d300      	bcc.n	8000336 <__divsi3+0x112>
 8000334:	4240      	negs	r0, r0
 8000336:	4053      	eors	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	469c      	mov	ip, r3
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d32d      	bcc.n	800039e <__divsi3+0x17a>
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d312      	bcc.n	800036e <__divsi3+0x14a>
 8000348:	22fc      	movs	r2, #252	; 0xfc
 800034a:	0189      	lsls	r1, r1, #6
 800034c:	ba12      	rev	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d30c      	bcc.n	800036e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d308      	bcc.n	800036e <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d304      	bcc.n	800036e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	d03a      	beq.n	80003de <__divsi3+0x1ba>
 8000368:	1192      	asrs	r2, r2, #6
 800036a:	e000      	b.n	800036e <__divsi3+0x14a>
 800036c:	0989      	lsrs	r1, r1, #6
 800036e:	09c3      	lsrs	r3, r0, #7
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x154>
 8000374:	01cb      	lsls	r3, r1, #7
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0983      	lsrs	r3, r0, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x160>
 8000380:	018b      	lsls	r3, r1, #6
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0943      	lsrs	r3, r0, #5
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x16c>
 800038c:	014b      	lsls	r3, r1, #5
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0903      	lsrs	r3, r0, #4
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x178>
 8000398:	010b      	lsls	r3, r1, #4
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	08c3      	lsrs	r3, r0, #3
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x184>
 80003a4:	00cb      	lsls	r3, r1, #3
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0883      	lsrs	r3, r0, #2
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x190>
 80003b0:	008b      	lsls	r3, r1, #2
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	d2d9      	bcs.n	800036c <__divsi3+0x148>
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0x19e>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0x1a6>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4663      	mov	r3, ip
 80003cc:	4152      	adcs	r2, r2
 80003ce:	105b      	asrs	r3, r3, #1
 80003d0:	4610      	mov	r0, r2
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x1b4>
 80003d4:	4240      	negs	r0, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d500      	bpl.n	80003dc <__divsi3+0x1b8>
 80003da:	4249      	negs	r1, r1
 80003dc:	4770      	bx	lr
 80003de:	4663      	mov	r3, ip
 80003e0:	105b      	asrs	r3, r3, #1
 80003e2:	d300      	bcc.n	80003e6 <__divsi3+0x1c2>
 80003e4:	4240      	negs	r0, r0
 80003e6:	b501      	push	{r0, lr}
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f805 	bl	80003f8 <__aeabi_idiv0>
 80003ee:	bd02      	pop	{r1, pc}

080003f0 <__aeabi_idivmod>:
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d0f8      	beq.n	80003e6 <__divsi3+0x1c2>
 80003f4:	e716      	b.n	8000224 <__divsi3>
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_idiv0>:
 80003f8:	4770      	bx	lr
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__aeabi_cfrcmple>:
 80003fc:	4684      	mov	ip, r0
 80003fe:	0008      	movs	r0, r1
 8000400:	4661      	mov	r1, ip
 8000402:	e7ff      	b.n	8000404 <__aeabi_cfcmpeq>

08000404 <__aeabi_cfcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 fb6d 	bl	8000ae4 <__lesf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cfcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_fcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 faf9 	bl	8000a0c <__eqsf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_fcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 fb5f 	bl	8000ae4 <__lesf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_fcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_fcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fb55 	bl	8000ae4 <__lesf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_fcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_fcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fb05 	bl	8000a58 <__gesf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_fcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_fcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fafb 	bl	8000a58 <__gesf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_fcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_f2uiz>:
 8000470:	219e      	movs	r1, #158	; 0x9e
 8000472:	b510      	push	{r4, lr}
 8000474:	05c9      	lsls	r1, r1, #23
 8000476:	1c04      	adds	r4, r0, #0
 8000478:	f7ff fff0 	bl	800045c <__aeabi_fcmpge>
 800047c:	2800      	cmp	r0, #0
 800047e:	d103      	bne.n	8000488 <__aeabi_f2uiz+0x18>
 8000480:	1c20      	adds	r0, r4, #0
 8000482:	f000 fe5d 	bl	8001140 <__aeabi_f2iz>
 8000486:	bd10      	pop	{r4, pc}
 8000488:	219e      	movs	r1, #158	; 0x9e
 800048a:	1c20      	adds	r0, r4, #0
 800048c:	05c9      	lsls	r1, r1, #23
 800048e:	f000 fc93 	bl	8000db8 <__aeabi_fsub>
 8000492:	f000 fe55 	bl	8001140 <__aeabi_f2iz>
 8000496:	2380      	movs	r3, #128	; 0x80
 8000498:	061b      	lsls	r3, r3, #24
 800049a:	469c      	mov	ip, r3
 800049c:	4460      	add	r0, ip
 800049e:	e7f2      	b.n	8000486 <__aeabi_f2uiz+0x16>

080004a0 <__aeabi_fadd>:
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a2:	46c6      	mov	lr, r8
 80004a4:	0243      	lsls	r3, r0, #9
 80004a6:	0a5b      	lsrs	r3, r3, #9
 80004a8:	024e      	lsls	r6, r1, #9
 80004aa:	0045      	lsls	r5, r0, #1
 80004ac:	004f      	lsls	r7, r1, #1
 80004ae:	00da      	lsls	r2, r3, #3
 80004b0:	0fc4      	lsrs	r4, r0, #31
 80004b2:	469c      	mov	ip, r3
 80004b4:	0a70      	lsrs	r0, r6, #9
 80004b6:	4690      	mov	r8, r2
 80004b8:	b500      	push	{lr}
 80004ba:	0e2d      	lsrs	r5, r5, #24
 80004bc:	0e3f      	lsrs	r7, r7, #24
 80004be:	0fc9      	lsrs	r1, r1, #31
 80004c0:	09b6      	lsrs	r6, r6, #6
 80004c2:	428c      	cmp	r4, r1
 80004c4:	d04b      	beq.n	800055e <__aeabi_fadd+0xbe>
 80004c6:	1bea      	subs	r2, r5, r7
 80004c8:	2a00      	cmp	r2, #0
 80004ca:	dd36      	ble.n	800053a <__aeabi_fadd+0x9a>
 80004cc:	2f00      	cmp	r7, #0
 80004ce:	d061      	beq.n	8000594 <__aeabi_fadd+0xf4>
 80004d0:	2dff      	cmp	r5, #255	; 0xff
 80004d2:	d100      	bne.n	80004d6 <__aeabi_fadd+0x36>
 80004d4:	e0ad      	b.n	8000632 <__aeabi_fadd+0x192>
 80004d6:	2380      	movs	r3, #128	; 0x80
 80004d8:	04db      	lsls	r3, r3, #19
 80004da:	431e      	orrs	r6, r3
 80004dc:	2a1b      	cmp	r2, #27
 80004de:	dc00      	bgt.n	80004e2 <__aeabi_fadd+0x42>
 80004e0:	e0d3      	b.n	800068a <__aeabi_fadd+0x1ea>
 80004e2:	2001      	movs	r0, #1
 80004e4:	4643      	mov	r3, r8
 80004e6:	1a18      	subs	r0, r3, r0
 80004e8:	0143      	lsls	r3, r0, #5
 80004ea:	d400      	bmi.n	80004ee <__aeabi_fadd+0x4e>
 80004ec:	e08c      	b.n	8000608 <__aeabi_fadd+0x168>
 80004ee:	0180      	lsls	r0, r0, #6
 80004f0:	0987      	lsrs	r7, r0, #6
 80004f2:	0038      	movs	r0, r7
 80004f4:	f000 fed4 	bl	80012a0 <__clzsi2>
 80004f8:	3805      	subs	r0, #5
 80004fa:	4087      	lsls	r7, r0
 80004fc:	4285      	cmp	r5, r0
 80004fe:	dc00      	bgt.n	8000502 <__aeabi_fadd+0x62>
 8000500:	e0b6      	b.n	8000670 <__aeabi_fadd+0x1d0>
 8000502:	1a2d      	subs	r5, r5, r0
 8000504:	48b3      	ldr	r0, [pc, #716]	; (80007d4 <__aeabi_fadd+0x334>)
 8000506:	4038      	ands	r0, r7
 8000508:	0743      	lsls	r3, r0, #29
 800050a:	d004      	beq.n	8000516 <__aeabi_fadd+0x76>
 800050c:	230f      	movs	r3, #15
 800050e:	4003      	ands	r3, r0
 8000510:	2b04      	cmp	r3, #4
 8000512:	d000      	beq.n	8000516 <__aeabi_fadd+0x76>
 8000514:	3004      	adds	r0, #4
 8000516:	0143      	lsls	r3, r0, #5
 8000518:	d400      	bmi.n	800051c <__aeabi_fadd+0x7c>
 800051a:	e078      	b.n	800060e <__aeabi_fadd+0x16e>
 800051c:	1c6a      	adds	r2, r5, #1
 800051e:	2dfe      	cmp	r5, #254	; 0xfe
 8000520:	d065      	beq.n	80005ee <__aeabi_fadd+0x14e>
 8000522:	0180      	lsls	r0, r0, #6
 8000524:	0a43      	lsrs	r3, r0, #9
 8000526:	469c      	mov	ip, r3
 8000528:	b2d2      	uxtb	r2, r2
 800052a:	4663      	mov	r3, ip
 800052c:	05d0      	lsls	r0, r2, #23
 800052e:	4318      	orrs	r0, r3
 8000530:	07e4      	lsls	r4, r4, #31
 8000532:	4320      	orrs	r0, r4
 8000534:	bc80      	pop	{r7}
 8000536:	46b8      	mov	r8, r7
 8000538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053a:	2a00      	cmp	r2, #0
 800053c:	d035      	beq.n	80005aa <__aeabi_fadd+0x10a>
 800053e:	1b7a      	subs	r2, r7, r5
 8000540:	2d00      	cmp	r5, #0
 8000542:	d000      	beq.n	8000546 <__aeabi_fadd+0xa6>
 8000544:	e0af      	b.n	80006a6 <__aeabi_fadd+0x206>
 8000546:	4643      	mov	r3, r8
 8000548:	2b00      	cmp	r3, #0
 800054a:	d100      	bne.n	800054e <__aeabi_fadd+0xae>
 800054c:	e0a7      	b.n	800069e <__aeabi_fadd+0x1fe>
 800054e:	1e53      	subs	r3, r2, #1
 8000550:	2a01      	cmp	r2, #1
 8000552:	d100      	bne.n	8000556 <__aeabi_fadd+0xb6>
 8000554:	e12f      	b.n	80007b6 <__aeabi_fadd+0x316>
 8000556:	2aff      	cmp	r2, #255	; 0xff
 8000558:	d069      	beq.n	800062e <__aeabi_fadd+0x18e>
 800055a:	001a      	movs	r2, r3
 800055c:	e0aa      	b.n	80006b4 <__aeabi_fadd+0x214>
 800055e:	1be9      	subs	r1, r5, r7
 8000560:	2900      	cmp	r1, #0
 8000562:	dd70      	ble.n	8000646 <__aeabi_fadd+0x1a6>
 8000564:	2f00      	cmp	r7, #0
 8000566:	d037      	beq.n	80005d8 <__aeabi_fadd+0x138>
 8000568:	2dff      	cmp	r5, #255	; 0xff
 800056a:	d062      	beq.n	8000632 <__aeabi_fadd+0x192>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	04db      	lsls	r3, r3, #19
 8000570:	431e      	orrs	r6, r3
 8000572:	291b      	cmp	r1, #27
 8000574:	dc00      	bgt.n	8000578 <__aeabi_fadd+0xd8>
 8000576:	e0b0      	b.n	80006da <__aeabi_fadd+0x23a>
 8000578:	2001      	movs	r0, #1
 800057a:	4440      	add	r0, r8
 800057c:	0143      	lsls	r3, r0, #5
 800057e:	d543      	bpl.n	8000608 <__aeabi_fadd+0x168>
 8000580:	3501      	adds	r5, #1
 8000582:	2dff      	cmp	r5, #255	; 0xff
 8000584:	d033      	beq.n	80005ee <__aeabi_fadd+0x14e>
 8000586:	2301      	movs	r3, #1
 8000588:	4a93      	ldr	r2, [pc, #588]	; (80007d8 <__aeabi_fadd+0x338>)
 800058a:	4003      	ands	r3, r0
 800058c:	0840      	lsrs	r0, r0, #1
 800058e:	4010      	ands	r0, r2
 8000590:	4318      	orrs	r0, r3
 8000592:	e7b9      	b.n	8000508 <__aeabi_fadd+0x68>
 8000594:	2e00      	cmp	r6, #0
 8000596:	d100      	bne.n	800059a <__aeabi_fadd+0xfa>
 8000598:	e083      	b.n	80006a2 <__aeabi_fadd+0x202>
 800059a:	1e51      	subs	r1, r2, #1
 800059c:	2a01      	cmp	r2, #1
 800059e:	d100      	bne.n	80005a2 <__aeabi_fadd+0x102>
 80005a0:	e0d8      	b.n	8000754 <__aeabi_fadd+0x2b4>
 80005a2:	2aff      	cmp	r2, #255	; 0xff
 80005a4:	d045      	beq.n	8000632 <__aeabi_fadd+0x192>
 80005a6:	000a      	movs	r2, r1
 80005a8:	e798      	b.n	80004dc <__aeabi_fadd+0x3c>
 80005aa:	27fe      	movs	r7, #254	; 0xfe
 80005ac:	1c6a      	adds	r2, r5, #1
 80005ae:	4217      	tst	r7, r2
 80005b0:	d000      	beq.n	80005b4 <__aeabi_fadd+0x114>
 80005b2:	e086      	b.n	80006c2 <__aeabi_fadd+0x222>
 80005b4:	2d00      	cmp	r5, #0
 80005b6:	d000      	beq.n	80005ba <__aeabi_fadd+0x11a>
 80005b8:	e0b7      	b.n	800072a <__aeabi_fadd+0x28a>
 80005ba:	4643      	mov	r3, r8
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d100      	bne.n	80005c2 <__aeabi_fadd+0x122>
 80005c0:	e0f3      	b.n	80007aa <__aeabi_fadd+0x30a>
 80005c2:	2200      	movs	r2, #0
 80005c4:	2e00      	cmp	r6, #0
 80005c6:	d0b0      	beq.n	800052a <__aeabi_fadd+0x8a>
 80005c8:	1b98      	subs	r0, r3, r6
 80005ca:	0143      	lsls	r3, r0, #5
 80005cc:	d400      	bmi.n	80005d0 <__aeabi_fadd+0x130>
 80005ce:	e0fa      	b.n	80007c6 <__aeabi_fadd+0x326>
 80005d0:	4643      	mov	r3, r8
 80005d2:	000c      	movs	r4, r1
 80005d4:	1af0      	subs	r0, r6, r3
 80005d6:	e797      	b.n	8000508 <__aeabi_fadd+0x68>
 80005d8:	2e00      	cmp	r6, #0
 80005da:	d100      	bne.n	80005de <__aeabi_fadd+0x13e>
 80005dc:	e0c8      	b.n	8000770 <__aeabi_fadd+0x2d0>
 80005de:	1e4a      	subs	r2, r1, #1
 80005e0:	2901      	cmp	r1, #1
 80005e2:	d100      	bne.n	80005e6 <__aeabi_fadd+0x146>
 80005e4:	e0ae      	b.n	8000744 <__aeabi_fadd+0x2a4>
 80005e6:	29ff      	cmp	r1, #255	; 0xff
 80005e8:	d023      	beq.n	8000632 <__aeabi_fadd+0x192>
 80005ea:	0011      	movs	r1, r2
 80005ec:	e7c1      	b.n	8000572 <__aeabi_fadd+0xd2>
 80005ee:	2300      	movs	r3, #0
 80005f0:	22ff      	movs	r2, #255	; 0xff
 80005f2:	469c      	mov	ip, r3
 80005f4:	e799      	b.n	800052a <__aeabi_fadd+0x8a>
 80005f6:	21fe      	movs	r1, #254	; 0xfe
 80005f8:	1c6a      	adds	r2, r5, #1
 80005fa:	4211      	tst	r1, r2
 80005fc:	d077      	beq.n	80006ee <__aeabi_fadd+0x24e>
 80005fe:	2aff      	cmp	r2, #255	; 0xff
 8000600:	d0f5      	beq.n	80005ee <__aeabi_fadd+0x14e>
 8000602:	0015      	movs	r5, r2
 8000604:	4446      	add	r6, r8
 8000606:	0870      	lsrs	r0, r6, #1
 8000608:	0743      	lsls	r3, r0, #29
 800060a:	d000      	beq.n	800060e <__aeabi_fadd+0x16e>
 800060c:	e77e      	b.n	800050c <__aeabi_fadd+0x6c>
 800060e:	08c3      	lsrs	r3, r0, #3
 8000610:	2dff      	cmp	r5, #255	; 0xff
 8000612:	d00e      	beq.n	8000632 <__aeabi_fadd+0x192>
 8000614:	025b      	lsls	r3, r3, #9
 8000616:	0a5b      	lsrs	r3, r3, #9
 8000618:	469c      	mov	ip, r3
 800061a:	b2ea      	uxtb	r2, r5
 800061c:	e785      	b.n	800052a <__aeabi_fadd+0x8a>
 800061e:	2e00      	cmp	r6, #0
 8000620:	d007      	beq.n	8000632 <__aeabi_fadd+0x192>
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	03d2      	lsls	r2, r2, #15
 8000626:	4213      	tst	r3, r2
 8000628:	d003      	beq.n	8000632 <__aeabi_fadd+0x192>
 800062a:	4210      	tst	r0, r2
 800062c:	d101      	bne.n	8000632 <__aeabi_fadd+0x192>
 800062e:	000c      	movs	r4, r1
 8000630:	0003      	movs	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d0db      	beq.n	80005ee <__aeabi_fadd+0x14e>
 8000636:	2080      	movs	r0, #128	; 0x80
 8000638:	03c0      	lsls	r0, r0, #15
 800063a:	4318      	orrs	r0, r3
 800063c:	0240      	lsls	r0, r0, #9
 800063e:	0a43      	lsrs	r3, r0, #9
 8000640:	469c      	mov	ip, r3
 8000642:	22ff      	movs	r2, #255	; 0xff
 8000644:	e771      	b.n	800052a <__aeabi_fadd+0x8a>
 8000646:	2900      	cmp	r1, #0
 8000648:	d0d5      	beq.n	80005f6 <__aeabi_fadd+0x156>
 800064a:	1b7a      	subs	r2, r7, r5
 800064c:	2d00      	cmp	r5, #0
 800064e:	d160      	bne.n	8000712 <__aeabi_fadd+0x272>
 8000650:	4643      	mov	r3, r8
 8000652:	2b00      	cmp	r3, #0
 8000654:	d024      	beq.n	80006a0 <__aeabi_fadd+0x200>
 8000656:	1e53      	subs	r3, r2, #1
 8000658:	2a01      	cmp	r2, #1
 800065a:	d073      	beq.n	8000744 <__aeabi_fadd+0x2a4>
 800065c:	2aff      	cmp	r2, #255	; 0xff
 800065e:	d0e7      	beq.n	8000630 <__aeabi_fadd+0x190>
 8000660:	001a      	movs	r2, r3
 8000662:	2a1b      	cmp	r2, #27
 8000664:	dc00      	bgt.n	8000668 <__aeabi_fadd+0x1c8>
 8000666:	e085      	b.n	8000774 <__aeabi_fadd+0x2d4>
 8000668:	2001      	movs	r0, #1
 800066a:	003d      	movs	r5, r7
 800066c:	1980      	adds	r0, r0, r6
 800066e:	e785      	b.n	800057c <__aeabi_fadd+0xdc>
 8000670:	2320      	movs	r3, #32
 8000672:	003a      	movs	r2, r7
 8000674:	1b45      	subs	r5, r0, r5
 8000676:	0038      	movs	r0, r7
 8000678:	3501      	adds	r5, #1
 800067a:	40ea      	lsrs	r2, r5
 800067c:	1b5d      	subs	r5, r3, r5
 800067e:	40a8      	lsls	r0, r5
 8000680:	1e43      	subs	r3, r0, #1
 8000682:	4198      	sbcs	r0, r3
 8000684:	2500      	movs	r5, #0
 8000686:	4310      	orrs	r0, r2
 8000688:	e73e      	b.n	8000508 <__aeabi_fadd+0x68>
 800068a:	2320      	movs	r3, #32
 800068c:	0030      	movs	r0, r6
 800068e:	1a9b      	subs	r3, r3, r2
 8000690:	0031      	movs	r1, r6
 8000692:	4098      	lsls	r0, r3
 8000694:	40d1      	lsrs	r1, r2
 8000696:	1e43      	subs	r3, r0, #1
 8000698:	4198      	sbcs	r0, r3
 800069a:	4308      	orrs	r0, r1
 800069c:	e722      	b.n	80004e4 <__aeabi_fadd+0x44>
 800069e:	000c      	movs	r4, r1
 80006a0:	0003      	movs	r3, r0
 80006a2:	0015      	movs	r5, r2
 80006a4:	e7b4      	b.n	8000610 <__aeabi_fadd+0x170>
 80006a6:	2fff      	cmp	r7, #255	; 0xff
 80006a8:	d0c1      	beq.n	800062e <__aeabi_fadd+0x18e>
 80006aa:	2380      	movs	r3, #128	; 0x80
 80006ac:	4640      	mov	r0, r8
 80006ae:	04db      	lsls	r3, r3, #19
 80006b0:	4318      	orrs	r0, r3
 80006b2:	4680      	mov	r8, r0
 80006b4:	2a1b      	cmp	r2, #27
 80006b6:	dd51      	ble.n	800075c <__aeabi_fadd+0x2bc>
 80006b8:	2001      	movs	r0, #1
 80006ba:	000c      	movs	r4, r1
 80006bc:	003d      	movs	r5, r7
 80006be:	1a30      	subs	r0, r6, r0
 80006c0:	e712      	b.n	80004e8 <__aeabi_fadd+0x48>
 80006c2:	4643      	mov	r3, r8
 80006c4:	1b9f      	subs	r7, r3, r6
 80006c6:	017b      	lsls	r3, r7, #5
 80006c8:	d42b      	bmi.n	8000722 <__aeabi_fadd+0x282>
 80006ca:	2f00      	cmp	r7, #0
 80006cc:	d000      	beq.n	80006d0 <__aeabi_fadd+0x230>
 80006ce:	e710      	b.n	80004f2 <__aeabi_fadd+0x52>
 80006d0:	2300      	movs	r3, #0
 80006d2:	2400      	movs	r4, #0
 80006d4:	2200      	movs	r2, #0
 80006d6:	469c      	mov	ip, r3
 80006d8:	e727      	b.n	800052a <__aeabi_fadd+0x8a>
 80006da:	2320      	movs	r3, #32
 80006dc:	0032      	movs	r2, r6
 80006de:	0030      	movs	r0, r6
 80006e0:	40ca      	lsrs	r2, r1
 80006e2:	1a59      	subs	r1, r3, r1
 80006e4:	4088      	lsls	r0, r1
 80006e6:	1e43      	subs	r3, r0, #1
 80006e8:	4198      	sbcs	r0, r3
 80006ea:	4310      	orrs	r0, r2
 80006ec:	e745      	b.n	800057a <__aeabi_fadd+0xda>
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d14a      	bne.n	8000788 <__aeabi_fadd+0x2e8>
 80006f2:	4643      	mov	r3, r8
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d063      	beq.n	80007c0 <__aeabi_fadd+0x320>
 80006f8:	2200      	movs	r2, #0
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	d100      	bne.n	8000700 <__aeabi_fadd+0x260>
 80006fe:	e714      	b.n	800052a <__aeabi_fadd+0x8a>
 8000700:	0030      	movs	r0, r6
 8000702:	4440      	add	r0, r8
 8000704:	0143      	lsls	r3, r0, #5
 8000706:	d400      	bmi.n	800070a <__aeabi_fadd+0x26a>
 8000708:	e77e      	b.n	8000608 <__aeabi_fadd+0x168>
 800070a:	4b32      	ldr	r3, [pc, #200]	; (80007d4 <__aeabi_fadd+0x334>)
 800070c:	3501      	adds	r5, #1
 800070e:	4018      	ands	r0, r3
 8000710:	e77a      	b.n	8000608 <__aeabi_fadd+0x168>
 8000712:	2fff      	cmp	r7, #255	; 0xff
 8000714:	d08c      	beq.n	8000630 <__aeabi_fadd+0x190>
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	4641      	mov	r1, r8
 800071a:	04db      	lsls	r3, r3, #19
 800071c:	4319      	orrs	r1, r3
 800071e:	4688      	mov	r8, r1
 8000720:	e79f      	b.n	8000662 <__aeabi_fadd+0x1c2>
 8000722:	4643      	mov	r3, r8
 8000724:	000c      	movs	r4, r1
 8000726:	1af7      	subs	r7, r6, r3
 8000728:	e6e3      	b.n	80004f2 <__aeabi_fadd+0x52>
 800072a:	4642      	mov	r2, r8
 800072c:	2a00      	cmp	r2, #0
 800072e:	d000      	beq.n	8000732 <__aeabi_fadd+0x292>
 8000730:	e775      	b.n	800061e <__aeabi_fadd+0x17e>
 8000732:	2e00      	cmp	r6, #0
 8000734:	d000      	beq.n	8000738 <__aeabi_fadd+0x298>
 8000736:	e77a      	b.n	800062e <__aeabi_fadd+0x18e>
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	03db      	lsls	r3, r3, #15
 800073c:	2400      	movs	r4, #0
 800073e:	469c      	mov	ip, r3
 8000740:	22ff      	movs	r2, #255	; 0xff
 8000742:	e6f2      	b.n	800052a <__aeabi_fadd+0x8a>
 8000744:	0030      	movs	r0, r6
 8000746:	4440      	add	r0, r8
 8000748:	2501      	movs	r5, #1
 800074a:	0143      	lsls	r3, r0, #5
 800074c:	d400      	bmi.n	8000750 <__aeabi_fadd+0x2b0>
 800074e:	e75b      	b.n	8000608 <__aeabi_fadd+0x168>
 8000750:	2502      	movs	r5, #2
 8000752:	e718      	b.n	8000586 <__aeabi_fadd+0xe6>
 8000754:	4643      	mov	r3, r8
 8000756:	2501      	movs	r5, #1
 8000758:	1b98      	subs	r0, r3, r6
 800075a:	e6c5      	b.n	80004e8 <__aeabi_fadd+0x48>
 800075c:	2320      	movs	r3, #32
 800075e:	4644      	mov	r4, r8
 8000760:	4640      	mov	r0, r8
 8000762:	40d4      	lsrs	r4, r2
 8000764:	1a9a      	subs	r2, r3, r2
 8000766:	4090      	lsls	r0, r2
 8000768:	1e43      	subs	r3, r0, #1
 800076a:	4198      	sbcs	r0, r3
 800076c:	4320      	orrs	r0, r4
 800076e:	e7a4      	b.n	80006ba <__aeabi_fadd+0x21a>
 8000770:	000d      	movs	r5, r1
 8000772:	e74d      	b.n	8000610 <__aeabi_fadd+0x170>
 8000774:	2320      	movs	r3, #32
 8000776:	4641      	mov	r1, r8
 8000778:	4640      	mov	r0, r8
 800077a:	40d1      	lsrs	r1, r2
 800077c:	1a9a      	subs	r2, r3, r2
 800077e:	4090      	lsls	r0, r2
 8000780:	1e43      	subs	r3, r0, #1
 8000782:	4198      	sbcs	r0, r3
 8000784:	4308      	orrs	r0, r1
 8000786:	e770      	b.n	800066a <__aeabi_fadd+0x1ca>
 8000788:	4642      	mov	r2, r8
 800078a:	2a00      	cmp	r2, #0
 800078c:	d100      	bne.n	8000790 <__aeabi_fadd+0x2f0>
 800078e:	e74f      	b.n	8000630 <__aeabi_fadd+0x190>
 8000790:	2e00      	cmp	r6, #0
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0x2f6>
 8000794:	e74d      	b.n	8000632 <__aeabi_fadd+0x192>
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	03d2      	lsls	r2, r2, #15
 800079a:	4213      	tst	r3, r2
 800079c:	d100      	bne.n	80007a0 <__aeabi_fadd+0x300>
 800079e:	e748      	b.n	8000632 <__aeabi_fadd+0x192>
 80007a0:	4210      	tst	r0, r2
 80007a2:	d000      	beq.n	80007a6 <__aeabi_fadd+0x306>
 80007a4:	e745      	b.n	8000632 <__aeabi_fadd+0x192>
 80007a6:	0003      	movs	r3, r0
 80007a8:	e743      	b.n	8000632 <__aeabi_fadd+0x192>
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d090      	beq.n	80006d0 <__aeabi_fadd+0x230>
 80007ae:	000c      	movs	r4, r1
 80007b0:	4684      	mov	ip, r0
 80007b2:	2200      	movs	r2, #0
 80007b4:	e6b9      	b.n	800052a <__aeabi_fadd+0x8a>
 80007b6:	4643      	mov	r3, r8
 80007b8:	000c      	movs	r4, r1
 80007ba:	1af0      	subs	r0, r6, r3
 80007bc:	3501      	adds	r5, #1
 80007be:	e693      	b.n	80004e8 <__aeabi_fadd+0x48>
 80007c0:	4684      	mov	ip, r0
 80007c2:	2200      	movs	r2, #0
 80007c4:	e6b1      	b.n	800052a <__aeabi_fadd+0x8a>
 80007c6:	2800      	cmp	r0, #0
 80007c8:	d000      	beq.n	80007cc <__aeabi_fadd+0x32c>
 80007ca:	e71d      	b.n	8000608 <__aeabi_fadd+0x168>
 80007cc:	2300      	movs	r3, #0
 80007ce:	2400      	movs	r4, #0
 80007d0:	469c      	mov	ip, r3
 80007d2:	e6aa      	b.n	800052a <__aeabi_fadd+0x8a>
 80007d4:	fbffffff 	.word	0xfbffffff
 80007d8:	7dffffff 	.word	0x7dffffff

080007dc <__aeabi_fdiv>:
 80007dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007de:	464f      	mov	r7, r9
 80007e0:	4646      	mov	r6, r8
 80007e2:	46d6      	mov	lr, sl
 80007e4:	0245      	lsls	r5, r0, #9
 80007e6:	b5c0      	push	{r6, r7, lr}
 80007e8:	0047      	lsls	r7, r0, #1
 80007ea:	1c0c      	adds	r4, r1, #0
 80007ec:	0a6d      	lsrs	r5, r5, #9
 80007ee:	0e3f      	lsrs	r7, r7, #24
 80007f0:	0fc6      	lsrs	r6, r0, #31
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	d100      	bne.n	80007f8 <__aeabi_fdiv+0x1c>
 80007f6:	e070      	b.n	80008da <__aeabi_fdiv+0xfe>
 80007f8:	2fff      	cmp	r7, #255	; 0xff
 80007fa:	d100      	bne.n	80007fe <__aeabi_fdiv+0x22>
 80007fc:	e075      	b.n	80008ea <__aeabi_fdiv+0x10e>
 80007fe:	00eb      	lsls	r3, r5, #3
 8000800:	2580      	movs	r5, #128	; 0x80
 8000802:	04ed      	lsls	r5, r5, #19
 8000804:	431d      	orrs	r5, r3
 8000806:	2300      	movs	r3, #0
 8000808:	4699      	mov	r9, r3
 800080a:	469a      	mov	sl, r3
 800080c:	3f7f      	subs	r7, #127	; 0x7f
 800080e:	0260      	lsls	r0, r4, #9
 8000810:	0a43      	lsrs	r3, r0, #9
 8000812:	4698      	mov	r8, r3
 8000814:	0063      	lsls	r3, r4, #1
 8000816:	0e1b      	lsrs	r3, r3, #24
 8000818:	0fe4      	lsrs	r4, r4, #31
 800081a:	2b00      	cmp	r3, #0
 800081c:	d04e      	beq.n	80008bc <__aeabi_fdiv+0xe0>
 800081e:	2bff      	cmp	r3, #255	; 0xff
 8000820:	d046      	beq.n	80008b0 <__aeabi_fdiv+0xd4>
 8000822:	4642      	mov	r2, r8
 8000824:	00d0      	lsls	r0, r2, #3
 8000826:	2280      	movs	r2, #128	; 0x80
 8000828:	04d2      	lsls	r2, r2, #19
 800082a:	4302      	orrs	r2, r0
 800082c:	4690      	mov	r8, r2
 800082e:	2200      	movs	r2, #0
 8000830:	3b7f      	subs	r3, #127	; 0x7f
 8000832:	0031      	movs	r1, r6
 8000834:	1aff      	subs	r7, r7, r3
 8000836:	464b      	mov	r3, r9
 8000838:	4061      	eors	r1, r4
 800083a:	b2c9      	uxtb	r1, r1
 800083c:	4313      	orrs	r3, r2
 800083e:	2b0f      	cmp	r3, #15
 8000840:	d900      	bls.n	8000844 <__aeabi_fdiv+0x68>
 8000842:	e0b5      	b.n	80009b0 <__aeabi_fdiv+0x1d4>
 8000844:	486e      	ldr	r0, [pc, #440]	; (8000a00 <__aeabi_fdiv+0x224>)
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	58c3      	ldr	r3, [r0, r3]
 800084a:	469f      	mov	pc, r3
 800084c:	2300      	movs	r3, #0
 800084e:	4698      	mov	r8, r3
 8000850:	0026      	movs	r6, r4
 8000852:	4645      	mov	r5, r8
 8000854:	4692      	mov	sl, r2
 8000856:	4653      	mov	r3, sl
 8000858:	2b02      	cmp	r3, #2
 800085a:	d100      	bne.n	800085e <__aeabi_fdiv+0x82>
 800085c:	e089      	b.n	8000972 <__aeabi_fdiv+0x196>
 800085e:	2b03      	cmp	r3, #3
 8000860:	d100      	bne.n	8000864 <__aeabi_fdiv+0x88>
 8000862:	e09e      	b.n	80009a2 <__aeabi_fdiv+0x1c6>
 8000864:	2b01      	cmp	r3, #1
 8000866:	d018      	beq.n	800089a <__aeabi_fdiv+0xbe>
 8000868:	003b      	movs	r3, r7
 800086a:	337f      	adds	r3, #127	; 0x7f
 800086c:	2b00      	cmp	r3, #0
 800086e:	dd69      	ble.n	8000944 <__aeabi_fdiv+0x168>
 8000870:	076a      	lsls	r2, r5, #29
 8000872:	d004      	beq.n	800087e <__aeabi_fdiv+0xa2>
 8000874:	220f      	movs	r2, #15
 8000876:	402a      	ands	r2, r5
 8000878:	2a04      	cmp	r2, #4
 800087a:	d000      	beq.n	800087e <__aeabi_fdiv+0xa2>
 800087c:	3504      	adds	r5, #4
 800087e:	012a      	lsls	r2, r5, #4
 8000880:	d503      	bpl.n	800088a <__aeabi_fdiv+0xae>
 8000882:	4b60      	ldr	r3, [pc, #384]	; (8000a04 <__aeabi_fdiv+0x228>)
 8000884:	401d      	ands	r5, r3
 8000886:	003b      	movs	r3, r7
 8000888:	3380      	adds	r3, #128	; 0x80
 800088a:	2bfe      	cmp	r3, #254	; 0xfe
 800088c:	dd00      	ble.n	8000890 <__aeabi_fdiv+0xb4>
 800088e:	e070      	b.n	8000972 <__aeabi_fdiv+0x196>
 8000890:	01ad      	lsls	r5, r5, #6
 8000892:	0a6d      	lsrs	r5, r5, #9
 8000894:	b2d8      	uxtb	r0, r3
 8000896:	e002      	b.n	800089e <__aeabi_fdiv+0xc2>
 8000898:	000e      	movs	r6, r1
 800089a:	2000      	movs	r0, #0
 800089c:	2500      	movs	r5, #0
 800089e:	05c0      	lsls	r0, r0, #23
 80008a0:	4328      	orrs	r0, r5
 80008a2:	07f6      	lsls	r6, r6, #31
 80008a4:	4330      	orrs	r0, r6
 80008a6:	bce0      	pop	{r5, r6, r7}
 80008a8:	46ba      	mov	sl, r7
 80008aa:	46b1      	mov	r9, r6
 80008ac:	46a8      	mov	r8, r5
 80008ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008b0:	4643      	mov	r3, r8
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d13f      	bne.n	8000936 <__aeabi_fdiv+0x15a>
 80008b6:	2202      	movs	r2, #2
 80008b8:	3fff      	subs	r7, #255	; 0xff
 80008ba:	e003      	b.n	80008c4 <__aeabi_fdiv+0xe8>
 80008bc:	4643      	mov	r3, r8
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d12d      	bne.n	800091e <__aeabi_fdiv+0x142>
 80008c2:	2201      	movs	r2, #1
 80008c4:	0031      	movs	r1, r6
 80008c6:	464b      	mov	r3, r9
 80008c8:	4061      	eors	r1, r4
 80008ca:	b2c9      	uxtb	r1, r1
 80008cc:	4313      	orrs	r3, r2
 80008ce:	2b0f      	cmp	r3, #15
 80008d0:	d834      	bhi.n	800093c <__aeabi_fdiv+0x160>
 80008d2:	484d      	ldr	r0, [pc, #308]	; (8000a08 <__aeabi_fdiv+0x22c>)
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	58c3      	ldr	r3, [r0, r3]
 80008d8:	469f      	mov	pc, r3
 80008da:	2d00      	cmp	r5, #0
 80008dc:	d113      	bne.n	8000906 <__aeabi_fdiv+0x12a>
 80008de:	2304      	movs	r3, #4
 80008e0:	4699      	mov	r9, r3
 80008e2:	3b03      	subs	r3, #3
 80008e4:	2700      	movs	r7, #0
 80008e6:	469a      	mov	sl, r3
 80008e8:	e791      	b.n	800080e <__aeabi_fdiv+0x32>
 80008ea:	2d00      	cmp	r5, #0
 80008ec:	d105      	bne.n	80008fa <__aeabi_fdiv+0x11e>
 80008ee:	2308      	movs	r3, #8
 80008f0:	4699      	mov	r9, r3
 80008f2:	3b06      	subs	r3, #6
 80008f4:	27ff      	movs	r7, #255	; 0xff
 80008f6:	469a      	mov	sl, r3
 80008f8:	e789      	b.n	800080e <__aeabi_fdiv+0x32>
 80008fa:	230c      	movs	r3, #12
 80008fc:	4699      	mov	r9, r3
 80008fe:	3b09      	subs	r3, #9
 8000900:	27ff      	movs	r7, #255	; 0xff
 8000902:	469a      	mov	sl, r3
 8000904:	e783      	b.n	800080e <__aeabi_fdiv+0x32>
 8000906:	0028      	movs	r0, r5
 8000908:	f000 fcca 	bl	80012a0 <__clzsi2>
 800090c:	2776      	movs	r7, #118	; 0x76
 800090e:	1f43      	subs	r3, r0, #5
 8000910:	409d      	lsls	r5, r3
 8000912:	2300      	movs	r3, #0
 8000914:	427f      	negs	r7, r7
 8000916:	4699      	mov	r9, r3
 8000918:	469a      	mov	sl, r3
 800091a:	1a3f      	subs	r7, r7, r0
 800091c:	e777      	b.n	800080e <__aeabi_fdiv+0x32>
 800091e:	4640      	mov	r0, r8
 8000920:	f000 fcbe 	bl	80012a0 <__clzsi2>
 8000924:	4642      	mov	r2, r8
 8000926:	1f43      	subs	r3, r0, #5
 8000928:	409a      	lsls	r2, r3
 800092a:	2376      	movs	r3, #118	; 0x76
 800092c:	425b      	negs	r3, r3
 800092e:	4690      	mov	r8, r2
 8000930:	1a1b      	subs	r3, r3, r0
 8000932:	2200      	movs	r2, #0
 8000934:	e77d      	b.n	8000832 <__aeabi_fdiv+0x56>
 8000936:	23ff      	movs	r3, #255	; 0xff
 8000938:	2203      	movs	r2, #3
 800093a:	e77a      	b.n	8000832 <__aeabi_fdiv+0x56>
 800093c:	000e      	movs	r6, r1
 800093e:	20ff      	movs	r0, #255	; 0xff
 8000940:	2500      	movs	r5, #0
 8000942:	e7ac      	b.n	800089e <__aeabi_fdiv+0xc2>
 8000944:	2001      	movs	r0, #1
 8000946:	1ac0      	subs	r0, r0, r3
 8000948:	281b      	cmp	r0, #27
 800094a:	dca6      	bgt.n	800089a <__aeabi_fdiv+0xbe>
 800094c:	379e      	adds	r7, #158	; 0x9e
 800094e:	002a      	movs	r2, r5
 8000950:	40bd      	lsls	r5, r7
 8000952:	40c2      	lsrs	r2, r0
 8000954:	1e6b      	subs	r3, r5, #1
 8000956:	419d      	sbcs	r5, r3
 8000958:	4315      	orrs	r5, r2
 800095a:	076b      	lsls	r3, r5, #29
 800095c:	d004      	beq.n	8000968 <__aeabi_fdiv+0x18c>
 800095e:	230f      	movs	r3, #15
 8000960:	402b      	ands	r3, r5
 8000962:	2b04      	cmp	r3, #4
 8000964:	d000      	beq.n	8000968 <__aeabi_fdiv+0x18c>
 8000966:	3504      	adds	r5, #4
 8000968:	016b      	lsls	r3, r5, #5
 800096a:	d544      	bpl.n	80009f6 <__aeabi_fdiv+0x21a>
 800096c:	2001      	movs	r0, #1
 800096e:	2500      	movs	r5, #0
 8000970:	e795      	b.n	800089e <__aeabi_fdiv+0xc2>
 8000972:	20ff      	movs	r0, #255	; 0xff
 8000974:	2500      	movs	r5, #0
 8000976:	e792      	b.n	800089e <__aeabi_fdiv+0xc2>
 8000978:	2580      	movs	r5, #128	; 0x80
 800097a:	2600      	movs	r6, #0
 800097c:	20ff      	movs	r0, #255	; 0xff
 800097e:	03ed      	lsls	r5, r5, #15
 8000980:	e78d      	b.n	800089e <__aeabi_fdiv+0xc2>
 8000982:	2300      	movs	r3, #0
 8000984:	4698      	mov	r8, r3
 8000986:	2080      	movs	r0, #128	; 0x80
 8000988:	03c0      	lsls	r0, r0, #15
 800098a:	4205      	tst	r5, r0
 800098c:	d009      	beq.n	80009a2 <__aeabi_fdiv+0x1c6>
 800098e:	4643      	mov	r3, r8
 8000990:	4203      	tst	r3, r0
 8000992:	d106      	bne.n	80009a2 <__aeabi_fdiv+0x1c6>
 8000994:	4645      	mov	r5, r8
 8000996:	4305      	orrs	r5, r0
 8000998:	026d      	lsls	r5, r5, #9
 800099a:	0026      	movs	r6, r4
 800099c:	20ff      	movs	r0, #255	; 0xff
 800099e:	0a6d      	lsrs	r5, r5, #9
 80009a0:	e77d      	b.n	800089e <__aeabi_fdiv+0xc2>
 80009a2:	2080      	movs	r0, #128	; 0x80
 80009a4:	03c0      	lsls	r0, r0, #15
 80009a6:	4305      	orrs	r5, r0
 80009a8:	026d      	lsls	r5, r5, #9
 80009aa:	20ff      	movs	r0, #255	; 0xff
 80009ac:	0a6d      	lsrs	r5, r5, #9
 80009ae:	e776      	b.n	800089e <__aeabi_fdiv+0xc2>
 80009b0:	4642      	mov	r2, r8
 80009b2:	016b      	lsls	r3, r5, #5
 80009b4:	0150      	lsls	r0, r2, #5
 80009b6:	4283      	cmp	r3, r0
 80009b8:	d219      	bcs.n	80009ee <__aeabi_fdiv+0x212>
 80009ba:	221b      	movs	r2, #27
 80009bc:	2500      	movs	r5, #0
 80009be:	3f01      	subs	r7, #1
 80009c0:	2601      	movs	r6, #1
 80009c2:	001c      	movs	r4, r3
 80009c4:	006d      	lsls	r5, r5, #1
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	db01      	blt.n	80009d0 <__aeabi_fdiv+0x1f4>
 80009cc:	4298      	cmp	r0, r3
 80009ce:	d801      	bhi.n	80009d4 <__aeabi_fdiv+0x1f8>
 80009d0:	1a1b      	subs	r3, r3, r0
 80009d2:	4335      	orrs	r5, r6
 80009d4:	3a01      	subs	r2, #1
 80009d6:	2a00      	cmp	r2, #0
 80009d8:	d1f3      	bne.n	80009c2 <__aeabi_fdiv+0x1e6>
 80009da:	1e5a      	subs	r2, r3, #1
 80009dc:	4193      	sbcs	r3, r2
 80009de:	431d      	orrs	r5, r3
 80009e0:	003b      	movs	r3, r7
 80009e2:	337f      	adds	r3, #127	; 0x7f
 80009e4:	000e      	movs	r6, r1
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	dd00      	ble.n	80009ec <__aeabi_fdiv+0x210>
 80009ea:	e741      	b.n	8000870 <__aeabi_fdiv+0x94>
 80009ec:	e7aa      	b.n	8000944 <__aeabi_fdiv+0x168>
 80009ee:	221a      	movs	r2, #26
 80009f0:	2501      	movs	r5, #1
 80009f2:	1a1b      	subs	r3, r3, r0
 80009f4:	e7e4      	b.n	80009c0 <__aeabi_fdiv+0x1e4>
 80009f6:	01ad      	lsls	r5, r5, #6
 80009f8:	2000      	movs	r0, #0
 80009fa:	0a6d      	lsrs	r5, r5, #9
 80009fc:	e74f      	b.n	800089e <__aeabi_fdiv+0xc2>
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	08006d74 	.word	0x08006d74
 8000a04:	f7ffffff 	.word	0xf7ffffff
 8000a08:	08006db4 	.word	0x08006db4

08000a0c <__eqsf2>:
 8000a0c:	b570      	push	{r4, r5, r6, lr}
 8000a0e:	0042      	lsls	r2, r0, #1
 8000a10:	0245      	lsls	r5, r0, #9
 8000a12:	024e      	lsls	r6, r1, #9
 8000a14:	004c      	lsls	r4, r1, #1
 8000a16:	0fc3      	lsrs	r3, r0, #31
 8000a18:	0a6d      	lsrs	r5, r5, #9
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	0e12      	lsrs	r2, r2, #24
 8000a1e:	0a76      	lsrs	r6, r6, #9
 8000a20:	0e24      	lsrs	r4, r4, #24
 8000a22:	0fc9      	lsrs	r1, r1, #31
 8000a24:	2aff      	cmp	r2, #255	; 0xff
 8000a26:	d006      	beq.n	8000a36 <__eqsf2+0x2a>
 8000a28:	2cff      	cmp	r4, #255	; 0xff
 8000a2a:	d003      	beq.n	8000a34 <__eqsf2+0x28>
 8000a2c:	42a2      	cmp	r2, r4
 8000a2e:	d101      	bne.n	8000a34 <__eqsf2+0x28>
 8000a30:	42b5      	cmp	r5, r6
 8000a32:	d006      	beq.n	8000a42 <__eqsf2+0x36>
 8000a34:	bd70      	pop	{r4, r5, r6, pc}
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	d1fc      	bne.n	8000a34 <__eqsf2+0x28>
 8000a3a:	2cff      	cmp	r4, #255	; 0xff
 8000a3c:	d1fa      	bne.n	8000a34 <__eqsf2+0x28>
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	d1f8      	bne.n	8000a34 <__eqsf2+0x28>
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d006      	beq.n	8000a54 <__eqsf2+0x48>
 8000a46:	2001      	movs	r0, #1
 8000a48:	2a00      	cmp	r2, #0
 8000a4a:	d1f3      	bne.n	8000a34 <__eqsf2+0x28>
 8000a4c:	0028      	movs	r0, r5
 8000a4e:	1e43      	subs	r3, r0, #1
 8000a50:	4198      	sbcs	r0, r3
 8000a52:	e7ef      	b.n	8000a34 <__eqsf2+0x28>
 8000a54:	2000      	movs	r0, #0
 8000a56:	e7ed      	b.n	8000a34 <__eqsf2+0x28>

08000a58 <__gesf2>:
 8000a58:	b570      	push	{r4, r5, r6, lr}
 8000a5a:	0042      	lsls	r2, r0, #1
 8000a5c:	0245      	lsls	r5, r0, #9
 8000a5e:	024e      	lsls	r6, r1, #9
 8000a60:	004c      	lsls	r4, r1, #1
 8000a62:	0fc3      	lsrs	r3, r0, #31
 8000a64:	0a6d      	lsrs	r5, r5, #9
 8000a66:	0e12      	lsrs	r2, r2, #24
 8000a68:	0a76      	lsrs	r6, r6, #9
 8000a6a:	0e24      	lsrs	r4, r4, #24
 8000a6c:	0fc8      	lsrs	r0, r1, #31
 8000a6e:	2aff      	cmp	r2, #255	; 0xff
 8000a70:	d01b      	beq.n	8000aaa <__gesf2+0x52>
 8000a72:	2cff      	cmp	r4, #255	; 0xff
 8000a74:	d00e      	beq.n	8000a94 <__gesf2+0x3c>
 8000a76:	2a00      	cmp	r2, #0
 8000a78:	d11b      	bne.n	8000ab2 <__gesf2+0x5a>
 8000a7a:	2c00      	cmp	r4, #0
 8000a7c:	d101      	bne.n	8000a82 <__gesf2+0x2a>
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	d01c      	beq.n	8000abc <__gesf2+0x64>
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d00c      	beq.n	8000aa0 <__gesf2+0x48>
 8000a86:	4283      	cmp	r3, r0
 8000a88:	d01c      	beq.n	8000ac4 <__gesf2+0x6c>
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	1e58      	subs	r0, r3, #1
 8000a8e:	4008      	ands	r0, r1
 8000a90:	3801      	subs	r0, #1
 8000a92:	bd70      	pop	{r4, r5, r6, pc}
 8000a94:	2e00      	cmp	r6, #0
 8000a96:	d122      	bne.n	8000ade <__gesf2+0x86>
 8000a98:	2a00      	cmp	r2, #0
 8000a9a:	d1f4      	bne.n	8000a86 <__gesf2+0x2e>
 8000a9c:	2d00      	cmp	r5, #0
 8000a9e:	d1f2      	bne.n	8000a86 <__gesf2+0x2e>
 8000aa0:	2800      	cmp	r0, #0
 8000aa2:	d1f6      	bne.n	8000a92 <__gesf2+0x3a>
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	4240      	negs	r0, r0
 8000aa8:	e7f3      	b.n	8000a92 <__gesf2+0x3a>
 8000aaa:	2d00      	cmp	r5, #0
 8000aac:	d117      	bne.n	8000ade <__gesf2+0x86>
 8000aae:	2cff      	cmp	r4, #255	; 0xff
 8000ab0:	d0f0      	beq.n	8000a94 <__gesf2+0x3c>
 8000ab2:	2c00      	cmp	r4, #0
 8000ab4:	d1e7      	bne.n	8000a86 <__gesf2+0x2e>
 8000ab6:	2e00      	cmp	r6, #0
 8000ab8:	d1e5      	bne.n	8000a86 <__gesf2+0x2e>
 8000aba:	e7e6      	b.n	8000a8a <__gesf2+0x32>
 8000abc:	2000      	movs	r0, #0
 8000abe:	2d00      	cmp	r5, #0
 8000ac0:	d0e7      	beq.n	8000a92 <__gesf2+0x3a>
 8000ac2:	e7e2      	b.n	8000a8a <__gesf2+0x32>
 8000ac4:	42a2      	cmp	r2, r4
 8000ac6:	dc05      	bgt.n	8000ad4 <__gesf2+0x7c>
 8000ac8:	dbea      	blt.n	8000aa0 <__gesf2+0x48>
 8000aca:	42b5      	cmp	r5, r6
 8000acc:	d802      	bhi.n	8000ad4 <__gesf2+0x7c>
 8000ace:	d3e7      	bcc.n	8000aa0 <__gesf2+0x48>
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	e7de      	b.n	8000a92 <__gesf2+0x3a>
 8000ad4:	4243      	negs	r3, r0
 8000ad6:	4158      	adcs	r0, r3
 8000ad8:	0040      	lsls	r0, r0, #1
 8000ada:	3801      	subs	r0, #1
 8000adc:	e7d9      	b.n	8000a92 <__gesf2+0x3a>
 8000ade:	2002      	movs	r0, #2
 8000ae0:	4240      	negs	r0, r0
 8000ae2:	e7d6      	b.n	8000a92 <__gesf2+0x3a>

08000ae4 <__lesf2>:
 8000ae4:	b570      	push	{r4, r5, r6, lr}
 8000ae6:	0042      	lsls	r2, r0, #1
 8000ae8:	0245      	lsls	r5, r0, #9
 8000aea:	024e      	lsls	r6, r1, #9
 8000aec:	004c      	lsls	r4, r1, #1
 8000aee:	0fc3      	lsrs	r3, r0, #31
 8000af0:	0a6d      	lsrs	r5, r5, #9
 8000af2:	0e12      	lsrs	r2, r2, #24
 8000af4:	0a76      	lsrs	r6, r6, #9
 8000af6:	0e24      	lsrs	r4, r4, #24
 8000af8:	0fc8      	lsrs	r0, r1, #31
 8000afa:	2aff      	cmp	r2, #255	; 0xff
 8000afc:	d00b      	beq.n	8000b16 <__lesf2+0x32>
 8000afe:	2cff      	cmp	r4, #255	; 0xff
 8000b00:	d00d      	beq.n	8000b1e <__lesf2+0x3a>
 8000b02:	2a00      	cmp	r2, #0
 8000b04:	d11f      	bne.n	8000b46 <__lesf2+0x62>
 8000b06:	2c00      	cmp	r4, #0
 8000b08:	d116      	bne.n	8000b38 <__lesf2+0x54>
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d114      	bne.n	8000b38 <__lesf2+0x54>
 8000b0e:	2000      	movs	r0, #0
 8000b10:	2d00      	cmp	r5, #0
 8000b12:	d010      	beq.n	8000b36 <__lesf2+0x52>
 8000b14:	e009      	b.n	8000b2a <__lesf2+0x46>
 8000b16:	2d00      	cmp	r5, #0
 8000b18:	d10c      	bne.n	8000b34 <__lesf2+0x50>
 8000b1a:	2cff      	cmp	r4, #255	; 0xff
 8000b1c:	d113      	bne.n	8000b46 <__lesf2+0x62>
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	d108      	bne.n	8000b34 <__lesf2+0x50>
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	d008      	beq.n	8000b38 <__lesf2+0x54>
 8000b26:	4283      	cmp	r3, r0
 8000b28:	d012      	beq.n	8000b50 <__lesf2+0x6c>
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	1e58      	subs	r0, r3, #1
 8000b2e:	4008      	ands	r0, r1
 8000b30:	3801      	subs	r0, #1
 8000b32:	e000      	b.n	8000b36 <__lesf2+0x52>
 8000b34:	2002      	movs	r0, #2
 8000b36:	bd70      	pop	{r4, r5, r6, pc}
 8000b38:	2d00      	cmp	r5, #0
 8000b3a:	d1f4      	bne.n	8000b26 <__lesf2+0x42>
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	d1fa      	bne.n	8000b36 <__lesf2+0x52>
 8000b40:	2001      	movs	r0, #1
 8000b42:	4240      	negs	r0, r0
 8000b44:	e7f7      	b.n	8000b36 <__lesf2+0x52>
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	d1ed      	bne.n	8000b26 <__lesf2+0x42>
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d1eb      	bne.n	8000b26 <__lesf2+0x42>
 8000b4e:	e7ec      	b.n	8000b2a <__lesf2+0x46>
 8000b50:	42a2      	cmp	r2, r4
 8000b52:	dc05      	bgt.n	8000b60 <__lesf2+0x7c>
 8000b54:	dbf2      	blt.n	8000b3c <__lesf2+0x58>
 8000b56:	42b5      	cmp	r5, r6
 8000b58:	d802      	bhi.n	8000b60 <__lesf2+0x7c>
 8000b5a:	d3ef      	bcc.n	8000b3c <__lesf2+0x58>
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	e7ea      	b.n	8000b36 <__lesf2+0x52>
 8000b60:	4243      	negs	r3, r0
 8000b62:	4158      	adcs	r0, r3
 8000b64:	0040      	lsls	r0, r0, #1
 8000b66:	3801      	subs	r0, #1
 8000b68:	e7e5      	b.n	8000b36 <__lesf2+0x52>
 8000b6a:	46c0      	nop			; (mov r8, r8)

08000b6c <__aeabi_fmul>:
 8000b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b6e:	464f      	mov	r7, r9
 8000b70:	4646      	mov	r6, r8
 8000b72:	46d6      	mov	lr, sl
 8000b74:	0244      	lsls	r4, r0, #9
 8000b76:	0045      	lsls	r5, r0, #1
 8000b78:	b5c0      	push	{r6, r7, lr}
 8000b7a:	0a64      	lsrs	r4, r4, #9
 8000b7c:	1c0f      	adds	r7, r1, #0
 8000b7e:	0e2d      	lsrs	r5, r5, #24
 8000b80:	0fc6      	lsrs	r6, r0, #31
 8000b82:	2d00      	cmp	r5, #0
 8000b84:	d100      	bne.n	8000b88 <__aeabi_fmul+0x1c>
 8000b86:	e08d      	b.n	8000ca4 <__aeabi_fmul+0x138>
 8000b88:	2dff      	cmp	r5, #255	; 0xff
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fmul+0x22>
 8000b8c:	e092      	b.n	8000cb4 <__aeabi_fmul+0x148>
 8000b8e:	2300      	movs	r3, #0
 8000b90:	2080      	movs	r0, #128	; 0x80
 8000b92:	4699      	mov	r9, r3
 8000b94:	469a      	mov	sl, r3
 8000b96:	00e4      	lsls	r4, r4, #3
 8000b98:	04c0      	lsls	r0, r0, #19
 8000b9a:	4304      	orrs	r4, r0
 8000b9c:	3d7f      	subs	r5, #127	; 0x7f
 8000b9e:	0278      	lsls	r0, r7, #9
 8000ba0:	0a43      	lsrs	r3, r0, #9
 8000ba2:	4698      	mov	r8, r3
 8000ba4:	007b      	lsls	r3, r7, #1
 8000ba6:	0e1b      	lsrs	r3, r3, #24
 8000ba8:	0fff      	lsrs	r7, r7, #31
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d100      	bne.n	8000bb0 <__aeabi_fmul+0x44>
 8000bae:	e070      	b.n	8000c92 <__aeabi_fmul+0x126>
 8000bb0:	2bff      	cmp	r3, #255	; 0xff
 8000bb2:	d100      	bne.n	8000bb6 <__aeabi_fmul+0x4a>
 8000bb4:	e086      	b.n	8000cc4 <__aeabi_fmul+0x158>
 8000bb6:	4642      	mov	r2, r8
 8000bb8:	00d0      	lsls	r0, r2, #3
 8000bba:	2280      	movs	r2, #128	; 0x80
 8000bbc:	3b7f      	subs	r3, #127	; 0x7f
 8000bbe:	18ed      	adds	r5, r5, r3
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	04d2      	lsls	r2, r2, #19
 8000bc4:	4302      	orrs	r2, r0
 8000bc6:	4690      	mov	r8, r2
 8000bc8:	469c      	mov	ip, r3
 8000bca:	0031      	movs	r1, r6
 8000bcc:	464b      	mov	r3, r9
 8000bce:	4079      	eors	r1, r7
 8000bd0:	1c68      	adds	r0, r5, #1
 8000bd2:	2b0f      	cmp	r3, #15
 8000bd4:	d81c      	bhi.n	8000c10 <__aeabi_fmul+0xa4>
 8000bd6:	4a76      	ldr	r2, [pc, #472]	; (8000db0 <__aeabi_fmul+0x244>)
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	58d3      	ldr	r3, [r2, r3]
 8000bdc:	469f      	mov	pc, r3
 8000bde:	0039      	movs	r1, r7
 8000be0:	4644      	mov	r4, r8
 8000be2:	46e2      	mov	sl, ip
 8000be4:	4653      	mov	r3, sl
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d00f      	beq.n	8000c0a <__aeabi_fmul+0x9e>
 8000bea:	2b03      	cmp	r3, #3
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_fmul+0x84>
 8000bee:	e0d7      	b.n	8000da0 <__aeabi_fmul+0x234>
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d137      	bne.n	8000c64 <__aeabi_fmul+0xf8>
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	2400      	movs	r4, #0
 8000bf8:	05c0      	lsls	r0, r0, #23
 8000bfa:	4320      	orrs	r0, r4
 8000bfc:	07c9      	lsls	r1, r1, #31
 8000bfe:	4308      	orrs	r0, r1
 8000c00:	bce0      	pop	{r5, r6, r7}
 8000c02:	46ba      	mov	sl, r7
 8000c04:	46b1      	mov	r9, r6
 8000c06:	46a8      	mov	r8, r5
 8000c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c0a:	20ff      	movs	r0, #255	; 0xff
 8000c0c:	2400      	movs	r4, #0
 8000c0e:	e7f3      	b.n	8000bf8 <__aeabi_fmul+0x8c>
 8000c10:	0c26      	lsrs	r6, r4, #16
 8000c12:	0424      	lsls	r4, r4, #16
 8000c14:	0c22      	lsrs	r2, r4, #16
 8000c16:	4644      	mov	r4, r8
 8000c18:	0424      	lsls	r4, r4, #16
 8000c1a:	0c24      	lsrs	r4, r4, #16
 8000c1c:	4643      	mov	r3, r8
 8000c1e:	0027      	movs	r7, r4
 8000c20:	0c1b      	lsrs	r3, r3, #16
 8000c22:	4357      	muls	r7, r2
 8000c24:	4374      	muls	r4, r6
 8000c26:	435a      	muls	r2, r3
 8000c28:	435e      	muls	r6, r3
 8000c2a:	1912      	adds	r2, r2, r4
 8000c2c:	0c3b      	lsrs	r3, r7, #16
 8000c2e:	189b      	adds	r3, r3, r2
 8000c30:	429c      	cmp	r4, r3
 8000c32:	d903      	bls.n	8000c3c <__aeabi_fmul+0xd0>
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	0252      	lsls	r2, r2, #9
 8000c38:	4694      	mov	ip, r2
 8000c3a:	4466      	add	r6, ip
 8000c3c:	043f      	lsls	r7, r7, #16
 8000c3e:	041a      	lsls	r2, r3, #16
 8000c40:	0c3f      	lsrs	r7, r7, #16
 8000c42:	19d2      	adds	r2, r2, r7
 8000c44:	0194      	lsls	r4, r2, #6
 8000c46:	1e67      	subs	r7, r4, #1
 8000c48:	41bc      	sbcs	r4, r7
 8000c4a:	0c1b      	lsrs	r3, r3, #16
 8000c4c:	0e92      	lsrs	r2, r2, #26
 8000c4e:	199b      	adds	r3, r3, r6
 8000c50:	4314      	orrs	r4, r2
 8000c52:	019b      	lsls	r3, r3, #6
 8000c54:	431c      	orrs	r4, r3
 8000c56:	011b      	lsls	r3, r3, #4
 8000c58:	d400      	bmi.n	8000c5c <__aeabi_fmul+0xf0>
 8000c5a:	e09b      	b.n	8000d94 <__aeabi_fmul+0x228>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	0862      	lsrs	r2, r4, #1
 8000c60:	401c      	ands	r4, r3
 8000c62:	4314      	orrs	r4, r2
 8000c64:	0002      	movs	r2, r0
 8000c66:	327f      	adds	r2, #127	; 0x7f
 8000c68:	2a00      	cmp	r2, #0
 8000c6a:	dd64      	ble.n	8000d36 <__aeabi_fmul+0x1ca>
 8000c6c:	0763      	lsls	r3, r4, #29
 8000c6e:	d004      	beq.n	8000c7a <__aeabi_fmul+0x10e>
 8000c70:	230f      	movs	r3, #15
 8000c72:	4023      	ands	r3, r4
 8000c74:	2b04      	cmp	r3, #4
 8000c76:	d000      	beq.n	8000c7a <__aeabi_fmul+0x10e>
 8000c78:	3404      	adds	r4, #4
 8000c7a:	0123      	lsls	r3, r4, #4
 8000c7c:	d503      	bpl.n	8000c86 <__aeabi_fmul+0x11a>
 8000c7e:	0002      	movs	r2, r0
 8000c80:	4b4c      	ldr	r3, [pc, #304]	; (8000db4 <__aeabi_fmul+0x248>)
 8000c82:	3280      	adds	r2, #128	; 0x80
 8000c84:	401c      	ands	r4, r3
 8000c86:	2afe      	cmp	r2, #254	; 0xfe
 8000c88:	dcbf      	bgt.n	8000c0a <__aeabi_fmul+0x9e>
 8000c8a:	01a4      	lsls	r4, r4, #6
 8000c8c:	0a64      	lsrs	r4, r4, #9
 8000c8e:	b2d0      	uxtb	r0, r2
 8000c90:	e7b2      	b.n	8000bf8 <__aeabi_fmul+0x8c>
 8000c92:	4643      	mov	r3, r8
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d13d      	bne.n	8000d14 <__aeabi_fmul+0x1a8>
 8000c98:	464a      	mov	r2, r9
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	431a      	orrs	r2, r3
 8000c9e:	4691      	mov	r9, r2
 8000ca0:	469c      	mov	ip, r3
 8000ca2:	e792      	b.n	8000bca <__aeabi_fmul+0x5e>
 8000ca4:	2c00      	cmp	r4, #0
 8000ca6:	d129      	bne.n	8000cfc <__aeabi_fmul+0x190>
 8000ca8:	2304      	movs	r3, #4
 8000caa:	4699      	mov	r9, r3
 8000cac:	3b03      	subs	r3, #3
 8000cae:	2500      	movs	r5, #0
 8000cb0:	469a      	mov	sl, r3
 8000cb2:	e774      	b.n	8000b9e <__aeabi_fmul+0x32>
 8000cb4:	2c00      	cmp	r4, #0
 8000cb6:	d11b      	bne.n	8000cf0 <__aeabi_fmul+0x184>
 8000cb8:	2308      	movs	r3, #8
 8000cba:	4699      	mov	r9, r3
 8000cbc:	3b06      	subs	r3, #6
 8000cbe:	25ff      	movs	r5, #255	; 0xff
 8000cc0:	469a      	mov	sl, r3
 8000cc2:	e76c      	b.n	8000b9e <__aeabi_fmul+0x32>
 8000cc4:	4643      	mov	r3, r8
 8000cc6:	35ff      	adds	r5, #255	; 0xff
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d10b      	bne.n	8000ce4 <__aeabi_fmul+0x178>
 8000ccc:	2302      	movs	r3, #2
 8000cce:	464a      	mov	r2, r9
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	4691      	mov	r9, r2
 8000cd4:	469c      	mov	ip, r3
 8000cd6:	e778      	b.n	8000bca <__aeabi_fmul+0x5e>
 8000cd8:	4653      	mov	r3, sl
 8000cda:	0031      	movs	r1, r6
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_fmul+0x176>
 8000ce0:	e783      	b.n	8000bea <__aeabi_fmul+0x7e>
 8000ce2:	e792      	b.n	8000c0a <__aeabi_fmul+0x9e>
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	464a      	mov	r2, r9
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	4691      	mov	r9, r2
 8000cec:	469c      	mov	ip, r3
 8000cee:	e76c      	b.n	8000bca <__aeabi_fmul+0x5e>
 8000cf0:	230c      	movs	r3, #12
 8000cf2:	4699      	mov	r9, r3
 8000cf4:	3b09      	subs	r3, #9
 8000cf6:	25ff      	movs	r5, #255	; 0xff
 8000cf8:	469a      	mov	sl, r3
 8000cfa:	e750      	b.n	8000b9e <__aeabi_fmul+0x32>
 8000cfc:	0020      	movs	r0, r4
 8000cfe:	f000 facf 	bl	80012a0 <__clzsi2>
 8000d02:	2576      	movs	r5, #118	; 0x76
 8000d04:	1f43      	subs	r3, r0, #5
 8000d06:	409c      	lsls	r4, r3
 8000d08:	2300      	movs	r3, #0
 8000d0a:	426d      	negs	r5, r5
 8000d0c:	4699      	mov	r9, r3
 8000d0e:	469a      	mov	sl, r3
 8000d10:	1a2d      	subs	r5, r5, r0
 8000d12:	e744      	b.n	8000b9e <__aeabi_fmul+0x32>
 8000d14:	4640      	mov	r0, r8
 8000d16:	f000 fac3 	bl	80012a0 <__clzsi2>
 8000d1a:	4642      	mov	r2, r8
 8000d1c:	1f43      	subs	r3, r0, #5
 8000d1e:	409a      	lsls	r2, r3
 8000d20:	2300      	movs	r3, #0
 8000d22:	1a2d      	subs	r5, r5, r0
 8000d24:	4690      	mov	r8, r2
 8000d26:	469c      	mov	ip, r3
 8000d28:	3d76      	subs	r5, #118	; 0x76
 8000d2a:	e74e      	b.n	8000bca <__aeabi_fmul+0x5e>
 8000d2c:	2480      	movs	r4, #128	; 0x80
 8000d2e:	2100      	movs	r1, #0
 8000d30:	20ff      	movs	r0, #255	; 0xff
 8000d32:	03e4      	lsls	r4, r4, #15
 8000d34:	e760      	b.n	8000bf8 <__aeabi_fmul+0x8c>
 8000d36:	2301      	movs	r3, #1
 8000d38:	1a9b      	subs	r3, r3, r2
 8000d3a:	2b1b      	cmp	r3, #27
 8000d3c:	dd00      	ble.n	8000d40 <__aeabi_fmul+0x1d4>
 8000d3e:	e759      	b.n	8000bf4 <__aeabi_fmul+0x88>
 8000d40:	0022      	movs	r2, r4
 8000d42:	309e      	adds	r0, #158	; 0x9e
 8000d44:	40da      	lsrs	r2, r3
 8000d46:	4084      	lsls	r4, r0
 8000d48:	0013      	movs	r3, r2
 8000d4a:	1e62      	subs	r2, r4, #1
 8000d4c:	4194      	sbcs	r4, r2
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	0763      	lsls	r3, r4, #29
 8000d52:	d004      	beq.n	8000d5e <__aeabi_fmul+0x1f2>
 8000d54:	230f      	movs	r3, #15
 8000d56:	4023      	ands	r3, r4
 8000d58:	2b04      	cmp	r3, #4
 8000d5a:	d000      	beq.n	8000d5e <__aeabi_fmul+0x1f2>
 8000d5c:	3404      	adds	r4, #4
 8000d5e:	0163      	lsls	r3, r4, #5
 8000d60:	d51a      	bpl.n	8000d98 <__aeabi_fmul+0x22c>
 8000d62:	2001      	movs	r0, #1
 8000d64:	2400      	movs	r4, #0
 8000d66:	e747      	b.n	8000bf8 <__aeabi_fmul+0x8c>
 8000d68:	2080      	movs	r0, #128	; 0x80
 8000d6a:	03c0      	lsls	r0, r0, #15
 8000d6c:	4204      	tst	r4, r0
 8000d6e:	d009      	beq.n	8000d84 <__aeabi_fmul+0x218>
 8000d70:	4643      	mov	r3, r8
 8000d72:	4203      	tst	r3, r0
 8000d74:	d106      	bne.n	8000d84 <__aeabi_fmul+0x218>
 8000d76:	4644      	mov	r4, r8
 8000d78:	4304      	orrs	r4, r0
 8000d7a:	0264      	lsls	r4, r4, #9
 8000d7c:	0039      	movs	r1, r7
 8000d7e:	20ff      	movs	r0, #255	; 0xff
 8000d80:	0a64      	lsrs	r4, r4, #9
 8000d82:	e739      	b.n	8000bf8 <__aeabi_fmul+0x8c>
 8000d84:	2080      	movs	r0, #128	; 0x80
 8000d86:	03c0      	lsls	r0, r0, #15
 8000d88:	4304      	orrs	r4, r0
 8000d8a:	0264      	lsls	r4, r4, #9
 8000d8c:	0031      	movs	r1, r6
 8000d8e:	20ff      	movs	r0, #255	; 0xff
 8000d90:	0a64      	lsrs	r4, r4, #9
 8000d92:	e731      	b.n	8000bf8 <__aeabi_fmul+0x8c>
 8000d94:	0028      	movs	r0, r5
 8000d96:	e765      	b.n	8000c64 <__aeabi_fmul+0xf8>
 8000d98:	01a4      	lsls	r4, r4, #6
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	0a64      	lsrs	r4, r4, #9
 8000d9e:	e72b      	b.n	8000bf8 <__aeabi_fmul+0x8c>
 8000da0:	2080      	movs	r0, #128	; 0x80
 8000da2:	03c0      	lsls	r0, r0, #15
 8000da4:	4304      	orrs	r4, r0
 8000da6:	0264      	lsls	r4, r4, #9
 8000da8:	20ff      	movs	r0, #255	; 0xff
 8000daa:	0a64      	lsrs	r4, r4, #9
 8000dac:	e724      	b.n	8000bf8 <__aeabi_fmul+0x8c>
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	08006df4 	.word	0x08006df4
 8000db4:	f7ffffff 	.word	0xf7ffffff

08000db8 <__aeabi_fsub>:
 8000db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dba:	46ce      	mov	lr, r9
 8000dbc:	4647      	mov	r7, r8
 8000dbe:	0243      	lsls	r3, r0, #9
 8000dc0:	0a5b      	lsrs	r3, r3, #9
 8000dc2:	024e      	lsls	r6, r1, #9
 8000dc4:	00da      	lsls	r2, r3, #3
 8000dc6:	4694      	mov	ip, r2
 8000dc8:	0a72      	lsrs	r2, r6, #9
 8000dca:	4691      	mov	r9, r2
 8000dcc:	0045      	lsls	r5, r0, #1
 8000dce:	004a      	lsls	r2, r1, #1
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	0e2d      	lsrs	r5, r5, #24
 8000dd4:	001f      	movs	r7, r3
 8000dd6:	0fc4      	lsrs	r4, r0, #31
 8000dd8:	0e12      	lsrs	r2, r2, #24
 8000dda:	0fc9      	lsrs	r1, r1, #31
 8000ddc:	09b6      	lsrs	r6, r6, #6
 8000dde:	2aff      	cmp	r2, #255	; 0xff
 8000de0:	d05b      	beq.n	8000e9a <__aeabi_fsub+0xe2>
 8000de2:	2001      	movs	r0, #1
 8000de4:	4041      	eors	r1, r0
 8000de6:	428c      	cmp	r4, r1
 8000de8:	d039      	beq.n	8000e5e <__aeabi_fsub+0xa6>
 8000dea:	1aa8      	subs	r0, r5, r2
 8000dec:	2800      	cmp	r0, #0
 8000dee:	dd5a      	ble.n	8000ea6 <__aeabi_fsub+0xee>
 8000df0:	2a00      	cmp	r2, #0
 8000df2:	d06a      	beq.n	8000eca <__aeabi_fsub+0x112>
 8000df4:	2dff      	cmp	r5, #255	; 0xff
 8000df6:	d100      	bne.n	8000dfa <__aeabi_fsub+0x42>
 8000df8:	e0d9      	b.n	8000fae <__aeabi_fsub+0x1f6>
 8000dfa:	2280      	movs	r2, #128	; 0x80
 8000dfc:	04d2      	lsls	r2, r2, #19
 8000dfe:	4316      	orrs	r6, r2
 8000e00:	281b      	cmp	r0, #27
 8000e02:	dc00      	bgt.n	8000e06 <__aeabi_fsub+0x4e>
 8000e04:	e0e9      	b.n	8000fda <__aeabi_fsub+0x222>
 8000e06:	2001      	movs	r0, #1
 8000e08:	4663      	mov	r3, ip
 8000e0a:	1a18      	subs	r0, r3, r0
 8000e0c:	0143      	lsls	r3, r0, #5
 8000e0e:	d400      	bmi.n	8000e12 <__aeabi_fsub+0x5a>
 8000e10:	e0b4      	b.n	8000f7c <__aeabi_fsub+0x1c4>
 8000e12:	0180      	lsls	r0, r0, #6
 8000e14:	0987      	lsrs	r7, r0, #6
 8000e16:	0038      	movs	r0, r7
 8000e18:	f000 fa42 	bl	80012a0 <__clzsi2>
 8000e1c:	3805      	subs	r0, #5
 8000e1e:	4087      	lsls	r7, r0
 8000e20:	4285      	cmp	r5, r0
 8000e22:	dc00      	bgt.n	8000e26 <__aeabi_fsub+0x6e>
 8000e24:	e0cc      	b.n	8000fc0 <__aeabi_fsub+0x208>
 8000e26:	1a2d      	subs	r5, r5, r0
 8000e28:	48b5      	ldr	r0, [pc, #724]	; (8001100 <__aeabi_fsub+0x348>)
 8000e2a:	4038      	ands	r0, r7
 8000e2c:	0743      	lsls	r3, r0, #29
 8000e2e:	d004      	beq.n	8000e3a <__aeabi_fsub+0x82>
 8000e30:	230f      	movs	r3, #15
 8000e32:	4003      	ands	r3, r0
 8000e34:	2b04      	cmp	r3, #4
 8000e36:	d000      	beq.n	8000e3a <__aeabi_fsub+0x82>
 8000e38:	3004      	adds	r0, #4
 8000e3a:	0143      	lsls	r3, r0, #5
 8000e3c:	d400      	bmi.n	8000e40 <__aeabi_fsub+0x88>
 8000e3e:	e0a0      	b.n	8000f82 <__aeabi_fsub+0x1ca>
 8000e40:	1c6a      	adds	r2, r5, #1
 8000e42:	2dfe      	cmp	r5, #254	; 0xfe
 8000e44:	d100      	bne.n	8000e48 <__aeabi_fsub+0x90>
 8000e46:	e08d      	b.n	8000f64 <__aeabi_fsub+0x1ac>
 8000e48:	0180      	lsls	r0, r0, #6
 8000e4a:	0a47      	lsrs	r7, r0, #9
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	05d0      	lsls	r0, r2, #23
 8000e50:	4338      	orrs	r0, r7
 8000e52:	07e4      	lsls	r4, r4, #31
 8000e54:	4320      	orrs	r0, r4
 8000e56:	bcc0      	pop	{r6, r7}
 8000e58:	46b9      	mov	r9, r7
 8000e5a:	46b0      	mov	r8, r6
 8000e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e5e:	1aa8      	subs	r0, r5, r2
 8000e60:	4680      	mov	r8, r0
 8000e62:	2800      	cmp	r0, #0
 8000e64:	dd45      	ble.n	8000ef2 <__aeabi_fsub+0x13a>
 8000e66:	2a00      	cmp	r2, #0
 8000e68:	d070      	beq.n	8000f4c <__aeabi_fsub+0x194>
 8000e6a:	2dff      	cmp	r5, #255	; 0xff
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_fsub+0xb8>
 8000e6e:	e09e      	b.n	8000fae <__aeabi_fsub+0x1f6>
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	04db      	lsls	r3, r3, #19
 8000e74:	431e      	orrs	r6, r3
 8000e76:	4643      	mov	r3, r8
 8000e78:	2b1b      	cmp	r3, #27
 8000e7a:	dc00      	bgt.n	8000e7e <__aeabi_fsub+0xc6>
 8000e7c:	e0d2      	b.n	8001024 <__aeabi_fsub+0x26c>
 8000e7e:	2001      	movs	r0, #1
 8000e80:	4460      	add	r0, ip
 8000e82:	0143      	lsls	r3, r0, #5
 8000e84:	d57a      	bpl.n	8000f7c <__aeabi_fsub+0x1c4>
 8000e86:	3501      	adds	r5, #1
 8000e88:	2dff      	cmp	r5, #255	; 0xff
 8000e8a:	d06b      	beq.n	8000f64 <__aeabi_fsub+0x1ac>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	4a9d      	ldr	r2, [pc, #628]	; (8001104 <__aeabi_fsub+0x34c>)
 8000e90:	4003      	ands	r3, r0
 8000e92:	0840      	lsrs	r0, r0, #1
 8000e94:	4010      	ands	r0, r2
 8000e96:	4318      	orrs	r0, r3
 8000e98:	e7c8      	b.n	8000e2c <__aeabi_fsub+0x74>
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d020      	beq.n	8000ee0 <__aeabi_fsub+0x128>
 8000e9e:	428c      	cmp	r4, r1
 8000ea0:	d023      	beq.n	8000eea <__aeabi_fsub+0x132>
 8000ea2:	0028      	movs	r0, r5
 8000ea4:	38ff      	subs	r0, #255	; 0xff
 8000ea6:	2800      	cmp	r0, #0
 8000ea8:	d039      	beq.n	8000f1e <__aeabi_fsub+0x166>
 8000eaa:	1b57      	subs	r7, r2, r5
 8000eac:	2d00      	cmp	r5, #0
 8000eae:	d000      	beq.n	8000eb2 <__aeabi_fsub+0xfa>
 8000eb0:	e09d      	b.n	8000fee <__aeabi_fsub+0x236>
 8000eb2:	4663      	mov	r3, ip
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fsub+0x102>
 8000eb8:	e0db      	b.n	8001072 <__aeabi_fsub+0x2ba>
 8000eba:	1e7b      	subs	r3, r7, #1
 8000ebc:	2f01      	cmp	r7, #1
 8000ebe:	d100      	bne.n	8000ec2 <__aeabi_fsub+0x10a>
 8000ec0:	e10d      	b.n	80010de <__aeabi_fsub+0x326>
 8000ec2:	2fff      	cmp	r7, #255	; 0xff
 8000ec4:	d071      	beq.n	8000faa <__aeabi_fsub+0x1f2>
 8000ec6:	001f      	movs	r7, r3
 8000ec8:	e098      	b.n	8000ffc <__aeabi_fsub+0x244>
 8000eca:	2e00      	cmp	r6, #0
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_fsub+0x118>
 8000ece:	e0a7      	b.n	8001020 <__aeabi_fsub+0x268>
 8000ed0:	1e42      	subs	r2, r0, #1
 8000ed2:	2801      	cmp	r0, #1
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_fsub+0x120>
 8000ed6:	e0e6      	b.n	80010a6 <__aeabi_fsub+0x2ee>
 8000ed8:	28ff      	cmp	r0, #255	; 0xff
 8000eda:	d068      	beq.n	8000fae <__aeabi_fsub+0x1f6>
 8000edc:	0010      	movs	r0, r2
 8000ede:	e78f      	b.n	8000e00 <__aeabi_fsub+0x48>
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	4041      	eors	r1, r0
 8000ee4:	42a1      	cmp	r1, r4
 8000ee6:	d000      	beq.n	8000eea <__aeabi_fsub+0x132>
 8000ee8:	e77f      	b.n	8000dea <__aeabi_fsub+0x32>
 8000eea:	20ff      	movs	r0, #255	; 0xff
 8000eec:	4240      	negs	r0, r0
 8000eee:	4680      	mov	r8, r0
 8000ef0:	44a8      	add	r8, r5
 8000ef2:	4640      	mov	r0, r8
 8000ef4:	2800      	cmp	r0, #0
 8000ef6:	d038      	beq.n	8000f6a <__aeabi_fsub+0x1b2>
 8000ef8:	1b51      	subs	r1, r2, r5
 8000efa:	2d00      	cmp	r5, #0
 8000efc:	d100      	bne.n	8000f00 <__aeabi_fsub+0x148>
 8000efe:	e0ae      	b.n	800105e <__aeabi_fsub+0x2a6>
 8000f00:	2aff      	cmp	r2, #255	; 0xff
 8000f02:	d100      	bne.n	8000f06 <__aeabi_fsub+0x14e>
 8000f04:	e0df      	b.n	80010c6 <__aeabi_fsub+0x30e>
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	4660      	mov	r0, ip
 8000f0a:	04db      	lsls	r3, r3, #19
 8000f0c:	4318      	orrs	r0, r3
 8000f0e:	4684      	mov	ip, r0
 8000f10:	291b      	cmp	r1, #27
 8000f12:	dc00      	bgt.n	8000f16 <__aeabi_fsub+0x15e>
 8000f14:	e0d9      	b.n	80010ca <__aeabi_fsub+0x312>
 8000f16:	2001      	movs	r0, #1
 8000f18:	0015      	movs	r5, r2
 8000f1a:	1980      	adds	r0, r0, r6
 8000f1c:	e7b1      	b.n	8000e82 <__aeabi_fsub+0xca>
 8000f1e:	20fe      	movs	r0, #254	; 0xfe
 8000f20:	1c6a      	adds	r2, r5, #1
 8000f22:	4210      	tst	r0, r2
 8000f24:	d171      	bne.n	800100a <__aeabi_fsub+0x252>
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	d000      	beq.n	8000f2c <__aeabi_fsub+0x174>
 8000f2a:	e0a6      	b.n	800107a <__aeabi_fsub+0x2c2>
 8000f2c:	4663      	mov	r3, ip
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d100      	bne.n	8000f34 <__aeabi_fsub+0x17c>
 8000f32:	e0d9      	b.n	80010e8 <__aeabi_fsub+0x330>
 8000f34:	2200      	movs	r2, #0
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d100      	bne.n	8000f3c <__aeabi_fsub+0x184>
 8000f3a:	e788      	b.n	8000e4e <__aeabi_fsub+0x96>
 8000f3c:	1b98      	subs	r0, r3, r6
 8000f3e:	0143      	lsls	r3, r0, #5
 8000f40:	d400      	bmi.n	8000f44 <__aeabi_fsub+0x18c>
 8000f42:	e0e1      	b.n	8001108 <__aeabi_fsub+0x350>
 8000f44:	4663      	mov	r3, ip
 8000f46:	000c      	movs	r4, r1
 8000f48:	1af0      	subs	r0, r6, r3
 8000f4a:	e76f      	b.n	8000e2c <__aeabi_fsub+0x74>
 8000f4c:	2e00      	cmp	r6, #0
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_fsub+0x19a>
 8000f50:	e0b7      	b.n	80010c2 <__aeabi_fsub+0x30a>
 8000f52:	0002      	movs	r2, r0
 8000f54:	3a01      	subs	r2, #1
 8000f56:	2801      	cmp	r0, #1
 8000f58:	d100      	bne.n	8000f5c <__aeabi_fsub+0x1a4>
 8000f5a:	e09c      	b.n	8001096 <__aeabi_fsub+0x2de>
 8000f5c:	28ff      	cmp	r0, #255	; 0xff
 8000f5e:	d026      	beq.n	8000fae <__aeabi_fsub+0x1f6>
 8000f60:	4690      	mov	r8, r2
 8000f62:	e788      	b.n	8000e76 <__aeabi_fsub+0xbe>
 8000f64:	22ff      	movs	r2, #255	; 0xff
 8000f66:	2700      	movs	r7, #0
 8000f68:	e771      	b.n	8000e4e <__aeabi_fsub+0x96>
 8000f6a:	20fe      	movs	r0, #254	; 0xfe
 8000f6c:	1c6a      	adds	r2, r5, #1
 8000f6e:	4210      	tst	r0, r2
 8000f70:	d064      	beq.n	800103c <__aeabi_fsub+0x284>
 8000f72:	2aff      	cmp	r2, #255	; 0xff
 8000f74:	d0f6      	beq.n	8000f64 <__aeabi_fsub+0x1ac>
 8000f76:	0015      	movs	r5, r2
 8000f78:	4466      	add	r6, ip
 8000f7a:	0870      	lsrs	r0, r6, #1
 8000f7c:	0743      	lsls	r3, r0, #29
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fsub+0x1ca>
 8000f80:	e756      	b.n	8000e30 <__aeabi_fsub+0x78>
 8000f82:	08c3      	lsrs	r3, r0, #3
 8000f84:	2dff      	cmp	r5, #255	; 0xff
 8000f86:	d012      	beq.n	8000fae <__aeabi_fsub+0x1f6>
 8000f88:	025b      	lsls	r3, r3, #9
 8000f8a:	0a5f      	lsrs	r7, r3, #9
 8000f8c:	b2ea      	uxtb	r2, r5
 8000f8e:	e75e      	b.n	8000e4e <__aeabi_fsub+0x96>
 8000f90:	4662      	mov	r2, ip
 8000f92:	2a00      	cmp	r2, #0
 8000f94:	d100      	bne.n	8000f98 <__aeabi_fsub+0x1e0>
 8000f96:	e096      	b.n	80010c6 <__aeabi_fsub+0x30e>
 8000f98:	2e00      	cmp	r6, #0
 8000f9a:	d008      	beq.n	8000fae <__aeabi_fsub+0x1f6>
 8000f9c:	2280      	movs	r2, #128	; 0x80
 8000f9e:	03d2      	lsls	r2, r2, #15
 8000fa0:	4213      	tst	r3, r2
 8000fa2:	d004      	beq.n	8000fae <__aeabi_fsub+0x1f6>
 8000fa4:	4648      	mov	r0, r9
 8000fa6:	4210      	tst	r0, r2
 8000fa8:	d101      	bne.n	8000fae <__aeabi_fsub+0x1f6>
 8000faa:	000c      	movs	r4, r1
 8000fac:	464b      	mov	r3, r9
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d0d8      	beq.n	8000f64 <__aeabi_fsub+0x1ac>
 8000fb2:	2780      	movs	r7, #128	; 0x80
 8000fb4:	03ff      	lsls	r7, r7, #15
 8000fb6:	431f      	orrs	r7, r3
 8000fb8:	027f      	lsls	r7, r7, #9
 8000fba:	22ff      	movs	r2, #255	; 0xff
 8000fbc:	0a7f      	lsrs	r7, r7, #9
 8000fbe:	e746      	b.n	8000e4e <__aeabi_fsub+0x96>
 8000fc0:	2320      	movs	r3, #32
 8000fc2:	003a      	movs	r2, r7
 8000fc4:	1b45      	subs	r5, r0, r5
 8000fc6:	0038      	movs	r0, r7
 8000fc8:	3501      	adds	r5, #1
 8000fca:	40ea      	lsrs	r2, r5
 8000fcc:	1b5d      	subs	r5, r3, r5
 8000fce:	40a8      	lsls	r0, r5
 8000fd0:	1e43      	subs	r3, r0, #1
 8000fd2:	4198      	sbcs	r0, r3
 8000fd4:	2500      	movs	r5, #0
 8000fd6:	4310      	orrs	r0, r2
 8000fd8:	e728      	b.n	8000e2c <__aeabi_fsub+0x74>
 8000fda:	2320      	movs	r3, #32
 8000fdc:	1a1b      	subs	r3, r3, r0
 8000fde:	0032      	movs	r2, r6
 8000fe0:	409e      	lsls	r6, r3
 8000fe2:	40c2      	lsrs	r2, r0
 8000fe4:	0030      	movs	r0, r6
 8000fe6:	1e43      	subs	r3, r0, #1
 8000fe8:	4198      	sbcs	r0, r3
 8000fea:	4310      	orrs	r0, r2
 8000fec:	e70c      	b.n	8000e08 <__aeabi_fsub+0x50>
 8000fee:	2aff      	cmp	r2, #255	; 0xff
 8000ff0:	d0db      	beq.n	8000faa <__aeabi_fsub+0x1f2>
 8000ff2:	2380      	movs	r3, #128	; 0x80
 8000ff4:	4660      	mov	r0, ip
 8000ff6:	04db      	lsls	r3, r3, #19
 8000ff8:	4318      	orrs	r0, r3
 8000ffa:	4684      	mov	ip, r0
 8000ffc:	2f1b      	cmp	r7, #27
 8000ffe:	dd56      	ble.n	80010ae <__aeabi_fsub+0x2f6>
 8001000:	2001      	movs	r0, #1
 8001002:	000c      	movs	r4, r1
 8001004:	0015      	movs	r5, r2
 8001006:	1a30      	subs	r0, r6, r0
 8001008:	e700      	b.n	8000e0c <__aeabi_fsub+0x54>
 800100a:	4663      	mov	r3, ip
 800100c:	1b9f      	subs	r7, r3, r6
 800100e:	017b      	lsls	r3, r7, #5
 8001010:	d43d      	bmi.n	800108e <__aeabi_fsub+0x2d6>
 8001012:	2f00      	cmp	r7, #0
 8001014:	d000      	beq.n	8001018 <__aeabi_fsub+0x260>
 8001016:	e6fe      	b.n	8000e16 <__aeabi_fsub+0x5e>
 8001018:	2400      	movs	r4, #0
 800101a:	2200      	movs	r2, #0
 800101c:	2700      	movs	r7, #0
 800101e:	e716      	b.n	8000e4e <__aeabi_fsub+0x96>
 8001020:	0005      	movs	r5, r0
 8001022:	e7af      	b.n	8000f84 <__aeabi_fsub+0x1cc>
 8001024:	0032      	movs	r2, r6
 8001026:	4643      	mov	r3, r8
 8001028:	4641      	mov	r1, r8
 800102a:	40da      	lsrs	r2, r3
 800102c:	2320      	movs	r3, #32
 800102e:	1a5b      	subs	r3, r3, r1
 8001030:	409e      	lsls	r6, r3
 8001032:	0030      	movs	r0, r6
 8001034:	1e43      	subs	r3, r0, #1
 8001036:	4198      	sbcs	r0, r3
 8001038:	4310      	orrs	r0, r2
 800103a:	e721      	b.n	8000e80 <__aeabi_fsub+0xc8>
 800103c:	2d00      	cmp	r5, #0
 800103e:	d1a7      	bne.n	8000f90 <__aeabi_fsub+0x1d8>
 8001040:	4663      	mov	r3, ip
 8001042:	2b00      	cmp	r3, #0
 8001044:	d059      	beq.n	80010fa <__aeabi_fsub+0x342>
 8001046:	2200      	movs	r2, #0
 8001048:	2e00      	cmp	r6, #0
 800104a:	d100      	bne.n	800104e <__aeabi_fsub+0x296>
 800104c:	e6ff      	b.n	8000e4e <__aeabi_fsub+0x96>
 800104e:	0030      	movs	r0, r6
 8001050:	4460      	add	r0, ip
 8001052:	0143      	lsls	r3, r0, #5
 8001054:	d592      	bpl.n	8000f7c <__aeabi_fsub+0x1c4>
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <__aeabi_fsub+0x348>)
 8001058:	3501      	adds	r5, #1
 800105a:	4018      	ands	r0, r3
 800105c:	e78e      	b.n	8000f7c <__aeabi_fsub+0x1c4>
 800105e:	4663      	mov	r3, ip
 8001060:	2b00      	cmp	r3, #0
 8001062:	d047      	beq.n	80010f4 <__aeabi_fsub+0x33c>
 8001064:	1e4b      	subs	r3, r1, #1
 8001066:	2901      	cmp	r1, #1
 8001068:	d015      	beq.n	8001096 <__aeabi_fsub+0x2de>
 800106a:	29ff      	cmp	r1, #255	; 0xff
 800106c:	d02b      	beq.n	80010c6 <__aeabi_fsub+0x30e>
 800106e:	0019      	movs	r1, r3
 8001070:	e74e      	b.n	8000f10 <__aeabi_fsub+0x158>
 8001072:	000c      	movs	r4, r1
 8001074:	464b      	mov	r3, r9
 8001076:	003d      	movs	r5, r7
 8001078:	e784      	b.n	8000f84 <__aeabi_fsub+0x1cc>
 800107a:	4662      	mov	r2, ip
 800107c:	2a00      	cmp	r2, #0
 800107e:	d18b      	bne.n	8000f98 <__aeabi_fsub+0x1e0>
 8001080:	2e00      	cmp	r6, #0
 8001082:	d192      	bne.n	8000faa <__aeabi_fsub+0x1f2>
 8001084:	2780      	movs	r7, #128	; 0x80
 8001086:	2400      	movs	r4, #0
 8001088:	22ff      	movs	r2, #255	; 0xff
 800108a:	03ff      	lsls	r7, r7, #15
 800108c:	e6df      	b.n	8000e4e <__aeabi_fsub+0x96>
 800108e:	4663      	mov	r3, ip
 8001090:	000c      	movs	r4, r1
 8001092:	1af7      	subs	r7, r6, r3
 8001094:	e6bf      	b.n	8000e16 <__aeabi_fsub+0x5e>
 8001096:	0030      	movs	r0, r6
 8001098:	4460      	add	r0, ip
 800109a:	2501      	movs	r5, #1
 800109c:	0143      	lsls	r3, r0, #5
 800109e:	d400      	bmi.n	80010a2 <__aeabi_fsub+0x2ea>
 80010a0:	e76c      	b.n	8000f7c <__aeabi_fsub+0x1c4>
 80010a2:	2502      	movs	r5, #2
 80010a4:	e6f2      	b.n	8000e8c <__aeabi_fsub+0xd4>
 80010a6:	4663      	mov	r3, ip
 80010a8:	2501      	movs	r5, #1
 80010aa:	1b98      	subs	r0, r3, r6
 80010ac:	e6ae      	b.n	8000e0c <__aeabi_fsub+0x54>
 80010ae:	2320      	movs	r3, #32
 80010b0:	4664      	mov	r4, ip
 80010b2:	4660      	mov	r0, ip
 80010b4:	40fc      	lsrs	r4, r7
 80010b6:	1bdf      	subs	r7, r3, r7
 80010b8:	40b8      	lsls	r0, r7
 80010ba:	1e43      	subs	r3, r0, #1
 80010bc:	4198      	sbcs	r0, r3
 80010be:	4320      	orrs	r0, r4
 80010c0:	e79f      	b.n	8001002 <__aeabi_fsub+0x24a>
 80010c2:	0005      	movs	r5, r0
 80010c4:	e75e      	b.n	8000f84 <__aeabi_fsub+0x1cc>
 80010c6:	464b      	mov	r3, r9
 80010c8:	e771      	b.n	8000fae <__aeabi_fsub+0x1f6>
 80010ca:	2320      	movs	r3, #32
 80010cc:	4665      	mov	r5, ip
 80010ce:	4660      	mov	r0, ip
 80010d0:	40cd      	lsrs	r5, r1
 80010d2:	1a59      	subs	r1, r3, r1
 80010d4:	4088      	lsls	r0, r1
 80010d6:	1e43      	subs	r3, r0, #1
 80010d8:	4198      	sbcs	r0, r3
 80010da:	4328      	orrs	r0, r5
 80010dc:	e71c      	b.n	8000f18 <__aeabi_fsub+0x160>
 80010de:	4663      	mov	r3, ip
 80010e0:	000c      	movs	r4, r1
 80010e2:	2501      	movs	r5, #1
 80010e4:	1af0      	subs	r0, r6, r3
 80010e6:	e691      	b.n	8000e0c <__aeabi_fsub+0x54>
 80010e8:	2e00      	cmp	r6, #0
 80010ea:	d095      	beq.n	8001018 <__aeabi_fsub+0x260>
 80010ec:	000c      	movs	r4, r1
 80010ee:	464f      	mov	r7, r9
 80010f0:	2200      	movs	r2, #0
 80010f2:	e6ac      	b.n	8000e4e <__aeabi_fsub+0x96>
 80010f4:	464b      	mov	r3, r9
 80010f6:	000d      	movs	r5, r1
 80010f8:	e744      	b.n	8000f84 <__aeabi_fsub+0x1cc>
 80010fa:	464f      	mov	r7, r9
 80010fc:	2200      	movs	r2, #0
 80010fe:	e6a6      	b.n	8000e4e <__aeabi_fsub+0x96>
 8001100:	fbffffff 	.word	0xfbffffff
 8001104:	7dffffff 	.word	0x7dffffff
 8001108:	2800      	cmp	r0, #0
 800110a:	d000      	beq.n	800110e <__aeabi_fsub+0x356>
 800110c:	e736      	b.n	8000f7c <__aeabi_fsub+0x1c4>
 800110e:	2400      	movs	r4, #0
 8001110:	2700      	movs	r7, #0
 8001112:	e69c      	b.n	8000e4e <__aeabi_fsub+0x96>

08001114 <__aeabi_fcmpun>:
 8001114:	0243      	lsls	r3, r0, #9
 8001116:	024a      	lsls	r2, r1, #9
 8001118:	0040      	lsls	r0, r0, #1
 800111a:	0049      	lsls	r1, r1, #1
 800111c:	0a5b      	lsrs	r3, r3, #9
 800111e:	0a52      	lsrs	r2, r2, #9
 8001120:	0e09      	lsrs	r1, r1, #24
 8001122:	0e00      	lsrs	r0, r0, #24
 8001124:	28ff      	cmp	r0, #255	; 0xff
 8001126:	d006      	beq.n	8001136 <__aeabi_fcmpun+0x22>
 8001128:	2000      	movs	r0, #0
 800112a:	29ff      	cmp	r1, #255	; 0xff
 800112c:	d102      	bne.n	8001134 <__aeabi_fcmpun+0x20>
 800112e:	1e53      	subs	r3, r2, #1
 8001130:	419a      	sbcs	r2, r3
 8001132:	0010      	movs	r0, r2
 8001134:	4770      	bx	lr
 8001136:	38fe      	subs	r0, #254	; 0xfe
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1fb      	bne.n	8001134 <__aeabi_fcmpun+0x20>
 800113c:	e7f4      	b.n	8001128 <__aeabi_fcmpun+0x14>
 800113e:	46c0      	nop			; (mov r8, r8)

08001140 <__aeabi_f2iz>:
 8001140:	0241      	lsls	r1, r0, #9
 8001142:	0042      	lsls	r2, r0, #1
 8001144:	0fc3      	lsrs	r3, r0, #31
 8001146:	0a49      	lsrs	r1, r1, #9
 8001148:	2000      	movs	r0, #0
 800114a:	0e12      	lsrs	r2, r2, #24
 800114c:	2a7e      	cmp	r2, #126	; 0x7e
 800114e:	dd03      	ble.n	8001158 <__aeabi_f2iz+0x18>
 8001150:	2a9d      	cmp	r2, #157	; 0x9d
 8001152:	dd02      	ble.n	800115a <__aeabi_f2iz+0x1a>
 8001154:	4a09      	ldr	r2, [pc, #36]	; (800117c <__aeabi_f2iz+0x3c>)
 8001156:	1898      	adds	r0, r3, r2
 8001158:	4770      	bx	lr
 800115a:	2080      	movs	r0, #128	; 0x80
 800115c:	0400      	lsls	r0, r0, #16
 800115e:	4301      	orrs	r1, r0
 8001160:	2a95      	cmp	r2, #149	; 0x95
 8001162:	dc07      	bgt.n	8001174 <__aeabi_f2iz+0x34>
 8001164:	2096      	movs	r0, #150	; 0x96
 8001166:	1a82      	subs	r2, r0, r2
 8001168:	40d1      	lsrs	r1, r2
 800116a:	4248      	negs	r0, r1
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f3      	bne.n	8001158 <__aeabi_f2iz+0x18>
 8001170:	0008      	movs	r0, r1
 8001172:	e7f1      	b.n	8001158 <__aeabi_f2iz+0x18>
 8001174:	3a96      	subs	r2, #150	; 0x96
 8001176:	4091      	lsls	r1, r2
 8001178:	e7f7      	b.n	800116a <__aeabi_f2iz+0x2a>
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	7fffffff 	.word	0x7fffffff

08001180 <__aeabi_i2f>:
 8001180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001182:	2800      	cmp	r0, #0
 8001184:	d013      	beq.n	80011ae <__aeabi_i2f+0x2e>
 8001186:	17c3      	asrs	r3, r0, #31
 8001188:	18c6      	adds	r6, r0, r3
 800118a:	405e      	eors	r6, r3
 800118c:	0fc4      	lsrs	r4, r0, #31
 800118e:	0030      	movs	r0, r6
 8001190:	f000 f886 	bl	80012a0 <__clzsi2>
 8001194:	239e      	movs	r3, #158	; 0x9e
 8001196:	0005      	movs	r5, r0
 8001198:	1a1b      	subs	r3, r3, r0
 800119a:	2b96      	cmp	r3, #150	; 0x96
 800119c:	dc0f      	bgt.n	80011be <__aeabi_i2f+0x3e>
 800119e:	2808      	cmp	r0, #8
 80011a0:	dd01      	ble.n	80011a6 <__aeabi_i2f+0x26>
 80011a2:	3d08      	subs	r5, #8
 80011a4:	40ae      	lsls	r6, r5
 80011a6:	0276      	lsls	r6, r6, #9
 80011a8:	0a76      	lsrs	r6, r6, #9
 80011aa:	b2d8      	uxtb	r0, r3
 80011ac:	e002      	b.n	80011b4 <__aeabi_i2f+0x34>
 80011ae:	2400      	movs	r4, #0
 80011b0:	2000      	movs	r0, #0
 80011b2:	2600      	movs	r6, #0
 80011b4:	05c0      	lsls	r0, r0, #23
 80011b6:	4330      	orrs	r0, r6
 80011b8:	07e4      	lsls	r4, r4, #31
 80011ba:	4320      	orrs	r0, r4
 80011bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011be:	2b99      	cmp	r3, #153	; 0x99
 80011c0:	dd0c      	ble.n	80011dc <__aeabi_i2f+0x5c>
 80011c2:	2205      	movs	r2, #5
 80011c4:	0031      	movs	r1, r6
 80011c6:	1a12      	subs	r2, r2, r0
 80011c8:	40d1      	lsrs	r1, r2
 80011ca:	000a      	movs	r2, r1
 80011cc:	0001      	movs	r1, r0
 80011ce:	0030      	movs	r0, r6
 80011d0:	311b      	adds	r1, #27
 80011d2:	4088      	lsls	r0, r1
 80011d4:	1e41      	subs	r1, r0, #1
 80011d6:	4188      	sbcs	r0, r1
 80011d8:	4302      	orrs	r2, r0
 80011da:	0016      	movs	r6, r2
 80011dc:	2d05      	cmp	r5, #5
 80011de:	dc12      	bgt.n	8001206 <__aeabi_i2f+0x86>
 80011e0:	0031      	movs	r1, r6
 80011e2:	4f0d      	ldr	r7, [pc, #52]	; (8001218 <__aeabi_i2f+0x98>)
 80011e4:	4039      	ands	r1, r7
 80011e6:	0772      	lsls	r2, r6, #29
 80011e8:	d009      	beq.n	80011fe <__aeabi_i2f+0x7e>
 80011ea:	200f      	movs	r0, #15
 80011ec:	4030      	ands	r0, r6
 80011ee:	2804      	cmp	r0, #4
 80011f0:	d005      	beq.n	80011fe <__aeabi_i2f+0x7e>
 80011f2:	3104      	adds	r1, #4
 80011f4:	014a      	lsls	r2, r1, #5
 80011f6:	d502      	bpl.n	80011fe <__aeabi_i2f+0x7e>
 80011f8:	239f      	movs	r3, #159	; 0x9f
 80011fa:	4039      	ands	r1, r7
 80011fc:	1b5b      	subs	r3, r3, r5
 80011fe:	0189      	lsls	r1, r1, #6
 8001200:	0a4e      	lsrs	r6, r1, #9
 8001202:	b2d8      	uxtb	r0, r3
 8001204:	e7d6      	b.n	80011b4 <__aeabi_i2f+0x34>
 8001206:	1f6a      	subs	r2, r5, #5
 8001208:	4096      	lsls	r6, r2
 800120a:	0031      	movs	r1, r6
 800120c:	4f02      	ldr	r7, [pc, #8]	; (8001218 <__aeabi_i2f+0x98>)
 800120e:	4039      	ands	r1, r7
 8001210:	0772      	lsls	r2, r6, #29
 8001212:	d0f4      	beq.n	80011fe <__aeabi_i2f+0x7e>
 8001214:	e7e9      	b.n	80011ea <__aeabi_i2f+0x6a>
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	fbffffff 	.word	0xfbffffff

0800121c <__aeabi_ui2f>:
 800121c:	b570      	push	{r4, r5, r6, lr}
 800121e:	1e05      	subs	r5, r0, #0
 8001220:	d00e      	beq.n	8001240 <__aeabi_ui2f+0x24>
 8001222:	f000 f83d 	bl	80012a0 <__clzsi2>
 8001226:	239e      	movs	r3, #158	; 0x9e
 8001228:	0004      	movs	r4, r0
 800122a:	1a1b      	subs	r3, r3, r0
 800122c:	2b96      	cmp	r3, #150	; 0x96
 800122e:	dc0c      	bgt.n	800124a <__aeabi_ui2f+0x2e>
 8001230:	2808      	cmp	r0, #8
 8001232:	dd01      	ble.n	8001238 <__aeabi_ui2f+0x1c>
 8001234:	3c08      	subs	r4, #8
 8001236:	40a5      	lsls	r5, r4
 8001238:	026d      	lsls	r5, r5, #9
 800123a:	0a6d      	lsrs	r5, r5, #9
 800123c:	b2d8      	uxtb	r0, r3
 800123e:	e001      	b.n	8001244 <__aeabi_ui2f+0x28>
 8001240:	2000      	movs	r0, #0
 8001242:	2500      	movs	r5, #0
 8001244:	05c0      	lsls	r0, r0, #23
 8001246:	4328      	orrs	r0, r5
 8001248:	bd70      	pop	{r4, r5, r6, pc}
 800124a:	2b99      	cmp	r3, #153	; 0x99
 800124c:	dd09      	ble.n	8001262 <__aeabi_ui2f+0x46>
 800124e:	0002      	movs	r2, r0
 8001250:	0029      	movs	r1, r5
 8001252:	321b      	adds	r2, #27
 8001254:	4091      	lsls	r1, r2
 8001256:	1e4a      	subs	r2, r1, #1
 8001258:	4191      	sbcs	r1, r2
 800125a:	2205      	movs	r2, #5
 800125c:	1a12      	subs	r2, r2, r0
 800125e:	40d5      	lsrs	r5, r2
 8001260:	430d      	orrs	r5, r1
 8001262:	2c05      	cmp	r4, #5
 8001264:	dc12      	bgt.n	800128c <__aeabi_ui2f+0x70>
 8001266:	0029      	movs	r1, r5
 8001268:	4e0c      	ldr	r6, [pc, #48]	; (800129c <__aeabi_ui2f+0x80>)
 800126a:	4031      	ands	r1, r6
 800126c:	076a      	lsls	r2, r5, #29
 800126e:	d009      	beq.n	8001284 <__aeabi_ui2f+0x68>
 8001270:	200f      	movs	r0, #15
 8001272:	4028      	ands	r0, r5
 8001274:	2804      	cmp	r0, #4
 8001276:	d005      	beq.n	8001284 <__aeabi_ui2f+0x68>
 8001278:	3104      	adds	r1, #4
 800127a:	014a      	lsls	r2, r1, #5
 800127c:	d502      	bpl.n	8001284 <__aeabi_ui2f+0x68>
 800127e:	239f      	movs	r3, #159	; 0x9f
 8001280:	4031      	ands	r1, r6
 8001282:	1b1b      	subs	r3, r3, r4
 8001284:	0189      	lsls	r1, r1, #6
 8001286:	0a4d      	lsrs	r5, r1, #9
 8001288:	b2d8      	uxtb	r0, r3
 800128a:	e7db      	b.n	8001244 <__aeabi_ui2f+0x28>
 800128c:	1f62      	subs	r2, r4, #5
 800128e:	4095      	lsls	r5, r2
 8001290:	0029      	movs	r1, r5
 8001292:	4e02      	ldr	r6, [pc, #8]	; (800129c <__aeabi_ui2f+0x80>)
 8001294:	4031      	ands	r1, r6
 8001296:	076a      	lsls	r2, r5, #29
 8001298:	d0f4      	beq.n	8001284 <__aeabi_ui2f+0x68>
 800129a:	e7e9      	b.n	8001270 <__aeabi_ui2f+0x54>
 800129c:	fbffffff 	.word	0xfbffffff

080012a0 <__clzsi2>:
 80012a0:	211c      	movs	r1, #28
 80012a2:	2301      	movs	r3, #1
 80012a4:	041b      	lsls	r3, r3, #16
 80012a6:	4298      	cmp	r0, r3
 80012a8:	d301      	bcc.n	80012ae <__clzsi2+0xe>
 80012aa:	0c00      	lsrs	r0, r0, #16
 80012ac:	3910      	subs	r1, #16
 80012ae:	0a1b      	lsrs	r3, r3, #8
 80012b0:	4298      	cmp	r0, r3
 80012b2:	d301      	bcc.n	80012b8 <__clzsi2+0x18>
 80012b4:	0a00      	lsrs	r0, r0, #8
 80012b6:	3908      	subs	r1, #8
 80012b8:	091b      	lsrs	r3, r3, #4
 80012ba:	4298      	cmp	r0, r3
 80012bc:	d301      	bcc.n	80012c2 <__clzsi2+0x22>
 80012be:	0900      	lsrs	r0, r0, #4
 80012c0:	3904      	subs	r1, #4
 80012c2:	a202      	add	r2, pc, #8	; (adr r2, 80012cc <__clzsi2+0x2c>)
 80012c4:	5c10      	ldrb	r0, [r2, r0]
 80012c6:	1840      	adds	r0, r0, r1
 80012c8:	4770      	bx	lr
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	02020304 	.word	0x02020304
 80012d0:	01010101 	.word	0x01010101
	...

080012dc <ad8363_get_dbm>:
 *      Author: sigmadev
 */

#include "ad8363.h"

uint8_t ad8363_get_dbm(AD8363_t *ad,uint16_t value) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	000a      	movs	r2, r1
 80012e6:	1cbb      	adds	r3, r7, #2
 80012e8:	801a      	strh	r2, [r3, #0]

	float m = (float) (AD8363_DBM_MAX - AD8363_DBM_MIN)
			/ (float) (ad->max - ad->min);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	001a      	movs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	885b      	ldrh	r3, [r3, #2]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	0018      	movs	r0, r3
 80012f8:	f7ff ff42 	bl	8001180 <__aeabi_i2f>
 80012fc:	1c03      	adds	r3, r0, #0
	float m = (float) (AD8363_DBM_MAX - AD8363_DBM_MIN)
 80012fe:	1c19      	adds	r1, r3, #0
 8001300:	481f      	ldr	r0, [pc, #124]	; (8001380 <ad8363_get_dbm+0xa4>)
 8001302:	f7ff fa6b 	bl	80007dc <__aeabi_fdiv>
 8001306:	1c03      	adds	r3, r0, #0
 8001308:	60fb      	str	r3, [r7, #12]
	float b = AD8363_DBM_MAX -ad->max * m;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	0018      	movs	r0, r3
 8001310:	f7ff ff36 	bl	8001180 <__aeabi_i2f>
 8001314:	1c03      	adds	r3, r0, #0
 8001316:	68f9      	ldr	r1, [r7, #12]
 8001318:	1c18      	adds	r0, r3, #0
 800131a:	f7ff fc27 	bl	8000b6c <__aeabi_fmul>
 800131e:	1c03      	adds	r3, r0, #0
 8001320:	1c19      	adds	r1, r3, #0
 8001322:	2000      	movs	r0, #0
 8001324:	f7ff fd48 	bl	8000db8 <__aeabi_fsub>
 8001328:	1c03      	adds	r3, r0, #0
 800132a:	60bb      	str	r3, [r7, #8]

	if (value > ad->max) {
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	1cba      	adds	r2, r7, #2
 8001332:	8812      	ldrh	r2, [r2, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	d901      	bls.n	800133c <ad8363_get_dbm+0x60>
		return AD8363_DBM_MAX;
 8001338:	2300      	movs	r3, #0
 800133a:	e01d      	b.n	8001378 <ad8363_get_dbm+0x9c>
	} else if (value < ad->min) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	885b      	ldrh	r3, [r3, #2]
 8001340:	1cba      	adds	r2, r7, #2
 8001342:	8812      	ldrh	r2, [r2, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d201      	bcs.n	800134c <ad8363_get_dbm+0x70>
		return AD8363_DBM_MIN;
 8001348:	23e2      	movs	r3, #226	; 0xe2
 800134a:	e015      	b.n	8001378 <ad8363_get_dbm+0x9c>
	}
	return (int8_t) (m * (float) value + b);
 800134c:	1cbb      	adds	r3, r7, #2
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	0018      	movs	r0, r3
 8001352:	f7ff ff63 	bl	800121c <__aeabi_ui2f>
 8001356:	1c03      	adds	r3, r0, #0
 8001358:	68f9      	ldr	r1, [r7, #12]
 800135a:	1c18      	adds	r0, r3, #0
 800135c:	f7ff fc06 	bl	8000b6c <__aeabi_fmul>
 8001360:	1c03      	adds	r3, r0, #0
 8001362:	68b9      	ldr	r1, [r7, #8]
 8001364:	1c18      	adds	r0, r3, #0
 8001366:	f7ff f89b 	bl	80004a0 <__aeabi_fadd>
 800136a:	1c03      	adds	r3, r0, #0
 800136c:	1c18      	adds	r0, r3, #0
 800136e:	f7ff fee7 	bl	8001140 <__aeabi_f2iz>
 8001372:	0003      	movs	r3, r0
 8001374:	b25b      	sxtb	r3, r3
 8001376:	b2db      	uxtb	r3, r3
}
 8001378:	0018      	movs	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	b004      	add	sp, #16
 800137e:	bd80      	pop	{r7, pc}
 8001380:	41f00000 	.word	0x41f00000

08001384 <bda4601_set_att>:
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE7_1);

}

void bda4601_set_att(uint8_t val, uint8_t times) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	0002      	movs	r2, r0
 800138c:	1dfb      	adds	r3, r7, #7
 800138e:	701a      	strb	r2, [r3, #0]
 8001390:	1dbb      	adds	r3, r7, #6
 8001392:	1c0a      	adds	r2, r1, #0
 8001394:	701a      	strb	r2, [r3, #0]

	if (val < MIN_DB_VALUE || val > MAX_DB_VALUE) {
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b1f      	cmp	r3, #31
 800139c:	d902      	bls.n	80013a4 <bda4601_set_att+0x20>
		val = MIN_DB_VALUE;
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
	}
	val *= 2;
 80013a4:	1dfa      	adds	r2, r7, #7
 80013a6:	1dfb      	adds	r3, r7, #7
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	18db      	adds	r3, r3, r3
 80013ac:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < times; i++) {
 80013ae:	230f      	movs	r3, #15
 80013b0:	18fb      	adds	r3, r7, r3
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
 80013b6:	e058      	b.n	800146a <bda4601_set_att+0xe6>
		uint8_t mask = 0b00100000;
 80013b8:	230e      	movs	r3, #14
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	2220      	movs	r2, #32
 80013be:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < 6; j++) {
 80013c0:	230d      	movs	r3, #13
 80013c2:	18fb      	adds	r3, r7, r3
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
 80013c8:	e030      	b.n	800142c <bda4601_set_att+0xa8>
			//Ciclo for de 6 vueltas para enviar los 6bits de configuración
			if (mask & val) {
 80013ca:	230e      	movs	r3, #14
 80013cc:	18fb      	adds	r3, r7, r3
 80013ce:	1dfa      	adds	r2, r7, #7
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	7812      	ldrb	r2, [r2, #0]
 80013d4:	4013      	ands	r3, r2
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d006      	beq.n	80013ea <bda4601_set_att+0x66>
				//Si el bit de la mascara en 1 coincide con el bit del valor, entonces
				SET_BIT(GPIOB->MODER, GPIO_MODER_MODE1_0);
 80013dc:	4b29      	ldr	r3, [pc, #164]	; (8001484 <bda4601_set_att+0x100>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b28      	ldr	r3, [pc, #160]	; (8001484 <bda4601_set_att+0x100>)
 80013e2:	2104      	movs	r1, #4
 80013e4:	430a      	orrs	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e005      	b.n	80013f6 <bda4601_set_att+0x72>
				//HAL_GPIO_WritePin(GPIOA, DATA_ATTENUATOR_Pin, GPIO_PIN_SET); //Pin data en alto
			} else {
				//	HAL_GPIO_WritePin(GPIOA, DATA_ATTENUATOR_Pin, GPIO_PIN_RESET); //Pin data en bajo
				CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE1_0);
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <bda4601_set_att+0x100>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4b25      	ldr	r3, [pc, #148]	; (8001484 <bda4601_set_att+0x100>)
 80013f0:	2104      	movs	r1, #4
 80013f2:	438a      	bics	r2, r1
 80013f4:	601a      	str	r2, [r3, #0]
			}

			SET_BIT(GPIOB->MODER, GPIO_MODER_MODE0_0);
 80013f6:	4b23      	ldr	r3, [pc, #140]	; (8001484 <bda4601_set_att+0x100>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <bda4601_set_att+0x100>)
 80013fc:	2101      	movs	r1, #1
 80013fe:	430a      	orrs	r2, r1
 8001400:	601a      	str	r2, [r3, #0]
			//HAL_GPIO_WritePin(GPIOA, CLK_ATTENUATOR_Pin, GPIO_PIN_SET); //Pin clock en alto
			HAL_Delay(1); //Delay de 1mS
 8001402:	2001      	movs	r0, #1
 8001404:	f002 fae6 	bl	80039d4 <HAL_Delay>
			CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE0_0);
 8001408:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <bda4601_set_att+0x100>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <bda4601_set_att+0x100>)
 800140e:	2101      	movs	r1, #1
 8001410:	438a      	bics	r2, r1
 8001412:	601a      	str	r2, [r3, #0]
			//HAL_GPIO_WritePin(GPIOA, CLK_ATTENUATOR_Pin, GPIO_PIN_RESET); //Pin clock en bajo
			mask = mask >> 1; //Muevo la máscara una posición
 8001414:	220e      	movs	r2, #14
 8001416:	18bb      	adds	r3, r7, r2
 8001418:	18ba      	adds	r2, r7, r2
 800141a:	7812      	ldrb	r2, [r2, #0]
 800141c:	0852      	lsrs	r2, r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < 6; j++) {
 8001420:	210d      	movs	r1, #13
 8001422:	187b      	adds	r3, r7, r1
 8001424:	781a      	ldrb	r2, [r3, #0]
 8001426:	187b      	adds	r3, r7, r1
 8001428:	3201      	adds	r2, #1
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	230d      	movs	r3, #13
 800142e:	18fb      	adds	r3, r7, r3
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b05      	cmp	r3, #5
 8001434:	d9c9      	bls.n	80013ca <bda4601_set_att+0x46>
		}
		SET_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
 8001436:	23a0      	movs	r3, #160	; 0xa0
 8001438:	05db      	lsls	r3, r3, #23
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	23a0      	movs	r3, #160	; 0xa0
 800143e:	05db      	lsls	r3, r3, #23
 8001440:	2180      	movs	r1, #128	; 0x80
 8001442:	01c9      	lsls	r1, r1, #7
 8001444:	430a      	orrs	r2, r1
 8001446:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOA, LE_ATTENUATOR_Pin, GPIO_PIN_SET); //Pin LE en alto
		HAL_Delay(1);
 8001448:	2001      	movs	r0, #1
 800144a:	f002 fac3 	bl	80039d4 <HAL_Delay>
		CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
 800144e:	23a0      	movs	r3, #160	; 0xa0
 8001450:	05db      	lsls	r3, r3, #23
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	23a0      	movs	r3, #160	; 0xa0
 8001456:	05db      	lsls	r3, r3, #23
 8001458:	490b      	ldr	r1, [pc, #44]	; (8001488 <bda4601_set_att+0x104>)
 800145a:	400a      	ands	r2, r1
 800145c:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < times; i++) {
 800145e:	210f      	movs	r1, #15
 8001460:	187b      	adds	r3, r7, r1
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	187b      	adds	r3, r7, r1
 8001466:	3201      	adds	r2, #1
 8001468:	701a      	strb	r2, [r3, #0]
 800146a:	230f      	movs	r3, #15
 800146c:	18fa      	adds	r2, r7, r3
 800146e:	1dbb      	adds	r3, r7, #6
 8001470:	7812      	ldrb	r2, [r2, #0]
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	d39f      	bcc.n	80013b8 <bda4601_set_att+0x34>
		//HAL_GPIO_WritePin(GPIOA, LE_ATTENUATOR_Pin, GPIO_PIN_RESET); //Pin LE en bajo
	}
}
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	46bd      	mov	sp, r7
 800147e:	b004      	add	sp, #16
 8001480:	bd80      	pop	{r7, pc}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	50000400 	.word	0x50000400
 8001488:	ffffbfff 	.word	0xffffbfff

0800148c <bda4601_set_initial_att>:

void bda4601_set_initial_att(uint8_t value, uint16_t period_millis) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	0002      	movs	r2, r0
 8001494:	1dfb      	adds	r3, r7, #7
 8001496:	701a      	strb	r2, [r3, #0]
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	1c0a      	adds	r2, r1, #0
 800149c:	801a      	strh	r2, [r3, #0]

	uint8_t t_step = 500;
 800149e:	210f      	movs	r1, #15
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	22f4      	movs	r2, #244	; 0xf4
 80014a4:	701a      	strb	r2, [r3, #0]
	uint8_t times = period_millis / t_step;
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	881a      	ldrh	r2, [r3, #0]
 80014aa:	187b      	adds	r3, r7, r1
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	0019      	movs	r1, r3
 80014b0:	0010      	movs	r0, r2
 80014b2:	f7fe feb7 	bl	8000224 <__divsi3>
 80014b6:	0003      	movs	r3, r0
 80014b8:	001a      	movs	r2, r3
 80014ba:	210e      	movs	r1, #14
 80014bc:	187b      	adds	r3, r7, r1
 80014be:	701a      	strb	r2, [r3, #0]

	int att_step = value / times;
 80014c0:	1dfa      	adds	r2, r7, #7
 80014c2:	187b      	adds	r3, r7, r1
 80014c4:	7812      	ldrb	r2, [r2, #0]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	0019      	movs	r1, r3
 80014ca:	0010      	movs	r0, r2
 80014cc:	f7fe fe20 	bl	8000110 <__udivsi3>
 80014d0:	0003      	movs	r3, r0
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	60bb      	str	r3, [r7, #8]
	int att = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]

	for (int i = 0; i <= times; i++) {
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	e015      	b.n	800150c <bda4601_set_initial_att+0x80>
		bda4601_set_att(att, 2);
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2102      	movs	r1, #2
 80014e6:	0018      	movs	r0, r3
 80014e8:	f7ff ff4c 	bl	8001384 <bda4601_set_att>
		att += att_step;
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	18d3      	adds	r3, r2, r3
 80014f2:	617b      	str	r3, [r7, #20]
		if (att >= MAX_DB_VALUE) {
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2b1e      	cmp	r3, #30
 80014f8:	dc0f      	bgt.n	800151a <bda4601_set_initial_att+0x8e>
			return;
		}
		HAL_Delay(t_step);
 80014fa:	230f      	movs	r3, #15
 80014fc:	18fb      	adds	r3, r7, r3
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	0018      	movs	r0, r3
 8001502:	f002 fa67 	bl	80039d4 <HAL_Delay>
	for (int i = 0; i <= times; i++) {
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	3301      	adds	r3, #1
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	230e      	movs	r3, #14
 800150e:	18fb      	adds	r3, r7, r3
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	429a      	cmp	r2, r3
 8001516:	dde3      	ble.n	80014e0 <bda4601_set_initial_att+0x54>
 8001518:	e000      	b.n	800151c <bda4601_set_initial_att+0x90>
			return;
 800151a:	46c0      	nop			; (mov r8, r8)
	}

}
 800151c:	46bd      	mov	sp, r7
 800151e:	b006      	add	sp, #24
 8001520:	bd80      	pop	{r7, pc}

08001522 <eeprom_1byte_read>:

	return data;
}
*/

uint8_t eeprom_1byte_read(uint8_t addr) {
 8001522:	b5b0      	push	{r4, r5, r7, lr}
 8001524:	b084      	sub	sp, #16
 8001526:	af00      	add	r7, sp, #0
 8001528:	0002      	movs	r2, r0
 800152a:	1dfb      	adds	r3, r7, #7
 800152c:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	i2c1_byteTransmit(EEPROM_CHIP_ADDR<<1 , &addr,1);
 800152e:	1dfb      	adds	r3, r7, #7
 8001530:	2201      	movs	r2, #1
 8001532:	0019      	movs	r1, r3
 8001534:	20a0      	movs	r0, #160	; 0xa0
 8001536:	f000 fa19 	bl	800196c <i2c1_byteTransmit>
	data = i2c1_byteReceive(EEPROM_CHIP_ADDR <<1 | 1,1);
 800153a:	250f      	movs	r5, #15
 800153c:	197c      	adds	r4, r7, r5
 800153e:	2101      	movs	r1, #1
 8001540:	20a1      	movs	r0, #161	; 0xa1
 8001542:	f000 f953 	bl	80017ec <i2c1_byteReceive>
 8001546:	0003      	movs	r3, r0
 8001548:	7023      	strb	r3, [r4, #0]
	return data;
 800154a:	197b      	adds	r3, r7, r5
 800154c:	781b      	ldrb	r3, [r3, #0]
}
 800154e:	0018      	movs	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	b004      	add	sp, #16
 8001554:	bdb0      	pop	{r4, r5, r7, pc}

08001556 <eeprom_1byte_write>:

void eeprom_1byte_write(uint8_t addr, uint8_t data) {
 8001556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001558:	b085      	sub	sp, #20
 800155a:	af00      	add	r7, sp, #0
 800155c:	0002      	movs	r2, r0
 800155e:	1dfb      	adds	r3, r7, #7
 8001560:	701a      	strb	r2, [r3, #0]
 8001562:	1dbb      	adds	r3, r7, #6
 8001564:	1c0a      	adds	r2, r1, #0
 8001566:	701a      	strb	r2, [r3, #0]
	uint8_t  buff[2];
	uint8_t stored_data;
	buff[0] = addr;
 8001568:	250c      	movs	r5, #12
 800156a:	197b      	adds	r3, r7, r5
 800156c:	1dfa      	adds	r2, r7, #7
 800156e:	7812      	ldrb	r2, [r2, #0]
 8001570:	701a      	strb	r2, [r3, #0]
	buff[1] = data;
 8001572:	197b      	adds	r3, r7, r5
 8001574:	1dba      	adds	r2, r7, #6
 8001576:	7812      	ldrb	r2, [r2, #0]
 8001578:	705a      	strb	r2, [r3, #1]

	stored_data = eeprom_1byte_read(addr);
 800157a:	260f      	movs	r6, #15
 800157c:	19bc      	adds	r4, r7, r6
 800157e:	1dfb      	adds	r3, r7, #7
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	0018      	movs	r0, r3
 8001584:	f7ff ffcd 	bl	8001522 <eeprom_1byte_read>
 8001588:	0003      	movs	r3, r0
 800158a:	7023      	strb	r3, [r4, #0]
	if (stored_data != data)
 800158c:	19ba      	adds	r2, r7, r6
 800158e:	1dbb      	adds	r3, r7, #6
 8001590:	7812      	ldrb	r2, [r2, #0]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d005      	beq.n	80015a4 <eeprom_1byte_write+0x4e>
		i2c1_byteTransmit((char ) EEPROM_CHIP_ADDR<<1 , buff,2);
 8001598:	197b      	adds	r3, r7, r5
 800159a:	2202      	movs	r2, #2
 800159c:	0019      	movs	r1, r3
 800159e:	20a0      	movs	r0, #160	; 0xa0
 80015a0:	f000 f9e4 	bl	800196c <i2c1_byteTransmit>
}
 80015a4:	46c0      	nop			; (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b005      	add	sp, #20
 80015aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015ac <eeprom_write>:

void eeprom_write(uint8_t addr, uint16_t data) {
 80015ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	0002      	movs	r2, r0
 80015b4:	1dfb      	adds	r3, r7, #7
 80015b6:	701a      	strb	r2, [r3, #0]
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	1c0a      	adds	r2, r1, #0
 80015bc:	801a      	strh	r2, [r3, #0]

	uint8_t  buff[1] = {0x00};
 80015be:	250c      	movs	r5, #12
 80015c0:	197b      	adds	r3, r7, r5
 80015c2:	4a16      	ldr	r2, [pc, #88]	; (800161c <eeprom_write+0x70>)
 80015c4:	7812      	ldrb	r2, [r2, #0]
 80015c6:	701a      	strb	r2, [r3, #0]
	uint16_t stored_data;
	buff[0] = addr;
 80015c8:	197b      	adds	r3, r7, r5
 80015ca:	1dfa      	adds	r2, r7, #7
 80015cc:	7812      	ldrb	r2, [r2, #0]
 80015ce:	701a      	strb	r2, [r3, #0]
	buff[1] =  data >> 8;
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	197b      	adds	r3, r7, r5
 80015dc:	705a      	strb	r2, [r3, #1]
	buff[2] =  data & 0xff;
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	197b      	adds	r3, r7, r5
 80015e6:	709a      	strb	r2, [r3, #2]


	stored_data = eeprom_read(addr);
 80015e8:	260e      	movs	r6, #14
 80015ea:	19bc      	adds	r4, r7, r6
 80015ec:	1dfb      	adds	r3, r7, #7
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	0018      	movs	r0, r3
 80015f2:	f000 f815 	bl	8001620 <eeprom_read>
 80015f6:	0003      	movs	r3, r0
 80015f8:	8023      	strh	r3, [r4, #0]
	if (stored_data != data)
 80015fa:	19ba      	adds	r2, r7, r6
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	8812      	ldrh	r2, [r2, #0]
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d005      	beq.n	8001612 <eeprom_write+0x66>
		i2c1_byteTransmit((char ) EEPROM_CHIP_ADDR << 1, buff,3);
 8001606:	197b      	adds	r3, r7, r5
 8001608:	2203      	movs	r2, #3
 800160a:	0019      	movs	r1, r3
 800160c:	20a0      	movs	r0, #160	; 0xa0
 800160e:	f000 f9ad 	bl	800196c <i2c1_byteTransmit>
}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	46bd      	mov	sp, r7
 8001616:	b005      	add	sp, #20
 8001618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	08006d34 	.word	0x08006d34

08001620 <eeprom_read>:

uint16_t eeprom_read(uint8_t address) {
 8001620:	b5b0      	push	{r4, r5, r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	0002      	movs	r2, r0
 8001628:	1dfb      	adds	r3, r7, #7
 800162a:	701a      	strb	r2, [r3, #0]
	uint16_t data = 0;
 800162c:	240e      	movs	r4, #14
 800162e:	193b      	adds	r3, r7, r4
 8001630:	2200      	movs	r2, #0
 8001632:	801a      	strh	r2, [r3, #0]
	uint8_t  buff[2] ={0};
 8001634:	250c      	movs	r5, #12
 8001636:	197b      	adds	r3, r7, r5
 8001638:	2200      	movs	r2, #0
 800163a:	801a      	strh	r2, [r3, #0]

	i2c1_byteTransmit((char )EEPROM_CHIP_ADDR << 1, &address,1);
 800163c:	1dfb      	adds	r3, r7, #7
 800163e:	2201      	movs	r2, #1
 8001640:	0019      	movs	r1, r3
 8001642:	20a0      	movs	r0, #160	; 0xa0
 8001644:	f000 f992 	bl	800196c <i2c1_byteTransmit>
	i2c1_buffReceive((char) EEPROM_CHIP_ADDR << 1 | 1,buff, 2);
 8001648:	197b      	adds	r3, r7, r5
 800164a:	2202      	movs	r2, #2
 800164c:	0019      	movs	r1, r3
 800164e:	20a1      	movs	r0, #161	; 0xa1
 8001650:	f000 f92a 	bl	80018a8 <i2c1_buffReceive>
	data = buff[0]<< 8;
 8001654:	0029      	movs	r1, r5
 8001656:	197b      	adds	r3, r7, r5
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	b29a      	uxth	r2, r3
 800165c:	193b      	adds	r3, r7, r4
 800165e:	0212      	lsls	r2, r2, #8
 8001660:	801a      	strh	r2, [r3, #0]
	data |= buff[1];
 8001662:	187b      	adds	r3, r7, r1
 8001664:	785b      	ldrb	r3, [r3, #1]
 8001666:	b299      	uxth	r1, r3
 8001668:	193b      	adds	r3, r7, r4
 800166a:	193a      	adds	r2, r7, r4
 800166c:	8812      	ldrh	r2, [r2, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	801a      	strh	r2, [r3, #0]
return data;
 8001672:	193b      	adds	r3, r7, r4
 8001674:	881b      	ldrh	r3, [r3, #0]
}
 8001676:	0018      	movs	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	b004      	add	sp, #16
 800167c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001680 <i2c1_init>:
 *      Author: sigmadev
 */

#include "i2c1.h"

void i2c1_init() {
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0

	/* SCL PB8  as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE8_0);
 8001684:	4b53      	ldr	r3, [pc, #332]	; (80017d4 <i2c1_init+0x154>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b52      	ldr	r3, [pc, #328]	; (80017d4 <i2c1_init+0x154>)
 800168a:	4953      	ldr	r1, [pc, #332]	; (80017d8 <i2c1_init+0x158>)
 800168c:	400a      	ands	r2, r1
 800168e:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE8_1);
 8001690:	4b50      	ldr	r3, [pc, #320]	; (80017d4 <i2c1_init+0x154>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b4f      	ldr	r3, [pc, #316]	; (80017d4 <i2c1_init+0x154>)
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	0289      	lsls	r1, r1, #10
 800169a:	430a      	orrs	r2, r1
 800169c:	601a      	str	r2, [r3, #0]
	/* SDC PB9 as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE9_0);
 800169e:	4b4d      	ldr	r3, [pc, #308]	; (80017d4 <i2c1_init+0x154>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <i2c1_init+0x154>)
 80016a4:	494d      	ldr	r1, [pc, #308]	; (80017dc <i2c1_init+0x15c>)
 80016a6:	400a      	ands	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE9_1);
 80016aa:	4b4a      	ldr	r3, [pc, #296]	; (80017d4 <i2c1_init+0x154>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	4b49      	ldr	r3, [pc, #292]	; (80017d4 <i2c1_init+0x154>)
 80016b0:	2180      	movs	r1, #128	; 0x80
 80016b2:	0309      	lsls	r1, r1, #12
 80016b4:	430a      	orrs	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]
	/* SCL PB8 as open-drain */
	SET_BIT(GPIOB->OTYPER, GPIO_OTYPER_OT8);
 80016b8:	4b46      	ldr	r3, [pc, #280]	; (80017d4 <i2c1_init+0x154>)
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	4b45      	ldr	r3, [pc, #276]	; (80017d4 <i2c1_init+0x154>)
 80016be:	2180      	movs	r1, #128	; 0x80
 80016c0:	0049      	lsls	r1, r1, #1
 80016c2:	430a      	orrs	r2, r1
 80016c4:	605a      	str	r2, [r3, #4]
	/* SDC PB9 as open-drain */
	SET_BIT(GPIOB->OTYPER, GPIO_OTYPER_OT9);
 80016c6:	4b43      	ldr	r3, [pc, #268]	; (80017d4 <i2c1_init+0x154>)
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	4b42      	ldr	r3, [pc, #264]	; (80017d4 <i2c1_init+0x154>)
 80016cc:	2180      	movs	r1, #128	; 0x80
 80016ce:	0089      	lsls	r1, r1, #2
 80016d0:	430a      	orrs	r2, r1
 80016d2:	605a      	str	r2, [r3, #4]
	/* SCL PB8 High Speed output */
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED8_0);
 80016d4:	4b3f      	ldr	r3, [pc, #252]	; (80017d4 <i2c1_init+0x154>)
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	4b3e      	ldr	r3, [pc, #248]	; (80017d4 <i2c1_init+0x154>)
 80016da:	2180      	movs	r1, #128	; 0x80
 80016dc:	0249      	lsls	r1, r1, #9
 80016de:	430a      	orrs	r2, r1
 80016e0:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED8_1);
 80016e2:	4b3c      	ldr	r3, [pc, #240]	; (80017d4 <i2c1_init+0x154>)
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	4b3b      	ldr	r3, [pc, #236]	; (80017d4 <i2c1_init+0x154>)
 80016e8:	2180      	movs	r1, #128	; 0x80
 80016ea:	0289      	lsls	r1, r1, #10
 80016ec:	430a      	orrs	r2, r1
 80016ee:	609a      	str	r2, [r3, #8]
	/* SDC PB9  High Speed output */
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED9_0);
 80016f0:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <i2c1_init+0x154>)
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	4b37      	ldr	r3, [pc, #220]	; (80017d4 <i2c1_init+0x154>)
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	02c9      	lsls	r1, r1, #11
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED9_1);
 80016fe:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <i2c1_init+0x154>)
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	4b34      	ldr	r3, [pc, #208]	; (80017d4 <i2c1_init+0x154>)
 8001704:	2180      	movs	r1, #128	; 0x80
 8001706:	0309      	lsls	r1, r1, #12
 8001708:	430a      	orrs	r2, r1
 800170a:	609a      	str	r2, [r3, #8]
	/* SCL PB8 as pull-up */
	CLEAR_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD8_0);
 800170c:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <i2c1_init+0x154>)
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	4b30      	ldr	r3, [pc, #192]	; (80017d4 <i2c1_init+0x154>)
 8001712:	4931      	ldr	r1, [pc, #196]	; (80017d8 <i2c1_init+0x158>)
 8001714:	400a      	ands	r2, r1
 8001716:	60da      	str	r2, [r3, #12]
	SET_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD8_1);
 8001718:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <i2c1_init+0x154>)
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <i2c1_init+0x154>)
 800171e:	2180      	movs	r1, #128	; 0x80
 8001720:	0289      	lsls	r1, r1, #10
 8001722:	430a      	orrs	r2, r1
 8001724:	60da      	str	r2, [r3, #12]
	/* SDC PB9 as pull-up */
	CLEAR_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD9_0);
 8001726:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <i2c1_init+0x154>)
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <i2c1_init+0x154>)
 800172c:	492b      	ldr	r1, [pc, #172]	; (80017dc <i2c1_init+0x15c>)
 800172e:	400a      	ands	r2, r1
 8001730:	60da      	str	r2, [r3, #12]
	SET_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD9_1);
 8001732:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <i2c1_init+0x154>)
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <i2c1_init+0x154>)
 8001738:	2180      	movs	r1, #128	; 0x80
 800173a:	0309      	lsls	r1, r1, #12
 800173c:	430a      	orrs	r2, r1
 800173e:	60da      	str	r2, [r3, #12]
	/*  PB8 as i2c SCL */
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_0);
 8001740:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <i2c1_init+0x154>)
 8001742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001744:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <i2c1_init+0x154>)
 8001746:	2101      	movs	r1, #1
 8001748:	438a      	bics	r2, r1
 800174a:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_1);
 800174c:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <i2c1_init+0x154>)
 800174e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001750:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <i2c1_init+0x154>)
 8001752:	2102      	movs	r1, #2
 8001754:	430a      	orrs	r2, r1
 8001756:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_2);
 8001758:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <i2c1_init+0x154>)
 800175a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <i2c1_init+0x154>)
 800175e:	2104      	movs	r1, #4
 8001760:	430a      	orrs	r2, r1
 8001762:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_3);
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <i2c1_init+0x154>)
 8001766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <i2c1_init+0x154>)
 800176a:	2108      	movs	r1, #8
 800176c:	438a      	bics	r2, r1
 800176e:	625a      	str	r2, [r3, #36]	; 0x24
	/*  PB9 as i2c SDL */
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_0);
 8001770:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <i2c1_init+0x154>)
 8001772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <i2c1_init+0x154>)
 8001776:	2110      	movs	r1, #16
 8001778:	438a      	bics	r2, r1
 800177a:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_1);
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <i2c1_init+0x154>)
 800177e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <i2c1_init+0x154>)
 8001782:	2120      	movs	r1, #32
 8001784:	430a      	orrs	r2, r1
 8001786:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_2);
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <i2c1_init+0x154>)
 800178a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <i2c1_init+0x154>)
 800178e:	2140      	movs	r1, #64	; 0x40
 8001790:	430a      	orrs	r2, r1
 8001792:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_3);
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <i2c1_init+0x154>)
 8001796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001798:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <i2c1_init+0x154>)
 800179a:	2180      	movs	r1, #128	; 0x80
 800179c:	438a      	bics	r2, r1
 800179e:	625a      	str	r2, [r3, #36]	; 0x24

	/* select normal speed */
	SET_BIT(RCC->APBENR1, RCC_APBENR1_I2C1EN);
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <i2c1_init+0x160>)
 80017a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017a4:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <i2c1_init+0x160>)
 80017a6:	2180      	movs	r1, #128	; 0x80
 80017a8:	0389      	lsls	r1, r1, #14
 80017aa:	430a      	orrs	r2, r1
 80017ac:	63da      	str	r2, [r3, #60]	; 0x3c

	/* i2c disable */
	CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 80017ae:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <i2c1_init+0x164>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <i2c1_init+0x164>)
 80017b4:	2101      	movs	r1, #1
 80017b6:	438a      	bics	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]

	I2C1->TIMINGR = 0X10707DBCU;
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <i2c1_init+0x164>)
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <i2c1_init+0x168>)
 80017be:	611a      	str	r2, [r3, #16]
	/*i2c Rx interrupt enable */
//SET_BIT(I2C1->CR1, I2C_CR1_RXIE);
//SET_BIT(I2C1->CR1, I2C_CR1_TXIE);

	/* i2c enable */
	SET_BIT(I2C1->CR1, I2C_CR1_PE);
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <i2c1_init+0x164>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <i2c1_init+0x164>)
 80017c6:	2101      	movs	r1, #1
 80017c8:	430a      	orrs	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]
}
 80017cc:	46c0      	nop			; (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	50000400 	.word	0x50000400
 80017d8:	fffeffff 	.word	0xfffeffff
 80017dc:	fffbffff 	.word	0xfffbffff
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40005400 	.word	0x40005400
 80017e8:	10707dbc 	.word	0x10707dbc

080017ec <i2c1_byteReceive>:

char i2c1_byteReceive(char saddr, uint8_t N) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	0002      	movs	r2, r0
 80017f4:	1dfb      	adds	r3, r7, #7
 80017f6:	701a      	strb	r2, [r3, #0]
 80017f8:	1dbb      	adds	r3, r7, #6
 80017fa:	1c0a      	adds	r2, r1, #0
 80017fc:	701a      	strb	r2, [r3, #0]
	uint32_t counter = HAL_GetTick();
 80017fe:	f002 f8df 	bl	80039c0 <HAL_GetTick>
 8001802:	0003      	movs	r3, r0
 8001804:	60fb      	str	r3, [r7, #12]
	bool timeout = false;
 8001806:	230b      	movs	r3, #11
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
	i2c1_start(saddr, READ, N);
 800180e:	1dbb      	adds	r3, r7, #6
 8001810:	781a      	ldrb	r2, [r3, #0]
 8001812:	1dfb      	adds	r3, r7, #7
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2101      	movs	r1, #1
 8001818:	0018      	movs	r0, r3
 800181a:	f000 f8f1 	bl	8001a00 <i2c1_start>

	while (!READ_BIT(I2C1->ISR, I2C_ISR_STOPF)) {
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <i2c1_byteReceive+0xb8>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	2220      	movs	r2, #32
 8001826:	4013      	ands	r3, r2
 8001828:	d0fa      	beq.n	8001820 <i2c1_byteReceive+0x34>
	}
	SET_BIT(I2C1->ICR, I2C_ICR_STOPCF);
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <i2c1_byteReceive+0xb8>)
 800182c:	69da      	ldr	r2, [r3, #28]
 800182e:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <i2c1_byteReceive+0xb8>)
 8001830:	2120      	movs	r1, #32
 8001832:	430a      	orrs	r2, r1
 8001834:	61da      	str	r2, [r3, #28]

	char data = 0;
 8001836:	2317      	movs	r3, #23
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N; i++) {
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	e022      	b.n	800188a <i2c1_byteReceive+0x9e>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
			if (HAL_GetTick() - counter > 500)
 8001844:	f002 f8bc 	bl	80039c0 <HAL_GetTick>
 8001848:	0002      	movs	r2, r0
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	1ad2      	subs	r2, r2, r3
 800184e:	23fa      	movs	r3, #250	; 0xfa
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	429a      	cmp	r2, r3
 8001854:	d901      	bls.n	800185a <i2c1_byteReceive+0x6e>
				return 0x00;
 8001856:	2300      	movs	r3, #0
 8001858:	e01f      	b.n	800189a <i2c1_byteReceive+0xae>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <i2c1_byteReceive+0xb8>)
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2204      	movs	r2, #4
 8001860:	4013      	ands	r3, r2
 8001862:	425a      	negs	r2, r3
 8001864:	4153      	adcs	r3, r2
 8001866:	b2db      	uxtb	r3, r3
 8001868:	0019      	movs	r1, r3
 800186a:	230b      	movs	r3, #11
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2201      	movs	r2, #1
 8001872:	4053      	eors	r3, r2
 8001874:	b2db      	uxtb	r3, r3
 8001876:	400b      	ands	r3, r1
 8001878:	d1e4      	bne.n	8001844 <i2c1_byteReceive+0x58>
		}
		data = READ_REG(I2C1->RXDR);
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <i2c1_byteReceive+0xb8>)
 800187c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800187e:	2317      	movs	r3, #23
 8001880:	18fb      	adds	r3, r7, r3
 8001882:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N; i++) {
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	3301      	adds	r3, #1
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	1dbb      	adds	r3, r7, #6
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	429a      	cmp	r2, r3
 8001892:	dbe2      	blt.n	800185a <i2c1_byteReceive+0x6e>
	}
//	while (!(READ_BIT(I2C1->ISR, I2C_ISR_TC))) {
//	}
	return data;
 8001894:	2317      	movs	r3, #23
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	781b      	ldrb	r3, [r3, #0]
}
 800189a:	0018      	movs	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	b006      	add	sp, #24
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	40005400 	.word	0x40005400

080018a8 <i2c1_buffReceive>:

void i2c1_buffReceive(char saddr, uint8_t *rcv, uint8_t N) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6039      	str	r1, [r7, #0]
 80018b0:	0011      	movs	r1, r2
 80018b2:	1dfb      	adds	r3, r7, #7
 80018b4:	1c02      	adds	r2, r0, #0
 80018b6:	701a      	strb	r2, [r3, #0]
 80018b8:	1dbb      	adds	r3, r7, #6
 80018ba:	1c0a      	adds	r2, r1, #0
 80018bc:	701a      	strb	r2, [r3, #0]
	uint32_t counter = HAL_GetTick();
 80018be:	f002 f87f 	bl	80039c0 <HAL_GetTick>
 80018c2:	0003      	movs	r3, r0
 80018c4:	613b      	str	r3, [r7, #16]
	bool timeout = false;
 80018c6:	230f      	movs	r3, #15
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
	i2c1_start(saddr, READ, N);
 80018ce:	1dbb      	adds	r3, r7, #6
 80018d0:	781a      	ldrb	r2, [r3, #0]
 80018d2:	1dfb      	adds	r3, r7, #7
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2101      	movs	r1, #1
 80018d8:	0018      	movs	r0, r3
 80018da:	f000 f891 	bl	8001a00 <i2c1_start>


	char data = 0;
 80018de:	230e      	movs	r3, #14
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N; i++) {
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	e029      	b.n	8001940 <i2c1_buffReceive+0x98>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
			if (HAL_GetTick() - counter > 500){
 80018ec:	f002 f868 	bl	80039c0 <HAL_GetTick>
 80018f0:	0002      	movs	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad2      	subs	r2, r2, r3
 80018f6:	23fa      	movs	r3, #250	; 0xfa
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d906      	bls.n	800190c <i2c1_buffReceive+0x64>
				SET_BIT(I2C1->ICR, I2C_ICR_STOPCF);
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <i2c1_buffReceive+0xc0>)
 8001900:	69da      	ldr	r2, [r3, #28]
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <i2c1_buffReceive+0xc0>)
 8001904:	2120      	movs	r1, #32
 8001906:	430a      	orrs	r2, r1
 8001908:	61da      	str	r2, [r3, #28]
				return 0x00;
 800190a:	e02a      	b.n	8001962 <i2c1_buffReceive+0xba>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
 800190c:	4b16      	ldr	r3, [pc, #88]	; (8001968 <i2c1_buffReceive+0xc0>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	2204      	movs	r2, #4
 8001912:	4013      	ands	r3, r2
 8001914:	425a      	negs	r2, r3
 8001916:	4153      	adcs	r3, r2
 8001918:	b2db      	uxtb	r3, r3
 800191a:	0019      	movs	r1, r3
 800191c:	230f      	movs	r3, #15
 800191e:	18fb      	adds	r3, r7, r3
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2201      	movs	r2, #1
 8001924:	4053      	eors	r3, r2
 8001926:	b2db      	uxtb	r3, r3
 8001928:	400b      	ands	r3, r1
 800192a:	d1df      	bne.n	80018ec <i2c1_buffReceive+0x44>
			}
		}
		rcv[i] = READ_REG(I2C1->RXDR);
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <i2c1_buffReceive+0xc0>)
 800192e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	18d3      	adds	r3, r2, r3
 8001936:	b2ca      	uxtb	r2, r1
 8001938:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N; i++) {
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3301      	adds	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	1dbb      	adds	r3, r7, #6
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	429a      	cmp	r2, r3
 8001948:	dbe0      	blt.n	800190c <i2c1_buffReceive+0x64>

	}
	while (!(READ_BIT(I2C1->ISR, I2C_ISR_STOPF))) {
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <i2c1_buffReceive+0xc0>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	2220      	movs	r2, #32
 8001952:	4013      	ands	r3, r2
 8001954:	d0fa      	beq.n	800194c <i2c1_buffReceive+0xa4>
	}
	SET_BIT(I2C1->ICR, I2C_ICR_STOPCF);
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <i2c1_buffReceive+0xc0>)
 8001958:	69da      	ldr	r2, [r3, #28]
 800195a:	4b03      	ldr	r3, [pc, #12]	; (8001968 <i2c1_buffReceive+0xc0>)
 800195c:	2120      	movs	r1, #32
 800195e:	430a      	orrs	r2, r1
 8001960:	61da      	str	r2, [r3, #28]

}
 8001962:	46bd      	mov	sp, r7
 8001964:	b006      	add	sp, #24
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40005400 	.word	0x40005400

0800196c <i2c1_byteTransmit>:

void i2c1_byteTransmit(char saddr, uint8_t *data, uint8_t N) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6039      	str	r1, [r7, #0]
 8001974:	0011      	movs	r1, r2
 8001976:	1dfb      	adds	r3, r7, #7
 8001978:	1c02      	adds	r2, r0, #0
 800197a:	701a      	strb	r2, [r3, #0]
 800197c:	1dbb      	adds	r3, r7, #6
 800197e:	1c0a      	adds	r2, r1, #0
 8001980:	701a      	strb	r2, [r3, #0]
	i2c1_start(saddr, WRITE, N);
 8001982:	1dbb      	adds	r3, r7, #6
 8001984:	781a      	ldrb	r2, [r3, #0]
 8001986:	1dfb      	adds	r3, r7, #7
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2100      	movs	r1, #0
 800198c:	0018      	movs	r0, r3
 800198e:	f000 f837 	bl	8001a00 <i2c1_start>
	uint32_t counter = HAL_GetTick();
 8001992:	f002 f815 	bl	80039c0 <HAL_GetTick>
 8001996:	0003      	movs	r3, r0
 8001998:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < N; i++) {
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	e016      	b.n	80019ce <i2c1_byteTransmit+0x62>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXIS)) {

			if (HAL_GetTick() - counter > 500)
 80019a0:	f002 f80e 	bl	80039c0 <HAL_GetTick>
 80019a4:	0002      	movs	r2, r0
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	1ad2      	subs	r2, r2, r3
 80019aa:	23fa      	movs	r3, #250	; 0xfa
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d81f      	bhi.n	80019f2 <i2c1_byteTransmit+0x86>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXIS)) {
 80019b2:	4b12      	ldr	r3, [pc, #72]	; (80019fc <i2c1_byteTransmit+0x90>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	2202      	movs	r2, #2
 80019b8:	4013      	ands	r3, r2
 80019ba:	d0f1      	beq.n	80019a0 <i2c1_byteTransmit+0x34>
				return;
		}
		I2C1->TXDR = data[i];
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	18d3      	adds	r3, r2, r3
 80019c2:	781a      	ldrb	r2, [r3, #0]
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <i2c1_byteTransmit+0x90>)
 80019c6:	629a      	str	r2, [r3, #40]	; 0x28
	for (int i = 0; i < N; i++) {
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	3301      	adds	r3, #1
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	1dbb      	adds	r3, r7, #6
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	dbec      	blt.n	80019b2 <i2c1_byteTransmit+0x46>
	}

	while (!READ_BIT(I2C1->ISR, I2C_ISR_STOPF)) {
 80019d8:	46c0      	nop			; (mov r8, r8)
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <i2c1_byteTransmit+0x90>)
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	2220      	movs	r2, #32
 80019e0:	4013      	ands	r3, r2
 80019e2:	d0fa      	beq.n	80019da <i2c1_byteTransmit+0x6e>
	}
	SET_BIT(I2C1->ICR, I2C_ICR_STOPCF);
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <i2c1_byteTransmit+0x90>)
 80019e6:	69da      	ldr	r2, [r3, #28]
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <i2c1_byteTransmit+0x90>)
 80019ea:	2120      	movs	r1, #32
 80019ec:	430a      	orrs	r2, r1
 80019ee:	61da      	str	r2, [r3, #28]
 80019f0:	e000      	b.n	80019f4 <i2c1_byteTransmit+0x88>
				return;
 80019f2:	46c0      	nop			; (mov r8, r8)

}
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b004      	add	sp, #16
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	40005400 	.word	0x40005400

08001a00 <i2c1_start>:
	SET_BIT(I2C1->ISR, I2C_ICR_STOPCF);

}


void i2c1_start(char saddr, uint8_t transfer_request, uint8_t N) {
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	0004      	movs	r4, r0
 8001a08:	0008      	movs	r0, r1
 8001a0a:	0011      	movs	r1, r2
 8001a0c:	1dfb      	adds	r3, r7, #7
 8001a0e:	1c22      	adds	r2, r4, #0
 8001a10:	701a      	strb	r2, [r3, #0]
 8001a12:	1dbb      	adds	r3, r7, #6
 8001a14:	1c02      	adds	r2, r0, #0
 8001a16:	701a      	strb	r2, [r3, #0]
 8001a18:	1d7b      	adds	r3, r7, #5
 8001a1a:	1c0a      	adds	r2, r1, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
	/*master 7 bit addressing mode */
	CLEAR_BIT(I2C1->CR2, I2C_CR2_ADD10);
 8001a1e:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <i2c1_start+0xa4>)
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <i2c1_start+0xa4>)
 8001a24:	4920      	ldr	r1, [pc, #128]	; (8001aa8 <i2c1_start+0xa8>)
 8001a26:	400a      	ands	r2, r1
 8001a28:	605a      	str	r2, [r3, #4]
	/* set Slave address */
	MODIFY_REG(I2C1->CR2, I2C_CR2_SADD, saddr << I2C_CR2_SADD_Pos);
 8001a2a:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <i2c1_start+0xa4>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	0a9b      	lsrs	r3, r3, #10
 8001a30:	0299      	lsls	r1, r3, #10
 8001a32:	1dfb      	adds	r3, r7, #7
 8001a34:	781a      	ldrb	r2, [r3, #0]
 8001a36:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <i2c1_start+0xa4>)
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	605a      	str	r2, [r3, #4]
	/* read 1 byte */
	MODIFY_REG(I2C1->CR2, I2C_CR2_NBYTES, N << I2C_CR2_NBYTES_Pos);
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <i2c1_start+0xa4>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4a1a      	ldr	r2, [pc, #104]	; (8001aac <i2c1_start+0xac>)
 8001a42:	401a      	ands	r2, r3
 8001a44:	1d7b      	adds	r3, r7, #5
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	041b      	lsls	r3, r3, #16
 8001a4a:	0019      	movs	r1, r3
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <i2c1_start+0xa4>)
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	605a      	str	r2, [r3, #4]
	/* stops when NBytes are transferred */
	SET_BIT(I2C1->CR2, I2C_CR2_AUTOEND);
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <i2c1_start+0xa4>)
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <i2c1_start+0xa4>)
 8001a58:	2180      	movs	r1, #128	; 0x80
 8001a5a:	0489      	lsls	r1, r1, #18
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	605a      	str	r2, [r3, #4]
	/* set START condition  automatically changes to master */


	if (transfer_request == 1) {
 8001a60:	1dbb      	adds	r3, r7, #6
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d107      	bne.n	8001a78 <i2c1_start+0x78>
		/* request a read transfer */
		SET_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <i2c1_start+0xa4>)
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <i2c1_start+0xa4>)
 8001a6e:	2180      	movs	r1, #128	; 0x80
 8001a70:	00c9      	lsls	r1, r1, #3
 8001a72:	430a      	orrs	r2, r1
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	e009      	b.n	8001a8c <i2c1_start+0x8c>
	} else if (transfer_request == 0) {
 8001a78:	1dbb      	adds	r3, r7, #6
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d105      	bne.n	8001a8c <i2c1_start+0x8c>
		/* request a write transfer */
		CLEAR_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <i2c1_start+0xa4>)
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <i2c1_start+0xa4>)
 8001a86:	490a      	ldr	r1, [pc, #40]	; (8001ab0 <i2c1_start+0xb0>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	605a      	str	r2, [r3, #4]
	}

	SET_BIT(I2C1->CR2, I2C_CR2_START);
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <i2c1_start+0xa4>)
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <i2c1_start+0xa4>)
 8001a92:	2180      	movs	r1, #128	; 0x80
 8001a94:	0189      	lsls	r1, r1, #6
 8001a96:	430a      	orrs	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]

}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b003      	add	sp, #12
 8001aa0:	bd90      	pop	{r4, r7, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	40005400 	.word	0x40005400
 8001aa8:	fffff7ff 	.word	0xfffff7ff
 8001aac:	ff00ffff 	.word	0xff00ffff
 8001ab0:	fffffbff 	.word	0xfffffbff

08001ab4 <led_init>:





void led_init(void){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0

	/*CURRENT LOW LED PA12  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE12_0);
 8001ab8:	23a0      	movs	r3, #160	; 0xa0
 8001aba:	05db      	lsls	r3, r3, #23
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	23a0      	movs	r3, #160	; 0xa0
 8001ac0:	05db      	lsls	r3, r3, #23
 8001ac2:	2180      	movs	r1, #128	; 0x80
 8001ac4:	0449      	lsls	r1, r1, #17
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE12_1);
 8001aca:	23a0      	movs	r3, #160	; 0xa0
 8001acc:	05db      	lsls	r3, r3, #23
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	23a0      	movs	r3, #160	; 0xa0
 8001ad2:	05db      	lsls	r3, r3, #23
 8001ad4:	492b      	ldr	r1, [pc, #172]	; (8001b84 <led_init+0xd0>)
 8001ad6:	400a      	ands	r2, r1
 8001ad8:	601a      	str	r2, [r3, #0]

	/*CURRENT NORMAL LED PA11  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE11_0);
 8001ada:	23a0      	movs	r3, #160	; 0xa0
 8001adc:	05db      	lsls	r3, r3, #23
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	23a0      	movs	r3, #160	; 0xa0
 8001ae2:	05db      	lsls	r3, r3, #23
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	03c9      	lsls	r1, r1, #15
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE11_1);
 8001aec:	23a0      	movs	r3, #160	; 0xa0
 8001aee:	05db      	lsls	r3, r3, #23
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	23a0      	movs	r3, #160	; 0xa0
 8001af4:	05db      	lsls	r3, r3, #23
 8001af6:	4924      	ldr	r1, [pc, #144]	; (8001b88 <led_init+0xd4>)
 8001af8:	400a      	ands	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]

	/*CURRENT HIGH  LED PA10  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE10_0);
 8001afc:	23a0      	movs	r3, #160	; 0xa0
 8001afe:	05db      	lsls	r3, r3, #23
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	23a0      	movs	r3, #160	; 0xa0
 8001b04:	05db      	lsls	r3, r3, #23
 8001b06:	2180      	movs	r1, #128	; 0x80
 8001b08:	0349      	lsls	r1, r1, #13
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE10_1);
 8001b0e:	23a0      	movs	r3, #160	; 0xa0
 8001b10:	05db      	lsls	r3, r3, #23
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	23a0      	movs	r3, #160	; 0xa0
 8001b16:	05db      	lsls	r3, r3, #23
 8001b18:	491c      	ldr	r1, [pc, #112]	; (8001b8c <led_init+0xd8>)
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	601a      	str	r2, [r3, #0]

	/*SYS_RP LED PC6  as output */
	SET_BIT(GPIOC->MODER, GPIO_MODER_MODE6_0);
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <led_init+0xdc>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <led_init+0xdc>)
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	0149      	lsls	r1, r1, #5
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOC->MODER, GPIO_MODER_MODE6_1);
 8001b2c:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <led_init+0xdc>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <led_init+0xdc>)
 8001b32:	4918      	ldr	r1, [pc, #96]	; (8001b94 <led_init+0xe0>)
 8001b34:	400a      	ands	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]

	/* TEMPERATURE OK  LED PA9  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE9_0);
 8001b38:	23a0      	movs	r3, #160	; 0xa0
 8001b3a:	05db      	lsls	r3, r3, #23
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	23a0      	movs	r3, #160	; 0xa0
 8001b40:	05db      	lsls	r3, r3, #23
 8001b42:	2180      	movs	r1, #128	; 0x80
 8001b44:	02c9      	lsls	r1, r1, #11
 8001b46:	430a      	orrs	r2, r1
 8001b48:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE9_1);
 8001b4a:	23a0      	movs	r3, #160	; 0xa0
 8001b4c:	05db      	lsls	r3, r3, #23
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	23a0      	movs	r3, #160	; 0xa0
 8001b52:	05db      	lsls	r3, r3, #23
 8001b54:	4910      	ldr	r1, [pc, #64]	; (8001b98 <led_init+0xe4>)
 8001b56:	400a      	ands	r2, r1
 8001b58:	601a      	str	r2, [r3, #0]

	/* TEMPERATURE HIGH LED PA8  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE8_0);
 8001b5a:	23a0      	movs	r3, #160	; 0xa0
 8001b5c:	05db      	lsls	r3, r3, #23
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	23a0      	movs	r3, #160	; 0xa0
 8001b62:	05db      	lsls	r3, r3, #23
 8001b64:	2180      	movs	r1, #128	; 0x80
 8001b66:	0249      	lsls	r1, r1, #9
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE8_1);
 8001b6c:	23a0      	movs	r3, #160	; 0xa0
 8001b6e:	05db      	lsls	r3, r3, #23
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	23a0      	movs	r3, #160	; 0xa0
 8001b74:	05db      	lsls	r3, r3, #23
 8001b76:	4909      	ldr	r1, [pc, #36]	; (8001b9c <led_init+0xe8>)
 8001b78:	400a      	ands	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]

}
 8001b7c:	46c0      	nop			; (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	fdffffff 	.word	0xfdffffff
 8001b88:	ff7fffff 	.word	0xff7fffff
 8001b8c:	ffdfffff 	.word	0xffdfffff
 8001b90:	50000800 	.word	0x50000800
 8001b94:	ffffdfff 	.word	0xffffdfff
 8001b98:	fff7ffff 	.word	0xfff7ffff
 8001b9c:	fffdffff 	.word	0xfffdffff

08001ba0 <led_enable_kalive>:

void led_enable_kalive(uint32_t counter){
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - counter > LED_KA_STATE_TIMEOUT)
 8001ba8:	f001 ff0a 	bl	80039c0 <HAL_GetTick>
 8001bac:	0002      	movs	r2, r0
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	1ad2      	subs	r2, r2, r3
 8001bb2:	23fa      	movs	r3, #250	; 0xfa
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d904      	bls.n	8001bc4 <led_enable_kalive+0x24>
		counter = HAL_GetTick();
 8001bba:	f001 ff01 	bl	80039c0 <HAL_GetTick>
 8001bbe:	0003      	movs	r3, r0
 8001bc0:	607b      	str	r3, [r7, #4]
		if (HAL_GetTick() - counter > LED_KA_ON_TIMEOUT)
			sys_rp_led_off();
		else
			sys_rp_led_on();
	}
}
 8001bc2:	e013      	b.n	8001bec <led_enable_kalive+0x4c>
		if (HAL_GetTick() - counter > LED_KA_ON_TIMEOUT)
 8001bc4:	f001 fefc 	bl	80039c0 <HAL_GetTick>
 8001bc8:	0002      	movs	r2, r0
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b32      	cmp	r3, #50	; 0x32
 8001bd0:	d906      	bls.n	8001be0 <led_enable_kalive+0x40>
			sys_rp_led_off();
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <led_enable_kalive+0x54>)
 8001bd4:	695a      	ldr	r2, [r3, #20]
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <led_enable_kalive+0x54>)
 8001bd8:	2140      	movs	r1, #64	; 0x40
 8001bda:	438a      	bics	r2, r1
 8001bdc:	615a      	str	r2, [r3, #20]
}
 8001bde:	e005      	b.n	8001bec <led_enable_kalive+0x4c>
			sys_rp_led_on();
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <led_enable_kalive+0x54>)
 8001be2:	695a      	ldr	r2, [r3, #20]
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <led_enable_kalive+0x54>)
 8001be6:	2140      	movs	r1, #64	; 0x40
 8001be8:	430a      	orrs	r2, r1
 8001bea:	615a      	str	r2, [r3, #20]
}
 8001bec:	46c0      	nop			; (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b002      	add	sp, #8
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	50000800 	.word	0x50000800

08001bf8 <lm75_init>:
#include "lm75.h"

void lm75_init(void ) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
	uint8_t cmd[2];
	cmd[0] = LM75_Conf;
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x0;
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	2200      	movs	r2, #0
 8001c08:	705a      	strb	r2, [r3, #1]
	i2c1_byteTransmit(LM75_ADDR<<1, cmd, 2);
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	0019      	movs	r1, r3
 8001c10:	209e      	movs	r0, #158	; 0x9e
 8001c12:	f7ff feab 	bl	800196c <i2c1_byteTransmit>
}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b002      	add	sp, #8
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <lm75_read>:

float lm75_read(void) {
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
	uint8_t cmd[2];
	float result = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	607b      	str	r3, [r7, #4]
	cmd[0] = LM75_Temp;
 8001c28:	003b      	movs	r3, r7
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]

	i2c1_byteTransmit( LM75_ADDR<<1, cmd, 1); // Send command string
 8001c2e:	003b      	movs	r3, r7
 8001c30:	2201      	movs	r2, #1
 8001c32:	0019      	movs	r1, r3
 8001c34:	209e      	movs	r0, #158	; 0x9e
 8001c36:	f7ff fe99 	bl	800196c <i2c1_byteTransmit>
	i2c1_buffReceive(LM75_ADDR<<1 | 1, cmd, 2); // Send command string
 8001c3a:	003b      	movs	r3, r7
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	0019      	movs	r1, r3
 8001c40:	209f      	movs	r0, #159	; 0x9f
 8001c42:	f7ff fe31 	bl	80018a8 <i2c1_buffReceive>
	result = (float) ((cmd[0] << 8) | cmd[1]) / 256.0f;
 8001c46:	003b      	movs	r3, r7
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	021b      	lsls	r3, r3, #8
 8001c4c:	003a      	movs	r2, r7
 8001c4e:	7852      	ldrb	r2, [r2, #1]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	0018      	movs	r0, r3
 8001c54:	f7ff fa94 	bl	8001180 <__aeabi_i2f>
 8001c58:	1c03      	adds	r3, r0, #0
 8001c5a:	2187      	movs	r1, #135	; 0x87
 8001c5c:	05c9      	lsls	r1, r1, #23
 8001c5e:	1c18      	adds	r0, r3, #0
 8001c60:	f7fe fdbc 	bl	80007dc <__aeabi_fdiv>
 8001c64:	1c03      	adds	r3, r0, #0
 8001c66:	607b      	str	r3, [r7, #4]
	return result;
 8001c68:	687b      	ldr	r3, [r7, #4]
}
 8001c6a:	1c18      	adds	r0, r3, #0
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b002      	add	sp, #8
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c74:	b590      	push	{r4, r7, lr}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c7a:	f001 fe25 	bl	80038c8 <HAL_Init>

  /* USER CODE BEGIN Init */

	/* enable clock access ro GPIOA and GPIOB */
	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOAEN);
 8001c7e:	4be4      	ldr	r3, [pc, #912]	; (8002010 <main+0x39c>)
 8001c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c82:	4be3      	ldr	r3, [pc, #908]	; (8002010 <main+0x39c>)
 8001c84:	2101      	movs	r1, #1
 8001c86:	430a      	orrs	r2, r1
 8001c88:	635a      	str	r2, [r3, #52]	; 0x34
	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN);
 8001c8a:	4be1      	ldr	r3, [pc, #900]	; (8002010 <main+0x39c>)
 8001c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c8e:	4be0      	ldr	r3, [pc, #896]	; (8002010 <main+0x39c>)
 8001c90:	2102      	movs	r1, #2
 8001c92:	430a      	orrs	r2, r1
 8001c94:	635a      	str	r2, [r3, #52]	; 0x34

	/* PBA15 as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE15_0);
 8001c96:	23a0      	movs	r3, #160	; 0xa0
 8001c98:	05db      	lsls	r3, r3, #23
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	23a0      	movs	r3, #160	; 0xa0
 8001c9e:	05db      	lsls	r3, r3, #23
 8001ca0:	2180      	movs	r1, #128	; 0x80
 8001ca2:	05c9      	lsls	r1, r1, #23
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE15_1);
 8001ca8:	23a0      	movs	r3, #160	; 0xa0
 8001caa:	05db      	lsls	r3, r3, #23
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	23a0      	movs	r3, #160	; 0xa0
 8001cb0:	05db      	lsls	r3, r3, #23
 8001cb2:	0052      	lsls	r2, r2, #1
 8001cb4:	0852      	lsrs	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cb8:	f000 fb04 	bl	80022c4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	module_init(&pa, POWER_AMPLIFIER, ID8);
 8001cbc:	4bd5      	ldr	r3, [pc, #852]	; (8002014 <main+0x3a0>)
 8001cbe:	2208      	movs	r2, #8
 8001cc0:	2109      	movs	r1, #9
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f000 ffa2 	bl	8002c0c <module_init>

	led_init();
 8001cc8:	f7ff fef4 	bl	8001ab4 <led_init>
	i2c1_init();
 8001ccc:	f7ff fcd8 	bl	8001680 <i2c1_init>
	uart1_init(HS16_CLK, BAUD_RATE, &uart1);
 8001cd0:	4ad1      	ldr	r2, [pc, #836]	; (8002018 <main+0x3a4>)
 8001cd2:	23e1      	movs	r3, #225	; 0xe1
 8001cd4:	025b      	lsls	r3, r3, #9
 8001cd6:	48d1      	ldr	r0, [pc, #836]	; (800201c <main+0x3a8>)
 8001cd8:	0019      	movs	r1, r3
 8001cda:	f001 fc19 	bl	8003510 <uart1_init>
	lm75_init();
 8001cde:	f7ff ff8b 	bl	8001bf8 <lm75_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ce2:	f000 fc91 	bl	8002608 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ce6:	f000 fc71 	bl	80025cc <MX_DMA_Init>
  MX_ADC1_Init();
 8001cea:	f000 fb49 	bl	8002380 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001cee:	f000 fc1f 	bl	8002530 <MX_USART1_UART_Init>
 // MX_IWDG_Init();
  /* USER CODE BEGIN 2 */

// Calibrate The ADC On Power-Up For Better Accuracy
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001cf2:	4bcb      	ldr	r3, [pc, #812]	; (8002020 <main+0x3ac>)
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f002 fdf9 	bl	80048ec <HAL_ADCEx_Calibration_Start>
	uart1_send_str("LNA init\n\r");
 8001cfa:	4bca      	ldr	r3, [pc, #808]	; (8002024 <main+0x3b0>)
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f001 fced 	bl	80036dc <uart1_send_str>
//	uint8_t addrs[5] = {0};  // 0x50 0x60 0x4f
//	i2c1_scanner(addrs);

	eeprom_1byte_write(ATT_VALUE_ADDR, 5);
 8001d02:	2105      	movs	r1, #5
 8001d04:	200d      	movs	r0, #13
 8001d06:	f7ff fc26 	bl	8001556 <eeprom_1byte_write>
	uint8_t attenuation = eeprom_1byte_read(ATT_VALUE_ADDR);
 8001d0a:	1dfc      	adds	r4, r7, #7
 8001d0c:	200d      	movs	r0, #13
 8001d0e:	f7ff fc08 	bl	8001522 <eeprom_1byte_read>
 8001d12:	0003      	movs	r3, r0
 8001d14:	7023      	strb	r3, [r4, #0]
	if (attenuation > 0 && attenuation < 30)
 8001d16:	1dfb      	adds	r3, r7, #7
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00b      	beq.n	8001d36 <main+0xc2>
 8001d1e:	1dfb      	adds	r3, r7, #7
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b1d      	cmp	r3, #29
 8001d24:	d807      	bhi.n	8001d36 <main+0xc2>
		bda4601_set_initial_att(attenuation, STARTING_MILLIS);
 8001d26:	4ac0      	ldr	r2, [pc, #768]	; (8002028 <main+0x3b4>)
 8001d28:	1dfb      	adds	r3, r7, #7
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	0011      	movs	r1, r2
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f7ff fbac 	bl	800148c <bda4601_set_initial_att>
 8001d34:	e003      	b.n	8001d3e <main+0xca>
	else
		bda4601_set_att(0, 3);
 8001d36:	2103      	movs	r1, #3
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f7ff fb23 	bl	8001384 <bda4601_set_att>

	if (eeprom_1byte_read(POUT_IS_CALIBRATED_ADDR) != AD8363_IS_CALIBRATED) {
 8001d3e:	202d      	movs	r0, #45	; 0x2d
 8001d40:	f7ff fbef 	bl	8001522 <eeprom_1byte_read>
 8001d44:	0003      	movs	r3, r0
 8001d46:	2baa      	cmp	r3, #170	; 0xaa
 8001d48:	d00a      	beq.n	8001d60 <main+0xec>
		eeprom_write(POUT_ADC_MIN_ADDR, AD8363_ADC_MIN);
 8001d4a:	23f4      	movs	r3, #244	; 0xf4
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	0019      	movs	r1, r3
 8001d50:	2025      	movs	r0, #37	; 0x25
 8001d52:	f7ff fc2b 	bl	80015ac <eeprom_write>
		eeprom_write(POUT_ADC_MAX_ADDR, AD8363_ADC_MAX);
 8001d56:	4bb5      	ldr	r3, [pc, #724]	; (800202c <main+0x3b8>)
 8001d58:	0019      	movs	r1, r3
 8001d5a:	2015      	movs	r0, #21
 8001d5c:	f7ff fc26 	bl	80015ac <eeprom_write>
	}
	if (eeprom_1byte_read(PIN_IS_CALIBRATED_ADDR) != MAX4003_IS_CALIBRATED) {
 8001d60:	2045      	movs	r0, #69	; 0x45
 8001d62:	f7ff fbde 	bl	8001522 <eeprom_1byte_read>
 8001d66:	0003      	movs	r3, r0
 8001d68:	2baa      	cmp	r3, #170	; 0xaa
 8001d6a:	d00a      	beq.n	8001d82 <main+0x10e>
		eeprom_write(PIN_ADC_MIN_ADDR, MAX4003_ADC_MIN);
 8001d6c:	23f4      	movs	r3, #244	; 0xf4
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	0019      	movs	r1, r3
 8001d72:	203d      	movs	r0, #61	; 0x3d
 8001d74:	f7ff fc1a 	bl	80015ac <eeprom_write>
		eeprom_write(PIN_ADC_MAX_ADDR, MAX4003_ADC_MAX);
 8001d78:	4bac      	ldr	r3, [pc, #688]	; (800202c <main+0x3b8>)
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	2035      	movs	r0, #53	; 0x35
 8001d7e:	f7ff fc15 	bl	80015ac <eeprom_write>
	}
	if (eeprom_1byte_read(VSWR_IS_CALIBRATED_ADDR) != MAX4003_IS_CALIBRATED) {
 8001d82:	205d      	movs	r0, #93	; 0x5d
 8001d84:	f7ff fbcd 	bl	8001522 <eeprom_1byte_read>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	2baa      	cmp	r3, #170	; 0xaa
 8001d8c:	d00a      	beq.n	8001da4 <main+0x130>
		eeprom_write(VSWR_ADC_MIN_ADDR, MAX4003_ADC_MIN);
 8001d8e:	23f4      	movs	r3, #244	; 0xf4
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	0019      	movs	r1, r3
 8001d94:	2055      	movs	r0, #85	; 0x55
 8001d96:	f7ff fc09 	bl	80015ac <eeprom_write>
		eeprom_write(VSWR_ADC_MAX_ADDR, MAX4003_ADC_MAX);
 8001d9a:	4ba4      	ldr	r3, [pc, #656]	; (800202c <main+0x3b8>)
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	204d      	movs	r0, #77	; 0x4d
 8001da0:	f7ff fc04 	bl	80015ac <eeprom_write>
	}

	pin.max = eeprom_read(PIN_ADC_MAX_ADDR);
 8001da4:	2035      	movs	r0, #53	; 0x35
 8001da6:	f7ff fc3b 	bl	8001620 <eeprom_read>
 8001daa:	0003      	movs	r3, r0
 8001dac:	001a      	movs	r2, r3
 8001dae:	4ba0      	ldr	r3, [pc, #640]	; (8002030 <main+0x3bc>)
 8001db0:	801a      	strh	r2, [r3, #0]
	pin.min = eeprom_read(PIN_ADC_MIN_ADDR);
 8001db2:	203d      	movs	r0, #61	; 0x3d
 8001db4:	f7ff fc34 	bl	8001620 <eeprom_read>
 8001db8:	0003      	movs	r3, r0
 8001dba:	001a      	movs	r2, r3
 8001dbc:	4b9c      	ldr	r3, [pc, #624]	; (8002030 <main+0x3bc>)
 8001dbe:	805a      	strh	r2, [r3, #2]
	pout.max = eeprom_read(POUT_ADC_MAX_ADDR);
 8001dc0:	2015      	movs	r0, #21
 8001dc2:	f7ff fc2d 	bl	8001620 <eeprom_read>
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	001a      	movs	r2, r3
 8001dca:	4b9a      	ldr	r3, [pc, #616]	; (8002034 <main+0x3c0>)
 8001dcc:	801a      	strh	r2, [r3, #0]
	pout.min = eeprom_read(POUT_ADC_MIN_ADDR);
 8001dce:	2025      	movs	r0, #37	; 0x25
 8001dd0:	f7ff fc26 	bl	8001620 <eeprom_read>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	001a      	movs	r2, r3
 8001dd8:	4b96      	ldr	r3, [pc, #600]	; (8002034 <main+0x3c0>)
 8001dda:	805a      	strh	r2, [r3, #2]
	vswr.max = eeprom_read(VSWR_ADC_MAX_ADDR);
 8001ddc:	204d      	movs	r0, #77	; 0x4d
 8001dde:	f7ff fc1f 	bl	8001620 <eeprom_read>
 8001de2:	0003      	movs	r3, r0
 8001de4:	001a      	movs	r2, r3
 8001de6:	4b94      	ldr	r3, [pc, #592]	; (8002038 <main+0x3c4>)
 8001de8:	801a      	strh	r2, [r3, #0]
	vswr.min = eeprom_read(VSWR_ADC_MIN_ADDR);
 8001dea:	2055      	movs	r0, #85	; 0x55
 8001dec:	f7ff fc18 	bl	8001620 <eeprom_read>
 8001df0:	0003      	movs	r3, r0
 8001df2:	001a      	movs	r2, r3
 8001df4:	4b90      	ldr	r3, [pc, #576]	; (8002038 <main+0x3c4>)
 8001df6:	805a      	strh	r2, [r3, #2]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, 4);
 8001df8:	4990      	ldr	r1, [pc, #576]	; (800203c <main+0x3c8>)
 8001dfa:	4b89      	ldr	r3, [pc, #548]	; (8002020 <main+0x3ac>)
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f002 f90c 	bl	800401c <HAL_ADC_Start_DMA>
	led.ka_counter = HAL_GetTick();
 8001e04:	f001 fddc 	bl	80039c0 <HAL_GetTick>
 8001e08:	0002      	movs	r2, r0
 8001e0a:	4b8d      	ldr	r3, [pc, #564]	; (8002040 <main+0x3cc>)
 8001e0c:	601a      	str	r2, [r3, #0]
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HAL_Delay(1000);
 8001e0e:	23fa      	movs	r3, #250	; 0xfa
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	0018      	movs	r0, r3
 8001e14:	f001 fdde 	bl	80039d4 <HAL_Delay>
		pa.temperature = lm75_read();
 8001e18:	f7ff ff01 	bl	8001c1e <lm75_read>
 8001e1c:	1c02      	adds	r2, r0, #0
 8001e1e:	4b7d      	ldr	r3, [pc, #500]	; (8002014 <main+0x3a0>)
 8001e20:	609a      	str	r2, [r3, #8]

		pa.pr = max4003_get_dbm(&vswr, adc_media[VSWR_i]);
 8001e22:	4b88      	ldr	r3, [pc, #544]	; (8002044 <main+0x3d0>)
 8001e24:	891a      	ldrh	r2, [r3, #8]
 8001e26:	4b84      	ldr	r3, [pc, #528]	; (8002038 <main+0x3c4>)
 8001e28:	0011      	movs	r1, r2
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f000 fe9a 	bl	8002b64 <max4003_get_dbm>
 8001e30:	0003      	movs	r3, r0
 8001e32:	b25a      	sxtb	r2, r3
 8001e34:	4b77      	ldr	r3, [pc, #476]	; (8002014 <main+0x3a0>)
 8001e36:	70da      	strb	r2, [r3, #3]
		pa.pout = ad8363_get_dbm(&pout, adc_media[AD8363_i]);
 8001e38:	4b82      	ldr	r3, [pc, #520]	; (8002044 <main+0x3d0>)
 8001e3a:	885a      	ldrh	r2, [r3, #2]
 8001e3c:	4b7d      	ldr	r3, [pc, #500]	; (8002034 <main+0x3c0>)
 8001e3e:	0011      	movs	r1, r2
 8001e40:	0018      	movs	r0, r3
 8001e42:	f7ff fa4b 	bl	80012dc <ad8363_get_dbm>
 8001e46:	0003      	movs	r3, r0
 8001e48:	b25a      	sxtb	r2, r3
 8001e4a:	4b72      	ldr	r3, [pc, #456]	; (8002014 <main+0x3a0>)
 8001e4c:	709a      	strb	r2, [r3, #2]
		pa.current = ADC_CURRENT_FACTOR * adc_media[CURRENT_i] / 4096.0f;
 8001e4e:	4b7d      	ldr	r3, [pc, #500]	; (8002044 <main+0x3d0>)
 8001e50:	88db      	ldrh	r3, [r3, #6]
 8001e52:	0018      	movs	r0, r3
 8001e54:	f7ff f994 	bl	8001180 <__aeabi_i2f>
 8001e58:	1c03      	adds	r3, r0, #0
 8001e5a:	4a7b      	ldr	r2, [pc, #492]	; (8002048 <main+0x3d4>)
 8001e5c:	1c11      	adds	r1, r2, #0
 8001e5e:	1c18      	adds	r0, r3, #0
 8001e60:	f7fe fe84 	bl	8000b6c <__aeabi_fmul>
 8001e64:	1c03      	adds	r3, r0, #0
 8001e66:	218b      	movs	r1, #139	; 0x8b
 8001e68:	05c9      	lsls	r1, r1, #23
 8001e6a:	1c18      	adds	r0, r3, #0
 8001e6c:	f7fe fcb6 	bl	80007dc <__aeabi_fdiv>
 8001e70:	1c03      	adds	r3, r0, #0
 8001e72:	1c18      	adds	r0, r3, #0
 8001e74:	f7fe fafc 	bl	8000470 <__aeabi_f2uiz>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	4b65      	ldr	r3, [pc, #404]	; (8002014 <main+0x3a0>)
 8001e7e:	719a      	strb	r2, [r3, #6]
		pa.gain = get_db_gain(adc_media[GAIN_i]);
 8001e80:	4b70      	ldr	r3, [pc, #448]	; (8002044 <main+0x3d0>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	0018      	movs	r0, r3
 8001e86:	f000 fc6d 	bl	8002764 <get_db_gain>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	001a      	movs	r2, r3
 8001e8e:	4b61      	ldr	r3, [pc, #388]	; (8002014 <main+0x3a0>)
 8001e90:	705a      	strb	r2, [r3, #1]
		pa.att = eeprom_1byte_read(ATT_VALUE_ADDR);
 8001e92:	200d      	movs	r0, #13
 8001e94:	f7ff fb45 	bl	8001522 <eeprom_1byte_read>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	001a      	movs	r2, r3
 8001e9c:	4b5d      	ldr	r3, [pc, #372]	; (8002014 <main+0x3a0>)
 8001e9e:	701a      	strb	r2, [r3, #0]
		pa.vswr =module_vswr_calc(pa.pout, pa.pr);
 8001ea0:	4b5c      	ldr	r3, [pc, #368]	; (8002014 <main+0x3a0>)
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	569a      	ldrsb	r2, [r3, r2]
 8001ea6:	4b5b      	ldr	r3, [pc, #364]	; (8002014 <main+0x3a0>)
 8001ea8:	78db      	ldrb	r3, [r3, #3]
 8001eaa:	b25b      	sxtb	r3, r3
 8001eac:	0019      	movs	r1, r3
 8001eae:	0010      	movs	r0, r2
 8001eb0:	f000 fed6 	bl	8002c60 <module_vswr_calc>
 8001eb4:	1c02      	adds	r2, r0, #0
 8001eb6:	4b57      	ldr	r3, [pc, #348]	; (8002014 <main+0x3a0>)
 8001eb8:	60da      	str	r2, [r3, #12]
		pa.pin = max4003_get_dbm(&pin, adc_media[PIN_i]);
 8001eba:	4b62      	ldr	r3, [pc, #392]	; (8002044 <main+0x3d0>)
 8001ebc:	895a      	ldrh	r2, [r3, #10]
 8001ebe:	4b5c      	ldr	r3, [pc, #368]	; (8002030 <main+0x3bc>)
 8001ec0:	0011      	movs	r1, r2
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f000 fe4e 	bl	8002b64 <max4003_get_dbm>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	b25a      	sxtb	r2, r3
 8001ecc:	4b51      	ldr	r3, [pc, #324]	; (8002014 <main+0x3a0>)
 8001ece:	715a      	strb	r2, [r3, #5]

		switch (rs485.cmd) {
 8001ed0:	4b5e      	ldr	r3, [pc, #376]	; (800204c <main+0x3d8>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	3b11      	subs	r3, #17
 8001ed6:	2b15      	cmp	r3, #21
 8001ed8:	d900      	bls.n	8001edc <main+0x268>
 8001eda:	e1c9      	b.n	8002270 <main+0x5fc>
 8001edc:	009a      	lsls	r2, r3, #2
 8001ede:	4b5c      	ldr	r3, [pc, #368]	; (8002050 <main+0x3dc>)
 8001ee0:	18d3      	adds	r3, r2, r3
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	469f      	mov	pc, r3

		case QUERY_PARAMETER_LTEL:
			pa.pr = max4003_get_dbm(&vswr, adc_media[VSWR_i]);
 8001ee6:	4b57      	ldr	r3, [pc, #348]	; (8002044 <main+0x3d0>)
 8001ee8:	891a      	ldrh	r2, [r3, #8]
 8001eea:	4b53      	ldr	r3, [pc, #332]	; (8002038 <main+0x3c4>)
 8001eec:	0011      	movs	r1, r2
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f000 fe38 	bl	8002b64 <max4003_get_dbm>
 8001ef4:	0003      	movs	r3, r0
 8001ef6:	b25a      	sxtb	r2, r3
 8001ef8:	4b46      	ldr	r3, [pc, #280]	; (8002014 <main+0x3a0>)
 8001efa:	70da      	strb	r2, [r3, #3]
			pa.pout = ad8363_get_dbm(&pout, adc_media[AD8363_i]);
 8001efc:	4b51      	ldr	r3, [pc, #324]	; (8002044 <main+0x3d0>)
 8001efe:	885a      	ldrh	r2, [r3, #2]
 8001f00:	4b4c      	ldr	r3, [pc, #304]	; (8002034 <main+0x3c0>)
 8001f02:	0011      	movs	r1, r2
 8001f04:	0018      	movs	r0, r3
 8001f06:	f7ff f9e9 	bl	80012dc <ad8363_get_dbm>
 8001f0a:	0003      	movs	r3, r0
 8001f0c:	b25a      	sxtb	r2, r3
 8001f0e:	4b41      	ldr	r3, [pc, #260]	; (8002014 <main+0x3a0>)
 8001f10:	709a      	strb	r2, [r3, #2]
			pa.current = ADC_CURRENT_FACTOR * adc_media[CURRENT_i] / 4096.0f;
 8001f12:	4b4c      	ldr	r3, [pc, #304]	; (8002044 <main+0x3d0>)
 8001f14:	88db      	ldrh	r3, [r3, #6]
 8001f16:	0018      	movs	r0, r3
 8001f18:	f7ff f932 	bl	8001180 <__aeabi_i2f>
 8001f1c:	1c03      	adds	r3, r0, #0
 8001f1e:	4a4a      	ldr	r2, [pc, #296]	; (8002048 <main+0x3d4>)
 8001f20:	1c11      	adds	r1, r2, #0
 8001f22:	1c18      	adds	r0, r3, #0
 8001f24:	f7fe fe22 	bl	8000b6c <__aeabi_fmul>
 8001f28:	1c03      	adds	r3, r0, #0
 8001f2a:	218b      	movs	r1, #139	; 0x8b
 8001f2c:	05c9      	lsls	r1, r1, #23
 8001f2e:	1c18      	adds	r0, r3, #0
 8001f30:	f7fe fc54 	bl	80007dc <__aeabi_fdiv>
 8001f34:	1c03      	adds	r3, r0, #0
 8001f36:	1c18      	adds	r0, r3, #0
 8001f38:	f7fe fa9a 	bl	8000470 <__aeabi_f2uiz>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	4b34      	ldr	r3, [pc, #208]	; (8002014 <main+0x3a0>)
 8001f42:	719a      	strb	r2, [r3, #6]
			pa.gain = get_db_gain(adc_media[GAIN_i]);
 8001f44:	4b3f      	ldr	r3, [pc, #252]	; (8002044 <main+0x3d0>)
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f000 fc0b 	bl	8002764 <get_db_gain>
 8001f4e:	0003      	movs	r3, r0
 8001f50:	001a      	movs	r2, r3
 8001f52:	4b30      	ldr	r3, [pc, #192]	; (8002014 <main+0x3a0>)
 8001f54:	705a      	strb	r2, [r3, #1]
			pa.att = eeprom_1byte_read(ATT_VALUE_ADDR);
 8001f56:	200d      	movs	r0, #13
 8001f58:	f7ff fae3 	bl	8001522 <eeprom_1byte_read>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	001a      	movs	r2, r3
 8001f60:	4b2c      	ldr	r3, [pc, #176]	; (8002014 <main+0x3a0>)
 8001f62:	701a      	strb	r2, [r3, #0]
			pa.vswr =module_vswr_calc(pa.pout, pa.pr);
 8001f64:	4b2b      	ldr	r3, [pc, #172]	; (8002014 <main+0x3a0>)
 8001f66:	2202      	movs	r2, #2
 8001f68:	569a      	ldrsb	r2, [r3, r2]
 8001f6a:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <main+0x3a0>)
 8001f6c:	78db      	ldrb	r3, [r3, #3]
 8001f6e:	b25b      	sxtb	r3, r3
 8001f70:	0019      	movs	r1, r3
 8001f72:	0010      	movs	r0, r2
 8001f74:	f000 fe74 	bl	8002c60 <module_vswr_calc>
 8001f78:	1c02      	adds	r2, r0, #0
 8001f7a:	4b26      	ldr	r3, [pc, #152]	; (8002014 <main+0x3a0>)
 8001f7c:	60da      	str	r2, [r3, #12]
			pa.pin = max4003_get_dbm(&pin, adc_media[PIN_i]);
 8001f7e:	4b31      	ldr	r3, [pc, #196]	; (8002044 <main+0x3d0>)
 8001f80:	895a      	ldrh	r2, [r3, #10]
 8001f82:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <main+0x3bc>)
 8001f84:	0011      	movs	r1, r2
 8001f86:	0018      	movs	r0, r3
 8001f88:	f000 fdec 	bl	8002b64 <max4003_get_dbm>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	b25a      	sxtb	r2, r3
 8001f90:	4b20      	ldr	r3, [pc, #128]	; (8002014 <main+0x3a0>)
 8001f92:	715a      	strb	r2, [r3, #5]
			rs485.len = 14;
 8001f94:	4b2d      	ldr	r3, [pc, #180]	; (800204c <main+0x3d8>)
 8001f96:	220e      	movs	r2, #14
 8001f98:	705a      	strb	r2, [r3, #1]
			rs485.frame = (uint8_t*) malloc(14);
 8001f9a:	200e      	movs	r0, #14
 8001f9c:	f004 fd28 	bl	80069f0 <malloc>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	001a      	movs	r2, r3
 8001fa4:	4b29      	ldr	r3, [pc, #164]	; (800204c <main+0x3d8>)
 8001fa6:	605a      	str	r2, [r3, #4]
			rs485_set_query_frame(&rs485, &pa);
 8001fa8:	4a1a      	ldr	r2, [pc, #104]	; (8002014 <main+0x3a0>)
 8001faa:	4b28      	ldr	r3, [pc, #160]	; (800204c <main+0x3d8>)
 8001fac:	0011      	movs	r1, r2
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f000 fed0 	bl	8002d54 <rs485_set_query_frame>
			uart1_send_frame((char*) rs485.frame, 14);
 8001fb4:	4b25      	ldr	r3, [pc, #148]	; (800204c <main+0x3d8>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	210e      	movs	r1, #14
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f001 fbb2 	bl	8003724 <uart1_send_frame>
			free(rs485.frame);
 8001fc0:	4b22      	ldr	r3, [pc, #136]	; (800204c <main+0x3d8>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f004 fd1d 	bl	8006a04 <free>
			uart1_clean_buffer(&uart1);
 8001fca:	4b13      	ldr	r3, [pc, #76]	; (8002018 <main+0x3a4>)
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f001 fbca 	bl	8003766 <uart1_clean_buffer>
			break;
 8001fd2:	e15a      	b.n	800228a <main+0x616>
		case SET_ATT_LTEL:
			pa.att = uart1.rx_buffer[6];
 8001fd4:	4b10      	ldr	r3, [pc, #64]	; (8002018 <main+0x3a4>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	799a      	ldrb	r2, [r3, #6]
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <main+0x3a0>)
 8001fdc:	701a      	strb	r2, [r3, #0]

			bda4601_set_att(pa.att, 3);
 8001fde:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <main+0x3a0>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2103      	movs	r1, #3
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f7ff f9cd 	bl	8001384 <bda4601_set_att>
			eeprom_write(ATT_VALUE_ADDR, pa.att);
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <main+0x3a0>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	0019      	movs	r1, r3
 8001ff2:	200d      	movs	r0, #13
 8001ff4:	f7ff fada 	bl	80015ac <eeprom_write>
//			sprintf(uart1.tx_buffer, "Attenuation %u\r\n", pa.att);
			uart1_send_frame((char*) uart1.tx_buffer, TX_BUFFLEN);
 8001ff8:	4b07      	ldr	r3, [pc, #28]	; (8002018 <main+0x3a4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2164      	movs	r1, #100	; 0x64
 8001ffe:	0018      	movs	r0, r3
 8002000:	f001 fb90 	bl	8003724 <uart1_send_frame>
			uart1_clean_buffer(&uart1);
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <main+0x3a4>)
 8002006:	0018      	movs	r0, r3
 8002008:	f001 fbad 	bl	8003766 <uart1_clean_buffer>
			break;
 800200c:	e13d      	b.n	800228a <main+0x616>
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	40021000 	.word	0x40021000
 8002014:	200001ec 	.word	0x200001ec
 8002018:	200001e0 	.word	0x200001e0
 800201c:	00f42400 	.word	0x00f42400
 8002020:	2000008c 	.word	0x2000008c
 8002024:	08006d38 	.word	0x08006d38
 8002028:	00001388 	.word	0x00001388
 800202c:	0000075b 	.word	0x0000075b
 8002030:	2000020c 	.word	0x2000020c
 8002034:	20000208 	.word	0x20000208
 8002038:	20000210 	.word	0x20000210
 800203c:	20000230 	.word	0x20000230
 8002040:	20000214 	.word	0x20000214
 8002044:	2000032c 	.word	0x2000032c
 8002048:	43951746 	.word	0x43951746
 800204c:	20000200 	.word	0x20000200
 8002050:	08006e34 	.word	0x08006e34
		case SET_POUT_MAX:

			pout.max = adc_media[AD8363_i];
 8002054:	4b90      	ldr	r3, [pc, #576]	; (8002298 <main+0x624>)
 8002056:	885a      	ldrh	r2, [r3, #2]
 8002058:	4b90      	ldr	r3, [pc, #576]	; (800229c <main+0x628>)
 800205a:	801a      	strh	r2, [r3, #0]
			eeprom_write(POUT_ADC_MAX_ADDR, adc_media[AD8363_i]);
 800205c:	4b8e      	ldr	r3, [pc, #568]	; (8002298 <main+0x624>)
 800205e:	885b      	ldrh	r3, [r3, #2]
 8002060:	0019      	movs	r1, r3
 8002062:	2015      	movs	r0, #21
 8002064:	f7ff faa2 	bl	80015ac <eeprom_write>
			HAL_Delay(5);
 8002068:	2005      	movs	r0, #5
 800206a:	f001 fcb3 	bl	80039d4 <HAL_Delay>
			eeprom_1byte_write(POUT_IS_CALIBRATED_ADDR,
 800206e:	21aa      	movs	r1, #170	; 0xaa
 8002070:	202d      	movs	r0, #45	; 0x2d
 8002072:	f7ff fa70 	bl	8001556 <eeprom_1byte_write>
					AD8363_IS_CALIBRATED);
			uart1_send_str("Saved Pout max value\n\r");
 8002076:	4b8a      	ldr	r3, [pc, #552]	; (80022a0 <main+0x62c>)
 8002078:	0018      	movs	r0, r3
 800207a:	f001 fb2f 	bl	80036dc <uart1_send_str>
			uart1_clean_buffer(&uart1);
 800207e:	4b89      	ldr	r3, [pc, #548]	; (80022a4 <main+0x630>)
 8002080:	0018      	movs	r0, r3
 8002082:	f001 fb70 	bl	8003766 <uart1_clean_buffer>
			break;
 8002086:	e100      	b.n	800228a <main+0x616>
		case SET_POUT_MIN:
			pout.min = adc_media[AD8363_i];
 8002088:	4b83      	ldr	r3, [pc, #524]	; (8002298 <main+0x624>)
 800208a:	885a      	ldrh	r2, [r3, #2]
 800208c:	4b83      	ldr	r3, [pc, #524]	; (800229c <main+0x628>)
 800208e:	805a      	strh	r2, [r3, #2]
			eeprom_write(POUT_ADC_MIN_ADDR, adc_media[AD8363_i]);
 8002090:	4b81      	ldr	r3, [pc, #516]	; (8002298 <main+0x624>)
 8002092:	885b      	ldrh	r3, [r3, #2]
 8002094:	0019      	movs	r1, r3
 8002096:	2025      	movs	r0, #37	; 0x25
 8002098:	f7ff fa88 	bl	80015ac <eeprom_write>
			HAL_Delay(5);
 800209c:	2005      	movs	r0, #5
 800209e:	f001 fc99 	bl	80039d4 <HAL_Delay>
			eeprom_1byte_write(POUT_IS_CALIBRATED_ADDR,
 80020a2:	21aa      	movs	r1, #170	; 0xaa
 80020a4:	202d      	movs	r0, #45	; 0x2d
 80020a6:	f7ff fa56 	bl	8001556 <eeprom_1byte_write>
					AD8363_IS_CALIBRATED);
//			uart1_send_str("Saved Pout min value\n\r");
			uart1_clean_buffer(&uart1);
 80020aa:	4b7e      	ldr	r3, [pc, #504]	; (80022a4 <main+0x630>)
 80020ac:	0018      	movs	r0, r3
 80020ae:	f001 fb5a 	bl	8003766 <uart1_clean_buffer>
			break;
 80020b2:	e0ea      	b.n	800228a <main+0x616>
		case SET_PIN_MAX:
			pa.pin =  adc_media[PIN_i];
 80020b4:	4b78      	ldr	r3, [pc, #480]	; (8002298 <main+0x624>)
 80020b6:	895b      	ldrh	r3, [r3, #10]
 80020b8:	b25a      	sxtb	r2, r3
 80020ba:	4b7b      	ldr	r3, [pc, #492]	; (80022a8 <main+0x634>)
 80020bc:	715a      	strb	r2, [r3, #5]
			eeprom_write(PIN_ADC_MAX_ADDR, adc_media[PIN_i]);
 80020be:	4b76      	ldr	r3, [pc, #472]	; (8002298 <main+0x624>)
 80020c0:	895b      	ldrh	r3, [r3, #10]
 80020c2:	0019      	movs	r1, r3
 80020c4:	2035      	movs	r0, #53	; 0x35
 80020c6:	f7ff fa71 	bl	80015ac <eeprom_write>
			HAL_Delay(5);
 80020ca:	2005      	movs	r0, #5
 80020cc:	f001 fc82 	bl	80039d4 <HAL_Delay>
			eeprom_1byte_write(PIN_IS_CALIBRATED_ADDR,
 80020d0:	21aa      	movs	r1, #170	; 0xaa
 80020d2:	2045      	movs	r0, #69	; 0x45
 80020d4:	f7ff fa3f 	bl	8001556 <eeprom_1byte_write>
					MAX4003_IS_CALIBRATED);
//			uart1_send_str("Saved Pin max value\n\r");
			uart1_clean_buffer(&uart1);
 80020d8:	4b72      	ldr	r3, [pc, #456]	; (80022a4 <main+0x630>)
 80020da:	0018      	movs	r0, r3
 80020dc:	f001 fb43 	bl	8003766 <uart1_clean_buffer>
			break;
 80020e0:	e0d3      	b.n	800228a <main+0x616>
		case SET_PIN_MIN:
			pa.pin =  adc_media[PIN_i];
 80020e2:	4b6d      	ldr	r3, [pc, #436]	; (8002298 <main+0x624>)
 80020e4:	895b      	ldrh	r3, [r3, #10]
 80020e6:	b25a      	sxtb	r2, r3
 80020e8:	4b6f      	ldr	r3, [pc, #444]	; (80022a8 <main+0x634>)
 80020ea:	715a      	strb	r2, [r3, #5]
			eeprom_write(PIN_ADC_MIN_ADDR, adc_media[PIN_i]);
 80020ec:	4b6a      	ldr	r3, [pc, #424]	; (8002298 <main+0x624>)
 80020ee:	895b      	ldrh	r3, [r3, #10]
 80020f0:	0019      	movs	r1, r3
 80020f2:	203d      	movs	r0, #61	; 0x3d
 80020f4:	f7ff fa5a 	bl	80015ac <eeprom_write>
			HAL_Delay(5);
 80020f8:	2005      	movs	r0, #5
 80020fa:	f001 fc6b 	bl	80039d4 <HAL_Delay>
			eeprom_write(PIN_IS_CALIBRATED_ADDR,
 80020fe:	21aa      	movs	r1, #170	; 0xaa
 8002100:	2045      	movs	r0, #69	; 0x45
 8002102:	f7ff fa53 	bl	80015ac <eeprom_write>
					MAX4003_IS_CALIBRATED);
//			uart1_send_str("Saved Pin min value\n\r");
			uart1_clean_buffer(&uart1);
 8002106:	4b67      	ldr	r3, [pc, #412]	; (80022a4 <main+0x630>)
 8002108:	0018      	movs	r0, r3
 800210a:	f001 fb2c 	bl	8003766 <uart1_clean_buffer>
			break;
 800210e:	e0bc      	b.n	800228a <main+0x616>
		case SET_VSWR_MAX:
			pa.pr =  adc_media[VSWR_i];
 8002110:	4b61      	ldr	r3, [pc, #388]	; (8002298 <main+0x624>)
 8002112:	891b      	ldrh	r3, [r3, #8]
 8002114:	b25a      	sxtb	r2, r3
 8002116:	4b64      	ldr	r3, [pc, #400]	; (80022a8 <main+0x634>)
 8002118:	70da      	strb	r2, [r3, #3]
			eeprom_write(VSWR_ADC_MAX_ADDR, adc_media[VSWR_i]);
 800211a:	4b5f      	ldr	r3, [pc, #380]	; (8002298 <main+0x624>)
 800211c:	891b      	ldrh	r3, [r3, #8]
 800211e:	0019      	movs	r1, r3
 8002120:	204d      	movs	r0, #77	; 0x4d
 8002122:	f7ff fa43 	bl	80015ac <eeprom_write>
			HAL_Delay(5);
 8002126:	2005      	movs	r0, #5
 8002128:	f001 fc54 	bl	80039d4 <HAL_Delay>
			eeprom_1byte_write(VSWR_IS_CALIBRATED_ADDR,
 800212c:	21aa      	movs	r1, #170	; 0xaa
 800212e:	205d      	movs	r0, #93	; 0x5d
 8002130:	f7ff fa11 	bl	8001556 <eeprom_1byte_write>
					MAX4003_IS_CALIBRATED);
//			uart1_send_str("Saved VSWR max value\n\r");
			uart1_clean_buffer(&uart1);
 8002134:	4b5b      	ldr	r3, [pc, #364]	; (80022a4 <main+0x630>)
 8002136:	0018      	movs	r0, r3
 8002138:	f001 fb15 	bl	8003766 <uart1_clean_buffer>
			break;
 800213c:	e0a5      	b.n	800228a <main+0x616>
		case SET_VSWR_MIN:
			pa.pr =  adc_media[VSWR_i];
 800213e:	4b56      	ldr	r3, [pc, #344]	; (8002298 <main+0x624>)
 8002140:	891b      	ldrh	r3, [r3, #8]
 8002142:	b25a      	sxtb	r2, r3
 8002144:	4b58      	ldr	r3, [pc, #352]	; (80022a8 <main+0x634>)
 8002146:	70da      	strb	r2, [r3, #3]
			eeprom_write(VSWR_ADC_MIN_ADDR, adc_media[VSWR_i]);
 8002148:	4b53      	ldr	r3, [pc, #332]	; (8002298 <main+0x624>)
 800214a:	891b      	ldrh	r3, [r3, #8]
 800214c:	0019      	movs	r1, r3
 800214e:	2055      	movs	r0, #85	; 0x55
 8002150:	f7ff fa2c 	bl	80015ac <eeprom_write>
			HAL_Delay(5);
 8002154:	2005      	movs	r0, #5
 8002156:	f001 fc3d 	bl	80039d4 <HAL_Delay>
			eeprom_write(VSWR_IS_CALIBRATED_ADDR,
 800215a:	21aa      	movs	r1, #170	; 0xaa
 800215c:	205d      	movs	r0, #93	; 0x5d
 800215e:	f7ff fa25 	bl	80015ac <eeprom_write>
					MAX4003_IS_CALIBRATED);
			uart1_send_str("Saved Pout min value\n\r");
 8002162:	4b52      	ldr	r3, [pc, #328]	; (80022ac <main+0x638>)
 8002164:	0018      	movs	r0, r3
 8002166:	f001 fab9 	bl	80036dc <uart1_send_str>
			uart1_clean_buffer(&uart1);
 800216a:	4b4e      	ldr	r3, [pc, #312]	; (80022a4 <main+0x630>)
 800216c:	0018      	movs	r0, r3
 800216e:	f001 fafa 	bl	8003766 <uart1_clean_buffer>
			break;
 8002172:	e08a      	b.n	800228a <main+0x616>
		case QUERY_PARAMETER_STR:
//			sprintf(uart1.tx_buffer,
//					"Pout %d[dBm] Att %u[dB] Gain %u[dB] Pin %d[dBm] Curent %d[mA] Voltage %u[V]\r\n",
//					pa.pout, pa.att, pa.gain, pa.pin, pa.current,
//					(uint8_t) pa.voltage);
			uart1_send_frame((char*) uart1.tx_buffer, TX_BUFFLEN);
 8002174:	4b4b      	ldr	r3, [pc, #300]	; (80022a4 <main+0x630>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2164      	movs	r1, #100	; 0x64
 800217a:	0018      	movs	r0, r3
 800217c:	f001 fad2 	bl	8003724 <uart1_send_frame>
			uart1_clean_buffer(&uart1);
 8002180:	4b48      	ldr	r3, [pc, #288]	; (80022a4 <main+0x630>)
 8002182:	0018      	movs	r0, r3
 8002184:	f001 faef 	bl	8003766 <uart1_clean_buffer>
			break;
 8002188:	e07f      	b.n	800228a <main+0x616>
		case QUERY_ADC:
//			sprintf(uart1.tx_buffer,
//					"Pout %d  \t Gain %u \t Curent %u \t Voltage %u\r\n",
//					adc_media[AD8363_i], adc_media[GAIN_i],
//					adc_media[CURRENT_i], adc_media[VOLTAGE_i]);
			uart1_send_frame((char*) uart1.tx_buffer, TX_BUFFLEN);
 800218a:	4b46      	ldr	r3, [pc, #280]	; (80022a4 <main+0x630>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2164      	movs	r1, #100	; 0x64
 8002190:	0018      	movs	r0, r3
 8002192:	f001 fac7 	bl	8003724 <uart1_send_frame>
			uart1_clean_buffer(&uart1);
 8002196:	4b43      	ldr	r3, [pc, #268]	; (80022a4 <main+0x630>)
 8002198:	0018      	movs	r0, r3
 800219a:	f001 fae4 	bl	8003766 <uart1_clean_buffer>
			break;
 800219e:	e074      	b.n	800228a <main+0x616>
		case QUERY_PARAMETER_SIGMA:
			pa.pr = max4003_get_dbm(&vswr, adc_media[VSWR_i]);
 80021a0:	4b3d      	ldr	r3, [pc, #244]	; (8002298 <main+0x624>)
 80021a2:	891a      	ldrh	r2, [r3, #8]
 80021a4:	4b42      	ldr	r3, [pc, #264]	; (80022b0 <main+0x63c>)
 80021a6:	0011      	movs	r1, r2
 80021a8:	0018      	movs	r0, r3
 80021aa:	f000 fcdb 	bl	8002b64 <max4003_get_dbm>
 80021ae:	0003      	movs	r3, r0
 80021b0:	b25a      	sxtb	r2, r3
 80021b2:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <main+0x634>)
 80021b4:	70da      	strb	r2, [r3, #3]
			pa.pout = ad8363_get_dbm(&pout, adc_media[AD8363_i]);
 80021b6:	4b38      	ldr	r3, [pc, #224]	; (8002298 <main+0x624>)
 80021b8:	885a      	ldrh	r2, [r3, #2]
 80021ba:	4b38      	ldr	r3, [pc, #224]	; (800229c <main+0x628>)
 80021bc:	0011      	movs	r1, r2
 80021be:	0018      	movs	r0, r3
 80021c0:	f7ff f88c 	bl	80012dc <ad8363_get_dbm>
 80021c4:	0003      	movs	r3, r0
 80021c6:	b25a      	sxtb	r2, r3
 80021c8:	4b37      	ldr	r3, [pc, #220]	; (80022a8 <main+0x634>)
 80021ca:	709a      	strb	r2, [r3, #2]
			pa.current = ADC_CURRENT_FACTOR * adc_media[CURRENT_i] / 4096.0f;
 80021cc:	4b32      	ldr	r3, [pc, #200]	; (8002298 <main+0x624>)
 80021ce:	88db      	ldrh	r3, [r3, #6]
 80021d0:	0018      	movs	r0, r3
 80021d2:	f7fe ffd5 	bl	8001180 <__aeabi_i2f>
 80021d6:	1c03      	adds	r3, r0, #0
 80021d8:	4a36      	ldr	r2, [pc, #216]	; (80022b4 <main+0x640>)
 80021da:	1c11      	adds	r1, r2, #0
 80021dc:	1c18      	adds	r0, r3, #0
 80021de:	f7fe fcc5 	bl	8000b6c <__aeabi_fmul>
 80021e2:	1c03      	adds	r3, r0, #0
 80021e4:	218b      	movs	r1, #139	; 0x8b
 80021e6:	05c9      	lsls	r1, r1, #23
 80021e8:	1c18      	adds	r0, r3, #0
 80021ea:	f7fe faf7 	bl	80007dc <__aeabi_fdiv>
 80021ee:	1c03      	adds	r3, r0, #0
 80021f0:	1c18      	adds	r0, r3, #0
 80021f2:	f7fe f93d 	bl	8000470 <__aeabi_f2uiz>
 80021f6:	0003      	movs	r3, r0
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <main+0x634>)
 80021fc:	719a      	strb	r2, [r3, #6]
			pa.gain = get_db_gain(adc_media[GAIN_i]);
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <main+0x624>)
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	0018      	movs	r0, r3
 8002204:	f000 faae 	bl	8002764 <get_db_gain>
 8002208:	0003      	movs	r3, r0
 800220a:	001a      	movs	r2, r3
 800220c:	4b26      	ldr	r3, [pc, #152]	; (80022a8 <main+0x634>)
 800220e:	705a      	strb	r2, [r3, #1]
			pa.att = eeprom_1byte_read(ATT_VALUE_ADDR);
 8002210:	200d      	movs	r0, #13
 8002212:	f7ff f986 	bl	8001522 <eeprom_1byte_read>
 8002216:	0003      	movs	r3, r0
 8002218:	001a      	movs	r2, r3
 800221a:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <main+0x634>)
 800221c:	701a      	strb	r2, [r3, #0]
			pa.vswr =module_vswr_calc(pa.pout, pa.pr);
 800221e:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <main+0x634>)
 8002220:	2202      	movs	r2, #2
 8002222:	569a      	ldrsb	r2, [r3, r2]
 8002224:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <main+0x634>)
 8002226:	78db      	ldrb	r3, [r3, #3]
 8002228:	b25b      	sxtb	r3, r3
 800222a:	0019      	movs	r1, r3
 800222c:	0010      	movs	r0, r2
 800222e:	f000 fd17 	bl	8002c60 <module_vswr_calc>
 8002232:	1c02      	adds	r2, r0, #0
 8002234:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <main+0x634>)
 8002236:	60da      	str	r2, [r3, #12]
			pa.pin = max4003_get_dbm(&pin, adc_media[PIN_i]);
 8002238:	4b17      	ldr	r3, [pc, #92]	; (8002298 <main+0x624>)
 800223a:	895a      	ldrh	r2, [r3, #10]
 800223c:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <main+0x644>)
 800223e:	0011      	movs	r1, r2
 8002240:	0018      	movs	r0, r3
 8002242:	f000 fc8f 	bl	8002b64 <max4003_get_dbm>
 8002246:	0003      	movs	r3, r0
 8002248:	b25a      	sxtb	r2, r3
 800224a:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <main+0x634>)
 800224c:	715a      	strb	r2, [r3, #5]
			rs485_set_query_frame(&rs485, &pa);
 800224e:	4a16      	ldr	r2, [pc, #88]	; (80022a8 <main+0x634>)
 8002250:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <main+0x648>)
 8002252:	0011      	movs	r1, r2
 8002254:	0018      	movs	r0, r3
 8002256:	f000 fd7d 	bl	8002d54 <rs485_set_query_frame>
			uart1_send_frame((char*) rs485.frame, 14);
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <main+0x648>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	210e      	movs	r1, #14
 8002260:	0018      	movs	r0, r3
 8002262:	f001 fa5f 	bl	8003724 <uart1_send_frame>
			uart1_clean_buffer(&uart1);
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <main+0x630>)
 8002268:	0018      	movs	r0, r3
 800226a:	f001 fa7c 	bl	8003766 <uart1_clean_buffer>
			break;
 800226e:	e00c      	b.n	800228a <main+0x616>
		default:
			rs485.cmd = rs485_check_frame(uart1.rx_buffer, uart1.rx_count);
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <main+0x630>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <main+0x630>)
 8002276:	7a1b      	ldrb	r3, [r3, #8]
 8002278:	0019      	movs	r1, r3
 800227a:	0010      	movs	r0, r2
 800227c:	f000 fd30 	bl	8002ce0 <rs485_check_frame>
 8002280:	0003      	movs	r3, r0
 8002282:	001a      	movs	r2, r3
 8002284:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <main+0x648>)
 8002286:	701a      	strb	r2, [r3, #0]
			break;
 8002288:	46c0      	nop			; (mov r8, r8)
		}

		led_enable_kalive(led.sysrp_counter);
 800228a:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <main+0x64c>)
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	0018      	movs	r0, r3
 8002290:	f7ff fc86 	bl	8001ba0 <led_enable_kalive>
		HAL_Delay(1000);
 8002294:	e5bb      	b.n	8001e0e <main+0x19a>
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	2000032c 	.word	0x2000032c
 800229c:	20000208 	.word	0x20000208
 80022a0:	08006d44 	.word	0x08006d44
 80022a4:	200001e0 	.word	0x200001e0
 80022a8:	200001ec 	.word	0x200001ec
 80022ac:	08006d5c 	.word	0x08006d5c
 80022b0:	20000210 	.word	0x20000210
 80022b4:	43951746 	.word	0x43951746
 80022b8:	2000020c 	.word	0x2000020c
 80022bc:	20000200 	.word	0x20000200
 80022c0:	20000214 	.word	0x20000214

080022c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	b093      	sub	sp, #76	; 0x4c
 80022c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ca:	2414      	movs	r4, #20
 80022cc:	193b      	adds	r3, r7, r4
 80022ce:	0018      	movs	r0, r3
 80022d0:	2334      	movs	r3, #52	; 0x34
 80022d2:	001a      	movs	r2, r3
 80022d4:	2100      	movs	r1, #0
 80022d6:	f004 fb9f 	bl	8006a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	0018      	movs	r0, r3
 80022de:	2310      	movs	r3, #16
 80022e0:	001a      	movs	r2, r3
 80022e2:	2100      	movs	r1, #0
 80022e4:	f004 fb98 	bl	8006a18 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	0018      	movs	r0, r3
 80022ee:	f003 f885 	bl	80053fc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80022f2:	193b      	adds	r3, r7, r4
 80022f4:	220a      	movs	r2, #10
 80022f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022f8:	193b      	adds	r3, r7, r4
 80022fa:	2280      	movs	r2, #128	; 0x80
 80022fc:	0052      	lsls	r2, r2, #1
 80022fe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002300:	0021      	movs	r1, r4
 8002302:	187b      	adds	r3, r7, r1
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002308:	187b      	adds	r3, r7, r1
 800230a:	2240      	movs	r2, #64	; 0x40
 800230c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800230e:	187b      	adds	r3, r7, r1
 8002310:	2201      	movs	r2, #1
 8002312:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002314:	187b      	adds	r3, r7, r1
 8002316:	2202      	movs	r2, #2
 8002318:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800231a:	187b      	adds	r3, r7, r1
 800231c:	2202      	movs	r2, #2
 800231e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002320:	187b      	adds	r3, r7, r1
 8002322:	2210      	movs	r2, #16
 8002324:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002326:	187b      	adds	r3, r7, r1
 8002328:	2210      	movs	r2, #16
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800232c:	187b      	adds	r3, r7, r1
 800232e:	2280      	movs	r2, #128	; 0x80
 8002330:	0292      	lsls	r2, r2, #10
 8002332:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002334:	187b      	adds	r3, r7, r1
 8002336:	2280      	movs	r2, #128	; 0x80
 8002338:	0592      	lsls	r2, r2, #22
 800233a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800233c:	187b      	adds	r3, r7, r1
 800233e:	0018      	movs	r0, r3
 8002340:	f003 f8a8 	bl	8005494 <HAL_RCC_OscConfig>
 8002344:	1e03      	subs	r3, r0, #0
 8002346:	d001      	beq.n	800234c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002348:	f000 fc06 	bl	8002b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800234c:	1d3b      	adds	r3, r7, #4
 800234e:	2207      	movs	r2, #7
 8002350:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	2202      	movs	r2, #2
 8002356:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800235e:	1d3b      	adds	r3, r7, #4
 8002360:	2200      	movs	r2, #0
 8002362:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	2102      	movs	r1, #2
 8002368:	0018      	movs	r0, r3
 800236a:	f003 fba3 	bl	8005ab4 <HAL_RCC_ClockConfig>
 800236e:	1e03      	subs	r3, r0, #0
 8002370:	d001      	beq.n	8002376 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002372:	f000 fbf1 	bl	8002b58 <Error_Handler>
  }
}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	46bd      	mov	sp, r7
 800237a:	b013      	add	sp, #76	; 0x4c
 800237c:	bd90      	pop	{r4, r7, pc}
	...

08002380 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	0018      	movs	r0, r3
 800238a:	230c      	movs	r3, #12
 800238c:	001a      	movs	r2, r3
 800238e:	2100      	movs	r1, #0
 8002390:	f004 fb42 	bl	8006a18 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002394:	4b5e      	ldr	r3, [pc, #376]	; (8002510 <MX_ADC1_Init+0x190>)
 8002396:	4a5f      	ldr	r2, [pc, #380]	; (8002514 <MX_ADC1_Init+0x194>)
 8002398:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800239a:	4b5d      	ldr	r3, [pc, #372]	; (8002510 <MX_ADC1_Init+0x190>)
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	05d2      	lsls	r2, r2, #23
 80023a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023a2:	4b5b      	ldr	r3, [pc, #364]	; (8002510 <MX_ADC1_Init+0x190>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023a8:	4b59      	ldr	r3, [pc, #356]	; (8002510 <MX_ADC1_Init+0x190>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80023ae:	4b58      	ldr	r3, [pc, #352]	; (8002510 <MX_ADC1_Init+0x190>)
 80023b0:	2280      	movs	r2, #128	; 0x80
 80023b2:	0392      	lsls	r2, r2, #14
 80023b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023b6:	4b56      	ldr	r3, [pc, #344]	; (8002510 <MX_ADC1_Init+0x190>)
 80023b8:	2204      	movs	r2, #4
 80023ba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80023bc:	4b54      	ldr	r3, [pc, #336]	; (8002510 <MX_ADC1_Init+0x190>)
 80023be:	2200      	movs	r2, #0
 80023c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80023c2:	4b53      	ldr	r3, [pc, #332]	; (8002510 <MX_ADC1_Init+0x190>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80023c8:	4b51      	ldr	r3, [pc, #324]	; (8002510 <MX_ADC1_Init+0x190>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 7;
 80023ce:	4b50      	ldr	r3, [pc, #320]	; (8002510 <MX_ADC1_Init+0x190>)
 80023d0:	2207      	movs	r2, #7
 80023d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023d4:	4b4e      	ldr	r3, [pc, #312]	; (8002510 <MX_ADC1_Init+0x190>)
 80023d6:	2220      	movs	r2, #32
 80023d8:	2100      	movs	r1, #0
 80023da:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023dc:	4b4c      	ldr	r3, [pc, #304]	; (8002510 <MX_ADC1_Init+0x190>)
 80023de:	2200      	movs	r2, #0
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023e2:	4b4b      	ldr	r3, [pc, #300]	; (8002510 <MX_ADC1_Init+0x190>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80023e8:	4b49      	ldr	r3, [pc, #292]	; (8002510 <MX_ADC1_Init+0x190>)
 80023ea:	222c      	movs	r2, #44	; 0x2c
 80023ec:	2100      	movs	r1, #0
 80023ee:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80023f0:	4b47      	ldr	r3, [pc, #284]	; (8002510 <MX_ADC1_Init+0x190>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80023f6:	4b46      	ldr	r3, [pc, #280]	; (8002510 <MX_ADC1_Init+0x190>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80023fc:	4b44      	ldr	r3, [pc, #272]	; (8002510 <MX_ADC1_Init+0x190>)
 80023fe:	2200      	movs	r2, #0
 8002400:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002402:	4b43      	ldr	r3, [pc, #268]	; (8002510 <MX_ADC1_Init+0x190>)
 8002404:	223c      	movs	r2, #60	; 0x3c
 8002406:	2100      	movs	r1, #0
 8002408:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800240a:	4b41      	ldr	r3, [pc, #260]	; (8002510 <MX_ADC1_Init+0x190>)
 800240c:	2200      	movs	r2, #0
 800240e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002410:	4b3f      	ldr	r3, [pc, #252]	; (8002510 <MX_ADC1_Init+0x190>)
 8002412:	0018      	movs	r0, r3
 8002414:	f001 fc5a 	bl	8003ccc <HAL_ADC_Init>
 8002418:	1e03      	subs	r3, r0, #0
 800241a:	d001      	beq.n	8002420 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800241c:	f000 fb9c 	bl	8002b58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	2200      	movs	r2, #0
 800242a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800242c:	1d3b      	adds	r3, r7, #4
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002432:	1d3a      	adds	r2, r7, #4
 8002434:	4b36      	ldr	r3, [pc, #216]	; (8002510 <MX_ADC1_Init+0x190>)
 8002436:	0011      	movs	r1, r2
 8002438:	0018      	movs	r0, r3
 800243a:	f001 fe8d 	bl	8004158 <HAL_ADC_ConfigChannel>
 800243e:	1e03      	subs	r3, r0, #0
 8002440:	d001      	beq.n	8002446 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8002442:	f000 fb89 	bl	8002b58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	4a33      	ldr	r2, [pc, #204]	; (8002518 <MX_ADC1_Init+0x198>)
 800244a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800244c:	1d3b      	adds	r3, r7, #4
 800244e:	2204      	movs	r2, #4
 8002450:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002452:	1d3a      	adds	r2, r7, #4
 8002454:	4b2e      	ldr	r3, [pc, #184]	; (8002510 <MX_ADC1_Init+0x190>)
 8002456:	0011      	movs	r1, r2
 8002458:	0018      	movs	r0, r3
 800245a:	f001 fe7d 	bl	8004158 <HAL_ADC_ConfigChannel>
 800245e:	1e03      	subs	r3, r0, #0
 8002460:	d001      	beq.n	8002466 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8002462:	f000 fb79 	bl	8002b58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002466:	1d3b      	adds	r3, r7, #4
 8002468:	4a2c      	ldr	r2, [pc, #176]	; (800251c <MX_ADC1_Init+0x19c>)
 800246a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800246c:	1d3b      	adds	r3, r7, #4
 800246e:	2208      	movs	r2, #8
 8002470:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002472:	1d3a      	adds	r2, r7, #4
 8002474:	4b26      	ldr	r3, [pc, #152]	; (8002510 <MX_ADC1_Init+0x190>)
 8002476:	0011      	movs	r1, r2
 8002478:	0018      	movs	r0, r3
 800247a:	f001 fe6d 	bl	8004158 <HAL_ADC_ConfigChannel>
 800247e:	1e03      	subs	r3, r0, #0
 8002480:	d001      	beq.n	8002486 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8002482:	f000 fb69 	bl	8002b58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002486:	1d3b      	adds	r3, r7, #4
 8002488:	4a25      	ldr	r2, [pc, #148]	; (8002520 <MX_ADC1_Init+0x1a0>)
 800248a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800248c:	1d3b      	adds	r3, r7, #4
 800248e:	220c      	movs	r2, #12
 8002490:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002492:	1d3a      	adds	r2, r7, #4
 8002494:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <MX_ADC1_Init+0x190>)
 8002496:	0011      	movs	r1, r2
 8002498:	0018      	movs	r0, r3
 800249a:	f001 fe5d 	bl	8004158 <HAL_ADC_ConfigChannel>
 800249e:	1e03      	subs	r3, r0, #0
 80024a0:	d001      	beq.n	80024a6 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80024a2:	f000 fb59 	bl	8002b58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80024a6:	1d3b      	adds	r3, r7, #4
 80024a8:	4a1e      	ldr	r2, [pc, #120]	; (8002524 <MX_ADC1_Init+0x1a4>)
 80024aa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	2210      	movs	r2, #16
 80024b0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024b2:	1d3a      	adds	r2, r7, #4
 80024b4:	4b16      	ldr	r3, [pc, #88]	; (8002510 <MX_ADC1_Init+0x190>)
 80024b6:	0011      	movs	r1, r2
 80024b8:	0018      	movs	r0, r3
 80024ba:	f001 fe4d 	bl	8004158 <HAL_ADC_ConfigChannel>
 80024be:	1e03      	subs	r3, r0, #0
 80024c0:	d001      	beq.n	80024c6 <MX_ADC1_Init+0x146>
  {
    Error_Handler();
 80024c2:	f000 fb49 	bl	8002b58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	4a17      	ldr	r2, [pc, #92]	; (8002528 <MX_ADC1_Init+0x1a8>)
 80024ca:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	2214      	movs	r2, #20
 80024d0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024d2:	1d3a      	adds	r2, r7, #4
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <MX_ADC1_Init+0x190>)
 80024d6:	0011      	movs	r1, r2
 80024d8:	0018      	movs	r0, r3
 80024da:	f001 fe3d 	bl	8004158 <HAL_ADC_ConfigChannel>
 80024de:	1e03      	subs	r3, r0, #0
 80024e0:	d001      	beq.n	80024e6 <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 80024e2:	f000 fb39 	bl	8002b58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80024e6:	1d3b      	adds	r3, r7, #4
 80024e8:	4a10      	ldr	r2, [pc, #64]	; (800252c <MX_ADC1_Init+0x1ac>)
 80024ea:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80024ec:	1d3b      	adds	r3, r7, #4
 80024ee:	2218      	movs	r2, #24
 80024f0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024f2:	1d3a      	adds	r2, r7, #4
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <MX_ADC1_Init+0x190>)
 80024f6:	0011      	movs	r1, r2
 80024f8:	0018      	movs	r0, r3
 80024fa:	f001 fe2d 	bl	8004158 <HAL_ADC_ConfigChannel>
 80024fe:	1e03      	subs	r3, r0, #0
 8002500:	d001      	beq.n	8002506 <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 8002502:	f000 fb29 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	46bd      	mov	sp, r7
 800250a:	b004      	add	sp, #16
 800250c:	bd80      	pop	{r7, pc}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	2000008c 	.word	0x2000008c
 8002514:	40012400 	.word	0x40012400
 8002518:	04000002 	.word	0x04000002
 800251c:	08000004 	.word	0x08000004
 8002520:	10000010 	.word	0x10000010
 8002524:	14000020 	.word	0x14000020
 8002528:	18000040 	.word	0x18000040
 800252c:	b0001000 	.word	0xb0001000

08002530 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002534:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <MX_USART1_UART_Init+0x94>)
 8002536:	4a24      	ldr	r2, [pc, #144]	; (80025c8 <MX_USART1_UART_Init+0x98>)
 8002538:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800253a:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <MX_USART1_UART_Init+0x94>)
 800253c:	2296      	movs	r2, #150	; 0x96
 800253e:	0192      	lsls	r2, r2, #6
 8002540:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002542:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <MX_USART1_UART_Init+0x94>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002548:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <MX_USART1_UART_Init+0x94>)
 800254a:	2200      	movs	r2, #0
 800254c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800254e:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <MX_USART1_UART_Init+0x94>)
 8002550:	2200      	movs	r2, #0
 8002552:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <MX_USART1_UART_Init+0x94>)
 8002556:	220c      	movs	r2, #12
 8002558:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <MX_USART1_UART_Init+0x94>)
 800255c:	2200      	movs	r2, #0
 800255e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002560:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <MX_USART1_UART_Init+0x94>)
 8002562:	2200      	movs	r2, #0
 8002564:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002566:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <MX_USART1_UART_Init+0x94>)
 8002568:	2200      	movs	r2, #0
 800256a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800256c:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <MX_USART1_UART_Init+0x94>)
 800256e:	2200      	movs	r2, #0
 8002570:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002572:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <MX_USART1_UART_Init+0x94>)
 8002574:	2200      	movs	r2, #0
 8002576:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002578:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <MX_USART1_UART_Init+0x94>)
 800257a:	0018      	movs	r0, r3
 800257c:	f003 fd6a 	bl	8006054 <HAL_UART_Init>
 8002580:	1e03      	subs	r3, r0, #0
 8002582:	d001      	beq.n	8002588 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002584:	f000 fae8 	bl	8002b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002588:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <MX_USART1_UART_Init+0x94>)
 800258a:	2100      	movs	r1, #0
 800258c:	0018      	movs	r0, r3
 800258e:	f004 f925 	bl	80067dc <HAL_UARTEx_SetTxFifoThreshold>
 8002592:	1e03      	subs	r3, r0, #0
 8002594:	d001      	beq.n	800259a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002596:	f000 fadf 	bl	8002b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800259a:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <MX_USART1_UART_Init+0x94>)
 800259c:	2100      	movs	r1, #0
 800259e:	0018      	movs	r0, r3
 80025a0:	f004 f95c 	bl	800685c <HAL_UARTEx_SetRxFifoThreshold>
 80025a4:	1e03      	subs	r3, r0, #0
 80025a6:	d001      	beq.n	80025ac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80025a8:	f000 fad6 	bl	8002b58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <MX_USART1_UART_Init+0x94>)
 80025ae:	0018      	movs	r0, r3
 80025b0:	f004 f8da 	bl	8006768 <HAL_UARTEx_DisableFifoMode>
 80025b4:	1e03      	subs	r3, r0, #0
 80025b6:	d001      	beq.n	80025bc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80025b8:	f000 face 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025bc:	46c0      	nop			; (mov r8, r8)
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	2000014c 	.word	0x2000014c
 80025c8:	40013800 	.word	0x40013800

080025cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025d2:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <MX_DMA_Init+0x38>)
 80025d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <MX_DMA_Init+0x38>)
 80025d8:	2101      	movs	r1, #1
 80025da:	430a      	orrs	r2, r1
 80025dc:	639a      	str	r2, [r3, #56]	; 0x38
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <MX_DMA_Init+0x38>)
 80025e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e2:	2201      	movs	r2, #1
 80025e4:	4013      	ands	r3, r2
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2100      	movs	r1, #0
 80025ee:	2009      	movs	r0, #9
 80025f0:	f002 fafe 	bl	8004bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80025f4:	2009      	movs	r0, #9
 80025f6:	f002 fb10 	bl	8004c1a <HAL_NVIC_EnableIRQ>

}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b002      	add	sp, #8
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	40021000 	.word	0x40021000

08002608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b089      	sub	sp, #36	; 0x24
 800260c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260e:	240c      	movs	r4, #12
 8002610:	193b      	adds	r3, r7, r4
 8002612:	0018      	movs	r0, r3
 8002614:	2314      	movs	r3, #20
 8002616:	001a      	movs	r2, r3
 8002618:	2100      	movs	r1, #0
 800261a:	f004 f9fd 	bl	8006a18 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800261e:	4b4d      	ldr	r3, [pc, #308]	; (8002754 <MX_GPIO_Init+0x14c>)
 8002620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002622:	4b4c      	ldr	r3, [pc, #304]	; (8002754 <MX_GPIO_Init+0x14c>)
 8002624:	2102      	movs	r1, #2
 8002626:	430a      	orrs	r2, r1
 8002628:	635a      	str	r2, [r3, #52]	; 0x34
 800262a:	4b4a      	ldr	r3, [pc, #296]	; (8002754 <MX_GPIO_Init+0x14c>)
 800262c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262e:	2202      	movs	r2, #2
 8002630:	4013      	ands	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002636:	4b47      	ldr	r3, [pc, #284]	; (8002754 <MX_GPIO_Init+0x14c>)
 8002638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800263a:	4b46      	ldr	r3, [pc, #280]	; (8002754 <MX_GPIO_Init+0x14c>)
 800263c:	2104      	movs	r1, #4
 800263e:	430a      	orrs	r2, r1
 8002640:	635a      	str	r2, [r3, #52]	; 0x34
 8002642:	4b44      	ldr	r3, [pc, #272]	; (8002754 <MX_GPIO_Init+0x14c>)
 8002644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002646:	2204      	movs	r2, #4
 8002648:	4013      	ands	r3, r2
 800264a:	607b      	str	r3, [r7, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800264e:	4b41      	ldr	r3, [pc, #260]	; (8002754 <MX_GPIO_Init+0x14c>)
 8002650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002652:	4b40      	ldr	r3, [pc, #256]	; (8002754 <MX_GPIO_Init+0x14c>)
 8002654:	2101      	movs	r1, #1
 8002656:	430a      	orrs	r2, r1
 8002658:	635a      	str	r2, [r3, #52]	; 0x34
 800265a:	4b3e      	ldr	r3, [pc, #248]	; (8002754 <MX_GPIO_Init+0x14c>)
 800265c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265e:	2201      	movs	r2, #1
 8002660:	4013      	ands	r3, r2
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA_HAB_Pin|LE_ATT_Pin|TEMP_HIGH_Pin|TEMP_OK_Pin
 8002666:	493c      	ldr	r1, [pc, #240]	; (8002758 <MX_GPIO_Init+0x150>)
 8002668:	23a0      	movs	r3, #160	; 0xa0
 800266a:	05db      	lsls	r3, r3, #23
 800266c:	2200      	movs	r2, #0
 800266e:	0018      	movs	r0, r3
 8002670:	f002 fea6 	bl	80053c0 <HAL_GPIO_WritePin>
                          |CURR_H_Pin|CURR_N_Pin|CURR_L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_ATT_Pin|DATA_ATT_Pin|DE_485_Pin, GPIO_PIN_RESET);
 8002674:	4b39      	ldr	r3, [pc, #228]	; (800275c <MX_GPIO_Init+0x154>)
 8002676:	2200      	movs	r2, #0
 8002678:	2123      	movs	r1, #35	; 0x23
 800267a:	0018      	movs	r0, r3
 800267c:	f002 fea0 	bl	80053c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002680:	4b37      	ldr	r3, [pc, #220]	; (8002760 <MX_GPIO_Init+0x158>)
 8002682:	2200      	movs	r2, #0
 8002684:	2140      	movs	r1, #64	; 0x40
 8002686:	0018      	movs	r0, r3
 8002688:	f002 fe9a 	bl	80053c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800268c:	193b      	adds	r3, r7, r4
 800268e:	22c0      	movs	r2, #192	; 0xc0
 8002690:	0092      	lsls	r2, r2, #2
 8002692:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002694:	193b      	adds	r3, r7, r4
 8002696:	2212      	movs	r2, #18
 8002698:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	193b      	adds	r3, r7, r4
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a0:	193b      	adds	r3, r7, r4
 80026a2:	2200      	movs	r2, #0
 80026a4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80026a6:	193b      	adds	r3, r7, r4
 80026a8:	2206      	movs	r2, #6
 80026aa:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ac:	193b      	adds	r3, r7, r4
 80026ae:	4a2b      	ldr	r2, [pc, #172]	; (800275c <MX_GPIO_Init+0x154>)
 80026b0:	0019      	movs	r1, r3
 80026b2:	0010      	movs	r0, r2
 80026b4:	f002 fd20 	bl	80050f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_INT_Pin */
  GPIO_InitStruct.Pin = TEMP_INT_Pin;
 80026b8:	0021      	movs	r1, r4
 80026ba:	187b      	adds	r3, r7, r1
 80026bc:	2280      	movs	r2, #128	; 0x80
 80026be:	01d2      	lsls	r2, r2, #7
 80026c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026c2:	000c      	movs	r4, r1
 80026c4:	193b      	adds	r3, r7, r4
 80026c6:	2200      	movs	r2, #0
 80026c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	193b      	adds	r3, r7, r4
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TEMP_INT_GPIO_Port, &GPIO_InitStruct);
 80026d0:	193b      	adds	r3, r7, r4
 80026d2:	4a23      	ldr	r2, [pc, #140]	; (8002760 <MX_GPIO_Init+0x158>)
 80026d4:	0019      	movs	r1, r3
 80026d6:	0010      	movs	r0, r2
 80026d8:	f002 fd0e 	bl	80050f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA_HAB_Pin LE_ATT_Pin TEMP_HIGH_Pin TEMP_OK_Pin
                           CURR_H_Pin CURR_N_Pin CURR_L_Pin */
  GPIO_InitStruct.Pin = PA_HAB_Pin|LE_ATT_Pin|TEMP_HIGH_Pin|TEMP_OK_Pin
 80026dc:	193b      	adds	r3, r7, r4
 80026de:	4a1e      	ldr	r2, [pc, #120]	; (8002758 <MX_GPIO_Init+0x150>)
 80026e0:	601a      	str	r2, [r3, #0]
                          |CURR_H_Pin|CURR_N_Pin|CURR_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e2:	193b      	adds	r3, r7, r4
 80026e4:	2201      	movs	r2, #1
 80026e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	193b      	adds	r3, r7, r4
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ee:	193b      	adds	r3, r7, r4
 80026f0:	2200      	movs	r2, #0
 80026f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f4:	193a      	adds	r2, r7, r4
 80026f6:	23a0      	movs	r3, #160	; 0xa0
 80026f8:	05db      	lsls	r3, r3, #23
 80026fa:	0011      	movs	r1, r2
 80026fc:	0018      	movs	r0, r3
 80026fe:	f002 fcfb 	bl	80050f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_ATT_Pin DATA_ATT_Pin DE_485_Pin */
  GPIO_InitStruct.Pin = CLK_ATT_Pin|DATA_ATT_Pin|DE_485_Pin;
 8002702:	193b      	adds	r3, r7, r4
 8002704:	2223      	movs	r2, #35	; 0x23
 8002706:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002708:	193b      	adds	r3, r7, r4
 800270a:	2201      	movs	r2, #1
 800270c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	193b      	adds	r3, r7, r4
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002714:	193b      	adds	r3, r7, r4
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271a:	193b      	adds	r3, r7, r4
 800271c:	4a0f      	ldr	r2, [pc, #60]	; (800275c <MX_GPIO_Init+0x154>)
 800271e:	0019      	movs	r1, r3
 8002720:	0010      	movs	r0, r2
 8002722:	f002 fce9 	bl	80050f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002726:	0021      	movs	r1, r4
 8002728:	187b      	adds	r3, r7, r1
 800272a:	2240      	movs	r2, #64	; 0x40
 800272c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800272e:	187b      	adds	r3, r7, r1
 8002730:	2201      	movs	r2, #1
 8002732:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	187b      	adds	r3, r7, r1
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273a:	187b      	adds	r3, r7, r1
 800273c:	2200      	movs	r2, #0
 800273e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002740:	187b      	adds	r3, r7, r1
 8002742:	4a07      	ldr	r2, [pc, #28]	; (8002760 <MX_GPIO_Init+0x158>)
 8002744:	0019      	movs	r1, r3
 8002746:	0010      	movs	r0, r2
 8002748:	f002 fcd6 	bl	80050f8 <HAL_GPIO_Init>

}
 800274c:	46c0      	nop			; (mov r8, r8)
 800274e:	46bd      	mov	sp, r7
 8002750:	b009      	add	sp, #36	; 0x24
 8002752:	bd90      	pop	{r4, r7, pc}
 8002754:	40021000 	.word	0x40021000
 8002758:	00001f88 	.word	0x00001f88
 800275c:	50000400 	.word	0x50000400
 8002760:	50000800 	.word	0x50000800

08002764 <get_db_gain>:

/* USER CODE BEGIN 4 */

uint8_t get_db_gain(uint16_t adc_gain) {
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	0002      	movs	r2, r0
 800276c:	1dbb      	adds	r3, r7, #6
 800276e:	801a      	strh	r2, [r3, #0]

	if (adc_gain >= 3781)
 8002770:	1dbb      	adds	r3, r7, #6
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	4a9e      	ldr	r2, [pc, #632]	; (80029f0 <get_db_gain+0x28c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <get_db_gain+0x1a>
		return 45;
 800277a:	232d      	movs	r3, #45	; 0x2d
 800277c:	e133      	b.n	80029e6 <get_db_gain+0x282>
	else if (adc_gain < 3781 && adc_gain >= 1515)
 800277e:	1dbb      	adds	r3, r7, #6
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	4a9b      	ldr	r2, [pc, #620]	; (80029f0 <get_db_gain+0x28c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d81a      	bhi.n	80027be <get_db_gain+0x5a>
 8002788:	1dbb      	adds	r3, r7, #6
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	4a99      	ldr	r2, [pc, #612]	; (80029f4 <get_db_gain+0x290>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d915      	bls.n	80027be <get_db_gain+0x5a>
		return 0.0022f * adc_gain + 36.6571f;
 8002792:	1dbb      	adds	r3, r7, #6
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	0018      	movs	r0, r3
 8002798:	f7fe fcf2 	bl	8001180 <__aeabi_i2f>
 800279c:	1c03      	adds	r3, r0, #0
 800279e:	4996      	ldr	r1, [pc, #600]	; (80029f8 <get_db_gain+0x294>)
 80027a0:	1c18      	adds	r0, r3, #0
 80027a2:	f7fe f9e3 	bl	8000b6c <__aeabi_fmul>
 80027a6:	1c03      	adds	r3, r0, #0
 80027a8:	4994      	ldr	r1, [pc, #592]	; (80029fc <get_db_gain+0x298>)
 80027aa:	1c18      	adds	r0, r3, #0
 80027ac:	f7fd fe78 	bl	80004a0 <__aeabi_fadd>
 80027b0:	1c03      	adds	r3, r0, #0
 80027b2:	1c18      	adds	r0, r3, #0
 80027b4:	f7fd fe5c 	bl	8000470 <__aeabi_f2uiz>
 80027b8:	0003      	movs	r3, r0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	e113      	b.n	80029e6 <get_db_gain+0x282>
	else if (adc_gain < 1515 && adc_gain >= 1188)
 80027be:	1dbb      	adds	r3, r7, #6
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	4a8c      	ldr	r2, [pc, #560]	; (80029f4 <get_db_gain+0x290>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d81a      	bhi.n	80027fe <get_db_gain+0x9a>
 80027c8:	1dbb      	adds	r3, r7, #6
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	4a8c      	ldr	r2, [pc, #560]	; (8002a00 <get_db_gain+0x29c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d915      	bls.n	80027fe <get_db_gain+0x9a>
		return (0.0153f * adc_gain + 16.8349f);
 80027d2:	1dbb      	adds	r3, r7, #6
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f7fe fcd2 	bl	8001180 <__aeabi_i2f>
 80027dc:	1c03      	adds	r3, r0, #0
 80027de:	4989      	ldr	r1, [pc, #548]	; (8002a04 <get_db_gain+0x2a0>)
 80027e0:	1c18      	adds	r0, r3, #0
 80027e2:	f7fe f9c3 	bl	8000b6c <__aeabi_fmul>
 80027e6:	1c03      	adds	r3, r0, #0
 80027e8:	4987      	ldr	r1, [pc, #540]	; (8002a08 <get_db_gain+0x2a4>)
 80027ea:	1c18      	adds	r0, r3, #0
 80027ec:	f7fd fe58 	bl	80004a0 <__aeabi_fadd>
 80027f0:	1c03      	adds	r3, r0, #0
 80027f2:	1c18      	adds	r0, r3, #0
 80027f4:	f7fd fe3c 	bl	8000470 <__aeabi_f2uiz>
 80027f8:	0003      	movs	r3, r0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	e0f3      	b.n	80029e6 <get_db_gain+0x282>
	else if (adc_gain < 1188 && adc_gain >= 1005)
 80027fe:	1dbb      	adds	r3, r7, #6
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	4a7f      	ldr	r2, [pc, #508]	; (8002a00 <get_db_gain+0x29c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d81b      	bhi.n	8002840 <get_db_gain+0xdc>
 8002808:	1dbb      	adds	r3, r7, #6
 800280a:	881a      	ldrh	r2, [r3, #0]
 800280c:	23fb      	movs	r3, #251	; 0xfb
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	429a      	cmp	r2, r3
 8002812:	d915      	bls.n	8002840 <get_db_gain+0xdc>
		return (0.0273f * adc_gain + 2.540f);
 8002814:	1dbb      	adds	r3, r7, #6
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	0018      	movs	r0, r3
 800281a:	f7fe fcb1 	bl	8001180 <__aeabi_i2f>
 800281e:	1c03      	adds	r3, r0, #0
 8002820:	497a      	ldr	r1, [pc, #488]	; (8002a0c <get_db_gain+0x2a8>)
 8002822:	1c18      	adds	r0, r3, #0
 8002824:	f7fe f9a2 	bl	8000b6c <__aeabi_fmul>
 8002828:	1c03      	adds	r3, r0, #0
 800282a:	4979      	ldr	r1, [pc, #484]	; (8002a10 <get_db_gain+0x2ac>)
 800282c:	1c18      	adds	r0, r3, #0
 800282e:	f7fd fe37 	bl	80004a0 <__aeabi_fadd>
 8002832:	1c03      	adds	r3, r0, #0
 8002834:	1c18      	adds	r0, r3, #0
 8002836:	f7fd fe1b 	bl	8000470 <__aeabi_f2uiz>
 800283a:	0003      	movs	r3, r0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	e0d2      	b.n	80029e6 <get_db_gain+0x282>
	else if (adc_gain < 1005 && adc_gain >= 897)
 8002840:	1dbb      	adds	r3, r7, #6
 8002842:	881a      	ldrh	r2, [r3, #0]
 8002844:	23fb      	movs	r3, #251	; 0xfb
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	429a      	cmp	r2, r3
 800284a:	d81b      	bhi.n	8002884 <get_db_gain+0x120>
 800284c:	1dbb      	adds	r3, r7, #6
 800284e:	881a      	ldrh	r2, [r3, #0]
 8002850:	23e0      	movs	r3, #224	; 0xe0
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	429a      	cmp	r2, r3
 8002856:	d915      	bls.n	8002884 <get_db_gain+0x120>
		return (0.0463f * adc_gain - 16.5278f);
 8002858:	1dbb      	adds	r3, r7, #6
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	0018      	movs	r0, r3
 800285e:	f7fe fc8f 	bl	8001180 <__aeabi_i2f>
 8002862:	1c03      	adds	r3, r0, #0
 8002864:	496b      	ldr	r1, [pc, #428]	; (8002a14 <get_db_gain+0x2b0>)
 8002866:	1c18      	adds	r0, r3, #0
 8002868:	f7fe f980 	bl	8000b6c <__aeabi_fmul>
 800286c:	1c03      	adds	r3, r0, #0
 800286e:	496a      	ldr	r1, [pc, #424]	; (8002a18 <get_db_gain+0x2b4>)
 8002870:	1c18      	adds	r0, r3, #0
 8002872:	f7fe faa1 	bl	8000db8 <__aeabi_fsub>
 8002876:	1c03      	adds	r3, r0, #0
 8002878:	1c18      	adds	r0, r3, #0
 800287a:	f7fd fdf9 	bl	8000470 <__aeabi_f2uiz>
 800287e:	0003      	movs	r3, r0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	e0b0      	b.n	80029e6 <get_db_gain+0x282>
	else if (adc_gain < 897 && adc_gain >= 825)
 8002884:	1dbb      	adds	r3, r7, #6
 8002886:	881a      	ldrh	r2, [r3, #0]
 8002888:	23e0      	movs	r3, #224	; 0xe0
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	429a      	cmp	r2, r3
 800288e:	d81b      	bhi.n	80028c8 <get_db_gain+0x164>
 8002890:	1dbb      	adds	r3, r7, #6
 8002892:	881a      	ldrh	r2, [r3, #0]
 8002894:	23ce      	movs	r3, #206	; 0xce
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	429a      	cmp	r2, r3
 800289a:	d915      	bls.n	80028c8 <get_db_gain+0x164>
		return (0.0694f * adc_gain - 37.2917f);
 800289c:	1dbb      	adds	r3, r7, #6
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7fe fc6d 	bl	8001180 <__aeabi_i2f>
 80028a6:	1c03      	adds	r3, r0, #0
 80028a8:	495c      	ldr	r1, [pc, #368]	; (8002a1c <get_db_gain+0x2b8>)
 80028aa:	1c18      	adds	r0, r3, #0
 80028ac:	f7fe f95e 	bl	8000b6c <__aeabi_fmul>
 80028b0:	1c03      	adds	r3, r0, #0
 80028b2:	495b      	ldr	r1, [pc, #364]	; (8002a20 <get_db_gain+0x2bc>)
 80028b4:	1c18      	adds	r0, r3, #0
 80028b6:	f7fe fa7f 	bl	8000db8 <__aeabi_fsub>
 80028ba:	1c03      	adds	r3, r0, #0
 80028bc:	1c18      	adds	r0, r3, #0
 80028be:	f7fd fdd7 	bl	8000470 <__aeabi_f2uiz>
 80028c2:	0003      	movs	r3, r0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	e08e      	b.n	80029e6 <get_db_gain+0x282>
	else if (adc_gain < 825 && adc_gain >= 776)
 80028c8:	1dbb      	adds	r3, r7, #6
 80028ca:	881a      	ldrh	r2, [r3, #0]
 80028cc:	23ce      	movs	r3, #206	; 0xce
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d81b      	bhi.n	800290c <get_db_gain+0x1a8>
 80028d4:	1dbb      	adds	r3, r7, #6
 80028d6:	881a      	ldrh	r2, [r3, #0]
 80028d8:	23c2      	movs	r3, #194	; 0xc2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	429a      	cmp	r2, r3
 80028de:	d315      	bcc.n	800290c <get_db_gain+0x1a8>
		return (0.1020f * adc_gain - 64.1837f);
 80028e0:	1dbb      	adds	r3, r7, #6
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7fe fc4b 	bl	8001180 <__aeabi_i2f>
 80028ea:	1c03      	adds	r3, r0, #0
 80028ec:	494d      	ldr	r1, [pc, #308]	; (8002a24 <get_db_gain+0x2c0>)
 80028ee:	1c18      	adds	r0, r3, #0
 80028f0:	f7fe f93c 	bl	8000b6c <__aeabi_fmul>
 80028f4:	1c03      	adds	r3, r0, #0
 80028f6:	494c      	ldr	r1, [pc, #304]	; (8002a28 <get_db_gain+0x2c4>)
 80028f8:	1c18      	adds	r0, r3, #0
 80028fa:	f7fe fa5d 	bl	8000db8 <__aeabi_fsub>
 80028fe:	1c03      	adds	r3, r0, #0
 8002900:	1c18      	adds	r0, r3, #0
 8002902:	f7fd fdb5 	bl	8000470 <__aeabi_f2uiz>
 8002906:	0003      	movs	r3, r0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	e06c      	b.n	80029e6 <get_db_gain+0x282>
	else if (adc_gain < 776 && adc_gain >= 746)
 800290c:	1dbb      	adds	r3, r7, #6
 800290e:	881a      	ldrh	r2, [r3, #0]
 8002910:	23c2      	movs	r3, #194	; 0xc2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	429a      	cmp	r2, r3
 8002916:	d21a      	bcs.n	800294e <get_db_gain+0x1ea>
 8002918:	1dbb      	adds	r3, r7, #6
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	4a43      	ldr	r2, [pc, #268]	; (8002a2c <get_db_gain+0x2c8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d915      	bls.n	800294e <get_db_gain+0x1ea>
		return (0.1667f * adc_gain - 114.333f);
 8002922:	1dbb      	adds	r3, r7, #6
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	0018      	movs	r0, r3
 8002928:	f7fe fc2a 	bl	8001180 <__aeabi_i2f>
 800292c:	1c03      	adds	r3, r0, #0
 800292e:	4940      	ldr	r1, [pc, #256]	; (8002a30 <get_db_gain+0x2cc>)
 8002930:	1c18      	adds	r0, r3, #0
 8002932:	f7fe f91b 	bl	8000b6c <__aeabi_fmul>
 8002936:	1c03      	adds	r3, r0, #0
 8002938:	493e      	ldr	r1, [pc, #248]	; (8002a34 <get_db_gain+0x2d0>)
 800293a:	1c18      	adds	r0, r3, #0
 800293c:	f7fe fa3c 	bl	8000db8 <__aeabi_fsub>
 8002940:	1c03      	adds	r3, r0, #0
 8002942:	1c18      	adds	r0, r3, #0
 8002944:	f7fd fd94 	bl	8000470 <__aeabi_f2uiz>
 8002948:	0003      	movs	r3, r0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	e04b      	b.n	80029e6 <get_db_gain+0x282>
	else if (adc_gain < 746 && adc_gain >= 733)
 800294e:	1dbb      	adds	r3, r7, #6
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	4a36      	ldr	r2, [pc, #216]	; (8002a2c <get_db_gain+0x2c8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d81b      	bhi.n	8002990 <get_db_gain+0x22c>
 8002958:	1dbb      	adds	r3, r7, #6
 800295a:	881a      	ldrh	r2, [r3, #0]
 800295c:	23b7      	movs	r3, #183	; 0xb7
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	429a      	cmp	r2, r3
 8002962:	d915      	bls.n	8002990 <get_db_gain+0x22c>
		return (0.3846f * adc_gain - 276.9231f);
 8002964:	1dbb      	adds	r3, r7, #6
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	0018      	movs	r0, r3
 800296a:	f7fe fc09 	bl	8001180 <__aeabi_i2f>
 800296e:	1c03      	adds	r3, r0, #0
 8002970:	4931      	ldr	r1, [pc, #196]	; (8002a38 <get_db_gain+0x2d4>)
 8002972:	1c18      	adds	r0, r3, #0
 8002974:	f7fe f8fa 	bl	8000b6c <__aeabi_fmul>
 8002978:	1c03      	adds	r3, r0, #0
 800297a:	4930      	ldr	r1, [pc, #192]	; (8002a3c <get_db_gain+0x2d8>)
 800297c:	1c18      	adds	r0, r3, #0
 800297e:	f7fe fa1b 	bl	8000db8 <__aeabi_fsub>
 8002982:	1c03      	adds	r3, r0, #0
 8002984:	1c18      	adds	r0, r3, #0
 8002986:	f7fd fd73 	bl	8000470 <__aeabi_f2uiz>
 800298a:	0003      	movs	r3, r0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	e02a      	b.n	80029e6 <get_db_gain+0x282>
	else if (adc_gain < 733 && adc_gain >= 725)
 8002990:	1dbb      	adds	r3, r7, #6
 8002992:	881a      	ldrh	r2, [r3, #0]
 8002994:	23b7      	movs	r3, #183	; 0xb7
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	429a      	cmp	r2, r3
 800299a:	d81b      	bhi.n	80029d4 <get_db_gain+0x270>
 800299c:	1dbb      	adds	r3, r7, #6
 800299e:	881a      	ldrh	r2, [r3, #0]
 80029a0:	23b5      	movs	r3, #181	; 0xb5
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d915      	bls.n	80029d4 <get_db_gain+0x270>
		return (0.625f * adc_gain - 453.125f);
 80029a8:	1dbb      	adds	r3, r7, #6
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	0018      	movs	r0, r3
 80029ae:	f7fe fbe7 	bl	8001180 <__aeabi_i2f>
 80029b2:	1c03      	adds	r3, r0, #0
 80029b4:	4922      	ldr	r1, [pc, #136]	; (8002a40 <get_db_gain+0x2dc>)
 80029b6:	1c18      	adds	r0, r3, #0
 80029b8:	f7fe f8d8 	bl	8000b6c <__aeabi_fmul>
 80029bc:	1c03      	adds	r3, r0, #0
 80029be:	4921      	ldr	r1, [pc, #132]	; (8002a44 <get_db_gain+0x2e0>)
 80029c0:	1c18      	adds	r0, r3, #0
 80029c2:	f7fe f9f9 	bl	8000db8 <__aeabi_fsub>
 80029c6:	1c03      	adds	r3, r0, #0
 80029c8:	1c18      	adds	r0, r3, #0
 80029ca:	f7fd fd51 	bl	8000470 <__aeabi_f2uiz>
 80029ce:	0003      	movs	r3, r0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	e008      	b.n	80029e6 <get_db_gain+0x282>
	else if (adc_gain < 725)
 80029d4:	1dbb      	adds	r3, r7, #6
 80029d6:	881a      	ldrh	r2, [r3, #0]
 80029d8:	23b5      	movs	r3, #181	; 0xb5
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	429a      	cmp	r2, r3
 80029de:	d801      	bhi.n	80029e4 <get_db_gain+0x280>
		return 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	e000      	b.n	80029e6 <get_db_gain+0x282>
	return 0;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	0018      	movs	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b002      	add	sp, #8
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	00000ec4 	.word	0x00000ec4
 80029f4:	000005ea 	.word	0x000005ea
 80029f8:	3b102de0 	.word	0x3b102de0
 80029fc:	4212a0df 	.word	0x4212a0df
 8002a00:	000004a3 	.word	0x000004a3
 8002a04:	3c7aacda 	.word	0x3c7aacda
 8002a08:	4186ade0 	.word	0x4186ade0
 8002a0c:	3cdfa440 	.word	0x3cdfa440
 8002a10:	40228f5c 	.word	0x40228f5c
 8002a14:	3d3da512 	.word	0x3d3da512
 8002a18:	418438ef 	.word	0x418438ef
 8002a1c:	3d8e2196 	.word	0x3d8e2196
 8002a20:	42152ab3 	.word	0x42152ab3
 8002a24:	3dd0e560 	.word	0x3dd0e560
 8002a28:	42805e0e 	.word	0x42805e0e
 8002a2c:	000002e9 	.word	0x000002e9
 8002a30:	3e2ab368 	.word	0x3e2ab368
 8002a34:	42e4aa7f 	.word	0x42e4aa7f
 8002a38:	3ec4ea4b 	.word	0x3ec4ea4b
 8002a3c:	438a7628 	.word	0x438a7628
 8002a40:	3f200000 	.word	0x3f200000
 8002a44:	43e29000 	.word	0x43e29000

08002a48 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002a48:	b590      	push	{r4, r7, lr}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < ADC_CHANNEL_NUM; i++) {
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	e04e      	b.n	8002af4 <HAL_ADC_ConvCpltCallback+0xac>
		sum[i] -= adc_values[i][adc_counter];
 8002a56:	4b34      	ldr	r3, [pc, #208]	; (8002b28 <HAL_ADC_ConvCpltCallback+0xe0>)
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	0052      	lsls	r2, r2, #1
 8002a5c:	5ad1      	ldrh	r1, [r2, r3]
 8002a5e:	4b33      	ldr	r3, [pc, #204]	; (8002b2c <HAL_ADC_ConvCpltCallback+0xe4>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	001c      	movs	r4, r3
 8002a64:	4832      	ldr	r0, [pc, #200]	; (8002b30 <HAL_ADC_ConvCpltCallback+0xe8>)
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	0013      	movs	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	189b      	adds	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	191b      	adds	r3, r3, r4
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	5a1b      	ldrh	r3, [r3, r0]
 8002a76:	1acb      	subs	r3, r1, r3
 8002a78:	b299      	uxth	r1, r3
 8002a7a:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <HAL_ADC_ConvCpltCallback+0xe0>)
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	0052      	lsls	r2, r2, #1
 8002a80:	52d1      	strh	r1, [r2, r3]
		adc_values[i][adc_counter] = adcResultsDMA[i];
 8002a82:	4b2a      	ldr	r3, [pc, #168]	; (8002b2c <HAL_ADC_ConvCpltCallback+0xe4>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	001c      	movs	r4, r3
 8002a88:	4b2a      	ldr	r3, [pc, #168]	; (8002b34 <HAL_ADC_ConvCpltCallback+0xec>)
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	0052      	lsls	r2, r2, #1
 8002a8e:	5ad3      	ldrh	r3, [r2, r3]
 8002a90:	b298      	uxth	r0, r3
 8002a92:	4927      	ldr	r1, [pc, #156]	; (8002b30 <HAL_ADC_ConvCpltCallback+0xe8>)
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	0013      	movs	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	189b      	adds	r3, r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	191b      	adds	r3, r3, r4
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	1c02      	adds	r2, r0, #0
 8002aa4:	525a      	strh	r2, [r3, r1]
		sum[i] += adc_values[i][adc_counter];
 8002aa6:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <HAL_ADC_ConvCpltCallback+0xe0>)
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	0052      	lsls	r2, r2, #1
 8002aac:	5ad1      	ldrh	r1, [r2, r3]
 8002aae:	4b1f      	ldr	r3, [pc, #124]	; (8002b2c <HAL_ADC_ConvCpltCallback+0xe4>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	001c      	movs	r4, r3
 8002ab4:	481e      	ldr	r0, [pc, #120]	; (8002b30 <HAL_ADC_ConvCpltCallback+0xe8>)
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	0013      	movs	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	189b      	adds	r3, r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	191b      	adds	r3, r3, r4
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	5a1b      	ldrh	r3, [r3, r0]
 8002ac6:	18cb      	adds	r3, r1, r3
 8002ac8:	b299      	uxth	r1, r3
 8002aca:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <HAL_ADC_ConvCpltCallback+0xe0>)
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	0052      	lsls	r2, r2, #1
 8002ad0:	52d1      	strh	r1, [r2, r3]
		adc_media[i] = sum[i] / MEDIA_NUM;
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <HAL_ADC_ConvCpltCallback+0xe0>)
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	0052      	lsls	r2, r2, #1
 8002ad8:	5ad3      	ldrh	r3, [r2, r3]
 8002ada:	2114      	movs	r1, #20
 8002adc:	0018      	movs	r0, r3
 8002ade:	f7fd fb17 	bl	8000110 <__udivsi3>
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	b299      	uxth	r1, r3
 8002ae6:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <HAL_ADC_ConvCpltCallback+0xf0>)
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	0052      	lsls	r2, r2, #1
 8002aec:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < ADC_CHANNEL_NUM; i++) {
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3301      	adds	r3, #1
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b05      	cmp	r3, #5
 8002af8:	ddad      	ble.n	8002a56 <HAL_ADC_ConvCpltCallback+0xe>
	}
	adc_counter++;
 8002afa:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <HAL_ADC_ConvCpltCallback+0xe4>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	3301      	adds	r3, #1
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <HAL_ADC_ConvCpltCallback+0xe4>)
 8002b04:	701a      	strb	r2, [r3, #0]

	if (adc_counter >= MEDIA_NUM)
 8002b06:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_ADC_ConvCpltCallback+0xe4>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b13      	cmp	r3, #19
 8002b0c:	d902      	bls.n	8002b14 <HAL_ADC_ConvCpltCallback+0xcc>
		adc_counter = 0;
 8002b0e:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <HAL_ADC_ConvCpltCallback+0xe4>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, ADC_CHANNEL_NUM);
 8002b14:	4907      	ldr	r1, [pc, #28]	; (8002b34 <HAL_ADC_ConvCpltCallback+0xec>)
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <HAL_ADC_ConvCpltCallback+0xf4>)
 8002b18:	2206      	movs	r2, #6
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f001 fa7e 	bl	800401c <HAL_ADC_Start_DMA>
}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b005      	add	sp, #20
 8002b26:	bd90      	pop	{r4, r7, pc}
 8002b28:	20000338 	.word	0x20000338
 8002b2c:	20000344 	.word	0x20000344
 8002b30:	2000023c 	.word	0x2000023c
 8002b34:	20000230 	.word	0x20000230
 8002b38:	2000032c 	.word	0x2000032c
 8002b3c:	2000008c 	.word	0x2000008c

08002b40 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
	uart1_read_to_frame(&uart1);
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <USART1_IRQHandler+0x14>)
 8002b46:	0018      	movs	r0, r3
 8002b48:	f000 fda8 	bl	800369c <uart1_read_to_frame>
}
 8002b4c:	46c0      	nop			; (mov r8, r8)
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	200001e0 	.word	0x200001e0

08002b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b5c:	b672      	cpsid	i
}
 8002b5e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002b60:	e7fe      	b.n	8002b60 <Error_Handler+0x8>
	...

08002b64 <max4003_get_dbm>:
 *  Created on: Sep 29, 2022
 *      Author: sigmadev
 */
#include "max4003.h"

uint8_t max4003_get_dbm( MAX4003_t *mx,uint16_t value) {
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	000a      	movs	r2, r1
 8002b6e:	1cbb      	adds	r3, r7, #2
 8002b70:	801a      	strh	r2, [r3, #0]

	float m = (float) ( MAX4003_DBM_MAX -  MAX4003_DBM_MIN)
			/ (float) (mx->max - mx->min);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	001a      	movs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	885b      	ldrh	r3, [r3, #2]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f7fe fafe 	bl	8001180 <__aeabi_i2f>
 8002b84:	1c03      	adds	r3, r0, #0
	float m = (float) ( MAX4003_DBM_MAX -  MAX4003_DBM_MIN)
 8002b86:	1c19      	adds	r1, r3, #0
 8002b88:	481f      	ldr	r0, [pc, #124]	; (8002c08 <max4003_get_dbm+0xa4>)
 8002b8a:	f7fd fe27 	bl	80007dc <__aeabi_fdiv>
 8002b8e:	1c03      	adds	r3, r0, #0
 8002b90:	60fb      	str	r3, [r7, #12]
	float b =  MAX4003_DBM_MAX -mx->max * m;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	0018      	movs	r0, r3
 8002b98:	f7fe faf2 	bl	8001180 <__aeabi_i2f>
 8002b9c:	1c03      	adds	r3, r0, #0
 8002b9e:	68f9      	ldr	r1, [r7, #12]
 8002ba0:	1c18      	adds	r0, r3, #0
 8002ba2:	f7fd ffe3 	bl	8000b6c <__aeabi_fmul>
 8002ba6:	1c03      	adds	r3, r0, #0
 8002ba8:	1c19      	adds	r1, r3, #0
 8002baa:	2000      	movs	r0, #0
 8002bac:	f7fe f904 	bl	8000db8 <__aeabi_fsub>
 8002bb0:	1c03      	adds	r3, r0, #0
 8002bb2:	60bb      	str	r3, [r7, #8]

	if (value > mx->max) {
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	1cba      	adds	r2, r7, #2
 8002bba:	8812      	ldrh	r2, [r2, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d901      	bls.n	8002bc4 <max4003_get_dbm+0x60>
		return  MAX4003_DBM_MAX;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e01d      	b.n	8002c00 <max4003_get_dbm+0x9c>
	} else if (value < mx->min) {
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	885b      	ldrh	r3, [r3, #2]
 8002bc8:	1cba      	adds	r2, r7, #2
 8002bca:	8812      	ldrh	r2, [r2, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d201      	bcs.n	8002bd4 <max4003_get_dbm+0x70>
		return  MAX4003_DBM_MIN;
 8002bd0:	23e2      	movs	r3, #226	; 0xe2
 8002bd2:	e015      	b.n	8002c00 <max4003_get_dbm+0x9c>
	}
	return (int8_t) (m * (float) value + b);
 8002bd4:	1cbb      	adds	r3, r7, #2
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f7fe fb1f 	bl	800121c <__aeabi_ui2f>
 8002bde:	1c03      	adds	r3, r0, #0
 8002be0:	68f9      	ldr	r1, [r7, #12]
 8002be2:	1c18      	adds	r0, r3, #0
 8002be4:	f7fd ffc2 	bl	8000b6c <__aeabi_fmul>
 8002be8:	1c03      	adds	r3, r0, #0
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	1c18      	adds	r0, r3, #0
 8002bee:	f7fd fc57 	bl	80004a0 <__aeabi_fadd>
 8002bf2:	1c03      	adds	r3, r0, #0
 8002bf4:	1c18      	adds	r0, r3, #0
 8002bf6:	f7fe faa3 	bl	8001140 <__aeabi_f2iz>
 8002bfa:	0003      	movs	r3, r0
 8002bfc:	b25b      	sxtb	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
}
 8002c00:	0018      	movs	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b004      	add	sp, #16
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	41f00000 	.word	0x41f00000

08002c0c <module_init>:
 *      Author: sigmadev
 */

#include <module.h>

void  module_init(Module_t* module ,Function_t funcion, Id_t id){
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	0008      	movs	r0, r1
 8002c16:	0011      	movs	r1, r2
 8002c18:	1cfb      	adds	r3, r7, #3
 8002c1a:	1c02      	adds	r2, r0, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
 8002c1e:	1cbb      	adds	r3, r7, #2
 8002c20:	1c0a      	adds	r2, r1, #0
 8002c22:	701a      	strb	r2, [r3, #0]
module->function = funcion;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	1cfa      	adds	r2, r7, #3
 8002c28:	7812      	ldrb	r2, [r2, #0]
 8002c2a:	745a      	strb	r2, [r3, #17]
module->id = id;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	1cba      	adds	r2, r7, #2
 8002c30:	7812      	ldrb	r2, [r2, #0]
 8002c32:	741a      	strb	r2, [r3, #16]
module->att = 0;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]
module->gain =   0;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	705a      	strb	r2, [r3, #1]
module->pin = 0;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	715a      	strb	r2, [r3, #5]
module->pout = 0;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	709a      	strb	r2, [r3, #2]
module->temperature = 0;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
module->state = true;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	71da      	strb	r2, [r3, #7]
}
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b002      	add	sp, #8
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <module_vswr_calc>:

float module_vswr_calc(int8_t pf, int8_t pr){
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	0002      	movs	r2, r0
 8002c68:	1dfb      	adds	r3, r7, #7
 8002c6a:	701a      	strb	r2, [r3, #0]
 8002c6c:	1dbb      	adds	r3, r7, #6
 8002c6e:	1c0a      	adds	r2, r1, #0
 8002c70:	701a      	strb	r2, [r3, #0]
	float den;
	float num;
	float factor;
	float result;

	factor = (float) pf/ (float) pr;
 8002c72:	1dfb      	adds	r3, r7, #7
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	b25b      	sxtb	r3, r3
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f7fe fa81 	bl	8001180 <__aeabi_i2f>
 8002c7e:	1c04      	adds	r4, r0, #0
 8002c80:	1dbb      	adds	r3, r7, #6
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	b25b      	sxtb	r3, r3
 8002c86:	0018      	movs	r0, r3
 8002c88:	f7fe fa7a 	bl	8001180 <__aeabi_i2f>
 8002c8c:	1c03      	adds	r3, r0, #0
 8002c8e:	1c19      	adds	r1, r3, #0
 8002c90:	1c20      	adds	r0, r4, #0
 8002c92:	f7fd fda3 	bl	80007dc <__aeabi_fdiv>
 8002c96:	1c03      	adds	r3, r0, #0
 8002c98:	617b      	str	r3, [r7, #20]
	den  = 1.0f + sqrtf(factor);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	1c18      	adds	r0, r3, #0
 8002c9e:	f003 ffc9 	bl	8006c34 <sqrtf>
 8002ca2:	1c03      	adds	r3, r0, #0
 8002ca4:	21fe      	movs	r1, #254	; 0xfe
 8002ca6:	0589      	lsls	r1, r1, #22
 8002ca8:	1c18      	adds	r0, r3, #0
 8002caa:	f7fd fbf9 	bl	80004a0 <__aeabi_fadd>
 8002cae:	1c03      	adds	r3, r0, #0
 8002cb0:	613b      	str	r3, [r7, #16]
	num = 1.0f - sqrtf(factor);
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	1c18      	adds	r0, r3, #0
 8002cb6:	f003 ffbd 	bl	8006c34 <sqrtf>
 8002cba:	1c03      	adds	r3, r0, #0
 8002cbc:	1c19      	adds	r1, r3, #0
 8002cbe:	20fe      	movs	r0, #254	; 0xfe
 8002cc0:	0580      	lsls	r0, r0, #22
 8002cc2:	f7fe f879 	bl	8000db8 <__aeabi_fsub>
 8002cc6:	1c03      	adds	r3, r0, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
	result = den / num;
 8002cca:	68f9      	ldr	r1, [r7, #12]
 8002ccc:	6938      	ldr	r0, [r7, #16]
 8002cce:	f7fd fd85 	bl	80007dc <__aeabi_fdiv>
 8002cd2:	1c03      	adds	r3, r0, #0
 8002cd4:	60bb      	str	r3, [r7, #8]
	return result;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
}
 8002cd8:	1c18      	adds	r0, r3, #0
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b007      	add	sp, #28
 8002cde:	bd90      	pop	{r4, r7, pc}

08002ce0 <rs485_check_frame>:
 *  Created on: Sep 28, 2022
 *      Author: sigmadev
 */
#include "rs485.h"

Rs485_cmd_t rs485_check_frame(uint8_t *frame, uint8_t len) {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	000a      	movs	r2, r1
 8002cea:	1cfb      	adds	r3, r7, #3
 8002cec:	701a      	strb	r2, [r3, #0]

	if (strlen(frame) > (3 + 1 + 2))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f7fd fa05 	bl	8000100 <strlen>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	2b06      	cmp	r3, #6
 8002cfa:	d924      	bls.n	8002d46 <rs485_check_frame+0x66>
		if (frame[0] == LTEL_START_MARK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	227e      	movs	r2, #126	; 0x7e
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d11f      	bne.n	8002d46 <rs485_check_frame+0x66>
			if (frame[1] == MODULE_FUNCTION)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2209      	movs	r2, #9
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d119      	bne.n	8002d46 <rs485_check_frame+0x66>
				if (frame[2] == MODULE_ADDR)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3302      	adds	r3, #2
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2208      	movs	r2, #8
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d113      	bne.n	8002d46 <rs485_check_frame+0x66>
					for (int i = 3; i < len; i++)
 8002d1e:	2303      	movs	r3, #3
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	e00b      	b.n	8002d3c <rs485_check_frame+0x5c>
						if (frame[i] == LTEL_END_MARK)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	18d3      	adds	r3, r2, r3
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	227f      	movs	r2, #127	; 0x7f
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d101      	bne.n	8002d36 <rs485_check_frame+0x56>
							return true;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e00a      	b.n	8002d4c <rs485_check_frame+0x6c>
					for (int i = 3; i < len; i++)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	1cfb      	adds	r3, r7, #3
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	dbee      	blt.n	8002d24 <rs485_check_frame+0x44>
	return frame[3];
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3303      	adds	r3, #3
 8002d4a:	781b      	ldrb	r3, [r3, #0]
}
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b004      	add	sp, #16
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <rs485_set_query_frame>:

void rs485_set_query_frame(RS485_t *r, Module_t *module) {
 8002d54:	b590      	push	{r4, r7, lr}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]

	uint8_t crc_frame[2];
	uint16_t crc;
	r->frame[0] = LTEL_START_MARK;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	227e      	movs	r2, #126	; 0x7e
 8002d64:	701a      	strb	r2, [r3, #0]
	r->frame[1] = module->function;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	7c52      	ldrb	r2, [r2, #17]
 8002d70:	701a      	strb	r2, [r3, #0]
	r->frame[2] = module->id;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	3302      	adds	r3, #2
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	7c12      	ldrb	r2, [r2, #16]
 8002d7c:	701a      	strb	r2, [r3, #0]
	r->frame[3] = r->cmd;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	3303      	adds	r3, #3
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	7812      	ldrb	r2, [r2, #0]
 8002d88:	701a      	strb	r2, [r3, #0]

	if (module->function == LOW_NOISE_AMPLIFIER) {
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	7c5b      	ldrb	r3, [r3, #17]
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d000      	beq.n	8002d94 <rs485_set_query_frame+0x40>
 8002d92:	e084      	b.n	8002e9e <rs485_set_query_frame+0x14a>
		switch (r->cmd) {
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b11      	cmp	r3, #17
 8002d9a:	d002      	beq.n	8002da2 <rs485_set_query_frame+0x4e>
 8002d9c:	2b12      	cmp	r3, #18
 8002d9e:	d02a      	beq.n	8002df6 <rs485_set_query_frame+0xa2>
 8002da0:	e056      	b.n	8002e50 <rs485_set_query_frame+0xfc>
		case QUERY_PARAMETER_LTEL:
			r->frame[4] = 0x00;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	3304      	adds	r3, #4
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
			r->frame[5] = 0x05;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	3305      	adds	r3, #5
 8002db2:	2205      	movs	r2, #5
 8002db4:	701a      	strb	r2, [r3, #0]
			r->frame[6] = 0x00;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	3306      	adds	r3, #6
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
			r->frame[7] = module->att;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	3307      	adds	r3, #7
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	7812      	ldrb	r2, [r2, #0]
 8002dca:	701a      	strb	r2, [r3, #0]
			r->frame[8] = module->gain;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	3308      	adds	r3, #8
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	7852      	ldrb	r2, [r2, #1]
 8002dd6:	701a      	strb	r2, [r3, #0]
			r->frame[9] = module->pout;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	569a      	ldrsb	r2, [r3, r2]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	3309      	adds	r3, #9
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	701a      	strb	r2, [r3, #0]
			r->frame[10] = module->voltage;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	330a      	adds	r3, #10
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	7912      	ldrb	r2, [r2, #4]
 8002df2:	701a      	strb	r2, [r3, #0]
			break;
 8002df4:	e030      	b.n	8002e58 <rs485_set_query_frame+0x104>
		case QUERY_PARAMETER_SIGMA:
			r->frame[4] = 0x06;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	2206      	movs	r2, #6
 8002dfe:	701a      	strb	r2, [r3, #0]
			r->frame[5] = module->pout;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2202      	movs	r2, #2
 8002e04:	569a      	ldrsb	r2, [r3, r2]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	3305      	adds	r3, #5
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	701a      	strb	r2, [r3, #0]
			r->frame[6] = module->att;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	3306      	adds	r3, #6
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	7812      	ldrb	r2, [r2, #0]
 8002e1a:	701a      	strb	r2, [r3, #0]
			r->frame[7] = module->gain;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	3307      	adds	r3, #7
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	7852      	ldrb	r2, [r2, #1]
 8002e26:	701a      	strb	r2, [r3, #0]
			r->frame[8] = module->current;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	3308      	adds	r3, #8
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	7992      	ldrb	r2, [r2, #6]
 8002e32:	701a      	strb	r2, [r3, #0]
			r->frame[9] = module->voltage;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	3309      	adds	r3, #9
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	7912      	ldrb	r2, [r2, #4]
 8002e3e:	701a      	strb	r2, [r3, #0]
			r->frame[10] = module->pin;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2205      	movs	r2, #5
 8002e44:	569a      	ldrsb	r2, [r3, r2]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	330a      	adds	r3, #10
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	701a      	strb	r2, [r3, #0]
		default:
			r->frame[0] = 0;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	701a      	strb	r2, [r3, #0]
		}
		crc = crc_get(&(r->frame[1]), 10);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	210a      	movs	r1, #10
 8002e60:	0018      	movs	r0, r3
 8002e62:	f000 fca5 	bl	80037b0 <crc_get>
 8002e66:	0003      	movs	r3, r0
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	200a      	movs	r0, #10
 8002e6c:	183b      	adds	r3, r7, r0
 8002e6e:	801a      	strh	r2, [r3, #0]
		memcpy(crc_frame, &crc, 2);
 8002e70:	210c      	movs	r1, #12
 8002e72:	187b      	adds	r3, r7, r1
 8002e74:	183a      	adds	r2, r7, r0
 8002e76:	8812      	ldrh	r2, [r2, #0]
 8002e78:	801a      	strh	r2, [r3, #0]
		r->frame[11] = crc_frame[0];
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	330b      	adds	r3, #11
 8002e80:	187a      	adds	r2, r7, r1
 8002e82:	7812      	ldrb	r2, [r2, #0]
 8002e84:	701a      	strb	r2, [r3, #0]
		r->frame[12] = crc_frame[1];
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	330c      	adds	r3, #12
 8002e8c:	187a      	adds	r2, r7, r1
 8002e8e:	7852      	ldrb	r2, [r2, #1]
 8002e90:	701a      	strb	r2, [r3, #0]
		r->frame[13] = LTEL_END_MARK;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	330d      	adds	r3, #13
 8002e98:	227f      	movs	r2, #127	; 0x7f
 8002e9a:	701a      	strb	r2, [r3, #0]
		memcpy(crc_frame, &crc, 2);
		r->frame[13+1] = crc_frame[0];
		r->frame[13+2] = crc_frame[1];
		r->frame[13+3] = LTEL_END_MARK;
	}
}
 8002e9c:	e0c4      	b.n	8003028 <rs485_set_query_frame+0x2d4>
	} else if (module->function == POWER_AMPLIFIER) {
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	7c5b      	ldrb	r3, [r3, #17]
 8002ea2:	2b09      	cmp	r3, #9
 8002ea4:	d000      	beq.n	8002ea8 <rs485_set_query_frame+0x154>
 8002ea6:	e0bf      	b.n	8003028 <rs485_set_query_frame+0x2d4>
		switch (r->cmd) {
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b11      	cmp	r3, #17
 8002eae:	d002      	beq.n	8002eb6 <rs485_set_query_frame+0x162>
 8002eb0:	2b12      	cmp	r3, #18
 8002eb2:	d04a      	beq.n	8002f4a <rs485_set_query_frame+0x1f6>
 8002eb4:	e092      	b.n	8002fdc <rs485_set_query_frame+0x288>
			r->frame[4] = 0x00;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	701a      	strb	r2, [r3, #0]
			r->frame[5] = 0x08;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	3305      	adds	r3, #5
 8002ec6:	2208      	movs	r2, #8
 8002ec8:	701a      	strb	r2, [r3, #0]
			r->frame[6] = module->state;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	79da      	ldrb	r2, [r3, #7]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	3306      	adds	r3, #6
 8002ed4:	701a      	strb	r2, [r3, #0]
			r->frame[7] = 0x00;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	3307      	adds	r3, #7
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
			r->frame[8] = module->temperature;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	3308      	adds	r3, #8
 8002eea:	001c      	movs	r4, r3
 8002eec:	1c10      	adds	r0, r2, #0
 8002eee:	f7fd fabf 	bl	8000470 <__aeabi_f2uiz>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	7023      	strb	r3, [r4, #0]
			r->frame[9] = module->gain;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	3309      	adds	r3, #9
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	7852      	ldrb	r2, [r2, #1]
 8002f02:	701a      	strb	r2, [r3, #0]
			r->frame[10] = module->vswr;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	330a      	adds	r3, #10
 8002f0e:	001c      	movs	r4, r3
 8002f10:	1c10      	adds	r0, r2, #0
 8002f12:	f7fd faad 	bl	8000470 <__aeabi_f2uiz>
 8002f16:	0003      	movs	r3, r0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	7023      	strb	r3, [r4, #0]
			r->frame[11] = module->att;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	330b      	adds	r3, #11
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	7812      	ldrb	r2, [r2, #0]
 8002f26:	701a      	strb	r2, [r3, #0]
			r->frame[12] = module->pout;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	569a      	ldrsb	r2, [r3, r2]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	330c      	adds	r3, #12
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	701a      	strb	r2, [r3, #0]
			r->frame[13] = module->pin;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2205      	movs	r2, #5
 8002f3c:	569a      	ldrsb	r2, [r3, r2]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	330d      	adds	r3, #13
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	701a      	strb	r2, [r3, #0]
			break;
 8002f48:	e04c      	b.n	8002fe4 <rs485_set_query_frame+0x290>
			r->frame[4] = 0x00;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
			r->frame[5] = 0x08;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	3305      	adds	r3, #5
 8002f5a:	2208      	movs	r2, #8
 8002f5c:	701a      	strb	r2, [r3, #0]
			r->frame[6] = module->state;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	79da      	ldrb	r2, [r3, #7]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	3306      	adds	r3, #6
 8002f68:	701a      	strb	r2, [r3, #0]
			r->frame[7] = 0x00;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	3307      	adds	r3, #7
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
			r->frame[8] = module->temperature;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	3308      	adds	r3, #8
 8002f7e:	001c      	movs	r4, r3
 8002f80:	1c10      	adds	r0, r2, #0
 8002f82:	f7fd fa75 	bl	8000470 <__aeabi_f2uiz>
 8002f86:	0003      	movs	r3, r0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	7023      	strb	r3, [r4, #0]
			r->frame[9] = module->gain;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	3309      	adds	r3, #9
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	7852      	ldrb	r2, [r2, #1]
 8002f96:	701a      	strb	r2, [r3, #0]
			r->frame[10] = module->vswr;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	330a      	adds	r3, #10
 8002fa2:	001c      	movs	r4, r3
 8002fa4:	1c10      	adds	r0, r2, #0
 8002fa6:	f7fd fa63 	bl	8000470 <__aeabi_f2uiz>
 8002faa:	0003      	movs	r3, r0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	7023      	strb	r3, [r4, #0]
			r->frame[11] = module->att;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	330b      	adds	r3, #11
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	7812      	ldrb	r2, [r2, #0]
 8002fba:	701a      	strb	r2, [r3, #0]
			r->frame[12] = module->pout;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	569a      	ldrsb	r2, [r3, r2]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	330c      	adds	r3, #12
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	701a      	strb	r2, [r3, #0]
			r->frame[13] = module->pin;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	2205      	movs	r2, #5
 8002fd0:	569a      	ldrsb	r2, [r3, r2]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	330d      	adds	r3, #13
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	701a      	strb	r2, [r3, #0]
			r->frame[0] = 0;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
		crc = crc_get(&(r->frame[1]), 10);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	210a      	movs	r1, #10
 8002fec:	0018      	movs	r0, r3
 8002fee:	f000 fbdf 	bl	80037b0 <crc_get>
 8002ff2:	0003      	movs	r3, r0
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	200a      	movs	r0, #10
 8002ff8:	183b      	adds	r3, r7, r0
 8002ffa:	801a      	strh	r2, [r3, #0]
		memcpy(crc_frame, &crc, 2);
 8002ffc:	210c      	movs	r1, #12
 8002ffe:	187b      	adds	r3, r7, r1
 8003000:	183a      	adds	r2, r7, r0
 8003002:	8812      	ldrh	r2, [r2, #0]
 8003004:	801a      	strh	r2, [r3, #0]
		r->frame[13+1] = crc_frame[0];
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	330e      	adds	r3, #14
 800300c:	187a      	adds	r2, r7, r1
 800300e:	7812      	ldrb	r2, [r2, #0]
 8003010:	701a      	strb	r2, [r3, #0]
		r->frame[13+2] = crc_frame[1];
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	330f      	adds	r3, #15
 8003018:	187a      	adds	r2, r7, r1
 800301a:	7852      	ldrb	r2, [r2, #1]
 800301c:	701a      	strb	r2, [r3, #0]
		r->frame[13+3] = LTEL_END_MARK;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	3310      	adds	r3, #16
 8003024:	227f      	movs	r2, #127	; 0x7f
 8003026:	701a      	strb	r2, [r3, #0]
}
 8003028:	46c0      	nop			; (mov r8, r8)
 800302a:	46bd      	mov	sp, r7
 800302c:	b005      	add	sp, #20
 800302e:	bd90      	pop	{r4, r7, pc}

08003030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003036:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <HAL_MspInit+0x44>)
 8003038:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800303a:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <HAL_MspInit+0x44>)
 800303c:	2101      	movs	r1, #1
 800303e:	430a      	orrs	r2, r1
 8003040:	641a      	str	r2, [r3, #64]	; 0x40
 8003042:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <HAL_MspInit+0x44>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	2201      	movs	r2, #1
 8003048:	4013      	ands	r3, r2
 800304a:	607b      	str	r3, [r7, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <HAL_MspInit+0x44>)
 8003050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003052:	4b08      	ldr	r3, [pc, #32]	; (8003074 <HAL_MspInit+0x44>)
 8003054:	2180      	movs	r1, #128	; 0x80
 8003056:	0549      	lsls	r1, r1, #21
 8003058:	430a      	orrs	r2, r1
 800305a:	63da      	str	r2, [r3, #60]	; 0x3c
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <HAL_MspInit+0x44>)
 800305e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003060:	2380      	movs	r3, #128	; 0x80
 8003062:	055b      	lsls	r3, r3, #21
 8003064:	4013      	ands	r3, r2
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	46bd      	mov	sp, r7
 800306e:	b002      	add	sp, #8
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	40021000 	.word	0x40021000

08003078 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003078:	b590      	push	{r4, r7, lr}
 800307a:	b091      	sub	sp, #68	; 0x44
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003080:	232c      	movs	r3, #44	; 0x2c
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	0018      	movs	r0, r3
 8003086:	2314      	movs	r3, #20
 8003088:	001a      	movs	r2, r3
 800308a:	2100      	movs	r1, #0
 800308c:	f003 fcc4 	bl	8006a18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003090:	2414      	movs	r4, #20
 8003092:	193b      	adds	r3, r7, r4
 8003094:	0018      	movs	r0, r3
 8003096:	2318      	movs	r3, #24
 8003098:	001a      	movs	r2, r3
 800309a:	2100      	movs	r1, #0
 800309c:	f003 fcbc 	bl	8006a18 <memset>
  if(hadc->Instance==ADC1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a43      	ldr	r2, [pc, #268]	; (80031b4 <HAL_ADC_MspInit+0x13c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d000      	beq.n	80030ac <HAL_ADC_MspInit+0x34>
 80030aa:	e07f      	b.n	80031ac <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80030ac:	193b      	adds	r3, r7, r4
 80030ae:	2280      	movs	r2, #128	; 0x80
 80030b0:	01d2      	lsls	r2, r2, #7
 80030b2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80030b4:	193b      	adds	r3, r7, r4
 80030b6:	2200      	movs	r2, #0
 80030b8:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030ba:	193b      	adds	r3, r7, r4
 80030bc:	0018      	movs	r0, r3
 80030be:	f002 fea3 	bl	8005e08 <HAL_RCCEx_PeriphCLKConfig>
 80030c2:	1e03      	subs	r3, r0, #0
 80030c4:	d001      	beq.n	80030ca <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80030c6:	f7ff fd47 	bl	8002b58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80030ca:	4b3b      	ldr	r3, [pc, #236]	; (80031b8 <HAL_ADC_MspInit+0x140>)
 80030cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ce:	4b3a      	ldr	r3, [pc, #232]	; (80031b8 <HAL_ADC_MspInit+0x140>)
 80030d0:	2180      	movs	r1, #128	; 0x80
 80030d2:	0349      	lsls	r1, r1, #13
 80030d4:	430a      	orrs	r2, r1
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40
 80030d8:	4b37      	ldr	r3, [pc, #220]	; (80031b8 <HAL_ADC_MspInit+0x140>)
 80030da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030dc:	2380      	movs	r3, #128	; 0x80
 80030de:	035b      	lsls	r3, r3, #13
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e6:	4b34      	ldr	r3, [pc, #208]	; (80031b8 <HAL_ADC_MspInit+0x140>)
 80030e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ea:	4b33      	ldr	r3, [pc, #204]	; (80031b8 <HAL_ADC_MspInit+0x140>)
 80030ec:	2101      	movs	r1, #1
 80030ee:	430a      	orrs	r2, r1
 80030f0:	635a      	str	r2, [r3, #52]	; 0x34
 80030f2:	4b31      	ldr	r3, [pc, #196]	; (80031b8 <HAL_ADC_MspInit+0x140>)
 80030f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f6:	2201      	movs	r2, #1
 80030f8:	4013      	ands	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030fe:	4b2e      	ldr	r3, [pc, #184]	; (80031b8 <HAL_ADC_MspInit+0x140>)
 8003100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003102:	4b2d      	ldr	r3, [pc, #180]	; (80031b8 <HAL_ADC_MspInit+0x140>)
 8003104:	2102      	movs	r1, #2
 8003106:	430a      	orrs	r2, r1
 8003108:	635a      	str	r2, [r3, #52]	; 0x34
 800310a:	4b2b      	ldr	r3, [pc, #172]	; (80031b8 <HAL_ADC_MspInit+0x140>)
 800310c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310e:	2202      	movs	r2, #2
 8003110:	4013      	ands	r3, r2
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = AGC_LEVEL_Pin|CURR_Pin|V_IN_SAMPLE_Pin|SWR_Pin
 8003116:	242c      	movs	r4, #44	; 0x2c
 8003118:	193b      	adds	r3, r7, r4
 800311a:	2277      	movs	r2, #119	; 0x77
 800311c:	601a      	str	r2, [r3, #0]
                          |P_OUT_Pin|P_IN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800311e:	193b      	adds	r3, r7, r4
 8003120:	2203      	movs	r2, #3
 8003122:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	193b      	adds	r3, r7, r4
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312a:	193a      	adds	r2, r7, r4
 800312c:	23a0      	movs	r3, #160	; 0xa0
 800312e:	05db      	lsls	r3, r3, #23
 8003130:	0011      	movs	r1, r2
 8003132:	0018      	movs	r0, r3
 8003134:	f001 ffe0 	bl	80050f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = T_SN_IN_Pin;
 8003138:	193b      	adds	r3, r7, r4
 800313a:	2204      	movs	r2, #4
 800313c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800313e:	193b      	adds	r3, r7, r4
 8003140:	2203      	movs	r2, #3
 8003142:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	193b      	adds	r3, r7, r4
 8003146:	2200      	movs	r2, #0
 8003148:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(T_SN_IN_GPIO_Port, &GPIO_InitStruct);
 800314a:	193b      	adds	r3, r7, r4
 800314c:	4a1b      	ldr	r2, [pc, #108]	; (80031bc <HAL_ADC_MspInit+0x144>)
 800314e:	0019      	movs	r1, r3
 8003150:	0010      	movs	r0, r2
 8003152:	f001 ffd1 	bl	80050f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003156:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <HAL_ADC_MspInit+0x148>)
 8003158:	4a1a      	ldr	r2, [pc, #104]	; (80031c4 <HAL_ADC_MspInit+0x14c>)
 800315a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800315c:	4b18      	ldr	r3, [pc, #96]	; (80031c0 <HAL_ADC_MspInit+0x148>)
 800315e:	2205      	movs	r2, #5
 8003160:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003162:	4b17      	ldr	r3, [pc, #92]	; (80031c0 <HAL_ADC_MspInit+0x148>)
 8003164:	2200      	movs	r2, #0
 8003166:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003168:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <HAL_ADC_MspInit+0x148>)
 800316a:	2200      	movs	r2, #0
 800316c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800316e:	4b14      	ldr	r3, [pc, #80]	; (80031c0 <HAL_ADC_MspInit+0x148>)
 8003170:	2280      	movs	r2, #128	; 0x80
 8003172:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003174:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <HAL_ADC_MspInit+0x148>)
 8003176:	2280      	movs	r2, #128	; 0x80
 8003178:	0052      	lsls	r2, r2, #1
 800317a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800317c:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <HAL_ADC_MspInit+0x148>)
 800317e:	2280      	movs	r2, #128	; 0x80
 8003180:	00d2      	lsls	r2, r2, #3
 8003182:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003184:	4b0e      	ldr	r3, [pc, #56]	; (80031c0 <HAL_ADC_MspInit+0x148>)
 8003186:	2200      	movs	r2, #0
 8003188:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800318a:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <HAL_ADC_MspInit+0x148>)
 800318c:	2200      	movs	r2, #0
 800318e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <HAL_ADC_MspInit+0x148>)
 8003192:	0018      	movs	r0, r3
 8003194:	f001 fd5e 	bl	8004c54 <HAL_DMA_Init>
 8003198:	1e03      	subs	r3, r0, #0
 800319a:	d001      	beq.n	80031a0 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 800319c:	f7ff fcdc 	bl	8002b58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a07      	ldr	r2, [pc, #28]	; (80031c0 <HAL_ADC_MspInit+0x148>)
 80031a4:	651a      	str	r2, [r3, #80]	; 0x50
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_ADC_MspInit+0x148>)
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80031ac:	46c0      	nop			; (mov r8, r8)
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b011      	add	sp, #68	; 0x44
 80031b2:	bd90      	pop	{r4, r7, pc}
 80031b4:	40012400 	.word	0x40012400
 80031b8:	40021000 	.word	0x40021000
 80031bc:	50000400 	.word	0x50000400
 80031c0:	200000f0 	.word	0x200000f0
 80031c4:	40020008 	.word	0x40020008

080031c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031c8:	b590      	push	{r4, r7, lr}
 80031ca:	b091      	sub	sp, #68	; 0x44
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d0:	232c      	movs	r3, #44	; 0x2c
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	0018      	movs	r0, r3
 80031d6:	2314      	movs	r3, #20
 80031d8:	001a      	movs	r2, r3
 80031da:	2100      	movs	r1, #0
 80031dc:	f003 fc1c 	bl	8006a18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031e0:	2414      	movs	r4, #20
 80031e2:	193b      	adds	r3, r7, r4
 80031e4:	0018      	movs	r0, r3
 80031e6:	2318      	movs	r3, #24
 80031e8:	001a      	movs	r2, r3
 80031ea:	2100      	movs	r1, #0
 80031ec:	f003 fc14 	bl	8006a18 <memset>
  if(huart->Instance==USART1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a22      	ldr	r2, [pc, #136]	; (8003280 <HAL_UART_MspInit+0xb8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d13d      	bne.n	8003276 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80031fa:	193b      	adds	r3, r7, r4
 80031fc:	2201      	movs	r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003200:	193b      	adds	r3, r7, r4
 8003202:	2200      	movs	r2, #0
 8003204:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003206:	193b      	adds	r3, r7, r4
 8003208:	0018      	movs	r0, r3
 800320a:	f002 fdfd 	bl	8005e08 <HAL_RCCEx_PeriphCLKConfig>
 800320e:	1e03      	subs	r3, r0, #0
 8003210:	d001      	beq.n	8003216 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003212:	f7ff fca1 	bl	8002b58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003216:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <HAL_UART_MspInit+0xbc>)
 8003218:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800321a:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <HAL_UART_MspInit+0xbc>)
 800321c:	2180      	movs	r1, #128	; 0x80
 800321e:	01c9      	lsls	r1, r1, #7
 8003220:	430a      	orrs	r2, r1
 8003222:	641a      	str	r2, [r3, #64]	; 0x40
 8003224:	4b17      	ldr	r3, [pc, #92]	; (8003284 <HAL_UART_MspInit+0xbc>)
 8003226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	01db      	lsls	r3, r3, #7
 800322c:	4013      	ands	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003232:	4b14      	ldr	r3, [pc, #80]	; (8003284 <HAL_UART_MspInit+0xbc>)
 8003234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003236:	4b13      	ldr	r3, [pc, #76]	; (8003284 <HAL_UART_MspInit+0xbc>)
 8003238:	2102      	movs	r1, #2
 800323a:	430a      	orrs	r2, r1
 800323c:	635a      	str	r2, [r3, #52]	; 0x34
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <HAL_UART_MspInit+0xbc>)
 8003240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003242:	2202      	movs	r2, #2
 8003244:	4013      	ands	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800324a:	212c      	movs	r1, #44	; 0x2c
 800324c:	187b      	adds	r3, r7, r1
 800324e:	22c0      	movs	r2, #192	; 0xc0
 8003250:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003252:	187b      	adds	r3, r7, r1
 8003254:	2202      	movs	r2, #2
 8003256:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	187b      	adds	r3, r7, r1
 800325a:	2200      	movs	r2, #0
 800325c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325e:	187b      	adds	r3, r7, r1
 8003260:	2200      	movs	r2, #0
 8003262:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8003264:	187b      	adds	r3, r7, r1
 8003266:	2200      	movs	r2, #0
 8003268:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800326a:	187b      	adds	r3, r7, r1
 800326c:	4a06      	ldr	r2, [pc, #24]	; (8003288 <HAL_UART_MspInit+0xc0>)
 800326e:	0019      	movs	r1, r3
 8003270:	0010      	movs	r0, r2
 8003272:	f001 ff41 	bl	80050f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	46bd      	mov	sp, r7
 800327a:	b011      	add	sp, #68	; 0x44
 800327c:	bd90      	pop	{r4, r7, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	40013800 	.word	0x40013800
 8003284:	40021000 	.word	0x40021000
 8003288:	50000400 	.word	0x50000400

0800328c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003290:	e7fe      	b.n	8003290 <NMI_Handler+0x4>

08003292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003296:	e7fe      	b.n	8003296 <HardFault_Handler+0x4>

08003298 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800329c:	46c0      	nop			; (mov r8, r8)
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032b0:	f000 fb74 	bl	800399c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032b4:	46c0      	nop			; (mov r8, r8)
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80032c0:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <DMA1_Channel1_IRQHandler+0x14>)
 80032c2:	0018      	movs	r0, r3
 80032c4:	f001 fdd6 	bl	8004e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80032c8:	46c0      	nop			; (mov r8, r8)
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	200000f0 	.word	0x200000f0

080032d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032dc:	4a14      	ldr	r2, [pc, #80]	; (8003330 <_sbrk+0x5c>)
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <_sbrk+0x60>)
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032e8:	4b13      	ldr	r3, [pc, #76]	; (8003338 <_sbrk+0x64>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032f0:	4b11      	ldr	r3, [pc, #68]	; (8003338 <_sbrk+0x64>)
 80032f2:	4a12      	ldr	r2, [pc, #72]	; (800333c <_sbrk+0x68>)
 80032f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032f6:	4b10      	ldr	r3, [pc, #64]	; (8003338 <_sbrk+0x64>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	18d3      	adds	r3, r2, r3
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	429a      	cmp	r2, r3
 8003302:	d207      	bcs.n	8003314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003304:	f003 fb4a 	bl	800699c <__errno>
 8003308:	0003      	movs	r3, r0
 800330a:	220c      	movs	r2, #12
 800330c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800330e:	2301      	movs	r3, #1
 8003310:	425b      	negs	r3, r3
 8003312:	e009      	b.n	8003328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003314:	4b08      	ldr	r3, [pc, #32]	; (8003338 <_sbrk+0x64>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800331a:	4b07      	ldr	r3, [pc, #28]	; (8003338 <_sbrk+0x64>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	18d2      	adds	r2, r2, r3
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <_sbrk+0x64>)
 8003324:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003326:	68fb      	ldr	r3, [r7, #12]
}
 8003328:	0018      	movs	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	b006      	add	sp, #24
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20002000 	.word	0x20002000
 8003334:	00000400 	.word	0x00000400
 8003338:	20000348 	.word	0x20000348
 800333c:	20000360 	.word	0x20000360

08003340 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003344:	46c0      	nop			; (mov r8, r8)
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	0002      	movs	r2, r0
 8003354:	1dfb      	adds	r3, r7, #7
 8003356:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003358:	1dfb      	adds	r3, r7, #7
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b7f      	cmp	r3, #127	; 0x7f
 800335e:	d809      	bhi.n	8003374 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003360:	1dfb      	adds	r3, r7, #7
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	001a      	movs	r2, r3
 8003366:	231f      	movs	r3, #31
 8003368:	401a      	ands	r2, r3
 800336a:	4b04      	ldr	r3, [pc, #16]	; (800337c <__NVIC_EnableIRQ+0x30>)
 800336c:	2101      	movs	r1, #1
 800336e:	4091      	lsls	r1, r2
 8003370:	000a      	movs	r2, r1
 8003372:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003374:	46c0      	nop			; (mov r8, r8)
 8003376:	46bd      	mov	sp, r7
 8003378:	b002      	add	sp, #8
 800337a:	bd80      	pop	{r7, pc}
 800337c:	e000e100 	.word	0xe000e100

08003380 <uart1_gpio_init>:
 *      Author: sigmadev
 */

#include <uart1.h>

void uart1_gpio_init() {
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
	/**USART1 GPIO Configuration
	 PA9     ------> USART1_TX
	 PA10     ------> USART1_RX
	 */
	/* PA9 TX as alter */
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE9_0);
 8003384:	23a0      	movs	r3, #160	; 0xa0
 8003386:	05db      	lsls	r3, r3, #23
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	23a0      	movs	r3, #160	; 0xa0
 800338c:	05db      	lsls	r3, r3, #23
 800338e:	495a      	ldr	r1, [pc, #360]	; (80034f8 <uart1_gpio_init+0x178>)
 8003390:	400a      	ands	r2, r1
 8003392:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE9_1);
 8003394:	23a0      	movs	r3, #160	; 0xa0
 8003396:	05db      	lsls	r3, r3, #23
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	23a0      	movs	r3, #160	; 0xa0
 800339c:	05db      	lsls	r3, r3, #23
 800339e:	2180      	movs	r1, #128	; 0x80
 80033a0:	0309      	lsls	r1, r1, #12
 80033a2:	430a      	orrs	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]
	/* PA9 TX as alter */
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE10_0);
 80033a6:	23a0      	movs	r3, #160	; 0xa0
 80033a8:	05db      	lsls	r3, r3, #23
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	23a0      	movs	r3, #160	; 0xa0
 80033ae:	05db      	lsls	r3, r3, #23
 80033b0:	4952      	ldr	r1, [pc, #328]	; (80034fc <uart1_gpio_init+0x17c>)
 80033b2:	400a      	ands	r2, r1
 80033b4:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE10_1);
 80033b6:	23a0      	movs	r3, #160	; 0xa0
 80033b8:	05db      	lsls	r3, r3, #23
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	23a0      	movs	r3, #160	; 0xa0
 80033be:	05db      	lsls	r3, r3, #23
 80033c0:	2180      	movs	r1, #128	; 0x80
 80033c2:	0389      	lsls	r1, r1, #14
 80033c4:	430a      	orrs	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]
	/* PA9 Tx open drain */
	CLEAR_BIT(GPIOA->MODER, GPIO_OTYPER_OT9);
 80033c8:	23a0      	movs	r3, #160	; 0xa0
 80033ca:	05db      	lsls	r3, r3, #23
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	23a0      	movs	r3, #160	; 0xa0
 80033d0:	05db      	lsls	r3, r3, #23
 80033d2:	494b      	ldr	r1, [pc, #300]	; (8003500 <uart1_gpio_init+0x180>)
 80033d4:	400a      	ands	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]
	/* PA9 Tx open drain */
	CLEAR_BIT(GPIOA->MODER, GPIO_OTYPER_OT10);
 80033d8:	23a0      	movs	r3, #160	; 0xa0
 80033da:	05db      	lsls	r3, r3, #23
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	23a0      	movs	r3, #160	; 0xa0
 80033e0:	05db      	lsls	r3, r3, #23
 80033e2:	4948      	ldr	r1, [pc, #288]	; (8003504 <uart1_gpio_init+0x184>)
 80033e4:	400a      	ands	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]
	/* PA9 Tx pull up */
	CLEAR_BIT(GPIOA->MODER, GPIO_PUPDR_PUPD9_0);
 80033e8:	23a0      	movs	r3, #160	; 0xa0
 80033ea:	05db      	lsls	r3, r3, #23
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	23a0      	movs	r3, #160	; 0xa0
 80033f0:	05db      	lsls	r3, r3, #23
 80033f2:	4941      	ldr	r1, [pc, #260]	; (80034f8 <uart1_gpio_init+0x178>)
 80033f4:	400a      	ands	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_PUPDR_PUPD9_1);
 80033f8:	23a0      	movs	r3, #160	; 0xa0
 80033fa:	05db      	lsls	r3, r3, #23
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	23a0      	movs	r3, #160	; 0xa0
 8003400:	05db      	lsls	r3, r3, #23
 8003402:	2180      	movs	r1, #128	; 0x80
 8003404:	0309      	lsls	r1, r1, #12
 8003406:	430a      	orrs	r2, r1
 8003408:	601a      	str	r2, [r3, #0]
	/* PA10 RX pull up */
	CLEAR_BIT(GPIOA->MODER, GPIO_PUPDR_PUPD10_0);
 800340a:	23a0      	movs	r3, #160	; 0xa0
 800340c:	05db      	lsls	r3, r3, #23
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	23a0      	movs	r3, #160	; 0xa0
 8003412:	05db      	lsls	r3, r3, #23
 8003414:	4939      	ldr	r1, [pc, #228]	; (80034fc <uart1_gpio_init+0x17c>)
 8003416:	400a      	ands	r2, r1
 8003418:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_PUPDR_PUPD10_1);
 800341a:	23a0      	movs	r3, #160	; 0xa0
 800341c:	05db      	lsls	r3, r3, #23
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	23a0      	movs	r3, #160	; 0xa0
 8003422:	05db      	lsls	r3, r3, #23
 8003424:	2180      	movs	r1, #128	; 0x80
 8003426:	0389      	lsls	r1, r1, #14
 8003428:	430a      	orrs	r2, r1
 800342a:	601a      	str	r2, [r3, #0]
	/*  PA9 Tx low speed */
	CLEAR_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEED9_0);
 800342c:	23a0      	movs	r3, #160	; 0xa0
 800342e:	05db      	lsls	r3, r3, #23
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	23a0      	movs	r3, #160	; 0xa0
 8003434:	05db      	lsls	r3, r3, #23
 8003436:	4930      	ldr	r1, [pc, #192]	; (80034f8 <uart1_gpio_init+0x178>)
 8003438:	400a      	ands	r2, r1
 800343a:	609a      	str	r2, [r3, #8]
	CLEAR_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEED9_1);
 800343c:	23a0      	movs	r3, #160	; 0xa0
 800343e:	05db      	lsls	r3, r3, #23
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	23a0      	movs	r3, #160	; 0xa0
 8003444:	05db      	lsls	r3, r3, #23
 8003446:	4930      	ldr	r1, [pc, #192]	; (8003508 <uart1_gpio_init+0x188>)
 8003448:	400a      	ands	r2, r1
 800344a:	609a      	str	r2, [r3, #8]
	/* PA10 RX low speed */
	SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEED10_0);
 800344c:	23a0      	movs	r3, #160	; 0xa0
 800344e:	05db      	lsls	r3, r3, #23
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	23a0      	movs	r3, #160	; 0xa0
 8003454:	05db      	lsls	r3, r3, #23
 8003456:	2180      	movs	r1, #128	; 0x80
 8003458:	0349      	lsls	r1, r1, #13
 800345a:	430a      	orrs	r2, r1
 800345c:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEED10_1);
 800345e:	23a0      	movs	r3, #160	; 0xa0
 8003460:	05db      	lsls	r3, r3, #23
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	23a0      	movs	r3, #160	; 0xa0
 8003466:	05db      	lsls	r3, r3, #23
 8003468:	2180      	movs	r1, #128	; 0x80
 800346a:	0389      	lsls	r1, r1, #14
 800346c:	430a      	orrs	r2, r1
 800346e:	609a      	str	r2, [r3, #8]
	/*PA9 TX   AF1 as alter   */
	SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_0);
 8003470:	23a0      	movs	r3, #160	; 0xa0
 8003472:	05db      	lsls	r3, r3, #23
 8003474:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003476:	23a0      	movs	r3, #160	; 0xa0
 8003478:	05db      	lsls	r3, r3, #23
 800347a:	2110      	movs	r1, #16
 800347c:	430a      	orrs	r2, r1
 800347e:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_1);
 8003480:	23a0      	movs	r3, #160	; 0xa0
 8003482:	05db      	lsls	r3, r3, #23
 8003484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003486:	23a0      	movs	r3, #160	; 0xa0
 8003488:	05db      	lsls	r3, r3, #23
 800348a:	2120      	movs	r1, #32
 800348c:	438a      	bics	r2, r1
 800348e:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_2);
 8003490:	23a0      	movs	r3, #160	; 0xa0
 8003492:	05db      	lsls	r3, r3, #23
 8003494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003496:	23a0      	movs	r3, #160	; 0xa0
 8003498:	05db      	lsls	r3, r3, #23
 800349a:	2140      	movs	r1, #64	; 0x40
 800349c:	438a      	bics	r2, r1
 800349e:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_3);
 80034a0:	23a0      	movs	r3, #160	; 0xa0
 80034a2:	05db      	lsls	r3, r3, #23
 80034a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034a6:	23a0      	movs	r3, #160	; 0xa0
 80034a8:	05db      	lsls	r3, r3, #23
 80034aa:	2180      	movs	r1, #128	; 0x80
 80034ac:	438a      	bics	r2, r1
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24
	/* PA10 RX  AF1 as alter   */
	SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_0);
 80034b0:	23a0      	movs	r3, #160	; 0xa0
 80034b2:	05db      	lsls	r3, r3, #23
 80034b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034b6:	23a0      	movs	r3, #160	; 0xa0
 80034b8:	05db      	lsls	r3, r3, #23
 80034ba:	2180      	movs	r1, #128	; 0x80
 80034bc:	0049      	lsls	r1, r1, #1
 80034be:	430a      	orrs	r2, r1
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_1);
 80034c2:	23a0      	movs	r3, #160	; 0xa0
 80034c4:	05db      	lsls	r3, r3, #23
 80034c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034c8:	23a0      	movs	r3, #160	; 0xa0
 80034ca:	05db      	lsls	r3, r3, #23
 80034cc:	490c      	ldr	r1, [pc, #48]	; (8003500 <uart1_gpio_init+0x180>)
 80034ce:	400a      	ands	r2, r1
 80034d0:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_2);
 80034d2:	23a0      	movs	r3, #160	; 0xa0
 80034d4:	05db      	lsls	r3, r3, #23
 80034d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034d8:	23a0      	movs	r3, #160	; 0xa0
 80034da:	05db      	lsls	r3, r3, #23
 80034dc:	4909      	ldr	r1, [pc, #36]	; (8003504 <uart1_gpio_init+0x184>)
 80034de:	400a      	ands	r2, r1
 80034e0:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_3);
 80034e2:	23a0      	movs	r3, #160	; 0xa0
 80034e4:	05db      	lsls	r3, r3, #23
 80034e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034e8:	23a0      	movs	r3, #160	; 0xa0
 80034ea:	05db      	lsls	r3, r3, #23
 80034ec:	4907      	ldr	r1, [pc, #28]	; (800350c <uart1_gpio_init+0x18c>)
 80034ee:	400a      	ands	r2, r1
 80034f0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	fffbffff 	.word	0xfffbffff
 80034fc:	ffefffff 	.word	0xffefffff
 8003500:	fffffdff 	.word	0xfffffdff
 8003504:	fffffbff 	.word	0xfffffbff
 8003508:	fff7ffff 	.word	0xfff7ffff
 800350c:	fffff7ff 	.word	0xfffff7ff

08003510 <uart1_init>:

void uart1_init(uint32_t pclk, uint32_t baud_rate, UART1_t *u) {
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
	uint32_t br_value = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]

	uart1_gpio_init();
 8003520:	f7ff ff2e 	bl	8003380 <uart1_gpio_init>

	/*enable clock access to USART1 */
	SET_BIT(RCC->APBENR2, RCC_APBENR2_USART1EN);
 8003524:	4b2a      	ldr	r3, [pc, #168]	; (80035d0 <uart1_init+0xc0>)
 8003526:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003528:	4b29      	ldr	r3, [pc, #164]	; (80035d0 <uart1_init+0xc0>)
 800352a:	2180      	movs	r1, #128	; 0x80
 800352c:	01c9      	lsls	r1, r1, #7
 800352e:	430a      	orrs	r2, r1
 8003530:	641a      	str	r2, [r3, #64]	; 0x40
	if (pclk == 16000000) {
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4a27      	ldr	r2, [pc, #156]	; (80035d4 <uart1_init+0xc4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d10b      	bne.n	8003552 <uart1_init+0x42>
		/*set HSI 16 CLK */
		CLEAR_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_0);
 800353a:	4b25      	ldr	r3, [pc, #148]	; (80035d0 <uart1_init+0xc0>)
 800353c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800353e:	4b24      	ldr	r3, [pc, #144]	; (80035d0 <uart1_init+0xc0>)
 8003540:	2101      	movs	r1, #1
 8003542:	438a      	bics	r2, r1
 8003544:	655a      	str	r2, [r3, #84]	; 0x54
		SET_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_1);
 8003546:	4b22      	ldr	r3, [pc, #136]	; (80035d0 <uart1_init+0xc0>)
 8003548:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800354a:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <uart1_init+0xc0>)
 800354c:	2102      	movs	r1, #2
 800354e:	430a      	orrs	r2, r1
 8003550:	655a      	str	r2, [r3, #84]	; 0x54
	}
	//MODIFY_REG(USART1->PRESC,USART_PRESC_PRESCALER,0x0010);
	/* set baud rate */
	br_value = (pclk) / baud_rate;
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f7fc fddb 	bl	8000110 <__udivsi3>
 800355a:	0003      	movs	r3, r0
 800355c:	617b      	str	r3, [r7, #20]
	USART1->BRR = (uint16_t) br_value;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	b29a      	uxth	r2, r3
 8003562:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <uart1_init+0xc8>)
 8003564:	60da      	str	r2, [r3, #12]
	/* transmitter enable*/
	USART1->CR1 = USART_CR1_TE | USART_CR1_RE;
 8003566:	4b1c      	ldr	r3, [pc, #112]	; (80035d8 <uart1_init+0xc8>)
 8003568:	220c      	movs	r2, #12
 800356a:	601a      	str	r2, [r3, #0]

	u->rx_buffer = (uint8_t*) malloc(RX_BUFFLEN);
 800356c:	2019      	movs	r0, #25
 800356e:	f003 fa3f 	bl	80069f0 <malloc>
 8003572:	0003      	movs	r3, r0
 8003574:	001a      	movs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	601a      	str	r2, [r3, #0]
	u->tx_buffer = (uint8_t*) malloc(TX_BUFFLEN);
 800357a:	2064      	movs	r0, #100	; 0x64
 800357c:	f003 fa38 	bl	80069f0 <malloc>
 8003580:	0003      	movs	r3, r0
 8003582:	001a      	movs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	605a      	str	r2, [r3, #4]
	u->is_data_ready = false;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	725a      	strb	r2, [r3, #9]
	u->rx_count = 0;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	721a      	strb	r2, [r3, #8]

	uart1_clean_buffer(u);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	0018      	movs	r0, r3
 8003598:	f000 f8e5 	bl	8003766 <uart1_clean_buffer>

	/* enable FIFO */
	SET_BIT(USART1->CR2, USART_CR1_FIFOEN);
 800359c:	4b0e      	ldr	r3, [pc, #56]	; (80035d8 <uart1_init+0xc8>)
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <uart1_init+0xc8>)
 80035a2:	2180      	movs	r1, #128	; 0x80
 80035a4:	0589      	lsls	r1, r1, #22
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
	//SET_BIT(USART1->CR2, USART_CR2_RTOEN);
	/**/
	//MODIFY_REG(USART1->RTOR,USART_RTOR_RTO,100);
	/*set length */
	/* Enable interrupt */
	SET_BIT(USART1->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80035aa:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <uart1_init+0xc8>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <uart1_init+0xc8>)
 80035b0:	2120      	movs	r1, #32
 80035b2:	430a      	orrs	r2, r1
 80035b4:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART1_IRQn);
 80035b6:	201b      	movs	r0, #27
 80035b8:	f7ff fec8 	bl	800334c <__NVIC_EnableIRQ>
	//uart1_dma_init();
//
	SET_BIT(USART1->CR1, USART_CR1_UE);
 80035bc:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <uart1_init+0xc8>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <uart1_init+0xc8>)
 80035c2:	2101      	movs	r1, #1
 80035c4:	430a      	orrs	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]
}
 80035c8:	46c0      	nop			; (mov r8, r8)
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b006      	add	sp, #24
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40021000 	.word	0x40021000
 80035d4:	00f42400 	.word	0x00f42400
 80035d8:	40013800 	.word	0x40013800

080035dc <uart1_write>:
	/* set the destination buffer */
	/*set the source buffer */

}

void uart1_write(char ch) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	0002      	movs	r2, r0
 80035e4:	1dfb      	adds	r3, r7, #7
 80035e6:	701a      	strb	r2, [r3, #0]
	SET_BIT(GPIOA->ODR, GPIO_ODR_OD15);
 80035e8:	23a0      	movs	r3, #160	; 0xa0
 80035ea:	05db      	lsls	r3, r3, #23
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	23a0      	movs	r3, #160	; 0xa0
 80035f0:	05db      	lsls	r3, r3, #23
 80035f2:	2180      	movs	r1, #128	; 0x80
 80035f4:	0209      	lsls	r1, r1, #8
 80035f6:	430a      	orrs	r2, r1
 80035f8:	615a      	str	r2, [r3, #20]

	while (!READ_BIT(USART1->ISR, USART_ISR_TXE_TXFNF))
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <uart1_write+0x58>)
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	2280      	movs	r2, #128	; 0x80
 8003602:	4013      	ands	r3, r2
 8003604:	d0fa      	beq.n	80035fc <uart1_write+0x20>
		;
	USART1->TDR = (uint8_t) (ch & 0xFFU);
 8003606:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <uart1_write+0x58>)
 8003608:	1dfa      	adds	r2, r7, #7
 800360a:	7812      	ldrb	r2, [r2, #0]
 800360c:	629a      	str	r2, [r3, #40]	; 0x28

	while (!READ_BIT(USART1->ISR, USART_ISR_TC))
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	4b08      	ldr	r3, [pc, #32]	; (8003634 <uart1_write+0x58>)
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	2240      	movs	r2, #64	; 0x40
 8003616:	4013      	ands	r3, r2
 8003618:	d0fa      	beq.n	8003610 <uart1_write+0x34>
		;

	CLEAR_BIT(GPIOA->ODR, GPIO_ODR_OD15);
 800361a:	23a0      	movs	r3, #160	; 0xa0
 800361c:	05db      	lsls	r3, r3, #23
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	23a0      	movs	r3, #160	; 0xa0
 8003622:	05db      	lsls	r3, r3, #23
 8003624:	4904      	ldr	r1, [pc, #16]	; (8003638 <uart1_write+0x5c>)
 8003626:	400a      	ands	r2, r1
 8003628:	615a      	str	r2, [r3, #20]
}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	46bd      	mov	sp, r7
 800362e:	b002      	add	sp, #8
 8003630:	bd80      	pop	{r7, pc}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	40013800 	.word	0x40013800
 8003638:	ffff7fff 	.word	0xffff7fff

0800363c <uart1_1byte_read>:
		}
		data[0] = USART1->RDR;
	}
}

uint8_t uart1_1byte_read(void) {
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
	bool override = READ_BIT(USART1->ISR, USART_ISR_ORE);
 8003642:	4b15      	ldr	r3, [pc, #84]	; (8003698 <uart1_1byte_read+0x5c>)
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	2208      	movs	r2, #8
 8003648:	401a      	ands	r2, r3
 800364a:	1dfb      	adds	r3, r7, #7
 800364c:	1e51      	subs	r1, r2, #1
 800364e:	418a      	sbcs	r2, r1
 8003650:	701a      	strb	r2, [r3, #0]
	bool data_present = READ_BIT(USART1->ISR, USART_ISR_RXNE_RXFNE);
 8003652:	4b11      	ldr	r3, [pc, #68]	; (8003698 <uart1_1byte_read+0x5c>)
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	2220      	movs	r2, #32
 8003658:	401a      	ands	r2, r3
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	1e51      	subs	r1, r2, #1
 800365e:	418a      	sbcs	r2, r1
 8003660:	701a      	strb	r2, [r3, #0]
//	bool busy = READ_BIT(USART1->ISR, USART_ISR_BUSY);
	if ((data_present || override)) {
 8003662:	1dbb      	adds	r3, r7, #6
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d103      	bne.n	8003672 <uart1_1byte_read+0x36>
 800366a:	1dfb      	adds	r3, r7, #7
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00d      	beq.n	800368e <uart1_1byte_read+0x52>
		if (override)
 8003672:	1dfb      	adds	r3, r7, #7
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <uart1_1byte_read+0x4a>
			SET_BIT(USART1->ICR, USART_ICR_ORECF);
 800367a:	4b07      	ldr	r3, [pc, #28]	; (8003698 <uart1_1byte_read+0x5c>)
 800367c:	6a1a      	ldr	r2, [r3, #32]
 800367e:	4b06      	ldr	r3, [pc, #24]	; (8003698 <uart1_1byte_read+0x5c>)
 8003680:	2108      	movs	r1, #8
 8003682:	430a      	orrs	r2, r1
 8003684:	621a      	str	r2, [r3, #32]
		return USART1->RDR;
 8003686:	4b04      	ldr	r3, [pc, #16]	; (8003698 <uart1_1byte_read+0x5c>)
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	b2db      	uxtb	r3, r3
 800368c:	e000      	b.n	8003690 <uart1_1byte_read+0x54>
	} else
		return '\0';
 800368e:	2300      	movs	r3, #0
}
 8003690:	0018      	movs	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	b002      	add	sp, #8
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40013800 	.word	0x40013800

0800369c <uart1_read_to_frame>:

void  uart1_read_to_frame(UART1_t *u) {
 800369c:	b590      	push	{r4, r7, lr}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
	if (u->rx_count >= RX_BUFFLEN) {
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	7a1b      	ldrb	r3, [r3, #8]
 80036a8:	2b18      	cmp	r3, #24
 80036aa:	d906      	bls.n	80036ba <uart1_read_to_frame+0x1e>
		uart1_clean_buffer(u);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	0018      	movs	r0, r3
 80036b0:	f000 f859 	bl	8003766 <uart1_clean_buffer>
		u->rx_count = 0;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	721a      	strb	r2, [r3, #8]
	}
	u->rx_buffer[u->rx_count++] = uart1_1byte_read();
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	7a1b      	ldrb	r3, [r3, #8]
 80036c2:	1c59      	adds	r1, r3, #1
 80036c4:	b2c8      	uxtb	r0, r1
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	7208      	strb	r0, [r1, #8]
 80036ca:	18d4      	adds	r4, r2, r3
 80036cc:	f7ff ffb6 	bl	800363c <uart1_1byte_read>
 80036d0:	0003      	movs	r3, r0
 80036d2:	7023      	strb	r3, [r4, #0]
}
 80036d4:	46c0      	nop			; (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b003      	add	sp, #12
 80036da:	bd90      	pop	{r4, r7, pc}

080036dc <uart1_send_str>:

void uart1_send_str(char *str) {
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; str[i] != '\0'; i++)
 80036e4:	230f      	movs	r3, #15
 80036e6:	18fb      	adds	r3, r7, r3
 80036e8:	2200      	movs	r2, #0
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	e00d      	b.n	800370a <uart1_send_str+0x2e>
		uart1_write(str[i]);
 80036ee:	240f      	movs	r4, #15
 80036f0:	193b      	adds	r3, r7, r4
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	18d3      	adds	r3, r2, r3
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	0018      	movs	r0, r3
 80036fc:	f7ff ff6e 	bl	80035dc <uart1_write>
	for (i = 0; str[i] != '\0'; i++)
 8003700:	193b      	adds	r3, r7, r4
 8003702:	781a      	ldrb	r2, [r3, #0]
 8003704:	193b      	adds	r3, r7, r4
 8003706:	3201      	adds	r2, #1
 8003708:	701a      	strb	r2, [r3, #0]
 800370a:	230f      	movs	r3, #15
 800370c:	18fb      	adds	r3, r7, r3
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	18d3      	adds	r3, r2, r3
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1e9      	bne.n	80036ee <uart1_send_str+0x12>
}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	46bd      	mov	sp, r7
 8003720:	b005      	add	sp, #20
 8003722:	bd90      	pop	{r4, r7, pc}

08003724 <uart1_send_frame>:

void uart1_send_frame(char *str, uint8_t len) {
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	000a      	movs	r2, r1
 800372e:	1cfb      	adds	r3, r7, #3
 8003730:	701a      	strb	r2, [r3, #0]

	if (len > 0) {
 8003732:	1cfb      	adds	r3, r7, #3
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d011      	beq.n	800375e <uart1_send_frame+0x3a>
		for (int i = 0; i < len; i++)
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	e009      	b.n	8003754 <uart1_send_frame+0x30>
			uart1_write(str[i]);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	18d3      	adds	r3, r2, r3
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	0018      	movs	r0, r3
 800374a:	f7ff ff47 	bl	80035dc <uart1_write>
		for (int i = 0; i < len; i++)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	3301      	adds	r3, #1
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	1cfb      	adds	r3, r7, #3
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	429a      	cmp	r2, r3
 800375c:	dbf0      	blt.n	8003740 <uart1_send_frame+0x1c>
	}
}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	46bd      	mov	sp, r7
 8003762:	b004      	add	sp, #16
 8003764:	bd80      	pop	{r7, pc}

08003766 <uart1_clean_buffer>:

void uart1_clean_buffer(UART1_t *u) {
 8003766:	b580      	push	{r7, lr}
 8003768:	b084      	sub	sp, #16
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
	u->rx_count = 0;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	721a      	strb	r2, [r3, #8]
	if (TX_BUFFLEN > RX_BUFFLEN) {
		for (int i = 0; i < TX_BUFFLEN; i++) {
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	e011      	b.n	800379e <uart1_clean_buffer+0x38>
			if (i < RX_BUFFLEN)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b18      	cmp	r3, #24
 800377e:	dc05      	bgt.n	800378c <uart1_clean_buffer+0x26>
				u->rx_buffer[i] = 0x00;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	18d3      	adds	r3, r2, r3
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]
			u->tx_buffer[i] = 0x00;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	18d3      	adds	r3, r2, r3
 8003794:	2200      	movs	r2, #0
 8003796:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < TX_BUFFLEN; i++) {
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	3301      	adds	r3, #1
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2b63      	cmp	r3, #99	; 0x63
 80037a2:	ddea      	ble.n	800377a <uart1_clean_buffer+0x14>
			if (i < TX_BUFFLEN)
				u->tx_buffer[i] = 0x00;
			u->rx_buffer[i] = 0x00;
		}
	}
}
 80037a4:	46c0      	nop			; (mov r8, r8)
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b004      	add	sp, #16
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <crc_get>:
#include "utils.h"

uint16_t crc_get(uint8_t* buffer, uint8_t buff_len) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	000a      	movs	r2, r1
 80037ba:	1cfb      	adds	r3, r7, #3
 80037bc:	701a      	strb	r2, [r3, #0]
	uint8_t b;
	uint8_t i;
	uint16_t generator = 0x1021; //divisor is 16bit
 80037be:	230a      	movs	r3, #10
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	4a2b      	ldr	r2, [pc, #172]	; (8003870 <crc_get+0xc0>)
 80037c4:	801a      	strh	r2, [r3, #0]
	uint16_t crc = 0;			 // CRC value is 16bit
 80037c6:	230c      	movs	r3, #12
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	2200      	movs	r2, #0
 80037cc:	801a      	strh	r2, [r3, #0]

	for (b = 0; b < buff_len; b++) {
 80037ce:	230f      	movs	r3, #15
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	e03d      	b.n	8003854 <crc_get+0xa4>
		crc ^= ((uint16_t) (buffer[b] << 8)); // move byte into MSB of 16bit CRC
 80037d8:	230f      	movs	r3, #15
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	18d3      	adds	r3, r2, r3
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	b299      	uxth	r1, r3
 80037ea:	220c      	movs	r2, #12
 80037ec:	18bb      	adds	r3, r7, r2
 80037ee:	18ba      	adds	r2, r7, r2
 80037f0:	8812      	ldrh	r2, [r2, #0]
 80037f2:	404a      	eors	r2, r1
 80037f4:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 8; i++) {
 80037f6:	230e      	movs	r3, #14
 80037f8:	18fb      	adds	r3, r7, r3
 80037fa:	2200      	movs	r2, #0
 80037fc:	701a      	strb	r2, [r3, #0]
 80037fe:	e01e      	b.n	800383e <crc_get+0x8e>
			if ((crc & 0x8000) != 0) // test for MSB = bit 15
 8003800:	210c      	movs	r1, #12
 8003802:	187b      	adds	r3, r7, r1
 8003804:	2200      	movs	r2, #0
 8003806:	5e9b      	ldrsh	r3, [r3, r2]
 8003808:	2b00      	cmp	r3, #0
 800380a:	da0c      	bge.n	8003826 <crc_get+0x76>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 800380c:	187b      	adds	r3, r7, r1
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	b21a      	sxth	r2, r3
 8003814:	230a      	movs	r3, #10
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	2000      	movs	r0, #0
 800381a:	5e1b      	ldrsh	r3, [r3, r0]
 800381c:	4053      	eors	r3, r2
 800381e:	b21a      	sxth	r2, r3
 8003820:	187b      	adds	r3, r7, r1
 8003822:	801a      	strh	r2, [r3, #0]
 8003824:	e005      	b.n	8003832 <crc_get+0x82>
			else
				crc <<= 1;
 8003826:	230c      	movs	r3, #12
 8003828:	18fa      	adds	r2, r7, r3
 800382a:	18fb      	adds	r3, r7, r3
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	18db      	adds	r3, r3, r3
 8003830:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
 8003832:	210e      	movs	r1, #14
 8003834:	187b      	adds	r3, r7, r1
 8003836:	781a      	ldrb	r2, [r3, #0]
 8003838:	187b      	adds	r3, r7, r1
 800383a:	3201      	adds	r2, #1
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	230e      	movs	r3, #14
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b07      	cmp	r3, #7
 8003846:	d9db      	bls.n	8003800 <crc_get+0x50>
	for (b = 0; b < buff_len; b++) {
 8003848:	210f      	movs	r1, #15
 800384a:	187b      	adds	r3, r7, r1
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	187b      	adds	r3, r7, r1
 8003850:	3201      	adds	r2, #1
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	230f      	movs	r3, #15
 8003856:	18fa      	adds	r2, r7, r3
 8003858:	1cfb      	adds	r3, r7, #3
 800385a:	7812      	ldrb	r2, [r2, #0]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d3ba      	bcc.n	80037d8 <crc_get+0x28>
		}
	}
	return crc;
 8003862:	230c      	movs	r3, #12
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	881b      	ldrh	r3, [r3, #0]
}
 8003868:	0018      	movs	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	b004      	add	sp, #16
 800386e:	bd80      	pop	{r7, pc}
 8003870:	00001021 	.word	0x00001021

08003874 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003874:	480d      	ldr	r0, [pc, #52]	; (80038ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003876:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003878:	f7ff fd62 	bl	8003340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800387c:	480c      	ldr	r0, [pc, #48]	; (80038b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800387e:	490d      	ldr	r1, [pc, #52]	; (80038b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003880:	4a0d      	ldr	r2, [pc, #52]	; (80038b8 <LoopForever+0xe>)
  movs r3, #0
 8003882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003884:	e002      	b.n	800388c <LoopCopyDataInit>

08003886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800388a:	3304      	adds	r3, #4

0800388c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800388c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800388e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003890:	d3f9      	bcc.n	8003886 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003892:	4a0a      	ldr	r2, [pc, #40]	; (80038bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003894:	4c0a      	ldr	r4, [pc, #40]	; (80038c0 <LoopForever+0x16>)
  movs r3, #0
 8003896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003898:	e001      	b.n	800389e <LoopFillZerobss>

0800389a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800389a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800389c:	3204      	adds	r2, #4

0800389e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800389e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038a0:	d3fb      	bcc.n	800389a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80038a2:	f003 f881 	bl	80069a8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80038a6:	f7fe f9e5 	bl	8001c74 <main>

080038aa <LoopForever>:

LoopForever:
  b LoopForever
 80038aa:	e7fe      	b.n	80038aa <LoopForever>
  ldr   r0, =_estack
 80038ac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80038b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80038b8:	08006f1c 	.word	0x08006f1c
  ldr r2, =_sbss
 80038bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80038c0:	20000360 	.word	0x20000360

080038c4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038c4:	e7fe      	b.n	80038c4 <ADC1_IRQHandler>
	...

080038c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038ce:	1dfb      	adds	r3, r7, #7
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <HAL_Init+0x3c>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <HAL_Init+0x3c>)
 80038da:	2180      	movs	r1, #128	; 0x80
 80038dc:	0049      	lsls	r1, r1, #1
 80038de:	430a      	orrs	r2, r1
 80038e0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038e2:	2003      	movs	r0, #3
 80038e4:	f000 f810 	bl	8003908 <HAL_InitTick>
 80038e8:	1e03      	subs	r3, r0, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80038ec:	1dfb      	adds	r3, r7, #7
 80038ee:	2201      	movs	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
 80038f2:	e001      	b.n	80038f8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80038f4:	f7ff fb9c 	bl	8003030 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038f8:	1dfb      	adds	r3, r7, #7
 80038fa:	781b      	ldrb	r3, [r3, #0]
}
 80038fc:	0018      	movs	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	b002      	add	sp, #8
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40022000 	.word	0x40022000

08003908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003908:	b590      	push	{r4, r7, lr}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003910:	230f      	movs	r3, #15
 8003912:	18fb      	adds	r3, r7, r3
 8003914:	2200      	movs	r2, #0
 8003916:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003918:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <HAL_InitTick+0x88>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d02b      	beq.n	8003978 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003920:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <HAL_InitTick+0x8c>)
 8003922:	681c      	ldr	r4, [r3, #0]
 8003924:	4b1a      	ldr	r3, [pc, #104]	; (8003990 <HAL_InitTick+0x88>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	0019      	movs	r1, r3
 800392a:	23fa      	movs	r3, #250	; 0xfa
 800392c:	0098      	lsls	r0, r3, #2
 800392e:	f7fc fbef 	bl	8000110 <__udivsi3>
 8003932:	0003      	movs	r3, r0
 8003934:	0019      	movs	r1, r3
 8003936:	0020      	movs	r0, r4
 8003938:	f7fc fbea 	bl	8000110 <__udivsi3>
 800393c:	0003      	movs	r3, r0
 800393e:	0018      	movs	r0, r3
 8003940:	f001 f97b 	bl	8004c3a <HAL_SYSTICK_Config>
 8003944:	1e03      	subs	r3, r0, #0
 8003946:	d112      	bne.n	800396e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b03      	cmp	r3, #3
 800394c:	d80a      	bhi.n	8003964 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	2301      	movs	r3, #1
 8003952:	425b      	negs	r3, r3
 8003954:	2200      	movs	r2, #0
 8003956:	0018      	movs	r0, r3
 8003958:	f001 f94a 	bl	8004bf0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800395c:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <HAL_InitTick+0x90>)
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	e00d      	b.n	8003980 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003964:	230f      	movs	r3, #15
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	2201      	movs	r2, #1
 800396a:	701a      	strb	r2, [r3, #0]
 800396c:	e008      	b.n	8003980 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800396e:	230f      	movs	r3, #15
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	2201      	movs	r2, #1
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	e003      	b.n	8003980 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003978:	230f      	movs	r3, #15
 800397a:	18fb      	adds	r3, r7, r3
 800397c:	2201      	movs	r2, #1
 800397e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003980:	230f      	movs	r3, #15
 8003982:	18fb      	adds	r3, r7, r3
 8003984:	781b      	ldrb	r3, [r3, #0]
}
 8003986:	0018      	movs	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	b005      	add	sp, #20
 800398c:	bd90      	pop	{r4, r7, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	20000008 	.word	0x20000008
 8003994:	20000000 	.word	0x20000000
 8003998:	20000004 	.word	0x20000004

0800399c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80039a0:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <HAL_IncTick+0x1c>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	001a      	movs	r2, r3
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_IncTick+0x20>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	18d2      	adds	r2, r2, r3
 80039ac:	4b03      	ldr	r3, [pc, #12]	; (80039bc <HAL_IncTick+0x20>)
 80039ae:	601a      	str	r2, [r3, #0]
}
 80039b0:	46c0      	nop			; (mov r8, r8)
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	20000008 	.word	0x20000008
 80039bc:	2000034c 	.word	0x2000034c

080039c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  return uwTick;
 80039c4:	4b02      	ldr	r3, [pc, #8]	; (80039d0 <HAL_GetTick+0x10>)
 80039c6:	681b      	ldr	r3, [r3, #0]
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	2000034c 	.word	0x2000034c

080039d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039dc:	f7ff fff0 	bl	80039c0 <HAL_GetTick>
 80039e0:	0003      	movs	r3, r0
 80039e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3301      	adds	r3, #1
 80039ec:	d005      	beq.n	80039fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ee:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <HAL_Delay+0x44>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	001a      	movs	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	189b      	adds	r3, r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	f7ff ffe0 	bl	80039c0 <HAL_GetTick>
 8003a00:	0002      	movs	r2, r0
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d8f7      	bhi.n	80039fc <HAL_Delay+0x28>
  {
  }
}
 8003a0c:	46c0      	nop			; (mov r8, r8)
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b004      	add	sp, #16
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	20000008 	.word	0x20000008

08003a1c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a05      	ldr	r2, [pc, #20]	; (8003a40 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003a2c:	401a      	ands	r2, r3
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	431a      	orrs	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	601a      	str	r2, [r3, #0]
}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b002      	add	sp, #8
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	fe3fffff 	.word	0xfe3fffff

08003a44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	23e0      	movs	r3, #224	; 0xe0
 8003a52:	045b      	lsls	r3, r3, #17
 8003a54:	4013      	ands	r3, r2
}
 8003a56:	0018      	movs	r0, r3
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b002      	add	sp, #8
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	2104      	movs	r1, #4
 8003a72:	400a      	ands	r2, r1
 8003a74:	2107      	movs	r1, #7
 8003a76:	4091      	lsls	r1, r2
 8003a78:	000a      	movs	r2, r1
 8003a7a:	43d2      	mvns	r2, r2
 8003a7c:	401a      	ands	r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2104      	movs	r1, #4
 8003a82:	400b      	ands	r3, r1
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	4099      	lsls	r1, r3
 8003a88:	000b      	movs	r3, r1
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b004      	add	sp, #16
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	2104      	movs	r1, #4
 8003aaa:	400a      	ands	r2, r1
 8003aac:	2107      	movs	r1, #7
 8003aae:	4091      	lsls	r1, r2
 8003ab0:	000a      	movs	r2, r1
 8003ab2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2104      	movs	r1, #4
 8003ab8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003aba:	40da      	lsrs	r2, r3
 8003abc:	0013      	movs	r3, r2
}
 8003abe:	0018      	movs	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b002      	add	sp, #8
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b082      	sub	sp, #8
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	23c0      	movs	r3, #192	; 0xc0
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d101      	bne.n	8003ade <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b002      	add	sp, #8
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	211f      	movs	r1, #31
 8003afc:	400a      	ands	r2, r1
 8003afe:	210f      	movs	r1, #15
 8003b00:	4091      	lsls	r1, r2
 8003b02:	000a      	movs	r2, r1
 8003b04:	43d2      	mvns	r2, r2
 8003b06:	401a      	ands	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	0e9b      	lsrs	r3, r3, #26
 8003b0c:	210f      	movs	r1, #15
 8003b0e:	4019      	ands	r1, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	201f      	movs	r0, #31
 8003b14:	4003      	ands	r3, r0
 8003b16:	4099      	lsls	r1, r3
 8003b18:	000b      	movs	r3, r1
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b20:	46c0      	nop			; (mov r8, r8)
 8003b22:	46bd      	mov	sp, r7
 8003b24:	b004      	add	sp, #16
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	035b      	lsls	r3, r3, #13
 8003b3a:	0b5b      	lsrs	r3, r3, #13
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b002      	add	sp, #8
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	0352      	lsls	r2, r2, #13
 8003b5c:	0b52      	lsrs	r2, r2, #13
 8003b5e:	43d2      	mvns	r2, r2
 8003b60:	401a      	ands	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	0212      	lsls	r2, r2, #8
 8003b84:	43d2      	mvns	r2, r2
 8003b86:	401a      	ands	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	400b      	ands	r3, r1
 8003b90:	4904      	ldr	r1, [pc, #16]	; (8003ba4 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003b92:	400b      	ands	r3, r1
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b004      	add	sp, #16
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	07ffff00 	.word	0x07ffff00

08003ba8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4a05      	ldr	r2, [pc, #20]	; (8003bcc <LL_ADC_EnableInternalRegulator+0x24>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2280      	movs	r2, #128	; 0x80
 8003bba:	0552      	lsls	r2, r2, #21
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b002      	add	sp, #8
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	6fffffe8 	.word	0x6fffffe8

08003bd0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	2380      	movs	r3, #128	; 0x80
 8003bde:	055b      	lsls	r3, r3, #21
 8003be0:	401a      	ands	r2, r3
 8003be2:	2380      	movs	r3, #128	; 0x80
 8003be4:	055b      	lsls	r3, r3, #21
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d101      	bne.n	8003bee <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	4a04      	ldr	r2, [pc, #16]	; (8003c18 <LL_ADC_Enable+0x20>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	2201      	movs	r2, #1
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003c10:	46c0      	nop			; (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b002      	add	sp, #8
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	7fffffe8 	.word	0x7fffffe8

08003c1c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	4a04      	ldr	r2, [pc, #16]	; (8003c3c <LL_ADC_Disable+0x20>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003c34:	46c0      	nop			; (mov r8, r8)
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b002      	add	sp, #8
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	7fffffe8 	.word	0x7fffffe8

08003c40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <LL_ADC_IsEnabled+0x18>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <LL_ADC_IsEnabled+0x1a>
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	b002      	add	sp, #8
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b082      	sub	sp, #8
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	4013      	ands	r3, r2
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d101      	bne.n	8003c7a <LL_ADC_IsDisableOngoing+0x18>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <LL_ADC_IsDisableOngoing+0x1a>
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b002      	add	sp, #8
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	4a04      	ldr	r2, [pc, #16]	; (8003ca4 <LL_ADC_REG_StartConversion+0x20>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	2204      	movs	r2, #4
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003c9c:	46c0      	nop			; (mov r8, r8)
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b002      	add	sp, #8
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	7fffffe8 	.word	0x7fffffe8

08003ca8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2204      	movs	r2, #4
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d101      	bne.n	8003cc0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	b002      	add	sp, #8
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cd4:	231f      	movs	r3, #31
 8003cd6:	18fb      	adds	r3, r7, r3
 8003cd8:	2200      	movs	r2, #0
 8003cda:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e17f      	b.n	8003ff2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10a      	bne.n	8003d10 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f7ff f9bb 	bl	8003078 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2254      	movs	r2, #84	; 0x54
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	0018      	movs	r0, r3
 8003d16:	f7ff ff5b 	bl	8003bd0 <LL_ADC_IsInternalRegulatorEnabled>
 8003d1a:	1e03      	subs	r3, r0, #0
 8003d1c:	d115      	bne.n	8003d4a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	0018      	movs	r0, r3
 8003d24:	f7ff ff40 	bl	8003ba8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d28:	4bb4      	ldr	r3, [pc, #720]	; (8003ffc <HAL_ADC_Init+0x330>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	49b4      	ldr	r1, [pc, #720]	; (8004000 <HAL_ADC_Init+0x334>)
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f7fc f9ee 	bl	8000110 <__udivsi3>
 8003d34:	0003      	movs	r3, r0
 8003d36:	3301      	adds	r3, #1
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d3c:	e002      	b.n	8003d44 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f9      	bne.n	8003d3e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f7ff ff3e 	bl	8003bd0 <LL_ADC_IsInternalRegulatorEnabled>
 8003d54:	1e03      	subs	r3, r0, #0
 8003d56:	d10f      	bne.n	8003d78 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5c:	2210      	movs	r2, #16
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d68:	2201      	movs	r2, #1
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d70:	231f      	movs	r3, #31
 8003d72:	18fb      	adds	r3, r7, r3
 8003d74:	2201      	movs	r2, #1
 8003d76:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f7ff ff93 	bl	8003ca8 <LL_ADC_REG_IsConversionOngoing>
 8003d82:	0003      	movs	r3, r0
 8003d84:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8a:	2210      	movs	r2, #16
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d000      	beq.n	8003d92 <HAL_ADC_Init+0xc6>
 8003d90:	e122      	b.n	8003fd8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d000      	beq.n	8003d9a <HAL_ADC_Init+0xce>
 8003d98:	e11e      	b.n	8003fd8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9e:	4a99      	ldr	r2, [pc, #612]	; (8004004 <HAL_ADC_Init+0x338>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	2202      	movs	r2, #2
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	0018      	movs	r0, r3
 8003db0:	f7ff ff46 	bl	8003c40 <LL_ADC_IsEnabled>
 8003db4:	1e03      	subs	r3, r0, #0
 8003db6:	d000      	beq.n	8003dba <HAL_ADC_Init+0xee>
 8003db8:	e0ad      	b.n	8003f16 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	7e1b      	ldrb	r3, [r3, #24]
 8003dc2:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003dc4:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	7e5b      	ldrb	r3, [r3, #25]
 8003dca:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003dcc:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	7e9b      	ldrb	r3, [r3, #26]
 8003dd2:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003dd4:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <HAL_ADC_Init+0x118>
 8003dde:	2380      	movs	r3, #128	; 0x80
 8003de0:	015b      	lsls	r3, r3, #5
 8003de2:	e000      	b.n	8003de6 <HAL_ADC_Init+0x11a>
 8003de4:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003de6:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003dec:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	da04      	bge.n	8003e00 <HAL_ADC_Init+0x134>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	085b      	lsrs	r3, r3, #1
 8003dfe:	e001      	b.n	8003e04 <HAL_ADC_Init+0x138>
 8003e00:	2380      	movs	r3, #128	; 0x80
 8003e02:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8003e04:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	212c      	movs	r1, #44	; 0x2c
 8003e0a:	5c5b      	ldrb	r3, [r3, r1]
 8003e0c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003e0e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	5c9b      	ldrb	r3, [r3, r2]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d115      	bne.n	8003e4c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	7e9b      	ldrb	r3, [r3, #26]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d105      	bne.n	8003e34 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	2280      	movs	r2, #128	; 0x80
 8003e2c:	0252      	lsls	r2, r2, #9
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	e00b      	b.n	8003e4c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e38:	2220      	movs	r2, #32
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e44:	2201      	movs	r2, #1
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e58:	23e0      	movs	r3, #224	; 0xe0
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003e62:	4313      	orrs	r3, r2
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	4a65      	ldr	r2, [pc, #404]	; (8004008 <HAL_ADC_Init+0x33c>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	0019      	movs	r1, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	0f9b      	lsrs	r3, r3, #30
 8003e86:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	223c      	movs	r2, #60	; 0x3c
 8003e98:	5c9b      	ldrb	r3, [r3, r2]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d111      	bne.n	8003ec2 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	0f9b      	lsrs	r3, r3, #30
 8003ea4:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003eaa:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003eb0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003eb6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	4a50      	ldr	r2, [pc, #320]	; (800400c <HAL_ADC_Init+0x340>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	0019      	movs	r1, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	23c0      	movs	r3, #192	; 0xc0
 8003ede:	061b      	lsls	r3, r3, #24
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d018      	beq.n	8003f16 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003ee8:	2380      	movs	r3, #128	; 0x80
 8003eea:	05db      	lsls	r3, r3, #23
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d012      	beq.n	8003f16 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003ef4:	2380      	movs	r3, #128	; 0x80
 8003ef6:	061b      	lsls	r3, r3, #24
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d00c      	beq.n	8003f16 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003efc:	4b44      	ldr	r3, [pc, #272]	; (8004010 <HAL_ADC_Init+0x344>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a44      	ldr	r2, [pc, #272]	; (8004014 <HAL_ADC_Init+0x348>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	0019      	movs	r1, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	23f0      	movs	r3, #240	; 0xf0
 8003f0c:	039b      	lsls	r3, r3, #14
 8003f0e:	401a      	ands	r2, r3
 8003f10:	4b3f      	ldr	r3, [pc, #252]	; (8004010 <HAL_ADC_Init+0x344>)
 8003f12:	430a      	orrs	r2, r1
 8003f14:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1e:	001a      	movs	r2, r3
 8003f20:	2100      	movs	r1, #0
 8003f22:	f7ff fd9c 	bl	8003a5e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2e:	493a      	ldr	r1, [pc, #232]	; (8004018 <HAL_ADC_Init+0x34c>)
 8003f30:	001a      	movs	r2, r3
 8003f32:	f7ff fd94 	bl	8003a5e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2110      	movs	r1, #16
 8003f4a:	4249      	negs	r1, r1
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f50:	e018      	b.n	8003f84 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691a      	ldr	r2, [r3, #16]
 8003f56:	2380      	movs	r3, #128	; 0x80
 8003f58:	039b      	lsls	r3, r3, #14
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d112      	bne.n	8003f84 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	221c      	movs	r2, #28
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2210      	movs	r2, #16
 8003f72:	4252      	negs	r2, r2
 8003f74:	409a      	lsls	r2, r3
 8003f76:	0011      	movs	r1, r2
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2100      	movs	r1, #0
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f7ff fd84 	bl	8003a98 <LL_ADC_GetSamplingTimeCommonChannels>
 8003f90:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d10b      	bne.n	8003fb2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa4:	2203      	movs	r2, #3
 8003fa6:	4393      	bics	r3, r2
 8003fa8:	2201      	movs	r2, #1
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003fb0:	e01c      	b.n	8003fec <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb6:	2212      	movs	r2, #18
 8003fb8:	4393      	bics	r3, r2
 8003fba:	2210      	movs	r2, #16
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003fce:	231f      	movs	r3, #31
 8003fd0:	18fb      	adds	r3, r7, r3
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003fd6:	e009      	b.n	8003fec <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fdc:	2210      	movs	r2, #16
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003fe4:	231f      	movs	r3, #31
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	2201      	movs	r2, #1
 8003fea:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003fec:	231f      	movs	r3, #31
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	781b      	ldrb	r3, [r3, #0]
}
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b008      	add	sp, #32
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	20000000 	.word	0x20000000
 8004000:	00030d40 	.word	0x00030d40
 8004004:	fffffefd 	.word	0xfffffefd
 8004008:	fffe0201 	.word	0xfffe0201
 800400c:	1ffffc02 	.word	0x1ffffc02
 8004010:	40012708 	.word	0x40012708
 8004014:	ffc3ffff 	.word	0xffc3ffff
 8004018:	07ffff04 	.word	0x07ffff04

0800401c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800401c:	b5b0      	push	{r4, r5, r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	0018      	movs	r0, r3
 800402e:	f7ff fe3b 	bl	8003ca8 <LL_ADC_REG_IsConversionOngoing>
 8004032:	1e03      	subs	r3, r0, #0
 8004034:	d16c      	bne.n	8004110 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2254      	movs	r2, #84	; 0x54
 800403a:	5c9b      	ldrb	r3, [r3, r2]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_ADC_Start_DMA+0x28>
 8004040:	2302      	movs	r3, #2
 8004042:	e06c      	b.n	800411e <HAL_ADC_Start_DMA+0x102>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2254      	movs	r2, #84	; 0x54
 8004048:	2101      	movs	r1, #1
 800404a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	2201      	movs	r2, #1
 8004054:	4013      	ands	r3, r2
 8004056:	d113      	bne.n	8004080 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	0018      	movs	r0, r3
 800405e:	f7ff fdef 	bl	8003c40 <LL_ADC_IsEnabled>
 8004062:	1e03      	subs	r3, r0, #0
 8004064:	d004      	beq.n	8004070 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	0018      	movs	r0, r3
 800406c:	f7ff fdd6 	bl	8003c1c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2101      	movs	r1, #1
 800407c:	430a      	orrs	r2, r1
 800407e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004080:	2517      	movs	r5, #23
 8004082:	197c      	adds	r4, r7, r5
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	0018      	movs	r0, r3
 8004088:	f000 fa3e 	bl	8004508 <ADC_Enable>
 800408c:	0003      	movs	r3, r0
 800408e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004090:	002c      	movs	r4, r5
 8004092:	193b      	adds	r3, r7, r4
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d13e      	bne.n	8004118 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409e:	4a22      	ldr	r2, [pc, #136]	; (8004128 <HAL_ADC_Start_DMA+0x10c>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	2280      	movs	r2, #128	; 0x80
 80040a4:	0052      	lsls	r2, r2, #1
 80040a6:	431a      	orrs	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b6:	4a1d      	ldr	r2, [pc, #116]	; (800412c <HAL_ADC_Start_DMA+0x110>)
 80040b8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040be:	4a1c      	ldr	r2, [pc, #112]	; (8004130 <HAL_ADC_Start_DMA+0x114>)
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c6:	4a1b      	ldr	r2, [pc, #108]	; (8004134 <HAL_ADC_Start_DMA+0x118>)
 80040c8:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	221c      	movs	r2, #28
 80040d0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2254      	movs	r2, #84	; 0x54
 80040d6:	2100      	movs	r1, #0
 80040d8:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2110      	movs	r1, #16
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3340      	adds	r3, #64	; 0x40
 80040f4:	0019      	movs	r1, r3
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	193c      	adds	r4, r7, r4
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f000 fe34 	bl	8004d68 <HAL_DMA_Start_IT>
 8004100:	0003      	movs	r3, r0
 8004102:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	0018      	movs	r0, r3
 800410a:	f7ff fdbb 	bl	8003c84 <LL_ADC_REG_StartConversion>
 800410e:	e003      	b.n	8004118 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004110:	2317      	movs	r3, #23
 8004112:	18fb      	adds	r3, r7, r3
 8004114:	2202      	movs	r2, #2
 8004116:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004118:	2317      	movs	r3, #23
 800411a:	18fb      	adds	r3, r7, r3
 800411c:	781b      	ldrb	r3, [r3, #0]
}
 800411e:	0018      	movs	r0, r3
 8004120:	46bd      	mov	sp, r7
 8004122:	b006      	add	sp, #24
 8004124:	bdb0      	pop	{r4, r5, r7, pc}
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	fffff0fe 	.word	0xfffff0fe
 800412c:	080046d1 	.word	0x080046d1
 8004130:	08004799 	.word	0x08004799
 8004134:	080047b7 	.word	0x080047b7

08004138 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004140:	46c0      	nop			; (mov r8, r8)
 8004142:	46bd      	mov	sp, r7
 8004144:	b002      	add	sp, #8
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004150:	46c0      	nop			; (mov r8, r8)
 8004152:	46bd      	mov	sp, r7
 8004154:	b002      	add	sp, #8
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004162:	2317      	movs	r3, #23
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	2200      	movs	r2, #0
 8004168:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2254      	movs	r2, #84	; 0x54
 8004172:	5c9b      	ldrb	r3, [r3, r2]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_ADC_ConfigChannel+0x24>
 8004178:	2302      	movs	r3, #2
 800417a:	e1c0      	b.n	80044fe <HAL_ADC_ConfigChannel+0x3a6>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2254      	movs	r2, #84	; 0x54
 8004180:	2101      	movs	r1, #1
 8004182:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	0018      	movs	r0, r3
 800418a:	f7ff fd8d 	bl	8003ca8 <LL_ADC_REG_IsConversionOngoing>
 800418e:	1e03      	subs	r3, r0, #0
 8004190:	d000      	beq.n	8004194 <HAL_ADC_ConfigChannel+0x3c>
 8004192:	e1a3      	b.n	80044dc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2b02      	cmp	r3, #2
 800419a:	d100      	bne.n	800419e <HAL_ADC_ConfigChannel+0x46>
 800419c:	e143      	b.n	8004426 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	2380      	movs	r3, #128	; 0x80
 80041a4:	061b      	lsls	r3, r3, #24
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d004      	beq.n	80041b4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80041ae:	4ac1      	ldr	r2, [pc, #772]	; (80044b4 <HAL_ADC_ConfigChannel+0x35c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d108      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	0019      	movs	r1, r3
 80041be:	0010      	movs	r0, r2
 80041c0:	f7ff fcb2 	bl	8003b28 <LL_ADC_REG_SetSequencerChAdd>
 80041c4:	e0c9      	b.n	800435a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	211f      	movs	r1, #31
 80041d0:	400b      	ands	r3, r1
 80041d2:	210f      	movs	r1, #15
 80041d4:	4099      	lsls	r1, r3
 80041d6:	000b      	movs	r3, r1
 80041d8:	43db      	mvns	r3, r3
 80041da:	4013      	ands	r3, r2
 80041dc:	0019      	movs	r1, r3
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	035b      	lsls	r3, r3, #13
 80041e4:	0b5b      	lsrs	r3, r3, #13
 80041e6:	d105      	bne.n	80041f4 <HAL_ADC_ConfigChannel+0x9c>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	0e9b      	lsrs	r3, r3, #26
 80041ee:	221f      	movs	r2, #31
 80041f0:	4013      	ands	r3, r2
 80041f2:	e098      	b.n	8004326 <HAL_ADC_ConfigChannel+0x1ce>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2201      	movs	r2, #1
 80041fa:	4013      	ands	r3, r2
 80041fc:	d000      	beq.n	8004200 <HAL_ADC_ConfigChannel+0xa8>
 80041fe:	e091      	b.n	8004324 <HAL_ADC_ConfigChannel+0x1cc>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2202      	movs	r2, #2
 8004206:	4013      	ands	r3, r2
 8004208:	d000      	beq.n	800420c <HAL_ADC_ConfigChannel+0xb4>
 800420a:	e089      	b.n	8004320 <HAL_ADC_ConfigChannel+0x1c8>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2204      	movs	r2, #4
 8004212:	4013      	ands	r3, r2
 8004214:	d000      	beq.n	8004218 <HAL_ADC_ConfigChannel+0xc0>
 8004216:	e081      	b.n	800431c <HAL_ADC_ConfigChannel+0x1c4>
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2208      	movs	r2, #8
 800421e:	4013      	ands	r3, r2
 8004220:	d000      	beq.n	8004224 <HAL_ADC_ConfigChannel+0xcc>
 8004222:	e079      	b.n	8004318 <HAL_ADC_ConfigChannel+0x1c0>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2210      	movs	r2, #16
 800422a:	4013      	ands	r3, r2
 800422c:	d000      	beq.n	8004230 <HAL_ADC_ConfigChannel+0xd8>
 800422e:	e071      	b.n	8004314 <HAL_ADC_ConfigChannel+0x1bc>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2220      	movs	r2, #32
 8004236:	4013      	ands	r3, r2
 8004238:	d000      	beq.n	800423c <HAL_ADC_ConfigChannel+0xe4>
 800423a:	e069      	b.n	8004310 <HAL_ADC_ConfigChannel+0x1b8>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2240      	movs	r2, #64	; 0x40
 8004242:	4013      	ands	r3, r2
 8004244:	d000      	beq.n	8004248 <HAL_ADC_ConfigChannel+0xf0>
 8004246:	e061      	b.n	800430c <HAL_ADC_ConfigChannel+0x1b4>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2280      	movs	r2, #128	; 0x80
 800424e:	4013      	ands	r3, r2
 8004250:	d000      	beq.n	8004254 <HAL_ADC_ConfigChannel+0xfc>
 8004252:	e059      	b.n	8004308 <HAL_ADC_ConfigChannel+0x1b0>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	2380      	movs	r3, #128	; 0x80
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	4013      	ands	r3, r2
 800425e:	d151      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x1ac>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	2380      	movs	r3, #128	; 0x80
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4013      	ands	r3, r2
 800426a:	d149      	bne.n	8004300 <HAL_ADC_ConfigChannel+0x1a8>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	2380      	movs	r3, #128	; 0x80
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	4013      	ands	r3, r2
 8004276:	d141      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x1a4>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	2380      	movs	r3, #128	; 0x80
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	4013      	ands	r3, r2
 8004282:	d139      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x1a0>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	2380      	movs	r3, #128	; 0x80
 800428a:	015b      	lsls	r3, r3, #5
 800428c:	4013      	ands	r3, r2
 800428e:	d131      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x19c>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	2380      	movs	r3, #128	; 0x80
 8004296:	019b      	lsls	r3, r3, #6
 8004298:	4013      	ands	r3, r2
 800429a:	d129      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x198>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	01db      	lsls	r3, r3, #7
 80042a4:	4013      	ands	r3, r2
 80042a6:	d121      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x194>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	2380      	movs	r3, #128	; 0x80
 80042ae:	021b      	lsls	r3, r3, #8
 80042b0:	4013      	ands	r3, r2
 80042b2:	d119      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x190>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	025b      	lsls	r3, r3, #9
 80042bc:	4013      	ands	r3, r2
 80042be:	d111      	bne.n	80042e4 <HAL_ADC_ConfigChannel+0x18c>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	2380      	movs	r3, #128	; 0x80
 80042c6:	029b      	lsls	r3, r3, #10
 80042c8:	4013      	ands	r3, r2
 80042ca:	d109      	bne.n	80042e0 <HAL_ADC_ConfigChannel+0x188>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	2380      	movs	r3, #128	; 0x80
 80042d2:	02db      	lsls	r3, r3, #11
 80042d4:	4013      	ands	r3, r2
 80042d6:	d001      	beq.n	80042dc <HAL_ADC_ConfigChannel+0x184>
 80042d8:	2312      	movs	r3, #18
 80042da:	e024      	b.n	8004326 <HAL_ADC_ConfigChannel+0x1ce>
 80042dc:	2300      	movs	r3, #0
 80042de:	e022      	b.n	8004326 <HAL_ADC_ConfigChannel+0x1ce>
 80042e0:	2311      	movs	r3, #17
 80042e2:	e020      	b.n	8004326 <HAL_ADC_ConfigChannel+0x1ce>
 80042e4:	2310      	movs	r3, #16
 80042e6:	e01e      	b.n	8004326 <HAL_ADC_ConfigChannel+0x1ce>
 80042e8:	230f      	movs	r3, #15
 80042ea:	e01c      	b.n	8004326 <HAL_ADC_ConfigChannel+0x1ce>
 80042ec:	230e      	movs	r3, #14
 80042ee:	e01a      	b.n	8004326 <HAL_ADC_ConfigChannel+0x1ce>
 80042f0:	230d      	movs	r3, #13
 80042f2:	e018      	b.n	8004326 <HAL_ADC_ConfigChannel+0x1ce>
 80042f4:	230c      	movs	r3, #12
 80042f6:	e016      	b.n	8004326 <HAL_ADC_ConfigChannel+0x1ce>
 80042f8:	230b      	movs	r3, #11
 80042fa:	e014      	b.n	8004326 <HAL_ADC_ConfigChannel+0x1ce>
 80042fc:	230a      	movs	r3, #10
 80042fe:	e012      	b.n	8004326 <HAL_ADC_ConfigChannel+0x1ce>
 8004300:	2309      	movs	r3, #9
 8004302:	e010      	b.n	8004326 <HAL_ADC_ConfigChannel+0x1ce>
 8004304:	2308      	movs	r3, #8
 8004306:	e00e      	b.n	8004326 <HAL_ADC_ConfigChannel+0x1ce>
 8004308:	2307      	movs	r3, #7
 800430a:	e00c      	b.n	8004326 <HAL_ADC_ConfigChannel+0x1ce>
 800430c:	2306      	movs	r3, #6
 800430e:	e00a      	b.n	8004326 <HAL_ADC_ConfigChannel+0x1ce>
 8004310:	2305      	movs	r3, #5
 8004312:	e008      	b.n	8004326 <HAL_ADC_ConfigChannel+0x1ce>
 8004314:	2304      	movs	r3, #4
 8004316:	e006      	b.n	8004326 <HAL_ADC_ConfigChannel+0x1ce>
 8004318:	2303      	movs	r3, #3
 800431a:	e004      	b.n	8004326 <HAL_ADC_ConfigChannel+0x1ce>
 800431c:	2302      	movs	r3, #2
 800431e:	e002      	b.n	8004326 <HAL_ADC_ConfigChannel+0x1ce>
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <HAL_ADC_ConfigChannel+0x1ce>
 8004324:	2300      	movs	r3, #0
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	6852      	ldr	r2, [r2, #4]
 800432a:	201f      	movs	r0, #31
 800432c:	4002      	ands	r2, r0
 800432e:	4093      	lsls	r3, r2
 8004330:	000a      	movs	r2, r1
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	089b      	lsrs	r3, r3, #2
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	429a      	cmp	r2, r3
 8004346:	d808      	bhi.n	800435a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	6859      	ldr	r1, [r3, #4]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	001a      	movs	r2, r3
 8004356:	f7ff fbc7 	bl	8003ae8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6819      	ldr	r1, [r3, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	001a      	movs	r2, r3
 8004368:	f7ff fc02 	bl	8003b70 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	db00      	blt.n	8004376 <HAL_ADC_ConfigChannel+0x21e>
 8004374:	e0bc      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004376:	4b50      	ldr	r3, [pc, #320]	; (80044b8 <HAL_ADC_ConfigChannel+0x360>)
 8004378:	0018      	movs	r0, r3
 800437a:	f7ff fb63 	bl	8003a44 <LL_ADC_GetCommonPathInternalCh>
 800437e:	0003      	movs	r3, r0
 8004380:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a4d      	ldr	r2, [pc, #308]	; (80044bc <HAL_ADC_ConfigChannel+0x364>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d122      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	2380      	movs	r3, #128	; 0x80
 8004390:	041b      	lsls	r3, r3, #16
 8004392:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004394:	d11d      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	2280      	movs	r2, #128	; 0x80
 800439a:	0412      	lsls	r2, r2, #16
 800439c:	4313      	orrs	r3, r2
 800439e:	4a46      	ldr	r2, [pc, #280]	; (80044b8 <HAL_ADC_ConfigChannel+0x360>)
 80043a0:	0019      	movs	r1, r3
 80043a2:	0010      	movs	r0, r2
 80043a4:	f7ff fb3a 	bl	8003a1c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043a8:	4b45      	ldr	r3, [pc, #276]	; (80044c0 <HAL_ADC_ConfigChannel+0x368>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4945      	ldr	r1, [pc, #276]	; (80044c4 <HAL_ADC_ConfigChannel+0x36c>)
 80043ae:	0018      	movs	r0, r3
 80043b0:	f7fb feae 	bl	8000110 <__udivsi3>
 80043b4:	0003      	movs	r3, r0
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	0013      	movs	r3, r2
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	189b      	adds	r3, r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80043c2:	e002      	b.n	80043ca <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1f9      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80043d0:	e08e      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a3c      	ldr	r2, [pc, #240]	; (80044c8 <HAL_ADC_ConfigChannel+0x370>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d10e      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	2380      	movs	r3, #128	; 0x80
 80043e0:	045b      	lsls	r3, r3, #17
 80043e2:	4013      	ands	r3, r2
 80043e4:	d109      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	2280      	movs	r2, #128	; 0x80
 80043ea:	0452      	lsls	r2, r2, #17
 80043ec:	4313      	orrs	r3, r2
 80043ee:	4a32      	ldr	r2, [pc, #200]	; (80044b8 <HAL_ADC_ConfigChannel+0x360>)
 80043f0:	0019      	movs	r1, r3
 80043f2:	0010      	movs	r0, r2
 80043f4:	f7ff fb12 	bl	8003a1c <LL_ADC_SetCommonPathInternalCh>
 80043f8:	e07a      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a33      	ldr	r2, [pc, #204]	; (80044cc <HAL_ADC_ConfigChannel+0x374>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d000      	beq.n	8004406 <HAL_ADC_ConfigChannel+0x2ae>
 8004404:	e074      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	2380      	movs	r3, #128	; 0x80
 800440a:	03db      	lsls	r3, r3, #15
 800440c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800440e:	d000      	beq.n	8004412 <HAL_ADC_ConfigChannel+0x2ba>
 8004410:	e06e      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2280      	movs	r2, #128	; 0x80
 8004416:	03d2      	lsls	r2, r2, #15
 8004418:	4313      	orrs	r3, r2
 800441a:	4a27      	ldr	r2, [pc, #156]	; (80044b8 <HAL_ADC_ConfigChannel+0x360>)
 800441c:	0019      	movs	r1, r3
 800441e:	0010      	movs	r0, r2
 8004420:	f7ff fafc 	bl	8003a1c <LL_ADC_SetCommonPathInternalCh>
 8004424:	e064      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	2380      	movs	r3, #128	; 0x80
 800442c:	061b      	lsls	r3, r3, #24
 800442e:	429a      	cmp	r2, r3
 8004430:	d004      	beq.n	800443c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004436:	4a1f      	ldr	r2, [pc, #124]	; (80044b4 <HAL_ADC_ConfigChannel+0x35c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d107      	bne.n	800444c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	0019      	movs	r1, r3
 8004446:	0010      	movs	r0, r2
 8004448:	f7ff fb7f 	bl	8003b4a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	da4d      	bge.n	80044f0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004454:	4b18      	ldr	r3, [pc, #96]	; (80044b8 <HAL_ADC_ConfigChannel+0x360>)
 8004456:	0018      	movs	r0, r3
 8004458:	f7ff faf4 	bl	8003a44 <LL_ADC_GetCommonPathInternalCh>
 800445c:	0003      	movs	r3, r0
 800445e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a15      	ldr	r2, [pc, #84]	; (80044bc <HAL_ADC_ConfigChannel+0x364>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d108      	bne.n	800447c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4a18      	ldr	r2, [pc, #96]	; (80044d0 <HAL_ADC_ConfigChannel+0x378>)
 800446e:	4013      	ands	r3, r2
 8004470:	4a11      	ldr	r2, [pc, #68]	; (80044b8 <HAL_ADC_ConfigChannel+0x360>)
 8004472:	0019      	movs	r1, r3
 8004474:	0010      	movs	r0, r2
 8004476:	f7ff fad1 	bl	8003a1c <LL_ADC_SetCommonPathInternalCh>
 800447a:	e039      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a11      	ldr	r2, [pc, #68]	; (80044c8 <HAL_ADC_ConfigChannel+0x370>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d108      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4a12      	ldr	r2, [pc, #72]	; (80044d4 <HAL_ADC_ConfigChannel+0x37c>)
 800448a:	4013      	ands	r3, r2
 800448c:	4a0a      	ldr	r2, [pc, #40]	; (80044b8 <HAL_ADC_ConfigChannel+0x360>)
 800448e:	0019      	movs	r1, r3
 8004490:	0010      	movs	r0, r2
 8004492:	f7ff fac3 	bl	8003a1c <LL_ADC_SetCommonPathInternalCh>
 8004496:	e02b      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a0b      	ldr	r2, [pc, #44]	; (80044cc <HAL_ADC_ConfigChannel+0x374>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d126      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4a0c      	ldr	r2, [pc, #48]	; (80044d8 <HAL_ADC_ConfigChannel+0x380>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	4a03      	ldr	r2, [pc, #12]	; (80044b8 <HAL_ADC_ConfigChannel+0x360>)
 80044aa:	0019      	movs	r1, r3
 80044ac:	0010      	movs	r0, r2
 80044ae:	f7ff fab5 	bl	8003a1c <LL_ADC_SetCommonPathInternalCh>
 80044b2:	e01d      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x398>
 80044b4:	80000004 	.word	0x80000004
 80044b8:	40012708 	.word	0x40012708
 80044bc:	b0001000 	.word	0xb0001000
 80044c0:	20000000 	.word	0x20000000
 80044c4:	00030d40 	.word	0x00030d40
 80044c8:	b8004000 	.word	0xb8004000
 80044cc:	b4002000 	.word	0xb4002000
 80044d0:	ff7fffff 	.word	0xff7fffff
 80044d4:	feffffff 	.word	0xfeffffff
 80044d8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e0:	2220      	movs	r2, #32
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80044e8:	2317      	movs	r3, #23
 80044ea:	18fb      	adds	r3, r7, r3
 80044ec:	2201      	movs	r2, #1
 80044ee:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2254      	movs	r2, #84	; 0x54
 80044f4:	2100      	movs	r1, #0
 80044f6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80044f8:	2317      	movs	r3, #23
 80044fa:	18fb      	adds	r3, r7, r3
 80044fc:	781b      	ldrb	r3, [r3, #0]
}
 80044fe:	0018      	movs	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	b006      	add	sp, #24
 8004504:	bd80      	pop	{r7, pc}
 8004506:	46c0      	nop			; (mov r8, r8)

08004508 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004510:	2300      	movs	r3, #0
 8004512:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	0018      	movs	r0, r3
 800451a:	f7ff fb91 	bl	8003c40 <LL_ADC_IsEnabled>
 800451e:	1e03      	subs	r3, r0, #0
 8004520:	d000      	beq.n	8004524 <ADC_Enable+0x1c>
 8004522:	e069      	b.n	80045f8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	4a36      	ldr	r2, [pc, #216]	; (8004604 <ADC_Enable+0xfc>)
 800452c:	4013      	ands	r3, r2
 800452e:	d00d      	beq.n	800454c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004534:	2210      	movs	r2, #16
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004540:	2201      	movs	r2, #1
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e056      	b.n	80045fa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	0018      	movs	r0, r3
 8004552:	f7ff fb51 	bl	8003bf8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004556:	4b2c      	ldr	r3, [pc, #176]	; (8004608 <ADC_Enable+0x100>)
 8004558:	0018      	movs	r0, r3
 800455a:	f7ff fa73 	bl	8003a44 <LL_ADC_GetCommonPathInternalCh>
 800455e:	0002      	movs	r2, r0
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	041b      	lsls	r3, r3, #16
 8004564:	4013      	ands	r3, r2
 8004566:	d00f      	beq.n	8004588 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004568:	4b28      	ldr	r3, [pc, #160]	; (800460c <ADC_Enable+0x104>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4928      	ldr	r1, [pc, #160]	; (8004610 <ADC_Enable+0x108>)
 800456e:	0018      	movs	r0, r3
 8004570:	f7fb fdce 	bl	8000110 <__udivsi3>
 8004574:	0003      	movs	r3, r0
 8004576:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004578:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800457a:	e002      	b.n	8004582 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	3b01      	subs	r3, #1
 8004580:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1f9      	bne.n	800457c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	7e5b      	ldrb	r3, [r3, #25]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d033      	beq.n	80045f8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004590:	f7ff fa16 	bl	80039c0 <HAL_GetTick>
 8004594:	0003      	movs	r3, r0
 8004596:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004598:	e027      	b.n	80045ea <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	0018      	movs	r0, r3
 80045a0:	f7ff fb4e 	bl	8003c40 <LL_ADC_IsEnabled>
 80045a4:	1e03      	subs	r3, r0, #0
 80045a6:	d104      	bne.n	80045b2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	0018      	movs	r0, r3
 80045ae:	f7ff fb23 	bl	8003bf8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80045b2:	f7ff fa05 	bl	80039c0 <HAL_GetTick>
 80045b6:	0002      	movs	r2, r0
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d914      	bls.n	80045ea <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2201      	movs	r2, #1
 80045c8:	4013      	ands	r3, r2
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d00d      	beq.n	80045ea <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d2:	2210      	movs	r2, #16
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045de:	2201      	movs	r2, #1
 80045e0:	431a      	orrs	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e007      	b.n	80045fa <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2201      	movs	r2, #1
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d1d0      	bne.n	800459a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	0018      	movs	r0, r3
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b004      	add	sp, #16
 8004600:	bd80      	pop	{r7, pc}
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	80000017 	.word	0x80000017
 8004608:	40012708 	.word	0x40012708
 800460c:	20000000 	.word	0x20000000
 8004610:	00030d40 	.word	0x00030d40

08004614 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	0018      	movs	r0, r3
 8004622:	f7ff fb1e 	bl	8003c62 <LL_ADC_IsDisableOngoing>
 8004626:	0003      	movs	r3, r0
 8004628:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	0018      	movs	r0, r3
 8004630:	f7ff fb06 	bl	8003c40 <LL_ADC_IsEnabled>
 8004634:	1e03      	subs	r3, r0, #0
 8004636:	d046      	beq.n	80046c6 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d143      	bne.n	80046c6 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	2205      	movs	r2, #5
 8004646:	4013      	ands	r3, r2
 8004648:	2b01      	cmp	r3, #1
 800464a:	d10d      	bne.n	8004668 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	0018      	movs	r0, r3
 8004652:	f7ff fae3 	bl	8003c1c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2203      	movs	r2, #3
 800465c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800465e:	f7ff f9af 	bl	80039c0 <HAL_GetTick>
 8004662:	0003      	movs	r3, r0
 8004664:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004666:	e028      	b.n	80046ba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466c:	2210      	movs	r2, #16
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004678:	2201      	movs	r2, #1
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e021      	b.n	80046c8 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004684:	f7ff f99c 	bl	80039c0 <HAL_GetTick>
 8004688:	0002      	movs	r2, r0
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d913      	bls.n	80046ba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2201      	movs	r2, #1
 800469a:	4013      	ands	r3, r2
 800469c:	d00d      	beq.n	80046ba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a2:	2210      	movs	r2, #16
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ae:	2201      	movs	r2, #1
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e006      	b.n	80046c8 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2201      	movs	r2, #1
 80046c2:	4013      	ands	r3, r2
 80046c4:	d1de      	bne.n	8004684 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	0018      	movs	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b004      	add	sp, #16
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e2:	2250      	movs	r2, #80	; 0x50
 80046e4:	4013      	ands	r3, r2
 80046e6:	d141      	bne.n	800476c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ec:	2280      	movs	r2, #128	; 0x80
 80046ee:	0092      	lsls	r2, r2, #2
 80046f0:	431a      	orrs	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	0018      	movs	r0, r3
 80046fc:	f7ff f9e3 	bl	8003ac6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004700:	1e03      	subs	r3, r0, #0
 8004702:	d02e      	beq.n	8004762 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	7e9b      	ldrb	r3, [r3, #26]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d12a      	bne.n	8004762 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2208      	movs	r2, #8
 8004714:	4013      	ands	r3, r2
 8004716:	2b08      	cmp	r3, #8
 8004718:	d123      	bne.n	8004762 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	0018      	movs	r0, r3
 8004720:	f7ff fac2 	bl	8003ca8 <LL_ADC_REG_IsConversionOngoing>
 8004724:	1e03      	subs	r3, r0, #0
 8004726:	d110      	bne.n	800474a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	210c      	movs	r1, #12
 8004734:	438a      	bics	r2, r1
 8004736:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473c:	4a15      	ldr	r2, [pc, #84]	; (8004794 <ADC_DMAConvCplt+0xc4>)
 800473e:	4013      	ands	r3, r2
 8004740:	2201      	movs	r2, #1
 8004742:	431a      	orrs	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	659a      	str	r2, [r3, #88]	; 0x58
 8004748:	e00b      	b.n	8004762 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	2220      	movs	r2, #32
 8004750:	431a      	orrs	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475a:	2201      	movs	r2, #1
 800475c:	431a      	orrs	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	0018      	movs	r0, r3
 8004766:	f7fe f96f 	bl	8002a48 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800476a:	e00f      	b.n	800478c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004770:	2210      	movs	r2, #16
 8004772:	4013      	ands	r3, r2
 8004774:	d004      	beq.n	8004780 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	0018      	movs	r0, r3
 800477a:	f7ff fce5 	bl	8004148 <HAL_ADC_ErrorCallback>
}
 800477e:	e005      	b.n	800478c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	0010      	movs	r0, r2
 800478a:	4798      	blx	r3
}
 800478c:	46c0      	nop			; (mov r8, r8)
 800478e:	46bd      	mov	sp, r7
 8004790:	b004      	add	sp, #16
 8004792:	bd80      	pop	{r7, pc}
 8004794:	fffffefe 	.word	0xfffffefe

08004798 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	0018      	movs	r0, r3
 80047aa:	f7ff fcc5 	bl	8004138 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	46bd      	mov	sp, r7
 80047b2:	b004      	add	sp, #16
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b084      	sub	sp, #16
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c8:	2240      	movs	r2, #64	; 0x40
 80047ca:	431a      	orrs	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d4:	2204      	movs	r2, #4
 80047d6:	431a      	orrs	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	0018      	movs	r0, r3
 80047e0:	f7ff fcb2 	bl	8004148 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047e4:	46c0      	nop			; (mov r8, r8)
 80047e6:	46bd      	mov	sp, r7
 80047e8:	b004      	add	sp, #16
 80047ea:	bd80      	pop	{r7, pc}

080047ec <LL_ADC_SetCalibrationFactor>:
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	22b4      	movs	r2, #180	; 0xb4
 80047fa:	589b      	ldr	r3, [r3, r2]
 80047fc:	227f      	movs	r2, #127	; 0x7f
 80047fe:	4393      	bics	r3, r2
 8004800:	001a      	movs	r2, r3
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	21b4      	movs	r1, #180	; 0xb4
 800480a:	505a      	str	r2, [r3, r1]
}
 800480c:	46c0      	nop			; (mov r8, r8)
 800480e:	46bd      	mov	sp, r7
 8004810:	b002      	add	sp, #8
 8004812:	bd80      	pop	{r7, pc}

08004814 <LL_ADC_GetCalibrationFactor>:
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	22b4      	movs	r2, #180	; 0xb4
 8004820:	589b      	ldr	r3, [r3, r2]
 8004822:	227f      	movs	r2, #127	; 0x7f
 8004824:	4013      	ands	r3, r2
}
 8004826:	0018      	movs	r0, r3
 8004828:	46bd      	mov	sp, r7
 800482a:	b002      	add	sp, #8
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <LL_ADC_Enable>:
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	4a04      	ldr	r2, [pc, #16]	; (8004850 <LL_ADC_Enable+0x20>)
 800483e:	4013      	ands	r3, r2
 8004840:	2201      	movs	r2, #1
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	609a      	str	r2, [r3, #8]
}
 8004848:	46c0      	nop			; (mov r8, r8)
 800484a:	46bd      	mov	sp, r7
 800484c:	b002      	add	sp, #8
 800484e:	bd80      	pop	{r7, pc}
 8004850:	7fffffe8 	.word	0x7fffffe8

08004854 <LL_ADC_Disable>:
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	4a04      	ldr	r2, [pc, #16]	; (8004874 <LL_ADC_Disable+0x20>)
 8004862:	4013      	ands	r3, r2
 8004864:	2202      	movs	r2, #2
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	609a      	str	r2, [r3, #8]
}
 800486c:	46c0      	nop			; (mov r8, r8)
 800486e:	46bd      	mov	sp, r7
 8004870:	b002      	add	sp, #8
 8004872:	bd80      	pop	{r7, pc}
 8004874:	7fffffe8 	.word	0x7fffffe8

08004878 <LL_ADC_IsEnabled>:
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	2201      	movs	r2, #1
 8004886:	4013      	ands	r3, r2
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <LL_ADC_IsEnabled+0x18>
 800488c:	2301      	movs	r3, #1
 800488e:	e000      	b.n	8004892 <LL_ADC_IsEnabled+0x1a>
 8004890:	2300      	movs	r3, #0
}
 8004892:	0018      	movs	r0, r3
 8004894:	46bd      	mov	sp, r7
 8004896:	b002      	add	sp, #8
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <LL_ADC_StartCalibration>:
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	4a05      	ldr	r2, [pc, #20]	; (80048c0 <LL_ADC_StartCalibration+0x24>)
 80048aa:	4013      	ands	r3, r2
 80048ac:	2280      	movs	r2, #128	; 0x80
 80048ae:	0612      	lsls	r2, r2, #24
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	609a      	str	r2, [r3, #8]
}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b002      	add	sp, #8
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	7fffffe8 	.word	0x7fffffe8

080048c4 <LL_ADC_IsCalibrationOnGoing>:
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	0fdb      	lsrs	r3, r3, #31
 80048d2:	07da      	lsls	r2, r3, #31
 80048d4:	2380      	movs	r3, #128	; 0x80
 80048d6:	061b      	lsls	r3, r3, #24
 80048d8:	429a      	cmp	r2, r3
 80048da:	d101      	bne.n	80048e0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80048dc:	2301      	movs	r3, #1
 80048de:	e000      	b.n	80048e2 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	0018      	movs	r0, r3
 80048e4:	46bd      	mov	sp, r7
 80048e6:	b002      	add	sp, #8
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80048ec:	b590      	push	{r4, r7, lr}
 80048ee:	b089      	sub	sp, #36	; 0x24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80048f4:	2300      	movs	r3, #0
 80048f6:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2254      	movs	r2, #84	; 0x54
 8004900:	5c9b      	ldrb	r3, [r3, r2]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d101      	bne.n	800490a <HAL_ADCEx_Calibration_Start+0x1e>
 8004906:	2302      	movs	r3, #2
 8004908:	e0ba      	b.n	8004a80 <HAL_ADCEx_Calibration_Start+0x194>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2254      	movs	r2, #84	; 0x54
 800490e:	2101      	movs	r1, #1
 8004910:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004912:	2317      	movs	r3, #23
 8004914:	18fc      	adds	r4, r7, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	0018      	movs	r0, r3
 800491a:	f7ff fe7b 	bl	8004614 <ADC_Disable>
 800491e:	0003      	movs	r3, r0
 8004920:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	0018      	movs	r0, r3
 8004928:	f7ff ffa6 	bl	8004878 <LL_ADC_IsEnabled>
 800492c:	1e03      	subs	r3, r0, #0
 800492e:	d000      	beq.n	8004932 <HAL_ADCEx_Calibration_Start+0x46>
 8004930:	e099      	b.n	8004a66 <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004936:	4a54      	ldr	r2, [pc, #336]	; (8004a88 <HAL_ADCEx_Calibration_Start+0x19c>)
 8004938:	4013      	ands	r3, r2
 800493a:	2202      	movs	r2, #2
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	4a50      	ldr	r2, [pc, #320]	; (8004a8c <HAL_ADCEx_Calibration_Start+0x1a0>)
 800494a:	4013      	ands	r3, r2
 800494c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	494d      	ldr	r1, [pc, #308]	; (8004a90 <HAL_ADCEx_Calibration_Start+0x1a4>)
 800495a:	400a      	ands	r2, r1
 800495c:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800495e:	2300      	movs	r3, #0
 8004960:	61fb      	str	r3, [r7, #28]
 8004962:	e02d      	b.n	80049c0 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	0018      	movs	r0, r3
 800496a:	f7ff ff97 	bl	800489c <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800496e:	e014      	b.n	800499a <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	3301      	adds	r3, #1
 8004974:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	4a46      	ldr	r2, [pc, #280]	; (8004a94 <HAL_ADCEx_Calibration_Start+0x1a8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d90d      	bls.n	800499a <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004982:	2212      	movs	r2, #18
 8004984:	4393      	bics	r3, r2
 8004986:	2210      	movs	r2, #16
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2254      	movs	r2, #84	; 0x54
 8004992:	2100      	movs	r1, #0
 8004994:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e072      	b.n	8004a80 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	0018      	movs	r0, r3
 80049a0:	f7ff ff90 	bl	80048c4 <LL_ADC_IsCalibrationOnGoing>
 80049a4:	1e03      	subs	r3, r0, #0
 80049a6:	d1e3      	bne.n	8004970 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	0018      	movs	r0, r3
 80049ae:	f7ff ff31 	bl	8004814 <LL_ADC_GetCalibrationFactor>
 80049b2:	0002      	movs	r2, r0
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	189b      	adds	r3, r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	3301      	adds	r3, #1
 80049be:	61fb      	str	r3, [r7, #28]
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	2b07      	cmp	r3, #7
 80049c4:	d9ce      	bls.n	8004964 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80049c6:	69f9      	ldr	r1, [r7, #28]
 80049c8:	69b8      	ldr	r0, [r7, #24]
 80049ca:	f7fb fba1 	bl	8000110 <__udivsi3>
 80049ce:	0003      	movs	r3, r0
 80049d0:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	0018      	movs	r0, r3
 80049d8:	f7ff ff2a 	bl	8004830 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	0011      	movs	r1, r2
 80049e4:	0018      	movs	r0, r3
 80049e6:	f7ff ff01 	bl	80047ec <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	0018      	movs	r0, r3
 80049f0:	f7ff ff30 	bl	8004854 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80049f4:	f7fe ffe4 	bl	80039c0 <HAL_GetTick>
 80049f8:	0003      	movs	r3, r0
 80049fa:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80049fc:	e01b      	b.n	8004a36 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80049fe:	f7fe ffdf 	bl	80039c0 <HAL_GetTick>
 8004a02:	0002      	movs	r2, r0
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d914      	bls.n	8004a36 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	0018      	movs	r0, r3
 8004a12:	f7ff ff31 	bl	8004878 <LL_ADC_IsEnabled>
 8004a16:	1e03      	subs	r3, r0, #0
 8004a18:	d00d      	beq.n	8004a36 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1e:	2210      	movs	r2, #16
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e024      	b.n	8004a80 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f7ff ff1c 	bl	8004878 <LL_ADC_IsEnabled>
 8004a40:	1e03      	subs	r3, r0, #0
 8004a42:	d1dc      	bne.n	80049fe <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68d9      	ldr	r1, [r3, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a58:	2203      	movs	r2, #3
 8004a5a:	4393      	bics	r3, r2
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	659a      	str	r2, [r3, #88]	; 0x58
 8004a64:	e005      	b.n	8004a72 <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6a:	2210      	movs	r2, #16
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2254      	movs	r2, #84	; 0x54
 8004a76:	2100      	movs	r1, #0
 8004a78:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004a7a:	2317      	movs	r3, #23
 8004a7c:	18fb      	adds	r3, r7, r3
 8004a7e:	781b      	ldrb	r3, [r3, #0]
}
 8004a80:	0018      	movs	r0, r3
 8004a82:	46bd      	mov	sp, r7
 8004a84:	b009      	add	sp, #36	; 0x24
 8004a86:	bd90      	pop	{r4, r7, pc}
 8004a88:	fffffefd 	.word	0xfffffefd
 8004a8c:	00008003 	.word	0x00008003
 8004a90:	ffff7ffc 	.word	0xffff7ffc
 8004a94:	0002f1ff 	.word	0x0002f1ff

08004a98 <__NVIC_EnableIRQ>:
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	0002      	movs	r2, r0
 8004aa0:	1dfb      	adds	r3, r7, #7
 8004aa2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004aa4:	1dfb      	adds	r3, r7, #7
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b7f      	cmp	r3, #127	; 0x7f
 8004aaa:	d809      	bhi.n	8004ac0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aac:	1dfb      	adds	r3, r7, #7
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	001a      	movs	r2, r3
 8004ab2:	231f      	movs	r3, #31
 8004ab4:	401a      	ands	r2, r3
 8004ab6:	4b04      	ldr	r3, [pc, #16]	; (8004ac8 <__NVIC_EnableIRQ+0x30>)
 8004ab8:	2101      	movs	r1, #1
 8004aba:	4091      	lsls	r1, r2
 8004abc:	000a      	movs	r2, r1
 8004abe:	601a      	str	r2, [r3, #0]
}
 8004ac0:	46c0      	nop			; (mov r8, r8)
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	b002      	add	sp, #8
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	e000e100 	.word	0xe000e100

08004acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004acc:	b590      	push	{r4, r7, lr}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	0002      	movs	r2, r0
 8004ad4:	6039      	str	r1, [r7, #0]
 8004ad6:	1dfb      	adds	r3, r7, #7
 8004ad8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004ada:	1dfb      	adds	r3, r7, #7
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b7f      	cmp	r3, #127	; 0x7f
 8004ae0:	d828      	bhi.n	8004b34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ae2:	4a2f      	ldr	r2, [pc, #188]	; (8004ba0 <__NVIC_SetPriority+0xd4>)
 8004ae4:	1dfb      	adds	r3, r7, #7
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	b25b      	sxtb	r3, r3
 8004aea:	089b      	lsrs	r3, r3, #2
 8004aec:	33c0      	adds	r3, #192	; 0xc0
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	589b      	ldr	r3, [r3, r2]
 8004af2:	1dfa      	adds	r2, r7, #7
 8004af4:	7812      	ldrb	r2, [r2, #0]
 8004af6:	0011      	movs	r1, r2
 8004af8:	2203      	movs	r2, #3
 8004afa:	400a      	ands	r2, r1
 8004afc:	00d2      	lsls	r2, r2, #3
 8004afe:	21ff      	movs	r1, #255	; 0xff
 8004b00:	4091      	lsls	r1, r2
 8004b02:	000a      	movs	r2, r1
 8004b04:	43d2      	mvns	r2, r2
 8004b06:	401a      	ands	r2, r3
 8004b08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	019b      	lsls	r3, r3, #6
 8004b0e:	22ff      	movs	r2, #255	; 0xff
 8004b10:	401a      	ands	r2, r3
 8004b12:	1dfb      	adds	r3, r7, #7
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	0018      	movs	r0, r3
 8004b18:	2303      	movs	r3, #3
 8004b1a:	4003      	ands	r3, r0
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b20:	481f      	ldr	r0, [pc, #124]	; (8004ba0 <__NVIC_SetPriority+0xd4>)
 8004b22:	1dfb      	adds	r3, r7, #7
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	b25b      	sxtb	r3, r3
 8004b28:	089b      	lsrs	r3, r3, #2
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	33c0      	adds	r3, #192	; 0xc0
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004b32:	e031      	b.n	8004b98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b34:	4a1b      	ldr	r2, [pc, #108]	; (8004ba4 <__NVIC_SetPriority+0xd8>)
 8004b36:	1dfb      	adds	r3, r7, #7
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	0019      	movs	r1, r3
 8004b3c:	230f      	movs	r3, #15
 8004b3e:	400b      	ands	r3, r1
 8004b40:	3b08      	subs	r3, #8
 8004b42:	089b      	lsrs	r3, r3, #2
 8004b44:	3306      	adds	r3, #6
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	18d3      	adds	r3, r2, r3
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	1dfa      	adds	r2, r7, #7
 8004b50:	7812      	ldrb	r2, [r2, #0]
 8004b52:	0011      	movs	r1, r2
 8004b54:	2203      	movs	r2, #3
 8004b56:	400a      	ands	r2, r1
 8004b58:	00d2      	lsls	r2, r2, #3
 8004b5a:	21ff      	movs	r1, #255	; 0xff
 8004b5c:	4091      	lsls	r1, r2
 8004b5e:	000a      	movs	r2, r1
 8004b60:	43d2      	mvns	r2, r2
 8004b62:	401a      	ands	r2, r3
 8004b64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	019b      	lsls	r3, r3, #6
 8004b6a:	22ff      	movs	r2, #255	; 0xff
 8004b6c:	401a      	ands	r2, r3
 8004b6e:	1dfb      	adds	r3, r7, #7
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	0018      	movs	r0, r3
 8004b74:	2303      	movs	r3, #3
 8004b76:	4003      	ands	r3, r0
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b7c:	4809      	ldr	r0, [pc, #36]	; (8004ba4 <__NVIC_SetPriority+0xd8>)
 8004b7e:	1dfb      	adds	r3, r7, #7
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	001c      	movs	r4, r3
 8004b84:	230f      	movs	r3, #15
 8004b86:	4023      	ands	r3, r4
 8004b88:	3b08      	subs	r3, #8
 8004b8a:	089b      	lsrs	r3, r3, #2
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	3306      	adds	r3, #6
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	18c3      	adds	r3, r0, r3
 8004b94:	3304      	adds	r3, #4
 8004b96:	601a      	str	r2, [r3, #0]
}
 8004b98:	46c0      	nop			; (mov r8, r8)
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b003      	add	sp, #12
 8004b9e:	bd90      	pop	{r4, r7, pc}
 8004ba0:	e000e100 	.word	0xe000e100
 8004ba4:	e000ed00 	.word	0xe000ed00

08004ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	1e5a      	subs	r2, r3, #1
 8004bb4:	2380      	movs	r3, #128	; 0x80
 8004bb6:	045b      	lsls	r3, r3, #17
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d301      	bcc.n	8004bc0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e010      	b.n	8004be2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bc0:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <SysTick_Config+0x44>)
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	3a01      	subs	r2, #1
 8004bc6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bc8:	2301      	movs	r3, #1
 8004bca:	425b      	negs	r3, r3
 8004bcc:	2103      	movs	r1, #3
 8004bce:	0018      	movs	r0, r3
 8004bd0:	f7ff ff7c 	bl	8004acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bd4:	4b05      	ldr	r3, [pc, #20]	; (8004bec <SysTick_Config+0x44>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bda:	4b04      	ldr	r3, [pc, #16]	; (8004bec <SysTick_Config+0x44>)
 8004bdc:	2207      	movs	r2, #7
 8004bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	0018      	movs	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	b002      	add	sp, #8
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	e000e010 	.word	0xe000e010

08004bf0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	607a      	str	r2, [r7, #4]
 8004bfa:	210f      	movs	r1, #15
 8004bfc:	187b      	adds	r3, r7, r1
 8004bfe:	1c02      	adds	r2, r0, #0
 8004c00:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	187b      	adds	r3, r7, r1
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	b25b      	sxtb	r3, r3
 8004c0a:	0011      	movs	r1, r2
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f7ff ff5d 	bl	8004acc <__NVIC_SetPriority>
}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b004      	add	sp, #16
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b082      	sub	sp, #8
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	0002      	movs	r2, r0
 8004c22:	1dfb      	adds	r3, r7, #7
 8004c24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c26:	1dfb      	adds	r3, r7, #7
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	b25b      	sxtb	r3, r3
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f7ff ff33 	bl	8004a98 <__NVIC_EnableIRQ>
}
 8004c32:	46c0      	nop			; (mov r8, r8)
 8004c34:	46bd      	mov	sp, r7
 8004c36:	b002      	add	sp, #8
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b082      	sub	sp, #8
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	0018      	movs	r0, r3
 8004c46:	f7ff ffaf 	bl	8004ba8 <SysTick_Config>
 8004c4a:	0003      	movs	r3, r0
}
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b002      	add	sp, #8
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e077      	b.n	8004d56 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a3d      	ldr	r2, [pc, #244]	; (8004d60 <HAL_DMA_Init+0x10c>)
 8004c6c:	4694      	mov	ip, r2
 8004c6e:	4463      	add	r3, ip
 8004c70:	2114      	movs	r1, #20
 8004c72:	0018      	movs	r0, r3
 8004c74:	f7fb fa4c 	bl	8000110 <__udivsi3>
 8004c78:	0003      	movs	r3, r0
 8004c7a:	009a      	lsls	r2, r3, #2
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2225      	movs	r2, #37	; 0x25
 8004c84:	2102      	movs	r1, #2
 8004c86:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4934      	ldr	r1, [pc, #208]	; (8004d64 <HAL_DMA_Init+0x110>)
 8004c94:	400a      	ands	r2, r1
 8004c96:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6819      	ldr	r1, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f000 f9c1 	bl	8005058 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	2380      	movs	r3, #128	; 0x80
 8004cdc:	01db      	lsls	r3, r3, #7
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d102      	bne.n	8004ce8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf0:	213f      	movs	r1, #63	; 0x3f
 8004cf2:	400a      	ands	r2, r1
 8004cf4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004cfe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d011      	beq.n	8004d2c <HAL_DMA_Init+0xd8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d80d      	bhi.n	8004d2c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	0018      	movs	r0, r3
 8004d14:	f000 f9cc 	bl	80050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004d28:	605a      	str	r2, [r3, #4]
 8004d2a:	e008      	b.n	8004d3e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2225      	movs	r2, #37	; 0x25
 8004d48:	2101      	movs	r1, #1
 8004d4a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2224      	movs	r2, #36	; 0x24
 8004d50:	2100      	movs	r1, #0
 8004d52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	0018      	movs	r0, r3
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	b002      	add	sp, #8
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	46c0      	nop			; (mov r8, r8)
 8004d60:	bffdfff8 	.word	0xbffdfff8
 8004d64:	ffff800f 	.word	0xffff800f

08004d68 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d76:	2317      	movs	r3, #23
 8004d78:	18fb      	adds	r3, r7, r3
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2224      	movs	r2, #36	; 0x24
 8004d82:	5c9b      	ldrb	r3, [r3, r2]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d101      	bne.n	8004d8c <HAL_DMA_Start_IT+0x24>
 8004d88:	2302      	movs	r3, #2
 8004d8a:	e06f      	b.n	8004e6c <HAL_DMA_Start_IT+0x104>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2224      	movs	r2, #36	; 0x24
 8004d90:	2101      	movs	r1, #1
 8004d92:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2225      	movs	r2, #37	; 0x25
 8004d98:	5c9b      	ldrb	r3, [r3, r2]
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d157      	bne.n	8004e50 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2225      	movs	r2, #37	; 0x25
 8004da4:	2102      	movs	r1, #2
 8004da6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2101      	movs	r1, #1
 8004dba:	438a      	bics	r2, r1
 8004dbc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	68b9      	ldr	r1, [r7, #8]
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 f907 	bl	8004fd8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d008      	beq.n	8004de4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	210e      	movs	r1, #14
 8004dde:	430a      	orrs	r2, r1
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	e00f      	b.n	8004e04 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2104      	movs	r1, #4
 8004df0:	438a      	bics	r2, r1
 8004df2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	210a      	movs	r1, #10
 8004e00:	430a      	orrs	r2, r1
 8004e02:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	2380      	movs	r3, #128	; 0x80
 8004e0c:	025b      	lsls	r3, r3, #9
 8004e0e:	4013      	ands	r3, r2
 8004e10:	d008      	beq.n	8004e24 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1c:	2180      	movs	r1, #128	; 0x80
 8004e1e:	0049      	lsls	r1, r1, #1
 8004e20:	430a      	orrs	r2, r1
 8004e22:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e36:	2180      	movs	r1, #128	; 0x80
 8004e38:	0049      	lsls	r1, r1, #1
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2101      	movs	r1, #1
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	e00a      	b.n	8004e66 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2280      	movs	r2, #128	; 0x80
 8004e54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2224      	movs	r2, #36	; 0x24
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8004e5e:	2317      	movs	r3, #23
 8004e60:	18fb      	adds	r3, r7, r3
 8004e62:	2201      	movs	r2, #1
 8004e64:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004e66:	2317      	movs	r3, #23
 8004e68:	18fb      	adds	r3, r7, r3
 8004e6a:	781b      	ldrb	r3, [r3, #0]
}
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	b006      	add	sp, #24
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8004e7c:	4b55      	ldr	r3, [pc, #340]	; (8004fd4 <HAL_DMA_IRQHandler+0x160>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	221c      	movs	r2, #28
 8004e90:	4013      	ands	r3, r2
 8004e92:	2204      	movs	r2, #4
 8004e94:	409a      	lsls	r2, r3
 8004e96:	0013      	movs	r3, r2
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d027      	beq.n	8004eee <HAL_DMA_IRQHandler+0x7a>
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2204      	movs	r2, #4
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d023      	beq.n	8004eee <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2220      	movs	r2, #32
 8004eae:	4013      	ands	r3, r2
 8004eb0:	d107      	bne.n	8004ec2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2104      	movs	r1, #4
 8004ebe:	438a      	bics	r2, r1
 8004ec0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004ec2:	4b44      	ldr	r3, [pc, #272]	; (8004fd4 <HAL_DMA_IRQHandler+0x160>)
 8004ec4:	6859      	ldr	r1, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	221c      	movs	r2, #28
 8004ecc:	4013      	ands	r3, r2
 8004ece:	2204      	movs	r2, #4
 8004ed0:	409a      	lsls	r2, r3
 8004ed2:	4b40      	ldr	r3, [pc, #256]	; (8004fd4 <HAL_DMA_IRQHandler+0x160>)
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d100      	bne.n	8004ee2 <HAL_DMA_IRQHandler+0x6e>
 8004ee0:	e073      	b.n	8004fca <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	0010      	movs	r0, r2
 8004eea:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004eec:	e06d      	b.n	8004fca <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	221c      	movs	r2, #28
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	409a      	lsls	r2, r3
 8004efa:	0013      	movs	r3, r2
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4013      	ands	r3, r2
 8004f00:	d02e      	beq.n	8004f60 <HAL_DMA_IRQHandler+0xec>
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2202      	movs	r2, #2
 8004f06:	4013      	ands	r3, r2
 8004f08:	d02a      	beq.n	8004f60 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2220      	movs	r2, #32
 8004f12:	4013      	ands	r3, r2
 8004f14:	d10b      	bne.n	8004f2e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	210a      	movs	r1, #10
 8004f22:	438a      	bics	r2, r1
 8004f24:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2225      	movs	r2, #37	; 0x25
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004f2e:	4b29      	ldr	r3, [pc, #164]	; (8004fd4 <HAL_DMA_IRQHandler+0x160>)
 8004f30:	6859      	ldr	r1, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	221c      	movs	r2, #28
 8004f38:	4013      	ands	r3, r2
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	409a      	lsls	r2, r3
 8004f3e:	4b25      	ldr	r3, [pc, #148]	; (8004fd4 <HAL_DMA_IRQHandler+0x160>)
 8004f40:	430a      	orrs	r2, r1
 8004f42:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2224      	movs	r2, #36	; 0x24
 8004f48:	2100      	movs	r1, #0
 8004f4a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d03a      	beq.n	8004fca <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	0010      	movs	r0, r2
 8004f5c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004f5e:	e034      	b.n	8004fca <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	221c      	movs	r2, #28
 8004f66:	4013      	ands	r3, r2
 8004f68:	2208      	movs	r2, #8
 8004f6a:	409a      	lsls	r2, r3
 8004f6c:	0013      	movs	r3, r2
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	4013      	ands	r3, r2
 8004f72:	d02b      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x158>
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2208      	movs	r2, #8
 8004f78:	4013      	ands	r3, r2
 8004f7a:	d027      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	210e      	movs	r1, #14
 8004f88:	438a      	bics	r2, r1
 8004f8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004f8c:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <HAL_DMA_IRQHandler+0x160>)
 8004f8e:	6859      	ldr	r1, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	221c      	movs	r2, #28
 8004f96:	4013      	ands	r3, r2
 8004f98:	2201      	movs	r2, #1
 8004f9a:	409a      	lsls	r2, r3
 8004f9c:	4b0d      	ldr	r3, [pc, #52]	; (8004fd4 <HAL_DMA_IRQHandler+0x160>)
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2225      	movs	r2, #37	; 0x25
 8004fac:	2101      	movs	r1, #1
 8004fae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2224      	movs	r2, #36	; 0x24
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	0010      	movs	r0, r2
 8004fc8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	46c0      	nop			; (mov r8, r8)
}
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	b004      	add	sp, #16
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40020000 	.word	0x40020000

08004fd8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004fee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d004      	beq.n	8005002 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005000:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005002:	4b14      	ldr	r3, [pc, #80]	; (8005054 <DMA_SetConfig+0x7c>)
 8005004:	6859      	ldr	r1, [r3, #4]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	221c      	movs	r2, #28
 800500c:	4013      	ands	r3, r2
 800500e:	2201      	movs	r2, #1
 8005010:	409a      	lsls	r2, r3
 8005012:	4b10      	ldr	r3, [pc, #64]	; (8005054 <DMA_SetConfig+0x7c>)
 8005014:	430a      	orrs	r2, r1
 8005016:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b10      	cmp	r3, #16
 8005026:	d108      	bne.n	800503a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005038:	e007      	b.n	800504a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	60da      	str	r2, [r3, #12]
}
 800504a:	46c0      	nop			; (mov r8, r8)
 800504c:	46bd      	mov	sp, r7
 800504e:	b004      	add	sp, #16
 8005050:	bd80      	pop	{r7, pc}
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	40020000 	.word	0x40020000

08005058 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005064:	089b      	lsrs	r3, r3, #2
 8005066:	4a10      	ldr	r2, [pc, #64]	; (80050a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8005068:	4694      	mov	ip, r2
 800506a:	4463      	add	r3, ip
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	001a      	movs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	001a      	movs	r2, r3
 800507a:	23ff      	movs	r3, #255	; 0xff
 800507c:	4013      	ands	r3, r2
 800507e:	3b08      	subs	r3, #8
 8005080:	2114      	movs	r1, #20
 8005082:	0018      	movs	r0, r3
 8005084:	f7fb f844 	bl	8000110 <__udivsi3>
 8005088:	0003      	movs	r3, r0
 800508a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a07      	ldr	r2, [pc, #28]	; (80050ac <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8005090:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	221f      	movs	r2, #31
 8005096:	4013      	ands	r3, r2
 8005098:	2201      	movs	r2, #1
 800509a:	409a      	lsls	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80050a0:	46c0      	nop			; (mov r8, r8)
 80050a2:	46bd      	mov	sp, r7
 80050a4:	b004      	add	sp, #16
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	10008200 	.word	0x10008200
 80050ac:	40020880 	.word	0x40020880

080050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	223f      	movs	r2, #63	; 0x3f
 80050be:	4013      	ands	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4a0a      	ldr	r2, [pc, #40]	; (80050f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80050c6:	4694      	mov	ip, r2
 80050c8:	4463      	add	r3, ip
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	001a      	movs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a07      	ldr	r2, [pc, #28]	; (80050f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80050d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3b01      	subs	r3, #1
 80050dc:	2203      	movs	r2, #3
 80050de:	4013      	ands	r3, r2
 80050e0:	2201      	movs	r2, #1
 80050e2:	409a      	lsls	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80050e8:	46c0      	nop			; (mov r8, r8)
 80050ea:	46bd      	mov	sp, r7
 80050ec:	b004      	add	sp, #16
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	1000823f 	.word	0x1000823f
 80050f4:	40020940 	.word	0x40020940

080050f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005102:	2300      	movs	r3, #0
 8005104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005106:	e147      	b.n	8005398 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2101      	movs	r1, #1
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4091      	lsls	r1, r2
 8005112:	000a      	movs	r2, r1
 8005114:	4013      	ands	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d100      	bne.n	8005120 <HAL_GPIO_Init+0x28>
 800511e:	e138      	b.n	8005392 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2203      	movs	r2, #3
 8005126:	4013      	ands	r3, r2
 8005128:	2b01      	cmp	r3, #1
 800512a:	d005      	beq.n	8005138 <HAL_GPIO_Init+0x40>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2203      	movs	r2, #3
 8005132:	4013      	ands	r3, r2
 8005134:	2b02      	cmp	r3, #2
 8005136:	d130      	bne.n	800519a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	2203      	movs	r2, #3
 8005144:	409a      	lsls	r2, r3
 8005146:	0013      	movs	r3, r2
 8005148:	43da      	mvns	r2, r3
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	4013      	ands	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	409a      	lsls	r2, r3
 800515a:	0013      	movs	r3, r2
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	4313      	orrs	r3, r2
 8005160:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800516e:	2201      	movs	r2, #1
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	409a      	lsls	r2, r3
 8005174:	0013      	movs	r3, r2
 8005176:	43da      	mvns	r2, r3
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4013      	ands	r3, r2
 800517c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	091b      	lsrs	r3, r3, #4
 8005184:	2201      	movs	r2, #1
 8005186:	401a      	ands	r2, r3
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	409a      	lsls	r2, r3
 800518c:	0013      	movs	r3, r2
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2203      	movs	r2, #3
 80051a0:	4013      	ands	r3, r2
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	d017      	beq.n	80051d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	005b      	lsls	r3, r3, #1
 80051b0:	2203      	movs	r2, #3
 80051b2:	409a      	lsls	r2, r3
 80051b4:	0013      	movs	r3, r2
 80051b6:	43da      	mvns	r2, r3
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	4013      	ands	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	409a      	lsls	r2, r3
 80051c8:	0013      	movs	r3, r2
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2203      	movs	r2, #3
 80051dc:	4013      	ands	r3, r2
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d123      	bne.n	800522a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	08da      	lsrs	r2, r3, #3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	3208      	adds	r2, #8
 80051ea:	0092      	lsls	r2, r2, #2
 80051ec:	58d3      	ldr	r3, [r2, r3]
 80051ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	2207      	movs	r2, #7
 80051f4:	4013      	ands	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	220f      	movs	r2, #15
 80051fa:	409a      	lsls	r2, r3
 80051fc:	0013      	movs	r3, r2
 80051fe:	43da      	mvns	r2, r3
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	4013      	ands	r3, r2
 8005204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	691a      	ldr	r2, [r3, #16]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2107      	movs	r1, #7
 800520e:	400b      	ands	r3, r1
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	409a      	lsls	r2, r3
 8005214:	0013      	movs	r3, r2
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	08da      	lsrs	r2, r3, #3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3208      	adds	r2, #8
 8005224:	0092      	lsls	r2, r2, #2
 8005226:	6939      	ldr	r1, [r7, #16]
 8005228:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	2203      	movs	r2, #3
 8005236:	409a      	lsls	r2, r3
 8005238:	0013      	movs	r3, r2
 800523a:	43da      	mvns	r2, r3
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	4013      	ands	r3, r2
 8005240:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2203      	movs	r2, #3
 8005248:	401a      	ands	r2, r3
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	409a      	lsls	r2, r3
 8005250:	0013      	movs	r3, r2
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	23c0      	movs	r3, #192	; 0xc0
 8005264:	029b      	lsls	r3, r3, #10
 8005266:	4013      	ands	r3, r2
 8005268:	d100      	bne.n	800526c <HAL_GPIO_Init+0x174>
 800526a:	e092      	b.n	8005392 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800526c:	4a50      	ldr	r2, [pc, #320]	; (80053b0 <HAL_GPIO_Init+0x2b8>)
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	089b      	lsrs	r3, r3, #2
 8005272:	3318      	adds	r3, #24
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	589b      	ldr	r3, [r3, r2]
 8005278:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2203      	movs	r2, #3
 800527e:	4013      	ands	r3, r2
 8005280:	00db      	lsls	r3, r3, #3
 8005282:	220f      	movs	r2, #15
 8005284:	409a      	lsls	r2, r3
 8005286:	0013      	movs	r3, r2
 8005288:	43da      	mvns	r2, r3
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	4013      	ands	r3, r2
 800528e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	23a0      	movs	r3, #160	; 0xa0
 8005294:	05db      	lsls	r3, r3, #23
 8005296:	429a      	cmp	r2, r3
 8005298:	d013      	beq.n	80052c2 <HAL_GPIO_Init+0x1ca>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a45      	ldr	r2, [pc, #276]	; (80053b4 <HAL_GPIO_Init+0x2bc>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00d      	beq.n	80052be <HAL_GPIO_Init+0x1c6>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a44      	ldr	r2, [pc, #272]	; (80053b8 <HAL_GPIO_Init+0x2c0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d007      	beq.n	80052ba <HAL_GPIO_Init+0x1c2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a43      	ldr	r2, [pc, #268]	; (80053bc <HAL_GPIO_Init+0x2c4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d101      	bne.n	80052b6 <HAL_GPIO_Init+0x1be>
 80052b2:	2303      	movs	r3, #3
 80052b4:	e006      	b.n	80052c4 <HAL_GPIO_Init+0x1cc>
 80052b6:	2305      	movs	r3, #5
 80052b8:	e004      	b.n	80052c4 <HAL_GPIO_Init+0x1cc>
 80052ba:	2302      	movs	r3, #2
 80052bc:	e002      	b.n	80052c4 <HAL_GPIO_Init+0x1cc>
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <HAL_GPIO_Init+0x1cc>
 80052c2:	2300      	movs	r3, #0
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	2103      	movs	r1, #3
 80052c8:	400a      	ands	r2, r1
 80052ca:	00d2      	lsls	r2, r2, #3
 80052cc:	4093      	lsls	r3, r2
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80052d4:	4936      	ldr	r1, [pc, #216]	; (80053b0 <HAL_GPIO_Init+0x2b8>)
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	089b      	lsrs	r3, r3, #2
 80052da:	3318      	adds	r3, #24
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052e2:	4b33      	ldr	r3, [pc, #204]	; (80053b0 <HAL_GPIO_Init+0x2b8>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	43da      	mvns	r2, r3
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	4013      	ands	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	2380      	movs	r3, #128	; 0x80
 80052f8:	035b      	lsls	r3, r3, #13
 80052fa:	4013      	ands	r3, r2
 80052fc:	d003      	beq.n	8005306 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005306:	4b2a      	ldr	r3, [pc, #168]	; (80053b0 <HAL_GPIO_Init+0x2b8>)
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800530c:	4b28      	ldr	r3, [pc, #160]	; (80053b0 <HAL_GPIO_Init+0x2b8>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	43da      	mvns	r2, r3
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	4013      	ands	r3, r2
 800531a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	2380      	movs	r3, #128	; 0x80
 8005322:	039b      	lsls	r3, r3, #14
 8005324:	4013      	ands	r3, r2
 8005326:	d003      	beq.n	8005330 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4313      	orrs	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005330:	4b1f      	ldr	r3, [pc, #124]	; (80053b0 <HAL_GPIO_Init+0x2b8>)
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005336:	4a1e      	ldr	r2, [pc, #120]	; (80053b0 <HAL_GPIO_Init+0x2b8>)
 8005338:	2384      	movs	r3, #132	; 0x84
 800533a:	58d3      	ldr	r3, [r2, r3]
 800533c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	43da      	mvns	r2, r3
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	4013      	ands	r3, r2
 8005346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	2380      	movs	r3, #128	; 0x80
 800534e:	029b      	lsls	r3, r3, #10
 8005350:	4013      	ands	r3, r2
 8005352:	d003      	beq.n	800535c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4313      	orrs	r3, r2
 800535a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800535c:	4914      	ldr	r1, [pc, #80]	; (80053b0 <HAL_GPIO_Init+0x2b8>)
 800535e:	2284      	movs	r2, #132	; 0x84
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005364:	4a12      	ldr	r2, [pc, #72]	; (80053b0 <HAL_GPIO_Init+0x2b8>)
 8005366:	2380      	movs	r3, #128	; 0x80
 8005368:	58d3      	ldr	r3, [r2, r3]
 800536a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	43da      	mvns	r2, r3
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	4013      	ands	r3, r2
 8005374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	2380      	movs	r3, #128	; 0x80
 800537c:	025b      	lsls	r3, r3, #9
 800537e:	4013      	ands	r3, r2
 8005380:	d003      	beq.n	800538a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800538a:	4909      	ldr	r1, [pc, #36]	; (80053b0 <HAL_GPIO_Init+0x2b8>)
 800538c:	2280      	movs	r2, #128	; 0x80
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	3301      	adds	r3, #1
 8005396:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	40da      	lsrs	r2, r3
 80053a0:	1e13      	subs	r3, r2, #0
 80053a2:	d000      	beq.n	80053a6 <HAL_GPIO_Init+0x2ae>
 80053a4:	e6b0      	b.n	8005108 <HAL_GPIO_Init+0x10>
  }
}
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	46c0      	nop			; (mov r8, r8)
 80053aa:	46bd      	mov	sp, r7
 80053ac:	b006      	add	sp, #24
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40021800 	.word	0x40021800
 80053b4:	50000400 	.word	0x50000400
 80053b8:	50000800 	.word	0x50000800
 80053bc:	50000c00 	.word	0x50000c00

080053c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	0008      	movs	r0, r1
 80053ca:	0011      	movs	r1, r2
 80053cc:	1cbb      	adds	r3, r7, #2
 80053ce:	1c02      	adds	r2, r0, #0
 80053d0:	801a      	strh	r2, [r3, #0]
 80053d2:	1c7b      	adds	r3, r7, #1
 80053d4:	1c0a      	adds	r2, r1, #0
 80053d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053d8:	1c7b      	adds	r3, r7, #1
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d004      	beq.n	80053ea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053e0:	1cbb      	adds	r3, r7, #2
 80053e2:	881a      	ldrh	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053e8:	e003      	b.n	80053f2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053ea:	1cbb      	adds	r3, r7, #2
 80053ec:	881a      	ldrh	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	46bd      	mov	sp, r7
 80053f6:	b002      	add	sp, #8
 80053f8:	bd80      	pop	{r7, pc}
	...

080053fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005404:	4b19      	ldr	r3, [pc, #100]	; (800546c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a19      	ldr	r2, [pc, #100]	; (8005470 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800540a:	4013      	ands	r3, r2
 800540c:	0019      	movs	r1, r3
 800540e:	4b17      	ldr	r3, [pc, #92]	; (800546c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	430a      	orrs	r2, r1
 8005414:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	2380      	movs	r3, #128	; 0x80
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	429a      	cmp	r2, r3
 800541e:	d11f      	bne.n	8005460 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005420:	4b14      	ldr	r3, [pc, #80]	; (8005474 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	0013      	movs	r3, r2
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	189b      	adds	r3, r3, r2
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	4912      	ldr	r1, [pc, #72]	; (8005478 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800542e:	0018      	movs	r0, r3
 8005430:	f7fa fe6e 	bl	8000110 <__udivsi3>
 8005434:	0003      	movs	r3, r0
 8005436:	3301      	adds	r3, #1
 8005438:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800543a:	e008      	b.n	800544e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3b01      	subs	r3, #1
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	e001      	b.n	800544e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e009      	b.n	8005462 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800544e:	4b07      	ldr	r3, [pc, #28]	; (800546c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005450:	695a      	ldr	r2, [r3, #20]
 8005452:	2380      	movs	r3, #128	; 0x80
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	401a      	ands	r2, r3
 8005458:	2380      	movs	r3, #128	; 0x80
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	429a      	cmp	r2, r3
 800545e:	d0ed      	beq.n	800543c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	0018      	movs	r0, r3
 8005464:	46bd      	mov	sp, r7
 8005466:	b004      	add	sp, #16
 8005468:	bd80      	pop	{r7, pc}
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	40007000 	.word	0x40007000
 8005470:	fffff9ff 	.word	0xfffff9ff
 8005474:	20000000 	.word	0x20000000
 8005478:	000f4240 	.word	0x000f4240

0800547c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005480:	4b03      	ldr	r3, [pc, #12]	; (8005490 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	23e0      	movs	r3, #224	; 0xe0
 8005486:	01db      	lsls	r3, r3, #7
 8005488:	4013      	ands	r3, r2
}
 800548a:	0018      	movs	r0, r3
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	40021000 	.word	0x40021000

08005494 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e2f3      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2201      	movs	r2, #1
 80054ac:	4013      	ands	r3, r2
 80054ae:	d100      	bne.n	80054b2 <HAL_RCC_OscConfig+0x1e>
 80054b0:	e07c      	b.n	80055ac <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054b2:	4bc3      	ldr	r3, [pc, #780]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	2238      	movs	r2, #56	; 0x38
 80054b8:	4013      	ands	r3, r2
 80054ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054bc:	4bc0      	ldr	r3, [pc, #768]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	2203      	movs	r2, #3
 80054c2:	4013      	ands	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	2b10      	cmp	r3, #16
 80054ca:	d102      	bne.n	80054d2 <HAL_RCC_OscConfig+0x3e>
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d002      	beq.n	80054d8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d10b      	bne.n	80054f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d8:	4bb9      	ldr	r3, [pc, #740]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	2380      	movs	r3, #128	; 0x80
 80054de:	029b      	lsls	r3, r3, #10
 80054e0:	4013      	ands	r3, r2
 80054e2:	d062      	beq.n	80055aa <HAL_RCC_OscConfig+0x116>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d15e      	bne.n	80055aa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e2ce      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	2380      	movs	r3, #128	; 0x80
 80054f6:	025b      	lsls	r3, r3, #9
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d107      	bne.n	800550c <HAL_RCC_OscConfig+0x78>
 80054fc:	4bb0      	ldr	r3, [pc, #704]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	4baf      	ldr	r3, [pc, #700]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005502:	2180      	movs	r1, #128	; 0x80
 8005504:	0249      	lsls	r1, r1, #9
 8005506:	430a      	orrs	r2, r1
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	e020      	b.n	800554e <HAL_RCC_OscConfig+0xba>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	23a0      	movs	r3, #160	; 0xa0
 8005512:	02db      	lsls	r3, r3, #11
 8005514:	429a      	cmp	r2, r3
 8005516:	d10e      	bne.n	8005536 <HAL_RCC_OscConfig+0xa2>
 8005518:	4ba9      	ldr	r3, [pc, #676]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	4ba8      	ldr	r3, [pc, #672]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 800551e:	2180      	movs	r1, #128	; 0x80
 8005520:	02c9      	lsls	r1, r1, #11
 8005522:	430a      	orrs	r2, r1
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	4ba6      	ldr	r3, [pc, #664]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	4ba5      	ldr	r3, [pc, #660]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 800552c:	2180      	movs	r1, #128	; 0x80
 800552e:	0249      	lsls	r1, r1, #9
 8005530:	430a      	orrs	r2, r1
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	e00b      	b.n	800554e <HAL_RCC_OscConfig+0xba>
 8005536:	4ba2      	ldr	r3, [pc, #648]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	4ba1      	ldr	r3, [pc, #644]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 800553c:	49a1      	ldr	r1, [pc, #644]	; (80057c4 <HAL_RCC_OscConfig+0x330>)
 800553e:	400a      	ands	r2, r1
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	4b9f      	ldr	r3, [pc, #636]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	4b9e      	ldr	r3, [pc, #632]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005548:	499f      	ldr	r1, [pc, #636]	; (80057c8 <HAL_RCC_OscConfig+0x334>)
 800554a:	400a      	ands	r2, r1
 800554c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d014      	beq.n	8005580 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005556:	f7fe fa33 	bl	80039c0 <HAL_GetTick>
 800555a:	0003      	movs	r3, r0
 800555c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005560:	f7fe fa2e 	bl	80039c0 <HAL_GetTick>
 8005564:	0002      	movs	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b64      	cmp	r3, #100	; 0x64
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e28d      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005572:	4b93      	ldr	r3, [pc, #588]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	2380      	movs	r3, #128	; 0x80
 8005578:	029b      	lsls	r3, r3, #10
 800557a:	4013      	ands	r3, r2
 800557c:	d0f0      	beq.n	8005560 <HAL_RCC_OscConfig+0xcc>
 800557e:	e015      	b.n	80055ac <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005580:	f7fe fa1e 	bl	80039c0 <HAL_GetTick>
 8005584:	0003      	movs	r3, r0
 8005586:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005588:	e008      	b.n	800559c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800558a:	f7fe fa19 	bl	80039c0 <HAL_GetTick>
 800558e:	0002      	movs	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b64      	cmp	r3, #100	; 0x64
 8005596:	d901      	bls.n	800559c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e278      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800559c:	4b88      	ldr	r3, [pc, #544]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	2380      	movs	r3, #128	; 0x80
 80055a2:	029b      	lsls	r3, r3, #10
 80055a4:	4013      	ands	r3, r2
 80055a6:	d1f0      	bne.n	800558a <HAL_RCC_OscConfig+0xf6>
 80055a8:	e000      	b.n	80055ac <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055aa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2202      	movs	r2, #2
 80055b2:	4013      	ands	r3, r2
 80055b4:	d100      	bne.n	80055b8 <HAL_RCC_OscConfig+0x124>
 80055b6:	e099      	b.n	80056ec <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055b8:	4b81      	ldr	r3, [pc, #516]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2238      	movs	r2, #56	; 0x38
 80055be:	4013      	ands	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055c2:	4b7f      	ldr	r3, [pc, #508]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2203      	movs	r2, #3
 80055c8:	4013      	ands	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	2b10      	cmp	r3, #16
 80055d0:	d102      	bne.n	80055d8 <HAL_RCC_OscConfig+0x144>
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d002      	beq.n	80055de <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d135      	bne.n	800564a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055de:	4b78      	ldr	r3, [pc, #480]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	2380      	movs	r3, #128	; 0x80
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	4013      	ands	r3, r2
 80055e8:	d005      	beq.n	80055f6 <HAL_RCC_OscConfig+0x162>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e24b      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055f6:	4b72      	ldr	r3, [pc, #456]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	4a74      	ldr	r2, [pc, #464]	; (80057cc <HAL_RCC_OscConfig+0x338>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	0019      	movs	r1, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	021a      	lsls	r2, r3, #8
 8005606:	4b6e      	ldr	r3, [pc, #440]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005608:	430a      	orrs	r2, r1
 800560a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d112      	bne.n	8005638 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005612:	4b6b      	ldr	r3, [pc, #428]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a6e      	ldr	r2, [pc, #440]	; (80057d0 <HAL_RCC_OscConfig+0x33c>)
 8005618:	4013      	ands	r3, r2
 800561a:	0019      	movs	r1, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691a      	ldr	r2, [r3, #16]
 8005620:	4b67      	ldr	r3, [pc, #412]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005622:	430a      	orrs	r2, r1
 8005624:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005626:	4b66      	ldr	r3, [pc, #408]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	0adb      	lsrs	r3, r3, #11
 800562c:	2207      	movs	r2, #7
 800562e:	4013      	ands	r3, r2
 8005630:	4a68      	ldr	r2, [pc, #416]	; (80057d4 <HAL_RCC_OscConfig+0x340>)
 8005632:	40da      	lsrs	r2, r3
 8005634:	4b68      	ldr	r3, [pc, #416]	; (80057d8 <HAL_RCC_OscConfig+0x344>)
 8005636:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005638:	4b68      	ldr	r3, [pc, #416]	; (80057dc <HAL_RCC_OscConfig+0x348>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	0018      	movs	r0, r3
 800563e:	f7fe f963 	bl	8003908 <HAL_InitTick>
 8005642:	1e03      	subs	r3, r0, #0
 8005644:	d051      	beq.n	80056ea <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e221      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d030      	beq.n	80056b4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005652:	4b5b      	ldr	r3, [pc, #364]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a5e      	ldr	r2, [pc, #376]	; (80057d0 <HAL_RCC_OscConfig+0x33c>)
 8005658:	4013      	ands	r3, r2
 800565a:	0019      	movs	r1, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	4b57      	ldr	r3, [pc, #348]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005662:	430a      	orrs	r2, r1
 8005664:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005666:	4b56      	ldr	r3, [pc, #344]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	4b55      	ldr	r3, [pc, #340]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 800566c:	2180      	movs	r1, #128	; 0x80
 800566e:	0049      	lsls	r1, r1, #1
 8005670:	430a      	orrs	r2, r1
 8005672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005674:	f7fe f9a4 	bl	80039c0 <HAL_GetTick>
 8005678:	0003      	movs	r3, r0
 800567a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800567c:	e008      	b.n	8005690 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800567e:	f7fe f99f 	bl	80039c0 <HAL_GetTick>
 8005682:	0002      	movs	r2, r0
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e1fe      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005690:	4b4b      	ldr	r3, [pc, #300]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	2380      	movs	r3, #128	; 0x80
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	4013      	ands	r3, r2
 800569a:	d0f0      	beq.n	800567e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800569c:	4b48      	ldr	r3, [pc, #288]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	4a4a      	ldr	r2, [pc, #296]	; (80057cc <HAL_RCC_OscConfig+0x338>)
 80056a2:	4013      	ands	r3, r2
 80056a4:	0019      	movs	r1, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	021a      	lsls	r2, r3, #8
 80056ac:	4b44      	ldr	r3, [pc, #272]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80056ae:	430a      	orrs	r2, r1
 80056b0:	605a      	str	r2, [r3, #4]
 80056b2:	e01b      	b.n	80056ec <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80056b4:	4b42      	ldr	r3, [pc, #264]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	4b41      	ldr	r3, [pc, #260]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80056ba:	4949      	ldr	r1, [pc, #292]	; (80057e0 <HAL_RCC_OscConfig+0x34c>)
 80056bc:	400a      	ands	r2, r1
 80056be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c0:	f7fe f97e 	bl	80039c0 <HAL_GetTick>
 80056c4:	0003      	movs	r3, r0
 80056c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056c8:	e008      	b.n	80056dc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ca:	f7fe f979 	bl	80039c0 <HAL_GetTick>
 80056ce:	0002      	movs	r2, r0
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e1d8      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056dc:	4b38      	ldr	r3, [pc, #224]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	2380      	movs	r3, #128	; 0x80
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	4013      	ands	r3, r2
 80056e6:	d1f0      	bne.n	80056ca <HAL_RCC_OscConfig+0x236>
 80056e8:	e000      	b.n	80056ec <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056ea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2208      	movs	r2, #8
 80056f2:	4013      	ands	r3, r2
 80056f4:	d047      	beq.n	8005786 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80056f6:	4b32      	ldr	r3, [pc, #200]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	2238      	movs	r2, #56	; 0x38
 80056fc:	4013      	ands	r3, r2
 80056fe:	2b18      	cmp	r3, #24
 8005700:	d10a      	bne.n	8005718 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005702:	4b2f      	ldr	r3, [pc, #188]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005706:	2202      	movs	r2, #2
 8005708:	4013      	ands	r3, r2
 800570a:	d03c      	beq.n	8005786 <HAL_RCC_OscConfig+0x2f2>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d138      	bne.n	8005786 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e1ba      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d019      	beq.n	8005754 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005720:	4b27      	ldr	r3, [pc, #156]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005722:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005724:	4b26      	ldr	r3, [pc, #152]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005726:	2101      	movs	r1, #1
 8005728:	430a      	orrs	r2, r1
 800572a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572c:	f7fe f948 	bl	80039c0 <HAL_GetTick>
 8005730:	0003      	movs	r3, r0
 8005732:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005736:	f7fe f943 	bl	80039c0 <HAL_GetTick>
 800573a:	0002      	movs	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e1a2      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005748:	4b1d      	ldr	r3, [pc, #116]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 800574a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800574c:	2202      	movs	r2, #2
 800574e:	4013      	ands	r3, r2
 8005750:	d0f1      	beq.n	8005736 <HAL_RCC_OscConfig+0x2a2>
 8005752:	e018      	b.n	8005786 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005754:	4b1a      	ldr	r3, [pc, #104]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 8005756:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005758:	4b19      	ldr	r3, [pc, #100]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 800575a:	2101      	movs	r1, #1
 800575c:	438a      	bics	r2, r1
 800575e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005760:	f7fe f92e 	bl	80039c0 <HAL_GetTick>
 8005764:	0003      	movs	r3, r0
 8005766:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005768:	e008      	b.n	800577c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800576a:	f7fe f929 	bl	80039c0 <HAL_GetTick>
 800576e:	0002      	movs	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e188      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800577c:	4b10      	ldr	r3, [pc, #64]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 800577e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005780:	2202      	movs	r2, #2
 8005782:	4013      	ands	r3, r2
 8005784:	d1f1      	bne.n	800576a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2204      	movs	r2, #4
 800578c:	4013      	ands	r3, r2
 800578e:	d100      	bne.n	8005792 <HAL_RCC_OscConfig+0x2fe>
 8005790:	e0c6      	b.n	8005920 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005792:	231f      	movs	r3, #31
 8005794:	18fb      	adds	r3, r7, r3
 8005796:	2200      	movs	r2, #0
 8005798:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800579a:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	2238      	movs	r2, #56	; 0x38
 80057a0:	4013      	ands	r3, r2
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d11e      	bne.n	80057e4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80057a6:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <HAL_RCC_OscConfig+0x32c>)
 80057a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057aa:	2202      	movs	r2, #2
 80057ac:	4013      	ands	r3, r2
 80057ae:	d100      	bne.n	80057b2 <HAL_RCC_OscConfig+0x31e>
 80057b0:	e0b6      	b.n	8005920 <HAL_RCC_OscConfig+0x48c>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d000      	beq.n	80057bc <HAL_RCC_OscConfig+0x328>
 80057ba:	e0b1      	b.n	8005920 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e166      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
 80057c0:	40021000 	.word	0x40021000
 80057c4:	fffeffff 	.word	0xfffeffff
 80057c8:	fffbffff 	.word	0xfffbffff
 80057cc:	ffff80ff 	.word	0xffff80ff
 80057d0:	ffffc7ff 	.word	0xffffc7ff
 80057d4:	00f42400 	.word	0x00f42400
 80057d8:	20000000 	.word	0x20000000
 80057dc:	20000004 	.word	0x20000004
 80057e0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057e4:	4bac      	ldr	r3, [pc, #688]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80057e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	055b      	lsls	r3, r3, #21
 80057ec:	4013      	ands	r3, r2
 80057ee:	d101      	bne.n	80057f4 <HAL_RCC_OscConfig+0x360>
 80057f0:	2301      	movs	r3, #1
 80057f2:	e000      	b.n	80057f6 <HAL_RCC_OscConfig+0x362>
 80057f4:	2300      	movs	r3, #0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d011      	beq.n	800581e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80057fa:	4ba7      	ldr	r3, [pc, #668]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80057fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057fe:	4ba6      	ldr	r3, [pc, #664]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005800:	2180      	movs	r1, #128	; 0x80
 8005802:	0549      	lsls	r1, r1, #21
 8005804:	430a      	orrs	r2, r1
 8005806:	63da      	str	r2, [r3, #60]	; 0x3c
 8005808:	4ba3      	ldr	r3, [pc, #652]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 800580a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800580c:	2380      	movs	r3, #128	; 0x80
 800580e:	055b      	lsls	r3, r3, #21
 8005810:	4013      	ands	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005816:	231f      	movs	r3, #31
 8005818:	18fb      	adds	r3, r7, r3
 800581a:	2201      	movs	r2, #1
 800581c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800581e:	4b9f      	ldr	r3, [pc, #636]	; (8005a9c <HAL_RCC_OscConfig+0x608>)
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	2380      	movs	r3, #128	; 0x80
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	4013      	ands	r3, r2
 8005828:	d11a      	bne.n	8005860 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800582a:	4b9c      	ldr	r3, [pc, #624]	; (8005a9c <HAL_RCC_OscConfig+0x608>)
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	4b9b      	ldr	r3, [pc, #620]	; (8005a9c <HAL_RCC_OscConfig+0x608>)
 8005830:	2180      	movs	r1, #128	; 0x80
 8005832:	0049      	lsls	r1, r1, #1
 8005834:	430a      	orrs	r2, r1
 8005836:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005838:	f7fe f8c2 	bl	80039c0 <HAL_GetTick>
 800583c:	0003      	movs	r3, r0
 800583e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005840:	e008      	b.n	8005854 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005842:	f7fe f8bd 	bl	80039c0 <HAL_GetTick>
 8005846:	0002      	movs	r2, r0
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b02      	cmp	r3, #2
 800584e:	d901      	bls.n	8005854 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e11c      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005854:	4b91      	ldr	r3, [pc, #580]	; (8005a9c <HAL_RCC_OscConfig+0x608>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	2380      	movs	r3, #128	; 0x80
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	4013      	ands	r3, r2
 800585e:	d0f0      	beq.n	8005842 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d106      	bne.n	8005876 <HAL_RCC_OscConfig+0x3e2>
 8005868:	4b8b      	ldr	r3, [pc, #556]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 800586a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800586c:	4b8a      	ldr	r3, [pc, #552]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 800586e:	2101      	movs	r1, #1
 8005870:	430a      	orrs	r2, r1
 8005872:	65da      	str	r2, [r3, #92]	; 0x5c
 8005874:	e01c      	b.n	80058b0 <HAL_RCC_OscConfig+0x41c>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	2b05      	cmp	r3, #5
 800587c:	d10c      	bne.n	8005898 <HAL_RCC_OscConfig+0x404>
 800587e:	4b86      	ldr	r3, [pc, #536]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005880:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005882:	4b85      	ldr	r3, [pc, #532]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005884:	2104      	movs	r1, #4
 8005886:	430a      	orrs	r2, r1
 8005888:	65da      	str	r2, [r3, #92]	; 0x5c
 800588a:	4b83      	ldr	r3, [pc, #524]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 800588c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800588e:	4b82      	ldr	r3, [pc, #520]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005890:	2101      	movs	r1, #1
 8005892:	430a      	orrs	r2, r1
 8005894:	65da      	str	r2, [r3, #92]	; 0x5c
 8005896:	e00b      	b.n	80058b0 <HAL_RCC_OscConfig+0x41c>
 8005898:	4b7f      	ldr	r3, [pc, #508]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 800589a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800589c:	4b7e      	ldr	r3, [pc, #504]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 800589e:	2101      	movs	r1, #1
 80058a0:	438a      	bics	r2, r1
 80058a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80058a4:	4b7c      	ldr	r3, [pc, #496]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80058a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058a8:	4b7b      	ldr	r3, [pc, #492]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80058aa:	2104      	movs	r1, #4
 80058ac:	438a      	bics	r2, r1
 80058ae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d014      	beq.n	80058e2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b8:	f7fe f882 	bl	80039c0 <HAL_GetTick>
 80058bc:	0003      	movs	r3, r0
 80058be:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058c0:	e009      	b.n	80058d6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c2:	f7fe f87d 	bl	80039c0 <HAL_GetTick>
 80058c6:	0002      	movs	r2, r0
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	4a74      	ldr	r2, [pc, #464]	; (8005aa0 <HAL_RCC_OscConfig+0x60c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e0db      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058d6:	4b70      	ldr	r3, [pc, #448]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80058d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058da:	2202      	movs	r2, #2
 80058dc:	4013      	ands	r3, r2
 80058de:	d0f0      	beq.n	80058c2 <HAL_RCC_OscConfig+0x42e>
 80058e0:	e013      	b.n	800590a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e2:	f7fe f86d 	bl	80039c0 <HAL_GetTick>
 80058e6:	0003      	movs	r3, r0
 80058e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058ea:	e009      	b.n	8005900 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ec:	f7fe f868 	bl	80039c0 <HAL_GetTick>
 80058f0:	0002      	movs	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	4a6a      	ldr	r2, [pc, #424]	; (8005aa0 <HAL_RCC_OscConfig+0x60c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d901      	bls.n	8005900 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e0c6      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005900:	4b65      	ldr	r3, [pc, #404]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005904:	2202      	movs	r2, #2
 8005906:	4013      	ands	r3, r2
 8005908:	d1f0      	bne.n	80058ec <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800590a:	231f      	movs	r3, #31
 800590c:	18fb      	adds	r3, r7, r3
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d105      	bne.n	8005920 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005914:	4b60      	ldr	r3, [pc, #384]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005918:	4b5f      	ldr	r3, [pc, #380]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 800591a:	4962      	ldr	r1, [pc, #392]	; (8005aa4 <HAL_RCC_OscConfig+0x610>)
 800591c:	400a      	ands	r2, r1
 800591e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d100      	bne.n	800592a <HAL_RCC_OscConfig+0x496>
 8005928:	e0b0      	b.n	8005a8c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800592a:	4b5b      	ldr	r3, [pc, #364]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	2238      	movs	r2, #56	; 0x38
 8005930:	4013      	ands	r3, r2
 8005932:	2b10      	cmp	r3, #16
 8005934:	d100      	bne.n	8005938 <HAL_RCC_OscConfig+0x4a4>
 8005936:	e078      	b.n	8005a2a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	2b02      	cmp	r3, #2
 800593e:	d153      	bne.n	80059e8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005940:	4b55      	ldr	r3, [pc, #340]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	4b54      	ldr	r3, [pc, #336]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005946:	4958      	ldr	r1, [pc, #352]	; (8005aa8 <HAL_RCC_OscConfig+0x614>)
 8005948:	400a      	ands	r2, r1
 800594a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594c:	f7fe f838 	bl	80039c0 <HAL_GetTick>
 8005950:	0003      	movs	r3, r0
 8005952:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005954:	e008      	b.n	8005968 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005956:	f7fe f833 	bl	80039c0 <HAL_GetTick>
 800595a:	0002      	movs	r2, r0
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e092      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005968:	4b4b      	ldr	r3, [pc, #300]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	2380      	movs	r3, #128	; 0x80
 800596e:	049b      	lsls	r3, r3, #18
 8005970:	4013      	ands	r3, r2
 8005972:	d1f0      	bne.n	8005956 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005974:	4b48      	ldr	r3, [pc, #288]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	4a4c      	ldr	r2, [pc, #304]	; (8005aac <HAL_RCC_OscConfig+0x618>)
 800597a:	4013      	ands	r3, r2
 800597c:	0019      	movs	r1, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1a      	ldr	r2, [r3, #32]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	431a      	orrs	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598c:	021b      	lsls	r3, r3, #8
 800598e:	431a      	orrs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	431a      	orrs	r2, r3
 800599c:	4b3e      	ldr	r3, [pc, #248]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 800599e:	430a      	orrs	r2, r1
 80059a0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059a2:	4b3d      	ldr	r3, [pc, #244]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	4b3c      	ldr	r3, [pc, #240]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80059a8:	2180      	movs	r1, #128	; 0x80
 80059aa:	0449      	lsls	r1, r1, #17
 80059ac:	430a      	orrs	r2, r1
 80059ae:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80059b0:	4b39      	ldr	r3, [pc, #228]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	4b38      	ldr	r3, [pc, #224]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80059b6:	2180      	movs	r1, #128	; 0x80
 80059b8:	0549      	lsls	r1, r1, #21
 80059ba:	430a      	orrs	r2, r1
 80059bc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059be:	f7fd ffff 	bl	80039c0 <HAL_GetTick>
 80059c2:	0003      	movs	r3, r0
 80059c4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059c8:	f7fd fffa 	bl	80039c0 <HAL_GetTick>
 80059cc:	0002      	movs	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e059      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059da:	4b2f      	ldr	r3, [pc, #188]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	2380      	movs	r3, #128	; 0x80
 80059e0:	049b      	lsls	r3, r3, #18
 80059e2:	4013      	ands	r3, r2
 80059e4:	d0f0      	beq.n	80059c8 <HAL_RCC_OscConfig+0x534>
 80059e6:	e051      	b.n	8005a8c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059e8:	4b2b      	ldr	r3, [pc, #172]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	4b2a      	ldr	r3, [pc, #168]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 80059ee:	492e      	ldr	r1, [pc, #184]	; (8005aa8 <HAL_RCC_OscConfig+0x614>)
 80059f0:	400a      	ands	r2, r1
 80059f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f4:	f7fd ffe4 	bl	80039c0 <HAL_GetTick>
 80059f8:	0003      	movs	r3, r0
 80059fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059fc:	e008      	b.n	8005a10 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059fe:	f7fd ffdf 	bl	80039c0 <HAL_GetTick>
 8005a02:	0002      	movs	r2, r0
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d901      	bls.n	8005a10 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e03e      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a10:	4b21      	ldr	r3, [pc, #132]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	2380      	movs	r3, #128	; 0x80
 8005a16:	049b      	lsls	r3, r3, #18
 8005a18:	4013      	ands	r3, r2
 8005a1a:	d1f0      	bne.n	80059fe <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8005a1c:	4b1e      	ldr	r3, [pc, #120]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005a1e:	68da      	ldr	r2, [r3, #12]
 8005a20:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005a22:	4923      	ldr	r1, [pc, #140]	; (8005ab0 <HAL_RCC_OscConfig+0x61c>)
 8005a24:	400a      	ands	r2, r1
 8005a26:	60da      	str	r2, [r3, #12]
 8005a28:	e030      	b.n	8005a8c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d101      	bne.n	8005a36 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e02b      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005a36:	4b18      	ldr	r3, [pc, #96]	; (8005a98 <HAL_RCC_OscConfig+0x604>)
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2203      	movs	r2, #3
 8005a40:	401a      	ands	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d11e      	bne.n	8005a88 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2270      	movs	r2, #112	; 0x70
 8005a4e:	401a      	ands	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d117      	bne.n	8005a88 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	23fe      	movs	r3, #254	; 0xfe
 8005a5c:	01db      	lsls	r3, r3, #7
 8005a5e:	401a      	ands	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a64:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d10e      	bne.n	8005a88 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	23f8      	movs	r3, #248	; 0xf8
 8005a6e:	039b      	lsls	r3, r3, #14
 8005a70:	401a      	ands	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d106      	bne.n	8005a88 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	0f5b      	lsrs	r3, r3, #29
 8005a7e:	075a      	lsls	r2, r3, #29
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d001      	beq.n	8005a8c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e000      	b.n	8005a8e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	0018      	movs	r0, r3
 8005a90:	46bd      	mov	sp, r7
 8005a92:	b008      	add	sp, #32
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	40007000 	.word	0x40007000
 8005aa0:	00001388 	.word	0x00001388
 8005aa4:	efffffff 	.word	0xefffffff
 8005aa8:	feffffff 	.word	0xfeffffff
 8005aac:	1fc1808c 	.word	0x1fc1808c
 8005ab0:	effefffc 	.word	0xeffefffc

08005ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e0e9      	b.n	8005c9c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ac8:	4b76      	ldr	r3, [pc, #472]	; (8005ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2207      	movs	r2, #7
 8005ace:	4013      	ands	r3, r2
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d91e      	bls.n	8005b14 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ad6:	4b73      	ldr	r3, [pc, #460]	; (8005ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2207      	movs	r2, #7
 8005adc:	4393      	bics	r3, r2
 8005ade:	0019      	movs	r1, r3
 8005ae0:	4b70      	ldr	r3, [pc, #448]	; (8005ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ae8:	f7fd ff6a 	bl	80039c0 <HAL_GetTick>
 8005aec:	0003      	movs	r3, r0
 8005aee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005af0:	e009      	b.n	8005b06 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005af2:	f7fd ff65 	bl	80039c0 <HAL_GetTick>
 8005af6:	0002      	movs	r2, r0
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	4a6a      	ldr	r2, [pc, #424]	; (8005ca8 <HAL_RCC_ClockConfig+0x1f4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e0ca      	b.n	8005c9c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b06:	4b67      	ldr	r3, [pc, #412]	; (8005ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2207      	movs	r2, #7
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d1ee      	bne.n	8005af2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	d015      	beq.n	8005b4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2204      	movs	r2, #4
 8005b24:	4013      	ands	r3, r2
 8005b26:	d006      	beq.n	8005b36 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005b28:	4b60      	ldr	r3, [pc, #384]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	4b5f      	ldr	r3, [pc, #380]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005b2e:	21e0      	movs	r1, #224	; 0xe0
 8005b30:	01c9      	lsls	r1, r1, #7
 8005b32:	430a      	orrs	r2, r1
 8005b34:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b36:	4b5d      	ldr	r3, [pc, #372]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	4a5d      	ldr	r2, [pc, #372]	; (8005cb0 <HAL_RCC_ClockConfig+0x1fc>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	0019      	movs	r1, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	4b59      	ldr	r3, [pc, #356]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005b46:	430a      	orrs	r2, r1
 8005b48:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	4013      	ands	r3, r2
 8005b52:	d057      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d107      	bne.n	8005b6c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b5c:	4b53      	ldr	r3, [pc, #332]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	2380      	movs	r3, #128	; 0x80
 8005b62:	029b      	lsls	r3, r3, #10
 8005b64:	4013      	ands	r3, r2
 8005b66:	d12b      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e097      	b.n	8005c9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d107      	bne.n	8005b84 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b74:	4b4d      	ldr	r3, [pc, #308]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	2380      	movs	r3, #128	; 0x80
 8005b7a:	049b      	lsls	r3, r3, #18
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d11f      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e08b      	b.n	8005c9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d107      	bne.n	8005b9c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b8c:	4b47      	ldr	r3, [pc, #284]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	2380      	movs	r3, #128	; 0x80
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	4013      	ands	r3, r2
 8005b96:	d113      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e07f      	b.n	8005c9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d106      	bne.n	8005bb2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ba4:	4b41      	ldr	r3, [pc, #260]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba8:	2202      	movs	r2, #2
 8005baa:	4013      	ands	r3, r2
 8005bac:	d108      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e074      	b.n	8005c9c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bb2:	4b3e      	ldr	r3, [pc, #248]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	4013      	ands	r3, r2
 8005bba:	d101      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e06d      	b.n	8005c9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bc0:	4b3a      	ldr	r3, [pc, #232]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	2207      	movs	r2, #7
 8005bc6:	4393      	bics	r3, r2
 8005bc8:	0019      	movs	r1, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	4b37      	ldr	r3, [pc, #220]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bd4:	f7fd fef4 	bl	80039c0 <HAL_GetTick>
 8005bd8:	0003      	movs	r3, r0
 8005bda:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bdc:	e009      	b.n	8005bf2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bde:	f7fd feef 	bl	80039c0 <HAL_GetTick>
 8005be2:	0002      	movs	r2, r0
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	4a2f      	ldr	r2, [pc, #188]	; (8005ca8 <HAL_RCC_ClockConfig+0x1f4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e054      	b.n	8005c9c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bf2:	4b2e      	ldr	r3, [pc, #184]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	2238      	movs	r2, #56	; 0x38
 8005bf8:	401a      	ands	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d1ec      	bne.n	8005bde <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c04:	4b27      	ldr	r3, [pc, #156]	; (8005ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2207      	movs	r2, #7
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d21e      	bcs.n	8005c50 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c12:	4b24      	ldr	r3, [pc, #144]	; (8005ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2207      	movs	r2, #7
 8005c18:	4393      	bics	r3, r2
 8005c1a:	0019      	movs	r1, r3
 8005c1c:	4b21      	ldr	r3, [pc, #132]	; (8005ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c24:	f7fd fecc 	bl	80039c0 <HAL_GetTick>
 8005c28:	0003      	movs	r3, r0
 8005c2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c2c:	e009      	b.n	8005c42 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c2e:	f7fd fec7 	bl	80039c0 <HAL_GetTick>
 8005c32:	0002      	movs	r2, r0
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	4a1b      	ldr	r2, [pc, #108]	; (8005ca8 <HAL_RCC_ClockConfig+0x1f4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e02c      	b.n	8005c9c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c42:	4b18      	ldr	r3, [pc, #96]	; (8005ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2207      	movs	r2, #7
 8005c48:	4013      	ands	r3, r2
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d1ee      	bne.n	8005c2e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2204      	movs	r2, #4
 8005c56:	4013      	ands	r3, r2
 8005c58:	d009      	beq.n	8005c6e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005c5a:	4b14      	ldr	r3, [pc, #80]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	4a15      	ldr	r2, [pc, #84]	; (8005cb4 <HAL_RCC_ClockConfig+0x200>)
 8005c60:	4013      	ands	r3, r2
 8005c62:	0019      	movs	r1, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	4b10      	ldr	r3, [pc, #64]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005c6e:	f000 f829 	bl	8005cc4 <HAL_RCC_GetSysClockFreq>
 8005c72:	0001      	movs	r1, r0
 8005c74:	4b0d      	ldr	r3, [pc, #52]	; (8005cac <HAL_RCC_ClockConfig+0x1f8>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	0a1b      	lsrs	r3, r3, #8
 8005c7a:	220f      	movs	r2, #15
 8005c7c:	401a      	ands	r2, r3
 8005c7e:	4b0e      	ldr	r3, [pc, #56]	; (8005cb8 <HAL_RCC_ClockConfig+0x204>)
 8005c80:	0092      	lsls	r2, r2, #2
 8005c82:	58d3      	ldr	r3, [r2, r3]
 8005c84:	221f      	movs	r2, #31
 8005c86:	4013      	ands	r3, r2
 8005c88:	000a      	movs	r2, r1
 8005c8a:	40da      	lsrs	r2, r3
 8005c8c:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <HAL_RCC_ClockConfig+0x208>)
 8005c8e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <HAL_RCC_ClockConfig+0x20c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	0018      	movs	r0, r3
 8005c96:	f7fd fe37 	bl	8003908 <HAL_InitTick>
 8005c9a:	0003      	movs	r3, r0
}
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	b004      	add	sp, #16
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	40022000 	.word	0x40022000
 8005ca8:	00001388 	.word	0x00001388
 8005cac:	40021000 	.word	0x40021000
 8005cb0:	fffff0ff 	.word	0xfffff0ff
 8005cb4:	ffff8fff 	.word	0xffff8fff
 8005cb8:	08006e8c 	.word	0x08006e8c
 8005cbc:	20000000 	.word	0x20000000
 8005cc0:	20000004 	.word	0x20000004

08005cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cca:	4b3c      	ldr	r3, [pc, #240]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	2238      	movs	r2, #56	; 0x38
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	d10f      	bne.n	8005cf4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005cd4:	4b39      	ldr	r3, [pc, #228]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	0adb      	lsrs	r3, r3, #11
 8005cda:	2207      	movs	r2, #7
 8005cdc:	4013      	ands	r3, r2
 8005cde:	2201      	movs	r2, #1
 8005ce0:	409a      	lsls	r2, r3
 8005ce2:	0013      	movs	r3, r2
 8005ce4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005ce6:	6839      	ldr	r1, [r7, #0]
 8005ce8:	4835      	ldr	r0, [pc, #212]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005cea:	f7fa fa11 	bl	8000110 <__udivsi3>
 8005cee:	0003      	movs	r3, r0
 8005cf0:	613b      	str	r3, [r7, #16]
 8005cf2:	e05d      	b.n	8005db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cf4:	4b31      	ldr	r3, [pc, #196]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2238      	movs	r2, #56	; 0x38
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d102      	bne.n	8005d06 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d00:	4b30      	ldr	r3, [pc, #192]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005d02:	613b      	str	r3, [r7, #16]
 8005d04:	e054      	b.n	8005db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d06:	4b2d      	ldr	r3, [pc, #180]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	2238      	movs	r2, #56	; 0x38
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	2b10      	cmp	r3, #16
 8005d10:	d138      	bne.n	8005d84 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005d12:	4b2a      	ldr	r3, [pc, #168]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	2203      	movs	r2, #3
 8005d18:	4013      	ands	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d1c:	4b27      	ldr	r3, [pc, #156]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	091b      	lsrs	r3, r3, #4
 8005d22:	2207      	movs	r2, #7
 8005d24:	4013      	ands	r3, r2
 8005d26:	3301      	adds	r3, #1
 8005d28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2b03      	cmp	r3, #3
 8005d2e:	d10d      	bne.n	8005d4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d30:	68b9      	ldr	r1, [r7, #8]
 8005d32:	4824      	ldr	r0, [pc, #144]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005d34:	f7fa f9ec 	bl	8000110 <__udivsi3>
 8005d38:	0003      	movs	r3, r0
 8005d3a:	0019      	movs	r1, r3
 8005d3c:	4b1f      	ldr	r3, [pc, #124]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	0a1b      	lsrs	r3, r3, #8
 8005d42:	227f      	movs	r2, #127	; 0x7f
 8005d44:	4013      	ands	r3, r2
 8005d46:	434b      	muls	r3, r1
 8005d48:	617b      	str	r3, [r7, #20]
        break;
 8005d4a:	e00d      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005d4c:	68b9      	ldr	r1, [r7, #8]
 8005d4e:	481c      	ldr	r0, [pc, #112]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005d50:	f7fa f9de 	bl	8000110 <__udivsi3>
 8005d54:	0003      	movs	r3, r0
 8005d56:	0019      	movs	r1, r3
 8005d58:	4b18      	ldr	r3, [pc, #96]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	0a1b      	lsrs	r3, r3, #8
 8005d5e:	227f      	movs	r2, #127	; 0x7f
 8005d60:	4013      	ands	r3, r2
 8005d62:	434b      	muls	r3, r1
 8005d64:	617b      	str	r3, [r7, #20]
        break;
 8005d66:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005d68:	4b14      	ldr	r3, [pc, #80]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	0f5b      	lsrs	r3, r3, #29
 8005d6e:	2207      	movs	r2, #7
 8005d70:	4013      	ands	r3, r2
 8005d72:	3301      	adds	r3, #1
 8005d74:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	6978      	ldr	r0, [r7, #20]
 8005d7a:	f7fa f9c9 	bl	8000110 <__udivsi3>
 8005d7e:	0003      	movs	r3, r0
 8005d80:	613b      	str	r3, [r7, #16]
 8005d82:	e015      	b.n	8005db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005d84:	4b0d      	ldr	r3, [pc, #52]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	2238      	movs	r2, #56	; 0x38
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	d103      	bne.n	8005d98 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005d90:	2380      	movs	r3, #128	; 0x80
 8005d92:	021b      	lsls	r3, r3, #8
 8005d94:	613b      	str	r3, [r7, #16]
 8005d96:	e00b      	b.n	8005db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005d98:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	2238      	movs	r2, #56	; 0x38
 8005d9e:	4013      	ands	r3, r2
 8005da0:	2b18      	cmp	r3, #24
 8005da2:	d103      	bne.n	8005dac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005da4:	23fa      	movs	r3, #250	; 0xfa
 8005da6:	01db      	lsls	r3, r3, #7
 8005da8:	613b      	str	r3, [r7, #16]
 8005daa:	e001      	b.n	8005db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005db0:	693b      	ldr	r3, [r7, #16]
}
 8005db2:	0018      	movs	r0, r3
 8005db4:	46bd      	mov	sp, r7
 8005db6:	b006      	add	sp, #24
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	46c0      	nop			; (mov r8, r8)
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	00f42400 	.word	0x00f42400
 8005dc4:	007a1200 	.word	0x007a1200

08005dc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dcc:	4b02      	ldr	r3, [pc, #8]	; (8005dd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005dce:	681b      	ldr	r3, [r3, #0]
}
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	46c0      	nop			; (mov r8, r8)
 8005dd8:	20000000 	.word	0x20000000

08005ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ddc:	b5b0      	push	{r4, r5, r7, lr}
 8005dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005de0:	f7ff fff2 	bl	8005dc8 <HAL_RCC_GetHCLKFreq>
 8005de4:	0004      	movs	r4, r0
 8005de6:	f7ff fb49 	bl	800547c <LL_RCC_GetAPB1Prescaler>
 8005dea:	0003      	movs	r3, r0
 8005dec:	0b1a      	lsrs	r2, r3, #12
 8005dee:	4b05      	ldr	r3, [pc, #20]	; (8005e04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005df0:	0092      	lsls	r2, r2, #2
 8005df2:	58d3      	ldr	r3, [r2, r3]
 8005df4:	221f      	movs	r2, #31
 8005df6:	4013      	ands	r3, r2
 8005df8:	40dc      	lsrs	r4, r3
 8005dfa:	0023      	movs	r3, r4
}
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bdb0      	pop	{r4, r5, r7, pc}
 8005e02:	46c0      	nop			; (mov r8, r8)
 8005e04:	08006ecc 	.word	0x08006ecc

08005e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005e10:	2313      	movs	r3, #19
 8005e12:	18fb      	adds	r3, r7, r3
 8005e14:	2200      	movs	r2, #0
 8005e16:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e18:	2312      	movs	r3, #18
 8005e1a:	18fb      	adds	r3, r7, r3
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	2380      	movs	r3, #128	; 0x80
 8005e26:	029b      	lsls	r3, r3, #10
 8005e28:	4013      	ands	r3, r2
 8005e2a:	d100      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005e2c:	e0a3      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e2e:	2011      	movs	r0, #17
 8005e30:	183b      	adds	r3, r7, r0
 8005e32:	2200      	movs	r2, #0
 8005e34:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e36:	4b7f      	ldr	r3, [pc, #508]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e3a:	2380      	movs	r3, #128	; 0x80
 8005e3c:	055b      	lsls	r3, r3, #21
 8005e3e:	4013      	ands	r3, r2
 8005e40:	d110      	bne.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e42:	4b7c      	ldr	r3, [pc, #496]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e46:	4b7b      	ldr	r3, [pc, #492]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e48:	2180      	movs	r1, #128	; 0x80
 8005e4a:	0549      	lsls	r1, r1, #21
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005e50:	4b78      	ldr	r3, [pc, #480]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e54:	2380      	movs	r3, #128	; 0x80
 8005e56:	055b      	lsls	r3, r3, #21
 8005e58:	4013      	ands	r3, r2
 8005e5a:	60bb      	str	r3, [r7, #8]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e5e:	183b      	adds	r3, r7, r0
 8005e60:	2201      	movs	r2, #1
 8005e62:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e64:	4b74      	ldr	r3, [pc, #464]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	4b73      	ldr	r3, [pc, #460]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005e6a:	2180      	movs	r1, #128	; 0x80
 8005e6c:	0049      	lsls	r1, r1, #1
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e72:	f7fd fda5 	bl	80039c0 <HAL_GetTick>
 8005e76:	0003      	movs	r3, r0
 8005e78:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e7a:	e00b      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e7c:	f7fd fda0 	bl	80039c0 <HAL_GetTick>
 8005e80:	0002      	movs	r2, r0
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d904      	bls.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005e8a:	2313      	movs	r3, #19
 8005e8c:	18fb      	adds	r3, r7, r3
 8005e8e:	2203      	movs	r2, #3
 8005e90:	701a      	strb	r2, [r3, #0]
        break;
 8005e92:	e005      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e94:	4b68      	ldr	r3, [pc, #416]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	2380      	movs	r3, #128	; 0x80
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	d0ed      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005ea0:	2313      	movs	r3, #19
 8005ea2:	18fb      	adds	r3, r7, r3
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d154      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005eaa:	4b62      	ldr	r3, [pc, #392]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005eac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005eae:	23c0      	movs	r3, #192	; 0xc0
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d019      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d014      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ec6:	4b5b      	ldr	r3, [pc, #364]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eca:	4a5c      	ldr	r2, [pc, #368]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ed0:	4b58      	ldr	r3, [pc, #352]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ed2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ed4:	4b57      	ldr	r3, [pc, #348]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ed6:	2180      	movs	r1, #128	; 0x80
 8005ed8:	0249      	lsls	r1, r1, #9
 8005eda:	430a      	orrs	r2, r1
 8005edc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ede:	4b55      	ldr	r3, [pc, #340]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ee0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ee2:	4b54      	ldr	r3, [pc, #336]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ee4:	4956      	ldr	r1, [pc, #344]	; (8006040 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8005ee6:	400a      	ands	r2, r1
 8005ee8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005eea:	4b52      	ldr	r3, [pc, #328]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	d016      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef8:	f7fd fd62 	bl	80039c0 <HAL_GetTick>
 8005efc:	0003      	movs	r3, r0
 8005efe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f00:	e00c      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f02:	f7fd fd5d 	bl	80039c0 <HAL_GetTick>
 8005f06:	0002      	movs	r2, r0
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	4a4d      	ldr	r2, [pc, #308]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d904      	bls.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005f12:	2313      	movs	r3, #19
 8005f14:	18fb      	adds	r3, r7, r3
 8005f16:	2203      	movs	r2, #3
 8005f18:	701a      	strb	r2, [r3, #0]
            break;
 8005f1a:	e004      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f1c:	4b45      	ldr	r3, [pc, #276]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f20:	2202      	movs	r2, #2
 8005f22:	4013      	ands	r3, r2
 8005f24:	d0ed      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005f26:	2313      	movs	r3, #19
 8005f28:	18fb      	adds	r3, r7, r3
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10a      	bne.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f30:	4b40      	ldr	r3, [pc, #256]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f34:	4a41      	ldr	r2, [pc, #260]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005f36:	4013      	ands	r3, r2
 8005f38:	0019      	movs	r1, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	695a      	ldr	r2, [r3, #20]
 8005f3e:	4b3d      	ldr	r3, [pc, #244]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005f40:	430a      	orrs	r2, r1
 8005f42:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f44:	e00c      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f46:	2312      	movs	r3, #18
 8005f48:	18fb      	adds	r3, r7, r3
 8005f4a:	2213      	movs	r2, #19
 8005f4c:	18ba      	adds	r2, r7, r2
 8005f4e:	7812      	ldrb	r2, [r2, #0]
 8005f50:	701a      	strb	r2, [r3, #0]
 8005f52:	e005      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f54:	2312      	movs	r3, #18
 8005f56:	18fb      	adds	r3, r7, r3
 8005f58:	2213      	movs	r2, #19
 8005f5a:	18ba      	adds	r2, r7, r2
 8005f5c:	7812      	ldrb	r2, [r2, #0]
 8005f5e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f60:	2311      	movs	r3, #17
 8005f62:	18fb      	adds	r3, r7, r3
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d105      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f6a:	4b32      	ldr	r3, [pc, #200]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005f6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f6e:	4b31      	ldr	r3, [pc, #196]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005f70:	4935      	ldr	r1, [pc, #212]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f72:	400a      	ands	r2, r1
 8005f74:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	d009      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f80:	4b2c      	ldr	r3, [pc, #176]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f84:	2203      	movs	r2, #3
 8005f86:	4393      	bics	r3, r2
 8005f88:	0019      	movs	r1, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	4b29      	ldr	r3, [pc, #164]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005f90:	430a      	orrs	r2, r1
 8005f92:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	d009      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f9e:	4b25      	ldr	r3, [pc, #148]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa2:	4a2a      	ldr	r2, [pc, #168]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	0019      	movs	r1, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	4b21      	ldr	r3, [pc, #132]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	2380      	movs	r3, #128	; 0x80
 8005fb8:	01db      	lsls	r3, r3, #7
 8005fba:	4013      	ands	r3, r2
 8005fbc:	d015      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fbe:	4b1d      	ldr	r3, [pc, #116]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	0899      	lsrs	r1, r3, #2
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691a      	ldr	r2, [r3, #16]
 8005fca:	4b1a      	ldr	r3, [pc, #104]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691a      	ldr	r2, [r3, #16]
 8005fd4:	2380      	movs	r3, #128	; 0x80
 8005fd6:	05db      	lsls	r3, r3, #23
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d106      	bne.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005fdc:	4b15      	ldr	r3, [pc, #84]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	4b14      	ldr	r3, [pc, #80]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005fe2:	2180      	movs	r1, #128	; 0x80
 8005fe4:	0249      	lsls	r1, r1, #9
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	2380      	movs	r3, #128	; 0x80
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	d016      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005ff6:	4b0f      	ldr	r3, [pc, #60]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffa:	4a15      	ldr	r2, [pc, #84]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	0019      	movs	r1, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68da      	ldr	r2, [r3, #12]
 8006004:	4b0b      	ldr	r3, [pc, #44]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006006:	430a      	orrs	r2, r1
 8006008:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	2380      	movs	r3, #128	; 0x80
 8006010:	01db      	lsls	r3, r3, #7
 8006012:	429a      	cmp	r2, r3
 8006014:	d106      	bne.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006016:	4b07      	ldr	r3, [pc, #28]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006018:	68da      	ldr	r2, [r3, #12]
 800601a:	4b06      	ldr	r3, [pc, #24]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800601c:	2180      	movs	r1, #128	; 0x80
 800601e:	0249      	lsls	r1, r1, #9
 8006020:	430a      	orrs	r2, r1
 8006022:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006024:	2312      	movs	r3, #18
 8006026:	18fb      	adds	r3, r7, r3
 8006028:	781b      	ldrb	r3, [r3, #0]
}
 800602a:	0018      	movs	r0, r3
 800602c:	46bd      	mov	sp, r7
 800602e:	b006      	add	sp, #24
 8006030:	bd80      	pop	{r7, pc}
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	40021000 	.word	0x40021000
 8006038:	40007000 	.word	0x40007000
 800603c:	fffffcff 	.word	0xfffffcff
 8006040:	fffeffff 	.word	0xfffeffff
 8006044:	00001388 	.word	0x00001388
 8006048:	efffffff 	.word	0xefffffff
 800604c:	ffffcfff 	.word	0xffffcfff
 8006050:	ffff3fff 	.word	0xffff3fff

08006054 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e046      	b.n	80060f4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2288      	movs	r2, #136	; 0x88
 800606a:	589b      	ldr	r3, [r3, r2]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d107      	bne.n	8006080 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2284      	movs	r2, #132	; 0x84
 8006074:	2100      	movs	r1, #0
 8006076:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	0018      	movs	r0, r3
 800607c:	f7fd f8a4 	bl	80031c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2288      	movs	r2, #136	; 0x88
 8006084:	2124      	movs	r1, #36	; 0x24
 8006086:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2101      	movs	r1, #1
 8006094:	438a      	bics	r2, r1
 8006096:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	0018      	movs	r0, r3
 800609c:	f000 f830 	bl	8006100 <UART_SetConfig>
 80060a0:	0003      	movs	r3, r0
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d101      	bne.n	80060aa <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e024      	b.n	80060f4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	0018      	movs	r0, r3
 80060b6:	f000 f98d 	bl	80063d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	490d      	ldr	r1, [pc, #52]	; (80060fc <HAL_UART_Init+0xa8>)
 80060c6:	400a      	ands	r2, r1
 80060c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	212a      	movs	r1, #42	; 0x2a
 80060d6:	438a      	bics	r2, r1
 80060d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2101      	movs	r1, #1
 80060e6:	430a      	orrs	r2, r1
 80060e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	0018      	movs	r0, r3
 80060ee:	f000 fa25 	bl	800653c <UART_CheckIdleState>
 80060f2:	0003      	movs	r3, r0
}
 80060f4:	0018      	movs	r0, r3
 80060f6:	46bd      	mov	sp, r7
 80060f8:	b002      	add	sp, #8
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	ffffb7ff 	.word	0xffffb7ff

08006100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b088      	sub	sp, #32
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006108:	231a      	movs	r3, #26
 800610a:	18fb      	adds	r3, r7, r3
 800610c:	2200      	movs	r2, #0
 800610e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	431a      	orrs	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	431a      	orrs	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	69db      	ldr	r3, [r3, #28]
 8006124:	4313      	orrs	r3, r2
 8006126:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4aa1      	ldr	r2, [pc, #644]	; (80063b4 <UART_SetConfig+0x2b4>)
 8006130:	4013      	ands	r3, r2
 8006132:	0019      	movs	r1, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	69fa      	ldr	r2, [r7, #28]
 800613a:	430a      	orrs	r2, r1
 800613c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	4a9c      	ldr	r2, [pc, #624]	; (80063b8 <UART_SetConfig+0x2b8>)
 8006146:	4013      	ands	r3, r2
 8006148:	0019      	movs	r1, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	69fa      	ldr	r2, [r7, #28]
 8006162:	4313      	orrs	r3, r2
 8006164:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	4a93      	ldr	r2, [pc, #588]	; (80063bc <UART_SetConfig+0x2bc>)
 800616e:	4013      	ands	r3, r2
 8006170:	0019      	movs	r1, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69fa      	ldr	r2, [r7, #28]
 8006178:	430a      	orrs	r2, r1
 800617a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006182:	220f      	movs	r2, #15
 8006184:	4393      	bics	r3, r2
 8006186:	0019      	movs	r1, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a89      	ldr	r2, [pc, #548]	; (80063c0 <UART_SetConfig+0x2c0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d127      	bne.n	80061ee <UART_SetConfig+0xee>
 800619e:	4b89      	ldr	r3, [pc, #548]	; (80063c4 <UART_SetConfig+0x2c4>)
 80061a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a2:	2203      	movs	r2, #3
 80061a4:	4013      	ands	r3, r2
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d017      	beq.n	80061da <UART_SetConfig+0xda>
 80061aa:	d81b      	bhi.n	80061e4 <UART_SetConfig+0xe4>
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d00a      	beq.n	80061c6 <UART_SetConfig+0xc6>
 80061b0:	d818      	bhi.n	80061e4 <UART_SetConfig+0xe4>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <UART_SetConfig+0xbc>
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d00a      	beq.n	80061d0 <UART_SetConfig+0xd0>
 80061ba:	e013      	b.n	80061e4 <UART_SetConfig+0xe4>
 80061bc:	231b      	movs	r3, #27
 80061be:	18fb      	adds	r3, r7, r3
 80061c0:	2200      	movs	r2, #0
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	e021      	b.n	800620a <UART_SetConfig+0x10a>
 80061c6:	231b      	movs	r3, #27
 80061c8:	18fb      	adds	r3, r7, r3
 80061ca:	2202      	movs	r2, #2
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	e01c      	b.n	800620a <UART_SetConfig+0x10a>
 80061d0:	231b      	movs	r3, #27
 80061d2:	18fb      	adds	r3, r7, r3
 80061d4:	2204      	movs	r2, #4
 80061d6:	701a      	strb	r2, [r3, #0]
 80061d8:	e017      	b.n	800620a <UART_SetConfig+0x10a>
 80061da:	231b      	movs	r3, #27
 80061dc:	18fb      	adds	r3, r7, r3
 80061de:	2208      	movs	r2, #8
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	e012      	b.n	800620a <UART_SetConfig+0x10a>
 80061e4:	231b      	movs	r3, #27
 80061e6:	18fb      	adds	r3, r7, r3
 80061e8:	2210      	movs	r2, #16
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	e00d      	b.n	800620a <UART_SetConfig+0x10a>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a75      	ldr	r2, [pc, #468]	; (80063c8 <UART_SetConfig+0x2c8>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d104      	bne.n	8006202 <UART_SetConfig+0x102>
 80061f8:	231b      	movs	r3, #27
 80061fa:	18fb      	adds	r3, r7, r3
 80061fc:	2200      	movs	r2, #0
 80061fe:	701a      	strb	r2, [r3, #0]
 8006200:	e003      	b.n	800620a <UART_SetConfig+0x10a>
 8006202:	231b      	movs	r3, #27
 8006204:	18fb      	adds	r3, r7, r3
 8006206:	2210      	movs	r2, #16
 8006208:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69da      	ldr	r2, [r3, #28]
 800620e:	2380      	movs	r3, #128	; 0x80
 8006210:	021b      	lsls	r3, r3, #8
 8006212:	429a      	cmp	r2, r3
 8006214:	d000      	beq.n	8006218 <UART_SetConfig+0x118>
 8006216:	e065      	b.n	80062e4 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8006218:	231b      	movs	r3, #27
 800621a:	18fb      	adds	r3, r7, r3
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b08      	cmp	r3, #8
 8006220:	d015      	beq.n	800624e <UART_SetConfig+0x14e>
 8006222:	dc18      	bgt.n	8006256 <UART_SetConfig+0x156>
 8006224:	2b04      	cmp	r3, #4
 8006226:	d00d      	beq.n	8006244 <UART_SetConfig+0x144>
 8006228:	dc15      	bgt.n	8006256 <UART_SetConfig+0x156>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <UART_SetConfig+0x134>
 800622e:	2b02      	cmp	r3, #2
 8006230:	d005      	beq.n	800623e <UART_SetConfig+0x13e>
 8006232:	e010      	b.n	8006256 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006234:	f7ff fdd2 	bl	8005ddc <HAL_RCC_GetPCLK1Freq>
 8006238:	0003      	movs	r3, r0
 800623a:	617b      	str	r3, [r7, #20]
        break;
 800623c:	e012      	b.n	8006264 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800623e:	4b63      	ldr	r3, [pc, #396]	; (80063cc <UART_SetConfig+0x2cc>)
 8006240:	617b      	str	r3, [r7, #20]
        break;
 8006242:	e00f      	b.n	8006264 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006244:	f7ff fd3e 	bl	8005cc4 <HAL_RCC_GetSysClockFreq>
 8006248:	0003      	movs	r3, r0
 800624a:	617b      	str	r3, [r7, #20]
        break;
 800624c:	e00a      	b.n	8006264 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800624e:	2380      	movs	r3, #128	; 0x80
 8006250:	021b      	lsls	r3, r3, #8
 8006252:	617b      	str	r3, [r7, #20]
        break;
 8006254:	e006      	b.n	8006264 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800625a:	231a      	movs	r3, #26
 800625c:	18fb      	adds	r3, r7, r3
 800625e:	2201      	movs	r2, #1
 8006260:	701a      	strb	r2, [r3, #0]
        break;
 8006262:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d100      	bne.n	800626c <UART_SetConfig+0x16c>
 800626a:	e08d      	b.n	8006388 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006270:	4b57      	ldr	r3, [pc, #348]	; (80063d0 <UART_SetConfig+0x2d0>)
 8006272:	0052      	lsls	r2, r2, #1
 8006274:	5ad3      	ldrh	r3, [r2, r3]
 8006276:	0019      	movs	r1, r3
 8006278:	6978      	ldr	r0, [r7, #20]
 800627a:	f7f9 ff49 	bl	8000110 <__udivsi3>
 800627e:	0003      	movs	r3, r0
 8006280:	005a      	lsls	r2, r3, #1
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	085b      	lsrs	r3, r3, #1
 8006288:	18d2      	adds	r2, r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	0019      	movs	r1, r3
 8006290:	0010      	movs	r0, r2
 8006292:	f7f9 ff3d 	bl	8000110 <__udivsi3>
 8006296:	0003      	movs	r3, r0
 8006298:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	2b0f      	cmp	r3, #15
 800629e:	d91c      	bls.n	80062da <UART_SetConfig+0x1da>
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	2380      	movs	r3, #128	; 0x80
 80062a4:	025b      	lsls	r3, r3, #9
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d217      	bcs.n	80062da <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	200e      	movs	r0, #14
 80062b0:	183b      	adds	r3, r7, r0
 80062b2:	210f      	movs	r1, #15
 80062b4:	438a      	bics	r2, r1
 80062b6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	085b      	lsrs	r3, r3, #1
 80062bc:	b29b      	uxth	r3, r3
 80062be:	2207      	movs	r2, #7
 80062c0:	4013      	ands	r3, r2
 80062c2:	b299      	uxth	r1, r3
 80062c4:	183b      	adds	r3, r7, r0
 80062c6:	183a      	adds	r2, r7, r0
 80062c8:	8812      	ldrh	r2, [r2, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	183a      	adds	r2, r7, r0
 80062d4:	8812      	ldrh	r2, [r2, #0]
 80062d6:	60da      	str	r2, [r3, #12]
 80062d8:	e056      	b.n	8006388 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80062da:	231a      	movs	r3, #26
 80062dc:	18fb      	adds	r3, r7, r3
 80062de:	2201      	movs	r2, #1
 80062e0:	701a      	strb	r2, [r3, #0]
 80062e2:	e051      	b.n	8006388 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062e4:	231b      	movs	r3, #27
 80062e6:	18fb      	adds	r3, r7, r3
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	2b08      	cmp	r3, #8
 80062ec:	d015      	beq.n	800631a <UART_SetConfig+0x21a>
 80062ee:	dc18      	bgt.n	8006322 <UART_SetConfig+0x222>
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d00d      	beq.n	8006310 <UART_SetConfig+0x210>
 80062f4:	dc15      	bgt.n	8006322 <UART_SetConfig+0x222>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <UART_SetConfig+0x200>
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d005      	beq.n	800630a <UART_SetConfig+0x20a>
 80062fe:	e010      	b.n	8006322 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006300:	f7ff fd6c 	bl	8005ddc <HAL_RCC_GetPCLK1Freq>
 8006304:	0003      	movs	r3, r0
 8006306:	617b      	str	r3, [r7, #20]
        break;
 8006308:	e012      	b.n	8006330 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800630a:	4b30      	ldr	r3, [pc, #192]	; (80063cc <UART_SetConfig+0x2cc>)
 800630c:	617b      	str	r3, [r7, #20]
        break;
 800630e:	e00f      	b.n	8006330 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006310:	f7ff fcd8 	bl	8005cc4 <HAL_RCC_GetSysClockFreq>
 8006314:	0003      	movs	r3, r0
 8006316:	617b      	str	r3, [r7, #20]
        break;
 8006318:	e00a      	b.n	8006330 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800631a:	2380      	movs	r3, #128	; 0x80
 800631c:	021b      	lsls	r3, r3, #8
 800631e:	617b      	str	r3, [r7, #20]
        break;
 8006320:	e006      	b.n	8006330 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006326:	231a      	movs	r3, #26
 8006328:	18fb      	adds	r3, r7, r3
 800632a:	2201      	movs	r2, #1
 800632c:	701a      	strb	r2, [r3, #0]
        break;
 800632e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d028      	beq.n	8006388 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800633a:	4b25      	ldr	r3, [pc, #148]	; (80063d0 <UART_SetConfig+0x2d0>)
 800633c:	0052      	lsls	r2, r2, #1
 800633e:	5ad3      	ldrh	r3, [r2, r3]
 8006340:	0019      	movs	r1, r3
 8006342:	6978      	ldr	r0, [r7, #20]
 8006344:	f7f9 fee4 	bl	8000110 <__udivsi3>
 8006348:	0003      	movs	r3, r0
 800634a:	001a      	movs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	085b      	lsrs	r3, r3, #1
 8006352:	18d2      	adds	r2, r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	0019      	movs	r1, r3
 800635a:	0010      	movs	r0, r2
 800635c:	f7f9 fed8 	bl	8000110 <__udivsi3>
 8006360:	0003      	movs	r3, r0
 8006362:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	2b0f      	cmp	r3, #15
 8006368:	d90a      	bls.n	8006380 <UART_SetConfig+0x280>
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	2380      	movs	r3, #128	; 0x80
 800636e:	025b      	lsls	r3, r3, #9
 8006370:	429a      	cmp	r2, r3
 8006372:	d205      	bcs.n	8006380 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	b29a      	uxth	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	60da      	str	r2, [r3, #12]
 800637e:	e003      	b.n	8006388 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8006380:	231a      	movs	r3, #26
 8006382:	18fb      	adds	r3, r7, r3
 8006384:	2201      	movs	r2, #1
 8006386:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	226a      	movs	r2, #106	; 0x6a
 800638c:	2101      	movs	r1, #1
 800638e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2268      	movs	r2, #104	; 0x68
 8006394:	2101      	movs	r1, #1
 8006396:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80063a4:	231a      	movs	r3, #26
 80063a6:	18fb      	adds	r3, r7, r3
 80063a8:	781b      	ldrb	r3, [r3, #0]
}
 80063aa:	0018      	movs	r0, r3
 80063ac:	46bd      	mov	sp, r7
 80063ae:	b008      	add	sp, #32
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	46c0      	nop			; (mov r8, r8)
 80063b4:	cfff69f3 	.word	0xcfff69f3
 80063b8:	ffffcfff 	.word	0xffffcfff
 80063bc:	11fff4ff 	.word	0x11fff4ff
 80063c0:	40013800 	.word	0x40013800
 80063c4:	40021000 	.word	0x40021000
 80063c8:	40004400 	.word	0x40004400
 80063cc:	00f42400 	.word	0x00f42400
 80063d0:	08006eec 	.word	0x08006eec

080063d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e0:	2201      	movs	r2, #1
 80063e2:	4013      	ands	r3, r2
 80063e4:	d00b      	beq.n	80063fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	4a4a      	ldr	r2, [pc, #296]	; (8006518 <UART_AdvFeatureConfig+0x144>)
 80063ee:	4013      	ands	r3, r2
 80063f0:	0019      	movs	r1, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006402:	2202      	movs	r2, #2
 8006404:	4013      	ands	r3, r2
 8006406:	d00b      	beq.n	8006420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	4a43      	ldr	r2, [pc, #268]	; (800651c <UART_AdvFeatureConfig+0x148>)
 8006410:	4013      	ands	r3, r2
 8006412:	0019      	movs	r1, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	430a      	orrs	r2, r1
 800641e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006424:	2204      	movs	r2, #4
 8006426:	4013      	ands	r3, r2
 8006428:	d00b      	beq.n	8006442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	4a3b      	ldr	r2, [pc, #236]	; (8006520 <UART_AdvFeatureConfig+0x14c>)
 8006432:	4013      	ands	r3, r2
 8006434:	0019      	movs	r1, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006446:	2208      	movs	r2, #8
 8006448:	4013      	ands	r3, r2
 800644a:	d00b      	beq.n	8006464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	4a34      	ldr	r2, [pc, #208]	; (8006524 <UART_AdvFeatureConfig+0x150>)
 8006454:	4013      	ands	r3, r2
 8006456:	0019      	movs	r1, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	2210      	movs	r2, #16
 800646a:	4013      	ands	r3, r2
 800646c:	d00b      	beq.n	8006486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	4a2c      	ldr	r2, [pc, #176]	; (8006528 <UART_AdvFeatureConfig+0x154>)
 8006476:	4013      	ands	r3, r2
 8006478:	0019      	movs	r1, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648a:	2220      	movs	r2, #32
 800648c:	4013      	ands	r3, r2
 800648e:	d00b      	beq.n	80064a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	4a25      	ldr	r2, [pc, #148]	; (800652c <UART_AdvFeatureConfig+0x158>)
 8006498:	4013      	ands	r3, r2
 800649a:	0019      	movs	r1, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ac:	2240      	movs	r2, #64	; 0x40
 80064ae:	4013      	ands	r3, r2
 80064b0:	d01d      	beq.n	80064ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	4a1d      	ldr	r2, [pc, #116]	; (8006530 <UART_AdvFeatureConfig+0x15c>)
 80064ba:	4013      	ands	r3, r2
 80064bc:	0019      	movs	r1, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ce:	2380      	movs	r3, #128	; 0x80
 80064d0:	035b      	lsls	r3, r3, #13
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d10b      	bne.n	80064ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	4a15      	ldr	r2, [pc, #84]	; (8006534 <UART_AdvFeatureConfig+0x160>)
 80064de:	4013      	ands	r3, r2
 80064e0:	0019      	movs	r1, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f2:	2280      	movs	r2, #128	; 0x80
 80064f4:	4013      	ands	r3, r2
 80064f6:	d00b      	beq.n	8006510 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	4a0e      	ldr	r2, [pc, #56]	; (8006538 <UART_AdvFeatureConfig+0x164>)
 8006500:	4013      	ands	r3, r2
 8006502:	0019      	movs	r1, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	605a      	str	r2, [r3, #4]
  }
}
 8006510:	46c0      	nop			; (mov r8, r8)
 8006512:	46bd      	mov	sp, r7
 8006514:	b002      	add	sp, #8
 8006516:	bd80      	pop	{r7, pc}
 8006518:	fffdffff 	.word	0xfffdffff
 800651c:	fffeffff 	.word	0xfffeffff
 8006520:	fffbffff 	.word	0xfffbffff
 8006524:	ffff7fff 	.word	0xffff7fff
 8006528:	ffffefff 	.word	0xffffefff
 800652c:	ffffdfff 	.word	0xffffdfff
 8006530:	ffefffff 	.word	0xffefffff
 8006534:	ff9fffff 	.word	0xff9fffff
 8006538:	fff7ffff 	.word	0xfff7ffff

0800653c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af02      	add	r7, sp, #8
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2290      	movs	r2, #144	; 0x90
 8006548:	2100      	movs	r1, #0
 800654a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800654c:	f7fd fa38 	bl	80039c0 <HAL_GetTick>
 8006550:	0003      	movs	r3, r0
 8006552:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2208      	movs	r2, #8
 800655c:	4013      	ands	r3, r2
 800655e:	2b08      	cmp	r3, #8
 8006560:	d10c      	bne.n	800657c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2280      	movs	r2, #128	; 0x80
 8006566:	0391      	lsls	r1, r2, #14
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	4a1a      	ldr	r2, [pc, #104]	; (80065d4 <UART_CheckIdleState+0x98>)
 800656c:	9200      	str	r2, [sp, #0]
 800656e:	2200      	movs	r2, #0
 8006570:	f000 f832 	bl	80065d8 <UART_WaitOnFlagUntilTimeout>
 8006574:	1e03      	subs	r3, r0, #0
 8006576:	d001      	beq.n	800657c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e026      	b.n	80065ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2204      	movs	r2, #4
 8006584:	4013      	ands	r3, r2
 8006586:	2b04      	cmp	r3, #4
 8006588:	d10c      	bne.n	80065a4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2280      	movs	r2, #128	; 0x80
 800658e:	03d1      	lsls	r1, r2, #15
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	4a10      	ldr	r2, [pc, #64]	; (80065d4 <UART_CheckIdleState+0x98>)
 8006594:	9200      	str	r2, [sp, #0]
 8006596:	2200      	movs	r2, #0
 8006598:	f000 f81e 	bl	80065d8 <UART_WaitOnFlagUntilTimeout>
 800659c:	1e03      	subs	r3, r0, #0
 800659e:	d001      	beq.n	80065a4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e012      	b.n	80065ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2288      	movs	r2, #136	; 0x88
 80065a8:	2120      	movs	r1, #32
 80065aa:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	228c      	movs	r2, #140	; 0x8c
 80065b0:	2120      	movs	r1, #32
 80065b2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2284      	movs	r2, #132	; 0x84
 80065c4:	2100      	movs	r1, #0
 80065c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	0018      	movs	r0, r3
 80065cc:	46bd      	mov	sp, r7
 80065ce:	b004      	add	sp, #16
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	46c0      	nop			; (mov r8, r8)
 80065d4:	01ffffff 	.word	0x01ffffff

080065d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b094      	sub	sp, #80	; 0x50
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	603b      	str	r3, [r7, #0]
 80065e4:	1dfb      	adds	r3, r7, #7
 80065e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065e8:	e0a7      	b.n	800673a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065ec:	3301      	adds	r3, #1
 80065ee:	d100      	bne.n	80065f2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80065f0:	e0a3      	b.n	800673a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065f2:	f7fd f9e5 	bl	80039c0 <HAL_GetTick>
 80065f6:	0002      	movs	r2, r0
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065fe:	429a      	cmp	r2, r3
 8006600:	d302      	bcc.n	8006608 <UART_WaitOnFlagUntilTimeout+0x30>
 8006602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006604:	2b00      	cmp	r3, #0
 8006606:	d13f      	bne.n	8006688 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006608:	f3ef 8310 	mrs	r3, PRIMASK
 800660c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006610:	647b      	str	r3, [r7, #68]	; 0x44
 8006612:	2301      	movs	r3, #1
 8006614:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006618:	f383 8810 	msr	PRIMASK, r3
}
 800661c:	46c0      	nop			; (mov r8, r8)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	494e      	ldr	r1, [pc, #312]	; (8006764 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800662a:	400a      	ands	r2, r1
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006630:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	f383 8810 	msr	PRIMASK, r3
}
 8006638:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800663a:	f3ef 8310 	mrs	r3, PRIMASK
 800663e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006642:	643b      	str	r3, [r7, #64]	; 0x40
 8006644:	2301      	movs	r3, #1
 8006646:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664a:	f383 8810 	msr	PRIMASK, r3
}
 800664e:	46c0      	nop			; (mov r8, r8)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689a      	ldr	r2, [r3, #8]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2101      	movs	r1, #1
 800665c:	438a      	bics	r2, r1
 800665e:	609a      	str	r2, [r3, #8]
 8006660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006662:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006666:	f383 8810 	msr	PRIMASK, r3
}
 800666a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2288      	movs	r2, #136	; 0x88
 8006670:	2120      	movs	r1, #32
 8006672:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	228c      	movs	r2, #140	; 0x8c
 8006678:	2120      	movs	r1, #32
 800667a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2284      	movs	r2, #132	; 0x84
 8006680:	2100      	movs	r1, #0
 8006682:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e069      	b.n	800675c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2204      	movs	r2, #4
 8006690:	4013      	ands	r3, r2
 8006692:	d052      	beq.n	800673a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	69da      	ldr	r2, [r3, #28]
 800669a:	2380      	movs	r3, #128	; 0x80
 800669c:	011b      	lsls	r3, r3, #4
 800669e:	401a      	ands	r2, r3
 80066a0:	2380      	movs	r3, #128	; 0x80
 80066a2:	011b      	lsls	r3, r3, #4
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d148      	bne.n	800673a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2280      	movs	r2, #128	; 0x80
 80066ae:	0112      	lsls	r2, r2, #4
 80066b0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066b2:	f3ef 8310 	mrs	r3, PRIMASK
 80066b6:	613b      	str	r3, [r7, #16]
  return(result);
 80066b8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80066ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066bc:	2301      	movs	r3, #1
 80066be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f383 8810 	msr	PRIMASK, r3
}
 80066c6:	46c0      	nop			; (mov r8, r8)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4924      	ldr	r1, [pc, #144]	; (8006764 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80066d4:	400a      	ands	r2, r1
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	f383 8810 	msr	PRIMASK, r3
}
 80066e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066e4:	f3ef 8310 	mrs	r3, PRIMASK
 80066e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80066ea:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80066ee:	2301      	movs	r3, #1
 80066f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	f383 8810 	msr	PRIMASK, r3
}
 80066f8:	46c0      	nop			; (mov r8, r8)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2101      	movs	r1, #1
 8006706:	438a      	bics	r2, r1
 8006708:	609a      	str	r2, [r3, #8]
 800670a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	f383 8810 	msr	PRIMASK, r3
}
 8006714:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2288      	movs	r2, #136	; 0x88
 800671a:	2120      	movs	r1, #32
 800671c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	228c      	movs	r2, #140	; 0x8c
 8006722:	2120      	movs	r1, #32
 8006724:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2290      	movs	r2, #144	; 0x90
 800672a:	2120      	movs	r1, #32
 800672c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2284      	movs	r2, #132	; 0x84
 8006732:	2100      	movs	r1, #0
 8006734:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e010      	b.n	800675c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	4013      	ands	r3, r2
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	425a      	negs	r2, r3
 800674a:	4153      	adcs	r3, r2
 800674c:	b2db      	uxtb	r3, r3
 800674e:	001a      	movs	r2, r3
 8006750:	1dfb      	adds	r3, r7, #7
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	429a      	cmp	r2, r3
 8006756:	d100      	bne.n	800675a <UART_WaitOnFlagUntilTimeout+0x182>
 8006758:	e747      	b.n	80065ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	0018      	movs	r0, r3
 800675e:	46bd      	mov	sp, r7
 8006760:	b014      	add	sp, #80	; 0x50
 8006762:	bd80      	pop	{r7, pc}
 8006764:	fffffe5f 	.word	0xfffffe5f

08006768 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2284      	movs	r2, #132	; 0x84
 8006774:	5c9b      	ldrb	r3, [r3, r2]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d101      	bne.n	800677e <HAL_UARTEx_DisableFifoMode+0x16>
 800677a:	2302      	movs	r3, #2
 800677c:	e027      	b.n	80067ce <HAL_UARTEx_DisableFifoMode+0x66>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2284      	movs	r2, #132	; 0x84
 8006782:	2101      	movs	r1, #1
 8006784:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2288      	movs	r2, #136	; 0x88
 800678a:	2124      	movs	r1, #36	; 0x24
 800678c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2101      	movs	r1, #1
 80067a2:	438a      	bics	r2, r1
 80067a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4a0b      	ldr	r2, [pc, #44]	; (80067d8 <HAL_UARTEx_DisableFifoMode+0x70>)
 80067aa:	4013      	ands	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2288      	movs	r2, #136	; 0x88
 80067c0:	2120      	movs	r1, #32
 80067c2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2284      	movs	r2, #132	; 0x84
 80067c8:	2100      	movs	r1, #0
 80067ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	0018      	movs	r0, r3
 80067d0:	46bd      	mov	sp, r7
 80067d2:	b004      	add	sp, #16
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	46c0      	nop			; (mov r8, r8)
 80067d8:	dfffffff 	.word	0xdfffffff

080067dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2284      	movs	r2, #132	; 0x84
 80067ea:	5c9b      	ldrb	r3, [r3, r2]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d101      	bne.n	80067f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067f0:	2302      	movs	r3, #2
 80067f2:	e02e      	b.n	8006852 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2284      	movs	r2, #132	; 0x84
 80067f8:	2101      	movs	r1, #1
 80067fa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2288      	movs	r2, #136	; 0x88
 8006800:	2124      	movs	r1, #36	; 0x24
 8006802:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2101      	movs	r1, #1
 8006818:	438a      	bics	r2, r1
 800681a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	08d9      	lsrs	r1, r3, #3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	0018      	movs	r0, r3
 8006834:	f000 f854 	bl	80068e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2288      	movs	r2, #136	; 0x88
 8006844:	2120      	movs	r1, #32
 8006846:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2284      	movs	r2, #132	; 0x84
 800684c:	2100      	movs	r1, #0
 800684e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	0018      	movs	r0, r3
 8006854:	46bd      	mov	sp, r7
 8006856:	b004      	add	sp, #16
 8006858:	bd80      	pop	{r7, pc}
	...

0800685c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2284      	movs	r2, #132	; 0x84
 800686a:	5c9b      	ldrb	r3, [r3, r2]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d101      	bne.n	8006874 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006870:	2302      	movs	r3, #2
 8006872:	e02f      	b.n	80068d4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2284      	movs	r2, #132	; 0x84
 8006878:	2101      	movs	r1, #1
 800687a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2288      	movs	r2, #136	; 0x88
 8006880:	2124      	movs	r1, #36	; 0x24
 8006882:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2101      	movs	r1, #1
 8006898:	438a      	bics	r2, r1
 800689a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	4a0e      	ldr	r2, [pc, #56]	; (80068dc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	0019      	movs	r1, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	0018      	movs	r0, r3
 80068b6:	f000 f813 	bl	80068e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2288      	movs	r2, #136	; 0x88
 80068c6:	2120      	movs	r1, #32
 80068c8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2284      	movs	r2, #132	; 0x84
 80068ce:	2100      	movs	r1, #0
 80068d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	0018      	movs	r0, r3
 80068d6:	46bd      	mov	sp, r7
 80068d8:	b004      	add	sp, #16
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	f1ffffff 	.word	0xf1ffffff

080068e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d108      	bne.n	8006902 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	226a      	movs	r2, #106	; 0x6a
 80068f4:	2101      	movs	r1, #1
 80068f6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2268      	movs	r2, #104	; 0x68
 80068fc:	2101      	movs	r1, #1
 80068fe:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006900:	e043      	b.n	800698a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006902:	260f      	movs	r6, #15
 8006904:	19bb      	adds	r3, r7, r6
 8006906:	2208      	movs	r2, #8
 8006908:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800690a:	200e      	movs	r0, #14
 800690c:	183b      	adds	r3, r7, r0
 800690e:	2208      	movs	r2, #8
 8006910:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	0e5b      	lsrs	r3, r3, #25
 800691a:	b2da      	uxtb	r2, r3
 800691c:	240d      	movs	r4, #13
 800691e:	193b      	adds	r3, r7, r4
 8006920:	2107      	movs	r1, #7
 8006922:	400a      	ands	r2, r1
 8006924:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	0f5b      	lsrs	r3, r3, #29
 800692e:	b2da      	uxtb	r2, r3
 8006930:	250c      	movs	r5, #12
 8006932:	197b      	adds	r3, r7, r5
 8006934:	2107      	movs	r1, #7
 8006936:	400a      	ands	r2, r1
 8006938:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800693a:	183b      	adds	r3, r7, r0
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	197a      	adds	r2, r7, r5
 8006940:	7812      	ldrb	r2, [r2, #0]
 8006942:	4914      	ldr	r1, [pc, #80]	; (8006994 <UARTEx_SetNbDataToProcess+0xb4>)
 8006944:	5c8a      	ldrb	r2, [r1, r2]
 8006946:	435a      	muls	r2, r3
 8006948:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800694a:	197b      	adds	r3, r7, r5
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	4a12      	ldr	r2, [pc, #72]	; (8006998 <UARTEx_SetNbDataToProcess+0xb8>)
 8006950:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006952:	0019      	movs	r1, r3
 8006954:	f7f9 fc66 	bl	8000224 <__divsi3>
 8006958:	0003      	movs	r3, r0
 800695a:	b299      	uxth	r1, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	226a      	movs	r2, #106	; 0x6a
 8006960:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006962:	19bb      	adds	r3, r7, r6
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	193a      	adds	r2, r7, r4
 8006968:	7812      	ldrb	r2, [r2, #0]
 800696a:	490a      	ldr	r1, [pc, #40]	; (8006994 <UARTEx_SetNbDataToProcess+0xb4>)
 800696c:	5c8a      	ldrb	r2, [r1, r2]
 800696e:	435a      	muls	r2, r3
 8006970:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006972:	193b      	adds	r3, r7, r4
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	4a08      	ldr	r2, [pc, #32]	; (8006998 <UARTEx_SetNbDataToProcess+0xb8>)
 8006978:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800697a:	0019      	movs	r1, r3
 800697c:	f7f9 fc52 	bl	8000224 <__divsi3>
 8006980:	0003      	movs	r3, r0
 8006982:	b299      	uxth	r1, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2268      	movs	r2, #104	; 0x68
 8006988:	5299      	strh	r1, [r3, r2]
}
 800698a:	46c0      	nop			; (mov r8, r8)
 800698c:	46bd      	mov	sp, r7
 800698e:	b005      	add	sp, #20
 8006990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006992:	46c0      	nop			; (mov r8, r8)
 8006994:	08006f04 	.word	0x08006f04
 8006998:	08006f0c 	.word	0x08006f0c

0800699c <__errno>:
 800699c:	4b01      	ldr	r3, [pc, #4]	; (80069a4 <__errno+0x8>)
 800699e:	6818      	ldr	r0, [r3, #0]
 80069a0:	4770      	bx	lr
 80069a2:	46c0      	nop			; (mov r8, r8)
 80069a4:	2000000c 	.word	0x2000000c

080069a8 <__libc_init_array>:
 80069a8:	b570      	push	{r4, r5, r6, lr}
 80069aa:	2600      	movs	r6, #0
 80069ac:	4d0c      	ldr	r5, [pc, #48]	; (80069e0 <__libc_init_array+0x38>)
 80069ae:	4c0d      	ldr	r4, [pc, #52]	; (80069e4 <__libc_init_array+0x3c>)
 80069b0:	1b64      	subs	r4, r4, r5
 80069b2:	10a4      	asrs	r4, r4, #2
 80069b4:	42a6      	cmp	r6, r4
 80069b6:	d109      	bne.n	80069cc <__libc_init_array+0x24>
 80069b8:	2600      	movs	r6, #0
 80069ba:	f000 f9af 	bl	8006d1c <_init>
 80069be:	4d0a      	ldr	r5, [pc, #40]	; (80069e8 <__libc_init_array+0x40>)
 80069c0:	4c0a      	ldr	r4, [pc, #40]	; (80069ec <__libc_init_array+0x44>)
 80069c2:	1b64      	subs	r4, r4, r5
 80069c4:	10a4      	asrs	r4, r4, #2
 80069c6:	42a6      	cmp	r6, r4
 80069c8:	d105      	bne.n	80069d6 <__libc_init_array+0x2e>
 80069ca:	bd70      	pop	{r4, r5, r6, pc}
 80069cc:	00b3      	lsls	r3, r6, #2
 80069ce:	58eb      	ldr	r3, [r5, r3]
 80069d0:	4798      	blx	r3
 80069d2:	3601      	adds	r6, #1
 80069d4:	e7ee      	b.n	80069b4 <__libc_init_array+0xc>
 80069d6:	00b3      	lsls	r3, r6, #2
 80069d8:	58eb      	ldr	r3, [r5, r3]
 80069da:	4798      	blx	r3
 80069dc:	3601      	adds	r6, #1
 80069de:	e7f2      	b.n	80069c6 <__libc_init_array+0x1e>
 80069e0:	08006f14 	.word	0x08006f14
 80069e4:	08006f14 	.word	0x08006f14
 80069e8:	08006f14 	.word	0x08006f14
 80069ec:	08006f18 	.word	0x08006f18

080069f0 <malloc>:
 80069f0:	b510      	push	{r4, lr}
 80069f2:	4b03      	ldr	r3, [pc, #12]	; (8006a00 <malloc+0x10>)
 80069f4:	0001      	movs	r1, r0
 80069f6:	6818      	ldr	r0, [r3, #0]
 80069f8:	f000 f882 	bl	8006b00 <_malloc_r>
 80069fc:	bd10      	pop	{r4, pc}
 80069fe:	46c0      	nop			; (mov r8, r8)
 8006a00:	2000000c 	.word	0x2000000c

08006a04 <free>:
 8006a04:	b510      	push	{r4, lr}
 8006a06:	4b03      	ldr	r3, [pc, #12]	; (8006a14 <free+0x10>)
 8006a08:	0001      	movs	r1, r0
 8006a0a:	6818      	ldr	r0, [r3, #0]
 8006a0c:	f000 f80c 	bl	8006a28 <_free_r>
 8006a10:	bd10      	pop	{r4, pc}
 8006a12:	46c0      	nop			; (mov r8, r8)
 8006a14:	2000000c 	.word	0x2000000c

08006a18 <memset>:
 8006a18:	0003      	movs	r3, r0
 8006a1a:	1882      	adds	r2, r0, r2
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d100      	bne.n	8006a22 <memset+0xa>
 8006a20:	4770      	bx	lr
 8006a22:	7019      	strb	r1, [r3, #0]
 8006a24:	3301      	adds	r3, #1
 8006a26:	e7f9      	b.n	8006a1c <memset+0x4>

08006a28 <_free_r>:
 8006a28:	b570      	push	{r4, r5, r6, lr}
 8006a2a:	0005      	movs	r5, r0
 8006a2c:	2900      	cmp	r1, #0
 8006a2e:	d010      	beq.n	8006a52 <_free_r+0x2a>
 8006a30:	1f0c      	subs	r4, r1, #4
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	da00      	bge.n	8006a3a <_free_r+0x12>
 8006a38:	18e4      	adds	r4, r4, r3
 8006a3a:	0028      	movs	r0, r5
 8006a3c:	f000 f8e8 	bl	8006c10 <__malloc_lock>
 8006a40:	4a1d      	ldr	r2, [pc, #116]	; (8006ab8 <_free_r+0x90>)
 8006a42:	6813      	ldr	r3, [r2, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d105      	bne.n	8006a54 <_free_r+0x2c>
 8006a48:	6063      	str	r3, [r4, #4]
 8006a4a:	6014      	str	r4, [r2, #0]
 8006a4c:	0028      	movs	r0, r5
 8006a4e:	f000 f8e7 	bl	8006c20 <__malloc_unlock>
 8006a52:	bd70      	pop	{r4, r5, r6, pc}
 8006a54:	42a3      	cmp	r3, r4
 8006a56:	d908      	bls.n	8006a6a <_free_r+0x42>
 8006a58:	6821      	ldr	r1, [r4, #0]
 8006a5a:	1860      	adds	r0, r4, r1
 8006a5c:	4283      	cmp	r3, r0
 8006a5e:	d1f3      	bne.n	8006a48 <_free_r+0x20>
 8006a60:	6818      	ldr	r0, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	1841      	adds	r1, r0, r1
 8006a66:	6021      	str	r1, [r4, #0]
 8006a68:	e7ee      	b.n	8006a48 <_free_r+0x20>
 8006a6a:	001a      	movs	r2, r3
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <_free_r+0x4e>
 8006a72:	42a3      	cmp	r3, r4
 8006a74:	d9f9      	bls.n	8006a6a <_free_r+0x42>
 8006a76:	6811      	ldr	r1, [r2, #0]
 8006a78:	1850      	adds	r0, r2, r1
 8006a7a:	42a0      	cmp	r0, r4
 8006a7c:	d10b      	bne.n	8006a96 <_free_r+0x6e>
 8006a7e:	6820      	ldr	r0, [r4, #0]
 8006a80:	1809      	adds	r1, r1, r0
 8006a82:	1850      	adds	r0, r2, r1
 8006a84:	6011      	str	r1, [r2, #0]
 8006a86:	4283      	cmp	r3, r0
 8006a88:	d1e0      	bne.n	8006a4c <_free_r+0x24>
 8006a8a:	6818      	ldr	r0, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	1841      	adds	r1, r0, r1
 8006a90:	6011      	str	r1, [r2, #0]
 8006a92:	6053      	str	r3, [r2, #4]
 8006a94:	e7da      	b.n	8006a4c <_free_r+0x24>
 8006a96:	42a0      	cmp	r0, r4
 8006a98:	d902      	bls.n	8006aa0 <_free_r+0x78>
 8006a9a:	230c      	movs	r3, #12
 8006a9c:	602b      	str	r3, [r5, #0]
 8006a9e:	e7d5      	b.n	8006a4c <_free_r+0x24>
 8006aa0:	6821      	ldr	r1, [r4, #0]
 8006aa2:	1860      	adds	r0, r4, r1
 8006aa4:	4283      	cmp	r3, r0
 8006aa6:	d103      	bne.n	8006ab0 <_free_r+0x88>
 8006aa8:	6818      	ldr	r0, [r3, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	1841      	adds	r1, r0, r1
 8006aae:	6021      	str	r1, [r4, #0]
 8006ab0:	6063      	str	r3, [r4, #4]
 8006ab2:	6054      	str	r4, [r2, #4]
 8006ab4:	e7ca      	b.n	8006a4c <_free_r+0x24>
 8006ab6:	46c0      	nop			; (mov r8, r8)
 8006ab8:	20000350 	.word	0x20000350

08006abc <sbrk_aligned>:
 8006abc:	b570      	push	{r4, r5, r6, lr}
 8006abe:	4e0f      	ldr	r6, [pc, #60]	; (8006afc <sbrk_aligned+0x40>)
 8006ac0:	000d      	movs	r5, r1
 8006ac2:	6831      	ldr	r1, [r6, #0]
 8006ac4:	0004      	movs	r4, r0
 8006ac6:	2900      	cmp	r1, #0
 8006ac8:	d102      	bne.n	8006ad0 <sbrk_aligned+0x14>
 8006aca:	f000 f88f 	bl	8006bec <_sbrk_r>
 8006ace:	6030      	str	r0, [r6, #0]
 8006ad0:	0029      	movs	r1, r5
 8006ad2:	0020      	movs	r0, r4
 8006ad4:	f000 f88a 	bl	8006bec <_sbrk_r>
 8006ad8:	1c43      	adds	r3, r0, #1
 8006ada:	d00a      	beq.n	8006af2 <sbrk_aligned+0x36>
 8006adc:	2303      	movs	r3, #3
 8006ade:	1cc5      	adds	r5, r0, #3
 8006ae0:	439d      	bics	r5, r3
 8006ae2:	42a8      	cmp	r0, r5
 8006ae4:	d007      	beq.n	8006af6 <sbrk_aligned+0x3a>
 8006ae6:	1a29      	subs	r1, r5, r0
 8006ae8:	0020      	movs	r0, r4
 8006aea:	f000 f87f 	bl	8006bec <_sbrk_r>
 8006aee:	1c43      	adds	r3, r0, #1
 8006af0:	d101      	bne.n	8006af6 <sbrk_aligned+0x3a>
 8006af2:	2501      	movs	r5, #1
 8006af4:	426d      	negs	r5, r5
 8006af6:	0028      	movs	r0, r5
 8006af8:	bd70      	pop	{r4, r5, r6, pc}
 8006afa:	46c0      	nop			; (mov r8, r8)
 8006afc:	20000354 	.word	0x20000354

08006b00 <_malloc_r>:
 8006b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b02:	2203      	movs	r2, #3
 8006b04:	1ccb      	adds	r3, r1, #3
 8006b06:	4393      	bics	r3, r2
 8006b08:	3308      	adds	r3, #8
 8006b0a:	0006      	movs	r6, r0
 8006b0c:	001f      	movs	r7, r3
 8006b0e:	2b0c      	cmp	r3, #12
 8006b10:	d232      	bcs.n	8006b78 <_malloc_r+0x78>
 8006b12:	270c      	movs	r7, #12
 8006b14:	42b9      	cmp	r1, r7
 8006b16:	d831      	bhi.n	8006b7c <_malloc_r+0x7c>
 8006b18:	0030      	movs	r0, r6
 8006b1a:	f000 f879 	bl	8006c10 <__malloc_lock>
 8006b1e:	4d32      	ldr	r5, [pc, #200]	; (8006be8 <_malloc_r+0xe8>)
 8006b20:	682b      	ldr	r3, [r5, #0]
 8006b22:	001c      	movs	r4, r3
 8006b24:	2c00      	cmp	r4, #0
 8006b26:	d12e      	bne.n	8006b86 <_malloc_r+0x86>
 8006b28:	0039      	movs	r1, r7
 8006b2a:	0030      	movs	r0, r6
 8006b2c:	f7ff ffc6 	bl	8006abc <sbrk_aligned>
 8006b30:	0004      	movs	r4, r0
 8006b32:	1c43      	adds	r3, r0, #1
 8006b34:	d11e      	bne.n	8006b74 <_malloc_r+0x74>
 8006b36:	682c      	ldr	r4, [r5, #0]
 8006b38:	0025      	movs	r5, r4
 8006b3a:	2d00      	cmp	r5, #0
 8006b3c:	d14a      	bne.n	8006bd4 <_malloc_r+0xd4>
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	0029      	movs	r1, r5
 8006b42:	18e3      	adds	r3, r4, r3
 8006b44:	0030      	movs	r0, r6
 8006b46:	9301      	str	r3, [sp, #4]
 8006b48:	f000 f850 	bl	8006bec <_sbrk_r>
 8006b4c:	9b01      	ldr	r3, [sp, #4]
 8006b4e:	4283      	cmp	r3, r0
 8006b50:	d143      	bne.n	8006bda <_malloc_r+0xda>
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	3703      	adds	r7, #3
 8006b56:	1aff      	subs	r7, r7, r3
 8006b58:	2303      	movs	r3, #3
 8006b5a:	439f      	bics	r7, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	2f0c      	cmp	r7, #12
 8006b60:	d200      	bcs.n	8006b64 <_malloc_r+0x64>
 8006b62:	270c      	movs	r7, #12
 8006b64:	0039      	movs	r1, r7
 8006b66:	0030      	movs	r0, r6
 8006b68:	f7ff ffa8 	bl	8006abc <sbrk_aligned>
 8006b6c:	1c43      	adds	r3, r0, #1
 8006b6e:	d034      	beq.n	8006bda <_malloc_r+0xda>
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	19df      	adds	r7, r3, r7
 8006b74:	6027      	str	r7, [r4, #0]
 8006b76:	e013      	b.n	8006ba0 <_malloc_r+0xa0>
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	dacb      	bge.n	8006b14 <_malloc_r+0x14>
 8006b7c:	230c      	movs	r3, #12
 8006b7e:	2500      	movs	r5, #0
 8006b80:	6033      	str	r3, [r6, #0]
 8006b82:	0028      	movs	r0, r5
 8006b84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b86:	6822      	ldr	r2, [r4, #0]
 8006b88:	1bd1      	subs	r1, r2, r7
 8006b8a:	d420      	bmi.n	8006bce <_malloc_r+0xce>
 8006b8c:	290b      	cmp	r1, #11
 8006b8e:	d917      	bls.n	8006bc0 <_malloc_r+0xc0>
 8006b90:	19e2      	adds	r2, r4, r7
 8006b92:	6027      	str	r7, [r4, #0]
 8006b94:	42a3      	cmp	r3, r4
 8006b96:	d111      	bne.n	8006bbc <_malloc_r+0xbc>
 8006b98:	602a      	str	r2, [r5, #0]
 8006b9a:	6863      	ldr	r3, [r4, #4]
 8006b9c:	6011      	str	r1, [r2, #0]
 8006b9e:	6053      	str	r3, [r2, #4]
 8006ba0:	0030      	movs	r0, r6
 8006ba2:	0025      	movs	r5, r4
 8006ba4:	f000 f83c 	bl	8006c20 <__malloc_unlock>
 8006ba8:	2207      	movs	r2, #7
 8006baa:	350b      	adds	r5, #11
 8006bac:	1d23      	adds	r3, r4, #4
 8006bae:	4395      	bics	r5, r2
 8006bb0:	1aea      	subs	r2, r5, r3
 8006bb2:	429d      	cmp	r5, r3
 8006bb4:	d0e5      	beq.n	8006b82 <_malloc_r+0x82>
 8006bb6:	1b5b      	subs	r3, r3, r5
 8006bb8:	50a3      	str	r3, [r4, r2]
 8006bba:	e7e2      	b.n	8006b82 <_malloc_r+0x82>
 8006bbc:	605a      	str	r2, [r3, #4]
 8006bbe:	e7ec      	b.n	8006b9a <_malloc_r+0x9a>
 8006bc0:	6862      	ldr	r2, [r4, #4]
 8006bc2:	42a3      	cmp	r3, r4
 8006bc4:	d101      	bne.n	8006bca <_malloc_r+0xca>
 8006bc6:	602a      	str	r2, [r5, #0]
 8006bc8:	e7ea      	b.n	8006ba0 <_malloc_r+0xa0>
 8006bca:	605a      	str	r2, [r3, #4]
 8006bcc:	e7e8      	b.n	8006ba0 <_malloc_r+0xa0>
 8006bce:	0023      	movs	r3, r4
 8006bd0:	6864      	ldr	r4, [r4, #4]
 8006bd2:	e7a7      	b.n	8006b24 <_malloc_r+0x24>
 8006bd4:	002c      	movs	r4, r5
 8006bd6:	686d      	ldr	r5, [r5, #4]
 8006bd8:	e7af      	b.n	8006b3a <_malloc_r+0x3a>
 8006bda:	230c      	movs	r3, #12
 8006bdc:	0030      	movs	r0, r6
 8006bde:	6033      	str	r3, [r6, #0]
 8006be0:	f000 f81e 	bl	8006c20 <__malloc_unlock>
 8006be4:	e7cd      	b.n	8006b82 <_malloc_r+0x82>
 8006be6:	46c0      	nop			; (mov r8, r8)
 8006be8:	20000350 	.word	0x20000350

08006bec <_sbrk_r>:
 8006bec:	2300      	movs	r3, #0
 8006bee:	b570      	push	{r4, r5, r6, lr}
 8006bf0:	4d06      	ldr	r5, [pc, #24]	; (8006c0c <_sbrk_r+0x20>)
 8006bf2:	0004      	movs	r4, r0
 8006bf4:	0008      	movs	r0, r1
 8006bf6:	602b      	str	r3, [r5, #0]
 8006bf8:	f7fc fb6c 	bl	80032d4 <_sbrk>
 8006bfc:	1c43      	adds	r3, r0, #1
 8006bfe:	d103      	bne.n	8006c08 <_sbrk_r+0x1c>
 8006c00:	682b      	ldr	r3, [r5, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d000      	beq.n	8006c08 <_sbrk_r+0x1c>
 8006c06:	6023      	str	r3, [r4, #0]
 8006c08:	bd70      	pop	{r4, r5, r6, pc}
 8006c0a:	46c0      	nop			; (mov r8, r8)
 8006c0c:	20000358 	.word	0x20000358

08006c10 <__malloc_lock>:
 8006c10:	b510      	push	{r4, lr}
 8006c12:	4802      	ldr	r0, [pc, #8]	; (8006c1c <__malloc_lock+0xc>)
 8006c14:	f000 f80c 	bl	8006c30 <__retarget_lock_acquire_recursive>
 8006c18:	bd10      	pop	{r4, pc}
 8006c1a:	46c0      	nop			; (mov r8, r8)
 8006c1c:	2000035c 	.word	0x2000035c

08006c20 <__malloc_unlock>:
 8006c20:	b510      	push	{r4, lr}
 8006c22:	4802      	ldr	r0, [pc, #8]	; (8006c2c <__malloc_unlock+0xc>)
 8006c24:	f000 f805 	bl	8006c32 <__retarget_lock_release_recursive>
 8006c28:	bd10      	pop	{r4, pc}
 8006c2a:	46c0      	nop			; (mov r8, r8)
 8006c2c:	2000035c 	.word	0x2000035c

08006c30 <__retarget_lock_acquire_recursive>:
 8006c30:	4770      	bx	lr

08006c32 <__retarget_lock_release_recursive>:
 8006c32:	4770      	bx	lr

08006c34 <sqrtf>:
 8006c34:	b570      	push	{r4, r5, r6, lr}
 8006c36:	1c05      	adds	r5, r0, #0
 8006c38:	f000 f818 	bl	8006c6c <__ieee754_sqrtf>
 8006c3c:	1c29      	adds	r1, r5, #0
 8006c3e:	1c04      	adds	r4, r0, #0
 8006c40:	1c28      	adds	r0, r5, #0
 8006c42:	f7fa fa67 	bl	8001114 <__aeabi_fcmpun>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	d10e      	bne.n	8006c68 <sqrtf+0x34>
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	1c28      	adds	r0, r5, #0
 8006c4e:	f7f9 fbe7 	bl	8000420 <__aeabi_fcmplt>
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d008      	beq.n	8006c68 <sqrtf+0x34>
 8006c56:	f7ff fea1 	bl	800699c <__errno>
 8006c5a:	2321      	movs	r3, #33	; 0x21
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	6003      	str	r3, [r0, #0]
 8006c60:	1c08      	adds	r0, r1, #0
 8006c62:	f7f9 fdbb 	bl	80007dc <__aeabi_fdiv>
 8006c66:	1c04      	adds	r4, r0, #0
 8006c68:	1c20      	adds	r0, r4, #0
 8006c6a:	bd70      	pop	{r4, r5, r6, pc}

08006c6c <__ieee754_sqrtf>:
 8006c6c:	0042      	lsls	r2, r0, #1
 8006c6e:	0003      	movs	r3, r0
 8006c70:	b570      	push	{r4, r5, r6, lr}
 8006c72:	1c04      	adds	r4, r0, #0
 8006c74:	20ff      	movs	r0, #255	; 0xff
 8006c76:	0852      	lsrs	r2, r2, #1
 8006c78:	05c0      	lsls	r0, r0, #23
 8006c7a:	4282      	cmp	r2, r0
 8006c7c:	d30a      	bcc.n	8006c94 <__ieee754_sqrtf+0x28>
 8006c7e:	1c21      	adds	r1, r4, #0
 8006c80:	1c20      	adds	r0, r4, #0
 8006c82:	f7f9 ff73 	bl	8000b6c <__aeabi_fmul>
 8006c86:	1c01      	adds	r1, r0, #0
 8006c88:	1c20      	adds	r0, r4, #0
 8006c8a:	f7f9 fc09 	bl	80004a0 <__aeabi_fadd>
 8006c8e:	1c04      	adds	r4, r0, #0
 8006c90:	1c20      	adds	r0, r4, #0
 8006c92:	bd70      	pop	{r4, r5, r6, pc}
 8006c94:	2a00      	cmp	r2, #0
 8006c96:	d0fb      	beq.n	8006c90 <__ieee754_sqrtf+0x24>
 8006c98:	2c00      	cmp	r4, #0
 8006c9a:	da07      	bge.n	8006cac <__ieee754_sqrtf+0x40>
 8006c9c:	1c21      	adds	r1, r4, #0
 8006c9e:	1c20      	adds	r0, r4, #0
 8006ca0:	f7fa f88a 	bl	8000db8 <__aeabi_fsub>
 8006ca4:	1c01      	adds	r1, r0, #0
 8006ca6:	f7f9 fd99 	bl	80007dc <__aeabi_fdiv>
 8006caa:	e7f0      	b.n	8006c8e <__ieee754_sqrtf+0x22>
 8006cac:	0022      	movs	r2, r4
 8006cae:	15e1      	asrs	r1, r4, #23
 8006cb0:	4002      	ands	r2, r0
 8006cb2:	4204      	tst	r4, r0
 8006cb4:	d02e      	beq.n	8006d14 <__ieee754_sqrtf+0xa8>
 8006cb6:	2280      	movs	r2, #128	; 0x80
 8006cb8:	000c      	movs	r4, r1
 8006cba:	025b      	lsls	r3, r3, #9
 8006cbc:	0a5b      	lsrs	r3, r3, #9
 8006cbe:	0412      	lsls	r2, r2, #16
 8006cc0:	3c7f      	subs	r4, #127	; 0x7f
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	07ca      	lsls	r2, r1, #31
 8006cc6:	d400      	bmi.n	8006cca <__ieee754_sqrtf+0x5e>
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2180      	movs	r1, #128	; 0x80
 8006cce:	2019      	movs	r0, #25
 8006cd0:	0016      	movs	r6, r2
 8006cd2:	1064      	asrs	r4, r4, #1
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	0449      	lsls	r1, r1, #17
 8006cd8:	1875      	adds	r5, r6, r1
 8006cda:	429d      	cmp	r5, r3
 8006cdc:	dc02      	bgt.n	8006ce4 <__ieee754_sqrtf+0x78>
 8006cde:	186e      	adds	r6, r5, r1
 8006ce0:	1b5b      	subs	r3, r3, r5
 8006ce2:	1852      	adds	r2, r2, r1
 8006ce4:	3801      	subs	r0, #1
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	0849      	lsrs	r1, r1, #1
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d1f4      	bne.n	8006cd8 <__ieee754_sqrtf+0x6c>
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d002      	beq.n	8006cf8 <__ieee754_sqrtf+0x8c>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	3201      	adds	r2, #1
 8006cf6:	439a      	bics	r2, r3
 8006cf8:	23fc      	movs	r3, #252	; 0xfc
 8006cfa:	1052      	asrs	r2, r2, #1
 8006cfc:	059b      	lsls	r3, r3, #22
 8006cfe:	18d2      	adds	r2, r2, r3
 8006d00:	05e4      	lsls	r4, r4, #23
 8006d02:	18a4      	adds	r4, r4, r2
 8006d04:	e7c4      	b.n	8006c90 <__ieee754_sqrtf+0x24>
 8006d06:	005b      	lsls	r3, r3, #1
 8006d08:	3201      	adds	r2, #1
 8006d0a:	4203      	tst	r3, r0
 8006d0c:	d0fb      	beq.n	8006d06 <__ieee754_sqrtf+0x9a>
 8006d0e:	3a01      	subs	r2, #1
 8006d10:	1a89      	subs	r1, r1, r2
 8006d12:	e7d0      	b.n	8006cb6 <__ieee754_sqrtf+0x4a>
 8006d14:	2080      	movs	r0, #128	; 0x80
 8006d16:	0400      	lsls	r0, r0, #16
 8006d18:	e7f7      	b.n	8006d0a <__ieee754_sqrtf+0x9e>
	...

08006d1c <_init>:
 8006d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1e:	46c0      	nop			; (mov r8, r8)
 8006d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d22:	bc08      	pop	{r3}
 8006d24:	469e      	mov	lr, r3
 8006d26:	4770      	bx	lr

08006d28 <_fini>:
 8006d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2a:	46c0      	nop			; (mov r8, r8)
 8006d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d2e:	bc08      	pop	{r3}
 8006d30:	469e      	mov	lr, r3
 8006d32:	4770      	bx	lr


PA_UHF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c6c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004d24  08004d24  00014d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004de0  08004de0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004de0  08004de0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004de0  08004de0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004de0  08004de0  00014de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004de4  08004de4  00014de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000070  08004e58  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08004e58  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103d9  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b2e  00000000  00000000  00030471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00032fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  00033c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004208  00000000  00000000  00034850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001163a  00000000  00000000  00038a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba4b  00000000  00000000  0004a092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5add  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e28  00000000  00000000  000d5b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004d0c 	.word	0x08004d0c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08004d0c 	.word	0x08004d0c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <i2c1_init>:
 *      Author: sigmadev
 */

#include "i2c1.h"

void i2c1_init() {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0

	/* SCL PB8  as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE8_0);
 80003f0:	4b53      	ldr	r3, [pc, #332]	; (8000540 <i2c1_init+0x154>)
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	4b52      	ldr	r3, [pc, #328]	; (8000540 <i2c1_init+0x154>)
 80003f6:	4953      	ldr	r1, [pc, #332]	; (8000544 <i2c1_init+0x158>)
 80003f8:	400a      	ands	r2, r1
 80003fa:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE8_1);
 80003fc:	4b50      	ldr	r3, [pc, #320]	; (8000540 <i2c1_init+0x154>)
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	4b4f      	ldr	r3, [pc, #316]	; (8000540 <i2c1_init+0x154>)
 8000402:	2180      	movs	r1, #128	; 0x80
 8000404:	0289      	lsls	r1, r1, #10
 8000406:	430a      	orrs	r2, r1
 8000408:	601a      	str	r2, [r3, #0]
	/* SDC PB9 as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE9_0);
 800040a:	4b4d      	ldr	r3, [pc, #308]	; (8000540 <i2c1_init+0x154>)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	4b4c      	ldr	r3, [pc, #304]	; (8000540 <i2c1_init+0x154>)
 8000410:	494d      	ldr	r1, [pc, #308]	; (8000548 <i2c1_init+0x15c>)
 8000412:	400a      	ands	r2, r1
 8000414:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE9_1);
 8000416:	4b4a      	ldr	r3, [pc, #296]	; (8000540 <i2c1_init+0x154>)
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	4b49      	ldr	r3, [pc, #292]	; (8000540 <i2c1_init+0x154>)
 800041c:	2180      	movs	r1, #128	; 0x80
 800041e:	0309      	lsls	r1, r1, #12
 8000420:	430a      	orrs	r2, r1
 8000422:	601a      	str	r2, [r3, #0]
	/* SCL PB8 as open-drain */
	SET_BIT(GPIOB->OTYPER, GPIO_OTYPER_OT8);
 8000424:	4b46      	ldr	r3, [pc, #280]	; (8000540 <i2c1_init+0x154>)
 8000426:	685a      	ldr	r2, [r3, #4]
 8000428:	4b45      	ldr	r3, [pc, #276]	; (8000540 <i2c1_init+0x154>)
 800042a:	2180      	movs	r1, #128	; 0x80
 800042c:	0049      	lsls	r1, r1, #1
 800042e:	430a      	orrs	r2, r1
 8000430:	605a      	str	r2, [r3, #4]
	/* SDC PB9 as open-drain */
	SET_BIT(GPIOB->OTYPER, GPIO_OTYPER_OT9);
 8000432:	4b43      	ldr	r3, [pc, #268]	; (8000540 <i2c1_init+0x154>)
 8000434:	685a      	ldr	r2, [r3, #4]
 8000436:	4b42      	ldr	r3, [pc, #264]	; (8000540 <i2c1_init+0x154>)
 8000438:	2180      	movs	r1, #128	; 0x80
 800043a:	0089      	lsls	r1, r1, #2
 800043c:	430a      	orrs	r2, r1
 800043e:	605a      	str	r2, [r3, #4]
	/* SCL PB8 High Speed output */
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED8_0);
 8000440:	4b3f      	ldr	r3, [pc, #252]	; (8000540 <i2c1_init+0x154>)
 8000442:	689a      	ldr	r2, [r3, #8]
 8000444:	4b3e      	ldr	r3, [pc, #248]	; (8000540 <i2c1_init+0x154>)
 8000446:	2180      	movs	r1, #128	; 0x80
 8000448:	0249      	lsls	r1, r1, #9
 800044a:	430a      	orrs	r2, r1
 800044c:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED8_1);
 800044e:	4b3c      	ldr	r3, [pc, #240]	; (8000540 <i2c1_init+0x154>)
 8000450:	689a      	ldr	r2, [r3, #8]
 8000452:	4b3b      	ldr	r3, [pc, #236]	; (8000540 <i2c1_init+0x154>)
 8000454:	2180      	movs	r1, #128	; 0x80
 8000456:	0289      	lsls	r1, r1, #10
 8000458:	430a      	orrs	r2, r1
 800045a:	609a      	str	r2, [r3, #8]
	/* SDC PB9  High Speed output */
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED9_0);
 800045c:	4b38      	ldr	r3, [pc, #224]	; (8000540 <i2c1_init+0x154>)
 800045e:	689a      	ldr	r2, [r3, #8]
 8000460:	4b37      	ldr	r3, [pc, #220]	; (8000540 <i2c1_init+0x154>)
 8000462:	2180      	movs	r1, #128	; 0x80
 8000464:	02c9      	lsls	r1, r1, #11
 8000466:	430a      	orrs	r2, r1
 8000468:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED9_1);
 800046a:	4b35      	ldr	r3, [pc, #212]	; (8000540 <i2c1_init+0x154>)
 800046c:	689a      	ldr	r2, [r3, #8]
 800046e:	4b34      	ldr	r3, [pc, #208]	; (8000540 <i2c1_init+0x154>)
 8000470:	2180      	movs	r1, #128	; 0x80
 8000472:	0309      	lsls	r1, r1, #12
 8000474:	430a      	orrs	r2, r1
 8000476:	609a      	str	r2, [r3, #8]
	/* SCL PB8 as pull-up */
	CLEAR_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD8_0);
 8000478:	4b31      	ldr	r3, [pc, #196]	; (8000540 <i2c1_init+0x154>)
 800047a:	68da      	ldr	r2, [r3, #12]
 800047c:	4b30      	ldr	r3, [pc, #192]	; (8000540 <i2c1_init+0x154>)
 800047e:	4931      	ldr	r1, [pc, #196]	; (8000544 <i2c1_init+0x158>)
 8000480:	400a      	ands	r2, r1
 8000482:	60da      	str	r2, [r3, #12]
	SET_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD8_1);
 8000484:	4b2e      	ldr	r3, [pc, #184]	; (8000540 <i2c1_init+0x154>)
 8000486:	68da      	ldr	r2, [r3, #12]
 8000488:	4b2d      	ldr	r3, [pc, #180]	; (8000540 <i2c1_init+0x154>)
 800048a:	2180      	movs	r1, #128	; 0x80
 800048c:	0289      	lsls	r1, r1, #10
 800048e:	430a      	orrs	r2, r1
 8000490:	60da      	str	r2, [r3, #12]
	/* SDC PB9 as pull-up */
	CLEAR_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD9_0);
 8000492:	4b2b      	ldr	r3, [pc, #172]	; (8000540 <i2c1_init+0x154>)
 8000494:	68da      	ldr	r2, [r3, #12]
 8000496:	4b2a      	ldr	r3, [pc, #168]	; (8000540 <i2c1_init+0x154>)
 8000498:	492b      	ldr	r1, [pc, #172]	; (8000548 <i2c1_init+0x15c>)
 800049a:	400a      	ands	r2, r1
 800049c:	60da      	str	r2, [r3, #12]
	SET_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD9_1);
 800049e:	4b28      	ldr	r3, [pc, #160]	; (8000540 <i2c1_init+0x154>)
 80004a0:	68da      	ldr	r2, [r3, #12]
 80004a2:	4b27      	ldr	r3, [pc, #156]	; (8000540 <i2c1_init+0x154>)
 80004a4:	2180      	movs	r1, #128	; 0x80
 80004a6:	0309      	lsls	r1, r1, #12
 80004a8:	430a      	orrs	r2, r1
 80004aa:	60da      	str	r2, [r3, #12]
	/*  PB8 as i2c SCL */
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_0);
 80004ac:	4b24      	ldr	r3, [pc, #144]	; (8000540 <i2c1_init+0x154>)
 80004ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004b0:	4b23      	ldr	r3, [pc, #140]	; (8000540 <i2c1_init+0x154>)
 80004b2:	2101      	movs	r1, #1
 80004b4:	438a      	bics	r2, r1
 80004b6:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_1);
 80004b8:	4b21      	ldr	r3, [pc, #132]	; (8000540 <i2c1_init+0x154>)
 80004ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004bc:	4b20      	ldr	r3, [pc, #128]	; (8000540 <i2c1_init+0x154>)
 80004be:	2102      	movs	r1, #2
 80004c0:	430a      	orrs	r2, r1
 80004c2:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_2);
 80004c4:	4b1e      	ldr	r3, [pc, #120]	; (8000540 <i2c1_init+0x154>)
 80004c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004c8:	4b1d      	ldr	r3, [pc, #116]	; (8000540 <i2c1_init+0x154>)
 80004ca:	2104      	movs	r1, #4
 80004cc:	430a      	orrs	r2, r1
 80004ce:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_3);
 80004d0:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <i2c1_init+0x154>)
 80004d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004d4:	4b1a      	ldr	r3, [pc, #104]	; (8000540 <i2c1_init+0x154>)
 80004d6:	2108      	movs	r1, #8
 80004d8:	438a      	bics	r2, r1
 80004da:	625a      	str	r2, [r3, #36]	; 0x24
	/*  PB9 as i2c SDL */
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_0);
 80004dc:	4b18      	ldr	r3, [pc, #96]	; (8000540 <i2c1_init+0x154>)
 80004de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004e0:	4b17      	ldr	r3, [pc, #92]	; (8000540 <i2c1_init+0x154>)
 80004e2:	2110      	movs	r1, #16
 80004e4:	438a      	bics	r2, r1
 80004e6:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_1);
 80004e8:	4b15      	ldr	r3, [pc, #84]	; (8000540 <i2c1_init+0x154>)
 80004ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <i2c1_init+0x154>)
 80004ee:	2120      	movs	r1, #32
 80004f0:	430a      	orrs	r2, r1
 80004f2:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_2);
 80004f4:	4b12      	ldr	r3, [pc, #72]	; (8000540 <i2c1_init+0x154>)
 80004f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004f8:	4b11      	ldr	r3, [pc, #68]	; (8000540 <i2c1_init+0x154>)
 80004fa:	2140      	movs	r1, #64	; 0x40
 80004fc:	430a      	orrs	r2, r1
 80004fe:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_3);
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <i2c1_init+0x154>)
 8000502:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000504:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <i2c1_init+0x154>)
 8000506:	2180      	movs	r1, #128	; 0x80
 8000508:	438a      	bics	r2, r1
 800050a:	625a      	str	r2, [r3, #36]	; 0x24

	/* select normal speed */
	SET_BIT(RCC->APBENR1, RCC_APBENR1_I2C1EN);
 800050c:	4b0f      	ldr	r3, [pc, #60]	; (800054c <i2c1_init+0x160>)
 800050e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000510:	4b0e      	ldr	r3, [pc, #56]	; (800054c <i2c1_init+0x160>)
 8000512:	2180      	movs	r1, #128	; 0x80
 8000514:	0389      	lsls	r1, r1, #14
 8000516:	430a      	orrs	r2, r1
 8000518:	63da      	str	r2, [r3, #60]	; 0x3c

	/* i2c disable */
	CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <i2c1_init+0x164>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <i2c1_init+0x164>)
 8000520:	2101      	movs	r1, #1
 8000522:	438a      	bics	r2, r1
 8000524:	601a      	str	r2, [r3, #0]

	I2C1->TIMINGR = 0X10707DBCU;
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <i2c1_init+0x164>)
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <i2c1_init+0x168>)
 800052a:	611a      	str	r2, [r3, #16]
	/*i2c Rx interrupt enable */
//SET_BIT(I2C1->CR1, I2C_CR1_RXIE);
//SET_BIT(I2C1->CR1, I2C_CR1_TXIE);

	/* i2c enable */
	SET_BIT(I2C1->CR1, I2C_CR1_PE);
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <i2c1_init+0x164>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <i2c1_init+0x164>)
 8000532:	2101      	movs	r1, #1
 8000534:	430a      	orrs	r2, r1
 8000536:	601a      	str	r2, [r3, #0]
}
 8000538:	46c0      	nop			; (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	50000400 	.word	0x50000400
 8000544:	fffeffff 	.word	0xfffeffff
 8000548:	fffbffff 	.word	0xfffbffff
 800054c:	40021000 	.word	0x40021000
 8000550:	40005400 	.word	0x40005400
 8000554:	10707dbc 	.word	0x10707dbc

08000558 <i2c1_byte_rx>:

char i2c1_byte_rx(char saddr, uint8_t N) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
 800055e:	0002      	movs	r2, r0
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	701a      	strb	r2, [r3, #0]
 8000564:	1dbb      	adds	r3, r7, #6
 8000566:	1c0a      	adds	r2, r1, #0
 8000568:	701a      	strb	r2, [r3, #0]
	uint32_t counter = HAL_GetTick();
 800056a:	f001 fae9 	bl	8001b40 <HAL_GetTick>
 800056e:	0003      	movs	r3, r0
 8000570:	60fb      	str	r3, [r7, #12]
	bool timeout = false;
 8000572:	230b      	movs	r3, #11
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
	i2c1_start(saddr, READ, N);
 800057a:	1dbb      	adds	r3, r7, #6
 800057c:	781a      	ldrb	r2, [r3, #0]
 800057e:	1dfb      	adds	r3, r7, #7
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2101      	movs	r1, #1
 8000584:	0018      	movs	r0, r3
 8000586:	f000 f88f 	bl	80006a8 <i2c1_start>

	while (!READ_BIT(I2C1->ISR, I2C_ISR_STOPF)) {
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	4b20      	ldr	r3, [pc, #128]	; (8000610 <i2c1_byte_rx+0xb8>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	2220      	movs	r2, #32
 8000592:	4013      	ands	r3, r2
 8000594:	d0fa      	beq.n	800058c <i2c1_byte_rx+0x34>
	}
	SET_BIT(I2C1->ICR, I2C_ICR_STOPCF);
 8000596:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <i2c1_byte_rx+0xb8>)
 8000598:	69da      	ldr	r2, [r3, #28]
 800059a:	4b1d      	ldr	r3, [pc, #116]	; (8000610 <i2c1_byte_rx+0xb8>)
 800059c:	2120      	movs	r1, #32
 800059e:	430a      	orrs	r2, r1
 80005a0:	61da      	str	r2, [r3, #28]

	char data = 0;
 80005a2:	2317      	movs	r3, #23
 80005a4:	18fb      	adds	r3, r7, r3
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N; i++) {
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
 80005ae:	e022      	b.n	80005f6 <i2c1_byte_rx+0x9e>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
			if (HAL_GetTick() - counter > 500)
 80005b0:	f001 fac6 	bl	8001b40 <HAL_GetTick>
 80005b4:	0002      	movs	r2, r0
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	1ad2      	subs	r2, r2, r3
 80005ba:	23fa      	movs	r3, #250	; 0xfa
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	429a      	cmp	r2, r3
 80005c0:	d901      	bls.n	80005c6 <i2c1_byte_rx+0x6e>
				return 0x00;
 80005c2:	2300      	movs	r3, #0
 80005c4:	e01f      	b.n	8000606 <i2c1_byte_rx+0xae>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
 80005c6:	4b12      	ldr	r3, [pc, #72]	; (8000610 <i2c1_byte_rx+0xb8>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	2204      	movs	r2, #4
 80005cc:	4013      	ands	r3, r2
 80005ce:	425a      	negs	r2, r3
 80005d0:	4153      	adcs	r3, r2
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	0019      	movs	r1, r3
 80005d6:	230b      	movs	r3, #11
 80005d8:	18fb      	adds	r3, r7, r3
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2201      	movs	r2, #1
 80005de:	4053      	eors	r3, r2
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	400b      	ands	r3, r1
 80005e4:	d1e4      	bne.n	80005b0 <i2c1_byte_rx+0x58>
		}
		data = READ_REG(I2C1->RXDR);
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <i2c1_byte_rx+0xb8>)
 80005e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005ea:	2317      	movs	r3, #23
 80005ec:	18fb      	adds	r3, r7, r3
 80005ee:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N; i++) {
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	3301      	adds	r3, #1
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	1dbb      	adds	r3, r7, #6
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	693a      	ldr	r2, [r7, #16]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	dbe2      	blt.n	80005c6 <i2c1_byte_rx+0x6e>
	}
//	while (!(READ_BIT(I2C1->ISR, I2C_ISR_TC))) {
//	}
	return data;
 8000600:	2317      	movs	r3, #23
 8000602:	18fb      	adds	r3, r7, r3
 8000604:	781b      	ldrb	r3, [r3, #0]
}
 8000606:	0018      	movs	r0, r3
 8000608:	46bd      	mov	sp, r7
 800060a:	b006      	add	sp, #24
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	40005400 	.word	0x40005400

08000614 <i2c1_byte_tx>:
	}
	SET_BIT(I2C1->ICR, I2C_ICR_STOPCF);

}

void i2c1_byte_tx(char saddr, uint8_t *data, uint8_t N) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6039      	str	r1, [r7, #0]
 800061c:	0011      	movs	r1, r2
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	1c02      	adds	r2, r0, #0
 8000622:	701a      	strb	r2, [r3, #0]
 8000624:	1dbb      	adds	r3, r7, #6
 8000626:	1c0a      	adds	r2, r1, #0
 8000628:	701a      	strb	r2, [r3, #0]
	i2c1_start(saddr, WRITE, N);
 800062a:	1dbb      	adds	r3, r7, #6
 800062c:	781a      	ldrb	r2, [r3, #0]
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2100      	movs	r1, #0
 8000634:	0018      	movs	r0, r3
 8000636:	f000 f837 	bl	80006a8 <i2c1_start>
	uint32_t counter = HAL_GetTick();
 800063a:	f001 fa81 	bl	8001b40 <HAL_GetTick>
 800063e:	0003      	movs	r3, r0
 8000640:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < N; i++) {
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	e016      	b.n	8000676 <i2c1_byte_tx+0x62>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXE)) {

			if (HAL_GetTick() - counter > 500)
 8000648:	f001 fa7a 	bl	8001b40 <HAL_GetTick>
 800064c:	0002      	movs	r2, r0
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	1ad2      	subs	r2, r2, r3
 8000652:	23fa      	movs	r3, #250	; 0xfa
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	429a      	cmp	r2, r3
 8000658:	d81f      	bhi.n	800069a <i2c1_byte_tx+0x86>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXE)) {
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <i2c1_byte_tx+0x90>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	2201      	movs	r2, #1
 8000660:	4013      	ands	r3, r2
 8000662:	d0f1      	beq.n	8000648 <i2c1_byte_tx+0x34>
				return;
		}
		I2C1->TXDR = data[i];
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	683a      	ldr	r2, [r7, #0]
 8000668:	18d3      	adds	r3, r2, r3
 800066a:	781a      	ldrb	r2, [r3, #0]
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <i2c1_byte_tx+0x90>)
 800066e:	629a      	str	r2, [r3, #40]	; 0x28
	for (int i = 0; i < N; i++) {
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	3301      	adds	r3, #1
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	1dbb      	adds	r3, r7, #6
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	429a      	cmp	r2, r3
 800067e:	dbec      	blt.n	800065a <i2c1_byte_tx+0x46>
	}

	while (!READ_BIT(I2C1->ISR, I2C_ISR_STOPF)) {
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <i2c1_byte_tx+0x90>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	2220      	movs	r2, #32
 8000688:	4013      	ands	r3, r2
 800068a:	d0fa      	beq.n	8000682 <i2c1_byte_tx+0x6e>
	}
	SET_BIT(I2C1->ICR, I2C_ICR_STOPCF);
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <i2c1_byte_tx+0x90>)
 800068e:	69da      	ldr	r2, [r3, #28]
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <i2c1_byte_tx+0x90>)
 8000692:	2120      	movs	r1, #32
 8000694:	430a      	orrs	r2, r1
 8000696:	61da      	str	r2, [r3, #28]
 8000698:	e000      	b.n	800069c <i2c1_byte_tx+0x88>
				return;
 800069a:	46c0      	nop			; (mov r8, r8)

}
 800069c:	46bd      	mov	sp, r7
 800069e:	b004      	add	sp, #16
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	40005400 	.word	0x40005400

080006a8 <i2c1_start>:
	SET_BIT(I2C1->ISR, I2C_ICR_STOPCF);

}


void i2c1_start(char saddr, uint8_t transfer_request, uint8_t N) {
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	0004      	movs	r4, r0
 80006b0:	0008      	movs	r0, r1
 80006b2:	0011      	movs	r1, r2
 80006b4:	1dfb      	adds	r3, r7, #7
 80006b6:	1c22      	adds	r2, r4, #0
 80006b8:	701a      	strb	r2, [r3, #0]
 80006ba:	1dbb      	adds	r3, r7, #6
 80006bc:	1c02      	adds	r2, r0, #0
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	1d7b      	adds	r3, r7, #5
 80006c2:	1c0a      	adds	r2, r1, #0
 80006c4:	701a      	strb	r2, [r3, #0]
	/*master 7 bit addressing mode */
	CLEAR_BIT(I2C1->CR2, I2C_CR2_ADD10);
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <i2c1_start+0xa4>)
 80006c8:	685a      	ldr	r2, [r3, #4]
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <i2c1_start+0xa4>)
 80006cc:	4920      	ldr	r1, [pc, #128]	; (8000750 <i2c1_start+0xa8>)
 80006ce:	400a      	ands	r2, r1
 80006d0:	605a      	str	r2, [r3, #4]
	/* set Slave address */
	MODIFY_REG(I2C1->CR2, I2C_CR2_SADD, saddr << I2C_CR2_SADD_Pos);
 80006d2:	4b1e      	ldr	r3, [pc, #120]	; (800074c <i2c1_start+0xa4>)
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	0a9b      	lsrs	r3, r3, #10
 80006d8:	0299      	lsls	r1, r3, #10
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	781a      	ldrb	r2, [r3, #0]
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <i2c1_start+0xa4>)
 80006e0:	430a      	orrs	r2, r1
 80006e2:	605a      	str	r2, [r3, #4]
	/* read 1 byte */
	MODIFY_REG(I2C1->CR2, I2C_CR2_NBYTES, N << I2C_CR2_NBYTES_Pos);
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <i2c1_start+0xa4>)
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	4a1a      	ldr	r2, [pc, #104]	; (8000754 <i2c1_start+0xac>)
 80006ea:	401a      	ands	r2, r3
 80006ec:	1d7b      	adds	r3, r7, #5
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	041b      	lsls	r3, r3, #16
 80006f2:	0019      	movs	r1, r3
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <i2c1_start+0xa4>)
 80006f6:	430a      	orrs	r2, r1
 80006f8:	605a      	str	r2, [r3, #4]
	/* stops when NBytes are transferred */
	SET_BIT(I2C1->CR2, I2C_CR2_AUTOEND);
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <i2c1_start+0xa4>)
 80006fc:	685a      	ldr	r2, [r3, #4]
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <i2c1_start+0xa4>)
 8000700:	2180      	movs	r1, #128	; 0x80
 8000702:	0489      	lsls	r1, r1, #18
 8000704:	430a      	orrs	r2, r1
 8000706:	605a      	str	r2, [r3, #4]
	/* set START condition  automatically changes to master */


	if (transfer_request == 1) {
 8000708:	1dbb      	adds	r3, r7, #6
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d107      	bne.n	8000720 <i2c1_start+0x78>
		/* request a read transfer */
		SET_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <i2c1_start+0xa4>)
 8000712:	685a      	ldr	r2, [r3, #4]
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <i2c1_start+0xa4>)
 8000716:	2180      	movs	r1, #128	; 0x80
 8000718:	00c9      	lsls	r1, r1, #3
 800071a:	430a      	orrs	r2, r1
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	e009      	b.n	8000734 <i2c1_start+0x8c>
	} else if (transfer_request == 0) {
 8000720:	1dbb      	adds	r3, r7, #6
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d105      	bne.n	8000734 <i2c1_start+0x8c>
		/* request a write transfer */
		CLEAR_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <i2c1_start+0xa4>)
 800072a:	685a      	ldr	r2, [r3, #4]
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <i2c1_start+0xa4>)
 800072e:	490a      	ldr	r1, [pc, #40]	; (8000758 <i2c1_start+0xb0>)
 8000730:	400a      	ands	r2, r1
 8000732:	605a      	str	r2, [r3, #4]
	}

	SET_BIT(I2C1->CR2, I2C_CR2_START);
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <i2c1_start+0xa4>)
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <i2c1_start+0xa4>)
 800073a:	2180      	movs	r1, #128	; 0x80
 800073c:	0189      	lsls	r1, r1, #6
 800073e:	430a      	orrs	r2, r1
 8000740:	605a      	str	r2, [r3, #4]

}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b003      	add	sp, #12
 8000748:	bd90      	pop	{r4, r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	40005400 	.word	0x40005400
 8000750:	fffff7ff 	.word	0xfffff7ff
 8000754:	ff00ffff 	.word	0xff00ffff
 8000758:	fffffbff 	.word	0xfffffbff

0800075c <led_init>:





void led_init(void){
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

	/*CURRENT LOW LED PA12  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE12_0);
 8000760:	23a0      	movs	r3, #160	; 0xa0
 8000762:	05db      	lsls	r3, r3, #23
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	23a0      	movs	r3, #160	; 0xa0
 8000768:	05db      	lsls	r3, r3, #23
 800076a:	2180      	movs	r1, #128	; 0x80
 800076c:	0449      	lsls	r1, r1, #17
 800076e:	430a      	orrs	r2, r1
 8000770:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE12_1);
 8000772:	23a0      	movs	r3, #160	; 0xa0
 8000774:	05db      	lsls	r3, r3, #23
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	23a0      	movs	r3, #160	; 0xa0
 800077a:	05db      	lsls	r3, r3, #23
 800077c:	492b      	ldr	r1, [pc, #172]	; (800082c <led_init+0xd0>)
 800077e:	400a      	ands	r2, r1
 8000780:	601a      	str	r2, [r3, #0]

	/*CURRENT NORMAL LED PA11  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE11_0);
 8000782:	23a0      	movs	r3, #160	; 0xa0
 8000784:	05db      	lsls	r3, r3, #23
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	23a0      	movs	r3, #160	; 0xa0
 800078a:	05db      	lsls	r3, r3, #23
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	03c9      	lsls	r1, r1, #15
 8000790:	430a      	orrs	r2, r1
 8000792:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE11_1);
 8000794:	23a0      	movs	r3, #160	; 0xa0
 8000796:	05db      	lsls	r3, r3, #23
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	23a0      	movs	r3, #160	; 0xa0
 800079c:	05db      	lsls	r3, r3, #23
 800079e:	4924      	ldr	r1, [pc, #144]	; (8000830 <led_init+0xd4>)
 80007a0:	400a      	ands	r2, r1
 80007a2:	601a      	str	r2, [r3, #0]

	/*CURRENT HIGH  LED PA10  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE10_0);
 80007a4:	23a0      	movs	r3, #160	; 0xa0
 80007a6:	05db      	lsls	r3, r3, #23
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	23a0      	movs	r3, #160	; 0xa0
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	2180      	movs	r1, #128	; 0x80
 80007b0:	0349      	lsls	r1, r1, #13
 80007b2:	430a      	orrs	r2, r1
 80007b4:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE10_1);
 80007b6:	23a0      	movs	r3, #160	; 0xa0
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	23a0      	movs	r3, #160	; 0xa0
 80007be:	05db      	lsls	r3, r3, #23
 80007c0:	491c      	ldr	r1, [pc, #112]	; (8000834 <led_init+0xd8>)
 80007c2:	400a      	ands	r2, r1
 80007c4:	601a      	str	r2, [r3, #0]

	/*SYS_RP LED PC6  as output */
	SET_BIT(GPIOC->MODER, GPIO_MODER_MODE6_0);
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <led_init+0xdc>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <led_init+0xdc>)
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	0149      	lsls	r1, r1, #5
 80007d0:	430a      	orrs	r2, r1
 80007d2:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOC->MODER, GPIO_MODER_MODE6_1);
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <led_init+0xdc>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <led_init+0xdc>)
 80007da:	4918      	ldr	r1, [pc, #96]	; (800083c <led_init+0xe0>)
 80007dc:	400a      	ands	r2, r1
 80007de:	601a      	str	r2, [r3, #0]

	/* TEMPERATURE OK  LED PA9  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE9_0);
 80007e0:	23a0      	movs	r3, #160	; 0xa0
 80007e2:	05db      	lsls	r3, r3, #23
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	23a0      	movs	r3, #160	; 0xa0
 80007e8:	05db      	lsls	r3, r3, #23
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	02c9      	lsls	r1, r1, #11
 80007ee:	430a      	orrs	r2, r1
 80007f0:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE9_1);
 80007f2:	23a0      	movs	r3, #160	; 0xa0
 80007f4:	05db      	lsls	r3, r3, #23
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	23a0      	movs	r3, #160	; 0xa0
 80007fa:	05db      	lsls	r3, r3, #23
 80007fc:	4910      	ldr	r1, [pc, #64]	; (8000840 <led_init+0xe4>)
 80007fe:	400a      	ands	r2, r1
 8000800:	601a      	str	r2, [r3, #0]

	/* TEMPERATURE HIGH LED PA8  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE8_0);
 8000802:	23a0      	movs	r3, #160	; 0xa0
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	23a0      	movs	r3, #160	; 0xa0
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	0249      	lsls	r1, r1, #9
 8000810:	430a      	orrs	r2, r1
 8000812:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE8_1);
 8000814:	23a0      	movs	r3, #160	; 0xa0
 8000816:	05db      	lsls	r3, r3, #23
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	23a0      	movs	r3, #160	; 0xa0
 800081c:	05db      	lsls	r3, r3, #23
 800081e:	4909      	ldr	r1, [pc, #36]	; (8000844 <led_init+0xe8>)
 8000820:	400a      	ands	r2, r1
 8000822:	601a      	str	r2, [r3, #0]

}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	fdffffff 	.word	0xfdffffff
 8000830:	ff7fffff 	.word	0xff7fffff
 8000834:	ffdfffff 	.word	0xffdfffff
 8000838:	50000800 	.word	0x50000800
 800083c:	ffffdfff 	.word	0xffffdfff
 8000840:	fff7ffff 	.word	0xfff7ffff
 8000844:	fffdffff 	.word	0xfffdffff

08000848 <lm75_init>:
#include "lm75.h"

void lm75_init(void ) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
	uint8_t cmd[2];
	cmd[0] = LM75_Conf;
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2201      	movs	r2, #1
 8000852:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x0;
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	705a      	strb	r2, [r3, #1]
	i2c1_byte_tx(LM75_ADDR<<1, cmd, 2);
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2202      	movs	r2, #2
 800085e:	0019      	movs	r1, r3
 8000860:	209e      	movs	r0, #158	; 0x9e
 8000862:	f7ff fed7 	bl	8000614 <i2c1_byte_tx>
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b002      	add	sp, #8
 800086c:	bd80      	pop	{r7, pc}

0800086e <store_byte>:

	return data;
}
*/

void store_byte(M24C64_ADDR_t addr,uint8_t data ){
 800086e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000870:	b085      	sub	sp, #20
 8000872:	af00      	add	r7, sp, #0
 8000874:	0002      	movs	r2, r0
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	701a      	strb	r2, [r3, #0]
 800087a:	1dbb      	adds	r3, r7, #6
 800087c:	1c0a      	adds	r2, r1, #0
 800087e:	701a      	strb	r2, [r3, #0]
	uint8_t  buff[2];
	uint8_t stored_data;
	buff[0] = addr;
 8000880:	250c      	movs	r5, #12
 8000882:	197b      	adds	r3, r7, r5
 8000884:	1dfa      	adds	r2, r7, #7
 8000886:	7812      	ldrb	r2, [r2, #0]
 8000888:	701a      	strb	r2, [r3, #0]
	buff[1] = data;
 800088a:	197b      	adds	r3, r7, r5
 800088c:	1dba      	adds	r2, r7, #6
 800088e:	7812      	ldrb	r2, [r2, #0]
 8000890:	705a      	strb	r2, [r3, #1]

	stored_data = read_byte(addr);
 8000892:	260f      	movs	r6, #15
 8000894:	19bc      	adds	r4, r7, r6
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	0018      	movs	r0, r3
 800089c:	f000 f83b 	bl	8000916 <read_byte>
 80008a0:	0003      	movs	r3, r0
 80008a2:	7023      	strb	r3, [r4, #0]
	HAL_Delay(2);
 80008a4:	2002      	movs	r0, #2
 80008a6:	f001 f955 	bl	8001b54 <HAL_Delay>
	if (stored_data != data)
 80008aa:	19ba      	adds	r2, r7, r6
 80008ac:	1dbb      	adds	r3, r7, #6
 80008ae:	7812      	ldrb	r2, [r2, #0]
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d005      	beq.n	80008c2 <store_byte+0x54>
		i2c1_byte_tx((char ) CHIP_ADDR<<1 , buff,2);
 80008b6:	197b      	adds	r3, r7, r5
 80008b8:	2202      	movs	r2, #2
 80008ba:	0019      	movs	r1, r3
 80008bc:	209e      	movs	r0, #158	; 0x9e
 80008be:	f7ff fea9 	bl	8000614 <i2c1_byte_tx>
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b005      	add	sp, #20
 80008c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008ca <store_2byte>:

void store_2byte(M24C64_ADDR_t addr,uint16_t data ){
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	0002      	movs	r2, r0
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	701a      	strb	r2, [r3, #0]
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	1c0a      	adds	r2, r1, #0
 80008da:	801a      	strh	r2, [r3, #0]
	store_byte(addr, data & 0xff);
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	0011      	movs	r1, r2
 80008e8:	0018      	movs	r0, r3
 80008ea:	f7ff ffc0 	bl	800086e <store_byte>
	HAL_Delay(5);
 80008ee:	2005      	movs	r0, #5
 80008f0:	f001 f930 	bl	8001b54 <HAL_Delay>
	store_byte(addr + 1, data >> 8);
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	3301      	adds	r3, #1
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	0a1b      	lsrs	r3, r3, #8
 8000902:	b29b      	uxth	r3, r3
 8000904:	b2db      	uxtb	r3, r3
 8000906:	0019      	movs	r1, r3
 8000908:	0010      	movs	r0, r2
 800090a:	f7ff ffb0 	bl	800086e <store_byte>
}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	b002      	add	sp, #8
 8000914:	bd80      	pop	{r7, pc}

08000916 <read_byte>:

uint8_t  read_byte(M24C64_ADDR_t addr) {
 8000916:	b580      	push	{r7, lr}
 8000918:	b084      	sub	sp, #16
 800091a:	af00      	add	r7, sp, #0
 800091c:	0002      	movs	r2, r0
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	701a      	strb	r2, [r3, #0]
	uint8_t data[1];
    data[0] = addr;
 8000922:	210c      	movs	r1, #12
 8000924:	187b      	adds	r3, r7, r1
 8000926:	1dfa      	adds	r2, r7, #7
 8000928:	7812      	ldrb	r2, [r2, #0]
 800092a:	701a      	strb	r2, [r3, #0]
	i2c1_byte_tx(CHIP_ADDR<<1 ,data,1);
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2201      	movs	r2, #1
 8000930:	0019      	movs	r1, r3
 8000932:	209e      	movs	r0, #158	; 0x9e
 8000934:	f7ff fe6e 	bl	8000614 <i2c1_byte_tx>
	HAL_Delay(2);
 8000938:	2002      	movs	r0, #2
 800093a:	f001 f90b 	bl	8001b54 <HAL_Delay>
	return  i2c1_byte_rx(CHIP_ADDR <<1 | 1,1);
 800093e:	2101      	movs	r1, #1
 8000940:	209f      	movs	r0, #159	; 0x9f
 8000942:	f7ff fe09 	bl	8000558 <i2c1_byte_rx>
 8000946:	0003      	movs	r3, r0
}
 8000948:	0018      	movs	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	b004      	add	sp, #16
 800094e:	bd80      	pop	{r7, pc}

08000950 <read_2byte>:

uint16_t  read_2byte(M24C64_ADDR_t addr) {
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	0002      	movs	r2, r0
 8000958:	1dfb      	adds	r3, r7, #7
 800095a:	701a      	strb	r2, [r3, #0]
	uint16_t data = 0;
 800095c:	240e      	movs	r4, #14
 800095e:	193b      	adds	r3, r7, r4
 8000960:	2200      	movs	r2, #0
 8000962:	801a      	strh	r2, [r3, #0]
	data = read_byte(addr + 1) << 8;
 8000964:	1dfb      	adds	r3, r7, #7
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	0018      	movs	r0, r3
 800096e:	f7ff ffd2 	bl	8000916 <read_byte>
 8000972:	0003      	movs	r3, r0
 8000974:	b29a      	uxth	r2, r3
 8000976:	193b      	adds	r3, r7, r4
 8000978:	0212      	lsls	r2, r2, #8
 800097a:	801a      	strh	r2, [r3, #0]
	HAL_Delay(5);
 800097c:	2005      	movs	r0, #5
 800097e:	f001 f8e9 	bl	8001b54 <HAL_Delay>
	data |= read_byte(addr);
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	0018      	movs	r0, r3
 8000988:	f7ff ffc5 	bl	8000916 <read_byte>
 800098c:	0003      	movs	r3, r0
 800098e:	b299      	uxth	r1, r3
 8000990:	193b      	adds	r3, r7, r4
 8000992:	193a      	adds	r2, r7, r4
 8000994:	8812      	ldrh	r2, [r2, #0]
 8000996:	430a      	orrs	r2, r1
 8000998:	801a      	strh	r2, [r3, #0]

	return data;
 800099a:	193b      	adds	r3, r7, r4
 800099c:	881b      	ldrh	r3, [r3, #0]
}
 800099e:	0018      	movs	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b005      	add	sp, #20
 80009a4:	bd90      	pop	{r4, r7, pc}
	...

080009a8 <set_pout_max_min_adc_values>:
/* USER CODE BEGIN PFP */

uint8_t get_db_gain(uint16_t adc_gain);
uint8_t get_dbm_pout(uint16_t pout_adc);

AD8363_t set_pout_max_min_adc_values(AD8363_t pout) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	6018      	str	r0, [r3, #0]
	if (read_byte(POUT_IS_CALIBRATED_ADDR) != AD8363_IS_CALIBRATED) {
 80009b2:	2010      	movs	r0, #16
 80009b4:	f7ff ffaf 	bl	8000916 <read_byte>
 80009b8:	0003      	movs	r3, r0
 80009ba:	2baa      	cmp	r3, #170	; 0xaa
 80009bc:	d00a      	beq.n	80009d4 <set_pout_max_min_adc_values+0x2c>
		store_2byte(POUT_ADC_MIN_ADDR_0, AD8363_ADC_MIN);
 80009be:	23f4      	movs	r3, #244	; 0xf4
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	0019      	movs	r1, r3
 80009c4:	200e      	movs	r0, #14
 80009c6:	f7ff ff80 	bl	80008ca <store_2byte>
		store_2byte(POUT_ADC_MAX_ADDR_0, AD8363_ADC_MAX);
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <set_pout_max_min_adc_values+0x74>)
 80009cc:	0019      	movs	r1, r3
 80009ce:	200c      	movs	r0, #12
 80009d0:	f7ff ff7b 	bl	80008ca <store_2byte>
	}
	pout.min = read_2byte(POUT_ADC_MIN_ADDR_0);
 80009d4:	200e      	movs	r0, #14
 80009d6:	f7ff ffbb 	bl	8000950 <read_2byte>
 80009da:	0003      	movs	r3, r0
 80009dc:	001a      	movs	r2, r3
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	805a      	strh	r2, [r3, #2]
	pout.max = read_2byte(POUT_ADC_MAX_ADDR_0);
 80009e2:	200c      	movs	r0, #12
 80009e4:	f7ff ffb4 	bl	8000950 <read_2byte>
 80009e8:	0003      	movs	r3, r0
 80009ea:	001a      	movs	r2, r3
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	801a      	strh	r2, [r3, #0]

	return pout;
 80009f0:	210c      	movs	r1, #12
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	1d3a      	adds	r2, r7, #4
 80009f6:	6812      	ldr	r2, [r2, #0]
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	187a      	adds	r2, r7, r1
 80009fc:	2300      	movs	r3, #0
 80009fe:	8811      	ldrh	r1, [r2, #0]
 8000a00:	0409      	lsls	r1, r1, #16
 8000a02:	0c09      	lsrs	r1, r1, #16
 8000a04:	0c1b      	lsrs	r3, r3, #16
 8000a06:	041b      	lsls	r3, r3, #16
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	8852      	ldrh	r2, [r2, #2]
 8000a0c:	0412      	lsls	r2, r2, #16
 8000a0e:	041b      	lsls	r3, r3, #16
 8000a10:	0c1b      	lsrs	r3, r3, #16
 8000a12:	4313      	orrs	r3, r2
}
 8000a14:	0018      	movs	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b004      	add	sp, #16
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	0000075b 	.word	0x0000075b

08000a20 <set_pin_max_min_adc_values>:

MAX4003_t set_pin_max_min_adc_values(MAX4003_t pin) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	6018      	str	r0, [r3, #0]
	if (read_byte(PIN_IS_CALIBRATED_ADDR) != MAX4003_IS_CALIBRATED) {
 8000a2a:	2015      	movs	r0, #21
 8000a2c:	f7ff ff73 	bl	8000916 <read_byte>
 8000a30:	0003      	movs	r3, r0
 8000a32:	2baa      	cmp	r3, #170	; 0xaa
 8000a34:	d00a      	beq.n	8000a4c <set_pin_max_min_adc_values+0x2c>
		store_2byte(PIN_ADC_MIN_ADDR_0, MAX4003_ADC_MIN);
 8000a36:	23f4      	movs	r3, #244	; 0xf4
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	2013      	movs	r0, #19
 8000a3e:	f7ff ff44 	bl	80008ca <store_2byte>
		store_2byte(PIN_ADC_MAX_ADDR_0, MAX4003_ADC_MAX);
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <set_pin_max_min_adc_values+0x74>)
 8000a44:	0019      	movs	r1, r3
 8000a46:	2011      	movs	r0, #17
 8000a48:	f7ff ff3f 	bl	80008ca <store_2byte>
	}
	pin.max = read_2byte(PIN_ADC_MAX_ADDR_0);
 8000a4c:	2011      	movs	r0, #17
 8000a4e:	f7ff ff7f 	bl	8000950 <read_2byte>
 8000a52:	0003      	movs	r3, r0
 8000a54:	001a      	movs	r2, r3
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	801a      	strh	r2, [r3, #0]
	pin.min = read_2byte(PIN_ADC_MIN_ADDR_0);
 8000a5a:	2013      	movs	r0, #19
 8000a5c:	f7ff ff78 	bl	8000950 <read_2byte>
 8000a60:	0003      	movs	r3, r0
 8000a62:	001a      	movs	r2, r3
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	805a      	strh	r2, [r3, #2]
	return pin;
 8000a68:	210c      	movs	r1, #12
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	1d3a      	adds	r2, r7, #4
 8000a6e:	6812      	ldr	r2, [r2, #0]
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	187a      	adds	r2, r7, r1
 8000a74:	2300      	movs	r3, #0
 8000a76:	8811      	ldrh	r1, [r2, #0]
 8000a78:	0409      	lsls	r1, r1, #16
 8000a7a:	0c09      	lsrs	r1, r1, #16
 8000a7c:	0c1b      	lsrs	r3, r3, #16
 8000a7e:	041b      	lsls	r3, r3, #16
 8000a80:	430b      	orrs	r3, r1
 8000a82:	8852      	ldrh	r2, [r2, #2]
 8000a84:	0412      	lsls	r2, r2, #16
 8000a86:	041b      	lsls	r3, r3, #16
 8000a88:	0c1b      	lsrs	r3, r3, #16
 8000a8a:	4313      	orrs	r3, r2
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b004      	add	sp, #16
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	0000075b 	.word	0x0000075b

08000a98 <set_max_min_vswr_adc_values>:

MAX4003_t set_max_min_vswr_adc_values(MAX4003_t vswr) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	6018      	str	r0, [r3, #0]
	if (read_byte(VSWR_IS_CALIBRATED_ADDR) != MAX4003_IS_CALIBRATED) {
 8000aa2:	201a      	movs	r0, #26
 8000aa4:	f7ff ff37 	bl	8000916 <read_byte>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	2baa      	cmp	r3, #170	; 0xaa
 8000aac:	d00a      	beq.n	8000ac4 <set_max_min_vswr_adc_values+0x2c>
		store_2byte(VSWR_ADC_MIN_ADDR_0, MAX4003_ADC_MIN);
 8000aae:	23f4      	movs	r3, #244	; 0xf4
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	0019      	movs	r1, r3
 8000ab4:	2018      	movs	r0, #24
 8000ab6:	f7ff ff08 	bl	80008ca <store_2byte>
		store_2byte(VSWR_ADC_MAX_ADDR_0, MAX4003_ADC_MAX);
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <set_max_min_vswr_adc_values+0x74>)
 8000abc:	0019      	movs	r1, r3
 8000abe:	2016      	movs	r0, #22
 8000ac0:	f7ff ff03 	bl	80008ca <store_2byte>
	}
	vswr.max = read_2byte(VSWR_ADC_MAX_ADDR_0);
 8000ac4:	2016      	movs	r0, #22
 8000ac6:	f7ff ff43 	bl	8000950 <read_2byte>
 8000aca:	0003      	movs	r3, r0
 8000acc:	001a      	movs	r2, r3
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	801a      	strh	r2, [r3, #0]
	vswr.min = read_2byte(VSWR_ADC_MIN_ADDR_0);
 8000ad2:	2018      	movs	r0, #24
 8000ad4:	f7ff ff3c 	bl	8000950 <read_2byte>
 8000ad8:	0003      	movs	r3, r0
 8000ada:	001a      	movs	r2, r3
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	805a      	strh	r2, [r3, #2]
	return vswr;
 8000ae0:	210c      	movs	r1, #12
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	1d3a      	adds	r2, r7, #4
 8000ae6:	6812      	ldr	r2, [r2, #0]
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	187a      	adds	r2, r7, r1
 8000aec:	2300      	movs	r3, #0
 8000aee:	8811      	ldrh	r1, [r2, #0]
 8000af0:	0409      	lsls	r1, r1, #16
 8000af2:	0c09      	lsrs	r1, r1, #16
 8000af4:	0c1b      	lsrs	r3, r3, #16
 8000af6:	041b      	lsls	r3, r3, #16
 8000af8:	430b      	orrs	r3, r1
 8000afa:	8852      	ldrh	r2, [r2, #2]
 8000afc:	0412      	lsls	r2, r2, #16
 8000afe:	041b      	lsls	r3, r3, #16
 8000b00:	0c1b      	lsrs	r3, r3, #16
 8000b02:	4313      	orrs	r3, r2
}
 8000b04:	0018      	movs	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b004      	add	sp, #16
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	0000075b 	.word	0x0000075b

08000b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b10:	b5b0      	push	{r4, r5, r7, lr}
 8000b12:	4c52      	ldr	r4, [pc, #328]	; (8000c5c <main+0x14c>)
 8000b14:	44a5      	add	sp, r4
 8000b16:	af00      	add	r7, sp, #0
	AD8363_t pout;
	MAX4003_t pin;
	MAX4003_t vswr;
	LED_t led;
	uint8_t att;
	uint8_t i = 0, ret;
 8000b18:	4b51      	ldr	r3, [pc, #324]	; (8000c60 <main+0x150>)
 8000b1a:	18fb      	adds	r3, r7, r3
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
	M24C64_t  eeprom;
	//uint8_t Buffer[25] = {0};
	uint8_t Space[] = " - ";
 8000b20:	4b50      	ldr	r3, [pc, #320]	; (8000c64 <main+0x154>)
 8000b22:	2489      	movs	r4, #137	; 0x89
 8000b24:	0124      	lsls	r4, r4, #4
 8000b26:	191b      	adds	r3, r3, r4
 8000b28:	19db      	adds	r3, r3, r7
 8000b2a:	4a4f      	ldr	r2, [pc, #316]	; (8000c68 <main+0x158>)
 8000b2c:	601a      	str	r2, [r3, #0]
	uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 8000b2e:	4b4f      	ldr	r3, [pc, #316]	; (8000c6c <main+0x15c>)
 8000b30:	191b      	adds	r3, r3, r4
 8000b32:	19db      	adds	r3, r3, r7
 8000b34:	4a4e      	ldr	r2, [pc, #312]	; (8000c70 <main+0x160>)
 8000b36:	ca23      	ldmia	r2!, {r0, r1, r5}
 8000b38:	c323      	stmia	r3!, {r0, r1, r5}
 8000b3a:	ca23      	ldmia	r2!, {r0, r1, r5}
 8000b3c:	c323      	stmia	r3!, {r0, r1, r5}
 8000b3e:	8812      	ldrh	r2, [r2, #0]
 8000b40:	801a      	strh	r2, [r3, #0]
	uint8_t EndMSG[] = "Done! \r\n\r\n";
 8000b42:	4b4c      	ldr	r3, [pc, #304]	; (8000c74 <main+0x164>)
 8000b44:	191b      	adds	r3, r3, r4
 8000b46:	19db      	adds	r3, r3, r7
 8000b48:	4a4b      	ldr	r2, [pc, #300]	; (8000c78 <main+0x168>)
 8000b4a:	ca03      	ldmia	r2!, {r0, r1}
 8000b4c:	c303      	stmia	r3!, {r0, r1}
 8000b4e:	8811      	ldrh	r1, [r2, #0]
 8000b50:	8019      	strh	r1, [r3, #0]
 8000b52:	7892      	ldrb	r2, [r2, #2]
 8000b54:	709a      	strb	r2, [r3, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b56:	f000 ff77 	bl	8001a48 <HAL_Init>

  /* USER CODE BEGIN Init */

	/* enable clock access ro GPIOA and GPIOB */
	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOAEN);
 8000b5a:	4b48      	ldr	r3, [pc, #288]	; (8000c7c <main+0x16c>)
 8000b5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b5e:	4b47      	ldr	r3, [pc, #284]	; (8000c7c <main+0x16c>)
 8000b60:	2101      	movs	r1, #1
 8000b62:	430a      	orrs	r2, r1
 8000b64:	635a      	str	r2, [r3, #52]	; 0x34
	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN);
 8000b66:	4b45      	ldr	r3, [pc, #276]	; (8000c7c <main+0x16c>)
 8000b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b6a:	4b44      	ldr	r3, [pc, #272]	; (8000c7c <main+0x16c>)
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	635a      	str	r2, [r3, #52]	; 0x34

	/* PBA15 as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE15_0);
 8000b72:	23a0      	movs	r3, #160	; 0xa0
 8000b74:	05db      	lsls	r3, r3, #23
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	23a0      	movs	r3, #160	; 0xa0
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	05c9      	lsls	r1, r1, #23
 8000b80:	430a      	orrs	r2, r1
 8000b82:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE15_1);
 8000b84:	23a0      	movs	r3, #160	; 0xa0
 8000b86:	05db      	lsls	r3, r3, #23
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	23a0      	movs	r3, #160	; 0xa0
 8000b8c:	05db      	lsls	r3, r3, #23
 8000b8e:	0052      	lsls	r2, r2, #1
 8000b90:	0852      	lsrs	r2, r2, #1
 8000b92:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b94:	f000 f888 	bl	8000ca8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	module_init(&pa, POWER_AMPLIFIER, ID8);
 8000b98:	4b39      	ldr	r3, [pc, #228]	; (8000c80 <main+0x170>)
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	2208      	movs	r2, #8
 8000b9e:	2109      	movs	r1, #9
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f000 fb5e 	bl	8001262 <module_init>

	led_init();
 8000ba6:	f7ff fdd9 	bl	800075c <led_init>
	i2c1_init();
 8000baa:	f7ff fc1f 	bl	80003ec <i2c1_init>
	uart1_init(HS16_CLK, BAUD_RATE, &uart1);
 8000bae:	2388      	movs	r3, #136	; 0x88
 8000bb0:	011b      	lsls	r3, r3, #4
 8000bb2:	18fa      	adds	r2, r7, r3
 8000bb4:	23e1      	movs	r3, #225	; 0xe1
 8000bb6:	025b      	lsls	r3, r3, #9
 8000bb8:	4832      	ldr	r0, [pc, #200]	; (8000c84 <main+0x174>)
 8000bba:	0019      	movs	r1, r3
 8000bbc:	f000 fdec 	bl	8001798 <uart1_init>
	lm75_init();
 8000bc0:	f7ff fe42 	bl	8000848 <lm75_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc4:	f000 fa12 	bl	8000fec <MX_GPIO_Init>
  MX_DMA_Init();
 8000bc8:	f000 f9f2 	bl	8000fb0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000bcc:	f000 f8ca 	bl	8000d64 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000bd0:	f000 f9a0 	bl	8000f14 <MX_USART1_UART_Init>
//  MX_IWDG_Init();
  /* USER CODE BEGIN 2 */

// Calibrate The ADC On Power-Up For Better Accuracy
	HAL_ADCEx_Calibration_Start(&hadc1);
 8000bd4:	4b2c      	ldr	r3, [pc, #176]	; (8000c88 <main+0x178>)
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f001 ff48 	bl	8002a6c <HAL_ADCEx_Calibration_Start>
	uart1_send_str("LNA init\n\r");
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <main+0x17c>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f000 fec0 	bl	8001964 <uart1_send_str>
uint8_t addrs[5] = {0};  // 0x50 0x60 0x4f
 8000be4:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <main+0x180>)
 8000be6:	191b      	adds	r3, r3, r4
 8000be8:	19db      	adds	r3, r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	711a      	strb	r2, [r3, #4]
//	i2c1_scanner(addrs);




	store_byte(ATT_VALUE_ADDR,5);
 8000bf2:	2105      	movs	r1, #5
 8000bf4:	200b      	movs	r0, #11
 8000bf6:	f7ff fe3a 	bl	800086e <store_byte>
	att = read_byte(ATT_VALUE_ADDR);
 8000bfa:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <main+0x184>)
 8000bfc:	18fc      	adds	r4, r7, r3
 8000bfe:	200b      	movs	r0, #11
 8000c00:	f7ff fe89 	bl	8000916 <read_byte>
 8000c04:	0003      	movs	r3, r0
 8000c06:	7023      	strb	r3, [r4, #0]
	if (att > 0 && att < 30)
		bda4601_set_initial_att(att, STARTING_MILLIS);
	else
		bda4601_set_att(0, 3);
*/
	pout = set_pout_max_min_adc_values(pout);
 8000c08:	2486      	movs	r4, #134	; 0x86
 8000c0a:	0124      	lsls	r4, r4, #4
 8000c0c:	193b      	adds	r3, r7, r4
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	f7ff feca 	bl	80009a8 <set_pout_max_min_adc_values>
 8000c14:	0003      	movs	r3, r0
 8000c16:	001a      	movs	r2, r3
 8000c18:	193b      	adds	r3, r7, r4
 8000c1a:	601a      	str	r2, [r3, #0]
	pin = set_pin_max_min_adc_values(pin);
 8000c1c:	4c1e      	ldr	r4, [pc, #120]	; (8000c98 <main+0x188>)
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	6818      	ldr	r0, [r3, #0]
 8000c22:	f7ff fefd 	bl	8000a20 <set_pin_max_min_adc_values>
 8000c26:	0003      	movs	r3, r0
 8000c28:	001a      	movs	r2, r3
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	601a      	str	r2, [r3, #0]
	vswr = set_max_min_vswr_adc_values(vswr);
 8000c2e:	4c1b      	ldr	r4, [pc, #108]	; (8000c9c <main+0x18c>)
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	6818      	ldr	r0, [r3, #0]
 8000c34:	f7ff ff30 	bl	8000a98 <set_max_min_vswr_adc_values>
 8000c38:	0003      	movs	r3, r0
 8000c3a:	001a      	movs	r2, r3
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, 4);
 8000c40:	4917      	ldr	r1, [pc, #92]	; (8000ca0 <main+0x190>)
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <main+0x178>)
 8000c44:	2204      	movs	r2, #4
 8000c46:	0018      	movs	r0, r3
 8000c48:	f001 faa8 	bl	800219c <HAL_ADC_Start_DMA>
	led.ka_counter = HAL_GetTick();
 8000c4c:	f000 ff78 	bl	8001b40 <HAL_GetTick>
 8000c50:	0002      	movs	r2, r0
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <main+0x194>)
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	601a      	str	r2, [r3, #0]

	while (1) {
 8000c58:	e7fe      	b.n	8000c58 <main+0x148>
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	fffff770 	.word	0xfffff770
 8000c60:	0000088f 	.word	0x0000088f
 8000c64:	fffff7a4 	.word	0xfffff7a4
 8000c68:	00202d20 	.word	0x00202d20
 8000c6c:	fffff788 	.word	0xfffff788
 8000c70:	08004d30 	.word	0x08004d30
 8000c74:	fffff77c 	.word	0xfffff77c
 8000c78:	08004d4c 	.word	0x08004d4c
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	0000086c 	.word	0x0000086c
 8000c84:	00f42400 	.word	0x00f42400
 8000c88:	2000008c 	.word	0x2000008c
 8000c8c:	08004d24 	.word	0x08004d24
 8000c90:	fffff774 	.word	0xfffff774
 8000c94:	0000088e 	.word	0x0000088e
 8000c98:	0000085c 	.word	0x0000085c
 8000c9c:	00000858 	.word	0x00000858
 8000ca0:	200001e0 	.word	0x200001e0
 8000ca4:	0000083c 	.word	0x0000083c

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b093      	sub	sp, #76	; 0x4c
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	2414      	movs	r4, #20
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	2334      	movs	r3, #52	; 0x34
 8000cb6:	001a      	movs	r2, r3
 8000cb8:	2100      	movs	r1, #0
 8000cba:	f003 ff63 	bl	8004b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	2310      	movs	r3, #16
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	f003 ff5c 	bl	8004b84 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f002 fc53 	bl	800357c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	220a      	movs	r2, #10
 8000cda:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cdc:	193b      	adds	r3, r7, r4
 8000cde:	2280      	movs	r2, #128	; 0x80
 8000ce0:	0052      	lsls	r2, r2, #1
 8000ce2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000ce4:	0021      	movs	r1, r4
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	2240      	movs	r2, #64	; 0x40
 8000cf0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2202      	movs	r2, #2
 8000d02:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2210      	movs	r2, #16
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2210      	movs	r2, #16
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2280      	movs	r2, #128	; 0x80
 8000d14:	0292      	lsls	r2, r2, #10
 8000d16:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	0592      	lsls	r2, r2, #22
 8000d1e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	0018      	movs	r0, r3
 8000d24:	f002 fc76 	bl	8003614 <HAL_RCC_OscConfig>
 8000d28:	1e03      	subs	r3, r0, #0
 8000d2a:	d001      	beq.n	8000d30 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000d2c:	f000 fa94 	bl	8001258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2207      	movs	r2, #7
 8000d34:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2202      	movs	r2, #2
 8000d3a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f002 ff71 	bl	8003c34 <HAL_RCC_ClockConfig>
 8000d52:	1e03      	subs	r3, r0, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000d56:	f000 fa7f 	bl	8001258 <Error_Handler>
  }
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b013      	add	sp, #76	; 0x4c
 8000d60:	bd90      	pop	{r4, r7, pc}
	...

08000d64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	230c      	movs	r3, #12
 8000d70:	001a      	movs	r2, r3
 8000d72:	2100      	movs	r1, #0
 8000d74:	f003 ff06 	bl	8004b84 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d78:	4b5e      	ldr	r3, [pc, #376]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000d7a:	4a5f      	ldr	r2, [pc, #380]	; (8000ef8 <MX_ADC1_Init+0x194>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d7e:	4b5d      	ldr	r3, [pc, #372]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000d80:	2280      	movs	r2, #128	; 0x80
 8000d82:	05d2      	lsls	r2, r2, #23
 8000d84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d86:	4b5b      	ldr	r3, [pc, #364]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d8c:	4b59      	ldr	r3, [pc, #356]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d92:	4b58      	ldr	r3, [pc, #352]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000d94:	2280      	movs	r2, #128	; 0x80
 8000d96:	0392      	lsls	r2, r2, #14
 8000d98:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d9a:	4b56      	ldr	r3, [pc, #344]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000da0:	4b54      	ldr	r3, [pc, #336]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000da6:	4b53      	ldr	r3, [pc, #332]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dac:	4b51      	ldr	r3, [pc, #324]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 7;
 8000db2:	4b50      	ldr	r3, [pc, #320]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000db8:	4b4e      	ldr	r3, [pc, #312]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000dba:	2220      	movs	r2, #32
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc0:	4b4c      	ldr	r3, [pc, #304]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc6:	4b4b      	ldr	r3, [pc, #300]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dcc:	4b49      	ldr	r3, [pc, #292]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000dce:	222c      	movs	r2, #44	; 0x2c
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dd4:	4b47      	ldr	r3, [pc, #284]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000dda:	4b46      	ldr	r3, [pc, #280]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000de0:	4b44      	ldr	r3, [pc, #272]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000de6:	4b43      	ldr	r3, [pc, #268]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000de8:	223c      	movs	r2, #60	; 0x3c
 8000dea:	2100      	movs	r1, #0
 8000dec:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000dee:	4b41      	ldr	r3, [pc, #260]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000df4:	4b3f      	ldr	r3, [pc, #252]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000df6:	0018      	movs	r0, r3
 8000df8:	f001 f828 	bl	8001e4c <HAL_ADC_Init>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000e00:	f000 fa2a 	bl	8001258 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2201      	movs	r2, #1
 8000e08:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e16:	1d3a      	adds	r2, r7, #4
 8000e18:	4b36      	ldr	r3, [pc, #216]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000e1a:	0011      	movs	r1, r2
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f001 fa5b 	bl	80022d8 <HAL_ADC_ConfigChannel>
 8000e22:	1e03      	subs	r3, r0, #0
 8000e24:	d001      	beq.n	8000e2a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e26:	f000 fa17 	bl	8001258 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4a33      	ldr	r2, [pc, #204]	; (8000efc <MX_ADC1_Init+0x198>)
 8000e2e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	2204      	movs	r2, #4
 8000e34:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e36:	1d3a      	adds	r2, r7, #4
 8000e38:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f001 fa4b 	bl	80022d8 <HAL_ADC_ConfigChannel>
 8000e42:	1e03      	subs	r3, r0, #0
 8000e44:	d001      	beq.n	8000e4a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000e46:	f000 fa07 	bl	8001258 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	4a2c      	ldr	r2, [pc, #176]	; (8000f00 <MX_ADC1_Init+0x19c>)
 8000e4e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2208      	movs	r2, #8
 8000e54:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e56:	1d3a      	adds	r2, r7, #4
 8000e58:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000e5a:	0011      	movs	r1, r2
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f001 fa3b 	bl	80022d8 <HAL_ADC_ConfigChannel>
 8000e62:	1e03      	subs	r3, r0, #0
 8000e64:	d001      	beq.n	8000e6a <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8000e66:	f000 f9f7 	bl	8001258 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	4a25      	ldr	r2, [pc, #148]	; (8000f04 <MX_ADC1_Init+0x1a0>)
 8000e6e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	220c      	movs	r2, #12
 8000e74:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e76:	1d3a      	adds	r2, r7, #4
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000e7a:	0011      	movs	r1, r2
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f001 fa2b 	bl	80022d8 <HAL_ADC_ConfigChannel>
 8000e82:	1e03      	subs	r3, r0, #0
 8000e84:	d001      	beq.n	8000e8a <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8000e86:	f000 f9e7 	bl	8001258 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	4a1e      	ldr	r2, [pc, #120]	; (8000f08 <MX_ADC1_Init+0x1a4>)
 8000e8e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2210      	movs	r2, #16
 8000e94:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e96:	1d3a      	adds	r2, r7, #4
 8000e98:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000e9a:	0011      	movs	r1, r2
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f001 fa1b 	bl	80022d8 <HAL_ADC_ConfigChannel>
 8000ea2:	1e03      	subs	r3, r0, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_ADC1_Init+0x146>
  {
    Error_Handler();
 8000ea6:	f000 f9d7 	bl	8001258 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	4a17      	ldr	r2, [pc, #92]	; (8000f0c <MX_ADC1_Init+0x1a8>)
 8000eae:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2214      	movs	r2, #20
 8000eb4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb6:	1d3a      	adds	r2, r7, #4
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000eba:	0011      	movs	r1, r2
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f001 fa0b 	bl	80022d8 <HAL_ADC_ConfigChannel>
 8000ec2:	1e03      	subs	r3, r0, #0
 8000ec4:	d001      	beq.n	8000eca <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 8000ec6:	f000 f9c7 	bl	8001258 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <MX_ADC1_Init+0x1ac>)
 8000ece:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	2218      	movs	r2, #24
 8000ed4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed6:	1d3a      	adds	r2, r7, #4
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_ADC1_Init+0x190>)
 8000eda:	0011      	movs	r1, r2
 8000edc:	0018      	movs	r0, r3
 8000ede:	f001 f9fb 	bl	80022d8 <HAL_ADC_ConfigChannel>
 8000ee2:	1e03      	subs	r3, r0, #0
 8000ee4:	d001      	beq.n	8000eea <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 8000ee6:	f000 f9b7 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b004      	add	sp, #16
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	2000008c 	.word	0x2000008c
 8000ef8:	40012400 	.word	0x40012400
 8000efc:	04000002 	.word	0x04000002
 8000f00:	08000004 	.word	0x08000004
 8000f04:	10000010 	.word	0x10000010
 8000f08:	14000020 	.word	0x14000020
 8000f0c:	18000040 	.word	0x18000040
 8000f10:	b0001000 	.word	0xb0001000

08000f14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <MX_USART1_UART_Init+0x94>)
 8000f1a:	4a24      	ldr	r2, [pc, #144]	; (8000fac <MX_USART1_UART_Init+0x98>)
 8000f1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f1e:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <MX_USART1_UART_Init+0x94>)
 8000f20:	2296      	movs	r2, #150	; 0x96
 8000f22:	0192      	lsls	r2, r2, #6
 8000f24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <MX_USART1_UART_Init+0x94>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <MX_USART1_UART_Init+0x94>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <MX_USART1_UART_Init+0x94>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <MX_USART1_UART_Init+0x94>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <MX_USART1_UART_Init+0x94>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f44:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <MX_USART1_UART_Init+0x94>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <MX_USART1_UART_Init+0x94>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_USART1_UART_Init+0x94>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_USART1_UART_Init+0x94>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_USART1_UART_Init+0x94>)
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f003 f938 	bl	80041d4 <HAL_UART_Init>
 8000f64:	1e03      	subs	r3, r0, #0
 8000f66:	d001      	beq.n	8000f6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f68:	f000 f976 	bl	8001258 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_USART1_UART_Init+0x94>)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	0018      	movs	r0, r3
 8000f72:	f003 fcf3 	bl	800495c <HAL_UARTEx_SetTxFifoThreshold>
 8000f76:	1e03      	subs	r3, r0, #0
 8000f78:	d001      	beq.n	8000f7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f7a:	f000 f96d 	bl	8001258 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <MX_USART1_UART_Init+0x94>)
 8000f80:	2100      	movs	r1, #0
 8000f82:	0018      	movs	r0, r3
 8000f84:	f003 fd2a 	bl	80049dc <HAL_UARTEx_SetRxFifoThreshold>
 8000f88:	1e03      	subs	r3, r0, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f8c:	f000 f964 	bl	8001258 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <MX_USART1_UART_Init+0x94>)
 8000f92:	0018      	movs	r0, r3
 8000f94:	f003 fca8 	bl	80048e8 <HAL_UARTEx_DisableFifoMode>
 8000f98:	1e03      	subs	r3, r0, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f9c:	f000 f95c 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	2000014c 	.word	0x2000014c
 8000fac:	40013800 	.word	0x40013800

08000fb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_DMA_Init+0x38>)
 8000fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <MX_DMA_Init+0x38>)
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	639a      	str	r2, [r3, #56]	; 0x38
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_DMA_Init+0x38>)
 8000fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4013      	ands	r3, r2
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2009      	movs	r0, #9
 8000fd4:	f001 fecc 	bl	8002d70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fd8:	2009      	movs	r0, #9
 8000fda:	f001 fede 	bl	8002d9a <HAL_NVIC_EnableIRQ>

}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b002      	add	sp, #8
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	40021000 	.word	0x40021000

08000fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	240c      	movs	r4, #12
 8000ff4:	193b      	adds	r3, r7, r4
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	2314      	movs	r3, #20
 8000ffa:	001a      	movs	r2, r3
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	f003 fdc1 	bl	8004b84 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	4b4d      	ldr	r3, [pc, #308]	; (8001138 <MX_GPIO_Init+0x14c>)
 8001004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001006:	4b4c      	ldr	r3, [pc, #304]	; (8001138 <MX_GPIO_Init+0x14c>)
 8001008:	2102      	movs	r1, #2
 800100a:	430a      	orrs	r2, r1
 800100c:	635a      	str	r2, [r3, #52]	; 0x34
 800100e:	4b4a      	ldr	r3, [pc, #296]	; (8001138 <MX_GPIO_Init+0x14c>)
 8001010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001012:	2202      	movs	r2, #2
 8001014:	4013      	ands	r3, r2
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	4b47      	ldr	r3, [pc, #284]	; (8001138 <MX_GPIO_Init+0x14c>)
 800101c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800101e:	4b46      	ldr	r3, [pc, #280]	; (8001138 <MX_GPIO_Init+0x14c>)
 8001020:	2104      	movs	r1, #4
 8001022:	430a      	orrs	r2, r1
 8001024:	635a      	str	r2, [r3, #52]	; 0x34
 8001026:	4b44      	ldr	r3, [pc, #272]	; (8001138 <MX_GPIO_Init+0x14c>)
 8001028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800102a:	2204      	movs	r2, #4
 800102c:	4013      	ands	r3, r2
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	4b41      	ldr	r3, [pc, #260]	; (8001138 <MX_GPIO_Init+0x14c>)
 8001034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001036:	4b40      	ldr	r3, [pc, #256]	; (8001138 <MX_GPIO_Init+0x14c>)
 8001038:	2101      	movs	r1, #1
 800103a:	430a      	orrs	r2, r1
 800103c:	635a      	str	r2, [r3, #52]	; 0x34
 800103e:	4b3e      	ldr	r3, [pc, #248]	; (8001138 <MX_GPIO_Init+0x14c>)
 8001040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001042:	2201      	movs	r2, #1
 8001044:	4013      	ands	r3, r2
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA_HAB_Pin|LE_ATT_Pin|TEMP_HIGH_Pin|TEMP_OK_Pin
 800104a:	493c      	ldr	r1, [pc, #240]	; (800113c <MX_GPIO_Init+0x150>)
 800104c:	23a0      	movs	r3, #160	; 0xa0
 800104e:	05db      	lsls	r3, r3, #23
 8001050:	2200      	movs	r2, #0
 8001052:	0018      	movs	r0, r3
 8001054:	f002 fa74 	bl	8003540 <HAL_GPIO_WritePin>
                          |CURR_H_Pin|CURR_N_Pin|CURR_L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_ATT_Pin|DATA_ATT_Pin|DE_485_Pin, GPIO_PIN_RESET);
 8001058:	4b39      	ldr	r3, [pc, #228]	; (8001140 <MX_GPIO_Init+0x154>)
 800105a:	2200      	movs	r2, #0
 800105c:	2123      	movs	r1, #35	; 0x23
 800105e:	0018      	movs	r0, r3
 8001060:	f002 fa6e 	bl	8003540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001064:	4b37      	ldr	r3, [pc, #220]	; (8001144 <MX_GPIO_Init+0x158>)
 8001066:	2200      	movs	r2, #0
 8001068:	2140      	movs	r1, #64	; 0x40
 800106a:	0018      	movs	r0, r3
 800106c:	f002 fa68 	bl	8003540 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001070:	193b      	adds	r3, r7, r4
 8001072:	22c0      	movs	r2, #192	; 0xc0
 8001074:	0092      	lsls	r2, r2, #2
 8001076:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001078:	193b      	adds	r3, r7, r4
 800107a:	2212      	movs	r2, #18
 800107c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	193b      	adds	r3, r7, r4
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	193b      	adds	r3, r7, r4
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800108a:	193b      	adds	r3, r7, r4
 800108c:	2206      	movs	r2, #6
 800108e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001090:	193b      	adds	r3, r7, r4
 8001092:	4a2b      	ldr	r2, [pc, #172]	; (8001140 <MX_GPIO_Init+0x154>)
 8001094:	0019      	movs	r1, r3
 8001096:	0010      	movs	r0, r2
 8001098:	f002 f8ee 	bl	8003278 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_INT_Pin */
  GPIO_InitStruct.Pin = TEMP_INT_Pin;
 800109c:	0021      	movs	r1, r4
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	2280      	movs	r2, #128	; 0x80
 80010a2:	01d2      	lsls	r2, r2, #7
 80010a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a6:	000c      	movs	r4, r1
 80010a8:	193b      	adds	r3, r7, r4
 80010aa:	2200      	movs	r2, #0
 80010ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	193b      	adds	r3, r7, r4
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TEMP_INT_GPIO_Port, &GPIO_InitStruct);
 80010b4:	193b      	adds	r3, r7, r4
 80010b6:	4a23      	ldr	r2, [pc, #140]	; (8001144 <MX_GPIO_Init+0x158>)
 80010b8:	0019      	movs	r1, r3
 80010ba:	0010      	movs	r0, r2
 80010bc:	f002 f8dc 	bl	8003278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA_HAB_Pin LE_ATT_Pin TEMP_HIGH_Pin TEMP_OK_Pin
                           CURR_H_Pin CURR_N_Pin CURR_L_Pin */
  GPIO_InitStruct.Pin = PA_HAB_Pin|LE_ATT_Pin|TEMP_HIGH_Pin|TEMP_OK_Pin
 80010c0:	193b      	adds	r3, r7, r4
 80010c2:	4a1e      	ldr	r2, [pc, #120]	; (800113c <MX_GPIO_Init+0x150>)
 80010c4:	601a      	str	r2, [r3, #0]
                          |CURR_H_Pin|CURR_N_Pin|CURR_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	193b      	adds	r3, r7, r4
 80010c8:	2201      	movs	r2, #1
 80010ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	193b      	adds	r3, r7, r4
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	193b      	adds	r3, r7, r4
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	193a      	adds	r2, r7, r4
 80010da:	23a0      	movs	r3, #160	; 0xa0
 80010dc:	05db      	lsls	r3, r3, #23
 80010de:	0011      	movs	r1, r2
 80010e0:	0018      	movs	r0, r3
 80010e2:	f002 f8c9 	bl	8003278 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_ATT_Pin DATA_ATT_Pin DE_485_Pin */
  GPIO_InitStruct.Pin = CLK_ATT_Pin|DATA_ATT_Pin|DE_485_Pin;
 80010e6:	193b      	adds	r3, r7, r4
 80010e8:	2223      	movs	r2, #35	; 0x23
 80010ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ec:	193b      	adds	r3, r7, r4
 80010ee:	2201      	movs	r2, #1
 80010f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	193b      	adds	r3, r7, r4
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <MX_GPIO_Init+0x154>)
 8001102:	0019      	movs	r1, r3
 8001104:	0010      	movs	r0, r2
 8001106:	f002 f8b7 	bl	8003278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800110a:	0021      	movs	r1, r4
 800110c:	187b      	adds	r3, r7, r1
 800110e:	2240      	movs	r2, #64	; 0x40
 8001110:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	187b      	adds	r3, r7, r1
 8001114:	2201      	movs	r2, #1
 8001116:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	187b      	adds	r3, r7, r1
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	187b      	adds	r3, r7, r1
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001124:	187b      	adds	r3, r7, r1
 8001126:	4a07      	ldr	r2, [pc, #28]	; (8001144 <MX_GPIO_Init+0x158>)
 8001128:	0019      	movs	r1, r3
 800112a:	0010      	movs	r0, r2
 800112c:	f002 f8a4 	bl	8003278 <HAL_GPIO_Init>

}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	b009      	add	sp, #36	; 0x24
 8001136:	bd90      	pop	{r4, r7, pc}
 8001138:	40021000 	.word	0x40021000
 800113c:	00001f88 	.word	0x00001f88
 8001140:	50000400 	.word	0x50000400
 8001144:	50000800 	.word	0x50000800

08001148 <HAL_ADC_ConvCpltCallback>:
	else if (adc_gain < 725)
		return 0;
	return 0;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < ADC_CHANNEL_NUM; i++) {
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	e04e      	b.n	80011f4 <HAL_ADC_ConvCpltCallback+0xac>
		sum[i] -= adc_values[i][adc_counter];
 8001156:	4b34      	ldr	r3, [pc, #208]	; (8001228 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	0052      	lsls	r2, r2, #1
 800115c:	5ad1      	ldrh	r1, [r2, r3]
 800115e:	4b33      	ldr	r3, [pc, #204]	; (800122c <HAL_ADC_ConvCpltCallback+0xe4>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	001c      	movs	r4, r3
 8001164:	4832      	ldr	r0, [pc, #200]	; (8001230 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	0013      	movs	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	189b      	adds	r3, r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	191b      	adds	r3, r3, r4
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	5a1b      	ldrh	r3, [r3, r0]
 8001176:	1acb      	subs	r3, r1, r3
 8001178:	b299      	uxth	r1, r3
 800117a:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <HAL_ADC_ConvCpltCallback+0xe0>)
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	0052      	lsls	r2, r2, #1
 8001180:	52d1      	strh	r1, [r2, r3]
		adc_values[i][adc_counter] = adcResultsDMA[i];
 8001182:	4b2a      	ldr	r3, [pc, #168]	; (800122c <HAL_ADC_ConvCpltCallback+0xe4>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	001c      	movs	r4, r3
 8001188:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <HAL_ADC_ConvCpltCallback+0xec>)
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	0052      	lsls	r2, r2, #1
 800118e:	5ad3      	ldrh	r3, [r2, r3]
 8001190:	b298      	uxth	r0, r3
 8001192:	4927      	ldr	r1, [pc, #156]	; (8001230 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	0013      	movs	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	189b      	adds	r3, r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	191b      	adds	r3, r3, r4
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	1c02      	adds	r2, r0, #0
 80011a4:	525a      	strh	r2, [r3, r1]
		sum[i] += adc_values[i][adc_counter];
 80011a6:	4b20      	ldr	r3, [pc, #128]	; (8001228 <HAL_ADC_ConvCpltCallback+0xe0>)
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	0052      	lsls	r2, r2, #1
 80011ac:	5ad1      	ldrh	r1, [r2, r3]
 80011ae:	4b1f      	ldr	r3, [pc, #124]	; (800122c <HAL_ADC_ConvCpltCallback+0xe4>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	001c      	movs	r4, r3
 80011b4:	481e      	ldr	r0, [pc, #120]	; (8001230 <HAL_ADC_ConvCpltCallback+0xe8>)
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	0013      	movs	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	189b      	adds	r3, r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	191b      	adds	r3, r3, r4
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	5a1b      	ldrh	r3, [r3, r0]
 80011c6:	18cb      	adds	r3, r1, r3
 80011c8:	b299      	uxth	r1, r3
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <HAL_ADC_ConvCpltCallback+0xe0>)
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	0052      	lsls	r2, r2, #1
 80011d0:	52d1      	strh	r1, [r2, r3]
		adc_media[i] = sum[i] / MEDIA_NUM;
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_ADC_ConvCpltCallback+0xe0>)
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	0052      	lsls	r2, r2, #1
 80011d8:	5ad3      	ldrh	r3, [r2, r3]
 80011da:	2114      	movs	r1, #20
 80011dc:	0018      	movs	r0, r3
 80011de:	f7fe ff8f 	bl	8000100 <__udivsi3>
 80011e2:	0003      	movs	r3, r0
 80011e4:	b299      	uxth	r1, r3
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <HAL_ADC_ConvCpltCallback+0xf0>)
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	0052      	lsls	r2, r2, #1
 80011ec:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < ADC_CHANNEL_NUM; i++) {
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	3301      	adds	r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b05      	cmp	r3, #5
 80011f8:	ddad      	ble.n	8001156 <HAL_ADC_ConvCpltCallback+0xe>
	}
	adc_counter++;
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_ADC_ConvCpltCallback+0xe4>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4b0a      	ldr	r3, [pc, #40]	; (800122c <HAL_ADC_ConvCpltCallback+0xe4>)
 8001204:	701a      	strb	r2, [r3, #0]

	if (adc_counter >= MEDIA_NUM)
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <HAL_ADC_ConvCpltCallback+0xe4>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b13      	cmp	r3, #19
 800120c:	d902      	bls.n	8001214 <HAL_ADC_ConvCpltCallback+0xcc>
		adc_counter = 0;
 800120e:	4b07      	ldr	r3, [pc, #28]	; (800122c <HAL_ADC_ConvCpltCallback+0xe4>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, ADC_CHANNEL_NUM);
 8001214:	4907      	ldr	r1, [pc, #28]	; (8001234 <HAL_ADC_ConvCpltCallback+0xec>)
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <HAL_ADC_ConvCpltCallback+0xf4>)
 8001218:	2206      	movs	r2, #6
 800121a:	0018      	movs	r0, r3
 800121c:	f000 ffbe 	bl	800219c <HAL_ADC_Start_DMA>
}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	b005      	add	sp, #20
 8001226:	bd90      	pop	{r4, r7, pc}
 8001228:	200002e8 	.word	0x200002e8
 800122c:	200002f4 	.word	0x200002f4
 8001230:	200001ec 	.word	0x200001ec
 8001234:	200001e0 	.word	0x200001e0
 8001238:	200002dc 	.word	0x200002dc
 800123c:	2000008c 	.word	0x2000008c

08001240 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	uart1_read_to_frame(&huart1);
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <USART1_IRQHandler+0x14>)
 8001246:	0018      	movs	r0, r3
 8001248:	f000 fb6c 	bl	8001924 <uart1_read_to_frame>
}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	2000014c 	.word	0x2000014c

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001260:	e7fe      	b.n	8001260 <Error_Handler+0x8>

08001262 <module_init>:
 *      Author: sigmadev
 */

#include <module.h>

void  module_init(Module_t* module ,Function_t funcion, Id_t id){
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	0008      	movs	r0, r1
 800126c:	0011      	movs	r1, r2
 800126e:	1cfb      	adds	r3, r7, #3
 8001270:	1c02      	adds	r2, r0, #0
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	1cbb      	adds	r3, r7, #2
 8001276:	1c0a      	adds	r2, r1, #0
 8001278:	701a      	strb	r2, [r3, #0]
module->function = funcion;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	1cfa      	adds	r2, r7, #3
 800127e:	7812      	ldrb	r2, [r2, #0]
 8001280:	745a      	strb	r2, [r3, #17]
module->id = id;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	1cba      	adds	r2, r7, #2
 8001286:	7812      	ldrb	r2, [r2, #0]
 8001288:	741a      	strb	r2, [r3, #16]
module->att = 0;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
module->gain =   0;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	705a      	strb	r2, [r3, #1]
module->pin = 0;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	715a      	strb	r2, [r3, #5]
module->pout = 0;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	709a      	strb	r2, [r3, #2]
module->temperature = 0;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
module->state = true;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	71da      	strb	r2, [r3, #7]
}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b002      	add	sp, #8
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_MspInit+0x44>)
 80012c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_MspInit+0x44>)
 80012c4:	2101      	movs	r1, #1
 80012c6:	430a      	orrs	r2, r1
 80012c8:	641a      	str	r2, [r3, #64]	; 0x40
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <HAL_MspInit+0x44>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	2201      	movs	r2, #1
 80012d0:	4013      	ands	r3, r2
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <HAL_MspInit+0x44>)
 80012d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_MspInit+0x44>)
 80012dc:	2180      	movs	r1, #128	; 0x80
 80012de:	0549      	lsls	r1, r1, #21
 80012e0:	430a      	orrs	r2, r1
 80012e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_MspInit+0x44>)
 80012e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	055b      	lsls	r3, r3, #21
 80012ec:	4013      	ands	r3, r2
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b002      	add	sp, #8
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	40021000 	.word	0x40021000

08001300 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b091      	sub	sp, #68	; 0x44
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	232c      	movs	r3, #44	; 0x2c
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	0018      	movs	r0, r3
 800130e:	2314      	movs	r3, #20
 8001310:	001a      	movs	r2, r3
 8001312:	2100      	movs	r1, #0
 8001314:	f003 fc36 	bl	8004b84 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001318:	2414      	movs	r4, #20
 800131a:	193b      	adds	r3, r7, r4
 800131c:	0018      	movs	r0, r3
 800131e:	2318      	movs	r3, #24
 8001320:	001a      	movs	r2, r3
 8001322:	2100      	movs	r1, #0
 8001324:	f003 fc2e 	bl	8004b84 <memset>
  if(hadc->Instance==ADC1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a43      	ldr	r2, [pc, #268]	; (800143c <HAL_ADC_MspInit+0x13c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d000      	beq.n	8001334 <HAL_ADC_MspInit+0x34>
 8001332:	e07f      	b.n	8001434 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001334:	193b      	adds	r3, r7, r4
 8001336:	2280      	movs	r2, #128	; 0x80
 8001338:	01d2      	lsls	r2, r2, #7
 800133a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800133c:	193b      	adds	r3, r7, r4
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001342:	193b      	adds	r3, r7, r4
 8001344:	0018      	movs	r0, r3
 8001346:	f002 fe1f 	bl	8003f88 <HAL_RCCEx_PeriphCLKConfig>
 800134a:	1e03      	subs	r3, r0, #0
 800134c:	d001      	beq.n	8001352 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800134e:	f7ff ff83 	bl	8001258 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001352:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <HAL_ADC_MspInit+0x140>)
 8001354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001356:	4b3a      	ldr	r3, [pc, #232]	; (8001440 <HAL_ADC_MspInit+0x140>)
 8001358:	2180      	movs	r1, #128	; 0x80
 800135a:	0349      	lsls	r1, r1, #13
 800135c:	430a      	orrs	r2, r1
 800135e:	641a      	str	r2, [r3, #64]	; 0x40
 8001360:	4b37      	ldr	r3, [pc, #220]	; (8001440 <HAL_ADC_MspInit+0x140>)
 8001362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	035b      	lsls	r3, r3, #13
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	4b34      	ldr	r3, [pc, #208]	; (8001440 <HAL_ADC_MspInit+0x140>)
 8001370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001372:	4b33      	ldr	r3, [pc, #204]	; (8001440 <HAL_ADC_MspInit+0x140>)
 8001374:	2101      	movs	r1, #1
 8001376:	430a      	orrs	r2, r1
 8001378:	635a      	str	r2, [r3, #52]	; 0x34
 800137a:	4b31      	ldr	r3, [pc, #196]	; (8001440 <HAL_ADC_MspInit+0x140>)
 800137c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800137e:	2201      	movs	r2, #1
 8001380:	4013      	ands	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	4b2e      	ldr	r3, [pc, #184]	; (8001440 <HAL_ADC_MspInit+0x140>)
 8001388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800138a:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <HAL_ADC_MspInit+0x140>)
 800138c:	2102      	movs	r1, #2
 800138e:	430a      	orrs	r2, r1
 8001390:	635a      	str	r2, [r3, #52]	; 0x34
 8001392:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <HAL_ADC_MspInit+0x140>)
 8001394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001396:	2202      	movs	r2, #2
 8001398:	4013      	ands	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = AGC_LEVEL_Pin|CURR_Pin|V_IN_SAMPLE_Pin|SWR_Pin
 800139e:	242c      	movs	r4, #44	; 0x2c
 80013a0:	193b      	adds	r3, r7, r4
 80013a2:	2277      	movs	r2, #119	; 0x77
 80013a4:	601a      	str	r2, [r3, #0]
                          |P_OUT_Pin|P_IN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a6:	193b      	adds	r3, r7, r4
 80013a8:	2203      	movs	r2, #3
 80013aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	193b      	adds	r3, r7, r4
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	193a      	adds	r2, r7, r4
 80013b4:	23a0      	movs	r3, #160	; 0xa0
 80013b6:	05db      	lsls	r3, r3, #23
 80013b8:	0011      	movs	r1, r2
 80013ba:	0018      	movs	r0, r3
 80013bc:	f001 ff5c 	bl	8003278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = T_SN_IN_Pin;
 80013c0:	193b      	adds	r3, r7, r4
 80013c2:	2204      	movs	r2, #4
 80013c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c6:	193b      	adds	r3, r7, r4
 80013c8:	2203      	movs	r2, #3
 80013ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	193b      	adds	r3, r7, r4
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(T_SN_IN_GPIO_Port, &GPIO_InitStruct);
 80013d2:	193b      	adds	r3, r7, r4
 80013d4:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <HAL_ADC_MspInit+0x144>)
 80013d6:	0019      	movs	r1, r3
 80013d8:	0010      	movs	r0, r2
 80013da:	f001 ff4d 	bl	8003278 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <HAL_ADC_MspInit+0x148>)
 80013e0:	4a1a      	ldr	r2, [pc, #104]	; (800144c <HAL_ADC_MspInit+0x14c>)
 80013e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <HAL_ADC_MspInit+0x148>)
 80013e6:	2205      	movs	r2, #5
 80013e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ea:	4b17      	ldr	r3, [pc, #92]	; (8001448 <HAL_ADC_MspInit+0x148>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_ADC_MspInit+0x148>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <HAL_ADC_MspInit+0x148>)
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_ADC_MspInit+0x148>)
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	0052      	lsls	r2, r2, #1
 8001402:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_ADC_MspInit+0x148>)
 8001406:	2280      	movs	r2, #128	; 0x80
 8001408:	00d2      	lsls	r2, r2, #3
 800140a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <HAL_ADC_MspInit+0x148>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <HAL_ADC_MspInit+0x148>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_ADC_MspInit+0x148>)
 800141a:	0018      	movs	r0, r3
 800141c:	f001 fcda 	bl	8002dd4 <HAL_DMA_Init>
 8001420:	1e03      	subs	r3, r0, #0
 8001422:	d001      	beq.n	8001428 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8001424:	f7ff ff18 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a07      	ldr	r2, [pc, #28]	; (8001448 <HAL_ADC_MspInit+0x148>)
 800142c:	651a      	str	r2, [r3, #80]	; 0x50
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_ADC_MspInit+0x148>)
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001434:	46c0      	nop			; (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	b011      	add	sp, #68	; 0x44
 800143a:	bd90      	pop	{r4, r7, pc}
 800143c:	40012400 	.word	0x40012400
 8001440:	40021000 	.word	0x40021000
 8001444:	50000400 	.word	0x50000400
 8001448:	200000f0 	.word	0x200000f0
 800144c:	40020008 	.word	0x40020008

08001450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b091      	sub	sp, #68	; 0x44
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	232c      	movs	r3, #44	; 0x2c
 800145a:	18fb      	adds	r3, r7, r3
 800145c:	0018      	movs	r0, r3
 800145e:	2314      	movs	r3, #20
 8001460:	001a      	movs	r2, r3
 8001462:	2100      	movs	r1, #0
 8001464:	f003 fb8e 	bl	8004b84 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001468:	2414      	movs	r4, #20
 800146a:	193b      	adds	r3, r7, r4
 800146c:	0018      	movs	r0, r3
 800146e:	2318      	movs	r3, #24
 8001470:	001a      	movs	r2, r3
 8001472:	2100      	movs	r1, #0
 8001474:	f003 fb86 	bl	8004b84 <memset>
  if(huart->Instance==USART1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a22      	ldr	r2, [pc, #136]	; (8001508 <HAL_UART_MspInit+0xb8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d13d      	bne.n	80014fe <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001482:	193b      	adds	r3, r7, r4
 8001484:	2201      	movs	r2, #1
 8001486:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001488:	193b      	adds	r3, r7, r4
 800148a:	2200      	movs	r2, #0
 800148c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800148e:	193b      	adds	r3, r7, r4
 8001490:	0018      	movs	r0, r3
 8001492:	f002 fd79 	bl	8003f88 <HAL_RCCEx_PeriphCLKConfig>
 8001496:	1e03      	subs	r3, r0, #0
 8001498:	d001      	beq.n	800149e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800149a:	f7ff fedd 	bl	8001258 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800149e:	4b1b      	ldr	r3, [pc, #108]	; (800150c <HAL_UART_MspInit+0xbc>)
 80014a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014a2:	4b1a      	ldr	r3, [pc, #104]	; (800150c <HAL_UART_MspInit+0xbc>)
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	01c9      	lsls	r1, r1, #7
 80014a8:	430a      	orrs	r2, r1
 80014aa:	641a      	str	r2, [r3, #64]	; 0x40
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_UART_MspInit+0xbc>)
 80014ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	01db      	lsls	r3, r3, #7
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	4b14      	ldr	r3, [pc, #80]	; (800150c <HAL_UART_MspInit+0xbc>)
 80014bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_UART_MspInit+0xbc>)
 80014c0:	2102      	movs	r1, #2
 80014c2:	430a      	orrs	r2, r1
 80014c4:	635a      	str	r2, [r3, #52]	; 0x34
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_UART_MspInit+0xbc>)
 80014c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ca:	2202      	movs	r2, #2
 80014cc:	4013      	ands	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014d2:	212c      	movs	r1, #44	; 0x2c
 80014d4:	187b      	adds	r3, r7, r1
 80014d6:	22c0      	movs	r2, #192	; 0xc0
 80014d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	187b      	adds	r3, r7, r1
 80014dc:	2202      	movs	r2, #2
 80014de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	4a06      	ldr	r2, [pc, #24]	; (8001510 <HAL_UART_MspInit+0xc0>)
 80014f6:	0019      	movs	r1, r3
 80014f8:	0010      	movs	r0, r2
 80014fa:	f001 febd 	bl	8003278 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	46bd      	mov	sp, r7
 8001502:	b011      	add	sp, #68	; 0x44
 8001504:	bd90      	pop	{r4, r7, pc}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	40013800 	.word	0x40013800
 800150c:	40021000 	.word	0x40021000
 8001510:	50000400 	.word	0x50000400

08001514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <NMI_Handler+0x4>

0800151a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <HardFault_Handler+0x4>

08001520 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001524:	46c0      	nop			; (mov r8, r8)
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001538:	f000 faf0 	bl	8001b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <DMA1_Channel1_IRQHandler+0x14>)
 800154a:	0018      	movs	r0, r3
 800154c:	f001 fd52 	bl	8002ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001550:	46c0      	nop			; (mov r8, r8)
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	200000f0 	.word	0x200000f0

0800155c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001564:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <_sbrk+0x5c>)
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <_sbrk+0x60>)
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <_sbrk+0x64>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <_sbrk+0x64>)
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <_sbrk+0x68>)
 800157c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <_sbrk+0x64>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	18d3      	adds	r3, r2, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	429a      	cmp	r2, r3
 800158a:	d207      	bcs.n	800159c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800158c:	f003 fac6 	bl	8004b1c <__errno>
 8001590:	0003      	movs	r3, r0
 8001592:	220c      	movs	r2, #12
 8001594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001596:	2301      	movs	r3, #1
 8001598:	425b      	negs	r3, r3
 800159a:	e009      	b.n	80015b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	18d2      	adds	r2, r2, r3
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <_sbrk+0x64>)
 80015ac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80015ae:	68fb      	ldr	r3, [r7, #12]
}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b006      	add	sp, #24
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20002000 	.word	0x20002000
 80015bc:	00000400 	.word	0x00000400
 80015c0:	200002f8 	.word	0x200002f8
 80015c4:	20000310 	.word	0x20000310

080015c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015cc:	46c0      	nop			; (mov r8, r8)
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	0002      	movs	r2, r0
 80015dc:	1dfb      	adds	r3, r7, #7
 80015de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015e0:	1dfb      	adds	r3, r7, #7
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b7f      	cmp	r3, #127	; 0x7f
 80015e6:	d809      	bhi.n	80015fc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e8:	1dfb      	adds	r3, r7, #7
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	001a      	movs	r2, r3
 80015ee:	231f      	movs	r3, #31
 80015f0:	401a      	ands	r2, r3
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <__NVIC_EnableIRQ+0x30>)
 80015f4:	2101      	movs	r1, #1
 80015f6:	4091      	lsls	r1, r2
 80015f8:	000a      	movs	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80015fc:	46c0      	nop			; (mov r8, r8)
 80015fe:	46bd      	mov	sp, r7
 8001600:	b002      	add	sp, #8
 8001602:	bd80      	pop	{r7, pc}
 8001604:	e000e100 	.word	0xe000e100

08001608 <uart1_gpio_init>:
 *      Author: sigmadev
 */

#include <uart1.h>

void uart1_gpio_init() {
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	/**USART1 GPIO Configuration
	 PA9     ------> USART1_TX
	 PA10     ------> USART1_RX
	 */
	/* PA9 TX as alter */
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE9_0);
 800160c:	23a0      	movs	r3, #160	; 0xa0
 800160e:	05db      	lsls	r3, r3, #23
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	23a0      	movs	r3, #160	; 0xa0
 8001614:	05db      	lsls	r3, r3, #23
 8001616:	495a      	ldr	r1, [pc, #360]	; (8001780 <uart1_gpio_init+0x178>)
 8001618:	400a      	ands	r2, r1
 800161a:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE9_1);
 800161c:	23a0      	movs	r3, #160	; 0xa0
 800161e:	05db      	lsls	r3, r3, #23
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	23a0      	movs	r3, #160	; 0xa0
 8001624:	05db      	lsls	r3, r3, #23
 8001626:	2180      	movs	r1, #128	; 0x80
 8001628:	0309      	lsls	r1, r1, #12
 800162a:	430a      	orrs	r2, r1
 800162c:	601a      	str	r2, [r3, #0]
	/* PA9 TX as alter */
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE10_0);
 800162e:	23a0      	movs	r3, #160	; 0xa0
 8001630:	05db      	lsls	r3, r3, #23
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	23a0      	movs	r3, #160	; 0xa0
 8001636:	05db      	lsls	r3, r3, #23
 8001638:	4952      	ldr	r1, [pc, #328]	; (8001784 <uart1_gpio_init+0x17c>)
 800163a:	400a      	ands	r2, r1
 800163c:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE10_1);
 800163e:	23a0      	movs	r3, #160	; 0xa0
 8001640:	05db      	lsls	r3, r3, #23
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	23a0      	movs	r3, #160	; 0xa0
 8001646:	05db      	lsls	r3, r3, #23
 8001648:	2180      	movs	r1, #128	; 0x80
 800164a:	0389      	lsls	r1, r1, #14
 800164c:	430a      	orrs	r2, r1
 800164e:	601a      	str	r2, [r3, #0]
	/* PA9 Tx open drain */
	CLEAR_BIT(GPIOA->MODER, GPIO_OTYPER_OT9);
 8001650:	23a0      	movs	r3, #160	; 0xa0
 8001652:	05db      	lsls	r3, r3, #23
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	23a0      	movs	r3, #160	; 0xa0
 8001658:	05db      	lsls	r3, r3, #23
 800165a:	494b      	ldr	r1, [pc, #300]	; (8001788 <uart1_gpio_init+0x180>)
 800165c:	400a      	ands	r2, r1
 800165e:	601a      	str	r2, [r3, #0]
	/* PA9 Tx open drain */
	CLEAR_BIT(GPIOA->MODER, GPIO_OTYPER_OT10);
 8001660:	23a0      	movs	r3, #160	; 0xa0
 8001662:	05db      	lsls	r3, r3, #23
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	23a0      	movs	r3, #160	; 0xa0
 8001668:	05db      	lsls	r3, r3, #23
 800166a:	4948      	ldr	r1, [pc, #288]	; (800178c <uart1_gpio_init+0x184>)
 800166c:	400a      	ands	r2, r1
 800166e:	601a      	str	r2, [r3, #0]
	/* PA9 Tx pull up */
	CLEAR_BIT(GPIOA->MODER, GPIO_PUPDR_PUPD9_0);
 8001670:	23a0      	movs	r3, #160	; 0xa0
 8001672:	05db      	lsls	r3, r3, #23
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	23a0      	movs	r3, #160	; 0xa0
 8001678:	05db      	lsls	r3, r3, #23
 800167a:	4941      	ldr	r1, [pc, #260]	; (8001780 <uart1_gpio_init+0x178>)
 800167c:	400a      	ands	r2, r1
 800167e:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_PUPDR_PUPD9_1);
 8001680:	23a0      	movs	r3, #160	; 0xa0
 8001682:	05db      	lsls	r3, r3, #23
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	23a0      	movs	r3, #160	; 0xa0
 8001688:	05db      	lsls	r3, r3, #23
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	0309      	lsls	r1, r1, #12
 800168e:	430a      	orrs	r2, r1
 8001690:	601a      	str	r2, [r3, #0]
	/* PA10 RX pull up */
	CLEAR_BIT(GPIOA->MODER, GPIO_PUPDR_PUPD10_0);
 8001692:	23a0      	movs	r3, #160	; 0xa0
 8001694:	05db      	lsls	r3, r3, #23
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	23a0      	movs	r3, #160	; 0xa0
 800169a:	05db      	lsls	r3, r3, #23
 800169c:	4939      	ldr	r1, [pc, #228]	; (8001784 <uart1_gpio_init+0x17c>)
 800169e:	400a      	ands	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_PUPDR_PUPD10_1);
 80016a2:	23a0      	movs	r3, #160	; 0xa0
 80016a4:	05db      	lsls	r3, r3, #23
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	23a0      	movs	r3, #160	; 0xa0
 80016aa:	05db      	lsls	r3, r3, #23
 80016ac:	2180      	movs	r1, #128	; 0x80
 80016ae:	0389      	lsls	r1, r1, #14
 80016b0:	430a      	orrs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]
	/*  PA9 Tx low speed */
	CLEAR_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEED9_0);
 80016b4:	23a0      	movs	r3, #160	; 0xa0
 80016b6:	05db      	lsls	r3, r3, #23
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	23a0      	movs	r3, #160	; 0xa0
 80016bc:	05db      	lsls	r3, r3, #23
 80016be:	4930      	ldr	r1, [pc, #192]	; (8001780 <uart1_gpio_init+0x178>)
 80016c0:	400a      	ands	r2, r1
 80016c2:	609a      	str	r2, [r3, #8]
	CLEAR_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEED9_1);
 80016c4:	23a0      	movs	r3, #160	; 0xa0
 80016c6:	05db      	lsls	r3, r3, #23
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	23a0      	movs	r3, #160	; 0xa0
 80016cc:	05db      	lsls	r3, r3, #23
 80016ce:	4930      	ldr	r1, [pc, #192]	; (8001790 <uart1_gpio_init+0x188>)
 80016d0:	400a      	ands	r2, r1
 80016d2:	609a      	str	r2, [r3, #8]
	/* PA10 RX low speed */
	SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEED10_0);
 80016d4:	23a0      	movs	r3, #160	; 0xa0
 80016d6:	05db      	lsls	r3, r3, #23
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	23a0      	movs	r3, #160	; 0xa0
 80016dc:	05db      	lsls	r3, r3, #23
 80016de:	2180      	movs	r1, #128	; 0x80
 80016e0:	0349      	lsls	r1, r1, #13
 80016e2:	430a      	orrs	r2, r1
 80016e4:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEED10_1);
 80016e6:	23a0      	movs	r3, #160	; 0xa0
 80016e8:	05db      	lsls	r3, r3, #23
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	23a0      	movs	r3, #160	; 0xa0
 80016ee:	05db      	lsls	r3, r3, #23
 80016f0:	2180      	movs	r1, #128	; 0x80
 80016f2:	0389      	lsls	r1, r1, #14
 80016f4:	430a      	orrs	r2, r1
 80016f6:	609a      	str	r2, [r3, #8]
	/*PA9 TX   AF1 as alter   */
	SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_0);
 80016f8:	23a0      	movs	r3, #160	; 0xa0
 80016fa:	05db      	lsls	r3, r3, #23
 80016fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016fe:	23a0      	movs	r3, #160	; 0xa0
 8001700:	05db      	lsls	r3, r3, #23
 8001702:	2110      	movs	r1, #16
 8001704:	430a      	orrs	r2, r1
 8001706:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_1);
 8001708:	23a0      	movs	r3, #160	; 0xa0
 800170a:	05db      	lsls	r3, r3, #23
 800170c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800170e:	23a0      	movs	r3, #160	; 0xa0
 8001710:	05db      	lsls	r3, r3, #23
 8001712:	2120      	movs	r1, #32
 8001714:	438a      	bics	r2, r1
 8001716:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_2);
 8001718:	23a0      	movs	r3, #160	; 0xa0
 800171a:	05db      	lsls	r3, r3, #23
 800171c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800171e:	23a0      	movs	r3, #160	; 0xa0
 8001720:	05db      	lsls	r3, r3, #23
 8001722:	2140      	movs	r1, #64	; 0x40
 8001724:	438a      	bics	r2, r1
 8001726:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_3);
 8001728:	23a0      	movs	r3, #160	; 0xa0
 800172a:	05db      	lsls	r3, r3, #23
 800172c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800172e:	23a0      	movs	r3, #160	; 0xa0
 8001730:	05db      	lsls	r3, r3, #23
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	438a      	bics	r2, r1
 8001736:	625a      	str	r2, [r3, #36]	; 0x24
	/* PA10 RX  AF1 as alter   */
	SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_0);
 8001738:	23a0      	movs	r3, #160	; 0xa0
 800173a:	05db      	lsls	r3, r3, #23
 800173c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800173e:	23a0      	movs	r3, #160	; 0xa0
 8001740:	05db      	lsls	r3, r3, #23
 8001742:	2180      	movs	r1, #128	; 0x80
 8001744:	0049      	lsls	r1, r1, #1
 8001746:	430a      	orrs	r2, r1
 8001748:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_1);
 800174a:	23a0      	movs	r3, #160	; 0xa0
 800174c:	05db      	lsls	r3, r3, #23
 800174e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001750:	23a0      	movs	r3, #160	; 0xa0
 8001752:	05db      	lsls	r3, r3, #23
 8001754:	490c      	ldr	r1, [pc, #48]	; (8001788 <uart1_gpio_init+0x180>)
 8001756:	400a      	ands	r2, r1
 8001758:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_2);
 800175a:	23a0      	movs	r3, #160	; 0xa0
 800175c:	05db      	lsls	r3, r3, #23
 800175e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001760:	23a0      	movs	r3, #160	; 0xa0
 8001762:	05db      	lsls	r3, r3, #23
 8001764:	4909      	ldr	r1, [pc, #36]	; (800178c <uart1_gpio_init+0x184>)
 8001766:	400a      	ands	r2, r1
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_3);
 800176a:	23a0      	movs	r3, #160	; 0xa0
 800176c:	05db      	lsls	r3, r3, #23
 800176e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001770:	23a0      	movs	r3, #160	; 0xa0
 8001772:	05db      	lsls	r3, r3, #23
 8001774:	4907      	ldr	r1, [pc, #28]	; (8001794 <uart1_gpio_init+0x18c>)
 8001776:	400a      	ands	r2, r1
 8001778:	625a      	str	r2, [r3, #36]	; 0x24
}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	fffbffff 	.word	0xfffbffff
 8001784:	ffefffff 	.word	0xffefffff
 8001788:	fffffdff 	.word	0xfffffdff
 800178c:	fffffbff 	.word	0xfffffbff
 8001790:	fff7ffff 	.word	0xfff7ffff
 8001794:	fffff7ff 	.word	0xfffff7ff

08001798 <uart1_init>:

void uart1_init(uint32_t pclk, uint32_t baud_rate, UART1_t *u) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
	uint32_t br_value = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

	uart1_gpio_init();
 80017a8:	f7ff ff2e 	bl	8001608 <uart1_gpio_init>

	/*enable clock access to USART1 */
	SET_BIT(RCC->APBENR2, RCC_APBENR2_USART1EN);
 80017ac:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <uart1_init+0xc0>)
 80017ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017b0:	4b29      	ldr	r3, [pc, #164]	; (8001858 <uart1_init+0xc0>)
 80017b2:	2180      	movs	r1, #128	; 0x80
 80017b4:	01c9      	lsls	r1, r1, #7
 80017b6:	430a      	orrs	r2, r1
 80017b8:	641a      	str	r2, [r3, #64]	; 0x40
	if (pclk == 16000000) {
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4a27      	ldr	r2, [pc, #156]	; (800185c <uart1_init+0xc4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d10b      	bne.n	80017da <uart1_init+0x42>
		/*set HSI 16 CLK */
		CLEAR_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_0);
 80017c2:	4b25      	ldr	r3, [pc, #148]	; (8001858 <uart1_init+0xc0>)
 80017c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80017c6:	4b24      	ldr	r3, [pc, #144]	; (8001858 <uart1_init+0xc0>)
 80017c8:	2101      	movs	r1, #1
 80017ca:	438a      	bics	r2, r1
 80017cc:	655a      	str	r2, [r3, #84]	; 0x54
		SET_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_1);
 80017ce:	4b22      	ldr	r3, [pc, #136]	; (8001858 <uart1_init+0xc0>)
 80017d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <uart1_init+0xc0>)
 80017d4:	2102      	movs	r1, #2
 80017d6:	430a      	orrs	r2, r1
 80017d8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	//MODIFY_REG(USART1->PRESC,USART_PRESC_PRESCALER,0x0010);
	/* set baud rate */
	br_value = (pclk) / baud_rate;
 80017da:	68b9      	ldr	r1, [r7, #8]
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f7fe fc8f 	bl	8000100 <__udivsi3>
 80017e2:	0003      	movs	r3, r0
 80017e4:	617b      	str	r3, [r7, #20]
	USART1->BRR = (uint16_t) br_value;
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <uart1_init+0xc8>)
 80017ec:	60da      	str	r2, [r3, #12]
	/* transmitter enable*/
	USART1->CR1 = USART_CR1_TE | USART_CR1_RE;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <uart1_init+0xc8>)
 80017f0:	220c      	movs	r2, #12
 80017f2:	601a      	str	r2, [r3, #0]

	u->rx_buffer = (uint8_t*) malloc(RX_BUFFLEN);
 80017f4:	2019      	movs	r0, #25
 80017f6:	f003 f9bb 	bl	8004b70 <malloc>
 80017fa:	0003      	movs	r3, r0
 80017fc:	001a      	movs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	601a      	str	r2, [r3, #0]
	u->tx_buffer = (uint8_t*) malloc(TX_BUFFLEN);
 8001802:	2064      	movs	r0, #100	; 0x64
 8001804:	f003 f9b4 	bl	8004b70 <malloc>
 8001808:	0003      	movs	r3, r0
 800180a:	001a      	movs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	605a      	str	r2, [r3, #4]
	u->is_data_ready = false;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	725a      	strb	r2, [r3, #9]
	u->rx_count = 0;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	721a      	strb	r2, [r3, #8]

	uart1_clean_buffer(u);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	0018      	movs	r0, r3
 8001820:	f000 f8c4 	bl	80019ac <uart1_clean_buffer>

	/* enable FIFO */
	SET_BIT(USART1->CR2, USART_CR1_FIFOEN);
 8001824:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <uart1_init+0xc8>)
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <uart1_init+0xc8>)
 800182a:	2180      	movs	r1, #128	; 0x80
 800182c:	0589      	lsls	r1, r1, #22
 800182e:	430a      	orrs	r2, r1
 8001830:	605a      	str	r2, [r3, #4]
	//SET_BIT(USART1->CR2, USART_CR2_RTOEN);
	/**/
	//MODIFY_REG(USART1->RTOR,USART_RTOR_RTO,100);
	/*set length */
	/* Enable interrupt */
	SET_BIT(USART1->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <uart1_init+0xc8>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <uart1_init+0xc8>)
 8001838:	2120      	movs	r1, #32
 800183a:	430a      	orrs	r2, r1
 800183c:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART1_IRQn);
 800183e:	201b      	movs	r0, #27
 8001840:	f7ff fec8 	bl	80015d4 <__NVIC_EnableIRQ>
	//uart1_dma_init();
//
	SET_BIT(USART1->CR1, USART_CR1_UE);
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <uart1_init+0xc8>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <uart1_init+0xc8>)
 800184a:	2101      	movs	r1, #1
 800184c:	430a      	orrs	r2, r1
 800184e:	601a      	str	r2, [r3, #0]
}
 8001850:	46c0      	nop			; (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	b006      	add	sp, #24
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40021000 	.word	0x40021000
 800185c:	00f42400 	.word	0x00f42400
 8001860:	40013800 	.word	0x40013800

08001864 <uart1_write>:
	/* set the destination buffer */
	/*set the source buffer */

}

void uart1_write(char ch) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	0002      	movs	r2, r0
 800186c:	1dfb      	adds	r3, r7, #7
 800186e:	701a      	strb	r2, [r3, #0]
	SET_BIT(GPIOA->ODR, GPIO_ODR_OD15);
 8001870:	23a0      	movs	r3, #160	; 0xa0
 8001872:	05db      	lsls	r3, r3, #23
 8001874:	695a      	ldr	r2, [r3, #20]
 8001876:	23a0      	movs	r3, #160	; 0xa0
 8001878:	05db      	lsls	r3, r3, #23
 800187a:	2180      	movs	r1, #128	; 0x80
 800187c:	0209      	lsls	r1, r1, #8
 800187e:	430a      	orrs	r2, r1
 8001880:	615a      	str	r2, [r3, #20]

	while (!READ_BIT(USART1->ISR, USART_ISR_TXE_TXFNF))
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <uart1_write+0x58>)
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	2280      	movs	r2, #128	; 0x80
 800188a:	4013      	ands	r3, r2
 800188c:	d0fa      	beq.n	8001884 <uart1_write+0x20>
		;
	USART1->TDR = (uint8_t) (ch & 0xFFU);
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <uart1_write+0x58>)
 8001890:	1dfa      	adds	r2, r7, #7
 8001892:	7812      	ldrb	r2, [r2, #0]
 8001894:	629a      	str	r2, [r3, #40]	; 0x28

	while (!READ_BIT(USART1->ISR, USART_ISR_TC))
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <uart1_write+0x58>)
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	2240      	movs	r2, #64	; 0x40
 800189e:	4013      	ands	r3, r2
 80018a0:	d0fa      	beq.n	8001898 <uart1_write+0x34>
		;

	CLEAR_BIT(GPIOA->ODR, GPIO_ODR_OD15);
 80018a2:	23a0      	movs	r3, #160	; 0xa0
 80018a4:	05db      	lsls	r3, r3, #23
 80018a6:	695a      	ldr	r2, [r3, #20]
 80018a8:	23a0      	movs	r3, #160	; 0xa0
 80018aa:	05db      	lsls	r3, r3, #23
 80018ac:	4904      	ldr	r1, [pc, #16]	; (80018c0 <uart1_write+0x5c>)
 80018ae:	400a      	ands	r2, r1
 80018b0:	615a      	str	r2, [r3, #20]
}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b002      	add	sp, #8
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	40013800 	.word	0x40013800
 80018c0:	ffff7fff 	.word	0xffff7fff

080018c4 <uart1_1byte_read>:
		}
		data[0] = USART1->RDR;
	}
}

uint8_t uart1_1byte_read(void) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
	bool override = READ_BIT(USART1->ISR, USART_ISR_ORE);
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <uart1_1byte_read+0x5c>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	2208      	movs	r2, #8
 80018d0:	401a      	ands	r2, r3
 80018d2:	1dfb      	adds	r3, r7, #7
 80018d4:	1e51      	subs	r1, r2, #1
 80018d6:	418a      	sbcs	r2, r1
 80018d8:	701a      	strb	r2, [r3, #0]
	bool data_present = READ_BIT(USART1->ISR, USART_ISR_RXNE_RXFNE);
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <uart1_1byte_read+0x5c>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	2220      	movs	r2, #32
 80018e0:	401a      	ands	r2, r3
 80018e2:	1dbb      	adds	r3, r7, #6
 80018e4:	1e51      	subs	r1, r2, #1
 80018e6:	418a      	sbcs	r2, r1
 80018e8:	701a      	strb	r2, [r3, #0]
//	bool busy = READ_BIT(USART1->ISR, USART_ISR_BUSY);
	if ((data_present || override)) {
 80018ea:	1dbb      	adds	r3, r7, #6
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d103      	bne.n	80018fa <uart1_1byte_read+0x36>
 80018f2:	1dfb      	adds	r3, r7, #7
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00d      	beq.n	8001916 <uart1_1byte_read+0x52>
		if (override)
 80018fa:	1dfb      	adds	r3, r7, #7
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d005      	beq.n	800190e <uart1_1byte_read+0x4a>
			SET_BIT(USART1->ICR, USART_ICR_ORECF);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <uart1_1byte_read+0x5c>)
 8001904:	6a1a      	ldr	r2, [r3, #32]
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <uart1_1byte_read+0x5c>)
 8001908:	2108      	movs	r1, #8
 800190a:	430a      	orrs	r2, r1
 800190c:	621a      	str	r2, [r3, #32]
		return USART1->RDR;
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <uart1_1byte_read+0x5c>)
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	b2db      	uxtb	r3, r3
 8001914:	e000      	b.n	8001918 <uart1_1byte_read+0x54>
	} else
		return '\0';
 8001916:	2300      	movs	r3, #0
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b002      	add	sp, #8
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40013800 	.word	0x40013800

08001924 <uart1_read_to_frame>:

void  uart1_read_to_frame(UART1_t *u) {
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	if (u->rx_count >= RX_BUFFLEN) {
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	7a1b      	ldrb	r3, [r3, #8]
 8001930:	2b18      	cmp	r3, #24
 8001932:	d906      	bls.n	8001942 <uart1_read_to_frame+0x1e>
		uart1_clean_buffer(u);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	0018      	movs	r0, r3
 8001938:	f000 f838 	bl	80019ac <uart1_clean_buffer>
		u->rx_count = 0;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	721a      	strb	r2, [r3, #8]
	}
	u->rx_buffer[u->rx_count++] = uart1_1byte_read();
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	7a1b      	ldrb	r3, [r3, #8]
 800194a:	1c59      	adds	r1, r3, #1
 800194c:	b2c8      	uxtb	r0, r1
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	7208      	strb	r0, [r1, #8]
 8001952:	18d4      	adds	r4, r2, r3
 8001954:	f7ff ffb6 	bl	80018c4 <uart1_1byte_read>
 8001958:	0003      	movs	r3, r0
 800195a:	7023      	strb	r3, [r4, #0]
}
 800195c:	46c0      	nop			; (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	b003      	add	sp, #12
 8001962:	bd90      	pop	{r4, r7, pc}

08001964 <uart1_send_str>:

void uart1_send_str(char *str) {
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; str[i] != '\0'; i++)
 800196c:	230f      	movs	r3, #15
 800196e:	18fb      	adds	r3, r7, r3
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	e00d      	b.n	8001992 <uart1_send_str+0x2e>
		uart1_write(str[i]);
 8001976:	240f      	movs	r4, #15
 8001978:	193b      	adds	r3, r7, r4
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	18d3      	adds	r3, r2, r3
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	0018      	movs	r0, r3
 8001984:	f7ff ff6e 	bl	8001864 <uart1_write>
	for (i = 0; str[i] != '\0'; i++)
 8001988:	193b      	adds	r3, r7, r4
 800198a:	781a      	ldrb	r2, [r3, #0]
 800198c:	193b      	adds	r3, r7, r4
 800198e:	3201      	adds	r2, #1
 8001990:	701a      	strb	r2, [r3, #0]
 8001992:	230f      	movs	r3, #15
 8001994:	18fb      	adds	r3, r7, r3
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	18d3      	adds	r3, r2, r3
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1e9      	bne.n	8001976 <uart1_send_str+0x12>
}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	46c0      	nop			; (mov r8, r8)
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b005      	add	sp, #20
 80019aa:	bd90      	pop	{r4, r7, pc}

080019ac <uart1_clean_buffer>:
		for (int i = 0; i < len; i++)
			uart1_write(str[i]);
	}
}

void uart1_clean_buffer(UART1_t *u) {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	u->rx_count = 0;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	721a      	strb	r2, [r3, #8]
	if (TX_BUFFLEN > RX_BUFFLEN) {
		for (int i = 0; i < TX_BUFFLEN; i++) {
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	e011      	b.n	80019e4 <uart1_clean_buffer+0x38>
			if (i < RX_BUFFLEN)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b18      	cmp	r3, #24
 80019c4:	dc05      	bgt.n	80019d2 <uart1_clean_buffer+0x26>
				u->rx_buffer[i] = 0x00;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	18d3      	adds	r3, r2, r3
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
			u->tx_buffer[i] = 0x00;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	18d3      	adds	r3, r2, r3
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < TX_BUFFLEN; i++) {
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3301      	adds	r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b63      	cmp	r3, #99	; 0x63
 80019e8:	ddea      	ble.n	80019c0 <uart1_clean_buffer+0x14>
			if (i < TX_BUFFLEN)
				u->tx_buffer[i] = 0x00;
			u->rx_buffer[i] = 0x00;
		}
	}
}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	46c0      	nop			; (mov r8, r8)
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b004      	add	sp, #16
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019f4:	480d      	ldr	r0, [pc, #52]	; (8001a2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019f8:	f7ff fde6 	bl	80015c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019fc:	480c      	ldr	r0, [pc, #48]	; (8001a30 <LoopForever+0x6>)
  ldr r1, =_edata
 80019fe:	490d      	ldr	r1, [pc, #52]	; (8001a34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a00:	4a0d      	ldr	r2, [pc, #52]	; (8001a38 <LoopForever+0xe>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a04:	e002      	b.n	8001a0c <LoopCopyDataInit>

08001a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0a:	3304      	adds	r3, #4

08001a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a10:	d3f9      	bcc.n	8001a06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a14:	4c0a      	ldr	r4, [pc, #40]	; (8001a40 <LoopForever+0x16>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a18:	e001      	b.n	8001a1e <LoopFillZerobss>

08001a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a1c:	3204      	adds	r2, #4

08001a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a20:	d3fb      	bcc.n	8001a1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a22:	f003 f881 	bl	8004b28 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001a26:	f7ff f873 	bl	8000b10 <main>

08001a2a <LoopForever>:

LoopForever:
  b LoopForever
 8001a2a:	e7fe      	b.n	8001a2a <LoopForever>
  ldr   r0, =_estack
 8001a2c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a38:	08004de8 	.word	0x08004de8
  ldr r2, =_sbss
 8001a3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a40:	20000310 	.word	0x20000310

08001a44 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a44:	e7fe      	b.n	8001a44 <ADC1_IRQHandler>
	...

08001a48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a4e:	1dfb      	adds	r3, r7, #7
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_Init+0x3c>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_Init+0x3c>)
 8001a5a:	2180      	movs	r1, #128	; 0x80
 8001a5c:	0049      	lsls	r1, r1, #1
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a62:	2003      	movs	r0, #3
 8001a64:	f000 f810 	bl	8001a88 <HAL_InitTick>
 8001a68:	1e03      	subs	r3, r0, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001a6c:	1dfb      	adds	r3, r7, #7
 8001a6e:	2201      	movs	r2, #1
 8001a70:	701a      	strb	r2, [r3, #0]
 8001a72:	e001      	b.n	8001a78 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001a74:	f7ff fc20 	bl	80012b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a78:	1dfb      	adds	r3, r7, #7
 8001a7a:	781b      	ldrb	r3, [r3, #0]
}
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b002      	add	sp, #8
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40022000 	.word	0x40022000

08001a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a90:	230f      	movs	r3, #15
 8001a92:	18fb      	adds	r3, r7, r3
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001a98:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <HAL_InitTick+0x88>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d02b      	beq.n	8001af8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001aa0:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <HAL_InitTick+0x8c>)
 8001aa2:	681c      	ldr	r4, [r3, #0]
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <HAL_InitTick+0x88>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	0019      	movs	r1, r3
 8001aaa:	23fa      	movs	r3, #250	; 0xfa
 8001aac:	0098      	lsls	r0, r3, #2
 8001aae:	f7fe fb27 	bl	8000100 <__udivsi3>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	0019      	movs	r1, r3
 8001ab6:	0020      	movs	r0, r4
 8001ab8:	f7fe fb22 	bl	8000100 <__udivsi3>
 8001abc:	0003      	movs	r3, r0
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f001 f97b 	bl	8002dba <HAL_SYSTICK_Config>
 8001ac4:	1e03      	subs	r3, r0, #0
 8001ac6:	d112      	bne.n	8001aee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d80a      	bhi.n	8001ae4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	425b      	negs	r3, r3
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f001 f94a 	bl	8002d70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_InitTick+0x90>)
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	e00d      	b.n	8001b00 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001ae4:	230f      	movs	r3, #15
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]
 8001aec:	e008      	b.n	8001b00 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aee:	230f      	movs	r3, #15
 8001af0:	18fb      	adds	r3, r7, r3
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
 8001af6:	e003      	b.n	8001b00 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001af8:	230f      	movs	r3, #15
 8001afa:	18fb      	adds	r3, r7, r3
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001b00:	230f      	movs	r3, #15
 8001b02:	18fb      	adds	r3, r7, r3
 8001b04:	781b      	ldrb	r3, [r3, #0]
}
 8001b06:	0018      	movs	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b005      	add	sp, #20
 8001b0c:	bd90      	pop	{r4, r7, pc}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	20000008 	.word	0x20000008
 8001b14:	20000000 	.word	0x20000000
 8001b18:	20000004 	.word	0x20000004

08001b1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_IncTick+0x1c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	001a      	movs	r2, r3
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_IncTick+0x20>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	18d2      	adds	r2, r2, r3
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <HAL_IncTick+0x20>)
 8001b2e:	601a      	str	r2, [r3, #0]
}
 8001b30:	46c0      	nop			; (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	20000008 	.word	0x20000008
 8001b3c:	200002fc 	.word	0x200002fc

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b02      	ldr	r3, [pc, #8]	; (8001b50 <HAL_GetTick+0x10>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	0018      	movs	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	200002fc 	.word	0x200002fc

08001b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b5c:	f7ff fff0 	bl	8001b40 <HAL_GetTick>
 8001b60:	0003      	movs	r3, r0
 8001b62:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	d005      	beq.n	8001b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_Delay+0x44>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	001a      	movs	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	189b      	adds	r3, r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	f7ff ffe0 	bl	8001b40 <HAL_GetTick>
 8001b80:	0002      	movs	r2, r0
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d8f7      	bhi.n	8001b7c <HAL_Delay+0x28>
  {
  }
}
 8001b8c:	46c0      	nop			; (mov r8, r8)
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b004      	add	sp, #16
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	20000008 	.word	0x20000008

08001b9c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a05      	ldr	r2, [pc, #20]	; (8001bc0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001bac:	401a      	ands	r2, r3
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	601a      	str	r2, [r3, #0]
}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b002      	add	sp, #8
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	fe3fffff 	.word	0xfe3fffff

08001bc4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	23e0      	movs	r3, #224	; 0xe0
 8001bd2:	045b      	lsls	r3, r3, #17
 8001bd4:	4013      	ands	r3, r2
}
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	b002      	add	sp, #8
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b084      	sub	sp, #16
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	2104      	movs	r1, #4
 8001bf2:	400a      	ands	r2, r1
 8001bf4:	2107      	movs	r1, #7
 8001bf6:	4091      	lsls	r1, r2
 8001bf8:	000a      	movs	r2, r1
 8001bfa:	43d2      	mvns	r2, r2
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2104      	movs	r1, #4
 8001c02:	400b      	ands	r3, r1
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4099      	lsls	r1, r3
 8001c08:	000b      	movs	r3, r1
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001c10:	46c0      	nop			; (mov r8, r8)
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b004      	add	sp, #16
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	2104      	movs	r1, #4
 8001c2a:	400a      	ands	r2, r1
 8001c2c:	2107      	movs	r1, #7
 8001c2e:	4091      	lsls	r1, r2
 8001c30:	000a      	movs	r2, r1
 8001c32:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	2104      	movs	r1, #4
 8001c38:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001c3a:	40da      	lsrs	r2, r3
 8001c3c:	0013      	movs	r3, r2
}
 8001c3e:	0018      	movs	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b002      	add	sp, #8
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	23c0      	movs	r3, #192	; 0xc0
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	4013      	ands	r3, r2
 8001c58:	d101      	bne.n	8001c5e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	0018      	movs	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b002      	add	sp, #8
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	211f      	movs	r1, #31
 8001c7c:	400a      	ands	r2, r1
 8001c7e:	210f      	movs	r1, #15
 8001c80:	4091      	lsls	r1, r2
 8001c82:	000a      	movs	r2, r1
 8001c84:	43d2      	mvns	r2, r2
 8001c86:	401a      	ands	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	0e9b      	lsrs	r3, r3, #26
 8001c8c:	210f      	movs	r1, #15
 8001c8e:	4019      	ands	r1, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	201f      	movs	r0, #31
 8001c94:	4003      	ands	r3, r0
 8001c96:	4099      	lsls	r1, r3
 8001c98:	000b      	movs	r3, r1
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ca0:	46c0      	nop			; (mov r8, r8)
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b004      	add	sp, #16
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	035b      	lsls	r3, r3, #13
 8001cba:	0b5b      	lsrs	r3, r3, #13
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b002      	add	sp, #8
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	0352      	lsls	r2, r2, #13
 8001cdc:	0b52      	lsrs	r2, r2, #13
 8001cde:	43d2      	mvns	r2, r2
 8001ce0:	401a      	ands	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b002      	add	sp, #8
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	0212      	lsls	r2, r2, #8
 8001d04:	43d2      	mvns	r2, r2
 8001d06:	401a      	ands	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	400b      	ands	r3, r1
 8001d10:	4904      	ldr	r1, [pc, #16]	; (8001d24 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001d12:	400b      	ands	r3, r1
 8001d14:	431a      	orrs	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b004      	add	sp, #16
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	07ffff00 	.word	0x07ffff00

08001d28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	4a05      	ldr	r2, [pc, #20]	; (8001d4c <LL_ADC_EnableInternalRegulator+0x24>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	2280      	movs	r2, #128	; 0x80
 8001d3a:	0552      	lsls	r2, r2, #21
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b002      	add	sp, #8
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	6fffffe8 	.word	0x6fffffe8

08001d50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	055b      	lsls	r3, r3, #21
 8001d60:	401a      	ands	r2, r3
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	055b      	lsls	r3, r3, #21
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d101      	bne.n	8001d6e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	0018      	movs	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b002      	add	sp, #8
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <LL_ADC_Enable+0x20>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	2201      	movs	r2, #1
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d90:	46c0      	nop			; (mov r8, r8)
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b002      	add	sp, #8
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	7fffffe8 	.word	0x7fffffe8

08001d9c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <LL_ADC_Disable+0x20>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	2202      	movs	r2, #2
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b002      	add	sp, #8
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	7fffffe8 	.word	0x7fffffe8

08001dc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <LL_ADC_IsEnabled+0x18>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <LL_ADC_IsEnabled+0x1a>
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b002      	add	sp, #8
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2202      	movs	r2, #2
 8001df0:	4013      	ands	r3, r2
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d101      	bne.n	8001dfa <LL_ADC_IsDisableOngoing+0x18>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <LL_ADC_IsDisableOngoing+0x1a>
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b002      	add	sp, #8
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <LL_ADC_REG_StartConversion+0x20>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	2204      	movs	r2, #4
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e1c:	46c0      	nop			; (mov r8, r8)
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b002      	add	sp, #8
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	7fffffe8 	.word	0x7fffffe8

08001e28 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2204      	movs	r2, #4
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d101      	bne.n	8001e40 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	0018      	movs	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b002      	add	sp, #8
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e54:	231f      	movs	r3, #31
 8001e56:	18fb      	adds	r3, r7, r3
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e17f      	b.n	8002172 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10a      	bne.n	8001e90 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f7ff fa3f 	bl	8001300 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2254      	movs	r2, #84	; 0x54
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7ff ff5b 	bl	8001d50 <LL_ADC_IsInternalRegulatorEnabled>
 8001e9a:	1e03      	subs	r3, r0, #0
 8001e9c:	d115      	bne.n	8001eca <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f7ff ff40 	bl	8001d28 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ea8:	4bb4      	ldr	r3, [pc, #720]	; (800217c <HAL_ADC_Init+0x330>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	49b4      	ldr	r1, [pc, #720]	; (8002180 <HAL_ADC_Init+0x334>)
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f7fe f926 	bl	8000100 <__udivsi3>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ebc:	e002      	b.n	8001ec4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f9      	bne.n	8001ebe <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f7ff ff3e 	bl	8001d50 <LL_ADC_IsInternalRegulatorEnabled>
 8001ed4:	1e03      	subs	r3, r0, #0
 8001ed6:	d10f      	bne.n	8001ef8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	2210      	movs	r2, #16
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee8:	2201      	movs	r2, #1
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ef0:	231f      	movs	r3, #31
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	0018      	movs	r0, r3
 8001efe:	f7ff ff93 	bl	8001e28 <LL_ADC_REG_IsConversionOngoing>
 8001f02:	0003      	movs	r3, r0
 8001f04:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0a:	2210      	movs	r2, #16
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d000      	beq.n	8001f12 <HAL_ADC_Init+0xc6>
 8001f10:	e122      	b.n	8002158 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d000      	beq.n	8001f1a <HAL_ADC_Init+0xce>
 8001f18:	e11e      	b.n	8002158 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	4a99      	ldr	r2, [pc, #612]	; (8002184 <HAL_ADC_Init+0x338>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	2202      	movs	r2, #2
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f7ff ff46 	bl	8001dc0 <LL_ADC_IsEnabled>
 8001f34:	1e03      	subs	r3, r0, #0
 8001f36:	d000      	beq.n	8001f3a <HAL_ADC_Init+0xee>
 8001f38:	e0ad      	b.n	8002096 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	7e1b      	ldrb	r3, [r3, #24]
 8001f42:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001f44:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	7e5b      	ldrb	r3, [r3, #25]
 8001f4a:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001f4c:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	7e9b      	ldrb	r3, [r3, #26]
 8001f52:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001f54:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_ADC_Init+0x118>
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	015b      	lsls	r3, r3, #5
 8001f62:	e000      	b.n	8001f66 <HAL_ADC_Init+0x11a>
 8001f64:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001f66:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001f6c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	da04      	bge.n	8001f80 <HAL_ADC_Init+0x134>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	085b      	lsrs	r3, r3, #1
 8001f7e:	e001      	b.n	8001f84 <HAL_ADC_Init+0x138>
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001f84:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	212c      	movs	r1, #44	; 0x2c
 8001f8a:	5c5b      	ldrb	r3, [r3, r1]
 8001f8c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001f8e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	5c9b      	ldrb	r3, [r3, r2]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d115      	bne.n	8001fcc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	7e9b      	ldrb	r3, [r3, #26]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d105      	bne.n	8001fb4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	2280      	movs	r2, #128	; 0x80
 8001fac:	0252      	lsls	r2, r2, #9
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
 8001fb2:	e00b      	b.n	8001fcc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb8:	2220      	movs	r2, #32
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00a      	beq.n	8001fea <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fd8:	23e0      	movs	r3, #224	; 0xe0
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4a65      	ldr	r2, [pc, #404]	; (8002188 <HAL_ADC_Init+0x33c>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	0f9b      	lsrs	r3, r3, #30
 8002006:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800200c:	4313      	orrs	r3, r2
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4313      	orrs	r3, r2
 8002012:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	223c      	movs	r2, #60	; 0x3c
 8002018:	5c9b      	ldrb	r3, [r3, r2]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d111      	bne.n	8002042 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	0f9b      	lsrs	r3, r3, #30
 8002024:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800202a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002030:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002036:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	4313      	orrs	r3, r2
 800203c:	2201      	movs	r2, #1
 800203e:	4313      	orrs	r3, r2
 8002040:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	4a50      	ldr	r2, [pc, #320]	; (800218c <HAL_ADC_Init+0x340>)
 800204a:	4013      	ands	r3, r2
 800204c:	0019      	movs	r1, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	430a      	orrs	r2, r1
 8002056:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	23c0      	movs	r3, #192	; 0xc0
 800205e:	061b      	lsls	r3, r3, #24
 8002060:	429a      	cmp	r2, r3
 8002062:	d018      	beq.n	8002096 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	05db      	lsls	r3, r3, #23
 800206c:	429a      	cmp	r2, r3
 800206e:	d012      	beq.n	8002096 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	061b      	lsls	r3, r3, #24
 8002078:	429a      	cmp	r2, r3
 800207a:	d00c      	beq.n	8002096 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800207c:	4b44      	ldr	r3, [pc, #272]	; (8002190 <HAL_ADC_Init+0x344>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a44      	ldr	r2, [pc, #272]	; (8002194 <HAL_ADC_Init+0x348>)
 8002082:	4013      	ands	r3, r2
 8002084:	0019      	movs	r1, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	23f0      	movs	r3, #240	; 0xf0
 800208c:	039b      	lsls	r3, r3, #14
 800208e:	401a      	ands	r2, r3
 8002090:	4b3f      	ldr	r3, [pc, #252]	; (8002190 <HAL_ADC_Init+0x344>)
 8002092:	430a      	orrs	r2, r1
 8002094:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6818      	ldr	r0, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209e:	001a      	movs	r2, r3
 80020a0:	2100      	movs	r1, #0
 80020a2:	f7ff fd9c 	bl	8001bde <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ae:	493a      	ldr	r1, [pc, #232]	; (8002198 <HAL_ADC_Init+0x34c>)
 80020b0:	001a      	movs	r2, r3
 80020b2:	f7ff fd94 	bl	8001bde <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d109      	bne.n	80020d2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2110      	movs	r1, #16
 80020ca:	4249      	negs	r1, r1
 80020cc:	430a      	orrs	r2, r1
 80020ce:	629a      	str	r2, [r3, #40]	; 0x28
 80020d0:	e018      	b.n	8002104 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	039b      	lsls	r3, r3, #14
 80020da:	429a      	cmp	r2, r3
 80020dc:	d112      	bne.n	8002104 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	221c      	movs	r2, #28
 80020ee:	4013      	ands	r3, r2
 80020f0:	2210      	movs	r2, #16
 80020f2:	4252      	negs	r2, r2
 80020f4:	409a      	lsls	r2, r3
 80020f6:	0011      	movs	r1, r2
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2100      	movs	r1, #0
 800210a:	0018      	movs	r0, r3
 800210c:	f7ff fd84 	bl	8001c18 <LL_ADC_GetSamplingTimeCommonChannels>
 8002110:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002116:	429a      	cmp	r2, r3
 8002118:	d10b      	bne.n	8002132 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	2203      	movs	r2, #3
 8002126:	4393      	bics	r3, r2
 8002128:	2201      	movs	r2, #1
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002130:	e01c      	b.n	800216c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002136:	2212      	movs	r2, #18
 8002138:	4393      	bics	r3, r2
 800213a:	2210      	movs	r2, #16
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	2201      	movs	r2, #1
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800214e:	231f      	movs	r3, #31
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	2201      	movs	r2, #1
 8002154:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002156:	e009      	b.n	800216c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215c:	2210      	movs	r2, #16
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002164:	231f      	movs	r3, #31
 8002166:	18fb      	adds	r3, r7, r3
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800216c:	231f      	movs	r3, #31
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	781b      	ldrb	r3, [r3, #0]
}
 8002172:	0018      	movs	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	b008      	add	sp, #32
 8002178:	bd80      	pop	{r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	20000000 	.word	0x20000000
 8002180:	00030d40 	.word	0x00030d40
 8002184:	fffffefd 	.word	0xfffffefd
 8002188:	fffe0201 	.word	0xfffe0201
 800218c:	1ffffc02 	.word	0x1ffffc02
 8002190:	40012708 	.word	0x40012708
 8002194:	ffc3ffff 	.word	0xffc3ffff
 8002198:	07ffff04 	.word	0x07ffff04

0800219c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800219c:	b5b0      	push	{r4, r5, r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	0018      	movs	r0, r3
 80021ae:	f7ff fe3b 	bl	8001e28 <LL_ADC_REG_IsConversionOngoing>
 80021b2:	1e03      	subs	r3, r0, #0
 80021b4:	d16c      	bne.n	8002290 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2254      	movs	r2, #84	; 0x54
 80021ba:	5c9b      	ldrb	r3, [r3, r2]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_ADC_Start_DMA+0x28>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e06c      	b.n	800229e <HAL_ADC_Start_DMA+0x102>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2254      	movs	r2, #84	; 0x54
 80021c8:	2101      	movs	r1, #1
 80021ca:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2201      	movs	r2, #1
 80021d4:	4013      	ands	r3, r2
 80021d6:	d113      	bne.n	8002200 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	0018      	movs	r0, r3
 80021de:	f7ff fdef 	bl	8001dc0 <LL_ADC_IsEnabled>
 80021e2:	1e03      	subs	r3, r0, #0
 80021e4:	d004      	beq.n	80021f0 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	0018      	movs	r0, r3
 80021ec:	f7ff fdd6 	bl	8001d9c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2101      	movs	r1, #1
 80021fc:	430a      	orrs	r2, r1
 80021fe:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002200:	2517      	movs	r5, #23
 8002202:	197c      	adds	r4, r7, r5
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	0018      	movs	r0, r3
 8002208:	f000 fa3e 	bl	8002688 <ADC_Enable>
 800220c:	0003      	movs	r3, r0
 800220e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002210:	002c      	movs	r4, r5
 8002212:	193b      	adds	r3, r7, r4
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d13e      	bne.n	8002298 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	4a22      	ldr	r2, [pc, #136]	; (80022a8 <HAL_ADC_Start_DMA+0x10c>)
 8002220:	4013      	ands	r3, r2
 8002222:	2280      	movs	r2, #128	; 0x80
 8002224:	0052      	lsls	r2, r2, #1
 8002226:	431a      	orrs	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002236:	4a1d      	ldr	r2, [pc, #116]	; (80022ac <HAL_ADC_Start_DMA+0x110>)
 8002238:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800223e:	4a1c      	ldr	r2, [pc, #112]	; (80022b0 <HAL_ADC_Start_DMA+0x114>)
 8002240:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002246:	4a1b      	ldr	r2, [pc, #108]	; (80022b4 <HAL_ADC_Start_DMA+0x118>)
 8002248:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	221c      	movs	r2, #28
 8002250:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2254      	movs	r2, #84	; 0x54
 8002256:	2100      	movs	r1, #0
 8002258:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2110      	movs	r1, #16
 8002266:	430a      	orrs	r2, r1
 8002268:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	3340      	adds	r3, #64	; 0x40
 8002274:	0019      	movs	r1, r3
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	193c      	adds	r4, r7, r4
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f000 fe34 	bl	8002ee8 <HAL_DMA_Start_IT>
 8002280:	0003      	movs	r3, r0
 8002282:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	0018      	movs	r0, r3
 800228a:	f7ff fdbb 	bl	8001e04 <LL_ADC_REG_StartConversion>
 800228e:	e003      	b.n	8002298 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002290:	2317      	movs	r3, #23
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	2202      	movs	r2, #2
 8002296:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002298:	2317      	movs	r3, #23
 800229a:	18fb      	adds	r3, r7, r3
 800229c:	781b      	ldrb	r3, [r3, #0]
}
 800229e:	0018      	movs	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b006      	add	sp, #24
 80022a4:	bdb0      	pop	{r4, r5, r7, pc}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	fffff0fe 	.word	0xfffff0fe
 80022ac:	08002851 	.word	0x08002851
 80022b0:	08002919 	.word	0x08002919
 80022b4:	08002937 	.word	0x08002937

080022b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80022c0:	46c0      	nop			; (mov r8, r8)
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b002      	add	sp, #8
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022d0:	46c0      	nop			; (mov r8, r8)
 80022d2:	46bd      	mov	sp, r7
 80022d4:	b002      	add	sp, #8
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e2:	2317      	movs	r3, #23
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2254      	movs	r2, #84	; 0x54
 80022f2:	5c9b      	ldrb	r3, [r3, r2]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x24>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e1c0      	b.n	800267e <HAL_ADC_ConfigChannel+0x3a6>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2254      	movs	r2, #84	; 0x54
 8002300:	2101      	movs	r1, #1
 8002302:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	0018      	movs	r0, r3
 800230a:	f7ff fd8d 	bl	8001e28 <LL_ADC_REG_IsConversionOngoing>
 800230e:	1e03      	subs	r3, r0, #0
 8002310:	d000      	beq.n	8002314 <HAL_ADC_ConfigChannel+0x3c>
 8002312:	e1a3      	b.n	800265c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d100      	bne.n	800231e <HAL_ADC_ConfigChannel+0x46>
 800231c:	e143      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	061b      	lsls	r3, r3, #24
 8002326:	429a      	cmp	r2, r3
 8002328:	d004      	beq.n	8002334 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800232e:	4ac1      	ldr	r2, [pc, #772]	; (8002634 <HAL_ADC_ConfigChannel+0x35c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d108      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	0019      	movs	r1, r3
 800233e:	0010      	movs	r0, r2
 8002340:	f7ff fcb2 	bl	8001ca8 <LL_ADC_REG_SetSequencerChAdd>
 8002344:	e0c9      	b.n	80024da <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	211f      	movs	r1, #31
 8002350:	400b      	ands	r3, r1
 8002352:	210f      	movs	r1, #15
 8002354:	4099      	lsls	r1, r3
 8002356:	000b      	movs	r3, r1
 8002358:	43db      	mvns	r3, r3
 800235a:	4013      	ands	r3, r2
 800235c:	0019      	movs	r1, r3
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	035b      	lsls	r3, r3, #13
 8002364:	0b5b      	lsrs	r3, r3, #13
 8002366:	d105      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x9c>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	0e9b      	lsrs	r3, r3, #26
 800236e:	221f      	movs	r2, #31
 8002370:	4013      	ands	r3, r2
 8002372:	e098      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2201      	movs	r2, #1
 800237a:	4013      	ands	r3, r2
 800237c:	d000      	beq.n	8002380 <HAL_ADC_ConfigChannel+0xa8>
 800237e:	e091      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x1cc>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2202      	movs	r2, #2
 8002386:	4013      	ands	r3, r2
 8002388:	d000      	beq.n	800238c <HAL_ADC_ConfigChannel+0xb4>
 800238a:	e089      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x1c8>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2204      	movs	r2, #4
 8002392:	4013      	ands	r3, r2
 8002394:	d000      	beq.n	8002398 <HAL_ADC_ConfigChannel+0xc0>
 8002396:	e081      	b.n	800249c <HAL_ADC_ConfigChannel+0x1c4>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2208      	movs	r2, #8
 800239e:	4013      	ands	r3, r2
 80023a0:	d000      	beq.n	80023a4 <HAL_ADC_ConfigChannel+0xcc>
 80023a2:	e079      	b.n	8002498 <HAL_ADC_ConfigChannel+0x1c0>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2210      	movs	r2, #16
 80023aa:	4013      	ands	r3, r2
 80023ac:	d000      	beq.n	80023b0 <HAL_ADC_ConfigChannel+0xd8>
 80023ae:	e071      	b.n	8002494 <HAL_ADC_ConfigChannel+0x1bc>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2220      	movs	r2, #32
 80023b6:	4013      	ands	r3, r2
 80023b8:	d000      	beq.n	80023bc <HAL_ADC_ConfigChannel+0xe4>
 80023ba:	e069      	b.n	8002490 <HAL_ADC_ConfigChannel+0x1b8>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2240      	movs	r2, #64	; 0x40
 80023c2:	4013      	ands	r3, r2
 80023c4:	d000      	beq.n	80023c8 <HAL_ADC_ConfigChannel+0xf0>
 80023c6:	e061      	b.n	800248c <HAL_ADC_ConfigChannel+0x1b4>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2280      	movs	r2, #128	; 0x80
 80023ce:	4013      	ands	r3, r2
 80023d0:	d000      	beq.n	80023d4 <HAL_ADC_ConfigChannel+0xfc>
 80023d2:	e059      	b.n	8002488 <HAL_ADC_ConfigChannel+0x1b0>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4013      	ands	r3, r2
 80023de:	d151      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x1ac>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4013      	ands	r3, r2
 80023ea:	d149      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x1a8>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4013      	ands	r3, r2
 80023f6:	d141      	bne.n	800247c <HAL_ADC_ConfigChannel+0x1a4>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	4013      	ands	r3, r2
 8002402:	d139      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1a0>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	015b      	lsls	r3, r3, #5
 800240c:	4013      	ands	r3, r2
 800240e:	d131      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x19c>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	019b      	lsls	r3, r3, #6
 8002418:	4013      	ands	r3, r2
 800241a:	d129      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x198>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	01db      	lsls	r3, r3, #7
 8002424:	4013      	ands	r3, r2
 8002426:	d121      	bne.n	800246c <HAL_ADC_ConfigChannel+0x194>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	021b      	lsls	r3, r3, #8
 8002430:	4013      	ands	r3, r2
 8002432:	d119      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x190>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	025b      	lsls	r3, r3, #9
 800243c:	4013      	ands	r3, r2
 800243e:	d111      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x18c>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	029b      	lsls	r3, r3, #10
 8002448:	4013      	ands	r3, r2
 800244a:	d109      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x188>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	02db      	lsls	r3, r3, #11
 8002454:	4013      	ands	r3, r2
 8002456:	d001      	beq.n	800245c <HAL_ADC_ConfigChannel+0x184>
 8002458:	2312      	movs	r3, #18
 800245a:	e024      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1ce>
 800245c:	2300      	movs	r3, #0
 800245e:	e022      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002460:	2311      	movs	r3, #17
 8002462:	e020      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002464:	2310      	movs	r3, #16
 8002466:	e01e      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002468:	230f      	movs	r3, #15
 800246a:	e01c      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1ce>
 800246c:	230e      	movs	r3, #14
 800246e:	e01a      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002470:	230d      	movs	r3, #13
 8002472:	e018      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002474:	230c      	movs	r3, #12
 8002476:	e016      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002478:	230b      	movs	r3, #11
 800247a:	e014      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1ce>
 800247c:	230a      	movs	r3, #10
 800247e:	e012      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002480:	2309      	movs	r3, #9
 8002482:	e010      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002484:	2308      	movs	r3, #8
 8002486:	e00e      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002488:	2307      	movs	r3, #7
 800248a:	e00c      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1ce>
 800248c:	2306      	movs	r3, #6
 800248e:	e00a      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002490:	2305      	movs	r3, #5
 8002492:	e008      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002494:	2304      	movs	r3, #4
 8002496:	e006      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002498:	2303      	movs	r3, #3
 800249a:	e004      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1ce>
 800249c:	2302      	movs	r3, #2
 800249e:	e002      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1ce>
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1ce>
 80024a4:	2300      	movs	r3, #0
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	6852      	ldr	r2, [r2, #4]
 80024aa:	201f      	movs	r0, #31
 80024ac:	4002      	ands	r2, r0
 80024ae:	4093      	lsls	r3, r2
 80024b0:	000a      	movs	r2, r1
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	089b      	lsrs	r3, r3, #2
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d808      	bhi.n	80024da <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	6859      	ldr	r1, [r3, #4]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	001a      	movs	r2, r3
 80024d6:	f7ff fbc7 	bl	8001c68 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	6819      	ldr	r1, [r3, #0]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	001a      	movs	r2, r3
 80024e8:	f7ff fc02 	bl	8001cf0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	db00      	blt.n	80024f6 <HAL_ADC_ConfigChannel+0x21e>
 80024f4:	e0bc      	b.n	8002670 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024f6:	4b50      	ldr	r3, [pc, #320]	; (8002638 <HAL_ADC_ConfigChannel+0x360>)
 80024f8:	0018      	movs	r0, r3
 80024fa:	f7ff fb63 	bl	8001bc4 <LL_ADC_GetCommonPathInternalCh>
 80024fe:	0003      	movs	r3, r0
 8002500:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a4d      	ldr	r2, [pc, #308]	; (800263c <HAL_ADC_ConfigChannel+0x364>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d122      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	041b      	lsls	r3, r3, #16
 8002512:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002514:	d11d      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	0412      	lsls	r2, r2, #16
 800251c:	4313      	orrs	r3, r2
 800251e:	4a46      	ldr	r2, [pc, #280]	; (8002638 <HAL_ADC_ConfigChannel+0x360>)
 8002520:	0019      	movs	r1, r3
 8002522:	0010      	movs	r0, r2
 8002524:	f7ff fb3a 	bl	8001b9c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002528:	4b45      	ldr	r3, [pc, #276]	; (8002640 <HAL_ADC_ConfigChannel+0x368>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4945      	ldr	r1, [pc, #276]	; (8002644 <HAL_ADC_ConfigChannel+0x36c>)
 800252e:	0018      	movs	r0, r3
 8002530:	f7fd fde6 	bl	8000100 <__udivsi3>
 8002534:	0003      	movs	r3, r0
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	0013      	movs	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	189b      	adds	r3, r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002542:	e002      	b.n	800254a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	3b01      	subs	r3, #1
 8002548:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f9      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002550:	e08e      	b.n	8002670 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a3c      	ldr	r2, [pc, #240]	; (8002648 <HAL_ADC_ConfigChannel+0x370>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d10e      	bne.n	800257a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	2380      	movs	r3, #128	; 0x80
 8002560:	045b      	lsls	r3, r3, #17
 8002562:	4013      	ands	r3, r2
 8002564:	d109      	bne.n	800257a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	2280      	movs	r2, #128	; 0x80
 800256a:	0452      	lsls	r2, r2, #17
 800256c:	4313      	orrs	r3, r2
 800256e:	4a32      	ldr	r2, [pc, #200]	; (8002638 <HAL_ADC_ConfigChannel+0x360>)
 8002570:	0019      	movs	r1, r3
 8002572:	0010      	movs	r0, r2
 8002574:	f7ff fb12 	bl	8001b9c <LL_ADC_SetCommonPathInternalCh>
 8002578:	e07a      	b.n	8002670 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a33      	ldr	r2, [pc, #204]	; (800264c <HAL_ADC_ConfigChannel+0x374>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d000      	beq.n	8002586 <HAL_ADC_ConfigChannel+0x2ae>
 8002584:	e074      	b.n	8002670 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	03db      	lsls	r3, r3, #15
 800258c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800258e:	d000      	beq.n	8002592 <HAL_ADC_ConfigChannel+0x2ba>
 8002590:	e06e      	b.n	8002670 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	2280      	movs	r2, #128	; 0x80
 8002596:	03d2      	lsls	r2, r2, #15
 8002598:	4313      	orrs	r3, r2
 800259a:	4a27      	ldr	r2, [pc, #156]	; (8002638 <HAL_ADC_ConfigChannel+0x360>)
 800259c:	0019      	movs	r1, r3
 800259e:	0010      	movs	r0, r2
 80025a0:	f7ff fafc 	bl	8001b9c <LL_ADC_SetCommonPathInternalCh>
 80025a4:	e064      	b.n	8002670 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	061b      	lsls	r3, r3, #24
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d004      	beq.n	80025bc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80025b6:	4a1f      	ldr	r2, [pc, #124]	; (8002634 <HAL_ADC_ConfigChannel+0x35c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d107      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	0019      	movs	r1, r3
 80025c6:	0010      	movs	r0, r2
 80025c8:	f7ff fb7f 	bl	8001cca <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	da4d      	bge.n	8002670 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025d4:	4b18      	ldr	r3, [pc, #96]	; (8002638 <HAL_ADC_ConfigChannel+0x360>)
 80025d6:	0018      	movs	r0, r3
 80025d8:	f7ff faf4 	bl	8001bc4 <LL_ADC_GetCommonPathInternalCh>
 80025dc:	0003      	movs	r3, r0
 80025de:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a15      	ldr	r2, [pc, #84]	; (800263c <HAL_ADC_ConfigChannel+0x364>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d108      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4a18      	ldr	r2, [pc, #96]	; (8002650 <HAL_ADC_ConfigChannel+0x378>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	4a11      	ldr	r2, [pc, #68]	; (8002638 <HAL_ADC_ConfigChannel+0x360>)
 80025f2:	0019      	movs	r1, r3
 80025f4:	0010      	movs	r0, r2
 80025f6:	f7ff fad1 	bl	8001b9c <LL_ADC_SetCommonPathInternalCh>
 80025fa:	e039      	b.n	8002670 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a11      	ldr	r2, [pc, #68]	; (8002648 <HAL_ADC_ConfigChannel+0x370>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d108      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4a12      	ldr	r2, [pc, #72]	; (8002654 <HAL_ADC_ConfigChannel+0x37c>)
 800260a:	4013      	ands	r3, r2
 800260c:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <HAL_ADC_ConfigChannel+0x360>)
 800260e:	0019      	movs	r1, r3
 8002610:	0010      	movs	r0, r2
 8002612:	f7ff fac3 	bl	8001b9c <LL_ADC_SetCommonPathInternalCh>
 8002616:	e02b      	b.n	8002670 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a0b      	ldr	r2, [pc, #44]	; (800264c <HAL_ADC_ConfigChannel+0x374>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d126      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4a0c      	ldr	r2, [pc, #48]	; (8002658 <HAL_ADC_ConfigChannel+0x380>)
 8002626:	4013      	ands	r3, r2
 8002628:	4a03      	ldr	r2, [pc, #12]	; (8002638 <HAL_ADC_ConfigChannel+0x360>)
 800262a:	0019      	movs	r1, r3
 800262c:	0010      	movs	r0, r2
 800262e:	f7ff fab5 	bl	8001b9c <LL_ADC_SetCommonPathInternalCh>
 8002632:	e01d      	b.n	8002670 <HAL_ADC_ConfigChannel+0x398>
 8002634:	80000004 	.word	0x80000004
 8002638:	40012708 	.word	0x40012708
 800263c:	b0001000 	.word	0xb0001000
 8002640:	20000000 	.word	0x20000000
 8002644:	00030d40 	.word	0x00030d40
 8002648:	b8004000 	.word	0xb8004000
 800264c:	b4002000 	.word	0xb4002000
 8002650:	ff7fffff 	.word	0xff7fffff
 8002654:	feffffff 	.word	0xfeffffff
 8002658:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002660:	2220      	movs	r2, #32
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002668:	2317      	movs	r3, #23
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	2201      	movs	r2, #1
 800266e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2254      	movs	r2, #84	; 0x54
 8002674:	2100      	movs	r1, #0
 8002676:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002678:	2317      	movs	r3, #23
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	781b      	ldrb	r3, [r3, #0]
}
 800267e:	0018      	movs	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	b006      	add	sp, #24
 8002684:	bd80      	pop	{r7, pc}
 8002686:	46c0      	nop			; (mov r8, r8)

08002688 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	0018      	movs	r0, r3
 800269a:	f7ff fb91 	bl	8001dc0 <LL_ADC_IsEnabled>
 800269e:	1e03      	subs	r3, r0, #0
 80026a0:	d000      	beq.n	80026a4 <ADC_Enable+0x1c>
 80026a2:	e069      	b.n	8002778 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	4a36      	ldr	r2, [pc, #216]	; (8002784 <ADC_Enable+0xfc>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	d00d      	beq.n	80026cc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b4:	2210      	movs	r2, #16
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c0:	2201      	movs	r2, #1
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e056      	b.n	800277a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	0018      	movs	r0, r3
 80026d2:	f7ff fb51 	bl	8001d78 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80026d6:	4b2c      	ldr	r3, [pc, #176]	; (8002788 <ADC_Enable+0x100>)
 80026d8:	0018      	movs	r0, r3
 80026da:	f7ff fa73 	bl	8001bc4 <LL_ADC_GetCommonPathInternalCh>
 80026de:	0002      	movs	r2, r0
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	041b      	lsls	r3, r3, #16
 80026e4:	4013      	ands	r3, r2
 80026e6:	d00f      	beq.n	8002708 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026e8:	4b28      	ldr	r3, [pc, #160]	; (800278c <ADC_Enable+0x104>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4928      	ldr	r1, [pc, #160]	; (8002790 <ADC_Enable+0x108>)
 80026ee:	0018      	movs	r0, r3
 80026f0:	f7fd fd06 	bl	8000100 <__udivsi3>
 80026f4:	0003      	movs	r3, r0
 80026f6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80026f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026fa:	e002      	b.n	8002702 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	3b01      	subs	r3, #1
 8002700:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1f9      	bne.n	80026fc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	7e5b      	ldrb	r3, [r3, #25]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d033      	beq.n	8002778 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002710:	f7ff fa16 	bl	8001b40 <HAL_GetTick>
 8002714:	0003      	movs	r3, r0
 8002716:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002718:	e027      	b.n	800276a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	0018      	movs	r0, r3
 8002720:	f7ff fb4e 	bl	8001dc0 <LL_ADC_IsEnabled>
 8002724:	1e03      	subs	r3, r0, #0
 8002726:	d104      	bne.n	8002732 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	0018      	movs	r0, r3
 800272e:	f7ff fb23 	bl	8001d78 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002732:	f7ff fa05 	bl	8001b40 <HAL_GetTick>
 8002736:	0002      	movs	r2, r0
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d914      	bls.n	800276a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2201      	movs	r2, #1
 8002748:	4013      	ands	r3, r2
 800274a:	2b01      	cmp	r3, #1
 800274c:	d00d      	beq.n	800276a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002752:	2210      	movs	r2, #16
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275e:	2201      	movs	r2, #1
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e007      	b.n	800277a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2201      	movs	r2, #1
 8002772:	4013      	ands	r3, r2
 8002774:	2b01      	cmp	r3, #1
 8002776:	d1d0      	bne.n	800271a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	0018      	movs	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	b004      	add	sp, #16
 8002780:	bd80      	pop	{r7, pc}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	80000017 	.word	0x80000017
 8002788:	40012708 	.word	0x40012708
 800278c:	20000000 	.word	0x20000000
 8002790:	00030d40 	.word	0x00030d40

08002794 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	0018      	movs	r0, r3
 80027a2:	f7ff fb1e 	bl	8001de2 <LL_ADC_IsDisableOngoing>
 80027a6:	0003      	movs	r3, r0
 80027a8:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	0018      	movs	r0, r3
 80027b0:	f7ff fb06 	bl	8001dc0 <LL_ADC_IsEnabled>
 80027b4:	1e03      	subs	r3, r0, #0
 80027b6:	d046      	beq.n	8002846 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d143      	bne.n	8002846 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2205      	movs	r2, #5
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d10d      	bne.n	80027e8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	0018      	movs	r0, r3
 80027d2:	f7ff fae3 	bl	8001d9c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2203      	movs	r2, #3
 80027dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027de:	f7ff f9af 	bl	8001b40 <HAL_GetTick>
 80027e2:	0003      	movs	r3, r0
 80027e4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027e6:	e028      	b.n	800283a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ec:	2210      	movs	r2, #16
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f8:	2201      	movs	r2, #1
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e021      	b.n	8002848 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002804:	f7ff f99c 	bl	8001b40 <HAL_GetTick>
 8002808:	0002      	movs	r2, r0
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d913      	bls.n	800283a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2201      	movs	r2, #1
 800281a:	4013      	ands	r3, r2
 800281c:	d00d      	beq.n	800283a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002822:	2210      	movs	r2, #16
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282e:	2201      	movs	r2, #1
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e006      	b.n	8002848 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2201      	movs	r2, #1
 8002842:	4013      	ands	r3, r2
 8002844:	d1de      	bne.n	8002804 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	b004      	add	sp, #16
 800284e:	bd80      	pop	{r7, pc}

08002850 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002862:	2250      	movs	r2, #80	; 0x50
 8002864:	4013      	ands	r3, r2
 8002866:	d141      	bne.n	80028ec <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286c:	2280      	movs	r2, #128	; 0x80
 800286e:	0092      	lsls	r2, r2, #2
 8002870:	431a      	orrs	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	0018      	movs	r0, r3
 800287c:	f7ff f9e3 	bl	8001c46 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002880:	1e03      	subs	r3, r0, #0
 8002882:	d02e      	beq.n	80028e2 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	7e9b      	ldrb	r3, [r3, #26]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d12a      	bne.n	80028e2 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2208      	movs	r2, #8
 8002894:	4013      	ands	r3, r2
 8002896:	2b08      	cmp	r3, #8
 8002898:	d123      	bne.n	80028e2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	0018      	movs	r0, r3
 80028a0:	f7ff fac2 	bl	8001e28 <LL_ADC_REG_IsConversionOngoing>
 80028a4:	1e03      	subs	r3, r0, #0
 80028a6:	d110      	bne.n	80028ca <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	210c      	movs	r1, #12
 80028b4:	438a      	bics	r2, r1
 80028b6:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028bc:	4a15      	ldr	r2, [pc, #84]	; (8002914 <ADC_DMAConvCplt+0xc4>)
 80028be:	4013      	ands	r3, r2
 80028c0:	2201      	movs	r2, #1
 80028c2:	431a      	orrs	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	659a      	str	r2, [r3, #88]	; 0x58
 80028c8:	e00b      	b.n	80028e2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ce:	2220      	movs	r2, #32
 80028d0:	431a      	orrs	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028da:	2201      	movs	r2, #1
 80028dc:	431a      	orrs	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7fe fc2f 	bl	8001148 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028ea:	e00f      	b.n	800290c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	2210      	movs	r2, #16
 80028f2:	4013      	ands	r3, r2
 80028f4:	d004      	beq.n	8002900 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	0018      	movs	r0, r3
 80028fa:	f7ff fce5 	bl	80022c8 <HAL_ADC_ErrorCallback>
}
 80028fe:	e005      	b.n	800290c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	0010      	movs	r0, r2
 800290a:	4798      	blx	r3
}
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	46bd      	mov	sp, r7
 8002910:	b004      	add	sp, #16
 8002912:	bd80      	pop	{r7, pc}
 8002914:	fffffefe 	.word	0xfffffefe

08002918 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	0018      	movs	r0, r3
 800292a:	f7ff fcc5 	bl	80022b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	46bd      	mov	sp, r7
 8002932:	b004      	add	sp, #16
 8002934:	bd80      	pop	{r7, pc}

08002936 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002948:	2240      	movs	r2, #64	; 0x40
 800294a:	431a      	orrs	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002954:	2204      	movs	r2, #4
 8002956:	431a      	orrs	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	0018      	movs	r0, r3
 8002960:	f7ff fcb2 	bl	80022c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002964:	46c0      	nop			; (mov r8, r8)
 8002966:	46bd      	mov	sp, r7
 8002968:	b004      	add	sp, #16
 800296a:	bd80      	pop	{r7, pc}

0800296c <LL_ADC_SetCalibrationFactor>:
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	22b4      	movs	r2, #180	; 0xb4
 800297a:	589b      	ldr	r3, [r3, r2]
 800297c:	227f      	movs	r2, #127	; 0x7f
 800297e:	4393      	bics	r3, r2
 8002980:	001a      	movs	r2, r3
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	21b4      	movs	r1, #180	; 0xb4
 800298a:	505a      	str	r2, [r3, r1]
}
 800298c:	46c0      	nop			; (mov r8, r8)
 800298e:	46bd      	mov	sp, r7
 8002990:	b002      	add	sp, #8
 8002992:	bd80      	pop	{r7, pc}

08002994 <LL_ADC_GetCalibrationFactor>:
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	22b4      	movs	r2, #180	; 0xb4
 80029a0:	589b      	ldr	r3, [r3, r2]
 80029a2:	227f      	movs	r2, #127	; 0x7f
 80029a4:	4013      	ands	r3, r2
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b002      	add	sp, #8
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <LL_ADC_Enable>:
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <LL_ADC_Enable+0x20>)
 80029be:	4013      	ands	r3, r2
 80029c0:	2201      	movs	r2, #1
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	609a      	str	r2, [r3, #8]
}
 80029c8:	46c0      	nop			; (mov r8, r8)
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b002      	add	sp, #8
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	7fffffe8 	.word	0x7fffffe8

080029d4 <LL_ADC_Disable>:
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a04      	ldr	r2, [pc, #16]	; (80029f4 <LL_ADC_Disable+0x20>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	2202      	movs	r2, #2
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	609a      	str	r2, [r3, #8]
}
 80029ec:	46c0      	nop			; (mov r8, r8)
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b002      	add	sp, #8
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	7fffffe8 	.word	0x7fffffe8

080029f8 <LL_ADC_IsEnabled>:
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2201      	movs	r2, #1
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <LL_ADC_IsEnabled+0x18>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <LL_ADC_IsEnabled+0x1a>
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	0018      	movs	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b002      	add	sp, #8
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <LL_ADC_StartCalibration>:
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a05      	ldr	r2, [pc, #20]	; (8002a40 <LL_ADC_StartCalibration+0x24>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	2280      	movs	r2, #128	; 0x80
 8002a2e:	0612      	lsls	r2, r2, #24
 8002a30:	431a      	orrs	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	609a      	str	r2, [r3, #8]
}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b002      	add	sp, #8
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	7fffffe8 	.word	0x7fffffe8

08002a44 <LL_ADC_IsCalibrationOnGoing>:
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	0fdb      	lsrs	r3, r3, #31
 8002a52:	07da      	lsls	r2, r3, #31
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	061b      	lsls	r3, r3, #24
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d101      	bne.n	8002a60 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	0018      	movs	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b002      	add	sp, #8
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b089      	sub	sp, #36	; 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2254      	movs	r2, #84	; 0x54
 8002a80:	5c9b      	ldrb	r3, [r3, r2]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_ADCEx_Calibration_Start+0x1e>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e0ba      	b.n	8002c00 <HAL_ADCEx_Calibration_Start+0x194>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2254      	movs	r2, #84	; 0x54
 8002a8e:	2101      	movs	r1, #1
 8002a90:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002a92:	2317      	movs	r3, #23
 8002a94:	18fc      	adds	r4, r7, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f7ff fe7b 	bl	8002794 <ADC_Disable>
 8002a9e:	0003      	movs	r3, r0
 8002aa0:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f7ff ffa6 	bl	80029f8 <LL_ADC_IsEnabled>
 8002aac:	1e03      	subs	r3, r0, #0
 8002aae:	d000      	beq.n	8002ab2 <HAL_ADCEx_Calibration_Start+0x46>
 8002ab0:	e099      	b.n	8002be6 <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab6:	4a54      	ldr	r2, [pc, #336]	; (8002c08 <HAL_ADCEx_Calibration_Start+0x19c>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2202      	movs	r2, #2
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4a50      	ldr	r2, [pc, #320]	; (8002c0c <HAL_ADCEx_Calibration_Start+0x1a0>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	494d      	ldr	r1, [pc, #308]	; (8002c10 <HAL_ADCEx_Calibration_Start+0x1a4>)
 8002ada:	400a      	ands	r2, r1
 8002adc:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	e02d      	b.n	8002b40 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f7ff ff97 	bl	8002a1c <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002aee:	e014      	b.n	8002b1a <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	3301      	adds	r3, #1
 8002af4:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4a46      	ldr	r2, [pc, #280]	; (8002c14 <HAL_ADCEx_Calibration_Start+0x1a8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d90d      	bls.n	8002b1a <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b02:	2212      	movs	r2, #18
 8002b04:	4393      	bics	r3, r2
 8002b06:	2210      	movs	r2, #16
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2254      	movs	r2, #84	; 0x54
 8002b12:	2100      	movs	r1, #0
 8002b14:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e072      	b.n	8002c00 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f7ff ff90 	bl	8002a44 <LL_ADC_IsCalibrationOnGoing>
 8002b24:	1e03      	subs	r3, r0, #0
 8002b26:	d1e3      	bne.n	8002af0 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7ff ff31 	bl	8002994 <LL_ADC_GetCalibrationFactor>
 8002b32:	0002      	movs	r2, r0
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	189b      	adds	r3, r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	61fb      	str	r3, [r7, #28]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	2b07      	cmp	r3, #7
 8002b44:	d9ce      	bls.n	8002ae4 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002b46:	69f9      	ldr	r1, [r7, #28]
 8002b48:	69b8      	ldr	r0, [r7, #24]
 8002b4a:	f7fd fad9 	bl	8000100 <__udivsi3>
 8002b4e:	0003      	movs	r3, r0
 8002b50:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	0018      	movs	r0, r3
 8002b58:	f7ff ff2a 	bl	80029b0 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	0011      	movs	r1, r2
 8002b64:	0018      	movs	r0, r3
 8002b66:	f7ff ff01 	bl	800296c <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f7ff ff30 	bl	80029d4 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b74:	f7fe ffe4 	bl	8001b40 <HAL_GetTick>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b7c:	e01b      	b.n	8002bb6 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b7e:	f7fe ffdf 	bl	8001b40 <HAL_GetTick>
 8002b82:	0002      	movs	r2, r0
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d914      	bls.n	8002bb6 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f7ff ff31 	bl	80029f8 <LL_ADC_IsEnabled>
 8002b96:	1e03      	subs	r3, r0, #0
 8002b98:	d00d      	beq.n	8002bb6 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9e:	2210      	movs	r2, #16
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002baa:	2201      	movs	r2, #1
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e024      	b.n	8002c00 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f7ff ff1c 	bl	80029f8 <LL_ADC_IsEnabled>
 8002bc0:	1e03      	subs	r3, r0, #0
 8002bc2:	d1dc      	bne.n	8002b7e <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68d9      	ldr	r1, [r3, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	2203      	movs	r2, #3
 8002bda:	4393      	bics	r3, r2
 8002bdc:	2201      	movs	r2, #1
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	659a      	str	r2, [r3, #88]	; 0x58
 8002be4:	e005      	b.n	8002bf2 <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bea:	2210      	movs	r2, #16
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2254      	movs	r2, #84	; 0x54
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002bfa:	2317      	movs	r3, #23
 8002bfc:	18fb      	adds	r3, r7, r3
 8002bfe:	781b      	ldrb	r3, [r3, #0]
}
 8002c00:	0018      	movs	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b009      	add	sp, #36	; 0x24
 8002c06:	bd90      	pop	{r4, r7, pc}
 8002c08:	fffffefd 	.word	0xfffffefd
 8002c0c:	00008003 	.word	0x00008003
 8002c10:	ffff7ffc 	.word	0xffff7ffc
 8002c14:	0002f1ff 	.word	0x0002f1ff

08002c18 <__NVIC_EnableIRQ>:
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	0002      	movs	r2, r0
 8002c20:	1dfb      	adds	r3, r7, #7
 8002c22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c24:	1dfb      	adds	r3, r7, #7
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b7f      	cmp	r3, #127	; 0x7f
 8002c2a:	d809      	bhi.n	8002c40 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c2c:	1dfb      	adds	r3, r7, #7
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	001a      	movs	r2, r3
 8002c32:	231f      	movs	r3, #31
 8002c34:	401a      	ands	r2, r3
 8002c36:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <__NVIC_EnableIRQ+0x30>)
 8002c38:	2101      	movs	r1, #1
 8002c3a:	4091      	lsls	r1, r2
 8002c3c:	000a      	movs	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]
}
 8002c40:	46c0      	nop			; (mov r8, r8)
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b002      	add	sp, #8
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	e000e100 	.word	0xe000e100

08002c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c4c:	b590      	push	{r4, r7, lr}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	0002      	movs	r2, r0
 8002c54:	6039      	str	r1, [r7, #0]
 8002c56:	1dfb      	adds	r3, r7, #7
 8002c58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c5a:	1dfb      	adds	r3, r7, #7
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8002c60:	d828      	bhi.n	8002cb4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c62:	4a2f      	ldr	r2, [pc, #188]	; (8002d20 <__NVIC_SetPriority+0xd4>)
 8002c64:	1dfb      	adds	r3, r7, #7
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	b25b      	sxtb	r3, r3
 8002c6a:	089b      	lsrs	r3, r3, #2
 8002c6c:	33c0      	adds	r3, #192	; 0xc0
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	589b      	ldr	r3, [r3, r2]
 8002c72:	1dfa      	adds	r2, r7, #7
 8002c74:	7812      	ldrb	r2, [r2, #0]
 8002c76:	0011      	movs	r1, r2
 8002c78:	2203      	movs	r2, #3
 8002c7a:	400a      	ands	r2, r1
 8002c7c:	00d2      	lsls	r2, r2, #3
 8002c7e:	21ff      	movs	r1, #255	; 0xff
 8002c80:	4091      	lsls	r1, r2
 8002c82:	000a      	movs	r2, r1
 8002c84:	43d2      	mvns	r2, r2
 8002c86:	401a      	ands	r2, r3
 8002c88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	019b      	lsls	r3, r3, #6
 8002c8e:	22ff      	movs	r2, #255	; 0xff
 8002c90:	401a      	ands	r2, r3
 8002c92:	1dfb      	adds	r3, r7, #7
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	0018      	movs	r0, r3
 8002c98:	2303      	movs	r3, #3
 8002c9a:	4003      	ands	r3, r0
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ca0:	481f      	ldr	r0, [pc, #124]	; (8002d20 <__NVIC_SetPriority+0xd4>)
 8002ca2:	1dfb      	adds	r3, r7, #7
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	b25b      	sxtb	r3, r3
 8002ca8:	089b      	lsrs	r3, r3, #2
 8002caa:	430a      	orrs	r2, r1
 8002cac:	33c0      	adds	r3, #192	; 0xc0
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002cb2:	e031      	b.n	8002d18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cb4:	4a1b      	ldr	r2, [pc, #108]	; (8002d24 <__NVIC_SetPriority+0xd8>)
 8002cb6:	1dfb      	adds	r3, r7, #7
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	0019      	movs	r1, r3
 8002cbc:	230f      	movs	r3, #15
 8002cbe:	400b      	ands	r3, r1
 8002cc0:	3b08      	subs	r3, #8
 8002cc2:	089b      	lsrs	r3, r3, #2
 8002cc4:	3306      	adds	r3, #6
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	18d3      	adds	r3, r2, r3
 8002cca:	3304      	adds	r3, #4
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	1dfa      	adds	r2, r7, #7
 8002cd0:	7812      	ldrb	r2, [r2, #0]
 8002cd2:	0011      	movs	r1, r2
 8002cd4:	2203      	movs	r2, #3
 8002cd6:	400a      	ands	r2, r1
 8002cd8:	00d2      	lsls	r2, r2, #3
 8002cda:	21ff      	movs	r1, #255	; 0xff
 8002cdc:	4091      	lsls	r1, r2
 8002cde:	000a      	movs	r2, r1
 8002ce0:	43d2      	mvns	r2, r2
 8002ce2:	401a      	ands	r2, r3
 8002ce4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	019b      	lsls	r3, r3, #6
 8002cea:	22ff      	movs	r2, #255	; 0xff
 8002cec:	401a      	ands	r2, r3
 8002cee:	1dfb      	adds	r3, r7, #7
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	4003      	ands	r3, r0
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cfc:	4809      	ldr	r0, [pc, #36]	; (8002d24 <__NVIC_SetPriority+0xd8>)
 8002cfe:	1dfb      	adds	r3, r7, #7
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	001c      	movs	r4, r3
 8002d04:	230f      	movs	r3, #15
 8002d06:	4023      	ands	r3, r4
 8002d08:	3b08      	subs	r3, #8
 8002d0a:	089b      	lsrs	r3, r3, #2
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	3306      	adds	r3, #6
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	18c3      	adds	r3, r0, r3
 8002d14:	3304      	adds	r3, #4
 8002d16:	601a      	str	r2, [r3, #0]
}
 8002d18:	46c0      	nop			; (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b003      	add	sp, #12
 8002d1e:	bd90      	pop	{r4, r7, pc}
 8002d20:	e000e100 	.word	0xe000e100
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	1e5a      	subs	r2, r3, #1
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	045b      	lsls	r3, r3, #17
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d301      	bcc.n	8002d40 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e010      	b.n	8002d62 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d40:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <SysTick_Config+0x44>)
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	3a01      	subs	r2, #1
 8002d46:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d48:	2301      	movs	r3, #1
 8002d4a:	425b      	negs	r3, r3
 8002d4c:	2103      	movs	r1, #3
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f7ff ff7c 	bl	8002c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <SysTick_Config+0x44>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d5a:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <SysTick_Config+0x44>)
 8002d5c:	2207      	movs	r2, #7
 8002d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	0018      	movs	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b002      	add	sp, #8
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	e000e010 	.word	0xe000e010

08002d70 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
 8002d7a:	210f      	movs	r1, #15
 8002d7c:	187b      	adds	r3, r7, r1
 8002d7e:	1c02      	adds	r2, r0, #0
 8002d80:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	187b      	adds	r3, r7, r1
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	b25b      	sxtb	r3, r3
 8002d8a:	0011      	movs	r1, r2
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f7ff ff5d 	bl	8002c4c <__NVIC_SetPriority>
}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b004      	add	sp, #16
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	0002      	movs	r2, r0
 8002da2:	1dfb      	adds	r3, r7, #7
 8002da4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da6:	1dfb      	adds	r3, r7, #7
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	b25b      	sxtb	r3, r3
 8002dac:	0018      	movs	r0, r3
 8002dae:	f7ff ff33 	bl	8002c18 <__NVIC_EnableIRQ>
}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b002      	add	sp, #8
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f7ff ffaf 	bl	8002d28 <SysTick_Config>
 8002dca:	0003      	movs	r3, r0
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e077      	b.n	8002ed6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a3d      	ldr	r2, [pc, #244]	; (8002ee0 <HAL_DMA_Init+0x10c>)
 8002dec:	4694      	mov	ip, r2
 8002dee:	4463      	add	r3, ip
 8002df0:	2114      	movs	r1, #20
 8002df2:	0018      	movs	r0, r3
 8002df4:	f7fd f984 	bl	8000100 <__udivsi3>
 8002df8:	0003      	movs	r3, r0
 8002dfa:	009a      	lsls	r2, r3, #2
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2225      	movs	r2, #37	; 0x25
 8002e04:	2102      	movs	r1, #2
 8002e06:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4934      	ldr	r1, [pc, #208]	; (8002ee4 <HAL_DMA_Init+0x110>)
 8002e14:	400a      	ands	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6819      	ldr	r1, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	0018      	movs	r0, r3
 8002e52:	f000 f9c1 	bl	80031d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	01db      	lsls	r3, r3, #7
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d102      	bne.n	8002e68 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e70:	213f      	movs	r1, #63	; 0x3f
 8002e72:	400a      	ands	r2, r1
 8002e74:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e7e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d011      	beq.n	8002eac <HAL_DMA_Init+0xd8>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d80d      	bhi.n	8002eac <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	0018      	movs	r0, r3
 8002e94:	f000 f9cc 	bl	8003230 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	e008      	b.n	8002ebe <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2225      	movs	r2, #37	; 0x25
 8002ec8:	2101      	movs	r1, #1
 8002eca:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2224      	movs	r2, #36	; 0x24
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b002      	add	sp, #8
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	bffdfff8 	.word	0xbffdfff8
 8002ee4:	ffff800f 	.word	0xffff800f

08002ee8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef6:	2317      	movs	r3, #23
 8002ef8:	18fb      	adds	r3, r7, r3
 8002efa:	2200      	movs	r2, #0
 8002efc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2224      	movs	r2, #36	; 0x24
 8002f02:	5c9b      	ldrb	r3, [r3, r2]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_DMA_Start_IT+0x24>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e06f      	b.n	8002fec <HAL_DMA_Start_IT+0x104>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2224      	movs	r2, #36	; 0x24
 8002f10:	2101      	movs	r1, #1
 8002f12:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2225      	movs	r2, #37	; 0x25
 8002f18:	5c9b      	ldrb	r3, [r3, r2]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d157      	bne.n	8002fd0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2225      	movs	r2, #37	; 0x25
 8002f24:	2102      	movs	r1, #2
 8002f26:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2101      	movs	r1, #1
 8002f3a:	438a      	bics	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	68b9      	ldr	r1, [r7, #8]
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f907 	bl	8003158 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d008      	beq.n	8002f64 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	210e      	movs	r1, #14
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	e00f      	b.n	8002f84 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2104      	movs	r1, #4
 8002f70:	438a      	bics	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	210a      	movs	r1, #10
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	2380      	movs	r3, #128	; 0x80
 8002f8c:	025b      	lsls	r3, r3, #9
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d008      	beq.n	8002fa4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9c:	2180      	movs	r1, #128	; 0x80
 8002f9e:	0049      	lsls	r1, r1, #1
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb6:	2180      	movs	r1, #128	; 0x80
 8002fb8:	0049      	lsls	r1, r1, #1
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2101      	movs	r1, #1
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	e00a      	b.n	8002fe6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2280      	movs	r2, #128	; 0x80
 8002fd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2224      	movs	r2, #36	; 0x24
 8002fda:	2100      	movs	r1, #0
 8002fdc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002fde:	2317      	movs	r3, #23
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002fe6:	2317      	movs	r3, #23
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	781b      	ldrb	r3, [r3, #0]
}
 8002fec:	0018      	movs	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b006      	add	sp, #24
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002ffc:	4b55      	ldr	r3, [pc, #340]	; (8003154 <HAL_DMA_IRQHandler+0x160>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	221c      	movs	r2, #28
 8003010:	4013      	ands	r3, r2
 8003012:	2204      	movs	r2, #4
 8003014:	409a      	lsls	r2, r3
 8003016:	0013      	movs	r3, r2
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	4013      	ands	r3, r2
 800301c:	d027      	beq.n	800306e <HAL_DMA_IRQHandler+0x7a>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2204      	movs	r2, #4
 8003022:	4013      	ands	r3, r2
 8003024:	d023      	beq.n	800306e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2220      	movs	r2, #32
 800302e:	4013      	ands	r3, r2
 8003030:	d107      	bne.n	8003042 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2104      	movs	r1, #4
 800303e:	438a      	bics	r2, r1
 8003040:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003042:	4b44      	ldr	r3, [pc, #272]	; (8003154 <HAL_DMA_IRQHandler+0x160>)
 8003044:	6859      	ldr	r1, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	221c      	movs	r2, #28
 800304c:	4013      	ands	r3, r2
 800304e:	2204      	movs	r2, #4
 8003050:	409a      	lsls	r2, r3
 8003052:	4b40      	ldr	r3, [pc, #256]	; (8003154 <HAL_DMA_IRQHandler+0x160>)
 8003054:	430a      	orrs	r2, r1
 8003056:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305c:	2b00      	cmp	r3, #0
 800305e:	d100      	bne.n	8003062 <HAL_DMA_IRQHandler+0x6e>
 8003060:	e073      	b.n	800314a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	0010      	movs	r0, r2
 800306a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800306c:	e06d      	b.n	800314a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	221c      	movs	r2, #28
 8003074:	4013      	ands	r3, r2
 8003076:	2202      	movs	r2, #2
 8003078:	409a      	lsls	r2, r3
 800307a:	0013      	movs	r3, r2
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4013      	ands	r3, r2
 8003080:	d02e      	beq.n	80030e0 <HAL_DMA_IRQHandler+0xec>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2202      	movs	r2, #2
 8003086:	4013      	ands	r3, r2
 8003088:	d02a      	beq.n	80030e0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2220      	movs	r2, #32
 8003092:	4013      	ands	r3, r2
 8003094:	d10b      	bne.n	80030ae <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	210a      	movs	r1, #10
 80030a2:	438a      	bics	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2225      	movs	r2, #37	; 0x25
 80030aa:	2101      	movs	r1, #1
 80030ac:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80030ae:	4b29      	ldr	r3, [pc, #164]	; (8003154 <HAL_DMA_IRQHandler+0x160>)
 80030b0:	6859      	ldr	r1, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	221c      	movs	r2, #28
 80030b8:	4013      	ands	r3, r2
 80030ba:	2202      	movs	r2, #2
 80030bc:	409a      	lsls	r2, r3
 80030be:	4b25      	ldr	r3, [pc, #148]	; (8003154 <HAL_DMA_IRQHandler+0x160>)
 80030c0:	430a      	orrs	r2, r1
 80030c2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2224      	movs	r2, #36	; 0x24
 80030c8:	2100      	movs	r1, #0
 80030ca:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d03a      	beq.n	800314a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	0010      	movs	r0, r2
 80030dc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80030de:	e034      	b.n	800314a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	221c      	movs	r2, #28
 80030e6:	4013      	ands	r3, r2
 80030e8:	2208      	movs	r2, #8
 80030ea:	409a      	lsls	r2, r3
 80030ec:	0013      	movs	r3, r2
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4013      	ands	r3, r2
 80030f2:	d02b      	beq.n	800314c <HAL_DMA_IRQHandler+0x158>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2208      	movs	r2, #8
 80030f8:	4013      	ands	r3, r2
 80030fa:	d027      	beq.n	800314c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	210e      	movs	r1, #14
 8003108:	438a      	bics	r2, r1
 800310a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800310c:	4b11      	ldr	r3, [pc, #68]	; (8003154 <HAL_DMA_IRQHandler+0x160>)
 800310e:	6859      	ldr	r1, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	221c      	movs	r2, #28
 8003116:	4013      	ands	r3, r2
 8003118:	2201      	movs	r2, #1
 800311a:	409a      	lsls	r2, r3
 800311c:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <HAL_DMA_IRQHandler+0x160>)
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2225      	movs	r2, #37	; 0x25
 800312c:	2101      	movs	r1, #1
 800312e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2224      	movs	r2, #36	; 0x24
 8003134:	2100      	movs	r1, #0
 8003136:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	0010      	movs	r0, r2
 8003148:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	46c0      	nop			; (mov r8, r8)
}
 800314e:	46bd      	mov	sp, r7
 8003150:	b004      	add	sp, #16
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40020000 	.word	0x40020000

08003158 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800316e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003174:	2b00      	cmp	r3, #0
 8003176:	d004      	beq.n	8003182 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003180:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003182:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <DMA_SetConfig+0x7c>)
 8003184:	6859      	ldr	r1, [r3, #4]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	221c      	movs	r2, #28
 800318c:	4013      	ands	r3, r2
 800318e:	2201      	movs	r2, #1
 8003190:	409a      	lsls	r2, r3
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <DMA_SetConfig+0x7c>)
 8003194:	430a      	orrs	r2, r1
 8003196:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b10      	cmp	r3, #16
 80031a6:	d108      	bne.n	80031ba <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031b8:	e007      	b.n	80031ca <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	60da      	str	r2, [r3, #12]
}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b004      	add	sp, #16
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	40020000 	.word	0x40020000

080031d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	089b      	lsrs	r3, r3, #2
 80031e6:	4a10      	ldr	r2, [pc, #64]	; (8003228 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80031e8:	4694      	mov	ip, r2
 80031ea:	4463      	add	r3, ip
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	001a      	movs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	001a      	movs	r2, r3
 80031fa:	23ff      	movs	r3, #255	; 0xff
 80031fc:	4013      	ands	r3, r2
 80031fe:	3b08      	subs	r3, #8
 8003200:	2114      	movs	r1, #20
 8003202:	0018      	movs	r0, r3
 8003204:	f7fc ff7c 	bl	8000100 <__udivsi3>
 8003208:	0003      	movs	r3, r0
 800320a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a07      	ldr	r2, [pc, #28]	; (800322c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003210:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	221f      	movs	r2, #31
 8003216:	4013      	ands	r3, r2
 8003218:	2201      	movs	r2, #1
 800321a:	409a      	lsls	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	46bd      	mov	sp, r7
 8003224:	b004      	add	sp, #16
 8003226:	bd80      	pop	{r7, pc}
 8003228:	10008200 	.word	0x10008200
 800322c:	40020880 	.word	0x40020880

08003230 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	223f      	movs	r2, #63	; 0x3f
 800323e:	4013      	ands	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4a0a      	ldr	r2, [pc, #40]	; (8003270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003246:	4694      	mov	ip, r2
 8003248:	4463      	add	r3, ip
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	001a      	movs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a07      	ldr	r2, [pc, #28]	; (8003274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003256:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3b01      	subs	r3, #1
 800325c:	2203      	movs	r2, #3
 800325e:	4013      	ands	r3, r2
 8003260:	2201      	movs	r2, #1
 8003262:	409a      	lsls	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	b004      	add	sp, #16
 800326e:	bd80      	pop	{r7, pc}
 8003270:	1000823f 	.word	0x1000823f
 8003274:	40020940 	.word	0x40020940

08003278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003286:	e147      	b.n	8003518 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2101      	movs	r1, #1
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4091      	lsls	r1, r2
 8003292:	000a      	movs	r2, r1
 8003294:	4013      	ands	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d100      	bne.n	80032a0 <HAL_GPIO_Init+0x28>
 800329e:	e138      	b.n	8003512 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2203      	movs	r2, #3
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d005      	beq.n	80032b8 <HAL_GPIO_Init+0x40>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2203      	movs	r2, #3
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d130      	bne.n	800331a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	2203      	movs	r2, #3
 80032c4:	409a      	lsls	r2, r3
 80032c6:	0013      	movs	r3, r2
 80032c8:	43da      	mvns	r2, r3
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4013      	ands	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	409a      	lsls	r2, r3
 80032da:	0013      	movs	r3, r2
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032ee:	2201      	movs	r2, #1
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	409a      	lsls	r2, r3
 80032f4:	0013      	movs	r3, r2
 80032f6:	43da      	mvns	r2, r3
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4013      	ands	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	091b      	lsrs	r3, r3, #4
 8003304:	2201      	movs	r2, #1
 8003306:	401a      	ands	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	409a      	lsls	r2, r3
 800330c:	0013      	movs	r3, r2
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4313      	orrs	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2203      	movs	r2, #3
 8003320:	4013      	ands	r3, r2
 8003322:	2b03      	cmp	r3, #3
 8003324:	d017      	beq.n	8003356 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	2203      	movs	r2, #3
 8003332:	409a      	lsls	r2, r3
 8003334:	0013      	movs	r3, r2
 8003336:	43da      	mvns	r2, r3
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4013      	ands	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	409a      	lsls	r2, r3
 8003348:	0013      	movs	r3, r2
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2203      	movs	r2, #3
 800335c:	4013      	ands	r3, r2
 800335e:	2b02      	cmp	r3, #2
 8003360:	d123      	bne.n	80033aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	08da      	lsrs	r2, r3, #3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3208      	adds	r2, #8
 800336a:	0092      	lsls	r2, r2, #2
 800336c:	58d3      	ldr	r3, [r2, r3]
 800336e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2207      	movs	r2, #7
 8003374:	4013      	ands	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	220f      	movs	r2, #15
 800337a:	409a      	lsls	r2, r3
 800337c:	0013      	movs	r3, r2
 800337e:	43da      	mvns	r2, r3
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4013      	ands	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	691a      	ldr	r2, [r3, #16]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2107      	movs	r1, #7
 800338e:	400b      	ands	r3, r1
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	409a      	lsls	r2, r3
 8003394:	0013      	movs	r3, r2
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	08da      	lsrs	r2, r3, #3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3208      	adds	r2, #8
 80033a4:	0092      	lsls	r2, r2, #2
 80033a6:	6939      	ldr	r1, [r7, #16]
 80033a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	2203      	movs	r2, #3
 80033b6:	409a      	lsls	r2, r3
 80033b8:	0013      	movs	r3, r2
 80033ba:	43da      	mvns	r2, r3
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4013      	ands	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2203      	movs	r2, #3
 80033c8:	401a      	ands	r2, r3
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	409a      	lsls	r2, r3
 80033d0:	0013      	movs	r3, r2
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	23c0      	movs	r3, #192	; 0xc0
 80033e4:	029b      	lsls	r3, r3, #10
 80033e6:	4013      	ands	r3, r2
 80033e8:	d100      	bne.n	80033ec <HAL_GPIO_Init+0x174>
 80033ea:	e092      	b.n	8003512 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80033ec:	4a50      	ldr	r2, [pc, #320]	; (8003530 <HAL_GPIO_Init+0x2b8>)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	089b      	lsrs	r3, r3, #2
 80033f2:	3318      	adds	r3, #24
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	589b      	ldr	r3, [r3, r2]
 80033f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2203      	movs	r2, #3
 80033fe:	4013      	ands	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	220f      	movs	r2, #15
 8003404:	409a      	lsls	r2, r3
 8003406:	0013      	movs	r3, r2
 8003408:	43da      	mvns	r2, r3
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4013      	ands	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	23a0      	movs	r3, #160	; 0xa0
 8003414:	05db      	lsls	r3, r3, #23
 8003416:	429a      	cmp	r2, r3
 8003418:	d013      	beq.n	8003442 <HAL_GPIO_Init+0x1ca>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a45      	ldr	r2, [pc, #276]	; (8003534 <HAL_GPIO_Init+0x2bc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d00d      	beq.n	800343e <HAL_GPIO_Init+0x1c6>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a44      	ldr	r2, [pc, #272]	; (8003538 <HAL_GPIO_Init+0x2c0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d007      	beq.n	800343a <HAL_GPIO_Init+0x1c2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a43      	ldr	r2, [pc, #268]	; (800353c <HAL_GPIO_Init+0x2c4>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d101      	bne.n	8003436 <HAL_GPIO_Init+0x1be>
 8003432:	2303      	movs	r3, #3
 8003434:	e006      	b.n	8003444 <HAL_GPIO_Init+0x1cc>
 8003436:	2305      	movs	r3, #5
 8003438:	e004      	b.n	8003444 <HAL_GPIO_Init+0x1cc>
 800343a:	2302      	movs	r3, #2
 800343c:	e002      	b.n	8003444 <HAL_GPIO_Init+0x1cc>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <HAL_GPIO_Init+0x1cc>
 8003442:	2300      	movs	r3, #0
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	2103      	movs	r1, #3
 8003448:	400a      	ands	r2, r1
 800344a:	00d2      	lsls	r2, r2, #3
 800344c:	4093      	lsls	r3, r2
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003454:	4936      	ldr	r1, [pc, #216]	; (8003530 <HAL_GPIO_Init+0x2b8>)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	089b      	lsrs	r3, r3, #2
 800345a:	3318      	adds	r3, #24
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003462:	4b33      	ldr	r3, [pc, #204]	; (8003530 <HAL_GPIO_Init+0x2b8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	43da      	mvns	r2, r3
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4013      	ands	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	035b      	lsls	r3, r3, #13
 800347a:	4013      	ands	r3, r2
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003486:	4b2a      	ldr	r3, [pc, #168]	; (8003530 <HAL_GPIO_Init+0x2b8>)
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800348c:	4b28      	ldr	r3, [pc, #160]	; (8003530 <HAL_GPIO_Init+0x2b8>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	43da      	mvns	r2, r3
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4013      	ands	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	2380      	movs	r3, #128	; 0x80
 80034a2:	039b      	lsls	r3, r3, #14
 80034a4:	4013      	ands	r3, r2
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034b0:	4b1f      	ldr	r3, [pc, #124]	; (8003530 <HAL_GPIO_Init+0x2b8>)
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034b6:	4a1e      	ldr	r2, [pc, #120]	; (8003530 <HAL_GPIO_Init+0x2b8>)
 80034b8:	2384      	movs	r3, #132	; 0x84
 80034ba:	58d3      	ldr	r3, [r2, r3]
 80034bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	43da      	mvns	r2, r3
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	4013      	ands	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	029b      	lsls	r3, r3, #10
 80034d0:	4013      	ands	r3, r2
 80034d2:	d003      	beq.n	80034dc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034dc:	4914      	ldr	r1, [pc, #80]	; (8003530 <HAL_GPIO_Init+0x2b8>)
 80034de:	2284      	movs	r2, #132	; 0x84
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80034e4:	4a12      	ldr	r2, [pc, #72]	; (8003530 <HAL_GPIO_Init+0x2b8>)
 80034e6:	2380      	movs	r3, #128	; 0x80
 80034e8:	58d3      	ldr	r3, [r2, r3]
 80034ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	43da      	mvns	r2, r3
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4013      	ands	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	025b      	lsls	r3, r3, #9
 80034fe:	4013      	ands	r3, r2
 8003500:	d003      	beq.n	800350a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800350a:	4909      	ldr	r1, [pc, #36]	; (8003530 <HAL_GPIO_Init+0x2b8>)
 800350c:	2280      	movs	r2, #128	; 0x80
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	3301      	adds	r3, #1
 8003516:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	40da      	lsrs	r2, r3
 8003520:	1e13      	subs	r3, r2, #0
 8003522:	d000      	beq.n	8003526 <HAL_GPIO_Init+0x2ae>
 8003524:	e6b0      	b.n	8003288 <HAL_GPIO_Init+0x10>
  }
}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	46c0      	nop			; (mov r8, r8)
 800352a:	46bd      	mov	sp, r7
 800352c:	b006      	add	sp, #24
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40021800 	.word	0x40021800
 8003534:	50000400 	.word	0x50000400
 8003538:	50000800 	.word	0x50000800
 800353c:	50000c00 	.word	0x50000c00

08003540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	0008      	movs	r0, r1
 800354a:	0011      	movs	r1, r2
 800354c:	1cbb      	adds	r3, r7, #2
 800354e:	1c02      	adds	r2, r0, #0
 8003550:	801a      	strh	r2, [r3, #0]
 8003552:	1c7b      	adds	r3, r7, #1
 8003554:	1c0a      	adds	r2, r1, #0
 8003556:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003558:	1c7b      	adds	r3, r7, #1
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d004      	beq.n	800356a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003560:	1cbb      	adds	r3, r7, #2
 8003562:	881a      	ldrh	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003568:	e003      	b.n	8003572 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800356a:	1cbb      	adds	r3, r7, #2
 800356c:	881a      	ldrh	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	46bd      	mov	sp, r7
 8003576:	b002      	add	sp, #8
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003584:	4b19      	ldr	r3, [pc, #100]	; (80035ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a19      	ldr	r2, [pc, #100]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800358a:	4013      	ands	r3, r2
 800358c:	0019      	movs	r1, r3
 800358e:	4b17      	ldr	r3, [pc, #92]	; (80035ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	430a      	orrs	r2, r1
 8003594:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	2380      	movs	r3, #128	; 0x80
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	429a      	cmp	r2, r3
 800359e:	d11f      	bne.n	80035e0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80035a0:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	0013      	movs	r3, r2
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	189b      	adds	r3, r3, r2
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	4912      	ldr	r1, [pc, #72]	; (80035f8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80035ae:	0018      	movs	r0, r3
 80035b0:	f7fc fda6 	bl	8000100 <__udivsi3>
 80035b4:	0003      	movs	r3, r0
 80035b6:	3301      	adds	r3, #1
 80035b8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035ba:	e008      	b.n	80035ce <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	3b01      	subs	r3, #1
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	e001      	b.n	80035ce <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e009      	b.n	80035e2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035ce:	4b07      	ldr	r3, [pc, #28]	; (80035ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 80035d0:	695a      	ldr	r2, [r3, #20]
 80035d2:	2380      	movs	r3, #128	; 0x80
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	401a      	ands	r2, r3
 80035d8:	2380      	movs	r3, #128	; 0x80
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	429a      	cmp	r2, r3
 80035de:	d0ed      	beq.n	80035bc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	0018      	movs	r0, r3
 80035e4:	46bd      	mov	sp, r7
 80035e6:	b004      	add	sp, #16
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	40007000 	.word	0x40007000
 80035f0:	fffff9ff 	.word	0xfffff9ff
 80035f4:	20000000 	.word	0x20000000
 80035f8:	000f4240 	.word	0x000f4240

080035fc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003600:	4b03      	ldr	r3, [pc, #12]	; (8003610 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	23e0      	movs	r3, #224	; 0xe0
 8003606:	01db      	lsls	r3, r3, #7
 8003608:	4013      	ands	r3, r2
}
 800360a:	0018      	movs	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40021000 	.word	0x40021000

08003614 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e2f3      	b.n	8003c0e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2201      	movs	r2, #1
 800362c:	4013      	ands	r3, r2
 800362e:	d100      	bne.n	8003632 <HAL_RCC_OscConfig+0x1e>
 8003630:	e07c      	b.n	800372c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003632:	4bc3      	ldr	r3, [pc, #780]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2238      	movs	r2, #56	; 0x38
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800363c:	4bc0      	ldr	r3, [pc, #768]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	2203      	movs	r2, #3
 8003642:	4013      	ands	r3, r2
 8003644:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	2b10      	cmp	r3, #16
 800364a:	d102      	bne.n	8003652 <HAL_RCC_OscConfig+0x3e>
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b03      	cmp	r3, #3
 8003650:	d002      	beq.n	8003658 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	2b08      	cmp	r3, #8
 8003656:	d10b      	bne.n	8003670 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003658:	4bb9      	ldr	r3, [pc, #740]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	2380      	movs	r3, #128	; 0x80
 800365e:	029b      	lsls	r3, r3, #10
 8003660:	4013      	ands	r3, r2
 8003662:	d062      	beq.n	800372a <HAL_RCC_OscConfig+0x116>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d15e      	bne.n	800372a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e2ce      	b.n	8003c0e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	025b      	lsls	r3, r3, #9
 8003678:	429a      	cmp	r2, r3
 800367a:	d107      	bne.n	800368c <HAL_RCC_OscConfig+0x78>
 800367c:	4bb0      	ldr	r3, [pc, #704]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4baf      	ldr	r3, [pc, #700]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 8003682:	2180      	movs	r1, #128	; 0x80
 8003684:	0249      	lsls	r1, r1, #9
 8003686:	430a      	orrs	r2, r1
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	e020      	b.n	80036ce <HAL_RCC_OscConfig+0xba>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	23a0      	movs	r3, #160	; 0xa0
 8003692:	02db      	lsls	r3, r3, #11
 8003694:	429a      	cmp	r2, r3
 8003696:	d10e      	bne.n	80036b6 <HAL_RCC_OscConfig+0xa2>
 8003698:	4ba9      	ldr	r3, [pc, #676]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	4ba8      	ldr	r3, [pc, #672]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 800369e:	2180      	movs	r1, #128	; 0x80
 80036a0:	02c9      	lsls	r1, r1, #11
 80036a2:	430a      	orrs	r2, r1
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	4ba6      	ldr	r3, [pc, #664]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	4ba5      	ldr	r3, [pc, #660]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 80036ac:	2180      	movs	r1, #128	; 0x80
 80036ae:	0249      	lsls	r1, r1, #9
 80036b0:	430a      	orrs	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	e00b      	b.n	80036ce <HAL_RCC_OscConfig+0xba>
 80036b6:	4ba2      	ldr	r3, [pc, #648]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4ba1      	ldr	r3, [pc, #644]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 80036bc:	49a1      	ldr	r1, [pc, #644]	; (8003944 <HAL_RCC_OscConfig+0x330>)
 80036be:	400a      	ands	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	4b9f      	ldr	r3, [pc, #636]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	4b9e      	ldr	r3, [pc, #632]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 80036c8:	499f      	ldr	r1, [pc, #636]	; (8003948 <HAL_RCC_OscConfig+0x334>)
 80036ca:	400a      	ands	r2, r1
 80036cc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d014      	beq.n	8003700 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d6:	f7fe fa33 	bl	8001b40 <HAL_GetTick>
 80036da:	0003      	movs	r3, r0
 80036dc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e0:	f7fe fa2e 	bl	8001b40 <HAL_GetTick>
 80036e4:	0002      	movs	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b64      	cmp	r3, #100	; 0x64
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e28d      	b.n	8003c0e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036f2:	4b93      	ldr	r3, [pc, #588]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	2380      	movs	r3, #128	; 0x80
 80036f8:	029b      	lsls	r3, r3, #10
 80036fa:	4013      	ands	r3, r2
 80036fc:	d0f0      	beq.n	80036e0 <HAL_RCC_OscConfig+0xcc>
 80036fe:	e015      	b.n	800372c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fe fa1e 	bl	8001b40 <HAL_GetTick>
 8003704:	0003      	movs	r3, r0
 8003706:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800370a:	f7fe fa19 	bl	8001b40 <HAL_GetTick>
 800370e:	0002      	movs	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b64      	cmp	r3, #100	; 0x64
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e278      	b.n	8003c0e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800371c:	4b88      	ldr	r3, [pc, #544]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	2380      	movs	r3, #128	; 0x80
 8003722:	029b      	lsls	r3, r3, #10
 8003724:	4013      	ands	r3, r2
 8003726:	d1f0      	bne.n	800370a <HAL_RCC_OscConfig+0xf6>
 8003728:	e000      	b.n	800372c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2202      	movs	r2, #2
 8003732:	4013      	ands	r3, r2
 8003734:	d100      	bne.n	8003738 <HAL_RCC_OscConfig+0x124>
 8003736:	e099      	b.n	800386c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003738:	4b81      	ldr	r3, [pc, #516]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	2238      	movs	r2, #56	; 0x38
 800373e:	4013      	ands	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003742:	4b7f      	ldr	r3, [pc, #508]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	2203      	movs	r2, #3
 8003748:	4013      	ands	r3, r2
 800374a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	2b10      	cmp	r3, #16
 8003750:	d102      	bne.n	8003758 <HAL_RCC_OscConfig+0x144>
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d002      	beq.n	800375e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d135      	bne.n	80037ca <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800375e:	4b78      	ldr	r3, [pc, #480]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4013      	ands	r3, r2
 8003768:	d005      	beq.n	8003776 <HAL_RCC_OscConfig+0x162>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e24b      	b.n	8003c0e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003776:	4b72      	ldr	r3, [pc, #456]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	4a74      	ldr	r2, [pc, #464]	; (800394c <HAL_RCC_OscConfig+0x338>)
 800377c:	4013      	ands	r3, r2
 800377e:	0019      	movs	r1, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	021a      	lsls	r2, r3, #8
 8003786:	4b6e      	ldr	r3, [pc, #440]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 8003788:	430a      	orrs	r2, r1
 800378a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d112      	bne.n	80037b8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003792:	4b6b      	ldr	r3, [pc, #428]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a6e      	ldr	r2, [pc, #440]	; (8003950 <HAL_RCC_OscConfig+0x33c>)
 8003798:	4013      	ands	r3, r2
 800379a:	0019      	movs	r1, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	4b67      	ldr	r3, [pc, #412]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 80037a2:	430a      	orrs	r2, r1
 80037a4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80037a6:	4b66      	ldr	r3, [pc, #408]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	0adb      	lsrs	r3, r3, #11
 80037ac:	2207      	movs	r2, #7
 80037ae:	4013      	ands	r3, r2
 80037b0:	4a68      	ldr	r2, [pc, #416]	; (8003954 <HAL_RCC_OscConfig+0x340>)
 80037b2:	40da      	lsrs	r2, r3
 80037b4:	4b68      	ldr	r3, [pc, #416]	; (8003958 <HAL_RCC_OscConfig+0x344>)
 80037b6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80037b8:	4b68      	ldr	r3, [pc, #416]	; (800395c <HAL_RCC_OscConfig+0x348>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	0018      	movs	r0, r3
 80037be:	f7fe f963 	bl	8001a88 <HAL_InitTick>
 80037c2:	1e03      	subs	r3, r0, #0
 80037c4:	d051      	beq.n	800386a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e221      	b.n	8003c0e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d030      	beq.n	8003834 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80037d2:	4b5b      	ldr	r3, [pc, #364]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a5e      	ldr	r2, [pc, #376]	; (8003950 <HAL_RCC_OscConfig+0x33c>)
 80037d8:	4013      	ands	r3, r2
 80037da:	0019      	movs	r1, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	4b57      	ldr	r3, [pc, #348]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 80037e2:	430a      	orrs	r2, r1
 80037e4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80037e6:	4b56      	ldr	r3, [pc, #344]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	4b55      	ldr	r3, [pc, #340]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 80037ec:	2180      	movs	r1, #128	; 0x80
 80037ee:	0049      	lsls	r1, r1, #1
 80037f0:	430a      	orrs	r2, r1
 80037f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f4:	f7fe f9a4 	bl	8001b40 <HAL_GetTick>
 80037f8:	0003      	movs	r3, r0
 80037fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037fe:	f7fe f99f 	bl	8001b40 <HAL_GetTick>
 8003802:	0002      	movs	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e1fe      	b.n	8003c0e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003810:	4b4b      	ldr	r3, [pc, #300]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	2380      	movs	r3, #128	; 0x80
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4013      	ands	r3, r2
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381c:	4b48      	ldr	r3, [pc, #288]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	4a4a      	ldr	r2, [pc, #296]	; (800394c <HAL_RCC_OscConfig+0x338>)
 8003822:	4013      	ands	r3, r2
 8003824:	0019      	movs	r1, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	021a      	lsls	r2, r3, #8
 800382c:	4b44      	ldr	r3, [pc, #272]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	e01b      	b.n	800386c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003834:	4b42      	ldr	r3, [pc, #264]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	4b41      	ldr	r3, [pc, #260]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 800383a:	4949      	ldr	r1, [pc, #292]	; (8003960 <HAL_RCC_OscConfig+0x34c>)
 800383c:	400a      	ands	r2, r1
 800383e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003840:	f7fe f97e 	bl	8001b40 <HAL_GetTick>
 8003844:	0003      	movs	r3, r0
 8003846:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800384a:	f7fe f979 	bl	8001b40 <HAL_GetTick>
 800384e:	0002      	movs	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e1d8      	b.n	8003c0e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800385c:	4b38      	ldr	r3, [pc, #224]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	2380      	movs	r3, #128	; 0x80
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4013      	ands	r3, r2
 8003866:	d1f0      	bne.n	800384a <HAL_RCC_OscConfig+0x236>
 8003868:	e000      	b.n	800386c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800386a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2208      	movs	r2, #8
 8003872:	4013      	ands	r3, r2
 8003874:	d047      	beq.n	8003906 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003876:	4b32      	ldr	r3, [pc, #200]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2238      	movs	r2, #56	; 0x38
 800387c:	4013      	ands	r3, r2
 800387e:	2b18      	cmp	r3, #24
 8003880:	d10a      	bne.n	8003898 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003882:	4b2f      	ldr	r3, [pc, #188]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 8003884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003886:	2202      	movs	r2, #2
 8003888:	4013      	ands	r3, r2
 800388a:	d03c      	beq.n	8003906 <HAL_RCC_OscConfig+0x2f2>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d138      	bne.n	8003906 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e1ba      	b.n	8003c0e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d019      	beq.n	80038d4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80038a0:	4b27      	ldr	r3, [pc, #156]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 80038a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038a4:	4b26      	ldr	r3, [pc, #152]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 80038a6:	2101      	movs	r1, #1
 80038a8:	430a      	orrs	r2, r1
 80038aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ac:	f7fe f948 	bl	8001b40 <HAL_GetTick>
 80038b0:	0003      	movs	r3, r0
 80038b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b6:	f7fe f943 	bl	8001b40 <HAL_GetTick>
 80038ba:	0002      	movs	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e1a2      	b.n	8003c0e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038c8:	4b1d      	ldr	r3, [pc, #116]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 80038ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038cc:	2202      	movs	r2, #2
 80038ce:	4013      	ands	r3, r2
 80038d0:	d0f1      	beq.n	80038b6 <HAL_RCC_OscConfig+0x2a2>
 80038d2:	e018      	b.n	8003906 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80038d4:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 80038d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038d8:	4b19      	ldr	r3, [pc, #100]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 80038da:	2101      	movs	r1, #1
 80038dc:	438a      	bics	r2, r1
 80038de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e0:	f7fe f92e 	bl	8001b40 <HAL_GetTick>
 80038e4:	0003      	movs	r3, r0
 80038e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ea:	f7fe f929 	bl	8001b40 <HAL_GetTick>
 80038ee:	0002      	movs	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e188      	b.n	8003c0e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038fc:	4b10      	ldr	r3, [pc, #64]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 80038fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003900:	2202      	movs	r2, #2
 8003902:	4013      	ands	r3, r2
 8003904:	d1f1      	bne.n	80038ea <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2204      	movs	r2, #4
 800390c:	4013      	ands	r3, r2
 800390e:	d100      	bne.n	8003912 <HAL_RCC_OscConfig+0x2fe>
 8003910:	e0c6      	b.n	8003aa0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003912:	231f      	movs	r3, #31
 8003914:	18fb      	adds	r3, r7, r3
 8003916:	2200      	movs	r2, #0
 8003918:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800391a:	4b09      	ldr	r3, [pc, #36]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2238      	movs	r2, #56	; 0x38
 8003920:	4013      	ands	r3, r2
 8003922:	2b20      	cmp	r3, #32
 8003924:	d11e      	bne.n	8003964 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_RCC_OscConfig+0x32c>)
 8003928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392a:	2202      	movs	r2, #2
 800392c:	4013      	ands	r3, r2
 800392e:	d100      	bne.n	8003932 <HAL_RCC_OscConfig+0x31e>
 8003930:	e0b6      	b.n	8003aa0 <HAL_RCC_OscConfig+0x48c>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d000      	beq.n	800393c <HAL_RCC_OscConfig+0x328>
 800393a:	e0b1      	b.n	8003aa0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e166      	b.n	8003c0e <HAL_RCC_OscConfig+0x5fa>
 8003940:	40021000 	.word	0x40021000
 8003944:	fffeffff 	.word	0xfffeffff
 8003948:	fffbffff 	.word	0xfffbffff
 800394c:	ffff80ff 	.word	0xffff80ff
 8003950:	ffffc7ff 	.word	0xffffc7ff
 8003954:	00f42400 	.word	0x00f42400
 8003958:	20000000 	.word	0x20000000
 800395c:	20000004 	.word	0x20000004
 8003960:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003964:	4bac      	ldr	r3, [pc, #688]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003968:	2380      	movs	r3, #128	; 0x80
 800396a:	055b      	lsls	r3, r3, #21
 800396c:	4013      	ands	r3, r2
 800396e:	d101      	bne.n	8003974 <HAL_RCC_OscConfig+0x360>
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <HAL_RCC_OscConfig+0x362>
 8003974:	2300      	movs	r3, #0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d011      	beq.n	800399e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800397a:	4ba7      	ldr	r3, [pc, #668]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 800397c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800397e:	4ba6      	ldr	r3, [pc, #664]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003980:	2180      	movs	r1, #128	; 0x80
 8003982:	0549      	lsls	r1, r1, #21
 8003984:	430a      	orrs	r2, r1
 8003986:	63da      	str	r2, [r3, #60]	; 0x3c
 8003988:	4ba3      	ldr	r3, [pc, #652]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 800398a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800398c:	2380      	movs	r3, #128	; 0x80
 800398e:	055b      	lsls	r3, r3, #21
 8003990:	4013      	ands	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003996:	231f      	movs	r3, #31
 8003998:	18fb      	adds	r3, r7, r3
 800399a:	2201      	movs	r2, #1
 800399c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800399e:	4b9f      	ldr	r3, [pc, #636]	; (8003c1c <HAL_RCC_OscConfig+0x608>)
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	2380      	movs	r3, #128	; 0x80
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	4013      	ands	r3, r2
 80039a8:	d11a      	bne.n	80039e0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039aa:	4b9c      	ldr	r3, [pc, #624]	; (8003c1c <HAL_RCC_OscConfig+0x608>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	4b9b      	ldr	r3, [pc, #620]	; (8003c1c <HAL_RCC_OscConfig+0x608>)
 80039b0:	2180      	movs	r1, #128	; 0x80
 80039b2:	0049      	lsls	r1, r1, #1
 80039b4:	430a      	orrs	r2, r1
 80039b6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80039b8:	f7fe f8c2 	bl	8001b40 <HAL_GetTick>
 80039bc:	0003      	movs	r3, r0
 80039be:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c2:	f7fe f8bd 	bl	8001b40 <HAL_GetTick>
 80039c6:	0002      	movs	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e11c      	b.n	8003c0e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039d4:	4b91      	ldr	r3, [pc, #580]	; (8003c1c <HAL_RCC_OscConfig+0x608>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	2380      	movs	r3, #128	; 0x80
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	4013      	ands	r3, r2
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d106      	bne.n	80039f6 <HAL_RCC_OscConfig+0x3e2>
 80039e8:	4b8b      	ldr	r3, [pc, #556]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 80039ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039ec:	4b8a      	ldr	r3, [pc, #552]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 80039ee:	2101      	movs	r1, #1
 80039f0:	430a      	orrs	r2, r1
 80039f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80039f4:	e01c      	b.n	8003a30 <HAL_RCC_OscConfig+0x41c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b05      	cmp	r3, #5
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x404>
 80039fe:	4b86      	ldr	r3, [pc, #536]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003a00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a02:	4b85      	ldr	r3, [pc, #532]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003a04:	2104      	movs	r1, #4
 8003a06:	430a      	orrs	r2, r1
 8003a08:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a0a:	4b83      	ldr	r3, [pc, #524]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003a0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a0e:	4b82      	ldr	r3, [pc, #520]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003a10:	2101      	movs	r1, #1
 8003a12:	430a      	orrs	r2, r1
 8003a14:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a16:	e00b      	b.n	8003a30 <HAL_RCC_OscConfig+0x41c>
 8003a18:	4b7f      	ldr	r3, [pc, #508]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003a1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a1c:	4b7e      	ldr	r3, [pc, #504]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003a1e:	2101      	movs	r1, #1
 8003a20:	438a      	bics	r2, r1
 8003a22:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a24:	4b7c      	ldr	r3, [pc, #496]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003a26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a28:	4b7b      	ldr	r3, [pc, #492]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003a2a:	2104      	movs	r1, #4
 8003a2c:	438a      	bics	r2, r1
 8003a2e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d014      	beq.n	8003a62 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fe f882 	bl	8001b40 <HAL_GetTick>
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a40:	e009      	b.n	8003a56 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a42:	f7fe f87d 	bl	8001b40 <HAL_GetTick>
 8003a46:	0002      	movs	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	4a74      	ldr	r2, [pc, #464]	; (8003c20 <HAL_RCC_OscConfig+0x60c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e0db      	b.n	8003c0e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a56:	4b70      	ldr	r3, [pc, #448]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x42e>
 8003a60:	e013      	b.n	8003a8a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a62:	f7fe f86d 	bl	8001b40 <HAL_GetTick>
 8003a66:	0003      	movs	r3, r0
 8003a68:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a6a:	e009      	b.n	8003a80 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6c:	f7fe f868 	bl	8001b40 <HAL_GetTick>
 8003a70:	0002      	movs	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	4a6a      	ldr	r2, [pc, #424]	; (8003c20 <HAL_RCC_OscConfig+0x60c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e0c6      	b.n	8003c0e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a80:	4b65      	ldr	r3, [pc, #404]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a84:	2202      	movs	r2, #2
 8003a86:	4013      	ands	r3, r2
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003a8a:	231f      	movs	r3, #31
 8003a8c:	18fb      	adds	r3, r7, r3
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d105      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003a94:	4b60      	ldr	r3, [pc, #384]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a98:	4b5f      	ldr	r3, [pc, #380]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003a9a:	4962      	ldr	r1, [pc, #392]	; (8003c24 <HAL_RCC_OscConfig+0x610>)
 8003a9c:	400a      	ands	r2, r1
 8003a9e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d100      	bne.n	8003aaa <HAL_RCC_OscConfig+0x496>
 8003aa8:	e0b0      	b.n	8003c0c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aaa:	4b5b      	ldr	r3, [pc, #364]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	2238      	movs	r2, #56	; 0x38
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b10      	cmp	r3, #16
 8003ab4:	d100      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x4a4>
 8003ab6:	e078      	b.n	8003baa <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d153      	bne.n	8003b68 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac0:	4b55      	ldr	r3, [pc, #340]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	4b54      	ldr	r3, [pc, #336]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003ac6:	4958      	ldr	r1, [pc, #352]	; (8003c28 <HAL_RCC_OscConfig+0x614>)
 8003ac8:	400a      	ands	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003acc:	f7fe f838 	bl	8001b40 <HAL_GetTick>
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad6:	f7fe f833 	bl	8001b40 <HAL_GetTick>
 8003ada:	0002      	movs	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e092      	b.n	8003c0e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ae8:	4b4b      	ldr	r3, [pc, #300]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	049b      	lsls	r3, r3, #18
 8003af0:	4013      	ands	r3, r2
 8003af2:	d1f0      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003af4:	4b48      	ldr	r3, [pc, #288]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4a4c      	ldr	r2, [pc, #304]	; (8003c2c <HAL_RCC_OscConfig+0x618>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	0019      	movs	r1, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1a      	ldr	r2, [r3, #32]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0c:	021b      	lsls	r3, r3, #8
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	4b3e      	ldr	r3, [pc, #248]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b22:	4b3d      	ldr	r3, [pc, #244]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4b3c      	ldr	r3, [pc, #240]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003b28:	2180      	movs	r1, #128	; 0x80
 8003b2a:	0449      	lsls	r1, r1, #17
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003b30:	4b39      	ldr	r3, [pc, #228]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	4b38      	ldr	r3, [pc, #224]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003b36:	2180      	movs	r1, #128	; 0x80
 8003b38:	0549      	lsls	r1, r1, #21
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3e:	f7fd ffff 	bl	8001b40 <HAL_GetTick>
 8003b42:	0003      	movs	r3, r0
 8003b44:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fd fffa 	bl	8001b40 <HAL_GetTick>
 8003b4c:	0002      	movs	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e059      	b.n	8003c0e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b5a:	4b2f      	ldr	r3, [pc, #188]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	2380      	movs	r3, #128	; 0x80
 8003b60:	049b      	lsls	r3, r3, #18
 8003b62:	4013      	ands	r3, r2
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0x534>
 8003b66:	e051      	b.n	8003c0c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b68:	4b2b      	ldr	r3, [pc, #172]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4b2a      	ldr	r3, [pc, #168]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003b6e:	492e      	ldr	r1, [pc, #184]	; (8003c28 <HAL_RCC_OscConfig+0x614>)
 8003b70:	400a      	ands	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7fd ffe4 	bl	8001b40 <HAL_GetTick>
 8003b78:	0003      	movs	r3, r0
 8003b7a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7e:	f7fd ffdf 	bl	8001b40 <HAL_GetTick>
 8003b82:	0002      	movs	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e03e      	b.n	8003c0e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b90:	4b21      	ldr	r3, [pc, #132]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	049b      	lsls	r3, r3, #18
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d1f0      	bne.n	8003b7e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003b9c:	4b1e      	ldr	r3, [pc, #120]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003ba2:	4923      	ldr	r1, [pc, #140]	; (8003c30 <HAL_RCC_OscConfig+0x61c>)
 8003ba4:	400a      	ands	r2, r1
 8003ba6:	60da      	str	r2, [r3, #12]
 8003ba8:	e030      	b.n	8003c0c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e02b      	b.n	8003c0e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003bb6:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <HAL_RCC_OscConfig+0x604>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2203      	movs	r2, #3
 8003bc0:	401a      	ands	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d11e      	bne.n	8003c08 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2270      	movs	r2, #112	; 0x70
 8003bce:	401a      	ands	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d117      	bne.n	8003c08 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	23fe      	movs	r3, #254	; 0xfe
 8003bdc:	01db      	lsls	r3, r3, #7
 8003bde:	401a      	ands	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d10e      	bne.n	8003c08 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	23f8      	movs	r3, #248	; 0xf8
 8003bee:	039b      	lsls	r3, r3, #14
 8003bf0:	401a      	ands	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d106      	bne.n	8003c08 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	0f5b      	lsrs	r3, r3, #29
 8003bfe:	075a      	lsls	r2, r3, #29
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d001      	beq.n	8003c0c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	0018      	movs	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	b008      	add	sp, #32
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40007000 	.word	0x40007000
 8003c20:	00001388 	.word	0x00001388
 8003c24:	efffffff 	.word	0xefffffff
 8003c28:	feffffff 	.word	0xfeffffff
 8003c2c:	1fc1808c 	.word	0x1fc1808c
 8003c30:	effefffc 	.word	0xeffefffc

08003c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e0e9      	b.n	8003e1c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c48:	4b76      	ldr	r3, [pc, #472]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2207      	movs	r2, #7
 8003c4e:	4013      	ands	r3, r2
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d91e      	bls.n	8003c94 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c56:	4b73      	ldr	r3, [pc, #460]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2207      	movs	r2, #7
 8003c5c:	4393      	bics	r3, r2
 8003c5e:	0019      	movs	r1, r3
 8003c60:	4b70      	ldr	r3, [pc, #448]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c68:	f7fd ff6a 	bl	8001b40 <HAL_GetTick>
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c70:	e009      	b.n	8003c86 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c72:	f7fd ff65 	bl	8001b40 <HAL_GetTick>
 8003c76:	0002      	movs	r2, r0
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	4a6a      	ldr	r2, [pc, #424]	; (8003e28 <HAL_RCC_ClockConfig+0x1f4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e0ca      	b.n	8003e1c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c86:	4b67      	ldr	r3, [pc, #412]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2207      	movs	r2, #7
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d1ee      	bne.n	8003c72 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2202      	movs	r2, #2
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d015      	beq.n	8003cca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2204      	movs	r2, #4
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d006      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003ca8:	4b60      	ldr	r3, [pc, #384]	; (8003e2c <HAL_RCC_ClockConfig+0x1f8>)
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	4b5f      	ldr	r3, [pc, #380]	; (8003e2c <HAL_RCC_ClockConfig+0x1f8>)
 8003cae:	21e0      	movs	r1, #224	; 0xe0
 8003cb0:	01c9      	lsls	r1, r1, #7
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb6:	4b5d      	ldr	r3, [pc, #372]	; (8003e2c <HAL_RCC_ClockConfig+0x1f8>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	4a5d      	ldr	r2, [pc, #372]	; (8003e30 <HAL_RCC_ClockConfig+0x1fc>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	0019      	movs	r1, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	4b59      	ldr	r3, [pc, #356]	; (8003e2c <HAL_RCC_ClockConfig+0x1f8>)
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	d057      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d107      	bne.n	8003cec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cdc:	4b53      	ldr	r3, [pc, #332]	; (8003e2c <HAL_RCC_ClockConfig+0x1f8>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	2380      	movs	r3, #128	; 0x80
 8003ce2:	029b      	lsls	r3, r3, #10
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d12b      	bne.n	8003d40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e097      	b.n	8003e1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d107      	bne.n	8003d04 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf4:	4b4d      	ldr	r3, [pc, #308]	; (8003e2c <HAL_RCC_ClockConfig+0x1f8>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	2380      	movs	r3, #128	; 0x80
 8003cfa:	049b      	lsls	r3, r3, #18
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d11f      	bne.n	8003d40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e08b      	b.n	8003e1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d107      	bne.n	8003d1c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d0c:	4b47      	ldr	r3, [pc, #284]	; (8003e2c <HAL_RCC_ClockConfig+0x1f8>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4013      	ands	r3, r2
 8003d16:	d113      	bne.n	8003d40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e07f      	b.n	8003e1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d106      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d24:	4b41      	ldr	r3, [pc, #260]	; (8003e2c <HAL_RCC_ClockConfig+0x1f8>)
 8003d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d28:	2202      	movs	r2, #2
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	d108      	bne.n	8003d40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e074      	b.n	8003e1c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d32:	4b3e      	ldr	r3, [pc, #248]	; (8003e2c <HAL_RCC_ClockConfig+0x1f8>)
 8003d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d36:	2202      	movs	r2, #2
 8003d38:	4013      	ands	r3, r2
 8003d3a:	d101      	bne.n	8003d40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e06d      	b.n	8003e1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d40:	4b3a      	ldr	r3, [pc, #232]	; (8003e2c <HAL_RCC_ClockConfig+0x1f8>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	2207      	movs	r2, #7
 8003d46:	4393      	bics	r3, r2
 8003d48:	0019      	movs	r1, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	4b37      	ldr	r3, [pc, #220]	; (8003e2c <HAL_RCC_ClockConfig+0x1f8>)
 8003d50:	430a      	orrs	r2, r1
 8003d52:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d54:	f7fd fef4 	bl	8001b40 <HAL_GetTick>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5c:	e009      	b.n	8003d72 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d5e:	f7fd feef 	bl	8001b40 <HAL_GetTick>
 8003d62:	0002      	movs	r2, r0
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	4a2f      	ldr	r2, [pc, #188]	; (8003e28 <HAL_RCC_ClockConfig+0x1f4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e054      	b.n	8003e1c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d72:	4b2e      	ldr	r3, [pc, #184]	; (8003e2c <HAL_RCC_ClockConfig+0x1f8>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2238      	movs	r2, #56	; 0x38
 8003d78:	401a      	ands	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d1ec      	bne.n	8003d5e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d84:	4b27      	ldr	r3, [pc, #156]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2207      	movs	r2, #7
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d21e      	bcs.n	8003dd0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d92:	4b24      	ldr	r3, [pc, #144]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2207      	movs	r2, #7
 8003d98:	4393      	bics	r3, r2
 8003d9a:	0019      	movs	r1, r3
 8003d9c:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003da4:	f7fd fecc 	bl	8001b40 <HAL_GetTick>
 8003da8:	0003      	movs	r3, r0
 8003daa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003dac:	e009      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dae:	f7fd fec7 	bl	8001b40 <HAL_GetTick>
 8003db2:	0002      	movs	r2, r0
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	4a1b      	ldr	r2, [pc, #108]	; (8003e28 <HAL_RCC_ClockConfig+0x1f4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e02c      	b.n	8003e1c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003dc2:	4b18      	ldr	r3, [pc, #96]	; (8003e24 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2207      	movs	r2, #7
 8003dc8:	4013      	ands	r3, r2
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d1ee      	bne.n	8003dae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d009      	beq.n	8003dee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003dda:	4b14      	ldr	r3, [pc, #80]	; (8003e2c <HAL_RCC_ClockConfig+0x1f8>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	4a15      	ldr	r2, [pc, #84]	; (8003e34 <HAL_RCC_ClockConfig+0x200>)
 8003de0:	4013      	ands	r3, r2
 8003de2:	0019      	movs	r1, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	4b10      	ldr	r3, [pc, #64]	; (8003e2c <HAL_RCC_ClockConfig+0x1f8>)
 8003dea:	430a      	orrs	r2, r1
 8003dec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003dee:	f000 f829 	bl	8003e44 <HAL_RCC_GetSysClockFreq>
 8003df2:	0001      	movs	r1, r0
 8003df4:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <HAL_RCC_ClockConfig+0x1f8>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	0a1b      	lsrs	r3, r3, #8
 8003dfa:	220f      	movs	r2, #15
 8003dfc:	401a      	ands	r2, r3
 8003dfe:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <HAL_RCC_ClockConfig+0x204>)
 8003e00:	0092      	lsls	r2, r2, #2
 8003e02:	58d3      	ldr	r3, [r2, r3]
 8003e04:	221f      	movs	r2, #31
 8003e06:	4013      	ands	r3, r2
 8003e08:	000a      	movs	r2, r1
 8003e0a:	40da      	lsrs	r2, r3
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_RCC_ClockConfig+0x208>)
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e10:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <HAL_RCC_ClockConfig+0x20c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	0018      	movs	r0, r3
 8003e16:	f7fd fe37 	bl	8001a88 <HAL_InitTick>
 8003e1a:	0003      	movs	r3, r0
}
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b004      	add	sp, #16
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40022000 	.word	0x40022000
 8003e28:	00001388 	.word	0x00001388
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	fffff0ff 	.word	0xfffff0ff
 8003e34:	ffff8fff 	.word	0xffff8fff
 8003e38:	08004d58 	.word	0x08004d58
 8003e3c:	20000000 	.word	0x20000000
 8003e40:	20000004 	.word	0x20000004

08003e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e4a:	4b3c      	ldr	r3, [pc, #240]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2238      	movs	r2, #56	; 0x38
 8003e50:	4013      	ands	r3, r2
 8003e52:	d10f      	bne.n	8003e74 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003e54:	4b39      	ldr	r3, [pc, #228]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	0adb      	lsrs	r3, r3, #11
 8003e5a:	2207      	movs	r2, #7
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2201      	movs	r2, #1
 8003e60:	409a      	lsls	r2, r3
 8003e62:	0013      	movs	r3, r2
 8003e64:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003e66:	6839      	ldr	r1, [r7, #0]
 8003e68:	4835      	ldr	r0, [pc, #212]	; (8003f40 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003e6a:	f7fc f949 	bl	8000100 <__udivsi3>
 8003e6e:	0003      	movs	r3, r0
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	e05d      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e74:	4b31      	ldr	r3, [pc, #196]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2238      	movs	r2, #56	; 0x38
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d102      	bne.n	8003e86 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e80:	4b30      	ldr	r3, [pc, #192]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x100>)
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	e054      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e86:	4b2d      	ldr	r3, [pc, #180]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2238      	movs	r2, #56	; 0x38
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b10      	cmp	r3, #16
 8003e90:	d138      	bne.n	8003f04 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003e92:	4b2a      	ldr	r3, [pc, #168]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	2203      	movs	r2, #3
 8003e98:	4013      	ands	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e9c:	4b27      	ldr	r3, [pc, #156]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	091b      	lsrs	r3, r3, #4
 8003ea2:	2207      	movs	r2, #7
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d10d      	bne.n	8003ecc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003eb0:	68b9      	ldr	r1, [r7, #8]
 8003eb2:	4824      	ldr	r0, [pc, #144]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x100>)
 8003eb4:	f7fc f924 	bl	8000100 <__udivsi3>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	0019      	movs	r1, r3
 8003ebc:	4b1f      	ldr	r3, [pc, #124]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	0a1b      	lsrs	r3, r3, #8
 8003ec2:	227f      	movs	r2, #127	; 0x7f
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	434b      	muls	r3, r1
 8003ec8:	617b      	str	r3, [r7, #20]
        break;
 8003eca:	e00d      	b.n	8003ee8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	481c      	ldr	r0, [pc, #112]	; (8003f40 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003ed0:	f7fc f916 	bl	8000100 <__udivsi3>
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	0019      	movs	r1, r3
 8003ed8:	4b18      	ldr	r3, [pc, #96]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	0a1b      	lsrs	r3, r3, #8
 8003ede:	227f      	movs	r2, #127	; 0x7f
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	434b      	muls	r3, r1
 8003ee4:	617b      	str	r3, [r7, #20]
        break;
 8003ee6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003ee8:	4b14      	ldr	r3, [pc, #80]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	0f5b      	lsrs	r3, r3, #29
 8003eee:	2207      	movs	r2, #7
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	6978      	ldr	r0, [r7, #20]
 8003efa:	f7fc f901 	bl	8000100 <__udivsi3>
 8003efe:	0003      	movs	r3, r0
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	e015      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003f04:	4b0d      	ldr	r3, [pc, #52]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2238      	movs	r2, #56	; 0x38
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	d103      	bne.n	8003f18 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003f10:	2380      	movs	r3, #128	; 0x80
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	e00b      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003f18:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2238      	movs	r2, #56	; 0x38
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b18      	cmp	r3, #24
 8003f22:	d103      	bne.n	8003f2c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003f24:	23fa      	movs	r3, #250	; 0xfa
 8003f26:	01db      	lsls	r3, r3, #7
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	e001      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f30:	693b      	ldr	r3, [r7, #16]
}
 8003f32:	0018      	movs	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b006      	add	sp, #24
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	00f42400 	.word	0x00f42400
 8003f44:	007a1200 	.word	0x007a1200

08003f48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f4c:	4b02      	ldr	r3, [pc, #8]	; (8003f58 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
}
 8003f50:	0018      	movs	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	20000000 	.word	0x20000000

08003f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f5c:	b5b0      	push	{r4, r5, r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003f60:	f7ff fff2 	bl	8003f48 <HAL_RCC_GetHCLKFreq>
 8003f64:	0004      	movs	r4, r0
 8003f66:	f7ff fb49 	bl	80035fc <LL_RCC_GetAPB1Prescaler>
 8003f6a:	0003      	movs	r3, r0
 8003f6c:	0b1a      	lsrs	r2, r3, #12
 8003f6e:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f70:	0092      	lsls	r2, r2, #2
 8003f72:	58d3      	ldr	r3, [r2, r3]
 8003f74:	221f      	movs	r2, #31
 8003f76:	4013      	ands	r3, r2
 8003f78:	40dc      	lsrs	r4, r3
 8003f7a:	0023      	movs	r3, r4
}
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bdb0      	pop	{r4, r5, r7, pc}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	08004d98 	.word	0x08004d98

08003f88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003f90:	2313      	movs	r3, #19
 8003f92:	18fb      	adds	r3, r7, r3
 8003f94:	2200      	movs	r2, #0
 8003f96:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f98:	2312      	movs	r3, #18
 8003f9a:	18fb      	adds	r3, r7, r3
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	2380      	movs	r3, #128	; 0x80
 8003fa6:	029b      	lsls	r3, r3, #10
 8003fa8:	4013      	ands	r3, r2
 8003faa:	d100      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003fac:	e0a3      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fae:	2011      	movs	r0, #17
 8003fb0:	183b      	adds	r3, r7, r0
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fb6:	4b7f      	ldr	r3, [pc, #508]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003fb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fba:	2380      	movs	r3, #128	; 0x80
 8003fbc:	055b      	lsls	r3, r3, #21
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d110      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc2:	4b7c      	ldr	r3, [pc, #496]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003fc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fc6:	4b7b      	ldr	r3, [pc, #492]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003fc8:	2180      	movs	r1, #128	; 0x80
 8003fca:	0549      	lsls	r1, r1, #21
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	63da      	str	r2, [r3, #60]	; 0x3c
 8003fd0:	4b78      	ldr	r3, [pc, #480]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003fd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fd4:	2380      	movs	r3, #128	; 0x80
 8003fd6:	055b      	lsls	r3, r3, #21
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fde:	183b      	adds	r3, r7, r0
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fe4:	4b74      	ldr	r3, [pc, #464]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	4b73      	ldr	r3, [pc, #460]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003fea:	2180      	movs	r1, #128	; 0x80
 8003fec:	0049      	lsls	r1, r1, #1
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ff2:	f7fd fda5 	bl	8001b40 <HAL_GetTick>
 8003ff6:	0003      	movs	r3, r0
 8003ff8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ffa:	e00b      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffc:	f7fd fda0 	bl	8001b40 <HAL_GetTick>
 8004000:	0002      	movs	r2, r0
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d904      	bls.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800400a:	2313      	movs	r3, #19
 800400c:	18fb      	adds	r3, r7, r3
 800400e:	2203      	movs	r2, #3
 8004010:	701a      	strb	r2, [r3, #0]
        break;
 8004012:	e005      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004014:	4b68      	ldr	r3, [pc, #416]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	4013      	ands	r3, r2
 800401e:	d0ed      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004020:	2313      	movs	r3, #19
 8004022:	18fb      	adds	r3, r7, r3
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d154      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800402a:	4b62      	ldr	r3, [pc, #392]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800402c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800402e:	23c0      	movs	r3, #192	; 0xc0
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4013      	ands	r3, r2
 8004034:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d019      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	429a      	cmp	r2, r3
 8004044:	d014      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004046:	4b5b      	ldr	r3, [pc, #364]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404a:	4a5c      	ldr	r2, [pc, #368]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800404c:	4013      	ands	r3, r2
 800404e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004050:	4b58      	ldr	r3, [pc, #352]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004052:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004054:	4b57      	ldr	r3, [pc, #348]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004056:	2180      	movs	r1, #128	; 0x80
 8004058:	0249      	lsls	r1, r1, #9
 800405a:	430a      	orrs	r2, r1
 800405c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800405e:	4b55      	ldr	r3, [pc, #340]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004060:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004062:	4b54      	ldr	r3, [pc, #336]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004064:	4956      	ldr	r1, [pc, #344]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8004066:	400a      	ands	r2, r1
 8004068:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800406a:	4b52      	ldr	r3, [pc, #328]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2201      	movs	r2, #1
 8004074:	4013      	ands	r3, r2
 8004076:	d016      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fd fd62 	bl	8001b40 <HAL_GetTick>
 800407c:	0003      	movs	r3, r0
 800407e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004080:	e00c      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004082:	f7fd fd5d 	bl	8001b40 <HAL_GetTick>
 8004086:	0002      	movs	r2, r0
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	4a4d      	ldr	r2, [pc, #308]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d904      	bls.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004092:	2313      	movs	r3, #19
 8004094:	18fb      	adds	r3, r7, r3
 8004096:	2203      	movs	r2, #3
 8004098:	701a      	strb	r2, [r3, #0]
            break;
 800409a:	e004      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800409c:	4b45      	ldr	r3, [pc, #276]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800409e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a0:	2202      	movs	r2, #2
 80040a2:	4013      	ands	r3, r2
 80040a4:	d0ed      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80040a6:	2313      	movs	r3, #19
 80040a8:	18fb      	adds	r3, r7, r3
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10a      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040b0:	4b40      	ldr	r3, [pc, #256]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80040b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b4:	4a41      	ldr	r2, [pc, #260]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	0019      	movs	r1, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695a      	ldr	r2, [r3, #20]
 80040be:	4b3d      	ldr	r3, [pc, #244]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80040c0:	430a      	orrs	r2, r1
 80040c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80040c4:	e00c      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040c6:	2312      	movs	r3, #18
 80040c8:	18fb      	adds	r3, r7, r3
 80040ca:	2213      	movs	r2, #19
 80040cc:	18ba      	adds	r2, r7, r2
 80040ce:	7812      	ldrb	r2, [r2, #0]
 80040d0:	701a      	strb	r2, [r3, #0]
 80040d2:	e005      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d4:	2312      	movs	r3, #18
 80040d6:	18fb      	adds	r3, r7, r3
 80040d8:	2213      	movs	r2, #19
 80040da:	18ba      	adds	r2, r7, r2
 80040dc:	7812      	ldrb	r2, [r2, #0]
 80040de:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040e0:	2311      	movs	r3, #17
 80040e2:	18fb      	adds	r3, r7, r3
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d105      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ea:	4b32      	ldr	r3, [pc, #200]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80040ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040ee:	4b31      	ldr	r3, [pc, #196]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80040f0:	4935      	ldr	r1, [pc, #212]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040f2:	400a      	ands	r2, r1
 80040f4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2201      	movs	r2, #1
 80040fc:	4013      	ands	r3, r2
 80040fe:	d009      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004100:	4b2c      	ldr	r3, [pc, #176]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004104:	2203      	movs	r2, #3
 8004106:	4393      	bics	r3, r2
 8004108:	0019      	movs	r1, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	4b29      	ldr	r3, [pc, #164]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004110:	430a      	orrs	r2, r1
 8004112:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2220      	movs	r2, #32
 800411a:	4013      	ands	r3, r2
 800411c:	d009      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800411e:	4b25      	ldr	r3, [pc, #148]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	4a2a      	ldr	r2, [pc, #168]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004124:	4013      	ands	r3, r2
 8004126:	0019      	movs	r1, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	4b21      	ldr	r3, [pc, #132]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800412e:	430a      	orrs	r2, r1
 8004130:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	2380      	movs	r3, #128	; 0x80
 8004138:	01db      	lsls	r3, r3, #7
 800413a:	4013      	ands	r3, r2
 800413c:	d015      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800413e:	4b1d      	ldr	r3, [pc, #116]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	0899      	lsrs	r1, r3, #2
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	4b1a      	ldr	r3, [pc, #104]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800414c:	430a      	orrs	r2, r1
 800414e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	2380      	movs	r3, #128	; 0x80
 8004156:	05db      	lsls	r3, r3, #23
 8004158:	429a      	cmp	r2, r3
 800415a:	d106      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800415c:	4b15      	ldr	r3, [pc, #84]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	4b14      	ldr	r3, [pc, #80]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004162:	2180      	movs	r1, #128	; 0x80
 8004164:	0249      	lsls	r1, r1, #9
 8004166:	430a      	orrs	r2, r1
 8004168:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	2380      	movs	r3, #128	; 0x80
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	4013      	ands	r3, r2
 8004174:	d016      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004176:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417a:	4a15      	ldr	r2, [pc, #84]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800417c:	4013      	ands	r3, r2
 800417e:	0019      	movs	r1, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004186:	430a      	orrs	r2, r1
 8004188:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	2380      	movs	r3, #128	; 0x80
 8004190:	01db      	lsls	r3, r3, #7
 8004192:	429a      	cmp	r2, r3
 8004194:	d106      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004196:	4b07      	ldr	r3, [pc, #28]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800419c:	2180      	movs	r1, #128	; 0x80
 800419e:	0249      	lsls	r1, r1, #9
 80041a0:	430a      	orrs	r2, r1
 80041a2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80041a4:	2312      	movs	r3, #18
 80041a6:	18fb      	adds	r3, r7, r3
 80041a8:	781b      	ldrb	r3, [r3, #0]
}
 80041aa:	0018      	movs	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	b006      	add	sp, #24
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	40021000 	.word	0x40021000
 80041b8:	40007000 	.word	0x40007000
 80041bc:	fffffcff 	.word	0xfffffcff
 80041c0:	fffeffff 	.word	0xfffeffff
 80041c4:	00001388 	.word	0x00001388
 80041c8:	efffffff 	.word	0xefffffff
 80041cc:	ffffcfff 	.word	0xffffcfff
 80041d0:	ffff3fff 	.word	0xffff3fff

080041d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e046      	b.n	8004274 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2288      	movs	r2, #136	; 0x88
 80041ea:	589b      	ldr	r3, [r3, r2]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d107      	bne.n	8004200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2284      	movs	r2, #132	; 0x84
 80041f4:	2100      	movs	r1, #0
 80041f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	0018      	movs	r0, r3
 80041fc:	f7fd f928 	bl	8001450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2288      	movs	r2, #136	; 0x88
 8004204:	2124      	movs	r1, #36	; 0x24
 8004206:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2101      	movs	r1, #1
 8004214:	438a      	bics	r2, r1
 8004216:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	0018      	movs	r0, r3
 800421c:	f000 f830 	bl	8004280 <UART_SetConfig>
 8004220:	0003      	movs	r3, r0
 8004222:	2b01      	cmp	r3, #1
 8004224:	d101      	bne.n	800422a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e024      	b.n	8004274 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	0018      	movs	r0, r3
 8004236:	f000 f98d 	bl	8004554 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	490d      	ldr	r1, [pc, #52]	; (800427c <HAL_UART_Init+0xa8>)
 8004246:	400a      	ands	r2, r1
 8004248:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	212a      	movs	r1, #42	; 0x2a
 8004256:	438a      	bics	r2, r1
 8004258:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2101      	movs	r1, #1
 8004266:	430a      	orrs	r2, r1
 8004268:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	0018      	movs	r0, r3
 800426e:	f000 fa25 	bl	80046bc <UART_CheckIdleState>
 8004272:	0003      	movs	r3, r0
}
 8004274:	0018      	movs	r0, r3
 8004276:	46bd      	mov	sp, r7
 8004278:	b002      	add	sp, #8
 800427a:	bd80      	pop	{r7, pc}
 800427c:	ffffb7ff 	.word	0xffffb7ff

08004280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004288:	231a      	movs	r3, #26
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	2200      	movs	r2, #0
 800428e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	431a      	orrs	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4aa1      	ldr	r2, [pc, #644]	; (8004534 <UART_SetConfig+0x2b4>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	0019      	movs	r1, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69fa      	ldr	r2, [r7, #28]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	4a9c      	ldr	r2, [pc, #624]	; (8004538 <UART_SetConfig+0x2b8>)
 80042c6:	4013      	ands	r3, r2
 80042c8:	0019      	movs	r1, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	4a93      	ldr	r2, [pc, #588]	; (800453c <UART_SetConfig+0x2bc>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	0019      	movs	r1, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69fa      	ldr	r2, [r7, #28]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004302:	220f      	movs	r2, #15
 8004304:	4393      	bics	r3, r2
 8004306:	0019      	movs	r1, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a89      	ldr	r2, [pc, #548]	; (8004540 <UART_SetConfig+0x2c0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d127      	bne.n	800436e <UART_SetConfig+0xee>
 800431e:	4b89      	ldr	r3, [pc, #548]	; (8004544 <UART_SetConfig+0x2c4>)
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	2203      	movs	r2, #3
 8004324:	4013      	ands	r3, r2
 8004326:	2b03      	cmp	r3, #3
 8004328:	d017      	beq.n	800435a <UART_SetConfig+0xda>
 800432a:	d81b      	bhi.n	8004364 <UART_SetConfig+0xe4>
 800432c:	2b02      	cmp	r3, #2
 800432e:	d00a      	beq.n	8004346 <UART_SetConfig+0xc6>
 8004330:	d818      	bhi.n	8004364 <UART_SetConfig+0xe4>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <UART_SetConfig+0xbc>
 8004336:	2b01      	cmp	r3, #1
 8004338:	d00a      	beq.n	8004350 <UART_SetConfig+0xd0>
 800433a:	e013      	b.n	8004364 <UART_SetConfig+0xe4>
 800433c:	231b      	movs	r3, #27
 800433e:	18fb      	adds	r3, r7, r3
 8004340:	2200      	movs	r2, #0
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	e021      	b.n	800438a <UART_SetConfig+0x10a>
 8004346:	231b      	movs	r3, #27
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	2202      	movs	r2, #2
 800434c:	701a      	strb	r2, [r3, #0]
 800434e:	e01c      	b.n	800438a <UART_SetConfig+0x10a>
 8004350:	231b      	movs	r3, #27
 8004352:	18fb      	adds	r3, r7, r3
 8004354:	2204      	movs	r2, #4
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	e017      	b.n	800438a <UART_SetConfig+0x10a>
 800435a:	231b      	movs	r3, #27
 800435c:	18fb      	adds	r3, r7, r3
 800435e:	2208      	movs	r2, #8
 8004360:	701a      	strb	r2, [r3, #0]
 8004362:	e012      	b.n	800438a <UART_SetConfig+0x10a>
 8004364:	231b      	movs	r3, #27
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	2210      	movs	r2, #16
 800436a:	701a      	strb	r2, [r3, #0]
 800436c:	e00d      	b.n	800438a <UART_SetConfig+0x10a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a75      	ldr	r2, [pc, #468]	; (8004548 <UART_SetConfig+0x2c8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d104      	bne.n	8004382 <UART_SetConfig+0x102>
 8004378:	231b      	movs	r3, #27
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
 8004380:	e003      	b.n	800438a <UART_SetConfig+0x10a>
 8004382:	231b      	movs	r3, #27
 8004384:	18fb      	adds	r3, r7, r3
 8004386:	2210      	movs	r2, #16
 8004388:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69da      	ldr	r2, [r3, #28]
 800438e:	2380      	movs	r3, #128	; 0x80
 8004390:	021b      	lsls	r3, r3, #8
 8004392:	429a      	cmp	r2, r3
 8004394:	d000      	beq.n	8004398 <UART_SetConfig+0x118>
 8004396:	e065      	b.n	8004464 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8004398:	231b      	movs	r3, #27
 800439a:	18fb      	adds	r3, r7, r3
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d015      	beq.n	80043ce <UART_SetConfig+0x14e>
 80043a2:	dc18      	bgt.n	80043d6 <UART_SetConfig+0x156>
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d00d      	beq.n	80043c4 <UART_SetConfig+0x144>
 80043a8:	dc15      	bgt.n	80043d6 <UART_SetConfig+0x156>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <UART_SetConfig+0x134>
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d005      	beq.n	80043be <UART_SetConfig+0x13e>
 80043b2:	e010      	b.n	80043d6 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b4:	f7ff fdd2 	bl	8003f5c <HAL_RCC_GetPCLK1Freq>
 80043b8:	0003      	movs	r3, r0
 80043ba:	617b      	str	r3, [r7, #20]
        break;
 80043bc:	e012      	b.n	80043e4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043be:	4b63      	ldr	r3, [pc, #396]	; (800454c <UART_SetConfig+0x2cc>)
 80043c0:	617b      	str	r3, [r7, #20]
        break;
 80043c2:	e00f      	b.n	80043e4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043c4:	f7ff fd3e 	bl	8003e44 <HAL_RCC_GetSysClockFreq>
 80043c8:	0003      	movs	r3, r0
 80043ca:	617b      	str	r3, [r7, #20]
        break;
 80043cc:	e00a      	b.n	80043e4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ce:	2380      	movs	r3, #128	; 0x80
 80043d0:	021b      	lsls	r3, r3, #8
 80043d2:	617b      	str	r3, [r7, #20]
        break;
 80043d4:	e006      	b.n	80043e4 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043da:	231a      	movs	r3, #26
 80043dc:	18fb      	adds	r3, r7, r3
 80043de:	2201      	movs	r2, #1
 80043e0:	701a      	strb	r2, [r3, #0]
        break;
 80043e2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d100      	bne.n	80043ec <UART_SetConfig+0x16c>
 80043ea:	e08d      	b.n	8004508 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043f0:	4b57      	ldr	r3, [pc, #348]	; (8004550 <UART_SetConfig+0x2d0>)
 80043f2:	0052      	lsls	r2, r2, #1
 80043f4:	5ad3      	ldrh	r3, [r2, r3]
 80043f6:	0019      	movs	r1, r3
 80043f8:	6978      	ldr	r0, [r7, #20]
 80043fa:	f7fb fe81 	bl	8000100 <__udivsi3>
 80043fe:	0003      	movs	r3, r0
 8004400:	005a      	lsls	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	085b      	lsrs	r3, r3, #1
 8004408:	18d2      	adds	r2, r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	0019      	movs	r1, r3
 8004410:	0010      	movs	r0, r2
 8004412:	f7fb fe75 	bl	8000100 <__udivsi3>
 8004416:	0003      	movs	r3, r0
 8004418:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b0f      	cmp	r3, #15
 800441e:	d91c      	bls.n	800445a <UART_SetConfig+0x1da>
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	2380      	movs	r3, #128	; 0x80
 8004424:	025b      	lsls	r3, r3, #9
 8004426:	429a      	cmp	r2, r3
 8004428:	d217      	bcs.n	800445a <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	b29a      	uxth	r2, r3
 800442e:	200e      	movs	r0, #14
 8004430:	183b      	adds	r3, r7, r0
 8004432:	210f      	movs	r1, #15
 8004434:	438a      	bics	r2, r1
 8004436:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	085b      	lsrs	r3, r3, #1
 800443c:	b29b      	uxth	r3, r3
 800443e:	2207      	movs	r2, #7
 8004440:	4013      	ands	r3, r2
 8004442:	b299      	uxth	r1, r3
 8004444:	183b      	adds	r3, r7, r0
 8004446:	183a      	adds	r2, r7, r0
 8004448:	8812      	ldrh	r2, [r2, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	183a      	adds	r2, r7, r0
 8004454:	8812      	ldrh	r2, [r2, #0]
 8004456:	60da      	str	r2, [r3, #12]
 8004458:	e056      	b.n	8004508 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800445a:	231a      	movs	r3, #26
 800445c:	18fb      	adds	r3, r7, r3
 800445e:	2201      	movs	r2, #1
 8004460:	701a      	strb	r2, [r3, #0]
 8004462:	e051      	b.n	8004508 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004464:	231b      	movs	r3, #27
 8004466:	18fb      	adds	r3, r7, r3
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b08      	cmp	r3, #8
 800446c:	d015      	beq.n	800449a <UART_SetConfig+0x21a>
 800446e:	dc18      	bgt.n	80044a2 <UART_SetConfig+0x222>
 8004470:	2b04      	cmp	r3, #4
 8004472:	d00d      	beq.n	8004490 <UART_SetConfig+0x210>
 8004474:	dc15      	bgt.n	80044a2 <UART_SetConfig+0x222>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <UART_SetConfig+0x200>
 800447a:	2b02      	cmp	r3, #2
 800447c:	d005      	beq.n	800448a <UART_SetConfig+0x20a>
 800447e:	e010      	b.n	80044a2 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004480:	f7ff fd6c 	bl	8003f5c <HAL_RCC_GetPCLK1Freq>
 8004484:	0003      	movs	r3, r0
 8004486:	617b      	str	r3, [r7, #20]
        break;
 8004488:	e012      	b.n	80044b0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800448a:	4b30      	ldr	r3, [pc, #192]	; (800454c <UART_SetConfig+0x2cc>)
 800448c:	617b      	str	r3, [r7, #20]
        break;
 800448e:	e00f      	b.n	80044b0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004490:	f7ff fcd8 	bl	8003e44 <HAL_RCC_GetSysClockFreq>
 8004494:	0003      	movs	r3, r0
 8004496:	617b      	str	r3, [r7, #20]
        break;
 8004498:	e00a      	b.n	80044b0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800449a:	2380      	movs	r3, #128	; 0x80
 800449c:	021b      	lsls	r3, r3, #8
 800449e:	617b      	str	r3, [r7, #20]
        break;
 80044a0:	e006      	b.n	80044b0 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044a6:	231a      	movs	r3, #26
 80044a8:	18fb      	adds	r3, r7, r3
 80044aa:	2201      	movs	r2, #1
 80044ac:	701a      	strb	r2, [r3, #0]
        break;
 80044ae:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d028      	beq.n	8004508 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044ba:	4b25      	ldr	r3, [pc, #148]	; (8004550 <UART_SetConfig+0x2d0>)
 80044bc:	0052      	lsls	r2, r2, #1
 80044be:	5ad3      	ldrh	r3, [r2, r3]
 80044c0:	0019      	movs	r1, r3
 80044c2:	6978      	ldr	r0, [r7, #20]
 80044c4:	f7fb fe1c 	bl	8000100 <__udivsi3>
 80044c8:	0003      	movs	r3, r0
 80044ca:	001a      	movs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	085b      	lsrs	r3, r3, #1
 80044d2:	18d2      	adds	r2, r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	0019      	movs	r1, r3
 80044da:	0010      	movs	r0, r2
 80044dc:	f7fb fe10 	bl	8000100 <__udivsi3>
 80044e0:	0003      	movs	r3, r0
 80044e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	2b0f      	cmp	r3, #15
 80044e8:	d90a      	bls.n	8004500 <UART_SetConfig+0x280>
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	2380      	movs	r3, #128	; 0x80
 80044ee:	025b      	lsls	r3, r3, #9
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d205      	bcs.n	8004500 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60da      	str	r2, [r3, #12]
 80044fe:	e003      	b.n	8004508 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004500:	231a      	movs	r3, #26
 8004502:	18fb      	adds	r3, r7, r3
 8004504:	2201      	movs	r2, #1
 8004506:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	226a      	movs	r2, #106	; 0x6a
 800450c:	2101      	movs	r1, #1
 800450e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2268      	movs	r2, #104	; 0x68
 8004514:	2101      	movs	r1, #1
 8004516:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004524:	231a      	movs	r3, #26
 8004526:	18fb      	adds	r3, r7, r3
 8004528:	781b      	ldrb	r3, [r3, #0]
}
 800452a:	0018      	movs	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	b008      	add	sp, #32
 8004530:	bd80      	pop	{r7, pc}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	cfff69f3 	.word	0xcfff69f3
 8004538:	ffffcfff 	.word	0xffffcfff
 800453c:	11fff4ff 	.word	0x11fff4ff
 8004540:	40013800 	.word	0x40013800
 8004544:	40021000 	.word	0x40021000
 8004548:	40004400 	.word	0x40004400
 800454c:	00f42400 	.word	0x00f42400
 8004550:	08004db8 	.word	0x08004db8

08004554 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	2201      	movs	r2, #1
 8004562:	4013      	ands	r3, r2
 8004564:	d00b      	beq.n	800457e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	4a4a      	ldr	r2, [pc, #296]	; (8004698 <UART_AdvFeatureConfig+0x144>)
 800456e:	4013      	ands	r3, r2
 8004570:	0019      	movs	r1, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004582:	2202      	movs	r2, #2
 8004584:	4013      	ands	r3, r2
 8004586:	d00b      	beq.n	80045a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	4a43      	ldr	r2, [pc, #268]	; (800469c <UART_AdvFeatureConfig+0x148>)
 8004590:	4013      	ands	r3, r2
 8004592:	0019      	movs	r1, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a4:	2204      	movs	r2, #4
 80045a6:	4013      	ands	r3, r2
 80045a8:	d00b      	beq.n	80045c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	4a3b      	ldr	r2, [pc, #236]	; (80046a0 <UART_AdvFeatureConfig+0x14c>)
 80045b2:	4013      	ands	r3, r2
 80045b4:	0019      	movs	r1, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c6:	2208      	movs	r2, #8
 80045c8:	4013      	ands	r3, r2
 80045ca:	d00b      	beq.n	80045e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4a34      	ldr	r2, [pc, #208]	; (80046a4 <UART_AdvFeatureConfig+0x150>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	0019      	movs	r1, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e8:	2210      	movs	r2, #16
 80045ea:	4013      	ands	r3, r2
 80045ec:	d00b      	beq.n	8004606 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	4a2c      	ldr	r2, [pc, #176]	; (80046a8 <UART_AdvFeatureConfig+0x154>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	0019      	movs	r1, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	2220      	movs	r2, #32
 800460c:	4013      	ands	r3, r2
 800460e:	d00b      	beq.n	8004628 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	4a25      	ldr	r2, [pc, #148]	; (80046ac <UART_AdvFeatureConfig+0x158>)
 8004618:	4013      	ands	r3, r2
 800461a:	0019      	movs	r1, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462c:	2240      	movs	r2, #64	; 0x40
 800462e:	4013      	ands	r3, r2
 8004630:	d01d      	beq.n	800466e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	4a1d      	ldr	r2, [pc, #116]	; (80046b0 <UART_AdvFeatureConfig+0x15c>)
 800463a:	4013      	ands	r3, r2
 800463c:	0019      	movs	r1, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800464e:	2380      	movs	r3, #128	; 0x80
 8004650:	035b      	lsls	r3, r3, #13
 8004652:	429a      	cmp	r2, r3
 8004654:	d10b      	bne.n	800466e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <UART_AdvFeatureConfig+0x160>)
 800465e:	4013      	ands	r3, r2
 8004660:	0019      	movs	r1, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	2280      	movs	r2, #128	; 0x80
 8004674:	4013      	ands	r3, r2
 8004676:	d00b      	beq.n	8004690 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	4a0e      	ldr	r2, [pc, #56]	; (80046b8 <UART_AdvFeatureConfig+0x164>)
 8004680:	4013      	ands	r3, r2
 8004682:	0019      	movs	r1, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	605a      	str	r2, [r3, #4]
  }
}
 8004690:	46c0      	nop			; (mov r8, r8)
 8004692:	46bd      	mov	sp, r7
 8004694:	b002      	add	sp, #8
 8004696:	bd80      	pop	{r7, pc}
 8004698:	fffdffff 	.word	0xfffdffff
 800469c:	fffeffff 	.word	0xfffeffff
 80046a0:	fffbffff 	.word	0xfffbffff
 80046a4:	ffff7fff 	.word	0xffff7fff
 80046a8:	ffffefff 	.word	0xffffefff
 80046ac:	ffffdfff 	.word	0xffffdfff
 80046b0:	ffefffff 	.word	0xffefffff
 80046b4:	ff9fffff 	.word	0xff9fffff
 80046b8:	fff7ffff 	.word	0xfff7ffff

080046bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2290      	movs	r2, #144	; 0x90
 80046c8:	2100      	movs	r1, #0
 80046ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046cc:	f7fd fa38 	bl	8001b40 <HAL_GetTick>
 80046d0:	0003      	movs	r3, r0
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2208      	movs	r2, #8
 80046dc:	4013      	ands	r3, r2
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d10c      	bne.n	80046fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2280      	movs	r2, #128	; 0x80
 80046e6:	0391      	lsls	r1, r2, #14
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	4a1a      	ldr	r2, [pc, #104]	; (8004754 <UART_CheckIdleState+0x98>)
 80046ec:	9200      	str	r2, [sp, #0]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f000 f832 	bl	8004758 <UART_WaitOnFlagUntilTimeout>
 80046f4:	1e03      	subs	r3, r0, #0
 80046f6:	d001      	beq.n	80046fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e026      	b.n	800474a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2204      	movs	r2, #4
 8004704:	4013      	ands	r3, r2
 8004706:	2b04      	cmp	r3, #4
 8004708:	d10c      	bne.n	8004724 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2280      	movs	r2, #128	; 0x80
 800470e:	03d1      	lsls	r1, r2, #15
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	4a10      	ldr	r2, [pc, #64]	; (8004754 <UART_CheckIdleState+0x98>)
 8004714:	9200      	str	r2, [sp, #0]
 8004716:	2200      	movs	r2, #0
 8004718:	f000 f81e 	bl	8004758 <UART_WaitOnFlagUntilTimeout>
 800471c:	1e03      	subs	r3, r0, #0
 800471e:	d001      	beq.n	8004724 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e012      	b.n	800474a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2288      	movs	r2, #136	; 0x88
 8004728:	2120      	movs	r1, #32
 800472a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	228c      	movs	r2, #140	; 0x8c
 8004730:	2120      	movs	r1, #32
 8004732:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2284      	movs	r2, #132	; 0x84
 8004744:	2100      	movs	r1, #0
 8004746:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	0018      	movs	r0, r3
 800474c:	46bd      	mov	sp, r7
 800474e:	b004      	add	sp, #16
 8004750:	bd80      	pop	{r7, pc}
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	01ffffff 	.word	0x01ffffff

08004758 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b094      	sub	sp, #80	; 0x50
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	603b      	str	r3, [r7, #0]
 8004764:	1dfb      	adds	r3, r7, #7
 8004766:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004768:	e0a7      	b.n	80048ba <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800476a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800476c:	3301      	adds	r3, #1
 800476e:	d100      	bne.n	8004772 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004770:	e0a3      	b.n	80048ba <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004772:	f7fd f9e5 	bl	8001b40 <HAL_GetTick>
 8004776:	0002      	movs	r2, r0
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800477e:	429a      	cmp	r2, r3
 8004780:	d302      	bcc.n	8004788 <UART_WaitOnFlagUntilTimeout+0x30>
 8004782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004784:	2b00      	cmp	r3, #0
 8004786:	d13f      	bne.n	8004808 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004788:	f3ef 8310 	mrs	r3, PRIMASK
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004790:	647b      	str	r3, [r7, #68]	; 0x44
 8004792:	2301      	movs	r3, #1
 8004794:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004798:	f383 8810 	msr	PRIMASK, r3
}
 800479c:	46c0      	nop			; (mov r8, r8)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	494e      	ldr	r1, [pc, #312]	; (80048e4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80047aa:	400a      	ands	r2, r1
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047b0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	f383 8810 	msr	PRIMASK, r3
}
 80047b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ba:	f3ef 8310 	mrs	r3, PRIMASK
 80047be:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80047c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c2:	643b      	str	r3, [r7, #64]	; 0x40
 80047c4:	2301      	movs	r3, #1
 80047c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ca:	f383 8810 	msr	PRIMASK, r3
}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2101      	movs	r1, #1
 80047dc:	438a      	bics	r2, r1
 80047de:	609a      	str	r2, [r3, #8]
 80047e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e6:	f383 8810 	msr	PRIMASK, r3
}
 80047ea:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2288      	movs	r2, #136	; 0x88
 80047f0:	2120      	movs	r1, #32
 80047f2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	228c      	movs	r2, #140	; 0x8c
 80047f8:	2120      	movs	r1, #32
 80047fa:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2284      	movs	r2, #132	; 0x84
 8004800:	2100      	movs	r1, #0
 8004802:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e069      	b.n	80048dc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2204      	movs	r2, #4
 8004810:	4013      	ands	r3, r2
 8004812:	d052      	beq.n	80048ba <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	69da      	ldr	r2, [r3, #28]
 800481a:	2380      	movs	r3, #128	; 0x80
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	401a      	ands	r2, r3
 8004820:	2380      	movs	r3, #128	; 0x80
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	429a      	cmp	r2, r3
 8004826:	d148      	bne.n	80048ba <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2280      	movs	r2, #128	; 0x80
 800482e:	0112      	lsls	r2, r2, #4
 8004830:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004832:	f3ef 8310 	mrs	r3, PRIMASK
 8004836:	613b      	str	r3, [r7, #16]
  return(result);
 8004838:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800483a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800483c:	2301      	movs	r3, #1
 800483e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f383 8810 	msr	PRIMASK, r3
}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4924      	ldr	r1, [pc, #144]	; (80048e4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004854:	400a      	ands	r2, r1
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800485a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	f383 8810 	msr	PRIMASK, r3
}
 8004862:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004864:	f3ef 8310 	mrs	r3, PRIMASK
 8004868:	61fb      	str	r3, [r7, #28]
  return(result);
 800486a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486c:	64bb      	str	r3, [r7, #72]	; 0x48
 800486e:	2301      	movs	r3, #1
 8004870:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	f383 8810 	msr	PRIMASK, r3
}
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2101      	movs	r1, #1
 8004886:	438a      	bics	r2, r1
 8004888:	609a      	str	r2, [r3, #8]
 800488a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	f383 8810 	msr	PRIMASK, r3
}
 8004894:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2288      	movs	r2, #136	; 0x88
 800489a:	2120      	movs	r1, #32
 800489c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	228c      	movs	r2, #140	; 0x8c
 80048a2:	2120      	movs	r1, #32
 80048a4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2290      	movs	r2, #144	; 0x90
 80048aa:	2120      	movs	r1, #32
 80048ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2284      	movs	r2, #132	; 0x84
 80048b2:	2100      	movs	r1, #0
 80048b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e010      	b.n	80048dc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	4013      	ands	r3, r2
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	425a      	negs	r2, r3
 80048ca:	4153      	adcs	r3, r2
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	001a      	movs	r2, r3
 80048d0:	1dfb      	adds	r3, r7, #7
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d100      	bne.n	80048da <UART_WaitOnFlagUntilTimeout+0x182>
 80048d8:	e747      	b.n	800476a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	0018      	movs	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	b014      	add	sp, #80	; 0x50
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	fffffe5f 	.word	0xfffffe5f

080048e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2284      	movs	r2, #132	; 0x84
 80048f4:	5c9b      	ldrb	r3, [r3, r2]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_UARTEx_DisableFifoMode+0x16>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e027      	b.n	800494e <HAL_UARTEx_DisableFifoMode+0x66>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2284      	movs	r2, #132	; 0x84
 8004902:	2101      	movs	r1, #1
 8004904:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2288      	movs	r2, #136	; 0x88
 800490a:	2124      	movs	r1, #36	; 0x24
 800490c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2101      	movs	r1, #1
 8004922:	438a      	bics	r2, r1
 8004924:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4a0b      	ldr	r2, [pc, #44]	; (8004958 <HAL_UARTEx_DisableFifoMode+0x70>)
 800492a:	4013      	ands	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2288      	movs	r2, #136	; 0x88
 8004940:	2120      	movs	r1, #32
 8004942:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2284      	movs	r2, #132	; 0x84
 8004948:	2100      	movs	r1, #0
 800494a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	0018      	movs	r0, r3
 8004950:	46bd      	mov	sp, r7
 8004952:	b004      	add	sp, #16
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	dfffffff 	.word	0xdfffffff

0800495c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2284      	movs	r2, #132	; 0x84
 800496a:	5c9b      	ldrb	r3, [r3, r2]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004970:	2302      	movs	r3, #2
 8004972:	e02e      	b.n	80049d2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2284      	movs	r2, #132	; 0x84
 8004978:	2101      	movs	r1, #1
 800497a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2288      	movs	r2, #136	; 0x88
 8004980:	2124      	movs	r1, #36	; 0x24
 8004982:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2101      	movs	r1, #1
 8004998:	438a      	bics	r2, r1
 800499a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	08d9      	lsrs	r1, r3, #3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	0018      	movs	r0, r3
 80049b4:	f000 f854 	bl	8004a60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2288      	movs	r2, #136	; 0x88
 80049c4:	2120      	movs	r1, #32
 80049c6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2284      	movs	r2, #132	; 0x84
 80049cc:	2100      	movs	r1, #0
 80049ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	0018      	movs	r0, r3
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b004      	add	sp, #16
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2284      	movs	r2, #132	; 0x84
 80049ea:	5c9b      	ldrb	r3, [r3, r2]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d101      	bne.n	80049f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e02f      	b.n	8004a54 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2284      	movs	r2, #132	; 0x84
 80049f8:	2101      	movs	r1, #1
 80049fa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2288      	movs	r2, #136	; 0x88
 8004a00:	2124      	movs	r1, #36	; 0x24
 8004a02:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2101      	movs	r1, #1
 8004a18:	438a      	bics	r2, r1
 8004a1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	4a0e      	ldr	r2, [pc, #56]	; (8004a5c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004a24:	4013      	ands	r3, r2
 8004a26:	0019      	movs	r1, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	0018      	movs	r0, r3
 8004a36:	f000 f813 	bl	8004a60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2288      	movs	r2, #136	; 0x88
 8004a46:	2120      	movs	r1, #32
 8004a48:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2284      	movs	r2, #132	; 0x84
 8004a4e:	2100      	movs	r1, #0
 8004a50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	0018      	movs	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b004      	add	sp, #16
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	f1ffffff 	.word	0xf1ffffff

08004a60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d108      	bne.n	8004a82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	226a      	movs	r2, #106	; 0x6a
 8004a74:	2101      	movs	r1, #1
 8004a76:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2268      	movs	r2, #104	; 0x68
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a80:	e043      	b.n	8004b0a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a82:	260f      	movs	r6, #15
 8004a84:	19bb      	adds	r3, r7, r6
 8004a86:	2208      	movs	r2, #8
 8004a88:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a8a:	200e      	movs	r0, #14
 8004a8c:	183b      	adds	r3, r7, r0
 8004a8e:	2208      	movs	r2, #8
 8004a90:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	0e5b      	lsrs	r3, r3, #25
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	240d      	movs	r4, #13
 8004a9e:	193b      	adds	r3, r7, r4
 8004aa0:	2107      	movs	r1, #7
 8004aa2:	400a      	ands	r2, r1
 8004aa4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	0f5b      	lsrs	r3, r3, #29
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	250c      	movs	r5, #12
 8004ab2:	197b      	adds	r3, r7, r5
 8004ab4:	2107      	movs	r1, #7
 8004ab6:	400a      	ands	r2, r1
 8004ab8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004aba:	183b      	adds	r3, r7, r0
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	197a      	adds	r2, r7, r5
 8004ac0:	7812      	ldrb	r2, [r2, #0]
 8004ac2:	4914      	ldr	r1, [pc, #80]	; (8004b14 <UARTEx_SetNbDataToProcess+0xb4>)
 8004ac4:	5c8a      	ldrb	r2, [r1, r2]
 8004ac6:	435a      	muls	r2, r3
 8004ac8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004aca:	197b      	adds	r3, r7, r5
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	4a12      	ldr	r2, [pc, #72]	; (8004b18 <UARTEx_SetNbDataToProcess+0xb8>)
 8004ad0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ad2:	0019      	movs	r1, r3
 8004ad4:	f7fb fb9e 	bl	8000214 <__divsi3>
 8004ad8:	0003      	movs	r3, r0
 8004ada:	b299      	uxth	r1, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	226a      	movs	r2, #106	; 0x6a
 8004ae0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ae2:	19bb      	adds	r3, r7, r6
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	193a      	adds	r2, r7, r4
 8004ae8:	7812      	ldrb	r2, [r2, #0]
 8004aea:	490a      	ldr	r1, [pc, #40]	; (8004b14 <UARTEx_SetNbDataToProcess+0xb4>)
 8004aec:	5c8a      	ldrb	r2, [r1, r2]
 8004aee:	435a      	muls	r2, r3
 8004af0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004af2:	193b      	adds	r3, r7, r4
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	4a08      	ldr	r2, [pc, #32]	; (8004b18 <UARTEx_SetNbDataToProcess+0xb8>)
 8004af8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004afa:	0019      	movs	r1, r3
 8004afc:	f7fb fb8a 	bl	8000214 <__divsi3>
 8004b00:	0003      	movs	r3, r0
 8004b02:	b299      	uxth	r1, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2268      	movs	r2, #104	; 0x68
 8004b08:	5299      	strh	r1, [r3, r2]
}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b005      	add	sp, #20
 8004b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b12:	46c0      	nop			; (mov r8, r8)
 8004b14:	08004dd0 	.word	0x08004dd0
 8004b18:	08004dd8 	.word	0x08004dd8

08004b1c <__errno>:
 8004b1c:	4b01      	ldr	r3, [pc, #4]	; (8004b24 <__errno+0x8>)
 8004b1e:	6818      	ldr	r0, [r3, #0]
 8004b20:	4770      	bx	lr
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	2000000c 	.word	0x2000000c

08004b28 <__libc_init_array>:
 8004b28:	b570      	push	{r4, r5, r6, lr}
 8004b2a:	2600      	movs	r6, #0
 8004b2c:	4d0c      	ldr	r5, [pc, #48]	; (8004b60 <__libc_init_array+0x38>)
 8004b2e:	4c0d      	ldr	r4, [pc, #52]	; (8004b64 <__libc_init_array+0x3c>)
 8004b30:	1b64      	subs	r4, r4, r5
 8004b32:	10a4      	asrs	r4, r4, #2
 8004b34:	42a6      	cmp	r6, r4
 8004b36:	d109      	bne.n	8004b4c <__libc_init_array+0x24>
 8004b38:	2600      	movs	r6, #0
 8004b3a:	f000 f8e7 	bl	8004d0c <_init>
 8004b3e:	4d0a      	ldr	r5, [pc, #40]	; (8004b68 <__libc_init_array+0x40>)
 8004b40:	4c0a      	ldr	r4, [pc, #40]	; (8004b6c <__libc_init_array+0x44>)
 8004b42:	1b64      	subs	r4, r4, r5
 8004b44:	10a4      	asrs	r4, r4, #2
 8004b46:	42a6      	cmp	r6, r4
 8004b48:	d105      	bne.n	8004b56 <__libc_init_array+0x2e>
 8004b4a:	bd70      	pop	{r4, r5, r6, pc}
 8004b4c:	00b3      	lsls	r3, r6, #2
 8004b4e:	58eb      	ldr	r3, [r5, r3]
 8004b50:	4798      	blx	r3
 8004b52:	3601      	adds	r6, #1
 8004b54:	e7ee      	b.n	8004b34 <__libc_init_array+0xc>
 8004b56:	00b3      	lsls	r3, r6, #2
 8004b58:	58eb      	ldr	r3, [r5, r3]
 8004b5a:	4798      	blx	r3
 8004b5c:	3601      	adds	r6, #1
 8004b5e:	e7f2      	b.n	8004b46 <__libc_init_array+0x1e>
 8004b60:	08004de0 	.word	0x08004de0
 8004b64:	08004de0 	.word	0x08004de0
 8004b68:	08004de0 	.word	0x08004de0
 8004b6c:	08004de4 	.word	0x08004de4

08004b70 <malloc>:
 8004b70:	b510      	push	{r4, lr}
 8004b72:	4b03      	ldr	r3, [pc, #12]	; (8004b80 <malloc+0x10>)
 8004b74:	0001      	movs	r1, r0
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	f000 f82e 	bl	8004bd8 <_malloc_r>
 8004b7c:	bd10      	pop	{r4, pc}
 8004b7e:	46c0      	nop			; (mov r8, r8)
 8004b80:	2000000c 	.word	0x2000000c

08004b84 <memset>:
 8004b84:	0003      	movs	r3, r0
 8004b86:	1882      	adds	r2, r0, r2
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d100      	bne.n	8004b8e <memset+0xa>
 8004b8c:	4770      	bx	lr
 8004b8e:	7019      	strb	r1, [r3, #0]
 8004b90:	3301      	adds	r3, #1
 8004b92:	e7f9      	b.n	8004b88 <memset+0x4>

08004b94 <sbrk_aligned>:
 8004b94:	b570      	push	{r4, r5, r6, lr}
 8004b96:	4e0f      	ldr	r6, [pc, #60]	; (8004bd4 <sbrk_aligned+0x40>)
 8004b98:	000d      	movs	r5, r1
 8004b9a:	6831      	ldr	r1, [r6, #0]
 8004b9c:	0004      	movs	r4, r0
 8004b9e:	2900      	cmp	r1, #0
 8004ba0:	d102      	bne.n	8004ba8 <sbrk_aligned+0x14>
 8004ba2:	f000 f88f 	bl	8004cc4 <_sbrk_r>
 8004ba6:	6030      	str	r0, [r6, #0]
 8004ba8:	0029      	movs	r1, r5
 8004baa:	0020      	movs	r0, r4
 8004bac:	f000 f88a 	bl	8004cc4 <_sbrk_r>
 8004bb0:	1c43      	adds	r3, r0, #1
 8004bb2:	d00a      	beq.n	8004bca <sbrk_aligned+0x36>
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	1cc5      	adds	r5, r0, #3
 8004bb8:	439d      	bics	r5, r3
 8004bba:	42a8      	cmp	r0, r5
 8004bbc:	d007      	beq.n	8004bce <sbrk_aligned+0x3a>
 8004bbe:	1a29      	subs	r1, r5, r0
 8004bc0:	0020      	movs	r0, r4
 8004bc2:	f000 f87f 	bl	8004cc4 <_sbrk_r>
 8004bc6:	1c43      	adds	r3, r0, #1
 8004bc8:	d101      	bne.n	8004bce <sbrk_aligned+0x3a>
 8004bca:	2501      	movs	r5, #1
 8004bcc:	426d      	negs	r5, r5
 8004bce:	0028      	movs	r0, r5
 8004bd0:	bd70      	pop	{r4, r5, r6, pc}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	20000304 	.word	0x20000304

08004bd8 <_malloc_r>:
 8004bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bda:	2203      	movs	r2, #3
 8004bdc:	1ccb      	adds	r3, r1, #3
 8004bde:	4393      	bics	r3, r2
 8004be0:	3308      	adds	r3, #8
 8004be2:	0006      	movs	r6, r0
 8004be4:	001f      	movs	r7, r3
 8004be6:	2b0c      	cmp	r3, #12
 8004be8:	d232      	bcs.n	8004c50 <_malloc_r+0x78>
 8004bea:	270c      	movs	r7, #12
 8004bec:	42b9      	cmp	r1, r7
 8004bee:	d831      	bhi.n	8004c54 <_malloc_r+0x7c>
 8004bf0:	0030      	movs	r0, r6
 8004bf2:	f000 f879 	bl	8004ce8 <__malloc_lock>
 8004bf6:	4d32      	ldr	r5, [pc, #200]	; (8004cc0 <_malloc_r+0xe8>)
 8004bf8:	682b      	ldr	r3, [r5, #0]
 8004bfa:	001c      	movs	r4, r3
 8004bfc:	2c00      	cmp	r4, #0
 8004bfe:	d12e      	bne.n	8004c5e <_malloc_r+0x86>
 8004c00:	0039      	movs	r1, r7
 8004c02:	0030      	movs	r0, r6
 8004c04:	f7ff ffc6 	bl	8004b94 <sbrk_aligned>
 8004c08:	0004      	movs	r4, r0
 8004c0a:	1c43      	adds	r3, r0, #1
 8004c0c:	d11e      	bne.n	8004c4c <_malloc_r+0x74>
 8004c0e:	682c      	ldr	r4, [r5, #0]
 8004c10:	0025      	movs	r5, r4
 8004c12:	2d00      	cmp	r5, #0
 8004c14:	d14a      	bne.n	8004cac <_malloc_r+0xd4>
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	0029      	movs	r1, r5
 8004c1a:	18e3      	adds	r3, r4, r3
 8004c1c:	0030      	movs	r0, r6
 8004c1e:	9301      	str	r3, [sp, #4]
 8004c20:	f000 f850 	bl	8004cc4 <_sbrk_r>
 8004c24:	9b01      	ldr	r3, [sp, #4]
 8004c26:	4283      	cmp	r3, r0
 8004c28:	d143      	bne.n	8004cb2 <_malloc_r+0xda>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	3703      	adds	r7, #3
 8004c2e:	1aff      	subs	r7, r7, r3
 8004c30:	2303      	movs	r3, #3
 8004c32:	439f      	bics	r7, r3
 8004c34:	3708      	adds	r7, #8
 8004c36:	2f0c      	cmp	r7, #12
 8004c38:	d200      	bcs.n	8004c3c <_malloc_r+0x64>
 8004c3a:	270c      	movs	r7, #12
 8004c3c:	0039      	movs	r1, r7
 8004c3e:	0030      	movs	r0, r6
 8004c40:	f7ff ffa8 	bl	8004b94 <sbrk_aligned>
 8004c44:	1c43      	adds	r3, r0, #1
 8004c46:	d034      	beq.n	8004cb2 <_malloc_r+0xda>
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	19df      	adds	r7, r3, r7
 8004c4c:	6027      	str	r7, [r4, #0]
 8004c4e:	e013      	b.n	8004c78 <_malloc_r+0xa0>
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	dacb      	bge.n	8004bec <_malloc_r+0x14>
 8004c54:	230c      	movs	r3, #12
 8004c56:	2500      	movs	r5, #0
 8004c58:	6033      	str	r3, [r6, #0]
 8004c5a:	0028      	movs	r0, r5
 8004c5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c5e:	6822      	ldr	r2, [r4, #0]
 8004c60:	1bd1      	subs	r1, r2, r7
 8004c62:	d420      	bmi.n	8004ca6 <_malloc_r+0xce>
 8004c64:	290b      	cmp	r1, #11
 8004c66:	d917      	bls.n	8004c98 <_malloc_r+0xc0>
 8004c68:	19e2      	adds	r2, r4, r7
 8004c6a:	6027      	str	r7, [r4, #0]
 8004c6c:	42a3      	cmp	r3, r4
 8004c6e:	d111      	bne.n	8004c94 <_malloc_r+0xbc>
 8004c70:	602a      	str	r2, [r5, #0]
 8004c72:	6863      	ldr	r3, [r4, #4]
 8004c74:	6011      	str	r1, [r2, #0]
 8004c76:	6053      	str	r3, [r2, #4]
 8004c78:	0030      	movs	r0, r6
 8004c7a:	0025      	movs	r5, r4
 8004c7c:	f000 f83c 	bl	8004cf8 <__malloc_unlock>
 8004c80:	2207      	movs	r2, #7
 8004c82:	350b      	adds	r5, #11
 8004c84:	1d23      	adds	r3, r4, #4
 8004c86:	4395      	bics	r5, r2
 8004c88:	1aea      	subs	r2, r5, r3
 8004c8a:	429d      	cmp	r5, r3
 8004c8c:	d0e5      	beq.n	8004c5a <_malloc_r+0x82>
 8004c8e:	1b5b      	subs	r3, r3, r5
 8004c90:	50a3      	str	r3, [r4, r2]
 8004c92:	e7e2      	b.n	8004c5a <_malloc_r+0x82>
 8004c94:	605a      	str	r2, [r3, #4]
 8004c96:	e7ec      	b.n	8004c72 <_malloc_r+0x9a>
 8004c98:	6862      	ldr	r2, [r4, #4]
 8004c9a:	42a3      	cmp	r3, r4
 8004c9c:	d101      	bne.n	8004ca2 <_malloc_r+0xca>
 8004c9e:	602a      	str	r2, [r5, #0]
 8004ca0:	e7ea      	b.n	8004c78 <_malloc_r+0xa0>
 8004ca2:	605a      	str	r2, [r3, #4]
 8004ca4:	e7e8      	b.n	8004c78 <_malloc_r+0xa0>
 8004ca6:	0023      	movs	r3, r4
 8004ca8:	6864      	ldr	r4, [r4, #4]
 8004caa:	e7a7      	b.n	8004bfc <_malloc_r+0x24>
 8004cac:	002c      	movs	r4, r5
 8004cae:	686d      	ldr	r5, [r5, #4]
 8004cb0:	e7af      	b.n	8004c12 <_malloc_r+0x3a>
 8004cb2:	230c      	movs	r3, #12
 8004cb4:	0030      	movs	r0, r6
 8004cb6:	6033      	str	r3, [r6, #0]
 8004cb8:	f000 f81e 	bl	8004cf8 <__malloc_unlock>
 8004cbc:	e7cd      	b.n	8004c5a <_malloc_r+0x82>
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	20000300 	.word	0x20000300

08004cc4 <_sbrk_r>:
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	b570      	push	{r4, r5, r6, lr}
 8004cc8:	4d06      	ldr	r5, [pc, #24]	; (8004ce4 <_sbrk_r+0x20>)
 8004cca:	0004      	movs	r4, r0
 8004ccc:	0008      	movs	r0, r1
 8004cce:	602b      	str	r3, [r5, #0]
 8004cd0:	f7fc fc44 	bl	800155c <_sbrk>
 8004cd4:	1c43      	adds	r3, r0, #1
 8004cd6:	d103      	bne.n	8004ce0 <_sbrk_r+0x1c>
 8004cd8:	682b      	ldr	r3, [r5, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d000      	beq.n	8004ce0 <_sbrk_r+0x1c>
 8004cde:	6023      	str	r3, [r4, #0]
 8004ce0:	bd70      	pop	{r4, r5, r6, pc}
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	20000308 	.word	0x20000308

08004ce8 <__malloc_lock>:
 8004ce8:	b510      	push	{r4, lr}
 8004cea:	4802      	ldr	r0, [pc, #8]	; (8004cf4 <__malloc_lock+0xc>)
 8004cec:	f000 f80c 	bl	8004d08 <__retarget_lock_acquire_recursive>
 8004cf0:	bd10      	pop	{r4, pc}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	2000030c 	.word	0x2000030c

08004cf8 <__malloc_unlock>:
 8004cf8:	b510      	push	{r4, lr}
 8004cfa:	4802      	ldr	r0, [pc, #8]	; (8004d04 <__malloc_unlock+0xc>)
 8004cfc:	f000 f805 	bl	8004d0a <__retarget_lock_release_recursive>
 8004d00:	bd10      	pop	{r4, pc}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	2000030c 	.word	0x2000030c

08004d08 <__retarget_lock_acquire_recursive>:
 8004d08:	4770      	bx	lr

08004d0a <__retarget_lock_release_recursive>:
 8004d0a:	4770      	bx	lr

08004d0c <_init>:
 8004d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d12:	bc08      	pop	{r3}
 8004d14:	469e      	mov	lr, r3
 8004d16:	4770      	bx	lr

08004d18 <_fini>:
 8004d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1e:	bc08      	pop	{r3}
 8004d20:	469e      	mov	lr, r3
 8004d22:	4770      	bx	lr


PA_UHF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  0800635c  0800635c  0001635c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065b8  080065b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080065b8  080065b8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065b8  080065b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065b8  080065b8  000165b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065bc  080065bc  000165bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080065c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000070  08006630  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08006630  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b100  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298e  00000000  00000000  0002b198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002db28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002e578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a5b  00000000  00000000  0002ee70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6aa  00000000  00000000  000468cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a633  00000000  00000000  00055f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e05a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000270c  00000000  00000000  000e05f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006344 	.word	0x08006344

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08006344 	.word	0x08006344

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	; 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <__aeabi_f2uiz>:
 8000410:	219e      	movs	r1, #158	; 0x9e
 8000412:	b510      	push	{r4, lr}
 8000414:	05c9      	lsls	r1, r1, #23
 8000416:	1c04      	adds	r4, r0, #0
 8000418:	f000 fe7c 	bl	8001114 <__aeabi_fcmpge>
 800041c:	2800      	cmp	r0, #0
 800041e:	d103      	bne.n	8000428 <__aeabi_f2uiz+0x18>
 8000420:	1c20      	adds	r0, r4, #0
 8000422:	f000 fd97 	bl	8000f54 <__aeabi_f2iz>
 8000426:	bd10      	pop	{r4, pc}
 8000428:	219e      	movs	r1, #158	; 0x9e
 800042a:	1c20      	adds	r0, r4, #0
 800042c:	05c9      	lsls	r1, r1, #23
 800042e:	f000 fbe3 	bl	8000bf8 <__aeabi_fsub>
 8000432:	f000 fd8f 	bl	8000f54 <__aeabi_f2iz>
 8000436:	2380      	movs	r3, #128	; 0x80
 8000438:	061b      	lsls	r3, r3, #24
 800043a:	469c      	mov	ip, r3
 800043c:	4460      	add	r0, ip
 800043e:	e7f2      	b.n	8000426 <__aeabi_f2uiz+0x16>

08000440 <__aeabi_fadd>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	46c6      	mov	lr, r8
 8000444:	0243      	lsls	r3, r0, #9
 8000446:	0a5b      	lsrs	r3, r3, #9
 8000448:	024e      	lsls	r6, r1, #9
 800044a:	0045      	lsls	r5, r0, #1
 800044c:	004f      	lsls	r7, r1, #1
 800044e:	00da      	lsls	r2, r3, #3
 8000450:	0fc4      	lsrs	r4, r0, #31
 8000452:	469c      	mov	ip, r3
 8000454:	0a70      	lsrs	r0, r6, #9
 8000456:	4690      	mov	r8, r2
 8000458:	b500      	push	{lr}
 800045a:	0e2d      	lsrs	r5, r5, #24
 800045c:	0e3f      	lsrs	r7, r7, #24
 800045e:	0fc9      	lsrs	r1, r1, #31
 8000460:	09b6      	lsrs	r6, r6, #6
 8000462:	428c      	cmp	r4, r1
 8000464:	d04b      	beq.n	80004fe <__aeabi_fadd+0xbe>
 8000466:	1bea      	subs	r2, r5, r7
 8000468:	2a00      	cmp	r2, #0
 800046a:	dd36      	ble.n	80004da <__aeabi_fadd+0x9a>
 800046c:	2f00      	cmp	r7, #0
 800046e:	d061      	beq.n	8000534 <__aeabi_fadd+0xf4>
 8000470:	2dff      	cmp	r5, #255	; 0xff
 8000472:	d100      	bne.n	8000476 <__aeabi_fadd+0x36>
 8000474:	e0ad      	b.n	80005d2 <__aeabi_fadd+0x192>
 8000476:	2380      	movs	r3, #128	; 0x80
 8000478:	04db      	lsls	r3, r3, #19
 800047a:	431e      	orrs	r6, r3
 800047c:	2a1b      	cmp	r2, #27
 800047e:	dc00      	bgt.n	8000482 <__aeabi_fadd+0x42>
 8000480:	e0d3      	b.n	800062a <__aeabi_fadd+0x1ea>
 8000482:	2001      	movs	r0, #1
 8000484:	4643      	mov	r3, r8
 8000486:	1a18      	subs	r0, r3, r0
 8000488:	0143      	lsls	r3, r0, #5
 800048a:	d400      	bmi.n	800048e <__aeabi_fadd+0x4e>
 800048c:	e08c      	b.n	80005a8 <__aeabi_fadd+0x168>
 800048e:	0180      	lsls	r0, r0, #6
 8000490:	0987      	lsrs	r7, r0, #6
 8000492:	0038      	movs	r0, r7
 8000494:	f000 fe48 	bl	8001128 <__clzsi2>
 8000498:	3805      	subs	r0, #5
 800049a:	4087      	lsls	r7, r0
 800049c:	4285      	cmp	r5, r0
 800049e:	dc00      	bgt.n	80004a2 <__aeabi_fadd+0x62>
 80004a0:	e0b6      	b.n	8000610 <__aeabi_fadd+0x1d0>
 80004a2:	1a2d      	subs	r5, r5, r0
 80004a4:	48b3      	ldr	r0, [pc, #716]	; (8000774 <__aeabi_fadd+0x334>)
 80004a6:	4038      	ands	r0, r7
 80004a8:	0743      	lsls	r3, r0, #29
 80004aa:	d004      	beq.n	80004b6 <__aeabi_fadd+0x76>
 80004ac:	230f      	movs	r3, #15
 80004ae:	4003      	ands	r3, r0
 80004b0:	2b04      	cmp	r3, #4
 80004b2:	d000      	beq.n	80004b6 <__aeabi_fadd+0x76>
 80004b4:	3004      	adds	r0, #4
 80004b6:	0143      	lsls	r3, r0, #5
 80004b8:	d400      	bmi.n	80004bc <__aeabi_fadd+0x7c>
 80004ba:	e078      	b.n	80005ae <__aeabi_fadd+0x16e>
 80004bc:	1c6a      	adds	r2, r5, #1
 80004be:	2dfe      	cmp	r5, #254	; 0xfe
 80004c0:	d065      	beq.n	800058e <__aeabi_fadd+0x14e>
 80004c2:	0180      	lsls	r0, r0, #6
 80004c4:	0a43      	lsrs	r3, r0, #9
 80004c6:	469c      	mov	ip, r3
 80004c8:	b2d2      	uxtb	r2, r2
 80004ca:	4663      	mov	r3, ip
 80004cc:	05d0      	lsls	r0, r2, #23
 80004ce:	4318      	orrs	r0, r3
 80004d0:	07e4      	lsls	r4, r4, #31
 80004d2:	4320      	orrs	r0, r4
 80004d4:	bc80      	pop	{r7}
 80004d6:	46b8      	mov	r8, r7
 80004d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004da:	2a00      	cmp	r2, #0
 80004dc:	d035      	beq.n	800054a <__aeabi_fadd+0x10a>
 80004de:	1b7a      	subs	r2, r7, r5
 80004e0:	2d00      	cmp	r5, #0
 80004e2:	d000      	beq.n	80004e6 <__aeabi_fadd+0xa6>
 80004e4:	e0af      	b.n	8000646 <__aeabi_fadd+0x206>
 80004e6:	4643      	mov	r3, r8
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d100      	bne.n	80004ee <__aeabi_fadd+0xae>
 80004ec:	e0a7      	b.n	800063e <__aeabi_fadd+0x1fe>
 80004ee:	1e53      	subs	r3, r2, #1
 80004f0:	2a01      	cmp	r2, #1
 80004f2:	d100      	bne.n	80004f6 <__aeabi_fadd+0xb6>
 80004f4:	e12f      	b.n	8000756 <__aeabi_fadd+0x316>
 80004f6:	2aff      	cmp	r2, #255	; 0xff
 80004f8:	d069      	beq.n	80005ce <__aeabi_fadd+0x18e>
 80004fa:	001a      	movs	r2, r3
 80004fc:	e0aa      	b.n	8000654 <__aeabi_fadd+0x214>
 80004fe:	1be9      	subs	r1, r5, r7
 8000500:	2900      	cmp	r1, #0
 8000502:	dd70      	ble.n	80005e6 <__aeabi_fadd+0x1a6>
 8000504:	2f00      	cmp	r7, #0
 8000506:	d037      	beq.n	8000578 <__aeabi_fadd+0x138>
 8000508:	2dff      	cmp	r5, #255	; 0xff
 800050a:	d062      	beq.n	80005d2 <__aeabi_fadd+0x192>
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	04db      	lsls	r3, r3, #19
 8000510:	431e      	orrs	r6, r3
 8000512:	291b      	cmp	r1, #27
 8000514:	dc00      	bgt.n	8000518 <__aeabi_fadd+0xd8>
 8000516:	e0b0      	b.n	800067a <__aeabi_fadd+0x23a>
 8000518:	2001      	movs	r0, #1
 800051a:	4440      	add	r0, r8
 800051c:	0143      	lsls	r3, r0, #5
 800051e:	d543      	bpl.n	80005a8 <__aeabi_fadd+0x168>
 8000520:	3501      	adds	r5, #1
 8000522:	2dff      	cmp	r5, #255	; 0xff
 8000524:	d033      	beq.n	800058e <__aeabi_fadd+0x14e>
 8000526:	2301      	movs	r3, #1
 8000528:	4a93      	ldr	r2, [pc, #588]	; (8000778 <__aeabi_fadd+0x338>)
 800052a:	4003      	ands	r3, r0
 800052c:	0840      	lsrs	r0, r0, #1
 800052e:	4010      	ands	r0, r2
 8000530:	4318      	orrs	r0, r3
 8000532:	e7b9      	b.n	80004a8 <__aeabi_fadd+0x68>
 8000534:	2e00      	cmp	r6, #0
 8000536:	d100      	bne.n	800053a <__aeabi_fadd+0xfa>
 8000538:	e083      	b.n	8000642 <__aeabi_fadd+0x202>
 800053a:	1e51      	subs	r1, r2, #1
 800053c:	2a01      	cmp	r2, #1
 800053e:	d100      	bne.n	8000542 <__aeabi_fadd+0x102>
 8000540:	e0d8      	b.n	80006f4 <__aeabi_fadd+0x2b4>
 8000542:	2aff      	cmp	r2, #255	; 0xff
 8000544:	d045      	beq.n	80005d2 <__aeabi_fadd+0x192>
 8000546:	000a      	movs	r2, r1
 8000548:	e798      	b.n	800047c <__aeabi_fadd+0x3c>
 800054a:	27fe      	movs	r7, #254	; 0xfe
 800054c:	1c6a      	adds	r2, r5, #1
 800054e:	4217      	tst	r7, r2
 8000550:	d000      	beq.n	8000554 <__aeabi_fadd+0x114>
 8000552:	e086      	b.n	8000662 <__aeabi_fadd+0x222>
 8000554:	2d00      	cmp	r5, #0
 8000556:	d000      	beq.n	800055a <__aeabi_fadd+0x11a>
 8000558:	e0b7      	b.n	80006ca <__aeabi_fadd+0x28a>
 800055a:	4643      	mov	r3, r8
 800055c:	2b00      	cmp	r3, #0
 800055e:	d100      	bne.n	8000562 <__aeabi_fadd+0x122>
 8000560:	e0f3      	b.n	800074a <__aeabi_fadd+0x30a>
 8000562:	2200      	movs	r2, #0
 8000564:	2e00      	cmp	r6, #0
 8000566:	d0b0      	beq.n	80004ca <__aeabi_fadd+0x8a>
 8000568:	1b98      	subs	r0, r3, r6
 800056a:	0143      	lsls	r3, r0, #5
 800056c:	d400      	bmi.n	8000570 <__aeabi_fadd+0x130>
 800056e:	e0fa      	b.n	8000766 <__aeabi_fadd+0x326>
 8000570:	4643      	mov	r3, r8
 8000572:	000c      	movs	r4, r1
 8000574:	1af0      	subs	r0, r6, r3
 8000576:	e797      	b.n	80004a8 <__aeabi_fadd+0x68>
 8000578:	2e00      	cmp	r6, #0
 800057a:	d100      	bne.n	800057e <__aeabi_fadd+0x13e>
 800057c:	e0c8      	b.n	8000710 <__aeabi_fadd+0x2d0>
 800057e:	1e4a      	subs	r2, r1, #1
 8000580:	2901      	cmp	r1, #1
 8000582:	d100      	bne.n	8000586 <__aeabi_fadd+0x146>
 8000584:	e0ae      	b.n	80006e4 <__aeabi_fadd+0x2a4>
 8000586:	29ff      	cmp	r1, #255	; 0xff
 8000588:	d023      	beq.n	80005d2 <__aeabi_fadd+0x192>
 800058a:	0011      	movs	r1, r2
 800058c:	e7c1      	b.n	8000512 <__aeabi_fadd+0xd2>
 800058e:	2300      	movs	r3, #0
 8000590:	22ff      	movs	r2, #255	; 0xff
 8000592:	469c      	mov	ip, r3
 8000594:	e799      	b.n	80004ca <__aeabi_fadd+0x8a>
 8000596:	21fe      	movs	r1, #254	; 0xfe
 8000598:	1c6a      	adds	r2, r5, #1
 800059a:	4211      	tst	r1, r2
 800059c:	d077      	beq.n	800068e <__aeabi_fadd+0x24e>
 800059e:	2aff      	cmp	r2, #255	; 0xff
 80005a0:	d0f5      	beq.n	800058e <__aeabi_fadd+0x14e>
 80005a2:	0015      	movs	r5, r2
 80005a4:	4446      	add	r6, r8
 80005a6:	0870      	lsrs	r0, r6, #1
 80005a8:	0743      	lsls	r3, r0, #29
 80005aa:	d000      	beq.n	80005ae <__aeabi_fadd+0x16e>
 80005ac:	e77e      	b.n	80004ac <__aeabi_fadd+0x6c>
 80005ae:	08c3      	lsrs	r3, r0, #3
 80005b0:	2dff      	cmp	r5, #255	; 0xff
 80005b2:	d00e      	beq.n	80005d2 <__aeabi_fadd+0x192>
 80005b4:	025b      	lsls	r3, r3, #9
 80005b6:	0a5b      	lsrs	r3, r3, #9
 80005b8:	469c      	mov	ip, r3
 80005ba:	b2ea      	uxtb	r2, r5
 80005bc:	e785      	b.n	80004ca <__aeabi_fadd+0x8a>
 80005be:	2e00      	cmp	r6, #0
 80005c0:	d007      	beq.n	80005d2 <__aeabi_fadd+0x192>
 80005c2:	2280      	movs	r2, #128	; 0x80
 80005c4:	03d2      	lsls	r2, r2, #15
 80005c6:	4213      	tst	r3, r2
 80005c8:	d003      	beq.n	80005d2 <__aeabi_fadd+0x192>
 80005ca:	4210      	tst	r0, r2
 80005cc:	d101      	bne.n	80005d2 <__aeabi_fadd+0x192>
 80005ce:	000c      	movs	r4, r1
 80005d0:	0003      	movs	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d0db      	beq.n	800058e <__aeabi_fadd+0x14e>
 80005d6:	2080      	movs	r0, #128	; 0x80
 80005d8:	03c0      	lsls	r0, r0, #15
 80005da:	4318      	orrs	r0, r3
 80005dc:	0240      	lsls	r0, r0, #9
 80005de:	0a43      	lsrs	r3, r0, #9
 80005e0:	469c      	mov	ip, r3
 80005e2:	22ff      	movs	r2, #255	; 0xff
 80005e4:	e771      	b.n	80004ca <__aeabi_fadd+0x8a>
 80005e6:	2900      	cmp	r1, #0
 80005e8:	d0d5      	beq.n	8000596 <__aeabi_fadd+0x156>
 80005ea:	1b7a      	subs	r2, r7, r5
 80005ec:	2d00      	cmp	r5, #0
 80005ee:	d160      	bne.n	80006b2 <__aeabi_fadd+0x272>
 80005f0:	4643      	mov	r3, r8
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d024      	beq.n	8000640 <__aeabi_fadd+0x200>
 80005f6:	1e53      	subs	r3, r2, #1
 80005f8:	2a01      	cmp	r2, #1
 80005fa:	d073      	beq.n	80006e4 <__aeabi_fadd+0x2a4>
 80005fc:	2aff      	cmp	r2, #255	; 0xff
 80005fe:	d0e7      	beq.n	80005d0 <__aeabi_fadd+0x190>
 8000600:	001a      	movs	r2, r3
 8000602:	2a1b      	cmp	r2, #27
 8000604:	dc00      	bgt.n	8000608 <__aeabi_fadd+0x1c8>
 8000606:	e085      	b.n	8000714 <__aeabi_fadd+0x2d4>
 8000608:	2001      	movs	r0, #1
 800060a:	003d      	movs	r5, r7
 800060c:	1980      	adds	r0, r0, r6
 800060e:	e785      	b.n	800051c <__aeabi_fadd+0xdc>
 8000610:	2320      	movs	r3, #32
 8000612:	003a      	movs	r2, r7
 8000614:	1b45      	subs	r5, r0, r5
 8000616:	0038      	movs	r0, r7
 8000618:	3501      	adds	r5, #1
 800061a:	40ea      	lsrs	r2, r5
 800061c:	1b5d      	subs	r5, r3, r5
 800061e:	40a8      	lsls	r0, r5
 8000620:	1e43      	subs	r3, r0, #1
 8000622:	4198      	sbcs	r0, r3
 8000624:	2500      	movs	r5, #0
 8000626:	4310      	orrs	r0, r2
 8000628:	e73e      	b.n	80004a8 <__aeabi_fadd+0x68>
 800062a:	2320      	movs	r3, #32
 800062c:	0030      	movs	r0, r6
 800062e:	1a9b      	subs	r3, r3, r2
 8000630:	0031      	movs	r1, r6
 8000632:	4098      	lsls	r0, r3
 8000634:	40d1      	lsrs	r1, r2
 8000636:	1e43      	subs	r3, r0, #1
 8000638:	4198      	sbcs	r0, r3
 800063a:	4308      	orrs	r0, r1
 800063c:	e722      	b.n	8000484 <__aeabi_fadd+0x44>
 800063e:	000c      	movs	r4, r1
 8000640:	0003      	movs	r3, r0
 8000642:	0015      	movs	r5, r2
 8000644:	e7b4      	b.n	80005b0 <__aeabi_fadd+0x170>
 8000646:	2fff      	cmp	r7, #255	; 0xff
 8000648:	d0c1      	beq.n	80005ce <__aeabi_fadd+0x18e>
 800064a:	2380      	movs	r3, #128	; 0x80
 800064c:	4640      	mov	r0, r8
 800064e:	04db      	lsls	r3, r3, #19
 8000650:	4318      	orrs	r0, r3
 8000652:	4680      	mov	r8, r0
 8000654:	2a1b      	cmp	r2, #27
 8000656:	dd51      	ble.n	80006fc <__aeabi_fadd+0x2bc>
 8000658:	2001      	movs	r0, #1
 800065a:	000c      	movs	r4, r1
 800065c:	003d      	movs	r5, r7
 800065e:	1a30      	subs	r0, r6, r0
 8000660:	e712      	b.n	8000488 <__aeabi_fadd+0x48>
 8000662:	4643      	mov	r3, r8
 8000664:	1b9f      	subs	r7, r3, r6
 8000666:	017b      	lsls	r3, r7, #5
 8000668:	d42b      	bmi.n	80006c2 <__aeabi_fadd+0x282>
 800066a:	2f00      	cmp	r7, #0
 800066c:	d000      	beq.n	8000670 <__aeabi_fadd+0x230>
 800066e:	e710      	b.n	8000492 <__aeabi_fadd+0x52>
 8000670:	2300      	movs	r3, #0
 8000672:	2400      	movs	r4, #0
 8000674:	2200      	movs	r2, #0
 8000676:	469c      	mov	ip, r3
 8000678:	e727      	b.n	80004ca <__aeabi_fadd+0x8a>
 800067a:	2320      	movs	r3, #32
 800067c:	0032      	movs	r2, r6
 800067e:	0030      	movs	r0, r6
 8000680:	40ca      	lsrs	r2, r1
 8000682:	1a59      	subs	r1, r3, r1
 8000684:	4088      	lsls	r0, r1
 8000686:	1e43      	subs	r3, r0, #1
 8000688:	4198      	sbcs	r0, r3
 800068a:	4310      	orrs	r0, r2
 800068c:	e745      	b.n	800051a <__aeabi_fadd+0xda>
 800068e:	2d00      	cmp	r5, #0
 8000690:	d14a      	bne.n	8000728 <__aeabi_fadd+0x2e8>
 8000692:	4643      	mov	r3, r8
 8000694:	2b00      	cmp	r3, #0
 8000696:	d063      	beq.n	8000760 <__aeabi_fadd+0x320>
 8000698:	2200      	movs	r2, #0
 800069a:	2e00      	cmp	r6, #0
 800069c:	d100      	bne.n	80006a0 <__aeabi_fadd+0x260>
 800069e:	e714      	b.n	80004ca <__aeabi_fadd+0x8a>
 80006a0:	0030      	movs	r0, r6
 80006a2:	4440      	add	r0, r8
 80006a4:	0143      	lsls	r3, r0, #5
 80006a6:	d400      	bmi.n	80006aa <__aeabi_fadd+0x26a>
 80006a8:	e77e      	b.n	80005a8 <__aeabi_fadd+0x168>
 80006aa:	4b32      	ldr	r3, [pc, #200]	; (8000774 <__aeabi_fadd+0x334>)
 80006ac:	3501      	adds	r5, #1
 80006ae:	4018      	ands	r0, r3
 80006b0:	e77a      	b.n	80005a8 <__aeabi_fadd+0x168>
 80006b2:	2fff      	cmp	r7, #255	; 0xff
 80006b4:	d08c      	beq.n	80005d0 <__aeabi_fadd+0x190>
 80006b6:	2380      	movs	r3, #128	; 0x80
 80006b8:	4641      	mov	r1, r8
 80006ba:	04db      	lsls	r3, r3, #19
 80006bc:	4319      	orrs	r1, r3
 80006be:	4688      	mov	r8, r1
 80006c0:	e79f      	b.n	8000602 <__aeabi_fadd+0x1c2>
 80006c2:	4643      	mov	r3, r8
 80006c4:	000c      	movs	r4, r1
 80006c6:	1af7      	subs	r7, r6, r3
 80006c8:	e6e3      	b.n	8000492 <__aeabi_fadd+0x52>
 80006ca:	4642      	mov	r2, r8
 80006cc:	2a00      	cmp	r2, #0
 80006ce:	d000      	beq.n	80006d2 <__aeabi_fadd+0x292>
 80006d0:	e775      	b.n	80005be <__aeabi_fadd+0x17e>
 80006d2:	2e00      	cmp	r6, #0
 80006d4:	d000      	beq.n	80006d8 <__aeabi_fadd+0x298>
 80006d6:	e77a      	b.n	80005ce <__aeabi_fadd+0x18e>
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	03db      	lsls	r3, r3, #15
 80006dc:	2400      	movs	r4, #0
 80006de:	469c      	mov	ip, r3
 80006e0:	22ff      	movs	r2, #255	; 0xff
 80006e2:	e6f2      	b.n	80004ca <__aeabi_fadd+0x8a>
 80006e4:	0030      	movs	r0, r6
 80006e6:	4440      	add	r0, r8
 80006e8:	2501      	movs	r5, #1
 80006ea:	0143      	lsls	r3, r0, #5
 80006ec:	d400      	bmi.n	80006f0 <__aeabi_fadd+0x2b0>
 80006ee:	e75b      	b.n	80005a8 <__aeabi_fadd+0x168>
 80006f0:	2502      	movs	r5, #2
 80006f2:	e718      	b.n	8000526 <__aeabi_fadd+0xe6>
 80006f4:	4643      	mov	r3, r8
 80006f6:	2501      	movs	r5, #1
 80006f8:	1b98      	subs	r0, r3, r6
 80006fa:	e6c5      	b.n	8000488 <__aeabi_fadd+0x48>
 80006fc:	2320      	movs	r3, #32
 80006fe:	4644      	mov	r4, r8
 8000700:	4640      	mov	r0, r8
 8000702:	40d4      	lsrs	r4, r2
 8000704:	1a9a      	subs	r2, r3, r2
 8000706:	4090      	lsls	r0, r2
 8000708:	1e43      	subs	r3, r0, #1
 800070a:	4198      	sbcs	r0, r3
 800070c:	4320      	orrs	r0, r4
 800070e:	e7a4      	b.n	800065a <__aeabi_fadd+0x21a>
 8000710:	000d      	movs	r5, r1
 8000712:	e74d      	b.n	80005b0 <__aeabi_fadd+0x170>
 8000714:	2320      	movs	r3, #32
 8000716:	4641      	mov	r1, r8
 8000718:	4640      	mov	r0, r8
 800071a:	40d1      	lsrs	r1, r2
 800071c:	1a9a      	subs	r2, r3, r2
 800071e:	4090      	lsls	r0, r2
 8000720:	1e43      	subs	r3, r0, #1
 8000722:	4198      	sbcs	r0, r3
 8000724:	4308      	orrs	r0, r1
 8000726:	e770      	b.n	800060a <__aeabi_fadd+0x1ca>
 8000728:	4642      	mov	r2, r8
 800072a:	2a00      	cmp	r2, #0
 800072c:	d100      	bne.n	8000730 <__aeabi_fadd+0x2f0>
 800072e:	e74f      	b.n	80005d0 <__aeabi_fadd+0x190>
 8000730:	2e00      	cmp	r6, #0
 8000732:	d100      	bne.n	8000736 <__aeabi_fadd+0x2f6>
 8000734:	e74d      	b.n	80005d2 <__aeabi_fadd+0x192>
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	03d2      	lsls	r2, r2, #15
 800073a:	4213      	tst	r3, r2
 800073c:	d100      	bne.n	8000740 <__aeabi_fadd+0x300>
 800073e:	e748      	b.n	80005d2 <__aeabi_fadd+0x192>
 8000740:	4210      	tst	r0, r2
 8000742:	d000      	beq.n	8000746 <__aeabi_fadd+0x306>
 8000744:	e745      	b.n	80005d2 <__aeabi_fadd+0x192>
 8000746:	0003      	movs	r3, r0
 8000748:	e743      	b.n	80005d2 <__aeabi_fadd+0x192>
 800074a:	2e00      	cmp	r6, #0
 800074c:	d090      	beq.n	8000670 <__aeabi_fadd+0x230>
 800074e:	000c      	movs	r4, r1
 8000750:	4684      	mov	ip, r0
 8000752:	2200      	movs	r2, #0
 8000754:	e6b9      	b.n	80004ca <__aeabi_fadd+0x8a>
 8000756:	4643      	mov	r3, r8
 8000758:	000c      	movs	r4, r1
 800075a:	1af0      	subs	r0, r6, r3
 800075c:	3501      	adds	r5, #1
 800075e:	e693      	b.n	8000488 <__aeabi_fadd+0x48>
 8000760:	4684      	mov	ip, r0
 8000762:	2200      	movs	r2, #0
 8000764:	e6b1      	b.n	80004ca <__aeabi_fadd+0x8a>
 8000766:	2800      	cmp	r0, #0
 8000768:	d000      	beq.n	800076c <__aeabi_fadd+0x32c>
 800076a:	e71d      	b.n	80005a8 <__aeabi_fadd+0x168>
 800076c:	2300      	movs	r3, #0
 800076e:	2400      	movs	r4, #0
 8000770:	469c      	mov	ip, r3
 8000772:	e6aa      	b.n	80004ca <__aeabi_fadd+0x8a>
 8000774:	fbffffff 	.word	0xfbffffff
 8000778:	7dffffff 	.word	0x7dffffff

0800077c <__aeabi_fdiv>:
 800077c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800077e:	464f      	mov	r7, r9
 8000780:	4646      	mov	r6, r8
 8000782:	46d6      	mov	lr, sl
 8000784:	0245      	lsls	r5, r0, #9
 8000786:	b5c0      	push	{r6, r7, lr}
 8000788:	0047      	lsls	r7, r0, #1
 800078a:	1c0c      	adds	r4, r1, #0
 800078c:	0a6d      	lsrs	r5, r5, #9
 800078e:	0e3f      	lsrs	r7, r7, #24
 8000790:	0fc6      	lsrs	r6, r0, #31
 8000792:	2f00      	cmp	r7, #0
 8000794:	d100      	bne.n	8000798 <__aeabi_fdiv+0x1c>
 8000796:	e070      	b.n	800087a <__aeabi_fdiv+0xfe>
 8000798:	2fff      	cmp	r7, #255	; 0xff
 800079a:	d100      	bne.n	800079e <__aeabi_fdiv+0x22>
 800079c:	e075      	b.n	800088a <__aeabi_fdiv+0x10e>
 800079e:	00eb      	lsls	r3, r5, #3
 80007a0:	2580      	movs	r5, #128	; 0x80
 80007a2:	04ed      	lsls	r5, r5, #19
 80007a4:	431d      	orrs	r5, r3
 80007a6:	2300      	movs	r3, #0
 80007a8:	4699      	mov	r9, r3
 80007aa:	469a      	mov	sl, r3
 80007ac:	3f7f      	subs	r7, #127	; 0x7f
 80007ae:	0260      	lsls	r0, r4, #9
 80007b0:	0a43      	lsrs	r3, r0, #9
 80007b2:	4698      	mov	r8, r3
 80007b4:	0063      	lsls	r3, r4, #1
 80007b6:	0e1b      	lsrs	r3, r3, #24
 80007b8:	0fe4      	lsrs	r4, r4, #31
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d04e      	beq.n	800085c <__aeabi_fdiv+0xe0>
 80007be:	2bff      	cmp	r3, #255	; 0xff
 80007c0:	d046      	beq.n	8000850 <__aeabi_fdiv+0xd4>
 80007c2:	4642      	mov	r2, r8
 80007c4:	00d0      	lsls	r0, r2, #3
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	04d2      	lsls	r2, r2, #19
 80007ca:	4302      	orrs	r2, r0
 80007cc:	4690      	mov	r8, r2
 80007ce:	2200      	movs	r2, #0
 80007d0:	3b7f      	subs	r3, #127	; 0x7f
 80007d2:	0031      	movs	r1, r6
 80007d4:	1aff      	subs	r7, r7, r3
 80007d6:	464b      	mov	r3, r9
 80007d8:	4061      	eors	r1, r4
 80007da:	b2c9      	uxtb	r1, r1
 80007dc:	4313      	orrs	r3, r2
 80007de:	2b0f      	cmp	r3, #15
 80007e0:	d900      	bls.n	80007e4 <__aeabi_fdiv+0x68>
 80007e2:	e0b5      	b.n	8000950 <__aeabi_fdiv+0x1d4>
 80007e4:	486e      	ldr	r0, [pc, #440]	; (80009a0 <__aeabi_fdiv+0x224>)
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	58c3      	ldr	r3, [r0, r3]
 80007ea:	469f      	mov	pc, r3
 80007ec:	2300      	movs	r3, #0
 80007ee:	4698      	mov	r8, r3
 80007f0:	0026      	movs	r6, r4
 80007f2:	4645      	mov	r5, r8
 80007f4:	4692      	mov	sl, r2
 80007f6:	4653      	mov	r3, sl
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	d100      	bne.n	80007fe <__aeabi_fdiv+0x82>
 80007fc:	e089      	b.n	8000912 <__aeabi_fdiv+0x196>
 80007fe:	2b03      	cmp	r3, #3
 8000800:	d100      	bne.n	8000804 <__aeabi_fdiv+0x88>
 8000802:	e09e      	b.n	8000942 <__aeabi_fdiv+0x1c6>
 8000804:	2b01      	cmp	r3, #1
 8000806:	d018      	beq.n	800083a <__aeabi_fdiv+0xbe>
 8000808:	003b      	movs	r3, r7
 800080a:	337f      	adds	r3, #127	; 0x7f
 800080c:	2b00      	cmp	r3, #0
 800080e:	dd69      	ble.n	80008e4 <__aeabi_fdiv+0x168>
 8000810:	076a      	lsls	r2, r5, #29
 8000812:	d004      	beq.n	800081e <__aeabi_fdiv+0xa2>
 8000814:	220f      	movs	r2, #15
 8000816:	402a      	ands	r2, r5
 8000818:	2a04      	cmp	r2, #4
 800081a:	d000      	beq.n	800081e <__aeabi_fdiv+0xa2>
 800081c:	3504      	adds	r5, #4
 800081e:	012a      	lsls	r2, r5, #4
 8000820:	d503      	bpl.n	800082a <__aeabi_fdiv+0xae>
 8000822:	4b60      	ldr	r3, [pc, #384]	; (80009a4 <__aeabi_fdiv+0x228>)
 8000824:	401d      	ands	r5, r3
 8000826:	003b      	movs	r3, r7
 8000828:	3380      	adds	r3, #128	; 0x80
 800082a:	2bfe      	cmp	r3, #254	; 0xfe
 800082c:	dd00      	ble.n	8000830 <__aeabi_fdiv+0xb4>
 800082e:	e070      	b.n	8000912 <__aeabi_fdiv+0x196>
 8000830:	01ad      	lsls	r5, r5, #6
 8000832:	0a6d      	lsrs	r5, r5, #9
 8000834:	b2d8      	uxtb	r0, r3
 8000836:	e002      	b.n	800083e <__aeabi_fdiv+0xc2>
 8000838:	000e      	movs	r6, r1
 800083a:	2000      	movs	r0, #0
 800083c:	2500      	movs	r5, #0
 800083e:	05c0      	lsls	r0, r0, #23
 8000840:	4328      	orrs	r0, r5
 8000842:	07f6      	lsls	r6, r6, #31
 8000844:	4330      	orrs	r0, r6
 8000846:	bce0      	pop	{r5, r6, r7}
 8000848:	46ba      	mov	sl, r7
 800084a:	46b1      	mov	r9, r6
 800084c:	46a8      	mov	r8, r5
 800084e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000850:	4643      	mov	r3, r8
 8000852:	2b00      	cmp	r3, #0
 8000854:	d13f      	bne.n	80008d6 <__aeabi_fdiv+0x15a>
 8000856:	2202      	movs	r2, #2
 8000858:	3fff      	subs	r7, #255	; 0xff
 800085a:	e003      	b.n	8000864 <__aeabi_fdiv+0xe8>
 800085c:	4643      	mov	r3, r8
 800085e:	2b00      	cmp	r3, #0
 8000860:	d12d      	bne.n	80008be <__aeabi_fdiv+0x142>
 8000862:	2201      	movs	r2, #1
 8000864:	0031      	movs	r1, r6
 8000866:	464b      	mov	r3, r9
 8000868:	4061      	eors	r1, r4
 800086a:	b2c9      	uxtb	r1, r1
 800086c:	4313      	orrs	r3, r2
 800086e:	2b0f      	cmp	r3, #15
 8000870:	d834      	bhi.n	80008dc <__aeabi_fdiv+0x160>
 8000872:	484d      	ldr	r0, [pc, #308]	; (80009a8 <__aeabi_fdiv+0x22c>)
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	58c3      	ldr	r3, [r0, r3]
 8000878:	469f      	mov	pc, r3
 800087a:	2d00      	cmp	r5, #0
 800087c:	d113      	bne.n	80008a6 <__aeabi_fdiv+0x12a>
 800087e:	2304      	movs	r3, #4
 8000880:	4699      	mov	r9, r3
 8000882:	3b03      	subs	r3, #3
 8000884:	2700      	movs	r7, #0
 8000886:	469a      	mov	sl, r3
 8000888:	e791      	b.n	80007ae <__aeabi_fdiv+0x32>
 800088a:	2d00      	cmp	r5, #0
 800088c:	d105      	bne.n	800089a <__aeabi_fdiv+0x11e>
 800088e:	2308      	movs	r3, #8
 8000890:	4699      	mov	r9, r3
 8000892:	3b06      	subs	r3, #6
 8000894:	27ff      	movs	r7, #255	; 0xff
 8000896:	469a      	mov	sl, r3
 8000898:	e789      	b.n	80007ae <__aeabi_fdiv+0x32>
 800089a:	230c      	movs	r3, #12
 800089c:	4699      	mov	r9, r3
 800089e:	3b09      	subs	r3, #9
 80008a0:	27ff      	movs	r7, #255	; 0xff
 80008a2:	469a      	mov	sl, r3
 80008a4:	e783      	b.n	80007ae <__aeabi_fdiv+0x32>
 80008a6:	0028      	movs	r0, r5
 80008a8:	f000 fc3e 	bl	8001128 <__clzsi2>
 80008ac:	2776      	movs	r7, #118	; 0x76
 80008ae:	1f43      	subs	r3, r0, #5
 80008b0:	409d      	lsls	r5, r3
 80008b2:	2300      	movs	r3, #0
 80008b4:	427f      	negs	r7, r7
 80008b6:	4699      	mov	r9, r3
 80008b8:	469a      	mov	sl, r3
 80008ba:	1a3f      	subs	r7, r7, r0
 80008bc:	e777      	b.n	80007ae <__aeabi_fdiv+0x32>
 80008be:	4640      	mov	r0, r8
 80008c0:	f000 fc32 	bl	8001128 <__clzsi2>
 80008c4:	4642      	mov	r2, r8
 80008c6:	1f43      	subs	r3, r0, #5
 80008c8:	409a      	lsls	r2, r3
 80008ca:	2376      	movs	r3, #118	; 0x76
 80008cc:	425b      	negs	r3, r3
 80008ce:	4690      	mov	r8, r2
 80008d0:	1a1b      	subs	r3, r3, r0
 80008d2:	2200      	movs	r2, #0
 80008d4:	e77d      	b.n	80007d2 <__aeabi_fdiv+0x56>
 80008d6:	23ff      	movs	r3, #255	; 0xff
 80008d8:	2203      	movs	r2, #3
 80008da:	e77a      	b.n	80007d2 <__aeabi_fdiv+0x56>
 80008dc:	000e      	movs	r6, r1
 80008de:	20ff      	movs	r0, #255	; 0xff
 80008e0:	2500      	movs	r5, #0
 80008e2:	e7ac      	b.n	800083e <__aeabi_fdiv+0xc2>
 80008e4:	2001      	movs	r0, #1
 80008e6:	1ac0      	subs	r0, r0, r3
 80008e8:	281b      	cmp	r0, #27
 80008ea:	dca6      	bgt.n	800083a <__aeabi_fdiv+0xbe>
 80008ec:	379e      	adds	r7, #158	; 0x9e
 80008ee:	002a      	movs	r2, r5
 80008f0:	40bd      	lsls	r5, r7
 80008f2:	40c2      	lsrs	r2, r0
 80008f4:	1e6b      	subs	r3, r5, #1
 80008f6:	419d      	sbcs	r5, r3
 80008f8:	4315      	orrs	r5, r2
 80008fa:	076b      	lsls	r3, r5, #29
 80008fc:	d004      	beq.n	8000908 <__aeabi_fdiv+0x18c>
 80008fe:	230f      	movs	r3, #15
 8000900:	402b      	ands	r3, r5
 8000902:	2b04      	cmp	r3, #4
 8000904:	d000      	beq.n	8000908 <__aeabi_fdiv+0x18c>
 8000906:	3504      	adds	r5, #4
 8000908:	016b      	lsls	r3, r5, #5
 800090a:	d544      	bpl.n	8000996 <__aeabi_fdiv+0x21a>
 800090c:	2001      	movs	r0, #1
 800090e:	2500      	movs	r5, #0
 8000910:	e795      	b.n	800083e <__aeabi_fdiv+0xc2>
 8000912:	20ff      	movs	r0, #255	; 0xff
 8000914:	2500      	movs	r5, #0
 8000916:	e792      	b.n	800083e <__aeabi_fdiv+0xc2>
 8000918:	2580      	movs	r5, #128	; 0x80
 800091a:	2600      	movs	r6, #0
 800091c:	20ff      	movs	r0, #255	; 0xff
 800091e:	03ed      	lsls	r5, r5, #15
 8000920:	e78d      	b.n	800083e <__aeabi_fdiv+0xc2>
 8000922:	2300      	movs	r3, #0
 8000924:	4698      	mov	r8, r3
 8000926:	2080      	movs	r0, #128	; 0x80
 8000928:	03c0      	lsls	r0, r0, #15
 800092a:	4205      	tst	r5, r0
 800092c:	d009      	beq.n	8000942 <__aeabi_fdiv+0x1c6>
 800092e:	4643      	mov	r3, r8
 8000930:	4203      	tst	r3, r0
 8000932:	d106      	bne.n	8000942 <__aeabi_fdiv+0x1c6>
 8000934:	4645      	mov	r5, r8
 8000936:	4305      	orrs	r5, r0
 8000938:	026d      	lsls	r5, r5, #9
 800093a:	0026      	movs	r6, r4
 800093c:	20ff      	movs	r0, #255	; 0xff
 800093e:	0a6d      	lsrs	r5, r5, #9
 8000940:	e77d      	b.n	800083e <__aeabi_fdiv+0xc2>
 8000942:	2080      	movs	r0, #128	; 0x80
 8000944:	03c0      	lsls	r0, r0, #15
 8000946:	4305      	orrs	r5, r0
 8000948:	026d      	lsls	r5, r5, #9
 800094a:	20ff      	movs	r0, #255	; 0xff
 800094c:	0a6d      	lsrs	r5, r5, #9
 800094e:	e776      	b.n	800083e <__aeabi_fdiv+0xc2>
 8000950:	4642      	mov	r2, r8
 8000952:	016b      	lsls	r3, r5, #5
 8000954:	0150      	lsls	r0, r2, #5
 8000956:	4283      	cmp	r3, r0
 8000958:	d219      	bcs.n	800098e <__aeabi_fdiv+0x212>
 800095a:	221b      	movs	r2, #27
 800095c:	2500      	movs	r5, #0
 800095e:	3f01      	subs	r7, #1
 8000960:	2601      	movs	r6, #1
 8000962:	001c      	movs	r4, r3
 8000964:	006d      	lsls	r5, r5, #1
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	2c00      	cmp	r4, #0
 800096a:	db01      	blt.n	8000970 <__aeabi_fdiv+0x1f4>
 800096c:	4298      	cmp	r0, r3
 800096e:	d801      	bhi.n	8000974 <__aeabi_fdiv+0x1f8>
 8000970:	1a1b      	subs	r3, r3, r0
 8000972:	4335      	orrs	r5, r6
 8000974:	3a01      	subs	r2, #1
 8000976:	2a00      	cmp	r2, #0
 8000978:	d1f3      	bne.n	8000962 <__aeabi_fdiv+0x1e6>
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	4193      	sbcs	r3, r2
 800097e:	431d      	orrs	r5, r3
 8000980:	003b      	movs	r3, r7
 8000982:	337f      	adds	r3, #127	; 0x7f
 8000984:	000e      	movs	r6, r1
 8000986:	2b00      	cmp	r3, #0
 8000988:	dd00      	ble.n	800098c <__aeabi_fdiv+0x210>
 800098a:	e741      	b.n	8000810 <__aeabi_fdiv+0x94>
 800098c:	e7aa      	b.n	80008e4 <__aeabi_fdiv+0x168>
 800098e:	221a      	movs	r2, #26
 8000990:	2501      	movs	r5, #1
 8000992:	1a1b      	subs	r3, r3, r0
 8000994:	e7e4      	b.n	8000960 <__aeabi_fdiv+0x1e4>
 8000996:	01ad      	lsls	r5, r5, #6
 8000998:	2000      	movs	r0, #0
 800099a:	0a6d      	lsrs	r5, r5, #9
 800099c:	e74f      	b.n	800083e <__aeabi_fdiv+0xc2>
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	0800642c 	.word	0x0800642c
 80009a4:	f7ffffff 	.word	0xf7ffffff
 80009a8:	0800646c 	.word	0x0800646c

080009ac <__aeabi_fmul>:
 80009ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ae:	464f      	mov	r7, r9
 80009b0:	4646      	mov	r6, r8
 80009b2:	46d6      	mov	lr, sl
 80009b4:	0244      	lsls	r4, r0, #9
 80009b6:	0045      	lsls	r5, r0, #1
 80009b8:	b5c0      	push	{r6, r7, lr}
 80009ba:	0a64      	lsrs	r4, r4, #9
 80009bc:	1c0f      	adds	r7, r1, #0
 80009be:	0e2d      	lsrs	r5, r5, #24
 80009c0:	0fc6      	lsrs	r6, r0, #31
 80009c2:	2d00      	cmp	r5, #0
 80009c4:	d100      	bne.n	80009c8 <__aeabi_fmul+0x1c>
 80009c6:	e08d      	b.n	8000ae4 <__aeabi_fmul+0x138>
 80009c8:	2dff      	cmp	r5, #255	; 0xff
 80009ca:	d100      	bne.n	80009ce <__aeabi_fmul+0x22>
 80009cc:	e092      	b.n	8000af4 <__aeabi_fmul+0x148>
 80009ce:	2300      	movs	r3, #0
 80009d0:	2080      	movs	r0, #128	; 0x80
 80009d2:	4699      	mov	r9, r3
 80009d4:	469a      	mov	sl, r3
 80009d6:	00e4      	lsls	r4, r4, #3
 80009d8:	04c0      	lsls	r0, r0, #19
 80009da:	4304      	orrs	r4, r0
 80009dc:	3d7f      	subs	r5, #127	; 0x7f
 80009de:	0278      	lsls	r0, r7, #9
 80009e0:	0a43      	lsrs	r3, r0, #9
 80009e2:	4698      	mov	r8, r3
 80009e4:	007b      	lsls	r3, r7, #1
 80009e6:	0e1b      	lsrs	r3, r3, #24
 80009e8:	0fff      	lsrs	r7, r7, #31
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d100      	bne.n	80009f0 <__aeabi_fmul+0x44>
 80009ee:	e070      	b.n	8000ad2 <__aeabi_fmul+0x126>
 80009f0:	2bff      	cmp	r3, #255	; 0xff
 80009f2:	d100      	bne.n	80009f6 <__aeabi_fmul+0x4a>
 80009f4:	e086      	b.n	8000b04 <__aeabi_fmul+0x158>
 80009f6:	4642      	mov	r2, r8
 80009f8:	00d0      	lsls	r0, r2, #3
 80009fa:	2280      	movs	r2, #128	; 0x80
 80009fc:	3b7f      	subs	r3, #127	; 0x7f
 80009fe:	18ed      	adds	r5, r5, r3
 8000a00:	2300      	movs	r3, #0
 8000a02:	04d2      	lsls	r2, r2, #19
 8000a04:	4302      	orrs	r2, r0
 8000a06:	4690      	mov	r8, r2
 8000a08:	469c      	mov	ip, r3
 8000a0a:	0031      	movs	r1, r6
 8000a0c:	464b      	mov	r3, r9
 8000a0e:	4079      	eors	r1, r7
 8000a10:	1c68      	adds	r0, r5, #1
 8000a12:	2b0f      	cmp	r3, #15
 8000a14:	d81c      	bhi.n	8000a50 <__aeabi_fmul+0xa4>
 8000a16:	4a76      	ldr	r2, [pc, #472]	; (8000bf0 <__aeabi_fmul+0x244>)
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	58d3      	ldr	r3, [r2, r3]
 8000a1c:	469f      	mov	pc, r3
 8000a1e:	0039      	movs	r1, r7
 8000a20:	4644      	mov	r4, r8
 8000a22:	46e2      	mov	sl, ip
 8000a24:	4653      	mov	r3, sl
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d00f      	beq.n	8000a4a <__aeabi_fmul+0x9e>
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fmul+0x84>
 8000a2e:	e0d7      	b.n	8000be0 <__aeabi_fmul+0x234>
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d137      	bne.n	8000aa4 <__aeabi_fmul+0xf8>
 8000a34:	2000      	movs	r0, #0
 8000a36:	2400      	movs	r4, #0
 8000a38:	05c0      	lsls	r0, r0, #23
 8000a3a:	4320      	orrs	r0, r4
 8000a3c:	07c9      	lsls	r1, r1, #31
 8000a3e:	4308      	orrs	r0, r1
 8000a40:	bce0      	pop	{r5, r6, r7}
 8000a42:	46ba      	mov	sl, r7
 8000a44:	46b1      	mov	r9, r6
 8000a46:	46a8      	mov	r8, r5
 8000a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a4a:	20ff      	movs	r0, #255	; 0xff
 8000a4c:	2400      	movs	r4, #0
 8000a4e:	e7f3      	b.n	8000a38 <__aeabi_fmul+0x8c>
 8000a50:	0c26      	lsrs	r6, r4, #16
 8000a52:	0424      	lsls	r4, r4, #16
 8000a54:	0c22      	lsrs	r2, r4, #16
 8000a56:	4644      	mov	r4, r8
 8000a58:	0424      	lsls	r4, r4, #16
 8000a5a:	0c24      	lsrs	r4, r4, #16
 8000a5c:	4643      	mov	r3, r8
 8000a5e:	0027      	movs	r7, r4
 8000a60:	0c1b      	lsrs	r3, r3, #16
 8000a62:	4357      	muls	r7, r2
 8000a64:	4374      	muls	r4, r6
 8000a66:	435a      	muls	r2, r3
 8000a68:	435e      	muls	r6, r3
 8000a6a:	1912      	adds	r2, r2, r4
 8000a6c:	0c3b      	lsrs	r3, r7, #16
 8000a6e:	189b      	adds	r3, r3, r2
 8000a70:	429c      	cmp	r4, r3
 8000a72:	d903      	bls.n	8000a7c <__aeabi_fmul+0xd0>
 8000a74:	2280      	movs	r2, #128	; 0x80
 8000a76:	0252      	lsls	r2, r2, #9
 8000a78:	4694      	mov	ip, r2
 8000a7a:	4466      	add	r6, ip
 8000a7c:	043f      	lsls	r7, r7, #16
 8000a7e:	041a      	lsls	r2, r3, #16
 8000a80:	0c3f      	lsrs	r7, r7, #16
 8000a82:	19d2      	adds	r2, r2, r7
 8000a84:	0194      	lsls	r4, r2, #6
 8000a86:	1e67      	subs	r7, r4, #1
 8000a88:	41bc      	sbcs	r4, r7
 8000a8a:	0c1b      	lsrs	r3, r3, #16
 8000a8c:	0e92      	lsrs	r2, r2, #26
 8000a8e:	199b      	adds	r3, r3, r6
 8000a90:	4314      	orrs	r4, r2
 8000a92:	019b      	lsls	r3, r3, #6
 8000a94:	431c      	orrs	r4, r3
 8000a96:	011b      	lsls	r3, r3, #4
 8000a98:	d400      	bmi.n	8000a9c <__aeabi_fmul+0xf0>
 8000a9a:	e09b      	b.n	8000bd4 <__aeabi_fmul+0x228>
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	0862      	lsrs	r2, r4, #1
 8000aa0:	401c      	ands	r4, r3
 8000aa2:	4314      	orrs	r4, r2
 8000aa4:	0002      	movs	r2, r0
 8000aa6:	327f      	adds	r2, #127	; 0x7f
 8000aa8:	2a00      	cmp	r2, #0
 8000aaa:	dd64      	ble.n	8000b76 <__aeabi_fmul+0x1ca>
 8000aac:	0763      	lsls	r3, r4, #29
 8000aae:	d004      	beq.n	8000aba <__aeabi_fmul+0x10e>
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	4023      	ands	r3, r4
 8000ab4:	2b04      	cmp	r3, #4
 8000ab6:	d000      	beq.n	8000aba <__aeabi_fmul+0x10e>
 8000ab8:	3404      	adds	r4, #4
 8000aba:	0123      	lsls	r3, r4, #4
 8000abc:	d503      	bpl.n	8000ac6 <__aeabi_fmul+0x11a>
 8000abe:	0002      	movs	r2, r0
 8000ac0:	4b4c      	ldr	r3, [pc, #304]	; (8000bf4 <__aeabi_fmul+0x248>)
 8000ac2:	3280      	adds	r2, #128	; 0x80
 8000ac4:	401c      	ands	r4, r3
 8000ac6:	2afe      	cmp	r2, #254	; 0xfe
 8000ac8:	dcbf      	bgt.n	8000a4a <__aeabi_fmul+0x9e>
 8000aca:	01a4      	lsls	r4, r4, #6
 8000acc:	0a64      	lsrs	r4, r4, #9
 8000ace:	b2d0      	uxtb	r0, r2
 8000ad0:	e7b2      	b.n	8000a38 <__aeabi_fmul+0x8c>
 8000ad2:	4643      	mov	r3, r8
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d13d      	bne.n	8000b54 <__aeabi_fmul+0x1a8>
 8000ad8:	464a      	mov	r2, r9
 8000ada:	3301      	adds	r3, #1
 8000adc:	431a      	orrs	r2, r3
 8000ade:	4691      	mov	r9, r2
 8000ae0:	469c      	mov	ip, r3
 8000ae2:	e792      	b.n	8000a0a <__aeabi_fmul+0x5e>
 8000ae4:	2c00      	cmp	r4, #0
 8000ae6:	d129      	bne.n	8000b3c <__aeabi_fmul+0x190>
 8000ae8:	2304      	movs	r3, #4
 8000aea:	4699      	mov	r9, r3
 8000aec:	3b03      	subs	r3, #3
 8000aee:	2500      	movs	r5, #0
 8000af0:	469a      	mov	sl, r3
 8000af2:	e774      	b.n	80009de <__aeabi_fmul+0x32>
 8000af4:	2c00      	cmp	r4, #0
 8000af6:	d11b      	bne.n	8000b30 <__aeabi_fmul+0x184>
 8000af8:	2308      	movs	r3, #8
 8000afa:	4699      	mov	r9, r3
 8000afc:	3b06      	subs	r3, #6
 8000afe:	25ff      	movs	r5, #255	; 0xff
 8000b00:	469a      	mov	sl, r3
 8000b02:	e76c      	b.n	80009de <__aeabi_fmul+0x32>
 8000b04:	4643      	mov	r3, r8
 8000b06:	35ff      	adds	r5, #255	; 0xff
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d10b      	bne.n	8000b24 <__aeabi_fmul+0x178>
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	464a      	mov	r2, r9
 8000b10:	431a      	orrs	r2, r3
 8000b12:	4691      	mov	r9, r2
 8000b14:	469c      	mov	ip, r3
 8000b16:	e778      	b.n	8000a0a <__aeabi_fmul+0x5e>
 8000b18:	4653      	mov	r3, sl
 8000b1a:	0031      	movs	r1, r6
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d000      	beq.n	8000b22 <__aeabi_fmul+0x176>
 8000b20:	e783      	b.n	8000a2a <__aeabi_fmul+0x7e>
 8000b22:	e792      	b.n	8000a4a <__aeabi_fmul+0x9e>
 8000b24:	2303      	movs	r3, #3
 8000b26:	464a      	mov	r2, r9
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	4691      	mov	r9, r2
 8000b2c:	469c      	mov	ip, r3
 8000b2e:	e76c      	b.n	8000a0a <__aeabi_fmul+0x5e>
 8000b30:	230c      	movs	r3, #12
 8000b32:	4699      	mov	r9, r3
 8000b34:	3b09      	subs	r3, #9
 8000b36:	25ff      	movs	r5, #255	; 0xff
 8000b38:	469a      	mov	sl, r3
 8000b3a:	e750      	b.n	80009de <__aeabi_fmul+0x32>
 8000b3c:	0020      	movs	r0, r4
 8000b3e:	f000 faf3 	bl	8001128 <__clzsi2>
 8000b42:	2576      	movs	r5, #118	; 0x76
 8000b44:	1f43      	subs	r3, r0, #5
 8000b46:	409c      	lsls	r4, r3
 8000b48:	2300      	movs	r3, #0
 8000b4a:	426d      	negs	r5, r5
 8000b4c:	4699      	mov	r9, r3
 8000b4e:	469a      	mov	sl, r3
 8000b50:	1a2d      	subs	r5, r5, r0
 8000b52:	e744      	b.n	80009de <__aeabi_fmul+0x32>
 8000b54:	4640      	mov	r0, r8
 8000b56:	f000 fae7 	bl	8001128 <__clzsi2>
 8000b5a:	4642      	mov	r2, r8
 8000b5c:	1f43      	subs	r3, r0, #5
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	2300      	movs	r3, #0
 8000b62:	1a2d      	subs	r5, r5, r0
 8000b64:	4690      	mov	r8, r2
 8000b66:	469c      	mov	ip, r3
 8000b68:	3d76      	subs	r5, #118	; 0x76
 8000b6a:	e74e      	b.n	8000a0a <__aeabi_fmul+0x5e>
 8000b6c:	2480      	movs	r4, #128	; 0x80
 8000b6e:	2100      	movs	r1, #0
 8000b70:	20ff      	movs	r0, #255	; 0xff
 8000b72:	03e4      	lsls	r4, r4, #15
 8000b74:	e760      	b.n	8000a38 <__aeabi_fmul+0x8c>
 8000b76:	2301      	movs	r3, #1
 8000b78:	1a9b      	subs	r3, r3, r2
 8000b7a:	2b1b      	cmp	r3, #27
 8000b7c:	dd00      	ble.n	8000b80 <__aeabi_fmul+0x1d4>
 8000b7e:	e759      	b.n	8000a34 <__aeabi_fmul+0x88>
 8000b80:	0022      	movs	r2, r4
 8000b82:	309e      	adds	r0, #158	; 0x9e
 8000b84:	40da      	lsrs	r2, r3
 8000b86:	4084      	lsls	r4, r0
 8000b88:	0013      	movs	r3, r2
 8000b8a:	1e62      	subs	r2, r4, #1
 8000b8c:	4194      	sbcs	r4, r2
 8000b8e:	431c      	orrs	r4, r3
 8000b90:	0763      	lsls	r3, r4, #29
 8000b92:	d004      	beq.n	8000b9e <__aeabi_fmul+0x1f2>
 8000b94:	230f      	movs	r3, #15
 8000b96:	4023      	ands	r3, r4
 8000b98:	2b04      	cmp	r3, #4
 8000b9a:	d000      	beq.n	8000b9e <__aeabi_fmul+0x1f2>
 8000b9c:	3404      	adds	r4, #4
 8000b9e:	0163      	lsls	r3, r4, #5
 8000ba0:	d51a      	bpl.n	8000bd8 <__aeabi_fmul+0x22c>
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	2400      	movs	r4, #0
 8000ba6:	e747      	b.n	8000a38 <__aeabi_fmul+0x8c>
 8000ba8:	2080      	movs	r0, #128	; 0x80
 8000baa:	03c0      	lsls	r0, r0, #15
 8000bac:	4204      	tst	r4, r0
 8000bae:	d009      	beq.n	8000bc4 <__aeabi_fmul+0x218>
 8000bb0:	4643      	mov	r3, r8
 8000bb2:	4203      	tst	r3, r0
 8000bb4:	d106      	bne.n	8000bc4 <__aeabi_fmul+0x218>
 8000bb6:	4644      	mov	r4, r8
 8000bb8:	4304      	orrs	r4, r0
 8000bba:	0264      	lsls	r4, r4, #9
 8000bbc:	0039      	movs	r1, r7
 8000bbe:	20ff      	movs	r0, #255	; 0xff
 8000bc0:	0a64      	lsrs	r4, r4, #9
 8000bc2:	e739      	b.n	8000a38 <__aeabi_fmul+0x8c>
 8000bc4:	2080      	movs	r0, #128	; 0x80
 8000bc6:	03c0      	lsls	r0, r0, #15
 8000bc8:	4304      	orrs	r4, r0
 8000bca:	0264      	lsls	r4, r4, #9
 8000bcc:	0031      	movs	r1, r6
 8000bce:	20ff      	movs	r0, #255	; 0xff
 8000bd0:	0a64      	lsrs	r4, r4, #9
 8000bd2:	e731      	b.n	8000a38 <__aeabi_fmul+0x8c>
 8000bd4:	0028      	movs	r0, r5
 8000bd6:	e765      	b.n	8000aa4 <__aeabi_fmul+0xf8>
 8000bd8:	01a4      	lsls	r4, r4, #6
 8000bda:	2000      	movs	r0, #0
 8000bdc:	0a64      	lsrs	r4, r4, #9
 8000bde:	e72b      	b.n	8000a38 <__aeabi_fmul+0x8c>
 8000be0:	2080      	movs	r0, #128	; 0x80
 8000be2:	03c0      	lsls	r0, r0, #15
 8000be4:	4304      	orrs	r4, r0
 8000be6:	0264      	lsls	r4, r4, #9
 8000be8:	20ff      	movs	r0, #255	; 0xff
 8000bea:	0a64      	lsrs	r4, r4, #9
 8000bec:	e724      	b.n	8000a38 <__aeabi_fmul+0x8c>
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	080064ac 	.word	0x080064ac
 8000bf4:	f7ffffff 	.word	0xf7ffffff

08000bf8 <__aeabi_fsub>:
 8000bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfa:	46ce      	mov	lr, r9
 8000bfc:	4647      	mov	r7, r8
 8000bfe:	0243      	lsls	r3, r0, #9
 8000c00:	0a5b      	lsrs	r3, r3, #9
 8000c02:	024e      	lsls	r6, r1, #9
 8000c04:	00da      	lsls	r2, r3, #3
 8000c06:	4694      	mov	ip, r2
 8000c08:	0a72      	lsrs	r2, r6, #9
 8000c0a:	4691      	mov	r9, r2
 8000c0c:	0045      	lsls	r5, r0, #1
 8000c0e:	004a      	lsls	r2, r1, #1
 8000c10:	b580      	push	{r7, lr}
 8000c12:	0e2d      	lsrs	r5, r5, #24
 8000c14:	001f      	movs	r7, r3
 8000c16:	0fc4      	lsrs	r4, r0, #31
 8000c18:	0e12      	lsrs	r2, r2, #24
 8000c1a:	0fc9      	lsrs	r1, r1, #31
 8000c1c:	09b6      	lsrs	r6, r6, #6
 8000c1e:	2aff      	cmp	r2, #255	; 0xff
 8000c20:	d05b      	beq.n	8000cda <__aeabi_fsub+0xe2>
 8000c22:	2001      	movs	r0, #1
 8000c24:	4041      	eors	r1, r0
 8000c26:	428c      	cmp	r4, r1
 8000c28:	d039      	beq.n	8000c9e <__aeabi_fsub+0xa6>
 8000c2a:	1aa8      	subs	r0, r5, r2
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	dd5a      	ble.n	8000ce6 <__aeabi_fsub+0xee>
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	d06a      	beq.n	8000d0a <__aeabi_fsub+0x112>
 8000c34:	2dff      	cmp	r5, #255	; 0xff
 8000c36:	d100      	bne.n	8000c3a <__aeabi_fsub+0x42>
 8000c38:	e0d9      	b.n	8000dee <__aeabi_fsub+0x1f6>
 8000c3a:	2280      	movs	r2, #128	; 0x80
 8000c3c:	04d2      	lsls	r2, r2, #19
 8000c3e:	4316      	orrs	r6, r2
 8000c40:	281b      	cmp	r0, #27
 8000c42:	dc00      	bgt.n	8000c46 <__aeabi_fsub+0x4e>
 8000c44:	e0e9      	b.n	8000e1a <__aeabi_fsub+0x222>
 8000c46:	2001      	movs	r0, #1
 8000c48:	4663      	mov	r3, ip
 8000c4a:	1a18      	subs	r0, r3, r0
 8000c4c:	0143      	lsls	r3, r0, #5
 8000c4e:	d400      	bmi.n	8000c52 <__aeabi_fsub+0x5a>
 8000c50:	e0b4      	b.n	8000dbc <__aeabi_fsub+0x1c4>
 8000c52:	0180      	lsls	r0, r0, #6
 8000c54:	0987      	lsrs	r7, r0, #6
 8000c56:	0038      	movs	r0, r7
 8000c58:	f000 fa66 	bl	8001128 <__clzsi2>
 8000c5c:	3805      	subs	r0, #5
 8000c5e:	4087      	lsls	r7, r0
 8000c60:	4285      	cmp	r5, r0
 8000c62:	dc00      	bgt.n	8000c66 <__aeabi_fsub+0x6e>
 8000c64:	e0cc      	b.n	8000e00 <__aeabi_fsub+0x208>
 8000c66:	1a2d      	subs	r5, r5, r0
 8000c68:	48b5      	ldr	r0, [pc, #724]	; (8000f40 <__aeabi_fsub+0x348>)
 8000c6a:	4038      	ands	r0, r7
 8000c6c:	0743      	lsls	r3, r0, #29
 8000c6e:	d004      	beq.n	8000c7a <__aeabi_fsub+0x82>
 8000c70:	230f      	movs	r3, #15
 8000c72:	4003      	ands	r3, r0
 8000c74:	2b04      	cmp	r3, #4
 8000c76:	d000      	beq.n	8000c7a <__aeabi_fsub+0x82>
 8000c78:	3004      	adds	r0, #4
 8000c7a:	0143      	lsls	r3, r0, #5
 8000c7c:	d400      	bmi.n	8000c80 <__aeabi_fsub+0x88>
 8000c7e:	e0a0      	b.n	8000dc2 <__aeabi_fsub+0x1ca>
 8000c80:	1c6a      	adds	r2, r5, #1
 8000c82:	2dfe      	cmp	r5, #254	; 0xfe
 8000c84:	d100      	bne.n	8000c88 <__aeabi_fsub+0x90>
 8000c86:	e08d      	b.n	8000da4 <__aeabi_fsub+0x1ac>
 8000c88:	0180      	lsls	r0, r0, #6
 8000c8a:	0a47      	lsrs	r7, r0, #9
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	05d0      	lsls	r0, r2, #23
 8000c90:	4338      	orrs	r0, r7
 8000c92:	07e4      	lsls	r4, r4, #31
 8000c94:	4320      	orrs	r0, r4
 8000c96:	bcc0      	pop	{r6, r7}
 8000c98:	46b9      	mov	r9, r7
 8000c9a:	46b0      	mov	r8, r6
 8000c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c9e:	1aa8      	subs	r0, r5, r2
 8000ca0:	4680      	mov	r8, r0
 8000ca2:	2800      	cmp	r0, #0
 8000ca4:	dd45      	ble.n	8000d32 <__aeabi_fsub+0x13a>
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d070      	beq.n	8000d8c <__aeabi_fsub+0x194>
 8000caa:	2dff      	cmp	r5, #255	; 0xff
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_fsub+0xb8>
 8000cae:	e09e      	b.n	8000dee <__aeabi_fsub+0x1f6>
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	04db      	lsls	r3, r3, #19
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	4643      	mov	r3, r8
 8000cb8:	2b1b      	cmp	r3, #27
 8000cba:	dc00      	bgt.n	8000cbe <__aeabi_fsub+0xc6>
 8000cbc:	e0d2      	b.n	8000e64 <__aeabi_fsub+0x26c>
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4460      	add	r0, ip
 8000cc2:	0143      	lsls	r3, r0, #5
 8000cc4:	d57a      	bpl.n	8000dbc <__aeabi_fsub+0x1c4>
 8000cc6:	3501      	adds	r5, #1
 8000cc8:	2dff      	cmp	r5, #255	; 0xff
 8000cca:	d06b      	beq.n	8000da4 <__aeabi_fsub+0x1ac>
 8000ccc:	2301      	movs	r3, #1
 8000cce:	4a9d      	ldr	r2, [pc, #628]	; (8000f44 <__aeabi_fsub+0x34c>)
 8000cd0:	4003      	ands	r3, r0
 8000cd2:	0840      	lsrs	r0, r0, #1
 8000cd4:	4010      	ands	r0, r2
 8000cd6:	4318      	orrs	r0, r3
 8000cd8:	e7c8      	b.n	8000c6c <__aeabi_fsub+0x74>
 8000cda:	2e00      	cmp	r6, #0
 8000cdc:	d020      	beq.n	8000d20 <__aeabi_fsub+0x128>
 8000cde:	428c      	cmp	r4, r1
 8000ce0:	d023      	beq.n	8000d2a <__aeabi_fsub+0x132>
 8000ce2:	0028      	movs	r0, r5
 8000ce4:	38ff      	subs	r0, #255	; 0xff
 8000ce6:	2800      	cmp	r0, #0
 8000ce8:	d039      	beq.n	8000d5e <__aeabi_fsub+0x166>
 8000cea:	1b57      	subs	r7, r2, r5
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d000      	beq.n	8000cf2 <__aeabi_fsub+0xfa>
 8000cf0:	e09d      	b.n	8000e2e <__aeabi_fsub+0x236>
 8000cf2:	4663      	mov	r3, ip
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_fsub+0x102>
 8000cf8:	e0db      	b.n	8000eb2 <__aeabi_fsub+0x2ba>
 8000cfa:	1e7b      	subs	r3, r7, #1
 8000cfc:	2f01      	cmp	r7, #1
 8000cfe:	d100      	bne.n	8000d02 <__aeabi_fsub+0x10a>
 8000d00:	e10d      	b.n	8000f1e <__aeabi_fsub+0x326>
 8000d02:	2fff      	cmp	r7, #255	; 0xff
 8000d04:	d071      	beq.n	8000dea <__aeabi_fsub+0x1f2>
 8000d06:	001f      	movs	r7, r3
 8000d08:	e098      	b.n	8000e3c <__aeabi_fsub+0x244>
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_fsub+0x118>
 8000d0e:	e0a7      	b.n	8000e60 <__aeabi_fsub+0x268>
 8000d10:	1e42      	subs	r2, r0, #1
 8000d12:	2801      	cmp	r0, #1
 8000d14:	d100      	bne.n	8000d18 <__aeabi_fsub+0x120>
 8000d16:	e0e6      	b.n	8000ee6 <__aeabi_fsub+0x2ee>
 8000d18:	28ff      	cmp	r0, #255	; 0xff
 8000d1a:	d068      	beq.n	8000dee <__aeabi_fsub+0x1f6>
 8000d1c:	0010      	movs	r0, r2
 8000d1e:	e78f      	b.n	8000c40 <__aeabi_fsub+0x48>
 8000d20:	2001      	movs	r0, #1
 8000d22:	4041      	eors	r1, r0
 8000d24:	42a1      	cmp	r1, r4
 8000d26:	d000      	beq.n	8000d2a <__aeabi_fsub+0x132>
 8000d28:	e77f      	b.n	8000c2a <__aeabi_fsub+0x32>
 8000d2a:	20ff      	movs	r0, #255	; 0xff
 8000d2c:	4240      	negs	r0, r0
 8000d2e:	4680      	mov	r8, r0
 8000d30:	44a8      	add	r8, r5
 8000d32:	4640      	mov	r0, r8
 8000d34:	2800      	cmp	r0, #0
 8000d36:	d038      	beq.n	8000daa <__aeabi_fsub+0x1b2>
 8000d38:	1b51      	subs	r1, r2, r5
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_fsub+0x148>
 8000d3e:	e0ae      	b.n	8000e9e <__aeabi_fsub+0x2a6>
 8000d40:	2aff      	cmp	r2, #255	; 0xff
 8000d42:	d100      	bne.n	8000d46 <__aeabi_fsub+0x14e>
 8000d44:	e0df      	b.n	8000f06 <__aeabi_fsub+0x30e>
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	4660      	mov	r0, ip
 8000d4a:	04db      	lsls	r3, r3, #19
 8000d4c:	4318      	orrs	r0, r3
 8000d4e:	4684      	mov	ip, r0
 8000d50:	291b      	cmp	r1, #27
 8000d52:	dc00      	bgt.n	8000d56 <__aeabi_fsub+0x15e>
 8000d54:	e0d9      	b.n	8000f0a <__aeabi_fsub+0x312>
 8000d56:	2001      	movs	r0, #1
 8000d58:	0015      	movs	r5, r2
 8000d5a:	1980      	adds	r0, r0, r6
 8000d5c:	e7b1      	b.n	8000cc2 <__aeabi_fsub+0xca>
 8000d5e:	20fe      	movs	r0, #254	; 0xfe
 8000d60:	1c6a      	adds	r2, r5, #1
 8000d62:	4210      	tst	r0, r2
 8000d64:	d171      	bne.n	8000e4a <__aeabi_fsub+0x252>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d000      	beq.n	8000d6c <__aeabi_fsub+0x174>
 8000d6a:	e0a6      	b.n	8000eba <__aeabi_fsub+0x2c2>
 8000d6c:	4663      	mov	r3, ip
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d100      	bne.n	8000d74 <__aeabi_fsub+0x17c>
 8000d72:	e0d9      	b.n	8000f28 <__aeabi_fsub+0x330>
 8000d74:	2200      	movs	r2, #0
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	d100      	bne.n	8000d7c <__aeabi_fsub+0x184>
 8000d7a:	e788      	b.n	8000c8e <__aeabi_fsub+0x96>
 8000d7c:	1b98      	subs	r0, r3, r6
 8000d7e:	0143      	lsls	r3, r0, #5
 8000d80:	d400      	bmi.n	8000d84 <__aeabi_fsub+0x18c>
 8000d82:	e0e1      	b.n	8000f48 <__aeabi_fsub+0x350>
 8000d84:	4663      	mov	r3, ip
 8000d86:	000c      	movs	r4, r1
 8000d88:	1af0      	subs	r0, r6, r3
 8000d8a:	e76f      	b.n	8000c6c <__aeabi_fsub+0x74>
 8000d8c:	2e00      	cmp	r6, #0
 8000d8e:	d100      	bne.n	8000d92 <__aeabi_fsub+0x19a>
 8000d90:	e0b7      	b.n	8000f02 <__aeabi_fsub+0x30a>
 8000d92:	0002      	movs	r2, r0
 8000d94:	3a01      	subs	r2, #1
 8000d96:	2801      	cmp	r0, #1
 8000d98:	d100      	bne.n	8000d9c <__aeabi_fsub+0x1a4>
 8000d9a:	e09c      	b.n	8000ed6 <__aeabi_fsub+0x2de>
 8000d9c:	28ff      	cmp	r0, #255	; 0xff
 8000d9e:	d026      	beq.n	8000dee <__aeabi_fsub+0x1f6>
 8000da0:	4690      	mov	r8, r2
 8000da2:	e788      	b.n	8000cb6 <__aeabi_fsub+0xbe>
 8000da4:	22ff      	movs	r2, #255	; 0xff
 8000da6:	2700      	movs	r7, #0
 8000da8:	e771      	b.n	8000c8e <__aeabi_fsub+0x96>
 8000daa:	20fe      	movs	r0, #254	; 0xfe
 8000dac:	1c6a      	adds	r2, r5, #1
 8000dae:	4210      	tst	r0, r2
 8000db0:	d064      	beq.n	8000e7c <__aeabi_fsub+0x284>
 8000db2:	2aff      	cmp	r2, #255	; 0xff
 8000db4:	d0f6      	beq.n	8000da4 <__aeabi_fsub+0x1ac>
 8000db6:	0015      	movs	r5, r2
 8000db8:	4466      	add	r6, ip
 8000dba:	0870      	lsrs	r0, r6, #1
 8000dbc:	0743      	lsls	r3, r0, #29
 8000dbe:	d000      	beq.n	8000dc2 <__aeabi_fsub+0x1ca>
 8000dc0:	e756      	b.n	8000c70 <__aeabi_fsub+0x78>
 8000dc2:	08c3      	lsrs	r3, r0, #3
 8000dc4:	2dff      	cmp	r5, #255	; 0xff
 8000dc6:	d012      	beq.n	8000dee <__aeabi_fsub+0x1f6>
 8000dc8:	025b      	lsls	r3, r3, #9
 8000dca:	0a5f      	lsrs	r7, r3, #9
 8000dcc:	b2ea      	uxtb	r2, r5
 8000dce:	e75e      	b.n	8000c8e <__aeabi_fsub+0x96>
 8000dd0:	4662      	mov	r2, ip
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_fsub+0x1e0>
 8000dd6:	e096      	b.n	8000f06 <__aeabi_fsub+0x30e>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d008      	beq.n	8000dee <__aeabi_fsub+0x1f6>
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	03d2      	lsls	r2, r2, #15
 8000de0:	4213      	tst	r3, r2
 8000de2:	d004      	beq.n	8000dee <__aeabi_fsub+0x1f6>
 8000de4:	4648      	mov	r0, r9
 8000de6:	4210      	tst	r0, r2
 8000de8:	d101      	bne.n	8000dee <__aeabi_fsub+0x1f6>
 8000dea:	000c      	movs	r4, r1
 8000dec:	464b      	mov	r3, r9
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d0d8      	beq.n	8000da4 <__aeabi_fsub+0x1ac>
 8000df2:	2780      	movs	r7, #128	; 0x80
 8000df4:	03ff      	lsls	r7, r7, #15
 8000df6:	431f      	orrs	r7, r3
 8000df8:	027f      	lsls	r7, r7, #9
 8000dfa:	22ff      	movs	r2, #255	; 0xff
 8000dfc:	0a7f      	lsrs	r7, r7, #9
 8000dfe:	e746      	b.n	8000c8e <__aeabi_fsub+0x96>
 8000e00:	2320      	movs	r3, #32
 8000e02:	003a      	movs	r2, r7
 8000e04:	1b45      	subs	r5, r0, r5
 8000e06:	0038      	movs	r0, r7
 8000e08:	3501      	adds	r5, #1
 8000e0a:	40ea      	lsrs	r2, r5
 8000e0c:	1b5d      	subs	r5, r3, r5
 8000e0e:	40a8      	lsls	r0, r5
 8000e10:	1e43      	subs	r3, r0, #1
 8000e12:	4198      	sbcs	r0, r3
 8000e14:	2500      	movs	r5, #0
 8000e16:	4310      	orrs	r0, r2
 8000e18:	e728      	b.n	8000c6c <__aeabi_fsub+0x74>
 8000e1a:	2320      	movs	r3, #32
 8000e1c:	1a1b      	subs	r3, r3, r0
 8000e1e:	0032      	movs	r2, r6
 8000e20:	409e      	lsls	r6, r3
 8000e22:	40c2      	lsrs	r2, r0
 8000e24:	0030      	movs	r0, r6
 8000e26:	1e43      	subs	r3, r0, #1
 8000e28:	4198      	sbcs	r0, r3
 8000e2a:	4310      	orrs	r0, r2
 8000e2c:	e70c      	b.n	8000c48 <__aeabi_fsub+0x50>
 8000e2e:	2aff      	cmp	r2, #255	; 0xff
 8000e30:	d0db      	beq.n	8000dea <__aeabi_fsub+0x1f2>
 8000e32:	2380      	movs	r3, #128	; 0x80
 8000e34:	4660      	mov	r0, ip
 8000e36:	04db      	lsls	r3, r3, #19
 8000e38:	4318      	orrs	r0, r3
 8000e3a:	4684      	mov	ip, r0
 8000e3c:	2f1b      	cmp	r7, #27
 8000e3e:	dd56      	ble.n	8000eee <__aeabi_fsub+0x2f6>
 8000e40:	2001      	movs	r0, #1
 8000e42:	000c      	movs	r4, r1
 8000e44:	0015      	movs	r5, r2
 8000e46:	1a30      	subs	r0, r6, r0
 8000e48:	e700      	b.n	8000c4c <__aeabi_fsub+0x54>
 8000e4a:	4663      	mov	r3, ip
 8000e4c:	1b9f      	subs	r7, r3, r6
 8000e4e:	017b      	lsls	r3, r7, #5
 8000e50:	d43d      	bmi.n	8000ece <__aeabi_fsub+0x2d6>
 8000e52:	2f00      	cmp	r7, #0
 8000e54:	d000      	beq.n	8000e58 <__aeabi_fsub+0x260>
 8000e56:	e6fe      	b.n	8000c56 <__aeabi_fsub+0x5e>
 8000e58:	2400      	movs	r4, #0
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2700      	movs	r7, #0
 8000e5e:	e716      	b.n	8000c8e <__aeabi_fsub+0x96>
 8000e60:	0005      	movs	r5, r0
 8000e62:	e7af      	b.n	8000dc4 <__aeabi_fsub+0x1cc>
 8000e64:	0032      	movs	r2, r6
 8000e66:	4643      	mov	r3, r8
 8000e68:	4641      	mov	r1, r8
 8000e6a:	40da      	lsrs	r2, r3
 8000e6c:	2320      	movs	r3, #32
 8000e6e:	1a5b      	subs	r3, r3, r1
 8000e70:	409e      	lsls	r6, r3
 8000e72:	0030      	movs	r0, r6
 8000e74:	1e43      	subs	r3, r0, #1
 8000e76:	4198      	sbcs	r0, r3
 8000e78:	4310      	orrs	r0, r2
 8000e7a:	e721      	b.n	8000cc0 <__aeabi_fsub+0xc8>
 8000e7c:	2d00      	cmp	r5, #0
 8000e7e:	d1a7      	bne.n	8000dd0 <__aeabi_fsub+0x1d8>
 8000e80:	4663      	mov	r3, ip
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d059      	beq.n	8000f3a <__aeabi_fsub+0x342>
 8000e86:	2200      	movs	r2, #0
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d100      	bne.n	8000e8e <__aeabi_fsub+0x296>
 8000e8c:	e6ff      	b.n	8000c8e <__aeabi_fsub+0x96>
 8000e8e:	0030      	movs	r0, r6
 8000e90:	4460      	add	r0, ip
 8000e92:	0143      	lsls	r3, r0, #5
 8000e94:	d592      	bpl.n	8000dbc <__aeabi_fsub+0x1c4>
 8000e96:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <__aeabi_fsub+0x348>)
 8000e98:	3501      	adds	r5, #1
 8000e9a:	4018      	ands	r0, r3
 8000e9c:	e78e      	b.n	8000dbc <__aeabi_fsub+0x1c4>
 8000e9e:	4663      	mov	r3, ip
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d047      	beq.n	8000f34 <__aeabi_fsub+0x33c>
 8000ea4:	1e4b      	subs	r3, r1, #1
 8000ea6:	2901      	cmp	r1, #1
 8000ea8:	d015      	beq.n	8000ed6 <__aeabi_fsub+0x2de>
 8000eaa:	29ff      	cmp	r1, #255	; 0xff
 8000eac:	d02b      	beq.n	8000f06 <__aeabi_fsub+0x30e>
 8000eae:	0019      	movs	r1, r3
 8000eb0:	e74e      	b.n	8000d50 <__aeabi_fsub+0x158>
 8000eb2:	000c      	movs	r4, r1
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	003d      	movs	r5, r7
 8000eb8:	e784      	b.n	8000dc4 <__aeabi_fsub+0x1cc>
 8000eba:	4662      	mov	r2, ip
 8000ebc:	2a00      	cmp	r2, #0
 8000ebe:	d18b      	bne.n	8000dd8 <__aeabi_fsub+0x1e0>
 8000ec0:	2e00      	cmp	r6, #0
 8000ec2:	d192      	bne.n	8000dea <__aeabi_fsub+0x1f2>
 8000ec4:	2780      	movs	r7, #128	; 0x80
 8000ec6:	2400      	movs	r4, #0
 8000ec8:	22ff      	movs	r2, #255	; 0xff
 8000eca:	03ff      	lsls	r7, r7, #15
 8000ecc:	e6df      	b.n	8000c8e <__aeabi_fsub+0x96>
 8000ece:	4663      	mov	r3, ip
 8000ed0:	000c      	movs	r4, r1
 8000ed2:	1af7      	subs	r7, r6, r3
 8000ed4:	e6bf      	b.n	8000c56 <__aeabi_fsub+0x5e>
 8000ed6:	0030      	movs	r0, r6
 8000ed8:	4460      	add	r0, ip
 8000eda:	2501      	movs	r5, #1
 8000edc:	0143      	lsls	r3, r0, #5
 8000ede:	d400      	bmi.n	8000ee2 <__aeabi_fsub+0x2ea>
 8000ee0:	e76c      	b.n	8000dbc <__aeabi_fsub+0x1c4>
 8000ee2:	2502      	movs	r5, #2
 8000ee4:	e6f2      	b.n	8000ccc <__aeabi_fsub+0xd4>
 8000ee6:	4663      	mov	r3, ip
 8000ee8:	2501      	movs	r5, #1
 8000eea:	1b98      	subs	r0, r3, r6
 8000eec:	e6ae      	b.n	8000c4c <__aeabi_fsub+0x54>
 8000eee:	2320      	movs	r3, #32
 8000ef0:	4664      	mov	r4, ip
 8000ef2:	4660      	mov	r0, ip
 8000ef4:	40fc      	lsrs	r4, r7
 8000ef6:	1bdf      	subs	r7, r3, r7
 8000ef8:	40b8      	lsls	r0, r7
 8000efa:	1e43      	subs	r3, r0, #1
 8000efc:	4198      	sbcs	r0, r3
 8000efe:	4320      	orrs	r0, r4
 8000f00:	e79f      	b.n	8000e42 <__aeabi_fsub+0x24a>
 8000f02:	0005      	movs	r5, r0
 8000f04:	e75e      	b.n	8000dc4 <__aeabi_fsub+0x1cc>
 8000f06:	464b      	mov	r3, r9
 8000f08:	e771      	b.n	8000dee <__aeabi_fsub+0x1f6>
 8000f0a:	2320      	movs	r3, #32
 8000f0c:	4665      	mov	r5, ip
 8000f0e:	4660      	mov	r0, ip
 8000f10:	40cd      	lsrs	r5, r1
 8000f12:	1a59      	subs	r1, r3, r1
 8000f14:	4088      	lsls	r0, r1
 8000f16:	1e43      	subs	r3, r0, #1
 8000f18:	4198      	sbcs	r0, r3
 8000f1a:	4328      	orrs	r0, r5
 8000f1c:	e71c      	b.n	8000d58 <__aeabi_fsub+0x160>
 8000f1e:	4663      	mov	r3, ip
 8000f20:	000c      	movs	r4, r1
 8000f22:	2501      	movs	r5, #1
 8000f24:	1af0      	subs	r0, r6, r3
 8000f26:	e691      	b.n	8000c4c <__aeabi_fsub+0x54>
 8000f28:	2e00      	cmp	r6, #0
 8000f2a:	d095      	beq.n	8000e58 <__aeabi_fsub+0x260>
 8000f2c:	000c      	movs	r4, r1
 8000f2e:	464f      	mov	r7, r9
 8000f30:	2200      	movs	r2, #0
 8000f32:	e6ac      	b.n	8000c8e <__aeabi_fsub+0x96>
 8000f34:	464b      	mov	r3, r9
 8000f36:	000d      	movs	r5, r1
 8000f38:	e744      	b.n	8000dc4 <__aeabi_fsub+0x1cc>
 8000f3a:	464f      	mov	r7, r9
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	e6a6      	b.n	8000c8e <__aeabi_fsub+0x96>
 8000f40:	fbffffff 	.word	0xfbffffff
 8000f44:	7dffffff 	.word	0x7dffffff
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	d000      	beq.n	8000f4e <__aeabi_fsub+0x356>
 8000f4c:	e736      	b.n	8000dbc <__aeabi_fsub+0x1c4>
 8000f4e:	2400      	movs	r4, #0
 8000f50:	2700      	movs	r7, #0
 8000f52:	e69c      	b.n	8000c8e <__aeabi_fsub+0x96>

08000f54 <__aeabi_f2iz>:
 8000f54:	0241      	lsls	r1, r0, #9
 8000f56:	0042      	lsls	r2, r0, #1
 8000f58:	0fc3      	lsrs	r3, r0, #31
 8000f5a:	0a49      	lsrs	r1, r1, #9
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	0e12      	lsrs	r2, r2, #24
 8000f60:	2a7e      	cmp	r2, #126	; 0x7e
 8000f62:	dd03      	ble.n	8000f6c <__aeabi_f2iz+0x18>
 8000f64:	2a9d      	cmp	r2, #157	; 0x9d
 8000f66:	dd02      	ble.n	8000f6e <__aeabi_f2iz+0x1a>
 8000f68:	4a09      	ldr	r2, [pc, #36]	; (8000f90 <__aeabi_f2iz+0x3c>)
 8000f6a:	1898      	adds	r0, r3, r2
 8000f6c:	4770      	bx	lr
 8000f6e:	2080      	movs	r0, #128	; 0x80
 8000f70:	0400      	lsls	r0, r0, #16
 8000f72:	4301      	orrs	r1, r0
 8000f74:	2a95      	cmp	r2, #149	; 0x95
 8000f76:	dc07      	bgt.n	8000f88 <__aeabi_f2iz+0x34>
 8000f78:	2096      	movs	r0, #150	; 0x96
 8000f7a:	1a82      	subs	r2, r0, r2
 8000f7c:	40d1      	lsrs	r1, r2
 8000f7e:	4248      	negs	r0, r1
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1f3      	bne.n	8000f6c <__aeabi_f2iz+0x18>
 8000f84:	0008      	movs	r0, r1
 8000f86:	e7f1      	b.n	8000f6c <__aeabi_f2iz+0x18>
 8000f88:	3a96      	subs	r2, #150	; 0x96
 8000f8a:	4091      	lsls	r1, r2
 8000f8c:	e7f7      	b.n	8000f7e <__aeabi_f2iz+0x2a>
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	7fffffff 	.word	0x7fffffff

08000f94 <__aeabi_i2f>:
 8000f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f96:	2800      	cmp	r0, #0
 8000f98:	d013      	beq.n	8000fc2 <__aeabi_i2f+0x2e>
 8000f9a:	17c3      	asrs	r3, r0, #31
 8000f9c:	18c6      	adds	r6, r0, r3
 8000f9e:	405e      	eors	r6, r3
 8000fa0:	0fc4      	lsrs	r4, r0, #31
 8000fa2:	0030      	movs	r0, r6
 8000fa4:	f000 f8c0 	bl	8001128 <__clzsi2>
 8000fa8:	239e      	movs	r3, #158	; 0x9e
 8000faa:	0005      	movs	r5, r0
 8000fac:	1a1b      	subs	r3, r3, r0
 8000fae:	2b96      	cmp	r3, #150	; 0x96
 8000fb0:	dc0f      	bgt.n	8000fd2 <__aeabi_i2f+0x3e>
 8000fb2:	2808      	cmp	r0, #8
 8000fb4:	dd01      	ble.n	8000fba <__aeabi_i2f+0x26>
 8000fb6:	3d08      	subs	r5, #8
 8000fb8:	40ae      	lsls	r6, r5
 8000fba:	0276      	lsls	r6, r6, #9
 8000fbc:	0a76      	lsrs	r6, r6, #9
 8000fbe:	b2d8      	uxtb	r0, r3
 8000fc0:	e002      	b.n	8000fc8 <__aeabi_i2f+0x34>
 8000fc2:	2400      	movs	r4, #0
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	2600      	movs	r6, #0
 8000fc8:	05c0      	lsls	r0, r0, #23
 8000fca:	4330      	orrs	r0, r6
 8000fcc:	07e4      	lsls	r4, r4, #31
 8000fce:	4320      	orrs	r0, r4
 8000fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fd2:	2b99      	cmp	r3, #153	; 0x99
 8000fd4:	dd0c      	ble.n	8000ff0 <__aeabi_i2f+0x5c>
 8000fd6:	2205      	movs	r2, #5
 8000fd8:	0031      	movs	r1, r6
 8000fda:	1a12      	subs	r2, r2, r0
 8000fdc:	40d1      	lsrs	r1, r2
 8000fde:	000a      	movs	r2, r1
 8000fe0:	0001      	movs	r1, r0
 8000fe2:	0030      	movs	r0, r6
 8000fe4:	311b      	adds	r1, #27
 8000fe6:	4088      	lsls	r0, r1
 8000fe8:	1e41      	subs	r1, r0, #1
 8000fea:	4188      	sbcs	r0, r1
 8000fec:	4302      	orrs	r2, r0
 8000fee:	0016      	movs	r6, r2
 8000ff0:	2d05      	cmp	r5, #5
 8000ff2:	dc12      	bgt.n	800101a <__aeabi_i2f+0x86>
 8000ff4:	0031      	movs	r1, r6
 8000ff6:	4f0d      	ldr	r7, [pc, #52]	; (800102c <__aeabi_i2f+0x98>)
 8000ff8:	4039      	ands	r1, r7
 8000ffa:	0772      	lsls	r2, r6, #29
 8000ffc:	d009      	beq.n	8001012 <__aeabi_i2f+0x7e>
 8000ffe:	200f      	movs	r0, #15
 8001000:	4030      	ands	r0, r6
 8001002:	2804      	cmp	r0, #4
 8001004:	d005      	beq.n	8001012 <__aeabi_i2f+0x7e>
 8001006:	3104      	adds	r1, #4
 8001008:	014a      	lsls	r2, r1, #5
 800100a:	d502      	bpl.n	8001012 <__aeabi_i2f+0x7e>
 800100c:	239f      	movs	r3, #159	; 0x9f
 800100e:	4039      	ands	r1, r7
 8001010:	1b5b      	subs	r3, r3, r5
 8001012:	0189      	lsls	r1, r1, #6
 8001014:	0a4e      	lsrs	r6, r1, #9
 8001016:	b2d8      	uxtb	r0, r3
 8001018:	e7d6      	b.n	8000fc8 <__aeabi_i2f+0x34>
 800101a:	1f6a      	subs	r2, r5, #5
 800101c:	4096      	lsls	r6, r2
 800101e:	0031      	movs	r1, r6
 8001020:	4f02      	ldr	r7, [pc, #8]	; (800102c <__aeabi_i2f+0x98>)
 8001022:	4039      	ands	r1, r7
 8001024:	0772      	lsls	r2, r6, #29
 8001026:	d0f4      	beq.n	8001012 <__aeabi_i2f+0x7e>
 8001028:	e7e9      	b.n	8000ffe <__aeabi_i2f+0x6a>
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	fbffffff 	.word	0xfbffffff

08001030 <__aeabi_ui2f>:
 8001030:	b570      	push	{r4, r5, r6, lr}
 8001032:	1e05      	subs	r5, r0, #0
 8001034:	d00e      	beq.n	8001054 <__aeabi_ui2f+0x24>
 8001036:	f000 f877 	bl	8001128 <__clzsi2>
 800103a:	239e      	movs	r3, #158	; 0x9e
 800103c:	0004      	movs	r4, r0
 800103e:	1a1b      	subs	r3, r3, r0
 8001040:	2b96      	cmp	r3, #150	; 0x96
 8001042:	dc0c      	bgt.n	800105e <__aeabi_ui2f+0x2e>
 8001044:	2808      	cmp	r0, #8
 8001046:	dd01      	ble.n	800104c <__aeabi_ui2f+0x1c>
 8001048:	3c08      	subs	r4, #8
 800104a:	40a5      	lsls	r5, r4
 800104c:	026d      	lsls	r5, r5, #9
 800104e:	0a6d      	lsrs	r5, r5, #9
 8001050:	b2d8      	uxtb	r0, r3
 8001052:	e001      	b.n	8001058 <__aeabi_ui2f+0x28>
 8001054:	2000      	movs	r0, #0
 8001056:	2500      	movs	r5, #0
 8001058:	05c0      	lsls	r0, r0, #23
 800105a:	4328      	orrs	r0, r5
 800105c:	bd70      	pop	{r4, r5, r6, pc}
 800105e:	2b99      	cmp	r3, #153	; 0x99
 8001060:	dd09      	ble.n	8001076 <__aeabi_ui2f+0x46>
 8001062:	0002      	movs	r2, r0
 8001064:	0029      	movs	r1, r5
 8001066:	321b      	adds	r2, #27
 8001068:	4091      	lsls	r1, r2
 800106a:	1e4a      	subs	r2, r1, #1
 800106c:	4191      	sbcs	r1, r2
 800106e:	2205      	movs	r2, #5
 8001070:	1a12      	subs	r2, r2, r0
 8001072:	40d5      	lsrs	r5, r2
 8001074:	430d      	orrs	r5, r1
 8001076:	2c05      	cmp	r4, #5
 8001078:	dc12      	bgt.n	80010a0 <__aeabi_ui2f+0x70>
 800107a:	0029      	movs	r1, r5
 800107c:	4e0c      	ldr	r6, [pc, #48]	; (80010b0 <__aeabi_ui2f+0x80>)
 800107e:	4031      	ands	r1, r6
 8001080:	076a      	lsls	r2, r5, #29
 8001082:	d009      	beq.n	8001098 <__aeabi_ui2f+0x68>
 8001084:	200f      	movs	r0, #15
 8001086:	4028      	ands	r0, r5
 8001088:	2804      	cmp	r0, #4
 800108a:	d005      	beq.n	8001098 <__aeabi_ui2f+0x68>
 800108c:	3104      	adds	r1, #4
 800108e:	014a      	lsls	r2, r1, #5
 8001090:	d502      	bpl.n	8001098 <__aeabi_ui2f+0x68>
 8001092:	239f      	movs	r3, #159	; 0x9f
 8001094:	4031      	ands	r1, r6
 8001096:	1b1b      	subs	r3, r3, r4
 8001098:	0189      	lsls	r1, r1, #6
 800109a:	0a4d      	lsrs	r5, r1, #9
 800109c:	b2d8      	uxtb	r0, r3
 800109e:	e7db      	b.n	8001058 <__aeabi_ui2f+0x28>
 80010a0:	1f62      	subs	r2, r4, #5
 80010a2:	4095      	lsls	r5, r2
 80010a4:	0029      	movs	r1, r5
 80010a6:	4e02      	ldr	r6, [pc, #8]	; (80010b0 <__aeabi_ui2f+0x80>)
 80010a8:	4031      	ands	r1, r6
 80010aa:	076a      	lsls	r2, r5, #29
 80010ac:	d0f4      	beq.n	8001098 <__aeabi_ui2f+0x68>
 80010ae:	e7e9      	b.n	8001084 <__aeabi_ui2f+0x54>
 80010b0:	fbffffff 	.word	0xfbffffff

080010b4 <__aeabi_cfrcmple>:
 80010b4:	4684      	mov	ip, r0
 80010b6:	0008      	movs	r0, r1
 80010b8:	4661      	mov	r1, ip
 80010ba:	e7ff      	b.n	80010bc <__aeabi_cfcmpeq>

080010bc <__aeabi_cfcmpeq>:
 80010bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80010be:	f000 f8bd 	bl	800123c <__lesf2>
 80010c2:	2800      	cmp	r0, #0
 80010c4:	d401      	bmi.n	80010ca <__aeabi_cfcmpeq+0xe>
 80010c6:	2100      	movs	r1, #0
 80010c8:	42c8      	cmn	r0, r1
 80010ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080010cc <__aeabi_fcmpeq>:
 80010cc:	b510      	push	{r4, lr}
 80010ce:	f000 f849 	bl	8001164 <__eqsf2>
 80010d2:	4240      	negs	r0, r0
 80010d4:	3001      	adds	r0, #1
 80010d6:	bd10      	pop	{r4, pc}

080010d8 <__aeabi_fcmplt>:
 80010d8:	b510      	push	{r4, lr}
 80010da:	f000 f8af 	bl	800123c <__lesf2>
 80010de:	2800      	cmp	r0, #0
 80010e0:	db01      	blt.n	80010e6 <__aeabi_fcmplt+0xe>
 80010e2:	2000      	movs	r0, #0
 80010e4:	bd10      	pop	{r4, pc}
 80010e6:	2001      	movs	r0, #1
 80010e8:	bd10      	pop	{r4, pc}
 80010ea:	46c0      	nop			; (mov r8, r8)

080010ec <__aeabi_fcmple>:
 80010ec:	b510      	push	{r4, lr}
 80010ee:	f000 f8a5 	bl	800123c <__lesf2>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	dd01      	ble.n	80010fa <__aeabi_fcmple+0xe>
 80010f6:	2000      	movs	r0, #0
 80010f8:	bd10      	pop	{r4, pc}
 80010fa:	2001      	movs	r0, #1
 80010fc:	bd10      	pop	{r4, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)

08001100 <__aeabi_fcmpgt>:
 8001100:	b510      	push	{r4, lr}
 8001102:	f000 f855 	bl	80011b0 <__gesf2>
 8001106:	2800      	cmp	r0, #0
 8001108:	dc01      	bgt.n	800110e <__aeabi_fcmpgt+0xe>
 800110a:	2000      	movs	r0, #0
 800110c:	bd10      	pop	{r4, pc}
 800110e:	2001      	movs	r0, #1
 8001110:	bd10      	pop	{r4, pc}
 8001112:	46c0      	nop			; (mov r8, r8)

08001114 <__aeabi_fcmpge>:
 8001114:	b510      	push	{r4, lr}
 8001116:	f000 f84b 	bl	80011b0 <__gesf2>
 800111a:	2800      	cmp	r0, #0
 800111c:	da01      	bge.n	8001122 <__aeabi_fcmpge+0xe>
 800111e:	2000      	movs	r0, #0
 8001120:	bd10      	pop	{r4, pc}
 8001122:	2001      	movs	r0, #1
 8001124:	bd10      	pop	{r4, pc}
 8001126:	46c0      	nop			; (mov r8, r8)

08001128 <__clzsi2>:
 8001128:	211c      	movs	r1, #28
 800112a:	2301      	movs	r3, #1
 800112c:	041b      	lsls	r3, r3, #16
 800112e:	4298      	cmp	r0, r3
 8001130:	d301      	bcc.n	8001136 <__clzsi2+0xe>
 8001132:	0c00      	lsrs	r0, r0, #16
 8001134:	3910      	subs	r1, #16
 8001136:	0a1b      	lsrs	r3, r3, #8
 8001138:	4298      	cmp	r0, r3
 800113a:	d301      	bcc.n	8001140 <__clzsi2+0x18>
 800113c:	0a00      	lsrs	r0, r0, #8
 800113e:	3908      	subs	r1, #8
 8001140:	091b      	lsrs	r3, r3, #4
 8001142:	4298      	cmp	r0, r3
 8001144:	d301      	bcc.n	800114a <__clzsi2+0x22>
 8001146:	0900      	lsrs	r0, r0, #4
 8001148:	3904      	subs	r1, #4
 800114a:	a202      	add	r2, pc, #8	; (adr r2, 8001154 <__clzsi2+0x2c>)
 800114c:	5c10      	ldrb	r0, [r2, r0]
 800114e:	1840      	adds	r0, r0, r1
 8001150:	4770      	bx	lr
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	02020304 	.word	0x02020304
 8001158:	01010101 	.word	0x01010101
	...

08001164 <__eqsf2>:
 8001164:	b570      	push	{r4, r5, r6, lr}
 8001166:	0042      	lsls	r2, r0, #1
 8001168:	0245      	lsls	r5, r0, #9
 800116a:	024e      	lsls	r6, r1, #9
 800116c:	004c      	lsls	r4, r1, #1
 800116e:	0fc3      	lsrs	r3, r0, #31
 8001170:	0a6d      	lsrs	r5, r5, #9
 8001172:	2001      	movs	r0, #1
 8001174:	0e12      	lsrs	r2, r2, #24
 8001176:	0a76      	lsrs	r6, r6, #9
 8001178:	0e24      	lsrs	r4, r4, #24
 800117a:	0fc9      	lsrs	r1, r1, #31
 800117c:	2aff      	cmp	r2, #255	; 0xff
 800117e:	d006      	beq.n	800118e <__eqsf2+0x2a>
 8001180:	2cff      	cmp	r4, #255	; 0xff
 8001182:	d003      	beq.n	800118c <__eqsf2+0x28>
 8001184:	42a2      	cmp	r2, r4
 8001186:	d101      	bne.n	800118c <__eqsf2+0x28>
 8001188:	42b5      	cmp	r5, r6
 800118a:	d006      	beq.n	800119a <__eqsf2+0x36>
 800118c:	bd70      	pop	{r4, r5, r6, pc}
 800118e:	2d00      	cmp	r5, #0
 8001190:	d1fc      	bne.n	800118c <__eqsf2+0x28>
 8001192:	2cff      	cmp	r4, #255	; 0xff
 8001194:	d1fa      	bne.n	800118c <__eqsf2+0x28>
 8001196:	2e00      	cmp	r6, #0
 8001198:	d1f8      	bne.n	800118c <__eqsf2+0x28>
 800119a:	428b      	cmp	r3, r1
 800119c:	d006      	beq.n	80011ac <__eqsf2+0x48>
 800119e:	2001      	movs	r0, #1
 80011a0:	2a00      	cmp	r2, #0
 80011a2:	d1f3      	bne.n	800118c <__eqsf2+0x28>
 80011a4:	0028      	movs	r0, r5
 80011a6:	1e43      	subs	r3, r0, #1
 80011a8:	4198      	sbcs	r0, r3
 80011aa:	e7ef      	b.n	800118c <__eqsf2+0x28>
 80011ac:	2000      	movs	r0, #0
 80011ae:	e7ed      	b.n	800118c <__eqsf2+0x28>

080011b0 <__gesf2>:
 80011b0:	b570      	push	{r4, r5, r6, lr}
 80011b2:	0042      	lsls	r2, r0, #1
 80011b4:	0245      	lsls	r5, r0, #9
 80011b6:	024e      	lsls	r6, r1, #9
 80011b8:	004c      	lsls	r4, r1, #1
 80011ba:	0fc3      	lsrs	r3, r0, #31
 80011bc:	0a6d      	lsrs	r5, r5, #9
 80011be:	0e12      	lsrs	r2, r2, #24
 80011c0:	0a76      	lsrs	r6, r6, #9
 80011c2:	0e24      	lsrs	r4, r4, #24
 80011c4:	0fc8      	lsrs	r0, r1, #31
 80011c6:	2aff      	cmp	r2, #255	; 0xff
 80011c8:	d01b      	beq.n	8001202 <__gesf2+0x52>
 80011ca:	2cff      	cmp	r4, #255	; 0xff
 80011cc:	d00e      	beq.n	80011ec <__gesf2+0x3c>
 80011ce:	2a00      	cmp	r2, #0
 80011d0:	d11b      	bne.n	800120a <__gesf2+0x5a>
 80011d2:	2c00      	cmp	r4, #0
 80011d4:	d101      	bne.n	80011da <__gesf2+0x2a>
 80011d6:	2e00      	cmp	r6, #0
 80011d8:	d01c      	beq.n	8001214 <__gesf2+0x64>
 80011da:	2d00      	cmp	r5, #0
 80011dc:	d00c      	beq.n	80011f8 <__gesf2+0x48>
 80011de:	4283      	cmp	r3, r0
 80011e0:	d01c      	beq.n	800121c <__gesf2+0x6c>
 80011e2:	2102      	movs	r1, #2
 80011e4:	1e58      	subs	r0, r3, #1
 80011e6:	4008      	ands	r0, r1
 80011e8:	3801      	subs	r0, #1
 80011ea:	bd70      	pop	{r4, r5, r6, pc}
 80011ec:	2e00      	cmp	r6, #0
 80011ee:	d122      	bne.n	8001236 <__gesf2+0x86>
 80011f0:	2a00      	cmp	r2, #0
 80011f2:	d1f4      	bne.n	80011de <__gesf2+0x2e>
 80011f4:	2d00      	cmp	r5, #0
 80011f6:	d1f2      	bne.n	80011de <__gesf2+0x2e>
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d1f6      	bne.n	80011ea <__gesf2+0x3a>
 80011fc:	2001      	movs	r0, #1
 80011fe:	4240      	negs	r0, r0
 8001200:	e7f3      	b.n	80011ea <__gesf2+0x3a>
 8001202:	2d00      	cmp	r5, #0
 8001204:	d117      	bne.n	8001236 <__gesf2+0x86>
 8001206:	2cff      	cmp	r4, #255	; 0xff
 8001208:	d0f0      	beq.n	80011ec <__gesf2+0x3c>
 800120a:	2c00      	cmp	r4, #0
 800120c:	d1e7      	bne.n	80011de <__gesf2+0x2e>
 800120e:	2e00      	cmp	r6, #0
 8001210:	d1e5      	bne.n	80011de <__gesf2+0x2e>
 8001212:	e7e6      	b.n	80011e2 <__gesf2+0x32>
 8001214:	2000      	movs	r0, #0
 8001216:	2d00      	cmp	r5, #0
 8001218:	d0e7      	beq.n	80011ea <__gesf2+0x3a>
 800121a:	e7e2      	b.n	80011e2 <__gesf2+0x32>
 800121c:	42a2      	cmp	r2, r4
 800121e:	dc05      	bgt.n	800122c <__gesf2+0x7c>
 8001220:	dbea      	blt.n	80011f8 <__gesf2+0x48>
 8001222:	42b5      	cmp	r5, r6
 8001224:	d802      	bhi.n	800122c <__gesf2+0x7c>
 8001226:	d3e7      	bcc.n	80011f8 <__gesf2+0x48>
 8001228:	2000      	movs	r0, #0
 800122a:	e7de      	b.n	80011ea <__gesf2+0x3a>
 800122c:	4243      	negs	r3, r0
 800122e:	4158      	adcs	r0, r3
 8001230:	0040      	lsls	r0, r0, #1
 8001232:	3801      	subs	r0, #1
 8001234:	e7d9      	b.n	80011ea <__gesf2+0x3a>
 8001236:	2002      	movs	r0, #2
 8001238:	4240      	negs	r0, r0
 800123a:	e7d6      	b.n	80011ea <__gesf2+0x3a>

0800123c <__lesf2>:
 800123c:	b570      	push	{r4, r5, r6, lr}
 800123e:	0042      	lsls	r2, r0, #1
 8001240:	0245      	lsls	r5, r0, #9
 8001242:	024e      	lsls	r6, r1, #9
 8001244:	004c      	lsls	r4, r1, #1
 8001246:	0fc3      	lsrs	r3, r0, #31
 8001248:	0a6d      	lsrs	r5, r5, #9
 800124a:	0e12      	lsrs	r2, r2, #24
 800124c:	0a76      	lsrs	r6, r6, #9
 800124e:	0e24      	lsrs	r4, r4, #24
 8001250:	0fc8      	lsrs	r0, r1, #31
 8001252:	2aff      	cmp	r2, #255	; 0xff
 8001254:	d00b      	beq.n	800126e <__lesf2+0x32>
 8001256:	2cff      	cmp	r4, #255	; 0xff
 8001258:	d00d      	beq.n	8001276 <__lesf2+0x3a>
 800125a:	2a00      	cmp	r2, #0
 800125c:	d11f      	bne.n	800129e <__lesf2+0x62>
 800125e:	2c00      	cmp	r4, #0
 8001260:	d116      	bne.n	8001290 <__lesf2+0x54>
 8001262:	2e00      	cmp	r6, #0
 8001264:	d114      	bne.n	8001290 <__lesf2+0x54>
 8001266:	2000      	movs	r0, #0
 8001268:	2d00      	cmp	r5, #0
 800126a:	d010      	beq.n	800128e <__lesf2+0x52>
 800126c:	e009      	b.n	8001282 <__lesf2+0x46>
 800126e:	2d00      	cmp	r5, #0
 8001270:	d10c      	bne.n	800128c <__lesf2+0x50>
 8001272:	2cff      	cmp	r4, #255	; 0xff
 8001274:	d113      	bne.n	800129e <__lesf2+0x62>
 8001276:	2e00      	cmp	r6, #0
 8001278:	d108      	bne.n	800128c <__lesf2+0x50>
 800127a:	2a00      	cmp	r2, #0
 800127c:	d008      	beq.n	8001290 <__lesf2+0x54>
 800127e:	4283      	cmp	r3, r0
 8001280:	d012      	beq.n	80012a8 <__lesf2+0x6c>
 8001282:	2102      	movs	r1, #2
 8001284:	1e58      	subs	r0, r3, #1
 8001286:	4008      	ands	r0, r1
 8001288:	3801      	subs	r0, #1
 800128a:	e000      	b.n	800128e <__lesf2+0x52>
 800128c:	2002      	movs	r0, #2
 800128e:	bd70      	pop	{r4, r5, r6, pc}
 8001290:	2d00      	cmp	r5, #0
 8001292:	d1f4      	bne.n	800127e <__lesf2+0x42>
 8001294:	2800      	cmp	r0, #0
 8001296:	d1fa      	bne.n	800128e <__lesf2+0x52>
 8001298:	2001      	movs	r0, #1
 800129a:	4240      	negs	r0, r0
 800129c:	e7f7      	b.n	800128e <__lesf2+0x52>
 800129e:	2c00      	cmp	r4, #0
 80012a0:	d1ed      	bne.n	800127e <__lesf2+0x42>
 80012a2:	2e00      	cmp	r6, #0
 80012a4:	d1eb      	bne.n	800127e <__lesf2+0x42>
 80012a6:	e7ec      	b.n	8001282 <__lesf2+0x46>
 80012a8:	42a2      	cmp	r2, r4
 80012aa:	dc05      	bgt.n	80012b8 <__lesf2+0x7c>
 80012ac:	dbf2      	blt.n	8001294 <__lesf2+0x58>
 80012ae:	42b5      	cmp	r5, r6
 80012b0:	d802      	bhi.n	80012b8 <__lesf2+0x7c>
 80012b2:	d3ef      	bcc.n	8001294 <__lesf2+0x58>
 80012b4:	2000      	movs	r0, #0
 80012b6:	e7ea      	b.n	800128e <__lesf2+0x52>
 80012b8:	4243      	negs	r3, r0
 80012ba:	4158      	adcs	r0, r3
 80012bc:	0040      	lsls	r0, r0, #1
 80012be:	3801      	subs	r0, #1
 80012c0:	e7e5      	b.n	800128e <__lesf2+0x52>
 80012c2:	46c0      	nop			; (mov r8, r8)

080012c4 <ad8363_get_dbm>:
 *      Author: sigmadev
 */

#include "ad8363.h"

uint8_t ad8363_get_dbm(AD8363_t *ad,uint16_t value) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	000a      	movs	r2, r1
 80012ce:	1cbb      	adds	r3, r7, #2
 80012d0:	801a      	strh	r2, [r3, #0]

	float m = (float) (AD8363_DBM_MAX - AD8363_DBM_MIN)
			/ (float) (ad->max - ad->min);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	001a      	movs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	885b      	ldrh	r3, [r3, #2]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	0018      	movs	r0, r3
 80012e0:	f7ff fe58 	bl	8000f94 <__aeabi_i2f>
 80012e4:	1c03      	adds	r3, r0, #0
	float m = (float) (AD8363_DBM_MAX - AD8363_DBM_MIN)
 80012e6:	1c19      	adds	r1, r3, #0
 80012e8:	481f      	ldr	r0, [pc, #124]	; (8001368 <ad8363_get_dbm+0xa4>)
 80012ea:	f7ff fa47 	bl	800077c <__aeabi_fdiv>
 80012ee:	1c03      	adds	r3, r0, #0
 80012f0:	60fb      	str	r3, [r7, #12]
	float b = AD8363_DBM_MAX -ad->max * m;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	0018      	movs	r0, r3
 80012f8:	f7ff fe4c 	bl	8000f94 <__aeabi_i2f>
 80012fc:	1c03      	adds	r3, r0, #0
 80012fe:	68f9      	ldr	r1, [r7, #12]
 8001300:	1c18      	adds	r0, r3, #0
 8001302:	f7ff fb53 	bl	80009ac <__aeabi_fmul>
 8001306:	1c03      	adds	r3, r0, #0
 8001308:	1c19      	adds	r1, r3, #0
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff fc74 	bl	8000bf8 <__aeabi_fsub>
 8001310:	1c03      	adds	r3, r0, #0
 8001312:	60bb      	str	r3, [r7, #8]

	if (value > ad->max) {
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	1cba      	adds	r2, r7, #2
 800131a:	8812      	ldrh	r2, [r2, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	d901      	bls.n	8001324 <ad8363_get_dbm+0x60>
		return AD8363_DBM_MAX;
 8001320:	2300      	movs	r3, #0
 8001322:	e01d      	b.n	8001360 <ad8363_get_dbm+0x9c>
	} else if (value < ad->min) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	885b      	ldrh	r3, [r3, #2]
 8001328:	1cba      	adds	r2, r7, #2
 800132a:	8812      	ldrh	r2, [r2, #0]
 800132c:	429a      	cmp	r2, r3
 800132e:	d201      	bcs.n	8001334 <ad8363_get_dbm+0x70>
		return AD8363_DBM_MIN;
 8001330:	23e2      	movs	r3, #226	; 0xe2
 8001332:	e015      	b.n	8001360 <ad8363_get_dbm+0x9c>
	}
	return (int8_t) (m * (float) value + b);
 8001334:	1cbb      	adds	r3, r7, #2
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	0018      	movs	r0, r3
 800133a:	f7ff fe79 	bl	8001030 <__aeabi_ui2f>
 800133e:	1c03      	adds	r3, r0, #0
 8001340:	68f9      	ldr	r1, [r7, #12]
 8001342:	1c18      	adds	r0, r3, #0
 8001344:	f7ff fb32 	bl	80009ac <__aeabi_fmul>
 8001348:	1c03      	adds	r3, r0, #0
 800134a:	68b9      	ldr	r1, [r7, #8]
 800134c:	1c18      	adds	r0, r3, #0
 800134e:	f7ff f877 	bl	8000440 <__aeabi_fadd>
 8001352:	1c03      	adds	r3, r0, #0
 8001354:	1c18      	adds	r0, r3, #0
 8001356:	f7ff fdfd 	bl	8000f54 <__aeabi_f2iz>
 800135a:	0003      	movs	r3, r0
 800135c:	b25b      	sxtb	r3, r3
 800135e:	b2db      	uxtb	r3, r3
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	b004      	add	sp, #16
 8001366:	bd80      	pop	{r7, pc}
 8001368:	41f00000 	.word	0x41f00000

0800136c <bda4601_set_att>:
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE7_1);

}

void bda4601_set_att(uint8_t val, uint8_t times) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	0002      	movs	r2, r0
 8001374:	1dfb      	adds	r3, r7, #7
 8001376:	701a      	strb	r2, [r3, #0]
 8001378:	1dbb      	adds	r3, r7, #6
 800137a:	1c0a      	adds	r2, r1, #0
 800137c:	701a      	strb	r2, [r3, #0]

	if (val < MIN_DB_VALUE || val > MAX_DB_VALUE) {
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b1f      	cmp	r3, #31
 8001384:	d902      	bls.n	800138c <bda4601_set_att+0x20>
		val = MIN_DB_VALUE;
 8001386:	1dfb      	adds	r3, r7, #7
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
	}
	val *= 2;
 800138c:	1dfa      	adds	r2, r7, #7
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	18db      	adds	r3, r3, r3
 8001394:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < times; i++) {
 8001396:	230f      	movs	r3, #15
 8001398:	18fb      	adds	r3, r7, r3
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
 800139e:	e058      	b.n	8001452 <bda4601_set_att+0xe6>
		uint8_t mask = 0b00100000;
 80013a0:	230e      	movs	r3, #14
 80013a2:	18fb      	adds	r3, r7, r3
 80013a4:	2220      	movs	r2, #32
 80013a6:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < 6; j++) {
 80013a8:	230d      	movs	r3, #13
 80013aa:	18fb      	adds	r3, r7, r3
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
 80013b0:	e030      	b.n	8001414 <bda4601_set_att+0xa8>
			//Ciclo for de 6 vueltas para enviar los 6bits de configuración
			if (mask & val) {
 80013b2:	230e      	movs	r3, #14
 80013b4:	18fb      	adds	r3, r7, r3
 80013b6:	1dfa      	adds	r2, r7, #7
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	7812      	ldrb	r2, [r2, #0]
 80013bc:	4013      	ands	r3, r2
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d006      	beq.n	80013d2 <bda4601_set_att+0x66>
				//Si el bit de la mascara en 1 coincide con el bit del valor, entonces
				SET_BIT(GPIOB->MODER, GPIO_MODER_MODE1_0);
 80013c4:	4b29      	ldr	r3, [pc, #164]	; (800146c <bda4601_set_att+0x100>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b28      	ldr	r3, [pc, #160]	; (800146c <bda4601_set_att+0x100>)
 80013ca:	2104      	movs	r1, #4
 80013cc:	430a      	orrs	r2, r1
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	e005      	b.n	80013de <bda4601_set_att+0x72>
				//HAL_GPIO_WritePin(GPIOA, DATA_ATTENUATOR_Pin, GPIO_PIN_SET); //Pin data en alto
			} else {
				//	HAL_GPIO_WritePin(GPIOA, DATA_ATTENUATOR_Pin, GPIO_PIN_RESET); //Pin data en bajo
				CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE1_0);
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <bda4601_set_att+0x100>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4b25      	ldr	r3, [pc, #148]	; (800146c <bda4601_set_att+0x100>)
 80013d8:	2104      	movs	r1, #4
 80013da:	438a      	bics	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]
			}

			SET_BIT(GPIOB->MODER, GPIO_MODER_MODE0_0);
 80013de:	4b23      	ldr	r3, [pc, #140]	; (800146c <bda4601_set_att+0x100>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4b22      	ldr	r3, [pc, #136]	; (800146c <bda4601_set_att+0x100>)
 80013e4:	2101      	movs	r1, #1
 80013e6:	430a      	orrs	r2, r1
 80013e8:	601a      	str	r2, [r3, #0]
			//HAL_GPIO_WritePin(GPIOA, CLK_ATTENUATOR_Pin, GPIO_PIN_SET); //Pin clock en alto
			HAL_Delay(1); //Delay de 1mS
 80013ea:	2001      	movs	r0, #1
 80013ec:	f002 f806 	bl	80033fc <HAL_Delay>
			CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE0_0);
 80013f0:	4b1e      	ldr	r3, [pc, #120]	; (800146c <bda4601_set_att+0x100>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <bda4601_set_att+0x100>)
 80013f6:	2101      	movs	r1, #1
 80013f8:	438a      	bics	r2, r1
 80013fa:	601a      	str	r2, [r3, #0]
			//HAL_GPIO_WritePin(GPIOA, CLK_ATTENUATOR_Pin, GPIO_PIN_RESET); //Pin clock en bajo
			mask = mask >> 1; //Muevo la máscara una posición
 80013fc:	220e      	movs	r2, #14
 80013fe:	18bb      	adds	r3, r7, r2
 8001400:	18ba      	adds	r2, r7, r2
 8001402:	7812      	ldrb	r2, [r2, #0]
 8001404:	0852      	lsrs	r2, r2, #1
 8001406:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < 6; j++) {
 8001408:	210d      	movs	r1, #13
 800140a:	187b      	adds	r3, r7, r1
 800140c:	781a      	ldrb	r2, [r3, #0]
 800140e:	187b      	adds	r3, r7, r1
 8001410:	3201      	adds	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	230d      	movs	r3, #13
 8001416:	18fb      	adds	r3, r7, r3
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b05      	cmp	r3, #5
 800141c:	d9c9      	bls.n	80013b2 <bda4601_set_att+0x46>
		}
		SET_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
 800141e:	23a0      	movs	r3, #160	; 0xa0
 8001420:	05db      	lsls	r3, r3, #23
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	23a0      	movs	r3, #160	; 0xa0
 8001426:	05db      	lsls	r3, r3, #23
 8001428:	2180      	movs	r1, #128	; 0x80
 800142a:	01c9      	lsls	r1, r1, #7
 800142c:	430a      	orrs	r2, r1
 800142e:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOA, LE_ATTENUATOR_Pin, GPIO_PIN_SET); //Pin LE en alto
		HAL_Delay(1);
 8001430:	2001      	movs	r0, #1
 8001432:	f001 ffe3 	bl	80033fc <HAL_Delay>
		CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
 8001436:	23a0      	movs	r3, #160	; 0xa0
 8001438:	05db      	lsls	r3, r3, #23
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	23a0      	movs	r3, #160	; 0xa0
 800143e:	05db      	lsls	r3, r3, #23
 8001440:	490b      	ldr	r1, [pc, #44]	; (8001470 <bda4601_set_att+0x104>)
 8001442:	400a      	ands	r2, r1
 8001444:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < times; i++) {
 8001446:	210f      	movs	r1, #15
 8001448:	187b      	adds	r3, r7, r1
 800144a:	781a      	ldrb	r2, [r3, #0]
 800144c:	187b      	adds	r3, r7, r1
 800144e:	3201      	adds	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	230f      	movs	r3, #15
 8001454:	18fa      	adds	r2, r7, r3
 8001456:	1dbb      	adds	r3, r7, #6
 8001458:	7812      	ldrb	r2, [r2, #0]
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	429a      	cmp	r2, r3
 800145e:	d39f      	bcc.n	80013a0 <bda4601_set_att+0x34>
		//HAL_GPIO_WritePin(GPIOA, LE_ATTENUATOR_Pin, GPIO_PIN_RESET); //Pin LE en bajo
	}
}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	46bd      	mov	sp, r7
 8001466:	b004      	add	sp, #16
 8001468:	bd80      	pop	{r7, pc}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	50000400 	.word	0x50000400
 8001470:	ffffbfff 	.word	0xffffbfff

08001474 <bda4601_set_initial_att>:

void bda4601_set_initial_att(uint8_t value, uint16_t period_millis) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	0002      	movs	r2, r0
 800147c:	1dfb      	adds	r3, r7, #7
 800147e:	701a      	strb	r2, [r3, #0]
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	1c0a      	adds	r2, r1, #0
 8001484:	801a      	strh	r2, [r3, #0]

	uint8_t t_step = 500;
 8001486:	210f      	movs	r1, #15
 8001488:	187b      	adds	r3, r7, r1
 800148a:	22f4      	movs	r2, #244	; 0xf4
 800148c:	701a      	strb	r2, [r3, #0]
	uint8_t times = period_millis / t_step;
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	881a      	ldrh	r2, [r3, #0]
 8001492:	187b      	adds	r3, r7, r1
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	0019      	movs	r1, r3
 8001498:	0010      	movs	r0, r2
 800149a:	f7fe fecd 	bl	8000238 <__divsi3>
 800149e:	0003      	movs	r3, r0
 80014a0:	001a      	movs	r2, r3
 80014a2:	210e      	movs	r1, #14
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	701a      	strb	r2, [r3, #0]

	int att_step = value / times;
 80014a8:	1dfa      	adds	r2, r7, #7
 80014aa:	187b      	adds	r3, r7, r1
 80014ac:	7812      	ldrb	r2, [r2, #0]
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	0019      	movs	r1, r3
 80014b2:	0010      	movs	r0, r2
 80014b4:	f7fe fe36 	bl	8000124 <__udivsi3>
 80014b8:	0003      	movs	r3, r0
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	617b      	str	r3, [r7, #20]

	for (int i = 0; i <= times; i++) {
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	e014      	b.n	80014ee <bda4601_set_initial_att+0x7a>
		bda4601_set_att(att_step, 2);
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2102      	movs	r1, #2
 80014ca:	0018      	movs	r0, r3
 80014cc:	f7ff ff4e 	bl	800136c <bda4601_set_att>
		att_step += att_step;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	617b      	str	r3, [r7, #20]
		if (att_step >= MAX_DB_VALUE) {
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	2b1e      	cmp	r3, #30
 80014da:	dc0f      	bgt.n	80014fc <bda4601_set_initial_att+0x88>
			att_step > MAX_DB_VALUE;
			break;
		}
		HAL_Delay(t_step);
 80014dc:	230f      	movs	r3, #15
 80014de:	18fb      	adds	r3, r7, r3
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	0018      	movs	r0, r3
 80014e4:	f001 ff8a 	bl	80033fc <HAL_Delay>
	for (int i = 0; i <= times; i++) {
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	3301      	adds	r3, #1
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	230e      	movs	r3, #14
 80014f0:	18fb      	adds	r3, r7, r3
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	dde4      	ble.n	80014c4 <bda4601_set_initial_att+0x50>
	}

}
 80014fa:	e000      	b.n	80014fe <bda4601_set_initial_att+0x8a>
			break;
 80014fc:	46c0      	nop			; (mov r8, r8)
}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	46bd      	mov	sp, r7
 8001502:	b006      	add	sp, #24
 8001504:	bd80      	pop	{r7, pc}

08001506 <eeprom_1byte_read>:
	data |= EEPROM_Read(address);

	return data;
}
*/
uint8_t eeprom_1byte_read(uint8_t eaddress) {
 8001506:	b590      	push	{r4, r7, lr}
 8001508:	b085      	sub	sp, #20
 800150a:	af00      	add	r7, sp, #0
 800150c:	0002      	movs	r2, r0
 800150e:	1dfb      	adds	r3, r7, #7
 8001510:	701a      	strb	r2, [r3, #0]
	char  buff[2];
	buff[0] = eaddress;
 8001512:	240c      	movs	r4, #12
 8001514:	193b      	adds	r3, r7, r4
 8001516:	1dfa      	adds	r2, r7, #7
 8001518:	7812      	ldrb	r2, [r2, #0]
 800151a:	701a      	strb	r2, [r3, #0]
	i2c1_byteTransmit(EEPROM_CHIP_ADDR << 1, buff,1);
 800151c:	193b      	adds	r3, r7, r4
 800151e:	2201      	movs	r2, #1
 8001520:	0019      	movs	r1, r3
 8001522:	20a0      	movs	r0, #160	; 0xa0
 8001524:	f000 f986 	bl	8001834 <i2c1_byteTransmit>
	buff[1] = i2c1_byteReceive(EEPROM_CHIP_ADDR << 1 | 1,1);
 8001528:	2101      	movs	r1, #1
 800152a:	20a1      	movs	r0, #161	; 0xa1
 800152c:	f000 f924 	bl	8001778 <i2c1_byteReceive>
 8001530:	0003      	movs	r3, r0
 8001532:	001a      	movs	r2, r3
 8001534:	193b      	adds	r3, r7, r4
 8001536:	705a      	strb	r2, [r3, #1]
	return buff[1];
 8001538:	193b      	adds	r3, r7, r4
 800153a:	785b      	ldrb	r3, [r3, #1]
}
 800153c:	0018      	movs	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	b005      	add	sp, #20
 8001542:	bd90      	pop	{r4, r7, pc}

08001544 <eeprom_1byte_write>:

void eeprom_1byte_write(uint8_t address, uint8_t data) {
 8001544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	0002      	movs	r2, r0
 800154c:	1dfb      	adds	r3, r7, #7
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	1dbb      	adds	r3, r7, #6
 8001552:	1c0a      	adds	r2, r1, #0
 8001554:	701a      	strb	r2, [r3, #0]
	char  buff[2];
	uint8_t stored_data;
	buff[0] = address;
 8001556:	250c      	movs	r5, #12
 8001558:	197b      	adds	r3, r7, r5
 800155a:	1dfa      	adds	r2, r7, #7
 800155c:	7812      	ldrb	r2, [r2, #0]
 800155e:	701a      	strb	r2, [r3, #0]
	buff[1] = data;
 8001560:	197b      	adds	r3, r7, r5
 8001562:	1dba      	adds	r2, r7, #6
 8001564:	7812      	ldrb	r2, [r2, #0]
 8001566:	705a      	strb	r2, [r3, #1]

	stored_data = eeprom_1byte_read(address);
 8001568:	260f      	movs	r6, #15
 800156a:	19bc      	adds	r4, r7, r6
 800156c:	1dfb      	adds	r3, r7, #7
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	0018      	movs	r0, r3
 8001572:	f7ff ffc8 	bl	8001506 <eeprom_1byte_read>
 8001576:	0003      	movs	r3, r0
 8001578:	7023      	strb	r3, [r4, #0]
	if (stored_data != data)
 800157a:	19ba      	adds	r2, r7, r6
 800157c:	1dbb      	adds	r3, r7, #6
 800157e:	7812      	ldrb	r2, [r2, #0]
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d005      	beq.n	8001592 <eeprom_1byte_write+0x4e>
		i2c1_byteTransmit(EEPROM_CHIP_ADDR << 1, buff,2);
 8001586:	197b      	adds	r3, r7, r5
 8001588:	2202      	movs	r2, #2
 800158a:	0019      	movs	r1, r3
 800158c:	20a0      	movs	r0, #160	; 0xa0
 800158e:	f000 f951 	bl	8001834 <i2c1_byteTransmit>
}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	46bd      	mov	sp, r7
 8001596:	b005      	add	sp, #20
 8001598:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800159a <eeprom_2byte_write>:

void eeprom_2byte_write(uint8_t addr, uint16_t data) {
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	0002      	movs	r2, r0
 80015a2:	1dfb      	adds	r3, r7, #7
 80015a4:	701a      	strb	r2, [r3, #0]
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	1c0a      	adds	r2, r1, #0
 80015aa:	801a      	strh	r2, [r3, #0]
	eeprom_1byte_write(addr, data & 0xff);
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	1dfb      	adds	r3, r7, #7
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	0011      	movs	r1, r2
 80015b8:	0018      	movs	r0, r3
 80015ba:	f7ff ffc3 	bl	8001544 <eeprom_1byte_write>
	HAL_Delay(5);
 80015be:	2005      	movs	r0, #5
 80015c0:	f001 ff1c 	bl	80033fc <HAL_Delay>
	eeprom_1byte_write(addr + 1, data >> 8);
 80015c4:	1dfb      	adds	r3, r7, #7
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	3301      	adds	r3, #1
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	0019      	movs	r1, r3
 80015d8:	0010      	movs	r0, r2
 80015da:	f7ff ffb3 	bl	8001544 <eeprom_1byte_write>
}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b002      	add	sp, #8
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <i2c1_init>:
 *      Author: sigmadev
 */

#include "i2c1.h"

void i2c1_init() {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0

	/* SCL PB8  as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE8_0);
 80015ec:	4b5b      	ldr	r3, [pc, #364]	; (800175c <i2c1_init+0x174>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b5a      	ldr	r3, [pc, #360]	; (800175c <i2c1_init+0x174>)
 80015f2:	495b      	ldr	r1, [pc, #364]	; (8001760 <i2c1_init+0x178>)
 80015f4:	400a      	ands	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE8_1);
 80015f8:	4b58      	ldr	r3, [pc, #352]	; (800175c <i2c1_init+0x174>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b57      	ldr	r3, [pc, #348]	; (800175c <i2c1_init+0x174>)
 80015fe:	2180      	movs	r1, #128	; 0x80
 8001600:	0289      	lsls	r1, r1, #10
 8001602:	430a      	orrs	r2, r1
 8001604:	601a      	str	r2, [r3, #0]
	/* SDC PB9 as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE9_0);
 8001606:	4b55      	ldr	r3, [pc, #340]	; (800175c <i2c1_init+0x174>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b54      	ldr	r3, [pc, #336]	; (800175c <i2c1_init+0x174>)
 800160c:	4955      	ldr	r1, [pc, #340]	; (8001764 <i2c1_init+0x17c>)
 800160e:	400a      	ands	r2, r1
 8001610:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE9_1);
 8001612:	4b52      	ldr	r3, [pc, #328]	; (800175c <i2c1_init+0x174>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b51      	ldr	r3, [pc, #324]	; (800175c <i2c1_init+0x174>)
 8001618:	2180      	movs	r1, #128	; 0x80
 800161a:	0309      	lsls	r1, r1, #12
 800161c:	430a      	orrs	r2, r1
 800161e:	601a      	str	r2, [r3, #0]
	/* SCL PB8 as open-drain */
	SET_BIT(GPIOB->OTYPER, GPIO_OTYPER_OT8);
 8001620:	4b4e      	ldr	r3, [pc, #312]	; (800175c <i2c1_init+0x174>)
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	4b4d      	ldr	r3, [pc, #308]	; (800175c <i2c1_init+0x174>)
 8001626:	2180      	movs	r1, #128	; 0x80
 8001628:	0049      	lsls	r1, r1, #1
 800162a:	430a      	orrs	r2, r1
 800162c:	605a      	str	r2, [r3, #4]
	/* SDC PB9 as open-drain */
	SET_BIT(GPIOB->OTYPER, GPIO_OTYPER_OT9);
 800162e:	4b4b      	ldr	r3, [pc, #300]	; (800175c <i2c1_init+0x174>)
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	4b4a      	ldr	r3, [pc, #296]	; (800175c <i2c1_init+0x174>)
 8001634:	2180      	movs	r1, #128	; 0x80
 8001636:	0089      	lsls	r1, r1, #2
 8001638:	430a      	orrs	r2, r1
 800163a:	605a      	str	r2, [r3, #4]
	/* SCL PB8 High Speed output */
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED8_0);
 800163c:	4b47      	ldr	r3, [pc, #284]	; (800175c <i2c1_init+0x174>)
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	4b46      	ldr	r3, [pc, #280]	; (800175c <i2c1_init+0x174>)
 8001642:	2180      	movs	r1, #128	; 0x80
 8001644:	0249      	lsls	r1, r1, #9
 8001646:	430a      	orrs	r2, r1
 8001648:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED8_1);
 800164a:	4b44      	ldr	r3, [pc, #272]	; (800175c <i2c1_init+0x174>)
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	4b43      	ldr	r3, [pc, #268]	; (800175c <i2c1_init+0x174>)
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	0289      	lsls	r1, r1, #10
 8001654:	430a      	orrs	r2, r1
 8001656:	609a      	str	r2, [r3, #8]
	/* SDC PB9  High Speed output */
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED9_0);
 8001658:	4b40      	ldr	r3, [pc, #256]	; (800175c <i2c1_init+0x174>)
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	4b3f      	ldr	r3, [pc, #252]	; (800175c <i2c1_init+0x174>)
 800165e:	2180      	movs	r1, #128	; 0x80
 8001660:	02c9      	lsls	r1, r1, #11
 8001662:	430a      	orrs	r2, r1
 8001664:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED9_1);
 8001666:	4b3d      	ldr	r3, [pc, #244]	; (800175c <i2c1_init+0x174>)
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	4b3c      	ldr	r3, [pc, #240]	; (800175c <i2c1_init+0x174>)
 800166c:	2180      	movs	r1, #128	; 0x80
 800166e:	0309      	lsls	r1, r1, #12
 8001670:	430a      	orrs	r2, r1
 8001672:	609a      	str	r2, [r3, #8]
	/* SCL PB8 as pull-up */
	CLEAR_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD8_0);
 8001674:	4b39      	ldr	r3, [pc, #228]	; (800175c <i2c1_init+0x174>)
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	4b38      	ldr	r3, [pc, #224]	; (800175c <i2c1_init+0x174>)
 800167a:	4939      	ldr	r1, [pc, #228]	; (8001760 <i2c1_init+0x178>)
 800167c:	400a      	ands	r2, r1
 800167e:	60da      	str	r2, [r3, #12]
	SET_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD8_1);
 8001680:	4b36      	ldr	r3, [pc, #216]	; (800175c <i2c1_init+0x174>)
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	4b35      	ldr	r3, [pc, #212]	; (800175c <i2c1_init+0x174>)
 8001686:	2180      	movs	r1, #128	; 0x80
 8001688:	0289      	lsls	r1, r1, #10
 800168a:	430a      	orrs	r2, r1
 800168c:	60da      	str	r2, [r3, #12]
	/* SDC PB9as pull-up */
	CLEAR_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD9_0);
 800168e:	4b33      	ldr	r3, [pc, #204]	; (800175c <i2c1_init+0x174>)
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	4b32      	ldr	r3, [pc, #200]	; (800175c <i2c1_init+0x174>)
 8001694:	4933      	ldr	r1, [pc, #204]	; (8001764 <i2c1_init+0x17c>)
 8001696:	400a      	ands	r2, r1
 8001698:	60da      	str	r2, [r3, #12]
	SET_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD9_1);
 800169a:	4b30      	ldr	r3, [pc, #192]	; (800175c <i2c1_init+0x174>)
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	4b2f      	ldr	r3, [pc, #188]	; (800175c <i2c1_init+0x174>)
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	0309      	lsls	r1, r1, #12
 80016a4:	430a      	orrs	r2, r1
 80016a6:	60da      	str	r2, [r3, #12]
	/*  PB8 as i2c SCL */
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_0);
 80016a8:	4b2c      	ldr	r3, [pc, #176]	; (800175c <i2c1_init+0x174>)
 80016aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ac:	4b2b      	ldr	r3, [pc, #172]	; (800175c <i2c1_init+0x174>)
 80016ae:	2101      	movs	r1, #1
 80016b0:	438a      	bics	r2, r1
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_1);
 80016b4:	4b29      	ldr	r3, [pc, #164]	; (800175c <i2c1_init+0x174>)
 80016b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016b8:	4b28      	ldr	r3, [pc, #160]	; (800175c <i2c1_init+0x174>)
 80016ba:	2102      	movs	r1, #2
 80016bc:	430a      	orrs	r2, r1
 80016be:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_2);
 80016c0:	4b26      	ldr	r3, [pc, #152]	; (800175c <i2c1_init+0x174>)
 80016c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c4:	4b25      	ldr	r3, [pc, #148]	; (800175c <i2c1_init+0x174>)
 80016c6:	2104      	movs	r1, #4
 80016c8:	430a      	orrs	r2, r1
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_3);
 80016cc:	4b23      	ldr	r3, [pc, #140]	; (800175c <i2c1_init+0x174>)
 80016ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <i2c1_init+0x174>)
 80016d2:	2108      	movs	r1, #8
 80016d4:	438a      	bics	r2, r1
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24
	/*  PB9 as i2c SDL */
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_0);
 80016d8:	4b20      	ldr	r3, [pc, #128]	; (800175c <i2c1_init+0x174>)
 80016da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016dc:	4b1f      	ldr	r3, [pc, #124]	; (800175c <i2c1_init+0x174>)
 80016de:	2110      	movs	r1, #16
 80016e0:	438a      	bics	r2, r1
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_1);
 80016e4:	4b1d      	ldr	r3, [pc, #116]	; (800175c <i2c1_init+0x174>)
 80016e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e8:	4b1c      	ldr	r3, [pc, #112]	; (800175c <i2c1_init+0x174>)
 80016ea:	2120      	movs	r1, #32
 80016ec:	430a      	orrs	r2, r1
 80016ee:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_2);
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <i2c1_init+0x174>)
 80016f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <i2c1_init+0x174>)
 80016f6:	2140      	movs	r1, #64	; 0x40
 80016f8:	430a      	orrs	r2, r1
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_3);
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <i2c1_init+0x174>)
 80016fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <i2c1_init+0x174>)
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	438a      	bics	r2, r1
 8001706:	625a      	str	r2, [r3, #36]	; 0x24

	/* select normal speed */
	SET_BIT(RCC->APBENR1, RCC_APBENR1_I2C1EN);
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <i2c1_init+0x180>)
 800170a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <i2c1_init+0x180>)
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	0389      	lsls	r1, r1, #14
 8001712:	430a      	orrs	r2, r1
 8001714:	63da      	str	r2, [r3, #60]	; 0x3c

	/* i2c disable */
	CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <i2c1_init+0x184>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <i2c1_init+0x184>)
 800171c:	2101      	movs	r1, #1
 800171e:	438a      	bics	r2, r1
 8001720:	601a      	str	r2, [r3, #0]
// 	ATOMIC_MODIFY_REG(I2C1->TIMINGR, I2C_TIMINGR_SCLDEL, 0x7);
// 	ATOMIC_MODIFY_REG(I2C1->TIMINGR, I2C_TIMINGR_SDADEL, 0x0);
// 	ATOMIC_MODIFY_REG(I2C1->TIMINGR, I2C_TIMINGR_SCLH, 0x7D);
// 	ATOMIC_MODIFY_REG(I2C1->TIMINGR, I2C_TIMINGR_SCLL, 0xBC);

	MODIFY_REG(I2C1->TIMINGR, 0X10111111U, 0X10707DBCU);
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <i2c1_init+0x184>)
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	4a12      	ldr	r2, [pc, #72]	; (8001770 <i2c1_init+0x188>)
 8001728:	401a      	ands	r2, r3
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <i2c1_init+0x184>)
 800172c:	4911      	ldr	r1, [pc, #68]	; (8001774 <i2c1_init+0x18c>)
 800172e:	430a      	orrs	r2, r1
 8001730:	611a      	str	r2, [r3, #16]
	/*i2c Rx interrupt enable */
	SET_BIT(I2C1->CR1, I2C_CR1_RXIE);
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <i2c1_init+0x184>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4b0d      	ldr	r3, [pc, #52]	; (800176c <i2c1_init+0x184>)
 8001738:	2104      	movs	r1, #4
 800173a:	430a      	orrs	r2, r1
 800173c:	601a      	str	r2, [r3, #0]
	SET_BIT(I2C1->CR1, I2C_CR1_TXIE);
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <i2c1_init+0x184>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <i2c1_init+0x184>)
 8001744:	2102      	movs	r1, #2
 8001746:	430a      	orrs	r2, r1
 8001748:	601a      	str	r2, [r3, #0]

	/* i2c enable */
	SET_BIT(I2C1->CR1, I2C_CR1_PE);
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <i2c1_init+0x184>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <i2c1_init+0x184>)
 8001750:	2101      	movs	r1, #1
 8001752:	430a      	orrs	r2, r1
 8001754:	601a      	str	r2, [r3, #0]
}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	50000400 	.word	0x50000400
 8001760:	fffeffff 	.word	0xfffeffff
 8001764:	fffbffff 	.word	0xfffbffff
 8001768:	40021000 	.word	0x40021000
 800176c:	40005400 	.word	0x40005400
 8001770:	ef8e8242 	.word	0xef8e8242
 8001774:	10707dbc 	.word	0x10707dbc

08001778 <i2c1_byteReceive>:

char i2c1_byteReceive(char saddr, uint8_t N) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	0002      	movs	r2, r0
 8001780:	1dfb      	adds	r3, r7, #7
 8001782:	701a      	strb	r2, [r3, #0]
 8001784:	1dbb      	adds	r3, r7, #6
 8001786:	1c0a      	adds	r2, r1, #0
 8001788:	701a      	strb	r2, [r3, #0]
	uint32_t counter = HAL_GetTick();
 800178a:	f001 fe2d 	bl	80033e8 <HAL_GetTick>
 800178e:	0003      	movs	r3, r0
 8001790:	60fb      	str	r3, [r7, #12]
	bool timeout = false;
 8001792:	230b      	movs	r3, #11
 8001794:	18fb      	adds	r3, r7, r3
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
	i2c1_start(saddr, READ, N);
 800179a:	1dbb      	adds	r3, r7, #6
 800179c:	781a      	ldrb	r2, [r3, #0]
 800179e:	1dfb      	adds	r3, r7, #7
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2101      	movs	r1, #1
 80017a4:	0018      	movs	r0, r3
 80017a6:	f000 f895 	bl	80018d4 <i2c1_start>

	char data = 0;
 80017aa:	2317      	movs	r3, #23
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N; i++) {
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	e022      	b.n	80017fe <i2c1_byteReceive+0x86>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
			if (HAL_GetTick() - counter > 500)
 80017b8:	f001 fe16 	bl	80033e8 <HAL_GetTick>
 80017bc:	0002      	movs	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad2      	subs	r2, r2, r3
 80017c2:	23fa      	movs	r3, #250	; 0xfa
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d901      	bls.n	80017ce <i2c1_byteReceive+0x56>
				return 0x00;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e02b      	b.n	8001826 <i2c1_byteReceive+0xae>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
 80017ce:	4b18      	ldr	r3, [pc, #96]	; (8001830 <i2c1_byteReceive+0xb8>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2204      	movs	r2, #4
 80017d4:	4013      	ands	r3, r2
 80017d6:	425a      	negs	r2, r3
 80017d8:	4153      	adcs	r3, r2
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	0019      	movs	r1, r3
 80017de:	230b      	movs	r3, #11
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2201      	movs	r2, #1
 80017e6:	4053      	eors	r3, r2
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	400b      	ands	r3, r1
 80017ec:	d1e4      	bne.n	80017b8 <i2c1_byteReceive+0x40>
		}
		data = READ_REG(I2C1->RXDR);
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <i2c1_byteReceive+0xb8>)
 80017f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017f2:	2317      	movs	r3, #23
 80017f4:	18fb      	adds	r3, r7, r3
 80017f6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N; i++) {
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	3301      	adds	r3, #1
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	1dbb      	adds	r3, r7, #6
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	429a      	cmp	r2, r3
 8001806:	dbe2      	blt.n	80017ce <i2c1_byteReceive+0x56>

	}
	while (!(READ_BIT(I2C1->ISR, I2C_ISR_STOPF))) {
 8001808:	46c0      	nop			; (mov r8, r8)
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <i2c1_byteReceive+0xb8>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	2220      	movs	r2, #32
 8001810:	4013      	ands	r3, r2
 8001812:	d0fa      	beq.n	800180a <i2c1_byteReceive+0x92>
	}
	SET_BIT(I2C1->ICR, I2C_ICR_STOPCF);
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <i2c1_byteReceive+0xb8>)
 8001816:	69da      	ldr	r2, [r3, #28]
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <i2c1_byteReceive+0xb8>)
 800181a:	2120      	movs	r1, #32
 800181c:	430a      	orrs	r2, r1
 800181e:	61da      	str	r2, [r3, #28]

	return data;
 8001820:	2317      	movs	r3, #23
 8001822:	18fb      	adds	r3, r7, r3
 8001824:	781b      	ldrb	r3, [r3, #0]
}
 8001826:	0018      	movs	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	b006      	add	sp, #24
 800182c:	bd80      	pop	{r7, pc}
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	40005400 	.word	0x40005400

08001834 <i2c1_byteTransmit>:

void i2c1_byteTransmit(char saddr, char *data, uint8_t N) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6039      	str	r1, [r7, #0]
 800183c:	0011      	movs	r1, r2
 800183e:	1dfb      	adds	r3, r7, #7
 8001840:	1c02      	adds	r2, r0, #0
 8001842:	701a      	strb	r2, [r3, #0]
 8001844:	1dbb      	adds	r3, r7, #6
 8001846:	1c0a      	adds	r2, r1, #0
 8001848:	701a      	strb	r2, [r3, #0]
	i2c1_start(saddr, WRITE, N);
 800184a:	1dbb      	adds	r3, r7, #6
 800184c:	781a      	ldrb	r2, [r3, #0]
 800184e:	1dfb      	adds	r3, r7, #7
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2100      	movs	r1, #0
 8001854:	0018      	movs	r0, r3
 8001856:	f000 f83d 	bl	80018d4 <i2c1_start>
	uint32_t counter = HAL_GetTick();
 800185a:	f001 fdc5 	bl	80033e8 <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < N; i++) {
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	e01d      	b.n	80018a4 <i2c1_byteTransmit+0x70>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXIS)) {

			if (HAL_GetTick() - counter > 500)
 8001868:	f001 fdbe 	bl	80033e8 <HAL_GetTick>
 800186c:	0002      	movs	r2, r0
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	1ad2      	subs	r2, r2, r3
 8001872:	23fa      	movs	r3, #250	; 0xfa
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	429a      	cmp	r2, r3
 8001878:	d826      	bhi.n	80018c8 <i2c1_byteTransmit+0x94>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXIS)) {
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <i2c1_byteTransmit+0x9c>)
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	2202      	movs	r2, #2
 8001880:	4013      	ands	r3, r2
 8001882:	d0f1      	beq.n	8001868 <i2c1_byteTransmit+0x34>
				return;
		}
		MODIFY_REG(I2C1->TXDR, I2C_TXDR_TXDATA, data[i]);
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <i2c1_byteTransmit+0x9c>)
 8001886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001888:	22ff      	movs	r2, #255	; 0xff
 800188a:	4393      	bics	r3, r2
 800188c:	001a      	movs	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6839      	ldr	r1, [r7, #0]
 8001892:	18cb      	adds	r3, r1, r3
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	0019      	movs	r1, r3
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <i2c1_byteTransmit+0x9c>)
 800189a:	430a      	orrs	r2, r1
 800189c:	629a      	str	r2, [r3, #40]	; 0x28
	for (int i = 0; i < N; i++) {
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	3301      	adds	r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	1dbb      	adds	r3, r7, #6
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	dbe5      	blt.n	800187a <i2c1_byteTransmit+0x46>
	}

	while (!READ_BIT(I2C1->ISR, I2C_ISR_STOPF)) {
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <i2c1_byteTransmit+0x9c>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	2220      	movs	r2, #32
 80018b6:	4013      	ands	r3, r2
 80018b8:	d0fa      	beq.n	80018b0 <i2c1_byteTransmit+0x7c>
	}
	SET_BIT(I2C1->ISR, I2C_ICR_STOPCF);
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <i2c1_byteTransmit+0x9c>)
 80018bc:	699a      	ldr	r2, [r3, #24]
 80018be:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <i2c1_byteTransmit+0x9c>)
 80018c0:	2120      	movs	r1, #32
 80018c2:	430a      	orrs	r2, r1
 80018c4:	619a      	str	r2, [r3, #24]
 80018c6:	e000      	b.n	80018ca <i2c1_byteTransmit+0x96>
				return;
 80018c8:	46c0      	nop			; (mov r8, r8)

}
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b004      	add	sp, #16
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40005400 	.word	0x40005400

080018d4 <i2c1_start>:

void i2c1_start(char saddr, uint8_t transfer_request, uint8_t N) {
 80018d4:	b590      	push	{r4, r7, lr}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	0004      	movs	r4, r0
 80018dc:	0008      	movs	r0, r1
 80018de:	0011      	movs	r1, r2
 80018e0:	1dfb      	adds	r3, r7, #7
 80018e2:	1c22      	adds	r2, r4, #0
 80018e4:	701a      	strb	r2, [r3, #0]
 80018e6:	1dbb      	adds	r3, r7, #6
 80018e8:	1c02      	adds	r2, r0, #0
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	1d7b      	adds	r3, r7, #5
 80018ee:	1c0a      	adds	r2, r1, #0
 80018f0:	701a      	strb	r2, [r3, #0]
	/*master 7 bit addressing mode */
	CLEAR_BIT(I2C1->CR2, I2C_CR2_ADD10);
 80018f2:	4b21      	ldr	r3, [pc, #132]	; (8001978 <i2c1_start+0xa4>)
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	4b20      	ldr	r3, [pc, #128]	; (8001978 <i2c1_start+0xa4>)
 80018f8:	4920      	ldr	r1, [pc, #128]	; (800197c <i2c1_start+0xa8>)
 80018fa:	400a      	ands	r2, r1
 80018fc:	605a      	str	r2, [r3, #4]
	/* set Slave address */
	MODIFY_REG(I2C1->CR2, I2C_CR2_SADD, saddr << I2C_CR2_SADD_Pos);
 80018fe:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <i2c1_start+0xa4>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	0a9b      	lsrs	r3, r3, #10
 8001904:	0299      	lsls	r1, r3, #10
 8001906:	1dfb      	adds	r3, r7, #7
 8001908:	781a      	ldrb	r2, [r3, #0]
 800190a:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <i2c1_start+0xa4>)
 800190c:	430a      	orrs	r2, r1
 800190e:	605a      	str	r2, [r3, #4]
	/* read 1 byte */
	MODIFY_REG(I2C1->CR2, I2C_CR2_NBYTES, N << I2C_CR2_NBYTES_Pos);
 8001910:	4b19      	ldr	r3, [pc, #100]	; (8001978 <i2c1_start+0xa4>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	4a1a      	ldr	r2, [pc, #104]	; (8001980 <i2c1_start+0xac>)
 8001916:	401a      	ands	r2, r3
 8001918:	1d7b      	adds	r3, r7, #5
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	041b      	lsls	r3, r3, #16
 800191e:	0019      	movs	r1, r3
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <i2c1_start+0xa4>)
 8001922:	430a      	orrs	r2, r1
 8001924:	605a      	str	r2, [r3, #4]
	/* stops when NBytes are transferred */
	SET_BIT(I2C1->CR2, I2C_CR2_AUTOEND);
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <i2c1_start+0xa4>)
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <i2c1_start+0xa4>)
 800192c:	2180      	movs	r1, #128	; 0x80
 800192e:	0489      	lsls	r1, r1, #18
 8001930:	430a      	orrs	r2, r1
 8001932:	605a      	str	r2, [r3, #4]
	/* set START condition  automatically changes to master */

	if (transfer_request == 1) {
 8001934:	1dbb      	adds	r3, r7, #6
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d107      	bne.n	800194c <i2c1_start+0x78>
		/* request a read transfer */
		SET_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 800193c:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <i2c1_start+0xa4>)
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <i2c1_start+0xa4>)
 8001942:	2180      	movs	r1, #128	; 0x80
 8001944:	00c9      	lsls	r1, r1, #3
 8001946:	430a      	orrs	r2, r1
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	e009      	b.n	8001960 <i2c1_start+0x8c>
	} else if (transfer_request == 0) {
 800194c:	1dbb      	adds	r3, r7, #6
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d105      	bne.n	8001960 <i2c1_start+0x8c>
		/* request a write transfer */
		CLEAR_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <i2c1_start+0xa4>)
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4b07      	ldr	r3, [pc, #28]	; (8001978 <i2c1_start+0xa4>)
 800195a:	490a      	ldr	r1, [pc, #40]	; (8001984 <i2c1_start+0xb0>)
 800195c:	400a      	ands	r2, r1
 800195e:	605a      	str	r2, [r3, #4]
	}

	SET_BIT(I2C1->CR2, I2C_CR2_START);
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <i2c1_start+0xa4>)
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <i2c1_start+0xa4>)
 8001966:	2180      	movs	r1, #128	; 0x80
 8001968:	0189      	lsls	r1, r1, #6
 800196a:	430a      	orrs	r2, r1
 800196c:	605a      	str	r2, [r3, #4]

}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	46bd      	mov	sp, r7
 8001972:	b003      	add	sp, #12
 8001974:	bd90      	pop	{r4, r7, pc}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	40005400 	.word	0x40005400
 800197c:	fffff7ff 	.word	0xfffff7ff
 8001980:	ff00ffff 	.word	0xff00ffff
 8001984:	fffffbff 	.word	0xfffffbff

08001988 <led_init>:





void led_init(void){
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

	/*CURRENT LOW LED PA12  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE12_0);
 800198c:	23a0      	movs	r3, #160	; 0xa0
 800198e:	05db      	lsls	r3, r3, #23
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	23a0      	movs	r3, #160	; 0xa0
 8001994:	05db      	lsls	r3, r3, #23
 8001996:	2180      	movs	r1, #128	; 0x80
 8001998:	0449      	lsls	r1, r1, #17
 800199a:	430a      	orrs	r2, r1
 800199c:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE12_1);
 800199e:	23a0      	movs	r3, #160	; 0xa0
 80019a0:	05db      	lsls	r3, r3, #23
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	23a0      	movs	r3, #160	; 0xa0
 80019a6:	05db      	lsls	r3, r3, #23
 80019a8:	492b      	ldr	r1, [pc, #172]	; (8001a58 <led_init+0xd0>)
 80019aa:	400a      	ands	r2, r1
 80019ac:	601a      	str	r2, [r3, #0]

	/*CURRENT NORMAL LED PA11  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE11_0);
 80019ae:	23a0      	movs	r3, #160	; 0xa0
 80019b0:	05db      	lsls	r3, r3, #23
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	23a0      	movs	r3, #160	; 0xa0
 80019b6:	05db      	lsls	r3, r3, #23
 80019b8:	2180      	movs	r1, #128	; 0x80
 80019ba:	03c9      	lsls	r1, r1, #15
 80019bc:	430a      	orrs	r2, r1
 80019be:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE11_1);
 80019c0:	23a0      	movs	r3, #160	; 0xa0
 80019c2:	05db      	lsls	r3, r3, #23
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	23a0      	movs	r3, #160	; 0xa0
 80019c8:	05db      	lsls	r3, r3, #23
 80019ca:	4924      	ldr	r1, [pc, #144]	; (8001a5c <led_init+0xd4>)
 80019cc:	400a      	ands	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]

	/*CURRENT HIGH  LED PA10  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE10_0);
 80019d0:	23a0      	movs	r3, #160	; 0xa0
 80019d2:	05db      	lsls	r3, r3, #23
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	23a0      	movs	r3, #160	; 0xa0
 80019d8:	05db      	lsls	r3, r3, #23
 80019da:	2180      	movs	r1, #128	; 0x80
 80019dc:	0349      	lsls	r1, r1, #13
 80019de:	430a      	orrs	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE10_1);
 80019e2:	23a0      	movs	r3, #160	; 0xa0
 80019e4:	05db      	lsls	r3, r3, #23
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	23a0      	movs	r3, #160	; 0xa0
 80019ea:	05db      	lsls	r3, r3, #23
 80019ec:	491c      	ldr	r1, [pc, #112]	; (8001a60 <led_init+0xd8>)
 80019ee:	400a      	ands	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]

	/*SYS_RP LED PC6  as output */
	SET_BIT(GPIOC->MODER, GPIO_MODER_MODE6_0);
 80019f2:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <led_init+0xdc>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <led_init+0xdc>)
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	0149      	lsls	r1, r1, #5
 80019fc:	430a      	orrs	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOC->MODER, GPIO_MODER_MODE6_1);
 8001a00:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <led_init+0xdc>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <led_init+0xdc>)
 8001a06:	4918      	ldr	r1, [pc, #96]	; (8001a68 <led_init+0xe0>)
 8001a08:	400a      	ands	r2, r1
 8001a0a:	601a      	str	r2, [r3, #0]

	/* TEMPERATURE OK  LED PA9  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE9_0);
 8001a0c:	23a0      	movs	r3, #160	; 0xa0
 8001a0e:	05db      	lsls	r3, r3, #23
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	23a0      	movs	r3, #160	; 0xa0
 8001a14:	05db      	lsls	r3, r3, #23
 8001a16:	2180      	movs	r1, #128	; 0x80
 8001a18:	02c9      	lsls	r1, r1, #11
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE9_1);
 8001a1e:	23a0      	movs	r3, #160	; 0xa0
 8001a20:	05db      	lsls	r3, r3, #23
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	23a0      	movs	r3, #160	; 0xa0
 8001a26:	05db      	lsls	r3, r3, #23
 8001a28:	4910      	ldr	r1, [pc, #64]	; (8001a6c <led_init+0xe4>)
 8001a2a:	400a      	ands	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]

	/* TEMPERATURE HIGH LED PA8  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE8_0);
 8001a2e:	23a0      	movs	r3, #160	; 0xa0
 8001a30:	05db      	lsls	r3, r3, #23
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	23a0      	movs	r3, #160	; 0xa0
 8001a36:	05db      	lsls	r3, r3, #23
 8001a38:	2180      	movs	r1, #128	; 0x80
 8001a3a:	0249      	lsls	r1, r1, #9
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE8_1);
 8001a40:	23a0      	movs	r3, #160	; 0xa0
 8001a42:	05db      	lsls	r3, r3, #23
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	23a0      	movs	r3, #160	; 0xa0
 8001a48:	05db      	lsls	r3, r3, #23
 8001a4a:	4909      	ldr	r1, [pc, #36]	; (8001a70 <led_init+0xe8>)
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]

}
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	fdffffff 	.word	0xfdffffff
 8001a5c:	ff7fffff 	.word	0xff7fffff
 8001a60:	ffdfffff 	.word	0xffdfffff
 8001a64:	50000800 	.word	0x50000800
 8001a68:	ffffdfff 	.word	0xffffdfff
 8001a6c:	fff7ffff 	.word	0xfff7ffff
 8001a70:	fffdffff 	.word	0xfffdffff

08001a74 <led_enable_kalive>:

void led_enable_kalive(uint32_t counter){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - counter > LED_KA_STATE_TIMEOUT)
 8001a7c:	f001 fcb4 	bl	80033e8 <HAL_GetTick>
 8001a80:	0002      	movs	r2, r0
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	1ad2      	subs	r2, r2, r3
 8001a86:	23fa      	movs	r3, #250	; 0xfa
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d904      	bls.n	8001a98 <led_enable_kalive+0x24>
		counter = HAL_GetTick();
 8001a8e:	f001 fcab 	bl	80033e8 <HAL_GetTick>
 8001a92:	0003      	movs	r3, r0
 8001a94:	607b      	str	r3, [r7, #4]
		if (HAL_GetTick() - counter > LED_KA_ON_TIMEOUT)
			sys_rp_led_off();
		else
			sys_rp_led_on();
	}
}
 8001a96:	e013      	b.n	8001ac0 <led_enable_kalive+0x4c>
		if (HAL_GetTick() - counter > LED_KA_ON_TIMEOUT)
 8001a98:	f001 fca6 	bl	80033e8 <HAL_GetTick>
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b32      	cmp	r3, #50	; 0x32
 8001aa4:	d906      	bls.n	8001ab4 <led_enable_kalive+0x40>
			sys_rp_led_off();
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <led_enable_kalive+0x54>)
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <led_enable_kalive+0x54>)
 8001aac:	2140      	movs	r1, #64	; 0x40
 8001aae:	438a      	bics	r2, r1
 8001ab0:	615a      	str	r2, [r3, #20]
}
 8001ab2:	e005      	b.n	8001ac0 <led_enable_kalive+0x4c>
			sys_rp_led_on();
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <led_enable_kalive+0x54>)
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <led_enable_kalive+0x54>)
 8001aba:	2140      	movs	r1, #64	; 0x40
 8001abc:	430a      	orrs	r2, r1
 8001abe:	615a      	str	r2, [r3, #20]
}
 8001ac0:	46c0      	nop			; (mov r8, r8)
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	50000800 	.word	0x50000800

08001acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ad2:	f001 fc0d 	bl	80032f0 <HAL_Init>

  /* USER CODE BEGIN Init */

	/* enable clock access ro GPIOA and GPIOB */
	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOAEN);
 8001ad6:	4beb      	ldr	r3, [pc, #940]	; (8001e84 <main+0x3b8>)
 8001ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ada:	4bea      	ldr	r3, [pc, #936]	; (8001e84 <main+0x3b8>)
 8001adc:	2101      	movs	r1, #1
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	635a      	str	r2, [r3, #52]	; 0x34
	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN);
 8001ae2:	4be8      	ldr	r3, [pc, #928]	; (8001e84 <main+0x3b8>)
 8001ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae6:	4be7      	ldr	r3, [pc, #924]	; (8001e84 <main+0x3b8>)
 8001ae8:	2102      	movs	r1, #2
 8001aea:	430a      	orrs	r2, r1
 8001aec:	635a      	str	r2, [r3, #52]	; 0x34

	/* PBA15 as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE15_0);
 8001aee:	23a0      	movs	r3, #160	; 0xa0
 8001af0:	05db      	lsls	r3, r3, #23
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	23a0      	movs	r3, #160	; 0xa0
 8001af6:	05db      	lsls	r3, r3, #23
 8001af8:	2180      	movs	r1, #128	; 0x80
 8001afa:	05c9      	lsls	r1, r1, #23
 8001afc:	430a      	orrs	r2, r1
 8001afe:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE15_1);
 8001b00:	23a0      	movs	r3, #160	; 0xa0
 8001b02:	05db      	lsls	r3, r3, #23
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	23a0      	movs	r3, #160	; 0xa0
 8001b08:	05db      	lsls	r3, r3, #23
 8001b0a:	0052      	lsls	r2, r2, #1
 8001b0c:	0852      	lsrs	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b10:	f000 fa9c 	bl	800204c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	module_init(&pa, POWER_AMPLIFIER, ID8);
 8001b14:	4bdc      	ldr	r3, [pc, #880]	; (8001e88 <main+0x3bc>)
 8001b16:	2208      	movs	r2, #8
 8001b18:	2109      	movs	r1, #9
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f000 fe3e 	bl	800279c <module_init>

	led_init();
 8001b20:	f7ff ff32 	bl	8001988 <led_init>
	i2c1_init();
 8001b24:	f7ff fd60 	bl	80015e8 <i2c1_init>
	uart1_init(HS16_CLK, BAUD_RATE, &uart1);
 8001b28:	4ad8      	ldr	r2, [pc, #864]	; (8001e8c <main+0x3c0>)
 8001b2a:	23e1      	movs	r3, #225	; 0xe1
 8001b2c:	025b      	lsls	r3, r3, #9
 8001b2e:	48d8      	ldr	r0, [pc, #864]	; (8001e90 <main+0x3c4>)
 8001b30:	0019      	movs	r1, r3
 8001b32:	f001 fa01 	bl	8002f38 <uart1_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
 // MX_GPIO_Init();
  MX_DMA_Init();
 8001b36:	f000 fbbf 	bl	80022b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b3a:	f000 fae5 	bl	8002108 <MX_ADC1_Init>
 // MX_USART1_UART_Init();
 // MX_IWDG_Init();
  /* USER CODE BEGIN 2 */

// Calibrate The ADC On Power-Up For Better Accuracy
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001b3e:	4bd5      	ldr	r3, [pc, #852]	; (8001e94 <main+0x3c8>)
 8001b40:	0018      	movs	r0, r3
 8001b42:	f002 fbe7 	bl	8004314 <HAL_ADCEx_Calibration_Start>
	uart1_send_str("LNA init\n\r");
 8001b46:	4bd4      	ldr	r3, [pc, #848]	; (8001e98 <main+0x3cc>)
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f001 fadb 	bl	8003104 <uart1_send_str>
//	uint8_t addrs[4] = {0};
//	i2c1_scanner(addrs);
	eeprom_1byte_write(0x01,10);
 8001b4e:	210a      	movs	r1, #10
 8001b50:	2001      	movs	r0, #1
 8001b52:	f7ff fcf7 	bl	8001544 <eeprom_1byte_write>

	HAL_Delay(10);
 8001b56:	200a      	movs	r0, #10
 8001b58:	f001 fc50 	bl	80033fc <HAL_Delay>

	uint8_t attenuation = eeprom_1byte_read(0x01);
 8001b5c:	1dfc      	adds	r4, r7, #7
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f7ff fcd1 	bl	8001506 <eeprom_1byte_read>
 8001b64:	0003      	movs	r3, r0
 8001b66:	7023      	strb	r3, [r4, #0]

	if (attenuation > 0 && attenuation < 30)
 8001b68:	1dfb      	adds	r3, r7, #7
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00b      	beq.n	8001b88 <main+0xbc>
 8001b70:	1dfb      	adds	r3, r7, #7
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b1d      	cmp	r3, #29
 8001b76:	d807      	bhi.n	8001b88 <main+0xbc>
		bda4601_set_initial_att(attenuation, STARTING_MILLIS);
 8001b78:	4ac8      	ldr	r2, [pc, #800]	; (8001e9c <main+0x3d0>)
 8001b7a:	1dfb      	adds	r3, r7, #7
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	0011      	movs	r1, r2
 8001b80:	0018      	movs	r0, r3
 8001b82:	f7ff fc77 	bl	8001474 <bda4601_set_initial_att>
 8001b86:	e003      	b.n	8001b90 <main+0xc4>
	else
		bda4601_set_att(0, 3);
 8001b88:	2103      	movs	r1, #3
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f7ff fbee 	bl	800136c <bda4601_set_att>

	if (eeprom_1byte_read(AD8363_ISCALIBRATED_ADDR)  != AD8363_IS_CALIBRATED_OK) {
 8001b90:	2007      	movs	r0, #7
 8001b92:	f7ff fcb8 	bl	8001506 <eeprom_1byte_read>
 8001b96:	0003      	movs	r3, r0
 8001b98:	2baa      	cmp	r3, #170	; 0xaa
 8001b9a:	d00a      	beq.n	8001bb2 <main+0xe6>
		eeprom_2byte_write(AD8363_ADC_MIN_ADDR, AD8363_ADC_MIN);
 8001b9c:	23f4      	movs	r3, #244	; 0xf4
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	2005      	movs	r0, #5
 8001ba4:	f7ff fcf9 	bl	800159a <eeprom_2byte_write>
		eeprom_2byte_write(AD8363_ADC_MAX_ADDR, AD8363_ADC_MAX);
 8001ba8:	4bbd      	ldr	r3, [pc, #756]	; (8001ea0 <main+0x3d4>)
 8001baa:	0019      	movs	r1, r3
 8001bac:	2003      	movs	r0, #3
 8001bae:	f7ff fcf4 	bl	800159a <eeprom_2byte_write>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, 4);
 8001bb2:	49bc      	ldr	r1, [pc, #752]	; (8001ea4 <main+0x3d8>)
 8001bb4:	4bb7      	ldr	r3, [pc, #732]	; (8001e94 <main+0x3c8>)
 8001bb6:	2204      	movs	r2, #4
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f001 ff43 	bl	8003a44 <HAL_ADC_Start_DMA>
	led.ka_counter = HAL_GetTick();
 8001bbe:	f001 fc13 	bl	80033e8 <HAL_GetTick>
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	4bb8      	ldr	r3, [pc, #736]	; (8001ea8 <main+0x3dc>)
 8001bc6:	601a      	str	r2, [r3, #0]

	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		switch (rs485.cmd) {
 8001bc8:	4bb8      	ldr	r3, [pc, #736]	; (8001eac <main+0x3e0>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	3b11      	subs	r3, #17
 8001bce:	2b15      	cmp	r3, #21
 8001bd0:	d900      	bls.n	8001bd4 <main+0x108>
 8001bd2:	e211      	b.n	8001ff8 <main+0x52c>
 8001bd4:	009a      	lsls	r2, r3, #2
 8001bd6:	4bb6      	ldr	r3, [pc, #728]	; (8001eb0 <main+0x3e4>)
 8001bd8:	18d3      	adds	r3, r2, r3
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	469f      	mov	pc, r3

		case QUERY_PARAMETER_LTEL:
			pa.pout =	ad8363_get_dbm(&ad8363, adc_media[AD8363_i]);
 8001bde:	4bb5      	ldr	r3, [pc, #724]	; (8001eb4 <main+0x3e8>)
 8001be0:	885a      	ldrh	r2, [r3, #2]
 8001be2:	4bb5      	ldr	r3, [pc, #724]	; (8001eb8 <main+0x3ec>)
 8001be4:	0011      	movs	r1, r2
 8001be6:	0018      	movs	r0, r3
 8001be8:	f7ff fb6c 	bl	80012c4 <ad8363_get_dbm>
 8001bec:	0003      	movs	r3, r0
 8001bee:	b25a      	sxtb	r2, r3
 8001bf0:	4ba5      	ldr	r3, [pc, #660]	; (8001e88 <main+0x3bc>)
 8001bf2:	709a      	strb	r2, [r3, #2]
			pa.current = ADC_CURRENT_FACTOR * adc_media[CURRENT_i] / 4096.0f;
 8001bf4:	4baf      	ldr	r3, [pc, #700]	; (8001eb4 <main+0x3e8>)
 8001bf6:	88db      	ldrh	r3, [r3, #6]
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f7ff f9cb 	bl	8000f94 <__aeabi_i2f>
 8001bfe:	1c03      	adds	r3, r0, #0
 8001c00:	4aae      	ldr	r2, [pc, #696]	; (8001ebc <main+0x3f0>)
 8001c02:	1c11      	adds	r1, r2, #0
 8001c04:	1c18      	adds	r0, r3, #0
 8001c06:	f7fe fed1 	bl	80009ac <__aeabi_fmul>
 8001c0a:	1c03      	adds	r3, r0, #0
 8001c0c:	218b      	movs	r1, #139	; 0x8b
 8001c0e:	05c9      	lsls	r1, r1, #23
 8001c10:	1c18      	adds	r0, r3, #0
 8001c12:	f7fe fdb3 	bl	800077c <__aeabi_fdiv>
 8001c16:	1c03      	adds	r3, r0, #0
 8001c18:	1c18      	adds	r0, r3, #0
 8001c1a:	f7fe fbf9 	bl	8000410 <__aeabi_f2uiz>
 8001c1e:	0003      	movs	r3, r0
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b99      	ldr	r3, [pc, #612]	; (8001e88 <main+0x3bc>)
 8001c24:	715a      	strb	r2, [r3, #5]
			pa.gain = get_db_gain(adc_media[GAIN_i]);
 8001c26:	4ba3      	ldr	r3, [pc, #652]	; (8001eb4 <main+0x3e8>)
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f000 fb62 	bl	80022f4 <get_db_gain>
 8001c30:	0003      	movs	r3, r0
 8001c32:	001a      	movs	r2, r3
 8001c34:	4b94      	ldr	r3, [pc, #592]	; (8001e88 <main+0x3bc>)
 8001c36:	705a      	strb	r2, [r3, #1]
			pa.att = eeprom_1byte_read(ATT_VALUE_ADDR);
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f7ff fc64 	bl	8001506 <eeprom_1byte_read>
 8001c3e:	0003      	movs	r3, r0
 8001c40:	001a      	movs	r2, r3
 8001c42:	4b91      	ldr	r3, [pc, #580]	; (8001e88 <main+0x3bc>)
 8001c44:	701a      	strb	r2, [r3, #0]
			pa.vswr = max4003_get_dbm(&max4003[MX_VSWR_i], adc_media[MX_VSWR_i]);
 8001c46:	4b9b      	ldr	r3, [pc, #620]	; (8001eb4 <main+0x3e8>)
 8001c48:	881a      	ldrh	r2, [r3, #0]
 8001c4a:	4b9d      	ldr	r3, [pc, #628]	; (8001ec0 <main+0x3f4>)
 8001c4c:	0011      	movs	r1, r2
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f000 fd50 	bl	80026f4 <max4003_get_dbm>
 8001c54:	0003      	movs	r3, r0
 8001c56:	0018      	movs	r0, r3
 8001c58:	f7ff f9ea 	bl	8001030 <__aeabi_ui2f>
 8001c5c:	1c02      	adds	r2, r0, #0
 8001c5e:	4b8a      	ldr	r3, [pc, #552]	; (8001e88 <main+0x3bc>)
 8001c60:	609a      	str	r2, [r3, #8]
			pa.pin = 	 max4003_get_dbm(&max4003[MX_PIN_i], adc_media[MX_PIN_i]);
 8001c62:	4b94      	ldr	r3, [pc, #592]	; (8001eb4 <main+0x3e8>)
 8001c64:	885a      	ldrh	r2, [r3, #2]
 8001c66:	4b97      	ldr	r3, [pc, #604]	; (8001ec4 <main+0x3f8>)
 8001c68:	0011      	movs	r1, r2
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f000 fd42 	bl	80026f4 <max4003_get_dbm>
 8001c70:	0003      	movs	r3, r0
 8001c72:	001a      	movs	r2, r3
 8001c74:	4b84      	ldr	r3, [pc, #528]	; (8001e88 <main+0x3bc>)
 8001c76:	711a      	strb	r2, [r3, #4]
			rs485.len = 14;
 8001c78:	4b8c      	ldr	r3, [pc, #560]	; (8001eac <main+0x3e0>)
 8001c7a:	220e      	movs	r2, #14
 8001c7c:	705a      	strb	r2, [r3, #1]
			rs485.frame = (uint8_t*) malloc(14);
 8001c7e:	200e      	movs	r0, #14
 8001c80:	f003 fedc 	bl	8005a3c <malloc>
 8001c84:	0003      	movs	r3, r0
 8001c86:	001a      	movs	r2, r3
 8001c88:	4b88      	ldr	r3, [pc, #544]	; (8001eac <main+0x3e0>)
 8001c8a:	605a      	str	r2, [r3, #4]
			rs485_set_query_frame(&rs485, &pa);
 8001c8c:	4a7e      	ldr	r2, [pc, #504]	; (8001e88 <main+0x3bc>)
 8001c8e:	4b87      	ldr	r3, [pc, #540]	; (8001eac <main+0x3e0>)
 8001c90:	0011      	movs	r1, r2
 8001c92:	0018      	movs	r0, r3
 8001c94:	f000 fde6 	bl	8002864 <rs485_set_query_frame>
			uart1_send_frame((char*) rs485.frame, 14);
 8001c98:	4b84      	ldr	r3, [pc, #528]	; (8001eac <main+0x3e0>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	210e      	movs	r1, #14
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f001 fa54 	bl	800314c <uart1_send_frame>
			free(rs485.frame);
 8001ca4:	4b81      	ldr	r3, [pc, #516]	; (8001eac <main+0x3e0>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f003 fed1 	bl	8005a50 <free>
			uart1_clean_buffer(&uart1);
 8001cae:	4b77      	ldr	r3, [pc, #476]	; (8001e8c <main+0x3c0>)
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f001 fa6c 	bl	800318e <uart1_clean_buffer>
			break;
 8001cb6:	e1ac      	b.n	8002012 <main+0x546>
		case SET_ATT_LTEL:
			pa.att = uart1.rx_buffer[6];
 8001cb8:	4b74      	ldr	r3, [pc, #464]	; (8001e8c <main+0x3c0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	799a      	ldrb	r2, [r3, #6]
 8001cbe:	4b72      	ldr	r3, [pc, #456]	; (8001e88 <main+0x3bc>)
 8001cc0:	701a      	strb	r2, [r3, #0]
			bda4601_set_att(pa.att, 3);
 8001cc2:	4b71      	ldr	r3, [pc, #452]	; (8001e88 <main+0x3bc>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2103      	movs	r1, #3
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f7ff fb4f 	bl	800136c <bda4601_set_att>
			eeprom_1byte_write(ATT_VALUE_ADDR, pa.att);
 8001cce:	4b6e      	ldr	r3, [pc, #440]	; (8001e88 <main+0x3bc>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f7ff fc35 	bl	8001544 <eeprom_1byte_write>
			sprintf(uart1.tx_buffer, "Attenuation %u\r\n", pa.att);
 8001cda:	4b6c      	ldr	r3, [pc, #432]	; (8001e8c <main+0x3c0>)
 8001cdc:	6858      	ldr	r0, [r3, #4]
 8001cde:	4b6a      	ldr	r3, [pc, #424]	; (8001e88 <main+0x3bc>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	001a      	movs	r2, r3
 8001ce4:	4b78      	ldr	r3, [pc, #480]	; (8001ec8 <main+0x3fc>)
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	f003 ffb8 	bl	8005c5c <siprintf>
			uart1_send_frame((char*) uart1.tx_buffer, TX_BUFFLEN);
 8001cec:	4b67      	ldr	r3, [pc, #412]	; (8001e8c <main+0x3c0>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2164      	movs	r1, #100	; 0x64
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f001 fa2a 	bl	800314c <uart1_send_frame>
			uart1_clean_buffer(&uart1);
 8001cf8:	4b64      	ldr	r3, [pc, #400]	; (8001e8c <main+0x3c0>)
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f001 fa47 	bl	800318e <uart1_clean_buffer>
			break;
 8001d00:	e187      	b.n	8002012 <main+0x546>
		case SET_POUT_MAX:
			ad8363_get_dbm(&ad8363, adc_media[AD8363_i]);
 8001d02:	4b6c      	ldr	r3, [pc, #432]	; (8001eb4 <main+0x3e8>)
 8001d04:	885a      	ldrh	r2, [r3, #2]
 8001d06:	4b6c      	ldr	r3, [pc, #432]	; (8001eb8 <main+0x3ec>)
 8001d08:	0011      	movs	r1, r2
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f7ff fada 	bl	80012c4 <ad8363_get_dbm>
			eeprom_2byte_write(AD8363_ADC_MAX_ADDR, adc_media[AD8363_i]);
 8001d10:	4b68      	ldr	r3, [pc, #416]	; (8001eb4 <main+0x3e8>)
 8001d12:	885b      	ldrh	r3, [r3, #2]
 8001d14:	0019      	movs	r1, r3
 8001d16:	2003      	movs	r0, #3
 8001d18:	f7ff fc3f 	bl	800159a <eeprom_2byte_write>
			HAL_Delay(5);
 8001d1c:	2005      	movs	r0, #5
 8001d1e:	f001 fb6d 	bl	80033fc <HAL_Delay>
			eeprom_1byte_write(AD8363_ISCALIBRATED_ADDR, AD8363_IS_CALIBRATED_OK);
 8001d22:	21aa      	movs	r1, #170	; 0xaa
 8001d24:	2007      	movs	r0, #7
 8001d26:	f7ff fc0d 	bl	8001544 <eeprom_1byte_write>
			uart1_send_str("Saved Pout max value\n\r");
 8001d2a:	4b68      	ldr	r3, [pc, #416]	; (8001ecc <main+0x400>)
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f001 f9e9 	bl	8003104 <uart1_send_str>
			uart1_clean_buffer(&uart1);
 8001d32:	4b56      	ldr	r3, [pc, #344]	; (8001e8c <main+0x3c0>)
 8001d34:	0018      	movs	r0, r3
 8001d36:	f001 fa2a 	bl	800318e <uart1_clean_buffer>
			break;
 8001d3a:	e16a      	b.n	8002012 <main+0x546>
		case SET_POUT_MIN:
			eeprom_2byte_write(AD8363_ADC_MIN_ADDR, adc_media[AD8363_i]);
 8001d3c:	4b5d      	ldr	r3, [pc, #372]	; (8001eb4 <main+0x3e8>)
 8001d3e:	885b      	ldrh	r3, [r3, #2]
 8001d40:	0019      	movs	r1, r3
 8001d42:	2005      	movs	r0, #5
 8001d44:	f7ff fc29 	bl	800159a <eeprom_2byte_write>
			HAL_Delay(5);
 8001d48:	2005      	movs	r0, #5
 8001d4a:	f001 fb57 	bl	80033fc <HAL_Delay>
			eeprom_1byte_write(AD8363_ISCALIBRATED_ADDR, AD8363_IS_CALIBRATED_OK);
 8001d4e:	21aa      	movs	r1, #170	; 0xaa
 8001d50:	2007      	movs	r0, #7
 8001d52:	f7ff fbf7 	bl	8001544 <eeprom_1byte_write>
			uart1_send_str("Saved Pout min value\n\r");
 8001d56:	4b5e      	ldr	r3, [pc, #376]	; (8001ed0 <main+0x404>)
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f001 f9d3 	bl	8003104 <uart1_send_str>
			uart1_clean_buffer(&uart1);
 8001d5e:	4b4b      	ldr	r3, [pc, #300]	; (8001e8c <main+0x3c0>)
 8001d60:	0018      	movs	r0, r3
 8001d62:	f001 fa14 	bl	800318e <uart1_clean_buffer>
			break;
 8001d66:	e154      	b.n	8002012 <main+0x546>
		case SET_PIN_MAX:
			ad8363_get_dbm(&ad8363, adc_media[AD8363_i]);
 8001d68:	4b52      	ldr	r3, [pc, #328]	; (8001eb4 <main+0x3e8>)
 8001d6a:	885a      	ldrh	r2, [r3, #2]
 8001d6c:	4b52      	ldr	r3, [pc, #328]	; (8001eb8 <main+0x3ec>)
 8001d6e:	0011      	movs	r1, r2
 8001d70:	0018      	movs	r0, r3
 8001d72:	f7ff faa7 	bl	80012c4 <ad8363_get_dbm>
			eeprom_2byte_write(AD8363_ADC_MAX_ADDR, adc_media[AD8363_i]);
 8001d76:	4b4f      	ldr	r3, [pc, #316]	; (8001eb4 <main+0x3e8>)
 8001d78:	885b      	ldrh	r3, [r3, #2]
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f7ff fc0c 	bl	800159a <eeprom_2byte_write>
			HAL_Delay(5);
 8001d82:	2005      	movs	r0, #5
 8001d84:	f001 fb3a 	bl	80033fc <HAL_Delay>
			eeprom_1byte_write(AD8363_ISCALIBRATED_ADDR, AD8363_IS_CALIBRATED_OK);
 8001d88:	21aa      	movs	r1, #170	; 0xaa
 8001d8a:	2007      	movs	r0, #7
 8001d8c:	f7ff fbda 	bl	8001544 <eeprom_1byte_write>
			uart1_send_str("Saved Pout max value\n\r");
 8001d90:	4b4e      	ldr	r3, [pc, #312]	; (8001ecc <main+0x400>)
 8001d92:	0018      	movs	r0, r3
 8001d94:	f001 f9b6 	bl	8003104 <uart1_send_str>
			uart1_clean_buffer(&uart1);
 8001d98:	4b3c      	ldr	r3, [pc, #240]	; (8001e8c <main+0x3c0>)
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f001 f9f7 	bl	800318e <uart1_clean_buffer>
			break;
 8001da0:	e137      	b.n	8002012 <main+0x546>
		case SET_PIN_MIN:
			eeprom_2byte_write(AD8363_ADC_MIN_ADDR, adc_media[AD8363_i]);
 8001da2:	4b44      	ldr	r3, [pc, #272]	; (8001eb4 <main+0x3e8>)
 8001da4:	885b      	ldrh	r3, [r3, #2]
 8001da6:	0019      	movs	r1, r3
 8001da8:	2005      	movs	r0, #5
 8001daa:	f7ff fbf6 	bl	800159a <eeprom_2byte_write>
			HAL_Delay(5);
 8001dae:	2005      	movs	r0, #5
 8001db0:	f001 fb24 	bl	80033fc <HAL_Delay>
			eeprom_1byte_write(AD8363_ISCALIBRATED_ADDR, AD8363_IS_CALIBRATED_OK);
 8001db4:	21aa      	movs	r1, #170	; 0xaa
 8001db6:	2007      	movs	r0, #7
 8001db8:	f7ff fbc4 	bl	8001544 <eeprom_1byte_write>
			uart1_send_str("Saved Pout min value\n\r");
 8001dbc:	4b44      	ldr	r3, [pc, #272]	; (8001ed0 <main+0x404>)
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f001 f9a0 	bl	8003104 <uart1_send_str>
			uart1_clean_buffer(&uart1);
 8001dc4:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <main+0x3c0>)
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f001 f9e1 	bl	800318e <uart1_clean_buffer>
			break;
 8001dcc:	e121      	b.n	8002012 <main+0x546>
		case SET_VSWR_MAX:
			ad8363_get_dbm(&ad8363, adc_media[AD8363_i]);
 8001dce:	4b39      	ldr	r3, [pc, #228]	; (8001eb4 <main+0x3e8>)
 8001dd0:	885a      	ldrh	r2, [r3, #2]
 8001dd2:	4b39      	ldr	r3, [pc, #228]	; (8001eb8 <main+0x3ec>)
 8001dd4:	0011      	movs	r1, r2
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f7ff fa74 	bl	80012c4 <ad8363_get_dbm>
			eeprom_2byte_write(AD8363_ADC_MAX_ADDR, adc_media[AD8363_i]);
 8001ddc:	4b35      	ldr	r3, [pc, #212]	; (8001eb4 <main+0x3e8>)
 8001dde:	885b      	ldrh	r3, [r3, #2]
 8001de0:	0019      	movs	r1, r3
 8001de2:	2003      	movs	r0, #3
 8001de4:	f7ff fbd9 	bl	800159a <eeprom_2byte_write>
			HAL_Delay(5);
 8001de8:	2005      	movs	r0, #5
 8001dea:	f001 fb07 	bl	80033fc <HAL_Delay>
			eeprom_1byte_write(AD8363_ISCALIBRATED_ADDR, AD8363_IS_CALIBRATED_OK);
 8001dee:	21aa      	movs	r1, #170	; 0xaa
 8001df0:	2007      	movs	r0, #7
 8001df2:	f7ff fba7 	bl	8001544 <eeprom_1byte_write>
			uart1_send_str("Saved Pout max value\n\r");
 8001df6:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <main+0x400>)
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f001 f983 	bl	8003104 <uart1_send_str>
			uart1_clean_buffer(&uart1);
 8001dfe:	4b23      	ldr	r3, [pc, #140]	; (8001e8c <main+0x3c0>)
 8001e00:	0018      	movs	r0, r3
 8001e02:	f001 f9c4 	bl	800318e <uart1_clean_buffer>
			break;
 8001e06:	e104      	b.n	8002012 <main+0x546>
		case SET_VSWR_MIN:
			eeprom_2byte_write(AD8363_ADC_MIN_ADDR, adc_media[AD8363_i]);
 8001e08:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <main+0x3e8>)
 8001e0a:	885b      	ldrh	r3, [r3, #2]
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	2005      	movs	r0, #5
 8001e10:	f7ff fbc3 	bl	800159a <eeprom_2byte_write>
			HAL_Delay(5);
 8001e14:	2005      	movs	r0, #5
 8001e16:	f001 faf1 	bl	80033fc <HAL_Delay>
			eeprom_1byte_write(AD8363_ISCALIBRATED_ADDR, AD8363_IS_CALIBRATED_OK);
 8001e1a:	21aa      	movs	r1, #170	; 0xaa
 8001e1c:	2007      	movs	r0, #7
 8001e1e:	f7ff fb91 	bl	8001544 <eeprom_1byte_write>
			uart1_send_str("Saved Pout min value\n\r");
 8001e22:	4b2b      	ldr	r3, [pc, #172]	; (8001ed0 <main+0x404>)
 8001e24:	0018      	movs	r0, r3
 8001e26:	f001 f96d 	bl	8003104 <uart1_send_str>
			uart1_clean_buffer(&uart1);
 8001e2a:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <main+0x3c0>)
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f001 f9ae 	bl	800318e <uart1_clean_buffer>
			break;
 8001e32:	e0ee      	b.n	8002012 <main+0x546>
		case QUERY_PARAMETER_STR:
			sprintf(uart1.tx_buffer,
 8001e34:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <main+0x3c0>)
 8001e36:	6858      	ldr	r0, [r3, #4]
					"Pout %d[dBm] Att %u[dB] Gain %u[dB] Pin %d[dBm] Curent %d[mA] Voltage %u[V]\r\n",
					pa.pout, pa.att, pa.gain, pa.pin, pa.current,
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <main+0x3bc>)
 8001e3a:	789b      	ldrb	r3, [r3, #2]
 8001e3c:	b25b      	sxtb	r3, r3
			sprintf(uart1.tx_buffer,
 8001e3e:	001e      	movs	r6, r3
					pa.pout, pa.att, pa.gain, pa.pin, pa.current,
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <main+0x3bc>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
			sprintf(uart1.tx_buffer,
 8001e44:	469c      	mov	ip, r3
					pa.pout, pa.att, pa.gain, pa.pin, pa.current,
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <main+0x3bc>)
 8001e48:	785b      	ldrb	r3, [r3, #1]
			sprintf(uart1.tx_buffer,
 8001e4a:	001a      	movs	r2, r3
					pa.pout, pa.att, pa.gain, pa.pin, pa.current,
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <main+0x3bc>)
 8001e4e:	791b      	ldrb	r3, [r3, #4]
			sprintf(uart1.tx_buffer,
 8001e50:	001c      	movs	r4, r3
					pa.pout, pa.att, pa.gain, pa.pin, pa.current,
 8001e52:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <main+0x3bc>)
 8001e54:	795b      	ldrb	r3, [r3, #5]
			sprintf(uart1.tx_buffer,
 8001e56:	001d      	movs	r5, r3
					(uint8_t) pa.voltage);
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <main+0x3bc>)
 8001e5a:	78db      	ldrb	r3, [r3, #3]
			sprintf(uart1.tx_buffer,
 8001e5c:	491d      	ldr	r1, [pc, #116]	; (8001ed4 <main+0x408>)
 8001e5e:	9303      	str	r3, [sp, #12]
 8001e60:	9502      	str	r5, [sp, #8]
 8001e62:	9401      	str	r4, [sp, #4]
 8001e64:	9200      	str	r2, [sp, #0]
 8001e66:	4663      	mov	r3, ip
 8001e68:	0032      	movs	r2, r6
 8001e6a:	f003 fef7 	bl	8005c5c <siprintf>
			uart1_send_frame((char*) uart1.tx_buffer, TX_BUFFLEN);
 8001e6e:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <main+0x3c0>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2164      	movs	r1, #100	; 0x64
 8001e74:	0018      	movs	r0, r3
 8001e76:	f001 f969 	bl	800314c <uart1_send_frame>
			uart1_clean_buffer(&uart1);
 8001e7a:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <main+0x3c0>)
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f001 f986 	bl	800318e <uart1_clean_buffer>
			break;
 8001e82:	e0c6      	b.n	8002012 <main+0x546>
 8001e84:	40021000 	.word	0x40021000
 8001e88:	20000158 	.word	0x20000158
 8001e8c:	2000014c 	.word	0x2000014c
 8001e90:	00f42400 	.word	0x00f42400
 8001e94:	2000008c 	.word	0x2000008c
 8001e98:	0800635c 	.word	0x0800635c
 8001e9c:	00001388 	.word	0x00001388
 8001ea0:	0000075b 	.word	0x0000075b
 8001ea4:	20000198 	.word	0x20000198
 8001ea8:	2000017c 	.word	0x2000017c
 8001eac:	20000168 	.word	0x20000168
 8001eb0:	080064ec 	.word	0x080064ec
 8001eb4:	20000294 	.word	0x20000294
 8001eb8:	20000170 	.word	0x20000170
 8001ebc:	43951746 	.word	0x43951746
 8001ec0:	20000174 	.word	0x20000174
 8001ec4:	20000178 	.word	0x20000178
 8001ec8:	08006368 	.word	0x08006368
 8001ecc:	0800637c 	.word	0x0800637c
 8001ed0:	08006394 	.word	0x08006394
 8001ed4:	080063ac 	.word	0x080063ac
		case QUERY_ADC:
			sprintf(uart1.tx_buffer,
 8001ed8:	4b51      	ldr	r3, [pc, #324]	; (8002020 <main+0x554>)
 8001eda:	6858      	ldr	r0, [r3, #4]
					"Pout %d  \t Gain %u \t Curent %u \t Voltage %u\r\n",
					adc_media[AD8363_i], adc_media[GAIN_i],
 8001edc:	4b51      	ldr	r3, [pc, #324]	; (8002024 <main+0x558>)
 8001ede:	885b      	ldrh	r3, [r3, #2]
			sprintf(uart1.tx_buffer,
 8001ee0:	001c      	movs	r4, r3
					adc_media[AD8363_i], adc_media[GAIN_i],
 8001ee2:	4b50      	ldr	r3, [pc, #320]	; (8002024 <main+0x558>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
			sprintf(uart1.tx_buffer,
 8001ee6:	001d      	movs	r5, r3
					adc_media[CURRENT_i], adc_media[VOLTAGE_i]);
 8001ee8:	4b4e      	ldr	r3, [pc, #312]	; (8002024 <main+0x558>)
 8001eea:	88db      	ldrh	r3, [r3, #6]
			sprintf(uart1.tx_buffer,
 8001eec:	001a      	movs	r2, r3
					adc_media[CURRENT_i], adc_media[VOLTAGE_i]);
 8001eee:	4b4d      	ldr	r3, [pc, #308]	; (8002024 <main+0x558>)
 8001ef0:	889b      	ldrh	r3, [r3, #4]
			sprintf(uart1.tx_buffer,
 8001ef2:	494d      	ldr	r1, [pc, #308]	; (8002028 <main+0x55c>)
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	9200      	str	r2, [sp, #0]
 8001ef8:	002b      	movs	r3, r5
 8001efa:	0022      	movs	r2, r4
 8001efc:	f003 feae 	bl	8005c5c <siprintf>
			uart1_send_frame((char*) uart1.tx_buffer, TX_BUFFLEN);
 8001f00:	4b47      	ldr	r3, [pc, #284]	; (8002020 <main+0x554>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2164      	movs	r1, #100	; 0x64
 8001f06:	0018      	movs	r0, r3
 8001f08:	f001 f920 	bl	800314c <uart1_send_frame>
			uart1_clean_buffer(&uart1);
 8001f0c:	4b44      	ldr	r3, [pc, #272]	; (8002020 <main+0x554>)
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f001 f93d 	bl	800318e <uart1_clean_buffer>
			break;
 8001f14:	e07d      	b.n	8002012 <main+0x546>
		case QUERY_PARAMETER_SIGMA:

			pa.pout =	ad8363_get_dbm(&ad8363, adc_media[AD8363_i]);
 8001f16:	4b43      	ldr	r3, [pc, #268]	; (8002024 <main+0x558>)
 8001f18:	885a      	ldrh	r2, [r3, #2]
 8001f1a:	4b44      	ldr	r3, [pc, #272]	; (800202c <main+0x560>)
 8001f1c:	0011      	movs	r1, r2
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f7ff f9d0 	bl	80012c4 <ad8363_get_dbm>
 8001f24:	0003      	movs	r3, r0
 8001f26:	b25a      	sxtb	r2, r3
 8001f28:	4b41      	ldr	r3, [pc, #260]	; (8002030 <main+0x564>)
 8001f2a:	709a      	strb	r2, [r3, #2]
			pa.current = ADC_CURRENT_FACTOR * adc_media[CURRENT_i] / 4096.0f;
 8001f2c:	4b3d      	ldr	r3, [pc, #244]	; (8002024 <main+0x558>)
 8001f2e:	88db      	ldrh	r3, [r3, #6]
 8001f30:	0018      	movs	r0, r3
 8001f32:	f7ff f82f 	bl	8000f94 <__aeabi_i2f>
 8001f36:	1c03      	adds	r3, r0, #0
 8001f38:	4a3e      	ldr	r2, [pc, #248]	; (8002034 <main+0x568>)
 8001f3a:	1c11      	adds	r1, r2, #0
 8001f3c:	1c18      	adds	r0, r3, #0
 8001f3e:	f7fe fd35 	bl	80009ac <__aeabi_fmul>
 8001f42:	1c03      	adds	r3, r0, #0
 8001f44:	218b      	movs	r1, #139	; 0x8b
 8001f46:	05c9      	lsls	r1, r1, #23
 8001f48:	1c18      	adds	r0, r3, #0
 8001f4a:	f7fe fc17 	bl	800077c <__aeabi_fdiv>
 8001f4e:	1c03      	adds	r3, r0, #0
 8001f50:	1c18      	adds	r0, r3, #0
 8001f52:	f7fe fa5d 	bl	8000410 <__aeabi_f2uiz>
 8001f56:	0003      	movs	r3, r0
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4b35      	ldr	r3, [pc, #212]	; (8002030 <main+0x564>)
 8001f5c:	715a      	strb	r2, [r3, #5]
			pa.gain = get_db_gain(adc_media[GAIN_i]);
 8001f5e:	4b31      	ldr	r3, [pc, #196]	; (8002024 <main+0x558>)
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	0018      	movs	r0, r3
 8001f64:	f000 f9c6 	bl	80022f4 <get_db_gain>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	001a      	movs	r2, r3
 8001f6c:	4b30      	ldr	r3, [pc, #192]	; (8002030 <main+0x564>)
 8001f6e:	705a      	strb	r2, [r3, #1]
			pa.att = eeprom_1byte_read(ATT_VALUE_ADDR);
 8001f70:	2000      	movs	r0, #0
 8001f72:	f7ff fac8 	bl	8001506 <eeprom_1byte_read>
 8001f76:	0003      	movs	r3, r0
 8001f78:	001a      	movs	r2, r3
 8001f7a:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <main+0x564>)
 8001f7c:	701a      	strb	r2, [r3, #0]
			pa.pin = 	 max4003_get_dbm(&max4003[MX_PIN_i], adc_media[MX_PIN_i]);
 8001f7e:	4b29      	ldr	r3, [pc, #164]	; (8002024 <main+0x558>)
 8001f80:	885a      	ldrh	r2, [r3, #2]
 8001f82:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <main+0x56c>)
 8001f84:	0011      	movs	r1, r2
 8001f86:	0018      	movs	r0, r3
 8001f88:	f000 fbb4 	bl	80026f4 <max4003_get_dbm>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	001a      	movs	r2, r3
 8001f90:	4b27      	ldr	r3, [pc, #156]	; (8002030 <main+0x564>)
 8001f92:	711a      	strb	r2, [r3, #4]
			pa.voltage = ADC_VOLTAGE_FACTOR * (float) adc_media[VOLTAGE_i];
 8001f94:	4b23      	ldr	r3, [pc, #140]	; (8002024 <main+0x558>)
 8001f96:	889b      	ldrh	r3, [r3, #4]
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f7ff f849 	bl	8001030 <__aeabi_ui2f>
 8001f9e:	1c03      	adds	r3, r0, #0
 8001fa0:	4a26      	ldr	r2, [pc, #152]	; (800203c <main+0x570>)
 8001fa2:	1c11      	adds	r1, r2, #0
 8001fa4:	1c18      	adds	r0, r3, #0
 8001fa6:	f7fe fd01 	bl	80009ac <__aeabi_fmul>
 8001faa:	1c03      	adds	r3, r0, #0
 8001fac:	1c18      	adds	r0, r3, #0
 8001fae:	f7fe fa2f 	bl	8000410 <__aeabi_f2uiz>
 8001fb2:	0003      	movs	r3, r0
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <main+0x564>)
 8001fb8:	70da      	strb	r2, [r3, #3]
			pa.vswr = max4003_get_dbm(&max4003[MX_VSWR_i], adc_media[MX_VSWR_i]);
 8001fba:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <main+0x558>)
 8001fbc:	881a      	ldrh	r2, [r3, #0]
 8001fbe:	4b20      	ldr	r3, [pc, #128]	; (8002040 <main+0x574>)
 8001fc0:	0011      	movs	r1, r2
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f000 fb96 	bl	80026f4 <max4003_get_dbm>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f7ff f830 	bl	8001030 <__aeabi_ui2f>
 8001fd0:	1c02      	adds	r2, r0, #0
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <main+0x564>)
 8001fd4:	609a      	str	r2, [r3, #8]

			rs485_set_query_frame(&rs485, &pa);
 8001fd6:	4a16      	ldr	r2, [pc, #88]	; (8002030 <main+0x564>)
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <main+0x578>)
 8001fda:	0011      	movs	r1, r2
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f000 fc41 	bl	8002864 <rs485_set_query_frame>
			uart1_send_frame((char*) rs485.frame, 14);
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <main+0x578>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	210e      	movs	r1, #14
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f001 f8af 	bl	800314c <uart1_send_frame>
			uart1_clean_buffer(&uart1);
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <main+0x554>)
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f001 f8cc 	bl	800318e <uart1_clean_buffer>
			break;
 8001ff6:	e00c      	b.n	8002012 <main+0x546>
		default:
			rs485.cmd = rs485_check_frame(uart1.rx_buffer, uart1.rx_count);
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <main+0x554>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <main+0x554>)
 8001ffe:	7a1b      	ldrb	r3, [r3, #8]
 8002000:	0019      	movs	r1, r3
 8002002:	0010      	movs	r0, r2
 8002004:	f000 fbf4 	bl	80027f0 <rs485_check_frame>
 8002008:	0003      	movs	r3, r0
 800200a:	001a      	movs	r2, r3
 800200c:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <main+0x578>)
 800200e:	701a      	strb	r2, [r3, #0]
			break;
 8002010:	46c0      	nop			; (mov r8, r8)
		}

		led_enable_kalive(led.sysrp_counter);
 8002012:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <main+0x57c>)
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	0018      	movs	r0, r3
 8002018:	f7ff fd2c 	bl	8001a74 <led_enable_kalive>
		switch (rs485.cmd) {
 800201c:	e5d4      	b.n	8001bc8 <main+0xfc>
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	2000014c 	.word	0x2000014c
 8002024:	20000294 	.word	0x20000294
 8002028:	080063fc 	.word	0x080063fc
 800202c:	20000170 	.word	0x20000170
 8002030:	20000158 	.word	0x20000158
 8002034:	43951746 	.word	0x43951746
 8002038:	20000178 	.word	0x20000178
 800203c:	3bf2a006 	.word	0x3bf2a006
 8002040:	20000174 	.word	0x20000174
 8002044:	20000168 	.word	0x20000168
 8002048:	2000017c 	.word	0x2000017c

0800204c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b093      	sub	sp, #76	; 0x4c
 8002050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002052:	2414      	movs	r4, #20
 8002054:	193b      	adds	r3, r7, r4
 8002056:	0018      	movs	r0, r3
 8002058:	2334      	movs	r3, #52	; 0x34
 800205a:	001a      	movs	r2, r3
 800205c:	2100      	movs	r1, #0
 800205e:	f003 fd01 	bl	8005a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	0018      	movs	r0, r3
 8002066:	2310      	movs	r3, #16
 8002068:	001a      	movs	r2, r3
 800206a:	2100      	movs	r1, #0
 800206c:	f003 fcfa 	bl	8005a64 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	0018      	movs	r0, r3
 8002076:	f002 feb7 	bl	8004de8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800207a:	193b      	adds	r3, r7, r4
 800207c:	220a      	movs	r2, #10
 800207e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002080:	193b      	adds	r3, r7, r4
 8002082:	2280      	movs	r2, #128	; 0x80
 8002084:	0052      	lsls	r2, r2, #1
 8002086:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002088:	0021      	movs	r1, r4
 800208a:	187b      	adds	r3, r7, r1
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002090:	187b      	adds	r3, r7, r1
 8002092:	2240      	movs	r2, #64	; 0x40
 8002094:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002096:	187b      	adds	r3, r7, r1
 8002098:	2201      	movs	r2, #1
 800209a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800209c:	187b      	adds	r3, r7, r1
 800209e:	2202      	movs	r2, #2
 80020a0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020a2:	187b      	adds	r3, r7, r1
 80020a4:	2202      	movs	r2, #2
 80020a6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80020a8:	187b      	adds	r3, r7, r1
 80020aa:	2210      	movs	r2, #16
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 80020ae:	187b      	adds	r3, r7, r1
 80020b0:	2210      	movs	r2, #16
 80020b2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020b4:	187b      	adds	r3, r7, r1
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	0292      	lsls	r2, r2, #10
 80020ba:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020bc:	187b      	adds	r3, r7, r1
 80020be:	2280      	movs	r2, #128	; 0x80
 80020c0:	0592      	lsls	r2, r2, #22
 80020c2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	0018      	movs	r0, r3
 80020c8:	f002 fece 	bl	8004e68 <HAL_RCC_OscConfig>
 80020cc:	1e03      	subs	r3, r0, #0
 80020ce:	d001      	beq.n	80020d4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80020d0:	f000 fb0a 	bl	80026e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	2207      	movs	r2, #7
 80020d8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	2202      	movs	r2, #2
 80020de:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	2200      	movs	r2, #0
 80020ea:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020ec:	1d3b      	adds	r3, r7, #4
 80020ee:	2102      	movs	r1, #2
 80020f0:	0018      	movs	r0, r3
 80020f2:	f003 f9c9 	bl	8005488 <HAL_RCC_ClockConfig>
 80020f6:	1e03      	subs	r3, r0, #0
 80020f8:	d001      	beq.n	80020fe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80020fa:	f000 faf5 	bl	80026e8 <Error_Handler>
  }
}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	46bd      	mov	sp, r7
 8002102:	b013      	add	sp, #76	; 0x4c
 8002104:	bd90      	pop	{r4, r7, pc}
	...

08002108 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800210e:	1d3b      	adds	r3, r7, #4
 8002110:	0018      	movs	r0, r3
 8002112:	230c      	movs	r3, #12
 8002114:	001a      	movs	r2, r3
 8002116:	2100      	movs	r1, #0
 8002118:	f003 fca4 	bl	8005a64 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800211c:	4b5e      	ldr	r3, [pc, #376]	; (8002298 <MX_ADC1_Init+0x190>)
 800211e:	4a5f      	ldr	r2, [pc, #380]	; (800229c <MX_ADC1_Init+0x194>)
 8002120:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002122:	4b5d      	ldr	r3, [pc, #372]	; (8002298 <MX_ADC1_Init+0x190>)
 8002124:	2280      	movs	r2, #128	; 0x80
 8002126:	05d2      	lsls	r2, r2, #23
 8002128:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800212a:	4b5b      	ldr	r3, [pc, #364]	; (8002298 <MX_ADC1_Init+0x190>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002130:	4b59      	ldr	r3, [pc, #356]	; (8002298 <MX_ADC1_Init+0x190>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002136:	4b58      	ldr	r3, [pc, #352]	; (8002298 <MX_ADC1_Init+0x190>)
 8002138:	2280      	movs	r2, #128	; 0x80
 800213a:	0392      	lsls	r2, r2, #14
 800213c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800213e:	4b56      	ldr	r3, [pc, #344]	; (8002298 <MX_ADC1_Init+0x190>)
 8002140:	2204      	movs	r2, #4
 8002142:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002144:	4b54      	ldr	r3, [pc, #336]	; (8002298 <MX_ADC1_Init+0x190>)
 8002146:	2200      	movs	r2, #0
 8002148:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800214a:	4b53      	ldr	r3, [pc, #332]	; (8002298 <MX_ADC1_Init+0x190>)
 800214c:	2200      	movs	r2, #0
 800214e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002150:	4b51      	ldr	r3, [pc, #324]	; (8002298 <MX_ADC1_Init+0x190>)
 8002152:	2200      	movs	r2, #0
 8002154:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 7;
 8002156:	4b50      	ldr	r3, [pc, #320]	; (8002298 <MX_ADC1_Init+0x190>)
 8002158:	2207      	movs	r2, #7
 800215a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800215c:	4b4e      	ldr	r3, [pc, #312]	; (8002298 <MX_ADC1_Init+0x190>)
 800215e:	2220      	movs	r2, #32
 8002160:	2100      	movs	r1, #0
 8002162:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002164:	4b4c      	ldr	r3, [pc, #304]	; (8002298 <MX_ADC1_Init+0x190>)
 8002166:	2200      	movs	r2, #0
 8002168:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800216a:	4b4b      	ldr	r3, [pc, #300]	; (8002298 <MX_ADC1_Init+0x190>)
 800216c:	2200      	movs	r2, #0
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002170:	4b49      	ldr	r3, [pc, #292]	; (8002298 <MX_ADC1_Init+0x190>)
 8002172:	222c      	movs	r2, #44	; 0x2c
 8002174:	2100      	movs	r1, #0
 8002176:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002178:	4b47      	ldr	r3, [pc, #284]	; (8002298 <MX_ADC1_Init+0x190>)
 800217a:	2200      	movs	r2, #0
 800217c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800217e:	4b46      	ldr	r3, [pc, #280]	; (8002298 <MX_ADC1_Init+0x190>)
 8002180:	2200      	movs	r2, #0
 8002182:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002184:	4b44      	ldr	r3, [pc, #272]	; (8002298 <MX_ADC1_Init+0x190>)
 8002186:	2200      	movs	r2, #0
 8002188:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800218a:	4b43      	ldr	r3, [pc, #268]	; (8002298 <MX_ADC1_Init+0x190>)
 800218c:	223c      	movs	r2, #60	; 0x3c
 800218e:	2100      	movs	r1, #0
 8002190:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002192:	4b41      	ldr	r3, [pc, #260]	; (8002298 <MX_ADC1_Init+0x190>)
 8002194:	2200      	movs	r2, #0
 8002196:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002198:	4b3f      	ldr	r3, [pc, #252]	; (8002298 <MX_ADC1_Init+0x190>)
 800219a:	0018      	movs	r0, r3
 800219c:	f001 faaa 	bl	80036f4 <HAL_ADC_Init>
 80021a0:	1e03      	subs	r3, r0, #0
 80021a2:	d001      	beq.n	80021a8 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80021a4:	f000 faa0 	bl	80026e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80021a8:	1d3b      	adds	r3, r7, #4
 80021aa:	2201      	movs	r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	2200      	movs	r2, #0
 80021b2:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80021b4:	1d3b      	adds	r3, r7, #4
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021ba:	1d3a      	adds	r2, r7, #4
 80021bc:	4b36      	ldr	r3, [pc, #216]	; (8002298 <MX_ADC1_Init+0x190>)
 80021be:	0011      	movs	r1, r2
 80021c0:	0018      	movs	r0, r3
 80021c2:	f001 fcdd 	bl	8003b80 <HAL_ADC_ConfigChannel>
 80021c6:	1e03      	subs	r3, r0, #0
 80021c8:	d001      	beq.n	80021ce <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80021ca:	f000 fa8d 	bl	80026e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	4a33      	ldr	r2, [pc, #204]	; (80022a0 <MX_ADC1_Init+0x198>)
 80021d2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	2204      	movs	r2, #4
 80021d8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021da:	1d3a      	adds	r2, r7, #4
 80021dc:	4b2e      	ldr	r3, [pc, #184]	; (8002298 <MX_ADC1_Init+0x190>)
 80021de:	0011      	movs	r1, r2
 80021e0:	0018      	movs	r0, r3
 80021e2:	f001 fccd 	bl	8003b80 <HAL_ADC_ConfigChannel>
 80021e6:	1e03      	subs	r3, r0, #0
 80021e8:	d001      	beq.n	80021ee <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80021ea:	f000 fa7d 	bl	80026e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	4a2c      	ldr	r2, [pc, #176]	; (80022a4 <MX_ADC1_Init+0x19c>)
 80021f2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80021f4:	1d3b      	adds	r3, r7, #4
 80021f6:	2208      	movs	r2, #8
 80021f8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021fa:	1d3a      	adds	r2, r7, #4
 80021fc:	4b26      	ldr	r3, [pc, #152]	; (8002298 <MX_ADC1_Init+0x190>)
 80021fe:	0011      	movs	r1, r2
 8002200:	0018      	movs	r0, r3
 8002202:	f001 fcbd 	bl	8003b80 <HAL_ADC_ConfigChannel>
 8002206:	1e03      	subs	r3, r0, #0
 8002208:	d001      	beq.n	800220e <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800220a:	f000 fa6d 	bl	80026e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	4a25      	ldr	r2, [pc, #148]	; (80022a8 <MX_ADC1_Init+0x1a0>)
 8002212:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002214:	1d3b      	adds	r3, r7, #4
 8002216:	220c      	movs	r2, #12
 8002218:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800221a:	1d3a      	adds	r2, r7, #4
 800221c:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <MX_ADC1_Init+0x190>)
 800221e:	0011      	movs	r1, r2
 8002220:	0018      	movs	r0, r3
 8002222:	f001 fcad 	bl	8003b80 <HAL_ADC_ConfigChannel>
 8002226:	1e03      	subs	r3, r0, #0
 8002228:	d001      	beq.n	800222e <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 800222a:	f000 fa5d 	bl	80026e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	4a1e      	ldr	r2, [pc, #120]	; (80022ac <MX_ADC1_Init+0x1a4>)
 8002232:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	2210      	movs	r2, #16
 8002238:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800223a:	1d3a      	adds	r2, r7, #4
 800223c:	4b16      	ldr	r3, [pc, #88]	; (8002298 <MX_ADC1_Init+0x190>)
 800223e:	0011      	movs	r1, r2
 8002240:	0018      	movs	r0, r3
 8002242:	f001 fc9d 	bl	8003b80 <HAL_ADC_ConfigChannel>
 8002246:	1e03      	subs	r3, r0, #0
 8002248:	d001      	beq.n	800224e <MX_ADC1_Init+0x146>
  {
    Error_Handler();
 800224a:	f000 fa4d 	bl	80026e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	4a17      	ldr	r2, [pc, #92]	; (80022b0 <MX_ADC1_Init+0x1a8>)
 8002252:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002254:	1d3b      	adds	r3, r7, #4
 8002256:	2214      	movs	r2, #20
 8002258:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800225a:	1d3a      	adds	r2, r7, #4
 800225c:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <MX_ADC1_Init+0x190>)
 800225e:	0011      	movs	r1, r2
 8002260:	0018      	movs	r0, r3
 8002262:	f001 fc8d 	bl	8003b80 <HAL_ADC_ConfigChannel>
 8002266:	1e03      	subs	r3, r0, #0
 8002268:	d001      	beq.n	800226e <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 800226a:	f000 fa3d 	bl	80026e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	4a10      	ldr	r2, [pc, #64]	; (80022b4 <MX_ADC1_Init+0x1ac>)
 8002272:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	2218      	movs	r2, #24
 8002278:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800227a:	1d3a      	adds	r2, r7, #4
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <MX_ADC1_Init+0x190>)
 800227e:	0011      	movs	r1, r2
 8002280:	0018      	movs	r0, r3
 8002282:	f001 fc7d 	bl	8003b80 <HAL_ADC_ConfigChannel>
 8002286:	1e03      	subs	r3, r0, #0
 8002288:	d001      	beq.n	800228e <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 800228a:	f000 fa2d 	bl	80026e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	46bd      	mov	sp, r7
 8002292:	b004      	add	sp, #16
 8002294:	bd80      	pop	{r7, pc}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	2000008c 	.word	0x2000008c
 800229c:	40012400 	.word	0x40012400
 80022a0:	04000002 	.word	0x04000002
 80022a4:	08000004 	.word	0x08000004
 80022a8:	10000010 	.word	0x10000010
 80022ac:	14000020 	.word	0x14000020
 80022b0:	18000040 	.word	0x18000040
 80022b4:	b0001000 	.word	0xb0001000

080022b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <MX_DMA_Init+0x38>)
 80022c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <MX_DMA_Init+0x38>)
 80022c4:	2101      	movs	r1, #1
 80022c6:	430a      	orrs	r2, r1
 80022c8:	639a      	str	r2, [r3, #56]	; 0x38
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <MX_DMA_Init+0x38>)
 80022cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ce:	2201      	movs	r2, #1
 80022d0:	4013      	ands	r3, r2
 80022d2:	607b      	str	r3, [r7, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2100      	movs	r1, #0
 80022da:	2009      	movs	r0, #9
 80022dc:	f002 f99c 	bl	8004618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80022e0:	2009      	movs	r0, #9
 80022e2:	f002 f9ae 	bl	8004642 <HAL_NVIC_EnableIRQ>

}
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	46bd      	mov	sp, r7
 80022ea:	b002      	add	sp, #8
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	40021000 	.word	0x40021000

080022f4 <get_db_gain>:

}

/* USER CODE BEGIN 4 */

uint8_t get_db_gain(uint16_t adc_gain) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	0002      	movs	r2, r0
 80022fc:	1dbb      	adds	r3, r7, #6
 80022fe:	801a      	strh	r2, [r3, #0]

	if (adc_gain >= 3781)
 8002300:	1dbb      	adds	r3, r7, #6
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	4a9e      	ldr	r2, [pc, #632]	; (8002580 <get_db_gain+0x28c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <get_db_gain+0x1a>
		return 45;
 800230a:	232d      	movs	r3, #45	; 0x2d
 800230c:	e133      	b.n	8002576 <get_db_gain+0x282>
	else if (adc_gain < 3781 && adc_gain >= 1515)
 800230e:	1dbb      	adds	r3, r7, #6
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	4a9b      	ldr	r2, [pc, #620]	; (8002580 <get_db_gain+0x28c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d81a      	bhi.n	800234e <get_db_gain+0x5a>
 8002318:	1dbb      	adds	r3, r7, #6
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	4a99      	ldr	r2, [pc, #612]	; (8002584 <get_db_gain+0x290>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d915      	bls.n	800234e <get_db_gain+0x5a>
		return 0.0022f * adc_gain + 36.6571f;
 8002322:	1dbb      	adds	r3, r7, #6
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	0018      	movs	r0, r3
 8002328:	f7fe fe34 	bl	8000f94 <__aeabi_i2f>
 800232c:	1c03      	adds	r3, r0, #0
 800232e:	4996      	ldr	r1, [pc, #600]	; (8002588 <get_db_gain+0x294>)
 8002330:	1c18      	adds	r0, r3, #0
 8002332:	f7fe fb3b 	bl	80009ac <__aeabi_fmul>
 8002336:	1c03      	adds	r3, r0, #0
 8002338:	4994      	ldr	r1, [pc, #592]	; (800258c <get_db_gain+0x298>)
 800233a:	1c18      	adds	r0, r3, #0
 800233c:	f7fe f880 	bl	8000440 <__aeabi_fadd>
 8002340:	1c03      	adds	r3, r0, #0
 8002342:	1c18      	adds	r0, r3, #0
 8002344:	f7fe f864 	bl	8000410 <__aeabi_f2uiz>
 8002348:	0003      	movs	r3, r0
 800234a:	b2db      	uxtb	r3, r3
 800234c:	e113      	b.n	8002576 <get_db_gain+0x282>
	else if (adc_gain < 1515 && adc_gain >= 1188)
 800234e:	1dbb      	adds	r3, r7, #6
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	4a8c      	ldr	r2, [pc, #560]	; (8002584 <get_db_gain+0x290>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d81a      	bhi.n	800238e <get_db_gain+0x9a>
 8002358:	1dbb      	adds	r3, r7, #6
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	4a8c      	ldr	r2, [pc, #560]	; (8002590 <get_db_gain+0x29c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d915      	bls.n	800238e <get_db_gain+0x9a>
		return (0.0153f * adc_gain + 16.8349f);
 8002362:	1dbb      	adds	r3, r7, #6
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	0018      	movs	r0, r3
 8002368:	f7fe fe14 	bl	8000f94 <__aeabi_i2f>
 800236c:	1c03      	adds	r3, r0, #0
 800236e:	4989      	ldr	r1, [pc, #548]	; (8002594 <get_db_gain+0x2a0>)
 8002370:	1c18      	adds	r0, r3, #0
 8002372:	f7fe fb1b 	bl	80009ac <__aeabi_fmul>
 8002376:	1c03      	adds	r3, r0, #0
 8002378:	4987      	ldr	r1, [pc, #540]	; (8002598 <get_db_gain+0x2a4>)
 800237a:	1c18      	adds	r0, r3, #0
 800237c:	f7fe f860 	bl	8000440 <__aeabi_fadd>
 8002380:	1c03      	adds	r3, r0, #0
 8002382:	1c18      	adds	r0, r3, #0
 8002384:	f7fe f844 	bl	8000410 <__aeabi_f2uiz>
 8002388:	0003      	movs	r3, r0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	e0f3      	b.n	8002576 <get_db_gain+0x282>
	else if (adc_gain < 1188 && adc_gain >= 1005)
 800238e:	1dbb      	adds	r3, r7, #6
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	4a7f      	ldr	r2, [pc, #508]	; (8002590 <get_db_gain+0x29c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d81b      	bhi.n	80023d0 <get_db_gain+0xdc>
 8002398:	1dbb      	adds	r3, r7, #6
 800239a:	881a      	ldrh	r2, [r3, #0]
 800239c:	23fb      	movs	r3, #251	; 0xfb
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d915      	bls.n	80023d0 <get_db_gain+0xdc>
		return (0.0273f * adc_gain + 2.540f);
 80023a4:	1dbb      	adds	r3, r7, #6
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	0018      	movs	r0, r3
 80023aa:	f7fe fdf3 	bl	8000f94 <__aeabi_i2f>
 80023ae:	1c03      	adds	r3, r0, #0
 80023b0:	497a      	ldr	r1, [pc, #488]	; (800259c <get_db_gain+0x2a8>)
 80023b2:	1c18      	adds	r0, r3, #0
 80023b4:	f7fe fafa 	bl	80009ac <__aeabi_fmul>
 80023b8:	1c03      	adds	r3, r0, #0
 80023ba:	4979      	ldr	r1, [pc, #484]	; (80025a0 <get_db_gain+0x2ac>)
 80023bc:	1c18      	adds	r0, r3, #0
 80023be:	f7fe f83f 	bl	8000440 <__aeabi_fadd>
 80023c2:	1c03      	adds	r3, r0, #0
 80023c4:	1c18      	adds	r0, r3, #0
 80023c6:	f7fe f823 	bl	8000410 <__aeabi_f2uiz>
 80023ca:	0003      	movs	r3, r0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	e0d2      	b.n	8002576 <get_db_gain+0x282>
	else if (adc_gain < 1005 && adc_gain >= 897)
 80023d0:	1dbb      	adds	r3, r7, #6
 80023d2:	881a      	ldrh	r2, [r3, #0]
 80023d4:	23fb      	movs	r3, #251	; 0xfb
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	429a      	cmp	r2, r3
 80023da:	d81b      	bhi.n	8002414 <get_db_gain+0x120>
 80023dc:	1dbb      	adds	r3, r7, #6
 80023de:	881a      	ldrh	r2, [r3, #0]
 80023e0:	23e0      	movs	r3, #224	; 0xe0
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d915      	bls.n	8002414 <get_db_gain+0x120>
		return (0.0463f * adc_gain - 16.5278f);
 80023e8:	1dbb      	adds	r3, r7, #6
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	0018      	movs	r0, r3
 80023ee:	f7fe fdd1 	bl	8000f94 <__aeabi_i2f>
 80023f2:	1c03      	adds	r3, r0, #0
 80023f4:	496b      	ldr	r1, [pc, #428]	; (80025a4 <get_db_gain+0x2b0>)
 80023f6:	1c18      	adds	r0, r3, #0
 80023f8:	f7fe fad8 	bl	80009ac <__aeabi_fmul>
 80023fc:	1c03      	adds	r3, r0, #0
 80023fe:	496a      	ldr	r1, [pc, #424]	; (80025a8 <get_db_gain+0x2b4>)
 8002400:	1c18      	adds	r0, r3, #0
 8002402:	f7fe fbf9 	bl	8000bf8 <__aeabi_fsub>
 8002406:	1c03      	adds	r3, r0, #0
 8002408:	1c18      	adds	r0, r3, #0
 800240a:	f7fe f801 	bl	8000410 <__aeabi_f2uiz>
 800240e:	0003      	movs	r3, r0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	e0b0      	b.n	8002576 <get_db_gain+0x282>
	else if (adc_gain < 897 && adc_gain >= 825)
 8002414:	1dbb      	adds	r3, r7, #6
 8002416:	881a      	ldrh	r2, [r3, #0]
 8002418:	23e0      	movs	r3, #224	; 0xe0
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	429a      	cmp	r2, r3
 800241e:	d81b      	bhi.n	8002458 <get_db_gain+0x164>
 8002420:	1dbb      	adds	r3, r7, #6
 8002422:	881a      	ldrh	r2, [r3, #0]
 8002424:	23ce      	movs	r3, #206	; 0xce
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	429a      	cmp	r2, r3
 800242a:	d915      	bls.n	8002458 <get_db_gain+0x164>
		return (0.0694f * adc_gain - 37.2917f);
 800242c:	1dbb      	adds	r3, r7, #6
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	0018      	movs	r0, r3
 8002432:	f7fe fdaf 	bl	8000f94 <__aeabi_i2f>
 8002436:	1c03      	adds	r3, r0, #0
 8002438:	495c      	ldr	r1, [pc, #368]	; (80025ac <get_db_gain+0x2b8>)
 800243a:	1c18      	adds	r0, r3, #0
 800243c:	f7fe fab6 	bl	80009ac <__aeabi_fmul>
 8002440:	1c03      	adds	r3, r0, #0
 8002442:	495b      	ldr	r1, [pc, #364]	; (80025b0 <get_db_gain+0x2bc>)
 8002444:	1c18      	adds	r0, r3, #0
 8002446:	f7fe fbd7 	bl	8000bf8 <__aeabi_fsub>
 800244a:	1c03      	adds	r3, r0, #0
 800244c:	1c18      	adds	r0, r3, #0
 800244e:	f7fd ffdf 	bl	8000410 <__aeabi_f2uiz>
 8002452:	0003      	movs	r3, r0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	e08e      	b.n	8002576 <get_db_gain+0x282>
	else if (adc_gain < 825 && adc_gain >= 776)
 8002458:	1dbb      	adds	r3, r7, #6
 800245a:	881a      	ldrh	r2, [r3, #0]
 800245c:	23ce      	movs	r3, #206	; 0xce
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	429a      	cmp	r2, r3
 8002462:	d81b      	bhi.n	800249c <get_db_gain+0x1a8>
 8002464:	1dbb      	adds	r3, r7, #6
 8002466:	881a      	ldrh	r2, [r3, #0]
 8002468:	23c2      	movs	r3, #194	; 0xc2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	429a      	cmp	r2, r3
 800246e:	d315      	bcc.n	800249c <get_db_gain+0x1a8>
		return (0.1020f * adc_gain - 64.1837f);
 8002470:	1dbb      	adds	r3, r7, #6
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	0018      	movs	r0, r3
 8002476:	f7fe fd8d 	bl	8000f94 <__aeabi_i2f>
 800247a:	1c03      	adds	r3, r0, #0
 800247c:	494d      	ldr	r1, [pc, #308]	; (80025b4 <get_db_gain+0x2c0>)
 800247e:	1c18      	adds	r0, r3, #0
 8002480:	f7fe fa94 	bl	80009ac <__aeabi_fmul>
 8002484:	1c03      	adds	r3, r0, #0
 8002486:	494c      	ldr	r1, [pc, #304]	; (80025b8 <get_db_gain+0x2c4>)
 8002488:	1c18      	adds	r0, r3, #0
 800248a:	f7fe fbb5 	bl	8000bf8 <__aeabi_fsub>
 800248e:	1c03      	adds	r3, r0, #0
 8002490:	1c18      	adds	r0, r3, #0
 8002492:	f7fd ffbd 	bl	8000410 <__aeabi_f2uiz>
 8002496:	0003      	movs	r3, r0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	e06c      	b.n	8002576 <get_db_gain+0x282>
	else if (adc_gain < 776 && adc_gain >= 746)
 800249c:	1dbb      	adds	r3, r7, #6
 800249e:	881a      	ldrh	r2, [r3, #0]
 80024a0:	23c2      	movs	r3, #194	; 0xc2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d21a      	bcs.n	80024de <get_db_gain+0x1ea>
 80024a8:	1dbb      	adds	r3, r7, #6
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	4a43      	ldr	r2, [pc, #268]	; (80025bc <get_db_gain+0x2c8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d915      	bls.n	80024de <get_db_gain+0x1ea>
		return (0.1667f * adc_gain - 114.333f);
 80024b2:	1dbb      	adds	r3, r7, #6
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	0018      	movs	r0, r3
 80024b8:	f7fe fd6c 	bl	8000f94 <__aeabi_i2f>
 80024bc:	1c03      	adds	r3, r0, #0
 80024be:	4940      	ldr	r1, [pc, #256]	; (80025c0 <get_db_gain+0x2cc>)
 80024c0:	1c18      	adds	r0, r3, #0
 80024c2:	f7fe fa73 	bl	80009ac <__aeabi_fmul>
 80024c6:	1c03      	adds	r3, r0, #0
 80024c8:	493e      	ldr	r1, [pc, #248]	; (80025c4 <get_db_gain+0x2d0>)
 80024ca:	1c18      	adds	r0, r3, #0
 80024cc:	f7fe fb94 	bl	8000bf8 <__aeabi_fsub>
 80024d0:	1c03      	adds	r3, r0, #0
 80024d2:	1c18      	adds	r0, r3, #0
 80024d4:	f7fd ff9c 	bl	8000410 <__aeabi_f2uiz>
 80024d8:	0003      	movs	r3, r0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	e04b      	b.n	8002576 <get_db_gain+0x282>
	else if (adc_gain < 746 && adc_gain >= 733)
 80024de:	1dbb      	adds	r3, r7, #6
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	4a36      	ldr	r2, [pc, #216]	; (80025bc <get_db_gain+0x2c8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d81b      	bhi.n	8002520 <get_db_gain+0x22c>
 80024e8:	1dbb      	adds	r3, r7, #6
 80024ea:	881a      	ldrh	r2, [r3, #0]
 80024ec:	23b7      	movs	r3, #183	; 0xb7
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d915      	bls.n	8002520 <get_db_gain+0x22c>
		return (0.3846f * adc_gain - 276.9231f);
 80024f4:	1dbb      	adds	r3, r7, #6
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	0018      	movs	r0, r3
 80024fa:	f7fe fd4b 	bl	8000f94 <__aeabi_i2f>
 80024fe:	1c03      	adds	r3, r0, #0
 8002500:	4931      	ldr	r1, [pc, #196]	; (80025c8 <get_db_gain+0x2d4>)
 8002502:	1c18      	adds	r0, r3, #0
 8002504:	f7fe fa52 	bl	80009ac <__aeabi_fmul>
 8002508:	1c03      	adds	r3, r0, #0
 800250a:	4930      	ldr	r1, [pc, #192]	; (80025cc <get_db_gain+0x2d8>)
 800250c:	1c18      	adds	r0, r3, #0
 800250e:	f7fe fb73 	bl	8000bf8 <__aeabi_fsub>
 8002512:	1c03      	adds	r3, r0, #0
 8002514:	1c18      	adds	r0, r3, #0
 8002516:	f7fd ff7b 	bl	8000410 <__aeabi_f2uiz>
 800251a:	0003      	movs	r3, r0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	e02a      	b.n	8002576 <get_db_gain+0x282>
	else if (adc_gain < 733 && adc_gain >= 725)
 8002520:	1dbb      	adds	r3, r7, #6
 8002522:	881a      	ldrh	r2, [r3, #0]
 8002524:	23b7      	movs	r3, #183	; 0xb7
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	429a      	cmp	r2, r3
 800252a:	d81b      	bhi.n	8002564 <get_db_gain+0x270>
 800252c:	1dbb      	adds	r3, r7, #6
 800252e:	881a      	ldrh	r2, [r3, #0]
 8002530:	23b5      	movs	r3, #181	; 0xb5
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	429a      	cmp	r2, r3
 8002536:	d915      	bls.n	8002564 <get_db_gain+0x270>
		return (0.625f * adc_gain - 453.125f);
 8002538:	1dbb      	adds	r3, r7, #6
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	0018      	movs	r0, r3
 800253e:	f7fe fd29 	bl	8000f94 <__aeabi_i2f>
 8002542:	1c03      	adds	r3, r0, #0
 8002544:	4922      	ldr	r1, [pc, #136]	; (80025d0 <get_db_gain+0x2dc>)
 8002546:	1c18      	adds	r0, r3, #0
 8002548:	f7fe fa30 	bl	80009ac <__aeabi_fmul>
 800254c:	1c03      	adds	r3, r0, #0
 800254e:	4921      	ldr	r1, [pc, #132]	; (80025d4 <get_db_gain+0x2e0>)
 8002550:	1c18      	adds	r0, r3, #0
 8002552:	f7fe fb51 	bl	8000bf8 <__aeabi_fsub>
 8002556:	1c03      	adds	r3, r0, #0
 8002558:	1c18      	adds	r0, r3, #0
 800255a:	f7fd ff59 	bl	8000410 <__aeabi_f2uiz>
 800255e:	0003      	movs	r3, r0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	e008      	b.n	8002576 <get_db_gain+0x282>
	else if (adc_gain < 725)
 8002564:	1dbb      	adds	r3, r7, #6
 8002566:	881a      	ldrh	r2, [r3, #0]
 8002568:	23b5      	movs	r3, #181	; 0xb5
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	429a      	cmp	r2, r3
 800256e:	d801      	bhi.n	8002574 <get_db_gain+0x280>
		return 0;
 8002570:	2300      	movs	r3, #0
 8002572:	e000      	b.n	8002576 <get_db_gain+0x282>
	return 0;
 8002574:	2300      	movs	r3, #0
}
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	b002      	add	sp, #8
 800257c:	bd80      	pop	{r7, pc}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	00000ec4 	.word	0x00000ec4
 8002584:	000005ea 	.word	0x000005ea
 8002588:	3b102de0 	.word	0x3b102de0
 800258c:	4212a0df 	.word	0x4212a0df
 8002590:	000004a3 	.word	0x000004a3
 8002594:	3c7aacda 	.word	0x3c7aacda
 8002598:	4186ade0 	.word	0x4186ade0
 800259c:	3cdfa440 	.word	0x3cdfa440
 80025a0:	40228f5c 	.word	0x40228f5c
 80025a4:	3d3da512 	.word	0x3d3da512
 80025a8:	418438ef 	.word	0x418438ef
 80025ac:	3d8e2196 	.word	0x3d8e2196
 80025b0:	42152ab3 	.word	0x42152ab3
 80025b4:	3dd0e560 	.word	0x3dd0e560
 80025b8:	42805e0e 	.word	0x42805e0e
 80025bc:	000002e9 	.word	0x000002e9
 80025c0:	3e2ab368 	.word	0x3e2ab368
 80025c4:	42e4aa7f 	.word	0x42e4aa7f
 80025c8:	3ec4ea4b 	.word	0x3ec4ea4b
 80025cc:	438a7628 	.word	0x438a7628
 80025d0:	3f200000 	.word	0x3f200000
 80025d4:	43e29000 	.word	0x43e29000

080025d8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80025d8:	b590      	push	{r4, r7, lr}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < ADC_CHANNEL_NUM; i++) {
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	e04e      	b.n	8002684 <HAL_ADC_ConvCpltCallback+0xac>
		sum[i] -= adc_values[i][adc_counter];
 80025e6:	4b34      	ldr	r3, [pc, #208]	; (80026b8 <HAL_ADC_ConvCpltCallback+0xe0>)
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	0052      	lsls	r2, r2, #1
 80025ec:	5ad1      	ldrh	r1, [r2, r3]
 80025ee:	4b33      	ldr	r3, [pc, #204]	; (80026bc <HAL_ADC_ConvCpltCallback+0xe4>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	001c      	movs	r4, r3
 80025f4:	4832      	ldr	r0, [pc, #200]	; (80026c0 <HAL_ADC_ConvCpltCallback+0xe8>)
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	0013      	movs	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	189b      	adds	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	191b      	adds	r3, r3, r4
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	5a1b      	ldrh	r3, [r3, r0]
 8002606:	1acb      	subs	r3, r1, r3
 8002608:	b299      	uxth	r1, r3
 800260a:	4b2b      	ldr	r3, [pc, #172]	; (80026b8 <HAL_ADC_ConvCpltCallback+0xe0>)
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	0052      	lsls	r2, r2, #1
 8002610:	52d1      	strh	r1, [r2, r3]
		adc_values[i][adc_counter] = adcResultsDMA[i];
 8002612:	4b2a      	ldr	r3, [pc, #168]	; (80026bc <HAL_ADC_ConvCpltCallback+0xe4>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	001c      	movs	r4, r3
 8002618:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <HAL_ADC_ConvCpltCallback+0xec>)
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	0052      	lsls	r2, r2, #1
 800261e:	5ad3      	ldrh	r3, [r2, r3]
 8002620:	b298      	uxth	r0, r3
 8002622:	4927      	ldr	r1, [pc, #156]	; (80026c0 <HAL_ADC_ConvCpltCallback+0xe8>)
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	0013      	movs	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	189b      	adds	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	191b      	adds	r3, r3, r4
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	1c02      	adds	r2, r0, #0
 8002634:	525a      	strh	r2, [r3, r1]
		sum[i] += adc_values[i][adc_counter];
 8002636:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <HAL_ADC_ConvCpltCallback+0xe0>)
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	0052      	lsls	r2, r2, #1
 800263c:	5ad1      	ldrh	r1, [r2, r3]
 800263e:	4b1f      	ldr	r3, [pc, #124]	; (80026bc <HAL_ADC_ConvCpltCallback+0xe4>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	001c      	movs	r4, r3
 8002644:	481e      	ldr	r0, [pc, #120]	; (80026c0 <HAL_ADC_ConvCpltCallback+0xe8>)
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	0013      	movs	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	189b      	adds	r3, r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	191b      	adds	r3, r3, r4
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	5a1b      	ldrh	r3, [r3, r0]
 8002656:	18cb      	adds	r3, r1, r3
 8002658:	b299      	uxth	r1, r3
 800265a:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <HAL_ADC_ConvCpltCallback+0xe0>)
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	0052      	lsls	r2, r2, #1
 8002660:	52d1      	strh	r1, [r2, r3]
		adc_media[i] = sum[i] / MEDIA_NUM;
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <HAL_ADC_ConvCpltCallback+0xe0>)
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	0052      	lsls	r2, r2, #1
 8002668:	5ad3      	ldrh	r3, [r2, r3]
 800266a:	2114      	movs	r1, #20
 800266c:	0018      	movs	r0, r3
 800266e:	f7fd fd59 	bl	8000124 <__udivsi3>
 8002672:	0003      	movs	r3, r0
 8002674:	b299      	uxth	r1, r3
 8002676:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <HAL_ADC_ConvCpltCallback+0xf0>)
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	0052      	lsls	r2, r2, #1
 800267c:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < ADC_CHANNEL_NUM; i++) {
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	3301      	adds	r3, #1
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2b05      	cmp	r3, #5
 8002688:	ddad      	ble.n	80025e6 <HAL_ADC_ConvCpltCallback+0xe>
	}
	adc_counter++;
 800268a:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <HAL_ADC_ConvCpltCallback+0xe4>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	3301      	adds	r3, #1
 8002690:	b2da      	uxtb	r2, r3
 8002692:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <HAL_ADC_ConvCpltCallback+0xe4>)
 8002694:	701a      	strb	r2, [r3, #0]

	if (adc_counter >= MEDIA_NUM)
 8002696:	4b09      	ldr	r3, [pc, #36]	; (80026bc <HAL_ADC_ConvCpltCallback+0xe4>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b13      	cmp	r3, #19
 800269c:	d902      	bls.n	80026a4 <HAL_ADC_ConvCpltCallback+0xcc>
		adc_counter = 0;
 800269e:	4b07      	ldr	r3, [pc, #28]	; (80026bc <HAL_ADC_ConvCpltCallback+0xe4>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, ADC_CHANNEL_NUM);
 80026a4:	4907      	ldr	r1, [pc, #28]	; (80026c4 <HAL_ADC_ConvCpltCallback+0xec>)
 80026a6:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_ADC_ConvCpltCallback+0xf4>)
 80026a8:	2206      	movs	r2, #6
 80026aa:	0018      	movs	r0, r3
 80026ac:	f001 f9ca 	bl	8003a44 <HAL_ADC_Start_DMA>
}
 80026b0:	46c0      	nop			; (mov r8, r8)
 80026b2:	46bd      	mov	sp, r7
 80026b4:	b005      	add	sp, #20
 80026b6:	bd90      	pop	{r4, r7, pc}
 80026b8:	200002a0 	.word	0x200002a0
 80026bc:	200002ac 	.word	0x200002ac
 80026c0:	200001a4 	.word	0x200001a4
 80026c4:	20000198 	.word	0x20000198
 80026c8:	20000294 	.word	0x20000294
 80026cc:	2000008c 	.word	0x2000008c

080026d0 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
	uart1_read_to_frame(&uart1);
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <USART1_IRQHandler+0x14>)
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 fcf4 	bl	80030c4 <uart1_read_to_frame>
}
 80026dc:	46c0      	nop			; (mov r8, r8)
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	2000014c 	.word	0x2000014c

080026e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026ec:	b672      	cpsid	i
}
 80026ee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80026f0:	e7fe      	b.n	80026f0 <Error_Handler+0x8>
	...

080026f4 <max4003_get_dbm>:
 *  Created on: Sep 29, 2022
 *      Author: sigmadev
 */
#include "max4003.h"

uint8_t max4003_get_dbm( MAX4003_t *mx,uint16_t value) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	000a      	movs	r2, r1
 80026fe:	1cbb      	adds	r3, r7, #2
 8002700:	801a      	strh	r2, [r3, #0]

	float m = (float) ( MAX4003_DBM_MAX -  MAX4003_DBM_MIN)
			/ (float) (mx->max - mx->min);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	001a      	movs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	885b      	ldrh	r3, [r3, #2]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	0018      	movs	r0, r3
 8002710:	f7fe fc40 	bl	8000f94 <__aeabi_i2f>
 8002714:	1c03      	adds	r3, r0, #0
	float m = (float) ( MAX4003_DBM_MAX -  MAX4003_DBM_MIN)
 8002716:	1c19      	adds	r1, r3, #0
 8002718:	481f      	ldr	r0, [pc, #124]	; (8002798 <max4003_get_dbm+0xa4>)
 800271a:	f7fe f82f 	bl	800077c <__aeabi_fdiv>
 800271e:	1c03      	adds	r3, r0, #0
 8002720:	60fb      	str	r3, [r7, #12]
	float b =  MAX4003_DBM_MAX -mx->max * m;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	0018      	movs	r0, r3
 8002728:	f7fe fc34 	bl	8000f94 <__aeabi_i2f>
 800272c:	1c03      	adds	r3, r0, #0
 800272e:	68f9      	ldr	r1, [r7, #12]
 8002730:	1c18      	adds	r0, r3, #0
 8002732:	f7fe f93b 	bl	80009ac <__aeabi_fmul>
 8002736:	1c03      	adds	r3, r0, #0
 8002738:	1c19      	adds	r1, r3, #0
 800273a:	2000      	movs	r0, #0
 800273c:	f7fe fa5c 	bl	8000bf8 <__aeabi_fsub>
 8002740:	1c03      	adds	r3, r0, #0
 8002742:	60bb      	str	r3, [r7, #8]

	if (value > mx->max) {
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	1cba      	adds	r2, r7, #2
 800274a:	8812      	ldrh	r2, [r2, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d901      	bls.n	8002754 <max4003_get_dbm+0x60>
		return  MAX4003_DBM_MAX;
 8002750:	2300      	movs	r3, #0
 8002752:	e01d      	b.n	8002790 <max4003_get_dbm+0x9c>
	} else if (value < mx->min) {
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	885b      	ldrh	r3, [r3, #2]
 8002758:	1cba      	adds	r2, r7, #2
 800275a:	8812      	ldrh	r2, [r2, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d201      	bcs.n	8002764 <max4003_get_dbm+0x70>
		return  MAX4003_DBM_MIN;
 8002760:	23e2      	movs	r3, #226	; 0xe2
 8002762:	e015      	b.n	8002790 <max4003_get_dbm+0x9c>
	}
	return (int8_t) (m * (float) value + b);
 8002764:	1cbb      	adds	r3, r7, #2
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	0018      	movs	r0, r3
 800276a:	f7fe fc61 	bl	8001030 <__aeabi_ui2f>
 800276e:	1c03      	adds	r3, r0, #0
 8002770:	68f9      	ldr	r1, [r7, #12]
 8002772:	1c18      	adds	r0, r3, #0
 8002774:	f7fe f91a 	bl	80009ac <__aeabi_fmul>
 8002778:	1c03      	adds	r3, r0, #0
 800277a:	68b9      	ldr	r1, [r7, #8]
 800277c:	1c18      	adds	r0, r3, #0
 800277e:	f7fd fe5f 	bl	8000440 <__aeabi_fadd>
 8002782:	1c03      	adds	r3, r0, #0
 8002784:	1c18      	adds	r0, r3, #0
 8002786:	f7fe fbe5 	bl	8000f54 <__aeabi_f2iz>
 800278a:	0003      	movs	r3, r0
 800278c:	b25b      	sxtb	r3, r3
 800278e:	b2db      	uxtb	r3, r3
}
 8002790:	0018      	movs	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	b004      	add	sp, #16
 8002796:	bd80      	pop	{r7, pc}
 8002798:	41f00000 	.word	0x41f00000

0800279c <module_init>:
 *      Author: sigmadev
 */

#include <module.h>

void  module_init(Module_t* module ,Function_t funcion, Id_t id){
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	0008      	movs	r0, r1
 80027a6:	0011      	movs	r1, r2
 80027a8:	1cfb      	adds	r3, r7, #3
 80027aa:	1c02      	adds	r2, r0, #0
 80027ac:	701a      	strb	r2, [r3, #0]
 80027ae:	1cbb      	adds	r3, r7, #2
 80027b0:	1c0a      	adds	r2, r1, #0
 80027b2:	701a      	strb	r2, [r3, #0]
module->function = funcion;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	1cfa      	adds	r2, r7, #3
 80027b8:	7812      	ldrb	r2, [r2, #0]
 80027ba:	735a      	strb	r2, [r3, #13]
module->id = id;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	1cba      	adds	r2, r7, #2
 80027c0:	7812      	ldrb	r2, [r2, #0]
 80027c2:	731a      	strb	r2, [r3, #12]
module->att = 0;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
module->gain =   0;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	705a      	strb	r2, [r3, #1]
module->pin = 0;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	711a      	strb	r2, [r3, #4]
module->pout = 0;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	709a      	strb	r2, [r3, #2]
module->temperature = 0;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	71da      	strb	r2, [r3, #7]
module->state = true;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	719a      	strb	r2, [r3, #6]
}
 80027e8:	46c0      	nop			; (mov r8, r8)
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b002      	add	sp, #8
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <rs485_check_frame>:
 *  Created on: Sep 28, 2022
 *      Author: sigmadev
 */
#include "rs485.h"

Rs485_cmd_t rs485_check_frame(uint8_t *frame, uint8_t len) {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	000a      	movs	r2, r1
 80027fa:	1cfb      	adds	r3, r7, #3
 80027fc:	701a      	strb	r2, [r3, #0]

	if (strlen(frame) > (3 + 1 + 2))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	0018      	movs	r0, r3
 8002802:	f7fd fc7d 	bl	8000100 <strlen>
 8002806:	0003      	movs	r3, r0
 8002808:	2b06      	cmp	r3, #6
 800280a:	d924      	bls.n	8002856 <rs485_check_frame+0x66>
		if (frame[0] == LTEL_START_MARK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	227e      	movs	r2, #126	; 0x7e
 8002812:	4293      	cmp	r3, r2
 8002814:	d11f      	bne.n	8002856 <rs485_check_frame+0x66>
			if (frame[1] == MODULE_FUNCTION)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3301      	adds	r3, #1
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2209      	movs	r2, #9
 800281e:	4293      	cmp	r3, r2
 8002820:	d119      	bne.n	8002856 <rs485_check_frame+0x66>
				if (frame[2] == MODULE_ADDR)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3302      	adds	r3, #2
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2208      	movs	r2, #8
 800282a:	4293      	cmp	r3, r2
 800282c:	d113      	bne.n	8002856 <rs485_check_frame+0x66>
					for (int i = 3; i < len; i++)
 800282e:	2303      	movs	r3, #3
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	e00b      	b.n	800284c <rs485_check_frame+0x5c>
						if (frame[i] == LTEL_END_MARK)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	18d3      	adds	r3, r2, r3
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	227f      	movs	r2, #127	; 0x7f
 800283e:	4293      	cmp	r3, r2
 8002840:	d101      	bne.n	8002846 <rs485_check_frame+0x56>
							return true;
 8002842:	2301      	movs	r3, #1
 8002844:	e00a      	b.n	800285c <rs485_check_frame+0x6c>
					for (int i = 3; i < len; i++)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	3301      	adds	r3, #1
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	1cfb      	adds	r3, r7, #3
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	429a      	cmp	r2, r3
 8002854:	dbee      	blt.n	8002834 <rs485_check_frame+0x44>
	return frame[3];
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3303      	adds	r3, #3
 800285a:	781b      	ldrb	r3, [r3, #0]
}
 800285c:	0018      	movs	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	b004      	add	sp, #16
 8002862:	bd80      	pop	{r7, pc}

08002864 <rs485_set_query_frame>:

void rs485_set_query_frame(RS485_t *r, Module_t *module) {
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]

	uint8_t crc_frame[2];
	uint16_t crc;
	r->frame[0] = LTEL_START_MARK;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	227e      	movs	r2, #126	; 0x7e
 8002874:	701a      	strb	r2, [r3, #0]
	r->frame[1] = module->function;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	3301      	adds	r3, #1
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	7b52      	ldrb	r2, [r2, #13]
 8002880:	701a      	strb	r2, [r3, #0]
	r->frame[2] = module->id;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	3302      	adds	r3, #2
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	7b12      	ldrb	r2, [r2, #12]
 800288c:	701a      	strb	r2, [r3, #0]
	r->frame[3] = r->cmd;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	3303      	adds	r3, #3
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	7812      	ldrb	r2, [r2, #0]
 8002898:	701a      	strb	r2, [r3, #0]

	if (module->function == LOW_NOISE_AMPLIFIER) {
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	7b5b      	ldrb	r3, [r3, #13]
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d000      	beq.n	80028a4 <rs485_set_query_frame+0x40>
 80028a2:	e082      	b.n	80029aa <rs485_set_query_frame+0x146>
		switch (r->cmd) {
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b11      	cmp	r3, #17
 80028aa:	d002      	beq.n	80028b2 <rs485_set_query_frame+0x4e>
 80028ac:	2b12      	cmp	r3, #18
 80028ae:	d02a      	beq.n	8002906 <rs485_set_query_frame+0xa2>
 80028b0:	e054      	b.n	800295c <rs485_set_query_frame+0xf8>
		case QUERY_PARAMETER_LTEL:
			r->frame[4] = 0x00;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	3304      	adds	r3, #4
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]
			r->frame[5] = 0x05;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	3305      	adds	r3, #5
 80028c2:	2205      	movs	r2, #5
 80028c4:	701a      	strb	r2, [r3, #0]
			r->frame[6] = 0x00;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	3306      	adds	r3, #6
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
			r->frame[7] = module->att;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	3307      	adds	r3, #7
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	701a      	strb	r2, [r3, #0]
			r->frame[8] = module->gain;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	3308      	adds	r3, #8
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	7852      	ldrb	r2, [r2, #1]
 80028e6:	701a      	strb	r2, [r3, #0]
			r->frame[9] = module->pout;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	2202      	movs	r2, #2
 80028ec:	569a      	ldrsb	r2, [r3, r2]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	3309      	adds	r3, #9
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	701a      	strb	r2, [r3, #0]
			r->frame[10] = module->voltage;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	330a      	adds	r3, #10
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	78d2      	ldrb	r2, [r2, #3]
 8002902:	701a      	strb	r2, [r3, #0]
			break;
 8002904:	e02e      	b.n	8002964 <rs485_set_query_frame+0x100>
		case QUERY_PARAMETER_SIGMA:
			r->frame[4] = 0x06;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	3304      	adds	r3, #4
 800290c:	2206      	movs	r2, #6
 800290e:	701a      	strb	r2, [r3, #0]
			r->frame[5] = module->pout;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2202      	movs	r2, #2
 8002914:	569a      	ldrsb	r2, [r3, r2]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	3305      	adds	r3, #5
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	701a      	strb	r2, [r3, #0]
			r->frame[6] = module->att;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	3306      	adds	r3, #6
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	7812      	ldrb	r2, [r2, #0]
 800292a:	701a      	strb	r2, [r3, #0]
			r->frame[7] = module->gain;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	3307      	adds	r3, #7
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	7852      	ldrb	r2, [r2, #1]
 8002936:	701a      	strb	r2, [r3, #0]
			r->frame[8] = module->current;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	3308      	adds	r3, #8
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	7952      	ldrb	r2, [r2, #5]
 8002942:	701a      	strb	r2, [r3, #0]
			r->frame[9] = module->voltage;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	3309      	adds	r3, #9
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	78d2      	ldrb	r2, [r2, #3]
 800294e:	701a      	strb	r2, [r3, #0]
			r->frame[10] = module->pin;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	330a      	adds	r3, #10
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	7912      	ldrb	r2, [r2, #4]
 800295a:	701a      	strb	r2, [r3, #0]
		default:
			r->frame[0] = 0;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
		}
		crc = crc_get(&(r->frame[1]), 10);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	3301      	adds	r3, #1
 800296a:	210a      	movs	r1, #10
 800296c:	0018      	movs	r0, r3
 800296e:	f000 fc33 	bl	80031d8 <crc_get>
 8002972:	0003      	movs	r3, r0
 8002974:	b29a      	uxth	r2, r3
 8002976:	200a      	movs	r0, #10
 8002978:	183b      	adds	r3, r7, r0
 800297a:	801a      	strh	r2, [r3, #0]
		memcpy(crc_frame, &crc, 2);
 800297c:	210c      	movs	r1, #12
 800297e:	187b      	adds	r3, r7, r1
 8002980:	183a      	adds	r2, r7, r0
 8002982:	8812      	ldrh	r2, [r2, #0]
 8002984:	801a      	strh	r2, [r3, #0]
		r->frame[11] = crc_frame[0];
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	330b      	adds	r3, #11
 800298c:	187a      	adds	r2, r7, r1
 800298e:	7812      	ldrb	r2, [r2, #0]
 8002990:	701a      	strb	r2, [r3, #0]
		r->frame[12] = crc_frame[1];
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	330c      	adds	r3, #12
 8002998:	187a      	adds	r2, r7, r1
 800299a:	7852      	ldrb	r2, [r2, #1]
 800299c:	701a      	strb	r2, [r3, #0]
		r->frame[13] = LTEL_END_MARK;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	330d      	adds	r3, #13
 80029a4:	227f      	movs	r2, #127	; 0x7f
 80029a6:	701a      	strb	r2, [r3, #0]
		memcpy(crc_frame, &crc, 2);
		r->frame[13+1] = crc_frame[0];
		r->frame[13+2] = crc_frame[1];
		r->frame[13+3] = LTEL_END_MARK;
	}
}
 80029a8:	e0b4      	b.n	8002b14 <rs485_set_query_frame+0x2b0>
	} else if (module->function == POWER_AMPLIFIER) {
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	7b5b      	ldrb	r3, [r3, #13]
 80029ae:	2b09      	cmp	r3, #9
 80029b0:	d000      	beq.n	80029b4 <rs485_set_query_frame+0x150>
 80029b2:	e0af      	b.n	8002b14 <rs485_set_query_frame+0x2b0>
		switch (r->cmd) {
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b11      	cmp	r3, #17
 80029ba:	d002      	beq.n	80029c2 <rs485_set_query_frame+0x15e>
 80029bc:	2b12      	cmp	r3, #18
 80029be:	d042      	beq.n	8002a46 <rs485_set_query_frame+0x1e2>
 80029c0:	e082      	b.n	8002ac8 <rs485_set_query_frame+0x264>
			r->frame[4] = 0x00;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	3304      	adds	r3, #4
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
			r->frame[5] = 0x08;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	3305      	adds	r3, #5
 80029d2:	2208      	movs	r2, #8
 80029d4:	701a      	strb	r2, [r3, #0]
			r->frame[6] = module->state;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	799a      	ldrb	r2, [r3, #6]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	3306      	adds	r3, #6
 80029e0:	701a      	strb	r2, [r3, #0]
			r->frame[7] = 0x00;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	3307      	adds	r3, #7
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
			r->frame[8] = module->temperature;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	3308      	adds	r3, #8
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	79d2      	ldrb	r2, [r2, #7]
 80029f6:	701a      	strb	r2, [r3, #0]
			r->frame[9] = module->gain;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	3309      	adds	r3, #9
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	7852      	ldrb	r2, [r2, #1]
 8002a02:	701a      	strb	r2, [r3, #0]
			r->frame[10] = module->vswr;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	330a      	adds	r3, #10
 8002a0e:	001c      	movs	r4, r3
 8002a10:	1c10      	adds	r0, r2, #0
 8002a12:	f7fd fcfd 	bl	8000410 <__aeabi_f2uiz>
 8002a16:	0003      	movs	r3, r0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	7023      	strb	r3, [r4, #0]
			r->frame[11] = module->att;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	330b      	adds	r3, #11
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	7812      	ldrb	r2, [r2, #0]
 8002a26:	701a      	strb	r2, [r3, #0]
			r->frame[12] = module->pout;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	569a      	ldrsb	r2, [r3, r2]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	330c      	adds	r3, #12
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	701a      	strb	r2, [r3, #0]
			r->frame[13] = module->pin;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	330d      	adds	r3, #13
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	7912      	ldrb	r2, [r2, #4]
 8002a42:	701a      	strb	r2, [r3, #0]
			break;
 8002a44:	e044      	b.n	8002ad0 <rs485_set_query_frame+0x26c>
			r->frame[4] = 0x00;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
			r->frame[5] = 0x08;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	3305      	adds	r3, #5
 8002a56:	2208      	movs	r2, #8
 8002a58:	701a      	strb	r2, [r3, #0]
			r->frame[6] = module->state;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	799a      	ldrb	r2, [r3, #6]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	3306      	adds	r3, #6
 8002a64:	701a      	strb	r2, [r3, #0]
			r->frame[7] = 0x00;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	3307      	adds	r3, #7
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
			r->frame[8] = module->temperature;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	3308      	adds	r3, #8
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	79d2      	ldrb	r2, [r2, #7]
 8002a7a:	701a      	strb	r2, [r3, #0]
			r->frame[9] = module->gain;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	3309      	adds	r3, #9
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	7852      	ldrb	r2, [r2, #1]
 8002a86:	701a      	strb	r2, [r3, #0]
			r->frame[10] = module->vswr;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	330a      	adds	r3, #10
 8002a92:	001c      	movs	r4, r3
 8002a94:	1c10      	adds	r0, r2, #0
 8002a96:	f7fd fcbb 	bl	8000410 <__aeabi_f2uiz>
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	7023      	strb	r3, [r4, #0]
			r->frame[11] = module->att;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	330b      	adds	r3, #11
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	7812      	ldrb	r2, [r2, #0]
 8002aaa:	701a      	strb	r2, [r3, #0]
			r->frame[12] = module->pout;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	569a      	ldrsb	r2, [r3, r2]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	330c      	adds	r3, #12
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	701a      	strb	r2, [r3, #0]
			r->frame[13] = module->pin;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	330d      	adds	r3, #13
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	7912      	ldrb	r2, [r2, #4]
 8002ac6:	701a      	strb	r2, [r3, #0]
			r->frame[0] = 0;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]
		crc = crc_get(&(r->frame[1]), 10);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	210a      	movs	r1, #10
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f000 fb7d 	bl	80031d8 <crc_get>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	200a      	movs	r0, #10
 8002ae4:	183b      	adds	r3, r7, r0
 8002ae6:	801a      	strh	r2, [r3, #0]
		memcpy(crc_frame, &crc, 2);
 8002ae8:	210c      	movs	r1, #12
 8002aea:	187b      	adds	r3, r7, r1
 8002aec:	183a      	adds	r2, r7, r0
 8002aee:	8812      	ldrh	r2, [r2, #0]
 8002af0:	801a      	strh	r2, [r3, #0]
		r->frame[13+1] = crc_frame[0];
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	330e      	adds	r3, #14
 8002af8:	187a      	adds	r2, r7, r1
 8002afa:	7812      	ldrb	r2, [r2, #0]
 8002afc:	701a      	strb	r2, [r3, #0]
		r->frame[13+2] = crc_frame[1];
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	330f      	adds	r3, #15
 8002b04:	187a      	adds	r2, r7, r1
 8002b06:	7852      	ldrb	r2, [r2, #1]
 8002b08:	701a      	strb	r2, [r3, #0]
		r->frame[13+3] = LTEL_END_MARK;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	3310      	adds	r3, #16
 8002b10:	227f      	movs	r2, #127	; 0x7f
 8002b12:	701a      	strb	r2, [r3, #0]
}
 8002b14:	46c0      	nop			; (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b005      	add	sp, #20
 8002b1a:	bd90      	pop	{r4, r7, pc}

08002b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b22:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <HAL_MspInit+0x44>)
 8002b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b26:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <HAL_MspInit+0x44>)
 8002b28:	2101      	movs	r1, #1
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
 8002b2e:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <HAL_MspInit+0x44>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	2201      	movs	r2, #1
 8002b34:	4013      	ands	r3, r2
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_MspInit+0x44>)
 8002b3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b3e:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <HAL_MspInit+0x44>)
 8002b40:	2180      	movs	r1, #128	; 0x80
 8002b42:	0549      	lsls	r1, r1, #21
 8002b44:	430a      	orrs	r2, r1
 8002b46:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <HAL_MspInit+0x44>)
 8002b4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	055b      	lsls	r3, r3, #21
 8002b50:	4013      	ands	r3, r2
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b002      	add	sp, #8
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	40021000 	.word	0x40021000

08002b64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b091      	sub	sp, #68	; 0x44
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	232c      	movs	r3, #44	; 0x2c
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	0018      	movs	r0, r3
 8002b72:	2314      	movs	r3, #20
 8002b74:	001a      	movs	r2, r3
 8002b76:	2100      	movs	r1, #0
 8002b78:	f002 ff74 	bl	8005a64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b7c:	2414      	movs	r4, #20
 8002b7e:	193b      	adds	r3, r7, r4
 8002b80:	0018      	movs	r0, r3
 8002b82:	2318      	movs	r3, #24
 8002b84:	001a      	movs	r2, r3
 8002b86:	2100      	movs	r1, #0
 8002b88:	f002 ff6c 	bl	8005a64 <memset>
  if(hadc->Instance==ADC1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a43      	ldr	r2, [pc, #268]	; (8002ca0 <HAL_ADC_MspInit+0x13c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d000      	beq.n	8002b98 <HAL_ADC_MspInit+0x34>
 8002b96:	e07f      	b.n	8002c98 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002b98:	193b      	adds	r3, r7, r4
 8002b9a:	2280      	movs	r2, #128	; 0x80
 8002b9c:	01d2      	lsls	r2, r2, #7
 8002b9e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002ba0:	193b      	adds	r3, r7, r4
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ba6:	193b      	adds	r3, r7, r4
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f002 fdf7 	bl	800579c <HAL_RCCEx_PeriphCLKConfig>
 8002bae:	1e03      	subs	r3, r0, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8002bb2:	f7ff fd99 	bl	80026e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_ADC_MspInit+0x140>)
 8002bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bba:	4b3a      	ldr	r3, [pc, #232]	; (8002ca4 <HAL_ADC_MspInit+0x140>)
 8002bbc:	2180      	movs	r1, #128	; 0x80
 8002bbe:	0349      	lsls	r1, r1, #13
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40
 8002bc4:	4b37      	ldr	r3, [pc, #220]	; (8002ca4 <HAL_ADC_MspInit+0x140>)
 8002bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	035b      	lsls	r3, r3, #13
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
 8002bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd2:	4b34      	ldr	r3, [pc, #208]	; (8002ca4 <HAL_ADC_MspInit+0x140>)
 8002bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bd6:	4b33      	ldr	r3, [pc, #204]	; (8002ca4 <HAL_ADC_MspInit+0x140>)
 8002bd8:	2101      	movs	r1, #1
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	635a      	str	r2, [r3, #52]	; 0x34
 8002bde:	4b31      	ldr	r3, [pc, #196]	; (8002ca4 <HAL_ADC_MspInit+0x140>)
 8002be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be2:	2201      	movs	r2, #1
 8002be4:	4013      	ands	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bea:	4b2e      	ldr	r3, [pc, #184]	; (8002ca4 <HAL_ADC_MspInit+0x140>)
 8002bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bee:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <HAL_ADC_MspInit+0x140>)
 8002bf0:	2102      	movs	r1, #2
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	635a      	str	r2, [r3, #52]	; 0x34
 8002bf6:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <HAL_ADC_MspInit+0x140>)
 8002bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = AGC_LEVEL_Pin|CURR_Pin|V_IN_SAMPLE_Pin|SWR_Pin
 8002c02:	242c      	movs	r4, #44	; 0x2c
 8002c04:	193b      	adds	r3, r7, r4
 8002c06:	2277      	movs	r2, #119	; 0x77
 8002c08:	601a      	str	r2, [r3, #0]
                          |P_OUT_Pin|P_IN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c0a:	193b      	adds	r3, r7, r4
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	193b      	adds	r3, r7, r4
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c16:	193a      	adds	r2, r7, r4
 8002c18:	23a0      	movs	r3, #160	; 0xa0
 8002c1a:	05db      	lsls	r3, r3, #23
 8002c1c:	0011      	movs	r1, r2
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f001 ff7e 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = T_SN_IN_Pin;
 8002c24:	193b      	adds	r3, r7, r4
 8002c26:	2204      	movs	r2, #4
 8002c28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c2a:	193b      	adds	r3, r7, r4
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	193b      	adds	r3, r7, r4
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(T_SN_IN_GPIO_Port, &GPIO_InitStruct);
 8002c36:	193b      	adds	r3, r7, r4
 8002c38:	4a1b      	ldr	r2, [pc, #108]	; (8002ca8 <HAL_ADC_MspInit+0x144>)
 8002c3a:	0019      	movs	r1, r3
 8002c3c:	0010      	movs	r0, r2
 8002c3e:	f001 ff6f 	bl	8004b20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002c42:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <HAL_ADC_MspInit+0x148>)
 8002c44:	4a1a      	ldr	r2, [pc, #104]	; (8002cb0 <HAL_ADC_MspInit+0x14c>)
 8002c46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002c48:	4b18      	ldr	r3, [pc, #96]	; (8002cac <HAL_ADC_MspInit+0x148>)
 8002c4a:	2205      	movs	r2, #5
 8002c4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c4e:	4b17      	ldr	r3, [pc, #92]	; (8002cac <HAL_ADC_MspInit+0x148>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c54:	4b15      	ldr	r3, [pc, #84]	; (8002cac <HAL_ADC_MspInit+0x148>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c5a:	4b14      	ldr	r3, [pc, #80]	; (8002cac <HAL_ADC_MspInit+0x148>)
 8002c5c:	2280      	movs	r2, #128	; 0x80
 8002c5e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c60:	4b12      	ldr	r3, [pc, #72]	; (8002cac <HAL_ADC_MspInit+0x148>)
 8002c62:	2280      	movs	r2, #128	; 0x80
 8002c64:	0052      	lsls	r2, r2, #1
 8002c66:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c68:	4b10      	ldr	r3, [pc, #64]	; (8002cac <HAL_ADC_MspInit+0x148>)
 8002c6a:	2280      	movs	r2, #128	; 0x80
 8002c6c:	00d2      	lsls	r2, r2, #3
 8002c6e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002c70:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <HAL_ADC_MspInit+0x148>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c76:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <HAL_ADC_MspInit+0x148>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <HAL_ADC_MspInit+0x148>)
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f001 fcfc 	bl	800467c <HAL_DMA_Init>
 8002c84:	1e03      	subs	r3, r0, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8002c88:	f7ff fd2e 	bl	80026e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a07      	ldr	r2, [pc, #28]	; (8002cac <HAL_ADC_MspInit+0x148>)
 8002c90:	651a      	str	r2, [r3, #80]	; 0x50
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <HAL_ADC_MspInit+0x148>)
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c98:	46c0      	nop			; (mov r8, r8)
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	b011      	add	sp, #68	; 0x44
 8002c9e:	bd90      	pop	{r4, r7, pc}
 8002ca0:	40012400 	.word	0x40012400
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	50000400 	.word	0x50000400
 8002cac:	200000f0 	.word	0x200000f0
 8002cb0:	40020008 	.word	0x40020008

08002cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cb8:	e7fe      	b.n	8002cb8 <NMI_Handler+0x4>

08002cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cbe:	e7fe      	b.n	8002cbe <HardFault_Handler+0x4>

08002cc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002cc4:	46c0      	nop			; (mov r8, r8)
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cd8:	f000 fb74 	bl	80033c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cdc:	46c0      	nop			; (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <DMA1_Channel1_IRQHandler+0x14>)
 8002cea:	0018      	movs	r0, r3
 8002cec:	f001 fdd6 	bl	800489c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	200000f0 	.word	0x200000f0

08002cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d04:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <_sbrk+0x5c>)
 8002d06:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <_sbrk+0x60>)
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <_sbrk+0x64>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <_sbrk+0x64>)
 8002d1a:	4a12      	ldr	r2, [pc, #72]	; (8002d64 <_sbrk+0x68>)
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <_sbrk+0x64>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	18d3      	adds	r3, r2, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d207      	bcs.n	8002d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d2c:	f002 fe5c 	bl	80059e8 <__errno>
 8002d30:	0003      	movs	r3, r0
 8002d32:	220c      	movs	r2, #12
 8002d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d36:	2301      	movs	r3, #1
 8002d38:	425b      	negs	r3, r3
 8002d3a:	e009      	b.n	8002d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <_sbrk+0x64>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <_sbrk+0x64>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	18d2      	adds	r2, r2, r3
 8002d4a:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <_sbrk+0x64>)
 8002d4c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
}
 8002d50:	0018      	movs	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b006      	add	sp, #24
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20002000 	.word	0x20002000
 8002d5c:	00000400 	.word	0x00000400
 8002d60:	200002b0 	.word	0x200002b0
 8002d64:	200002c8 	.word	0x200002c8

08002d68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	0002      	movs	r2, r0
 8002d7c:	1dfb      	adds	r3, r7, #7
 8002d7e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d80:	1dfb      	adds	r3, r7, #7
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b7f      	cmp	r3, #127	; 0x7f
 8002d86:	d809      	bhi.n	8002d9c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d88:	1dfb      	adds	r3, r7, #7
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	001a      	movs	r2, r3
 8002d8e:	231f      	movs	r3, #31
 8002d90:	401a      	ands	r2, r3
 8002d92:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <__NVIC_EnableIRQ+0x30>)
 8002d94:	2101      	movs	r1, #1
 8002d96:	4091      	lsls	r1, r2
 8002d98:	000a      	movs	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002d9c:	46c0      	nop			; (mov r8, r8)
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b002      	add	sp, #8
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	e000e100 	.word	0xe000e100

08002da8 <uart1_gpio_init>:
 *      Author: sigmadev
 */

#include <uart1.h>

void uart1_gpio_init() {
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
	/**USART1 GPIO Configuration
	 PA9     ------> USART1_TX
	 PA10     ------> USART1_RX
	 */
	/* PA9 TX as alter */
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE9_0);
 8002dac:	23a0      	movs	r3, #160	; 0xa0
 8002dae:	05db      	lsls	r3, r3, #23
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	23a0      	movs	r3, #160	; 0xa0
 8002db4:	05db      	lsls	r3, r3, #23
 8002db6:	495a      	ldr	r1, [pc, #360]	; (8002f20 <uart1_gpio_init+0x178>)
 8002db8:	400a      	ands	r2, r1
 8002dba:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE9_1);
 8002dbc:	23a0      	movs	r3, #160	; 0xa0
 8002dbe:	05db      	lsls	r3, r3, #23
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	23a0      	movs	r3, #160	; 0xa0
 8002dc4:	05db      	lsls	r3, r3, #23
 8002dc6:	2180      	movs	r1, #128	; 0x80
 8002dc8:	0309      	lsls	r1, r1, #12
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]
	/* PA9 TX as alter */
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE10_0);
 8002dce:	23a0      	movs	r3, #160	; 0xa0
 8002dd0:	05db      	lsls	r3, r3, #23
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	23a0      	movs	r3, #160	; 0xa0
 8002dd6:	05db      	lsls	r3, r3, #23
 8002dd8:	4952      	ldr	r1, [pc, #328]	; (8002f24 <uart1_gpio_init+0x17c>)
 8002dda:	400a      	ands	r2, r1
 8002ddc:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE10_1);
 8002dde:	23a0      	movs	r3, #160	; 0xa0
 8002de0:	05db      	lsls	r3, r3, #23
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	23a0      	movs	r3, #160	; 0xa0
 8002de6:	05db      	lsls	r3, r3, #23
 8002de8:	2180      	movs	r1, #128	; 0x80
 8002dea:	0389      	lsls	r1, r1, #14
 8002dec:	430a      	orrs	r2, r1
 8002dee:	601a      	str	r2, [r3, #0]
	/* PA9 Tx open drain */
	CLEAR_BIT(GPIOA->MODER, GPIO_OTYPER_OT9);
 8002df0:	23a0      	movs	r3, #160	; 0xa0
 8002df2:	05db      	lsls	r3, r3, #23
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	23a0      	movs	r3, #160	; 0xa0
 8002df8:	05db      	lsls	r3, r3, #23
 8002dfa:	494b      	ldr	r1, [pc, #300]	; (8002f28 <uart1_gpio_init+0x180>)
 8002dfc:	400a      	ands	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]
	/* PA9 Tx open drain */
	CLEAR_BIT(GPIOA->MODER, GPIO_OTYPER_OT10);
 8002e00:	23a0      	movs	r3, #160	; 0xa0
 8002e02:	05db      	lsls	r3, r3, #23
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	23a0      	movs	r3, #160	; 0xa0
 8002e08:	05db      	lsls	r3, r3, #23
 8002e0a:	4948      	ldr	r1, [pc, #288]	; (8002f2c <uart1_gpio_init+0x184>)
 8002e0c:	400a      	ands	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]
	/* PA9 Tx pull up */
	CLEAR_BIT(GPIOA->MODER, GPIO_PUPDR_PUPD9_0);
 8002e10:	23a0      	movs	r3, #160	; 0xa0
 8002e12:	05db      	lsls	r3, r3, #23
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	23a0      	movs	r3, #160	; 0xa0
 8002e18:	05db      	lsls	r3, r3, #23
 8002e1a:	4941      	ldr	r1, [pc, #260]	; (8002f20 <uart1_gpio_init+0x178>)
 8002e1c:	400a      	ands	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_PUPDR_PUPD9_1);
 8002e20:	23a0      	movs	r3, #160	; 0xa0
 8002e22:	05db      	lsls	r3, r3, #23
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	23a0      	movs	r3, #160	; 0xa0
 8002e28:	05db      	lsls	r3, r3, #23
 8002e2a:	2180      	movs	r1, #128	; 0x80
 8002e2c:	0309      	lsls	r1, r1, #12
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	601a      	str	r2, [r3, #0]
	/* PA10 RX pull up */
	CLEAR_BIT(GPIOA->MODER, GPIO_PUPDR_PUPD10_0);
 8002e32:	23a0      	movs	r3, #160	; 0xa0
 8002e34:	05db      	lsls	r3, r3, #23
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	23a0      	movs	r3, #160	; 0xa0
 8002e3a:	05db      	lsls	r3, r3, #23
 8002e3c:	4939      	ldr	r1, [pc, #228]	; (8002f24 <uart1_gpio_init+0x17c>)
 8002e3e:	400a      	ands	r2, r1
 8002e40:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_PUPDR_PUPD10_1);
 8002e42:	23a0      	movs	r3, #160	; 0xa0
 8002e44:	05db      	lsls	r3, r3, #23
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	23a0      	movs	r3, #160	; 0xa0
 8002e4a:	05db      	lsls	r3, r3, #23
 8002e4c:	2180      	movs	r1, #128	; 0x80
 8002e4e:	0389      	lsls	r1, r1, #14
 8002e50:	430a      	orrs	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]
	/*  PA9 Tx low speed */
	CLEAR_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEED9_0);
 8002e54:	23a0      	movs	r3, #160	; 0xa0
 8002e56:	05db      	lsls	r3, r3, #23
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	23a0      	movs	r3, #160	; 0xa0
 8002e5c:	05db      	lsls	r3, r3, #23
 8002e5e:	4930      	ldr	r1, [pc, #192]	; (8002f20 <uart1_gpio_init+0x178>)
 8002e60:	400a      	ands	r2, r1
 8002e62:	609a      	str	r2, [r3, #8]
	CLEAR_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEED9_1);
 8002e64:	23a0      	movs	r3, #160	; 0xa0
 8002e66:	05db      	lsls	r3, r3, #23
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	23a0      	movs	r3, #160	; 0xa0
 8002e6c:	05db      	lsls	r3, r3, #23
 8002e6e:	4930      	ldr	r1, [pc, #192]	; (8002f30 <uart1_gpio_init+0x188>)
 8002e70:	400a      	ands	r2, r1
 8002e72:	609a      	str	r2, [r3, #8]
	/* PA10 RX low speed */
	SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEED10_0);
 8002e74:	23a0      	movs	r3, #160	; 0xa0
 8002e76:	05db      	lsls	r3, r3, #23
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	23a0      	movs	r3, #160	; 0xa0
 8002e7c:	05db      	lsls	r3, r3, #23
 8002e7e:	2180      	movs	r1, #128	; 0x80
 8002e80:	0349      	lsls	r1, r1, #13
 8002e82:	430a      	orrs	r2, r1
 8002e84:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEED10_1);
 8002e86:	23a0      	movs	r3, #160	; 0xa0
 8002e88:	05db      	lsls	r3, r3, #23
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	23a0      	movs	r3, #160	; 0xa0
 8002e8e:	05db      	lsls	r3, r3, #23
 8002e90:	2180      	movs	r1, #128	; 0x80
 8002e92:	0389      	lsls	r1, r1, #14
 8002e94:	430a      	orrs	r2, r1
 8002e96:	609a      	str	r2, [r3, #8]
	/*PA9 TX   AF1 as alter   */
	SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_0);
 8002e98:	23a0      	movs	r3, #160	; 0xa0
 8002e9a:	05db      	lsls	r3, r3, #23
 8002e9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e9e:	23a0      	movs	r3, #160	; 0xa0
 8002ea0:	05db      	lsls	r3, r3, #23
 8002ea2:	2110      	movs	r1, #16
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_1);
 8002ea8:	23a0      	movs	r3, #160	; 0xa0
 8002eaa:	05db      	lsls	r3, r3, #23
 8002eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eae:	23a0      	movs	r3, #160	; 0xa0
 8002eb0:	05db      	lsls	r3, r3, #23
 8002eb2:	2120      	movs	r1, #32
 8002eb4:	438a      	bics	r2, r1
 8002eb6:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_2);
 8002eb8:	23a0      	movs	r3, #160	; 0xa0
 8002eba:	05db      	lsls	r3, r3, #23
 8002ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ebe:	23a0      	movs	r3, #160	; 0xa0
 8002ec0:	05db      	lsls	r3, r3, #23
 8002ec2:	2140      	movs	r1, #64	; 0x40
 8002ec4:	438a      	bics	r2, r1
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_3);
 8002ec8:	23a0      	movs	r3, #160	; 0xa0
 8002eca:	05db      	lsls	r3, r3, #23
 8002ecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ece:	23a0      	movs	r3, #160	; 0xa0
 8002ed0:	05db      	lsls	r3, r3, #23
 8002ed2:	2180      	movs	r1, #128	; 0x80
 8002ed4:	438a      	bics	r2, r1
 8002ed6:	625a      	str	r2, [r3, #36]	; 0x24
	/* PA10 RX  AF1 as alter   */
	SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_0);
 8002ed8:	23a0      	movs	r3, #160	; 0xa0
 8002eda:	05db      	lsls	r3, r3, #23
 8002edc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ede:	23a0      	movs	r3, #160	; 0xa0
 8002ee0:	05db      	lsls	r3, r3, #23
 8002ee2:	2180      	movs	r1, #128	; 0x80
 8002ee4:	0049      	lsls	r1, r1, #1
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_1);
 8002eea:	23a0      	movs	r3, #160	; 0xa0
 8002eec:	05db      	lsls	r3, r3, #23
 8002eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ef0:	23a0      	movs	r3, #160	; 0xa0
 8002ef2:	05db      	lsls	r3, r3, #23
 8002ef4:	490c      	ldr	r1, [pc, #48]	; (8002f28 <uart1_gpio_init+0x180>)
 8002ef6:	400a      	ands	r2, r1
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_2);
 8002efa:	23a0      	movs	r3, #160	; 0xa0
 8002efc:	05db      	lsls	r3, r3, #23
 8002efe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f00:	23a0      	movs	r3, #160	; 0xa0
 8002f02:	05db      	lsls	r3, r3, #23
 8002f04:	4909      	ldr	r1, [pc, #36]	; (8002f2c <uart1_gpio_init+0x184>)
 8002f06:	400a      	ands	r2, r1
 8002f08:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_3);
 8002f0a:	23a0      	movs	r3, #160	; 0xa0
 8002f0c:	05db      	lsls	r3, r3, #23
 8002f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f10:	23a0      	movs	r3, #160	; 0xa0
 8002f12:	05db      	lsls	r3, r3, #23
 8002f14:	4907      	ldr	r1, [pc, #28]	; (8002f34 <uart1_gpio_init+0x18c>)
 8002f16:	400a      	ands	r2, r1
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	fffbffff 	.word	0xfffbffff
 8002f24:	ffefffff 	.word	0xffefffff
 8002f28:	fffffdff 	.word	0xfffffdff
 8002f2c:	fffffbff 	.word	0xfffffbff
 8002f30:	fff7ffff 	.word	0xfff7ffff
 8002f34:	fffff7ff 	.word	0xfffff7ff

08002f38 <uart1_init>:

void uart1_init(uint32_t pclk, uint32_t baud_rate, UART1_t *u) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
	uint32_t br_value = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]

	uart1_gpio_init();
 8002f48:	f7ff ff2e 	bl	8002da8 <uart1_gpio_init>

	/*enable clock access to USART1 */
	SET_BIT(RCC->APBENR2, RCC_APBENR2_USART1EN);
 8002f4c:	4b2a      	ldr	r3, [pc, #168]	; (8002ff8 <uart1_init+0xc0>)
 8002f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f50:	4b29      	ldr	r3, [pc, #164]	; (8002ff8 <uart1_init+0xc0>)
 8002f52:	2180      	movs	r1, #128	; 0x80
 8002f54:	01c9      	lsls	r1, r1, #7
 8002f56:	430a      	orrs	r2, r1
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40
	if (pclk == 16000000) {
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4a27      	ldr	r2, [pc, #156]	; (8002ffc <uart1_init+0xc4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d10b      	bne.n	8002f7a <uart1_init+0x42>
		/*set HSI 16 CLK */
		CLEAR_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_0);
 8002f62:	4b25      	ldr	r3, [pc, #148]	; (8002ff8 <uart1_init+0xc0>)
 8002f64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f66:	4b24      	ldr	r3, [pc, #144]	; (8002ff8 <uart1_init+0xc0>)
 8002f68:	2101      	movs	r1, #1
 8002f6a:	438a      	bics	r2, r1
 8002f6c:	655a      	str	r2, [r3, #84]	; 0x54
		SET_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_1);
 8002f6e:	4b22      	ldr	r3, [pc, #136]	; (8002ff8 <uart1_init+0xc0>)
 8002f70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f72:	4b21      	ldr	r3, [pc, #132]	; (8002ff8 <uart1_init+0xc0>)
 8002f74:	2102      	movs	r1, #2
 8002f76:	430a      	orrs	r2, r1
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54
	}
	//MODIFY_REG(USART1->PRESC,USART_PRESC_PRESCALER,0x0010);
	/* set baud rate */
	br_value = (pclk) / baud_rate;
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f7fd f8d1 	bl	8000124 <__udivsi3>
 8002f82:	0003      	movs	r3, r0
 8002f84:	617b      	str	r3, [r7, #20]
	USART1->BRR = (uint16_t) br_value;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	4b1d      	ldr	r3, [pc, #116]	; (8003000 <uart1_init+0xc8>)
 8002f8c:	60da      	str	r2, [r3, #12]
	/* transmitter enable*/
	USART1->CR1 = USART_CR1_TE | USART_CR1_RE;
 8002f8e:	4b1c      	ldr	r3, [pc, #112]	; (8003000 <uart1_init+0xc8>)
 8002f90:	220c      	movs	r2, #12
 8002f92:	601a      	str	r2, [r3, #0]

	u->rx_buffer = (uint8_t*) malloc(RX_BUFFLEN);
 8002f94:	2019      	movs	r0, #25
 8002f96:	f002 fd51 	bl	8005a3c <malloc>
 8002f9a:	0003      	movs	r3, r0
 8002f9c:	001a      	movs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	601a      	str	r2, [r3, #0]
	u->tx_buffer = (uint8_t*) malloc(TX_BUFFLEN);
 8002fa2:	2064      	movs	r0, #100	; 0x64
 8002fa4:	f002 fd4a 	bl	8005a3c <malloc>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	001a      	movs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	605a      	str	r2, [r3, #4]
	u->is_data_ready = false;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	725a      	strb	r2, [r3, #9]
	u->rx_count = 0;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	721a      	strb	r2, [r3, #8]

	uart1_clean_buffer(u);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f000 f8e5 	bl	800318e <uart1_clean_buffer>

	/* enable FIFO */
	SET_BIT(USART1->CR2, USART_CR1_FIFOEN);
 8002fc4:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <uart1_init+0xc8>)
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <uart1_init+0xc8>)
 8002fca:	2180      	movs	r1, #128	; 0x80
 8002fcc:	0589      	lsls	r1, r1, #22
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
	//SET_BIT(USART1->CR2, USART_CR2_RTOEN);
	/**/
	//MODIFY_REG(USART1->RTOR,USART_RTOR_RTO,100);
	/*set length */
	/* Enable interrupt */
	SET_BIT(USART1->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <uart1_init+0xc8>)
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <uart1_init+0xc8>)
 8002fd8:	2120      	movs	r1, #32
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART1_IRQn);
 8002fde:	201b      	movs	r0, #27
 8002fe0:	f7ff fec8 	bl	8002d74 <__NVIC_EnableIRQ>
	//uart1_dma_init();
//
	SET_BIT(USART1->CR1, USART_CR1_UE);
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <uart1_init+0xc8>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	4b05      	ldr	r3, [pc, #20]	; (8003000 <uart1_init+0xc8>)
 8002fea:	2101      	movs	r1, #1
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]
}
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b006      	add	sp, #24
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	00f42400 	.word	0x00f42400
 8003000:	40013800 	.word	0x40013800

08003004 <uart1_write>:
	/* set the destination buffer */
	/*set the source buffer */

}

void uart1_write(char ch) {
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	0002      	movs	r2, r0
 800300c:	1dfb      	adds	r3, r7, #7
 800300e:	701a      	strb	r2, [r3, #0]
	SET_BIT(GPIOA->ODR, GPIO_ODR_OD15);
 8003010:	23a0      	movs	r3, #160	; 0xa0
 8003012:	05db      	lsls	r3, r3, #23
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	23a0      	movs	r3, #160	; 0xa0
 8003018:	05db      	lsls	r3, r3, #23
 800301a:	2180      	movs	r1, #128	; 0x80
 800301c:	0209      	lsls	r1, r1, #8
 800301e:	430a      	orrs	r2, r1
 8003020:	615a      	str	r2, [r3, #20]

	while (!READ_BIT(USART1->ISR, USART_ISR_TXE_TXFNF))
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	4b0d      	ldr	r3, [pc, #52]	; (800305c <uart1_write+0x58>)
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	2280      	movs	r2, #128	; 0x80
 800302a:	4013      	ands	r3, r2
 800302c:	d0fa      	beq.n	8003024 <uart1_write+0x20>
		;
	USART1->TDR = (uint8_t) (ch & 0xFFU);
 800302e:	4b0b      	ldr	r3, [pc, #44]	; (800305c <uart1_write+0x58>)
 8003030:	1dfa      	adds	r2, r7, #7
 8003032:	7812      	ldrb	r2, [r2, #0]
 8003034:	629a      	str	r2, [r3, #40]	; 0x28

	while (!READ_BIT(USART1->ISR, USART_ISR_TC))
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	4b08      	ldr	r3, [pc, #32]	; (800305c <uart1_write+0x58>)
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	2240      	movs	r2, #64	; 0x40
 800303e:	4013      	ands	r3, r2
 8003040:	d0fa      	beq.n	8003038 <uart1_write+0x34>
		;

	CLEAR_BIT(GPIOA->ODR, GPIO_ODR_OD15);
 8003042:	23a0      	movs	r3, #160	; 0xa0
 8003044:	05db      	lsls	r3, r3, #23
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	23a0      	movs	r3, #160	; 0xa0
 800304a:	05db      	lsls	r3, r3, #23
 800304c:	4904      	ldr	r1, [pc, #16]	; (8003060 <uart1_write+0x5c>)
 800304e:	400a      	ands	r2, r1
 8003050:	615a      	str	r2, [r3, #20]
}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	46bd      	mov	sp, r7
 8003056:	b002      	add	sp, #8
 8003058:	bd80      	pop	{r7, pc}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	40013800 	.word	0x40013800
 8003060:	ffff7fff 	.word	0xffff7fff

08003064 <uart1_1byte_read>:
		}
		data[0] = USART1->RDR;
	}
}

uint8_t uart1_1byte_read(void) {
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
	bool override = READ_BIT(USART1->ISR, USART_ISR_ORE);
 800306a:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <uart1_1byte_read+0x5c>)
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	2208      	movs	r2, #8
 8003070:	401a      	ands	r2, r3
 8003072:	1dfb      	adds	r3, r7, #7
 8003074:	1e51      	subs	r1, r2, #1
 8003076:	418a      	sbcs	r2, r1
 8003078:	701a      	strb	r2, [r3, #0]
	bool data_present = READ_BIT(USART1->ISR, USART_ISR_RXNE_RXFNE);
 800307a:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <uart1_1byte_read+0x5c>)
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	2220      	movs	r2, #32
 8003080:	401a      	ands	r2, r3
 8003082:	1dbb      	adds	r3, r7, #6
 8003084:	1e51      	subs	r1, r2, #1
 8003086:	418a      	sbcs	r2, r1
 8003088:	701a      	strb	r2, [r3, #0]
//	bool busy = READ_BIT(USART1->ISR, USART_ISR_BUSY);
	if ((data_present || override)) {
 800308a:	1dbb      	adds	r3, r7, #6
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d103      	bne.n	800309a <uart1_1byte_read+0x36>
 8003092:	1dfb      	adds	r3, r7, #7
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00d      	beq.n	80030b6 <uart1_1byte_read+0x52>
		if (override)
 800309a:	1dfb      	adds	r3, r7, #7
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <uart1_1byte_read+0x4a>
			SET_BIT(USART1->ICR, USART_ICR_ORECF);
 80030a2:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <uart1_1byte_read+0x5c>)
 80030a4:	6a1a      	ldr	r2, [r3, #32]
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <uart1_1byte_read+0x5c>)
 80030a8:	2108      	movs	r1, #8
 80030aa:	430a      	orrs	r2, r1
 80030ac:	621a      	str	r2, [r3, #32]
		return USART1->RDR;
 80030ae:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <uart1_1byte_read+0x5c>)
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	e000      	b.n	80030b8 <uart1_1byte_read+0x54>
	} else
		return '\0';
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b002      	add	sp, #8
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40013800 	.word	0x40013800

080030c4 <uart1_read_to_frame>:

void  uart1_read_to_frame(UART1_t *u) {
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
	if (u->rx_count >= RX_BUFFLEN) {
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	7a1b      	ldrb	r3, [r3, #8]
 80030d0:	2b18      	cmp	r3, #24
 80030d2:	d906      	bls.n	80030e2 <uart1_read_to_frame+0x1e>
		uart1_clean_buffer(u);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 f859 	bl	800318e <uart1_clean_buffer>
		u->rx_count = 0;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	721a      	strb	r2, [r3, #8]
	}
	u->rx_buffer[u->rx_count++] = uart1_1byte_read();
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	7a1b      	ldrb	r3, [r3, #8]
 80030ea:	1c59      	adds	r1, r3, #1
 80030ec:	b2c8      	uxtb	r0, r1
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	7208      	strb	r0, [r1, #8]
 80030f2:	18d4      	adds	r4, r2, r3
 80030f4:	f7ff ffb6 	bl	8003064 <uart1_1byte_read>
 80030f8:	0003      	movs	r3, r0
 80030fa:	7023      	strb	r3, [r4, #0]
}
 80030fc:	46c0      	nop			; (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	b003      	add	sp, #12
 8003102:	bd90      	pop	{r4, r7, pc}

08003104 <uart1_send_str>:

void uart1_send_str(char *str) {
 8003104:	b590      	push	{r4, r7, lr}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; str[i] != '\0'; i++)
 800310c:	230f      	movs	r3, #15
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
 8003114:	e00d      	b.n	8003132 <uart1_send_str+0x2e>
		uart1_write(str[i]);
 8003116:	240f      	movs	r4, #15
 8003118:	193b      	adds	r3, r7, r4
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	18d3      	adds	r3, r2, r3
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	0018      	movs	r0, r3
 8003124:	f7ff ff6e 	bl	8003004 <uart1_write>
	for (i = 0; str[i] != '\0'; i++)
 8003128:	193b      	adds	r3, r7, r4
 800312a:	781a      	ldrb	r2, [r3, #0]
 800312c:	193b      	adds	r3, r7, r4
 800312e:	3201      	adds	r2, #1
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	230f      	movs	r3, #15
 8003134:	18fb      	adds	r3, r7, r3
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	18d3      	adds	r3, r2, r3
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1e9      	bne.n	8003116 <uart1_send_str+0x12>
}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	b005      	add	sp, #20
 800314a:	bd90      	pop	{r4, r7, pc}

0800314c <uart1_send_frame>:

void uart1_send_frame(char *str, uint8_t len) {
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	000a      	movs	r2, r1
 8003156:	1cfb      	adds	r3, r7, #3
 8003158:	701a      	strb	r2, [r3, #0]

	if (len > 0) {
 800315a:	1cfb      	adds	r3, r7, #3
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d011      	beq.n	8003186 <uart1_send_frame+0x3a>
		for (int i = 0; i < len; i++)
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	e009      	b.n	800317c <uart1_send_frame+0x30>
			uart1_write(str[i]);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	18d3      	adds	r3, r2, r3
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	0018      	movs	r0, r3
 8003172:	f7ff ff47 	bl	8003004 <uart1_write>
		for (int i = 0; i < len; i++)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	3301      	adds	r3, #1
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	1cfb      	adds	r3, r7, #3
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	429a      	cmp	r2, r3
 8003184:	dbf0      	blt.n	8003168 <uart1_send_frame+0x1c>
	}
}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	46bd      	mov	sp, r7
 800318a:	b004      	add	sp, #16
 800318c:	bd80      	pop	{r7, pc}

0800318e <uart1_clean_buffer>:

void uart1_clean_buffer(UART1_t *u) {
 800318e:	b580      	push	{r7, lr}
 8003190:	b084      	sub	sp, #16
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
	u->rx_count = 0;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	721a      	strb	r2, [r3, #8]
	if (TX_BUFFLEN > RX_BUFFLEN) {
		for (int i = 0; i < TX_BUFFLEN; i++) {
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	e011      	b.n	80031c6 <uart1_clean_buffer+0x38>
			if (i < RX_BUFFLEN)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2b18      	cmp	r3, #24
 80031a6:	dc05      	bgt.n	80031b4 <uart1_clean_buffer+0x26>
				u->rx_buffer[i] = 0x00;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	18d3      	adds	r3, r2, r3
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
			u->tx_buffer[i] = 0x00;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	18d3      	adds	r3, r2, r3
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < TX_BUFFLEN; i++) {
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	3301      	adds	r3, #1
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2b63      	cmp	r3, #99	; 0x63
 80031ca:	ddea      	ble.n	80031a2 <uart1_clean_buffer+0x14>
			if (i < TX_BUFFLEN)
				u->tx_buffer[i] = 0x00;
			u->rx_buffer[i] = 0x00;
		}
	}
}
 80031cc:	46c0      	nop			; (mov r8, r8)
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b004      	add	sp, #16
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <crc_get>:
#include "utils.h"

uint16_t crc_get(uint8_t* buffer, uint8_t buff_len) {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	000a      	movs	r2, r1
 80031e2:	1cfb      	adds	r3, r7, #3
 80031e4:	701a      	strb	r2, [r3, #0]
	uint8_t b;
	uint8_t i;
	uint16_t generator = 0x1021; //divisor is 16bit
 80031e6:	230a      	movs	r3, #10
 80031e8:	18fb      	adds	r3, r7, r3
 80031ea:	4a2b      	ldr	r2, [pc, #172]	; (8003298 <crc_get+0xc0>)
 80031ec:	801a      	strh	r2, [r3, #0]
	uint16_t crc = 0;			 // CRC value is 16bit
 80031ee:	230c      	movs	r3, #12
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	2200      	movs	r2, #0
 80031f4:	801a      	strh	r2, [r3, #0]

	for (b = 0; b < buff_len; b++) {
 80031f6:	230f      	movs	r3, #15
 80031f8:	18fb      	adds	r3, r7, r3
 80031fa:	2200      	movs	r2, #0
 80031fc:	701a      	strb	r2, [r3, #0]
 80031fe:	e03d      	b.n	800327c <crc_get+0xa4>
		crc ^= ((uint16_t) (buffer[b] << 8)); // move byte into MSB of 16bit CRC
 8003200:	230f      	movs	r3, #15
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	18d3      	adds	r3, r2, r3
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	b29b      	uxth	r3, r3
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	b299      	uxth	r1, r3
 8003212:	220c      	movs	r2, #12
 8003214:	18bb      	adds	r3, r7, r2
 8003216:	18ba      	adds	r2, r7, r2
 8003218:	8812      	ldrh	r2, [r2, #0]
 800321a:	404a      	eors	r2, r1
 800321c:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 8; i++) {
 800321e:	230e      	movs	r3, #14
 8003220:	18fb      	adds	r3, r7, r3
 8003222:	2200      	movs	r2, #0
 8003224:	701a      	strb	r2, [r3, #0]
 8003226:	e01e      	b.n	8003266 <crc_get+0x8e>
			if ((crc & 0x8000) != 0) // test for MSB = bit 15
 8003228:	210c      	movs	r1, #12
 800322a:	187b      	adds	r3, r7, r1
 800322c:	2200      	movs	r2, #0
 800322e:	5e9b      	ldrsh	r3, [r3, r2]
 8003230:	2b00      	cmp	r3, #0
 8003232:	da0c      	bge.n	800324e <crc_get+0x76>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 8003234:	187b      	adds	r3, r7, r1
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	b21a      	sxth	r2, r3
 800323c:	230a      	movs	r3, #10
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	2000      	movs	r0, #0
 8003242:	5e1b      	ldrsh	r3, [r3, r0]
 8003244:	4053      	eors	r3, r2
 8003246:	b21a      	sxth	r2, r3
 8003248:	187b      	adds	r3, r7, r1
 800324a:	801a      	strh	r2, [r3, #0]
 800324c:	e005      	b.n	800325a <crc_get+0x82>
			else
				crc <<= 1;
 800324e:	230c      	movs	r3, #12
 8003250:	18fa      	adds	r2, r7, r3
 8003252:	18fb      	adds	r3, r7, r3
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	18db      	adds	r3, r3, r3
 8003258:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
 800325a:	210e      	movs	r1, #14
 800325c:	187b      	adds	r3, r7, r1
 800325e:	781a      	ldrb	r2, [r3, #0]
 8003260:	187b      	adds	r3, r7, r1
 8003262:	3201      	adds	r2, #1
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	230e      	movs	r3, #14
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b07      	cmp	r3, #7
 800326e:	d9db      	bls.n	8003228 <crc_get+0x50>
	for (b = 0; b < buff_len; b++) {
 8003270:	210f      	movs	r1, #15
 8003272:	187b      	adds	r3, r7, r1
 8003274:	781a      	ldrb	r2, [r3, #0]
 8003276:	187b      	adds	r3, r7, r1
 8003278:	3201      	adds	r2, #1
 800327a:	701a      	strb	r2, [r3, #0]
 800327c:	230f      	movs	r3, #15
 800327e:	18fa      	adds	r2, r7, r3
 8003280:	1cfb      	adds	r3, r7, #3
 8003282:	7812      	ldrb	r2, [r2, #0]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d3ba      	bcc.n	8003200 <crc_get+0x28>
		}
	}
	return crc;
 800328a:	230c      	movs	r3, #12
 800328c:	18fb      	adds	r3, r7, r3
 800328e:	881b      	ldrh	r3, [r3, #0]
}
 8003290:	0018      	movs	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	b004      	add	sp, #16
 8003296:	bd80      	pop	{r7, pc}
 8003298:	00001021 	.word	0x00001021

0800329c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800329c:	480d      	ldr	r0, [pc, #52]	; (80032d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800329e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80032a0:	f7ff fd62 	bl	8002d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032a4:	480c      	ldr	r0, [pc, #48]	; (80032d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80032a6:	490d      	ldr	r1, [pc, #52]	; (80032dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80032a8:	4a0d      	ldr	r2, [pc, #52]	; (80032e0 <LoopForever+0xe>)
  movs r3, #0
 80032aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032ac:	e002      	b.n	80032b4 <LoopCopyDataInit>

080032ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032b2:	3304      	adds	r3, #4

080032b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032b8:	d3f9      	bcc.n	80032ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032ba:	4a0a      	ldr	r2, [pc, #40]	; (80032e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032bc:	4c0a      	ldr	r4, [pc, #40]	; (80032e8 <LoopForever+0x16>)
  movs r3, #0
 80032be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032c0:	e001      	b.n	80032c6 <LoopFillZerobss>

080032c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032c4:	3204      	adds	r2, #4

080032c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032c8:	d3fb      	bcc.n	80032c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80032ca:	f002 fb93 	bl	80059f4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80032ce:	f7fe fbfd 	bl	8001acc <main>

080032d2 <LoopForever>:

LoopForever:
  b LoopForever
 80032d2:	e7fe      	b.n	80032d2 <LoopForever>
  ldr   r0, =_estack
 80032d4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80032d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032dc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80032e0:	080065c0 	.word	0x080065c0
  ldr r2, =_sbss
 80032e4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80032e8:	200002c8 	.word	0x200002c8

080032ec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032ec:	e7fe      	b.n	80032ec <ADC1_IRQHandler>
	...

080032f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032f6:	1dfb      	adds	r3, r7, #7
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_Init+0x3c>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b0a      	ldr	r3, [pc, #40]	; (800332c <HAL_Init+0x3c>)
 8003302:	2180      	movs	r1, #128	; 0x80
 8003304:	0049      	lsls	r1, r1, #1
 8003306:	430a      	orrs	r2, r1
 8003308:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800330a:	2003      	movs	r0, #3
 800330c:	f000 f810 	bl	8003330 <HAL_InitTick>
 8003310:	1e03      	subs	r3, r0, #0
 8003312:	d003      	beq.n	800331c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003314:	1dfb      	adds	r3, r7, #7
 8003316:	2201      	movs	r2, #1
 8003318:	701a      	strb	r2, [r3, #0]
 800331a:	e001      	b.n	8003320 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800331c:	f7ff fbfe 	bl	8002b1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003320:	1dfb      	adds	r3, r7, #7
 8003322:	781b      	ldrb	r3, [r3, #0]
}
 8003324:	0018      	movs	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	b002      	add	sp, #8
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40022000 	.word	0x40022000

08003330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003338:	230f      	movs	r3, #15
 800333a:	18fb      	adds	r3, r7, r3
 800333c:	2200      	movs	r2, #0
 800333e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003340:	4b1d      	ldr	r3, [pc, #116]	; (80033b8 <HAL_InitTick+0x88>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d02b      	beq.n	80033a0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003348:	4b1c      	ldr	r3, [pc, #112]	; (80033bc <HAL_InitTick+0x8c>)
 800334a:	681c      	ldr	r4, [r3, #0]
 800334c:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <HAL_InitTick+0x88>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	0019      	movs	r1, r3
 8003352:	23fa      	movs	r3, #250	; 0xfa
 8003354:	0098      	lsls	r0, r3, #2
 8003356:	f7fc fee5 	bl	8000124 <__udivsi3>
 800335a:	0003      	movs	r3, r0
 800335c:	0019      	movs	r1, r3
 800335e:	0020      	movs	r0, r4
 8003360:	f7fc fee0 	bl	8000124 <__udivsi3>
 8003364:	0003      	movs	r3, r0
 8003366:	0018      	movs	r0, r3
 8003368:	f001 f97b 	bl	8004662 <HAL_SYSTICK_Config>
 800336c:	1e03      	subs	r3, r0, #0
 800336e:	d112      	bne.n	8003396 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b03      	cmp	r3, #3
 8003374:	d80a      	bhi.n	800338c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	2301      	movs	r3, #1
 800337a:	425b      	negs	r3, r3
 800337c:	2200      	movs	r2, #0
 800337e:	0018      	movs	r0, r3
 8003380:	f001 f94a 	bl	8004618 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003384:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <HAL_InitTick+0x90>)
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	e00d      	b.n	80033a8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800338c:	230f      	movs	r3, #15
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	2201      	movs	r2, #1
 8003392:	701a      	strb	r2, [r3, #0]
 8003394:	e008      	b.n	80033a8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003396:	230f      	movs	r3, #15
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	2201      	movs	r2, #1
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	e003      	b.n	80033a8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033a0:	230f      	movs	r3, #15
 80033a2:	18fb      	adds	r3, r7, r3
 80033a4:	2201      	movs	r2, #1
 80033a6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80033a8:	230f      	movs	r3, #15
 80033aa:	18fb      	adds	r3, r7, r3
 80033ac:	781b      	ldrb	r3, [r3, #0]
}
 80033ae:	0018      	movs	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b005      	add	sp, #20
 80033b4:	bd90      	pop	{r4, r7, pc}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	20000008 	.word	0x20000008
 80033bc:	20000000 	.word	0x20000000
 80033c0:	20000004 	.word	0x20000004

080033c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_IncTick+0x1c>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	001a      	movs	r2, r3
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_IncTick+0x20>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	18d2      	adds	r2, r2, r3
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <HAL_IncTick+0x20>)
 80033d6:	601a      	str	r2, [r3, #0]
}
 80033d8:	46c0      	nop			; (mov r8, r8)
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	20000008 	.word	0x20000008
 80033e4:	200002b4 	.word	0x200002b4

080033e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  return uwTick;
 80033ec:	4b02      	ldr	r3, [pc, #8]	; (80033f8 <HAL_GetTick+0x10>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	0018      	movs	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	200002b4 	.word	0x200002b4

080033fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003404:	f7ff fff0 	bl	80033e8 <HAL_GetTick>
 8003408:	0003      	movs	r3, r0
 800340a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3301      	adds	r3, #1
 8003414:	d005      	beq.n	8003422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003416:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <HAL_Delay+0x44>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	001a      	movs	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	189b      	adds	r3, r3, r2
 8003420:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	f7ff ffe0 	bl	80033e8 <HAL_GetTick>
 8003428:	0002      	movs	r2, r0
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	429a      	cmp	r2, r3
 8003432:	d8f7      	bhi.n	8003424 <HAL_Delay+0x28>
  {
  }
}
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	46bd      	mov	sp, r7
 800343a:	b004      	add	sp, #16
 800343c:	bd80      	pop	{r7, pc}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	20000008 	.word	0x20000008

08003444 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a05      	ldr	r2, [pc, #20]	; (8003468 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003454:	401a      	ands	r2, r3
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	601a      	str	r2, [r3, #0]
}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	46bd      	mov	sp, r7
 8003462:	b002      	add	sp, #8
 8003464:	bd80      	pop	{r7, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	fe3fffff 	.word	0xfe3fffff

0800346c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	23e0      	movs	r3, #224	; 0xe0
 800347a:	045b      	lsls	r3, r3, #17
 800347c:	4013      	ands	r3, r2
}
 800347e:	0018      	movs	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	b002      	add	sp, #8
 8003484:	bd80      	pop	{r7, pc}

08003486 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b084      	sub	sp, #16
 800348a:	af00      	add	r7, sp, #0
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	2104      	movs	r1, #4
 800349a:	400a      	ands	r2, r1
 800349c:	2107      	movs	r1, #7
 800349e:	4091      	lsls	r1, r2
 80034a0:	000a      	movs	r2, r1
 80034a2:	43d2      	mvns	r2, r2
 80034a4:	401a      	ands	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2104      	movs	r1, #4
 80034aa:	400b      	ands	r3, r1
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4099      	lsls	r1, r3
 80034b0:	000b      	movs	r3, r1
 80034b2:	431a      	orrs	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b004      	add	sp, #16
 80034be:	bd80      	pop	{r7, pc}

080034c0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	2104      	movs	r1, #4
 80034d2:	400a      	ands	r2, r1
 80034d4:	2107      	movs	r1, #7
 80034d6:	4091      	lsls	r1, r2
 80034d8:	000a      	movs	r2, r1
 80034da:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2104      	movs	r1, #4
 80034e0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80034e2:	40da      	lsrs	r2, r3
 80034e4:	0013      	movs	r3, r2
}
 80034e6:	0018      	movs	r0, r3
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b002      	add	sp, #8
 80034ec:	bd80      	pop	{r7, pc}

080034ee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	23c0      	movs	r3, #192	; 0xc0
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	4013      	ands	r3, r2
 8003500:	d101      	bne.n	8003506 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003506:	2300      	movs	r3, #0
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b002      	add	sp, #8
 800350e:	bd80      	pop	{r7, pc}

08003510 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	211f      	movs	r1, #31
 8003524:	400a      	ands	r2, r1
 8003526:	210f      	movs	r1, #15
 8003528:	4091      	lsls	r1, r2
 800352a:	000a      	movs	r2, r1
 800352c:	43d2      	mvns	r2, r2
 800352e:	401a      	ands	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	0e9b      	lsrs	r3, r3, #26
 8003534:	210f      	movs	r1, #15
 8003536:	4019      	ands	r1, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	201f      	movs	r0, #31
 800353c:	4003      	ands	r3, r0
 800353e:	4099      	lsls	r1, r3
 8003540:	000b      	movs	r3, r1
 8003542:	431a      	orrs	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003548:	46c0      	nop			; (mov r8, r8)
 800354a:	46bd      	mov	sp, r7
 800354c:	b004      	add	sp, #16
 800354e:	bd80      	pop	{r7, pc}

08003550 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	035b      	lsls	r3, r3, #13
 8003562:	0b5b      	lsrs	r3, r3, #13
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	629a      	str	r2, [r3, #40]	; 0x28
}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	46bd      	mov	sp, r7
 800356e:	b002      	add	sp, #8
 8003570:	bd80      	pop	{r7, pc}

08003572 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	0352      	lsls	r2, r2, #13
 8003584:	0b52      	lsrs	r2, r2, #13
 8003586:	43d2      	mvns	r2, r2
 8003588:	401a      	ands	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	46bd      	mov	sp, r7
 8003592:	b002      	add	sp, #8
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	0212      	lsls	r2, r2, #8
 80035ac:	43d2      	mvns	r2, r2
 80035ae:	401a      	ands	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	400b      	ands	r3, r1
 80035b8:	4904      	ldr	r1, [pc, #16]	; (80035cc <LL_ADC_SetChannelSamplingTime+0x34>)
 80035ba:	400b      	ands	r3, r1
 80035bc:	431a      	orrs	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b004      	add	sp, #16
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	07ffff00 	.word	0x07ffff00

080035d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4a05      	ldr	r2, [pc, #20]	; (80035f4 <LL_ADC_EnableInternalRegulator+0x24>)
 80035de:	4013      	ands	r3, r2
 80035e0:	2280      	movs	r2, #128	; 0x80
 80035e2:	0552      	lsls	r2, r2, #21
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b002      	add	sp, #8
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	6fffffe8 	.word	0x6fffffe8

080035f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	2380      	movs	r3, #128	; 0x80
 8003606:	055b      	lsls	r3, r3, #21
 8003608:	401a      	ands	r2, r3
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	055b      	lsls	r3, r3, #21
 800360e:	429a      	cmp	r2, r3
 8003610:	d101      	bne.n	8003616 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003616:	2300      	movs	r3, #0
}
 8003618:	0018      	movs	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	b002      	add	sp, #8
 800361e:	bd80      	pop	{r7, pc}

08003620 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	4a04      	ldr	r2, [pc, #16]	; (8003640 <LL_ADC_Enable+0x20>)
 800362e:	4013      	ands	r3, r2
 8003630:	2201      	movs	r2, #1
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003638:	46c0      	nop			; (mov r8, r8)
 800363a:	46bd      	mov	sp, r7
 800363c:	b002      	add	sp, #8
 800363e:	bd80      	pop	{r7, pc}
 8003640:	7fffffe8 	.word	0x7fffffe8

08003644 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	4a04      	ldr	r2, [pc, #16]	; (8003664 <LL_ADC_Disable+0x20>)
 8003652:	4013      	ands	r3, r2
 8003654:	2202      	movs	r2, #2
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800365c:	46c0      	nop			; (mov r8, r8)
 800365e:	46bd      	mov	sp, r7
 8003660:	b002      	add	sp, #8
 8003662:	bd80      	pop	{r7, pc}
 8003664:	7fffffe8 	.word	0x7fffffe8

08003668 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2201      	movs	r2, #1
 8003676:	4013      	ands	r3, r2
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <LL_ADC_IsEnabled+0x18>
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <LL_ADC_IsEnabled+0x1a>
 8003680:	2300      	movs	r3, #0
}
 8003682:	0018      	movs	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	b002      	add	sp, #8
 8003688:	bd80      	pop	{r7, pc}

0800368a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2202      	movs	r2, #2
 8003698:	4013      	ands	r3, r2
 800369a:	2b02      	cmp	r3, #2
 800369c:	d101      	bne.n	80036a2 <LL_ADC_IsDisableOngoing+0x18>
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <LL_ADC_IsDisableOngoing+0x1a>
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	0018      	movs	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b002      	add	sp, #8
 80036aa:	bd80      	pop	{r7, pc}

080036ac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4a04      	ldr	r2, [pc, #16]	; (80036cc <LL_ADC_REG_StartConversion+0x20>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	2204      	movs	r2, #4
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80036c4:	46c0      	nop			; (mov r8, r8)
 80036c6:	46bd      	mov	sp, r7
 80036c8:	b002      	add	sp, #8
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	7fffffe8 	.word	0x7fffffe8

080036d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2204      	movs	r2, #4
 80036de:	4013      	ands	r3, r2
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d101      	bne.n	80036e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b002      	add	sp, #8
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036fc:	231f      	movs	r3, #31
 80036fe:	18fb      	adds	r3, r7, r3
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003704:	2300      	movs	r3, #0
 8003706:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e17f      	b.n	8003a1a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10a      	bne.n	8003738 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	0018      	movs	r0, r3
 8003726:	f7ff fa1d 	bl	8002b64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2254      	movs	r2, #84	; 0x54
 8003734:	2100      	movs	r1, #0
 8003736:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	0018      	movs	r0, r3
 800373e:	f7ff ff5b 	bl	80035f8 <LL_ADC_IsInternalRegulatorEnabled>
 8003742:	1e03      	subs	r3, r0, #0
 8003744:	d115      	bne.n	8003772 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	0018      	movs	r0, r3
 800374c:	f7ff ff40 	bl	80035d0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003750:	4bb4      	ldr	r3, [pc, #720]	; (8003a24 <HAL_ADC_Init+0x330>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	49b4      	ldr	r1, [pc, #720]	; (8003a28 <HAL_ADC_Init+0x334>)
 8003756:	0018      	movs	r0, r3
 8003758:	f7fc fce4 	bl	8000124 <__udivsi3>
 800375c:	0003      	movs	r3, r0
 800375e:	3301      	adds	r3, #1
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003764:	e002      	b.n	800376c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	3b01      	subs	r3, #1
 800376a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f9      	bne.n	8003766 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	0018      	movs	r0, r3
 8003778:	f7ff ff3e 	bl	80035f8 <LL_ADC_IsInternalRegulatorEnabled>
 800377c:	1e03      	subs	r3, r0, #0
 800377e:	d10f      	bne.n	80037a0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003784:	2210      	movs	r2, #16
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003790:	2201      	movs	r2, #1
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003798:	231f      	movs	r3, #31
 800379a:	18fb      	adds	r3, r7, r3
 800379c:	2201      	movs	r2, #1
 800379e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	0018      	movs	r0, r3
 80037a6:	f7ff ff93 	bl	80036d0 <LL_ADC_REG_IsConversionOngoing>
 80037aa:	0003      	movs	r3, r0
 80037ac:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b2:	2210      	movs	r2, #16
 80037b4:	4013      	ands	r3, r2
 80037b6:	d000      	beq.n	80037ba <HAL_ADC_Init+0xc6>
 80037b8:	e122      	b.n	8003a00 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d000      	beq.n	80037c2 <HAL_ADC_Init+0xce>
 80037c0:	e11e      	b.n	8003a00 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c6:	4a99      	ldr	r2, [pc, #612]	; (8003a2c <HAL_ADC_Init+0x338>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	2202      	movs	r2, #2
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	0018      	movs	r0, r3
 80037d8:	f7ff ff46 	bl	8003668 <LL_ADC_IsEnabled>
 80037dc:	1e03      	subs	r3, r0, #0
 80037de:	d000      	beq.n	80037e2 <HAL_ADC_Init+0xee>
 80037e0:	e0ad      	b.n	800393e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	7e1b      	ldrb	r3, [r3, #24]
 80037ea:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80037ec:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	7e5b      	ldrb	r3, [r3, #25]
 80037f2:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80037f4:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7e9b      	ldrb	r3, [r3, #26]
 80037fa:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80037fc:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <HAL_ADC_Init+0x118>
 8003806:	2380      	movs	r3, #128	; 0x80
 8003808:	015b      	lsls	r3, r3, #5
 800380a:	e000      	b.n	800380e <HAL_ADC_Init+0x11a>
 800380c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800380e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003814:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	da04      	bge.n	8003828 <HAL_ADC_Init+0x134>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	085b      	lsrs	r3, r3, #1
 8003826:	e001      	b.n	800382c <HAL_ADC_Init+0x138>
 8003828:	2380      	movs	r3, #128	; 0x80
 800382a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800382c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	212c      	movs	r1, #44	; 0x2c
 8003832:	5c5b      	ldrb	r3, [r3, r1]
 8003834:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003836:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2220      	movs	r2, #32
 8003842:	5c9b      	ldrb	r3, [r3, r2]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d115      	bne.n	8003874 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	7e9b      	ldrb	r3, [r3, #26]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d105      	bne.n	800385c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2280      	movs	r2, #128	; 0x80
 8003854:	0252      	lsls	r2, r2, #9
 8003856:	4313      	orrs	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	e00b      	b.n	8003874 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003860:	2220      	movs	r2, #32
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386c:	2201      	movs	r2, #1
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00a      	beq.n	8003892 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003880:	23e0      	movs	r3, #224	; 0xe0
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800388a:	4313      	orrs	r3, r2
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4313      	orrs	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4a65      	ldr	r2, [pc, #404]	; (8003a30 <HAL_ADC_Init+0x33c>)
 800389a:	4013      	ands	r3, r2
 800389c:	0019      	movs	r1, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	0f9b      	lsrs	r3, r3, #30
 80038ae:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80038b4:	4313      	orrs	r3, r2
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	223c      	movs	r2, #60	; 0x3c
 80038c0:	5c9b      	ldrb	r3, [r3, r2]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d111      	bne.n	80038ea <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	0f9b      	lsrs	r3, r3, #30
 80038cc:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80038d2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80038d8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80038de:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	2201      	movs	r2, #1
 80038e6:	4313      	orrs	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	4a50      	ldr	r2, [pc, #320]	; (8003a34 <HAL_ADC_Init+0x340>)
 80038f2:	4013      	ands	r3, r2
 80038f4:	0019      	movs	r1, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	23c0      	movs	r3, #192	; 0xc0
 8003906:	061b      	lsls	r3, r3, #24
 8003908:	429a      	cmp	r2, r3
 800390a:	d018      	beq.n	800393e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	05db      	lsls	r3, r3, #23
 8003914:	429a      	cmp	r2, r3
 8003916:	d012      	beq.n	800393e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800391c:	2380      	movs	r3, #128	; 0x80
 800391e:	061b      	lsls	r3, r3, #24
 8003920:	429a      	cmp	r2, r3
 8003922:	d00c      	beq.n	800393e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003924:	4b44      	ldr	r3, [pc, #272]	; (8003a38 <HAL_ADC_Init+0x344>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a44      	ldr	r2, [pc, #272]	; (8003a3c <HAL_ADC_Init+0x348>)
 800392a:	4013      	ands	r3, r2
 800392c:	0019      	movs	r1, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	23f0      	movs	r3, #240	; 0xf0
 8003934:	039b      	lsls	r3, r3, #14
 8003936:	401a      	ands	r2, r3
 8003938:	4b3f      	ldr	r3, [pc, #252]	; (8003a38 <HAL_ADC_Init+0x344>)
 800393a:	430a      	orrs	r2, r1
 800393c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003946:	001a      	movs	r2, r3
 8003948:	2100      	movs	r1, #0
 800394a:	f7ff fd9c 	bl	8003486 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	493a      	ldr	r1, [pc, #232]	; (8003a40 <HAL_ADC_Init+0x34c>)
 8003958:	001a      	movs	r2, r3
 800395a:	f7ff fd94 	bl	8003486 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d109      	bne.n	800397a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2110      	movs	r1, #16
 8003972:	4249      	negs	r1, r1
 8003974:	430a      	orrs	r2, r1
 8003976:	629a      	str	r2, [r3, #40]	; 0x28
 8003978:	e018      	b.n	80039ac <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	2380      	movs	r3, #128	; 0x80
 8003980:	039b      	lsls	r3, r3, #14
 8003982:	429a      	cmp	r2, r3
 8003984:	d112      	bne.n	80039ac <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	3b01      	subs	r3, #1
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	221c      	movs	r2, #28
 8003996:	4013      	ands	r3, r2
 8003998:	2210      	movs	r2, #16
 800399a:	4252      	negs	r2, r2
 800399c:	409a      	lsls	r2, r3
 800399e:	0011      	movs	r1, r2
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2100      	movs	r1, #0
 80039b2:	0018      	movs	r0, r3
 80039b4:	f7ff fd84 	bl	80034c0 <LL_ADC_GetSamplingTimeCommonChannels>
 80039b8:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80039be:	429a      	cmp	r2, r3
 80039c0:	d10b      	bne.n	80039da <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039cc:	2203      	movs	r2, #3
 80039ce:	4393      	bics	r3, r2
 80039d0:	2201      	movs	r2, #1
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80039d8:	e01c      	b.n	8003a14 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039de:	2212      	movs	r2, #18
 80039e0:	4393      	bics	r3, r2
 80039e2:	2210      	movs	r2, #16
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ee:	2201      	movs	r2, #1
 80039f0:	431a      	orrs	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80039f6:	231f      	movs	r3, #31
 80039f8:	18fb      	adds	r3, r7, r3
 80039fa:	2201      	movs	r2, #1
 80039fc:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80039fe:	e009      	b.n	8003a14 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a04:	2210      	movs	r2, #16
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003a0c:	231f      	movs	r3, #31
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	2201      	movs	r2, #1
 8003a12:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003a14:	231f      	movs	r3, #31
 8003a16:	18fb      	adds	r3, r7, r3
 8003a18:	781b      	ldrb	r3, [r3, #0]
}
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b008      	add	sp, #32
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	20000000 	.word	0x20000000
 8003a28:	00030d40 	.word	0x00030d40
 8003a2c:	fffffefd 	.word	0xfffffefd
 8003a30:	fffe0201 	.word	0xfffe0201
 8003a34:	1ffffc02 	.word	0x1ffffc02
 8003a38:	40012708 	.word	0x40012708
 8003a3c:	ffc3ffff 	.word	0xffc3ffff
 8003a40:	07ffff04 	.word	0x07ffff04

08003a44 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003a44:	b5b0      	push	{r4, r5, r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	0018      	movs	r0, r3
 8003a56:	f7ff fe3b 	bl	80036d0 <LL_ADC_REG_IsConversionOngoing>
 8003a5a:	1e03      	subs	r3, r0, #0
 8003a5c:	d16c      	bne.n	8003b38 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2254      	movs	r2, #84	; 0x54
 8003a62:	5c9b      	ldrb	r3, [r3, r2]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_ADC_Start_DMA+0x28>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e06c      	b.n	8003b46 <HAL_ADC_Start_DMA+0x102>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2254      	movs	r2, #84	; 0x54
 8003a70:	2101      	movs	r1, #1
 8003a72:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d113      	bne.n	8003aa8 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	0018      	movs	r0, r3
 8003a86:	f7ff fdef 	bl	8003668 <LL_ADC_IsEnabled>
 8003a8a:	1e03      	subs	r3, r0, #0
 8003a8c:	d004      	beq.n	8003a98 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	0018      	movs	r0, r3
 8003a94:	f7ff fdd6 	bl	8003644 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003aa8:	2517      	movs	r5, #23
 8003aaa:	197c      	adds	r4, r7, r5
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f000 fa3e 	bl	8003f30 <ADC_Enable>
 8003ab4:	0003      	movs	r3, r0
 8003ab6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003ab8:	002c      	movs	r4, r5
 8003aba:	193b      	adds	r3, r7, r4
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d13e      	bne.n	8003b40 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac6:	4a22      	ldr	r2, [pc, #136]	; (8003b50 <HAL_ADC_Start_DMA+0x10c>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	2280      	movs	r2, #128	; 0x80
 8003acc:	0052      	lsls	r2, r2, #1
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ade:	4a1d      	ldr	r2, [pc, #116]	; (8003b54 <HAL_ADC_Start_DMA+0x110>)
 8003ae0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae6:	4a1c      	ldr	r2, [pc, #112]	; (8003b58 <HAL_ADC_Start_DMA+0x114>)
 8003ae8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aee:	4a1b      	ldr	r2, [pc, #108]	; (8003b5c <HAL_ADC_Start_DMA+0x118>)
 8003af0:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	221c      	movs	r2, #28
 8003af8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2254      	movs	r2, #84	; 0x54
 8003afe:	2100      	movs	r1, #0
 8003b00:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2110      	movs	r1, #16
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3340      	adds	r3, #64	; 0x40
 8003b1c:	0019      	movs	r1, r3
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	193c      	adds	r4, r7, r4
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f000 fe34 	bl	8004790 <HAL_DMA_Start_IT>
 8003b28:	0003      	movs	r3, r0
 8003b2a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	0018      	movs	r0, r3
 8003b32:	f7ff fdbb 	bl	80036ac <LL_ADC_REG_StartConversion>
 8003b36:	e003      	b.n	8003b40 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b38:	2317      	movs	r3, #23
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003b40:	2317      	movs	r3, #23
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	781b      	ldrb	r3, [r3, #0]
}
 8003b46:	0018      	movs	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b006      	add	sp, #24
 8003b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	fffff0fe 	.word	0xfffff0fe
 8003b54:	080040f9 	.word	0x080040f9
 8003b58:	080041c1 	.word	0x080041c1
 8003b5c:	080041df 	.word	0x080041df

08003b60 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003b68:	46c0      	nop			; (mov r8, r8)
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b002      	add	sp, #8
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003b78:	46c0      	nop			; (mov r8, r8)
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b002      	add	sp, #8
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b8a:	2317      	movs	r3, #23
 8003b8c:	18fb      	adds	r3, r7, r3
 8003b8e:	2200      	movs	r2, #0
 8003b90:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2254      	movs	r2, #84	; 0x54
 8003b9a:	5c9b      	ldrb	r3, [r3, r2]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_ADC_ConfigChannel+0x24>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e1c0      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x3a6>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2254      	movs	r2, #84	; 0x54
 8003ba8:	2101      	movs	r1, #1
 8003baa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f7ff fd8d 	bl	80036d0 <LL_ADC_REG_IsConversionOngoing>
 8003bb6:	1e03      	subs	r3, r0, #0
 8003bb8:	d000      	beq.n	8003bbc <HAL_ADC_ConfigChannel+0x3c>
 8003bba:	e1a3      	b.n	8003f04 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d100      	bne.n	8003bc6 <HAL_ADC_ConfigChannel+0x46>
 8003bc4:	e143      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	061b      	lsls	r3, r3, #24
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d004      	beq.n	8003bdc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bd6:	4ac1      	ldr	r2, [pc, #772]	; (8003edc <HAL_ADC_ConfigChannel+0x35c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d108      	bne.n	8003bee <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	0019      	movs	r1, r3
 8003be6:	0010      	movs	r0, r2
 8003be8:	f7ff fcb2 	bl	8003550 <LL_ADC_REG_SetSequencerChAdd>
 8003bec:	e0c9      	b.n	8003d82 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	211f      	movs	r1, #31
 8003bf8:	400b      	ands	r3, r1
 8003bfa:	210f      	movs	r1, #15
 8003bfc:	4099      	lsls	r1, r3
 8003bfe:	000b      	movs	r3, r1
 8003c00:	43db      	mvns	r3, r3
 8003c02:	4013      	ands	r3, r2
 8003c04:	0019      	movs	r1, r3
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	035b      	lsls	r3, r3, #13
 8003c0c:	0b5b      	lsrs	r3, r3, #13
 8003c0e:	d105      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x9c>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	0e9b      	lsrs	r3, r3, #26
 8003c16:	221f      	movs	r2, #31
 8003c18:	4013      	ands	r3, r2
 8003c1a:	e098      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1ce>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2201      	movs	r2, #1
 8003c22:	4013      	ands	r3, r2
 8003c24:	d000      	beq.n	8003c28 <HAL_ADC_ConfigChannel+0xa8>
 8003c26:	e091      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x1cc>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d000      	beq.n	8003c34 <HAL_ADC_ConfigChannel+0xb4>
 8003c32:	e089      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x1c8>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2204      	movs	r2, #4
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d000      	beq.n	8003c40 <HAL_ADC_ConfigChannel+0xc0>
 8003c3e:	e081      	b.n	8003d44 <HAL_ADC_ConfigChannel+0x1c4>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2208      	movs	r2, #8
 8003c46:	4013      	ands	r3, r2
 8003c48:	d000      	beq.n	8003c4c <HAL_ADC_ConfigChannel+0xcc>
 8003c4a:	e079      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x1c0>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2210      	movs	r2, #16
 8003c52:	4013      	ands	r3, r2
 8003c54:	d000      	beq.n	8003c58 <HAL_ADC_ConfigChannel+0xd8>
 8003c56:	e071      	b.n	8003d3c <HAL_ADC_ConfigChannel+0x1bc>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d000      	beq.n	8003c64 <HAL_ADC_ConfigChannel+0xe4>
 8003c62:	e069      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x1b8>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2240      	movs	r2, #64	; 0x40
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d000      	beq.n	8003c70 <HAL_ADC_ConfigChannel+0xf0>
 8003c6e:	e061      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x1b4>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2280      	movs	r2, #128	; 0x80
 8003c76:	4013      	ands	r3, r2
 8003c78:	d000      	beq.n	8003c7c <HAL_ADC_ConfigChannel+0xfc>
 8003c7a:	e059      	b.n	8003d30 <HAL_ADC_ConfigChannel+0x1b0>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	2380      	movs	r3, #128	; 0x80
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	4013      	ands	r3, r2
 8003c86:	d151      	bne.n	8003d2c <HAL_ADC_ConfigChannel+0x1ac>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	2380      	movs	r3, #128	; 0x80
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4013      	ands	r3, r2
 8003c92:	d149      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x1a8>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	2380      	movs	r3, #128	; 0x80
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d141      	bne.n	8003d24 <HAL_ADC_ConfigChannel+0x1a4>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d139      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x1a0>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	2380      	movs	r3, #128	; 0x80
 8003cb2:	015b      	lsls	r3, r3, #5
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d131      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x19c>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	2380      	movs	r3, #128	; 0x80
 8003cbe:	019b      	lsls	r3, r3, #6
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d129      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x198>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	01db      	lsls	r3, r3, #7
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d121      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x194>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	2380      	movs	r3, #128	; 0x80
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d119      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x190>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	2380      	movs	r3, #128	; 0x80
 8003ce2:	025b      	lsls	r3, r3, #9
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d111      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x18c>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	2380      	movs	r3, #128	; 0x80
 8003cee:	029b      	lsls	r3, r3, #10
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	d109      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x188>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	2380      	movs	r3, #128	; 0x80
 8003cfa:	02db      	lsls	r3, r3, #11
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d001      	beq.n	8003d04 <HAL_ADC_ConfigChannel+0x184>
 8003d00:	2312      	movs	r3, #18
 8003d02:	e024      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1ce>
 8003d04:	2300      	movs	r3, #0
 8003d06:	e022      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1ce>
 8003d08:	2311      	movs	r3, #17
 8003d0a:	e020      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1ce>
 8003d0c:	2310      	movs	r3, #16
 8003d0e:	e01e      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1ce>
 8003d10:	230f      	movs	r3, #15
 8003d12:	e01c      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1ce>
 8003d14:	230e      	movs	r3, #14
 8003d16:	e01a      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1ce>
 8003d18:	230d      	movs	r3, #13
 8003d1a:	e018      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1ce>
 8003d1c:	230c      	movs	r3, #12
 8003d1e:	e016      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1ce>
 8003d20:	230b      	movs	r3, #11
 8003d22:	e014      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1ce>
 8003d24:	230a      	movs	r3, #10
 8003d26:	e012      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1ce>
 8003d28:	2309      	movs	r3, #9
 8003d2a:	e010      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1ce>
 8003d2c:	2308      	movs	r3, #8
 8003d2e:	e00e      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1ce>
 8003d30:	2307      	movs	r3, #7
 8003d32:	e00c      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1ce>
 8003d34:	2306      	movs	r3, #6
 8003d36:	e00a      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1ce>
 8003d38:	2305      	movs	r3, #5
 8003d3a:	e008      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1ce>
 8003d3c:	2304      	movs	r3, #4
 8003d3e:	e006      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1ce>
 8003d40:	2303      	movs	r3, #3
 8003d42:	e004      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1ce>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e002      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1ce>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1ce>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	6852      	ldr	r2, [r2, #4]
 8003d52:	201f      	movs	r0, #31
 8003d54:	4002      	ands	r2, r0
 8003d56:	4093      	lsls	r3, r2
 8003d58:	000a      	movs	r2, r1
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	089b      	lsrs	r3, r3, #2
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d808      	bhi.n	8003d82 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	6859      	ldr	r1, [r3, #4]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	001a      	movs	r2, r3
 8003d7e:	f7ff fbc7 	bl	8003510 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	6819      	ldr	r1, [r3, #0]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	001a      	movs	r2, r3
 8003d90:	f7ff fc02 	bl	8003598 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	db00      	blt.n	8003d9e <HAL_ADC_ConfigChannel+0x21e>
 8003d9c:	e0bc      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d9e:	4b50      	ldr	r3, [pc, #320]	; (8003ee0 <HAL_ADC_ConfigChannel+0x360>)
 8003da0:	0018      	movs	r0, r3
 8003da2:	f7ff fb63 	bl	800346c <LL_ADC_GetCommonPathInternalCh>
 8003da6:	0003      	movs	r3, r0
 8003da8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a4d      	ldr	r2, [pc, #308]	; (8003ee4 <HAL_ADC_ConfigChannel+0x364>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d122      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	2380      	movs	r3, #128	; 0x80
 8003db8:	041b      	lsls	r3, r3, #16
 8003dba:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003dbc:	d11d      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	2280      	movs	r2, #128	; 0x80
 8003dc2:	0412      	lsls	r2, r2, #16
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	4a46      	ldr	r2, [pc, #280]	; (8003ee0 <HAL_ADC_ConfigChannel+0x360>)
 8003dc8:	0019      	movs	r1, r3
 8003dca:	0010      	movs	r0, r2
 8003dcc:	f7ff fb3a 	bl	8003444 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dd0:	4b45      	ldr	r3, [pc, #276]	; (8003ee8 <HAL_ADC_ConfigChannel+0x368>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4945      	ldr	r1, [pc, #276]	; (8003eec <HAL_ADC_ConfigChannel+0x36c>)
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f7fc f9a4 	bl	8000124 <__udivsi3>
 8003ddc:	0003      	movs	r3, r0
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	0013      	movs	r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	189b      	adds	r3, r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003dea:	e002      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1f9      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003df8:	e08e      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a3c      	ldr	r2, [pc, #240]	; (8003ef0 <HAL_ADC_ConfigChannel+0x370>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d10e      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	2380      	movs	r3, #128	; 0x80
 8003e08:	045b      	lsls	r3, r3, #17
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d109      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2280      	movs	r2, #128	; 0x80
 8003e12:	0452      	lsls	r2, r2, #17
 8003e14:	4313      	orrs	r3, r2
 8003e16:	4a32      	ldr	r2, [pc, #200]	; (8003ee0 <HAL_ADC_ConfigChannel+0x360>)
 8003e18:	0019      	movs	r1, r3
 8003e1a:	0010      	movs	r0, r2
 8003e1c:	f7ff fb12 	bl	8003444 <LL_ADC_SetCommonPathInternalCh>
 8003e20:	e07a      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a33      	ldr	r2, [pc, #204]	; (8003ef4 <HAL_ADC_ConfigChannel+0x374>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d000      	beq.n	8003e2e <HAL_ADC_ConfigChannel+0x2ae>
 8003e2c:	e074      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	2380      	movs	r3, #128	; 0x80
 8003e32:	03db      	lsls	r3, r3, #15
 8003e34:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003e36:	d000      	beq.n	8003e3a <HAL_ADC_ConfigChannel+0x2ba>
 8003e38:	e06e      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2280      	movs	r2, #128	; 0x80
 8003e3e:	03d2      	lsls	r2, r2, #15
 8003e40:	4313      	orrs	r3, r2
 8003e42:	4a27      	ldr	r2, [pc, #156]	; (8003ee0 <HAL_ADC_ConfigChannel+0x360>)
 8003e44:	0019      	movs	r1, r3
 8003e46:	0010      	movs	r0, r2
 8003e48:	f7ff fafc 	bl	8003444 <LL_ADC_SetCommonPathInternalCh>
 8003e4c:	e064      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	2380      	movs	r3, #128	; 0x80
 8003e54:	061b      	lsls	r3, r3, #24
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d004      	beq.n	8003e64 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e5e:	4a1f      	ldr	r2, [pc, #124]	; (8003edc <HAL_ADC_ConfigChannel+0x35c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d107      	bne.n	8003e74 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	0019      	movs	r1, r3
 8003e6e:	0010      	movs	r0, r2
 8003e70:	f7ff fb7f 	bl	8003572 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	da4d      	bge.n	8003f18 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e7c:	4b18      	ldr	r3, [pc, #96]	; (8003ee0 <HAL_ADC_ConfigChannel+0x360>)
 8003e7e:	0018      	movs	r0, r3
 8003e80:	f7ff faf4 	bl	800346c <LL_ADC_GetCommonPathInternalCh>
 8003e84:	0003      	movs	r3, r0
 8003e86:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a15      	ldr	r2, [pc, #84]	; (8003ee4 <HAL_ADC_ConfigChannel+0x364>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d108      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4a18      	ldr	r2, [pc, #96]	; (8003ef8 <HAL_ADC_ConfigChannel+0x378>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	4a11      	ldr	r2, [pc, #68]	; (8003ee0 <HAL_ADC_ConfigChannel+0x360>)
 8003e9a:	0019      	movs	r1, r3
 8003e9c:	0010      	movs	r0, r2
 8003e9e:	f7ff fad1 	bl	8003444 <LL_ADC_SetCommonPathInternalCh>
 8003ea2:	e039      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a11      	ldr	r2, [pc, #68]	; (8003ef0 <HAL_ADC_ConfigChannel+0x370>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d108      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4a12      	ldr	r2, [pc, #72]	; (8003efc <HAL_ADC_ConfigChannel+0x37c>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <HAL_ADC_ConfigChannel+0x360>)
 8003eb6:	0019      	movs	r1, r3
 8003eb8:	0010      	movs	r0, r2
 8003eba:	f7ff fac3 	bl	8003444 <LL_ADC_SetCommonPathInternalCh>
 8003ebe:	e02b      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a0b      	ldr	r2, [pc, #44]	; (8003ef4 <HAL_ADC_ConfigChannel+0x374>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d126      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4a0c      	ldr	r2, [pc, #48]	; (8003f00 <HAL_ADC_ConfigChannel+0x380>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	4a03      	ldr	r2, [pc, #12]	; (8003ee0 <HAL_ADC_ConfigChannel+0x360>)
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	0010      	movs	r0, r2
 8003ed6:	f7ff fab5 	bl	8003444 <LL_ADC_SetCommonPathInternalCh>
 8003eda:	e01d      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x398>
 8003edc:	80000004 	.word	0x80000004
 8003ee0:	40012708 	.word	0x40012708
 8003ee4:	b0001000 	.word	0xb0001000
 8003ee8:	20000000 	.word	0x20000000
 8003eec:	00030d40 	.word	0x00030d40
 8003ef0:	b8004000 	.word	0xb8004000
 8003ef4:	b4002000 	.word	0xb4002000
 8003ef8:	ff7fffff 	.word	0xff7fffff
 8003efc:	feffffff 	.word	0xfeffffff
 8003f00:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f08:	2220      	movs	r2, #32
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f10:	2317      	movs	r3, #23
 8003f12:	18fb      	adds	r3, r7, r3
 8003f14:	2201      	movs	r2, #1
 8003f16:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2254      	movs	r2, #84	; 0x54
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003f20:	2317      	movs	r3, #23
 8003f22:	18fb      	adds	r3, r7, r3
 8003f24:	781b      	ldrb	r3, [r3, #0]
}
 8003f26:	0018      	movs	r0, r3
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	b006      	add	sp, #24
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	46c0      	nop			; (mov r8, r8)

08003f30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	0018      	movs	r0, r3
 8003f42:	f7ff fb91 	bl	8003668 <LL_ADC_IsEnabled>
 8003f46:	1e03      	subs	r3, r0, #0
 8003f48:	d000      	beq.n	8003f4c <ADC_Enable+0x1c>
 8003f4a:	e069      	b.n	8004020 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	4a36      	ldr	r2, [pc, #216]	; (800402c <ADC_Enable+0xfc>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	d00d      	beq.n	8003f74 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5c:	2210      	movs	r2, #16
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f68:	2201      	movs	r2, #1
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e056      	b.n	8004022 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f7ff fb51 	bl	8003620 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003f7e:	4b2c      	ldr	r3, [pc, #176]	; (8004030 <ADC_Enable+0x100>)
 8003f80:	0018      	movs	r0, r3
 8003f82:	f7ff fa73 	bl	800346c <LL_ADC_GetCommonPathInternalCh>
 8003f86:	0002      	movs	r2, r0
 8003f88:	2380      	movs	r3, #128	; 0x80
 8003f8a:	041b      	lsls	r3, r3, #16
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	d00f      	beq.n	8003fb0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f90:	4b28      	ldr	r3, [pc, #160]	; (8004034 <ADC_Enable+0x104>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4928      	ldr	r1, [pc, #160]	; (8004038 <ADC_Enable+0x108>)
 8003f96:	0018      	movs	r0, r3
 8003f98:	f7fc f8c4 	bl	8000124 <__udivsi3>
 8003f9c:	0003      	movs	r3, r0
 8003f9e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003fa0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003fa2:	e002      	b.n	8003faa <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f9      	bne.n	8003fa4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	7e5b      	ldrb	r3, [r3, #25]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d033      	beq.n	8004020 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003fb8:	f7ff fa16 	bl	80033e8 <HAL_GetTick>
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fc0:	e027      	b.n	8004012 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f7ff fb4e 	bl	8003668 <LL_ADC_IsEnabled>
 8003fcc:	1e03      	subs	r3, r0, #0
 8003fce:	d104      	bne.n	8003fda <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f7ff fb23 	bl	8003620 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fda:	f7ff fa05 	bl	80033e8 <HAL_GetTick>
 8003fde:	0002      	movs	r2, r0
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d914      	bls.n	8004012 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d00d      	beq.n	8004012 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	2210      	movs	r2, #16
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004006:	2201      	movs	r2, #1
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e007      	b.n	8004022 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2201      	movs	r2, #1
 800401a:	4013      	ands	r3, r2
 800401c:	2b01      	cmp	r3, #1
 800401e:	d1d0      	bne.n	8003fc2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	0018      	movs	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	b004      	add	sp, #16
 8004028:	bd80      	pop	{r7, pc}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	80000017 	.word	0x80000017
 8004030:	40012708 	.word	0x40012708
 8004034:	20000000 	.word	0x20000000
 8004038:	00030d40 	.word	0x00030d40

0800403c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	0018      	movs	r0, r3
 800404a:	f7ff fb1e 	bl	800368a <LL_ADC_IsDisableOngoing>
 800404e:	0003      	movs	r3, r0
 8004050:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	0018      	movs	r0, r3
 8004058:	f7ff fb06 	bl	8003668 <LL_ADC_IsEnabled>
 800405c:	1e03      	subs	r3, r0, #0
 800405e:	d046      	beq.n	80040ee <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d143      	bne.n	80040ee <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2205      	movs	r2, #5
 800406e:	4013      	ands	r3, r2
 8004070:	2b01      	cmp	r3, #1
 8004072:	d10d      	bne.n	8004090 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	0018      	movs	r0, r3
 800407a:	f7ff fae3 	bl	8003644 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2203      	movs	r2, #3
 8004084:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004086:	f7ff f9af 	bl	80033e8 <HAL_GetTick>
 800408a:	0003      	movs	r3, r0
 800408c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800408e:	e028      	b.n	80040e2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004094:	2210      	movs	r2, #16
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a0:	2201      	movs	r2, #1
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e021      	b.n	80040f0 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80040ac:	f7ff f99c 	bl	80033e8 <HAL_GetTick>
 80040b0:	0002      	movs	r2, r0
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d913      	bls.n	80040e2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	2201      	movs	r2, #1
 80040c2:	4013      	ands	r3, r2
 80040c4:	d00d      	beq.n	80040e2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	2210      	movs	r2, #16
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d6:	2201      	movs	r2, #1
 80040d8:	431a      	orrs	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e006      	b.n	80040f0 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2201      	movs	r2, #1
 80040ea:	4013      	ands	r3, r2
 80040ec:	d1de      	bne.n	80040ac <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	0018      	movs	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b004      	add	sp, #16
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004104:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410a:	2250      	movs	r2, #80	; 0x50
 800410c:	4013      	ands	r3, r2
 800410e:	d141      	bne.n	8004194 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004114:	2280      	movs	r2, #128	; 0x80
 8004116:	0092      	lsls	r2, r2, #2
 8004118:	431a      	orrs	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	0018      	movs	r0, r3
 8004124:	f7ff f9e3 	bl	80034ee <LL_ADC_REG_IsTriggerSourceSWStart>
 8004128:	1e03      	subs	r3, r0, #0
 800412a:	d02e      	beq.n	800418a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	7e9b      	ldrb	r3, [r3, #26]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d12a      	bne.n	800418a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2208      	movs	r2, #8
 800413c:	4013      	ands	r3, r2
 800413e:	2b08      	cmp	r3, #8
 8004140:	d123      	bne.n	800418a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	0018      	movs	r0, r3
 8004148:	f7ff fac2 	bl	80036d0 <LL_ADC_REG_IsConversionOngoing>
 800414c:	1e03      	subs	r3, r0, #0
 800414e:	d110      	bne.n	8004172 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	210c      	movs	r1, #12
 800415c:	438a      	bics	r2, r1
 800415e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004164:	4a15      	ldr	r2, [pc, #84]	; (80041bc <ADC_DMAConvCplt+0xc4>)
 8004166:	4013      	ands	r3, r2
 8004168:	2201      	movs	r2, #1
 800416a:	431a      	orrs	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	659a      	str	r2, [r3, #88]	; 0x58
 8004170:	e00b      	b.n	800418a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004176:	2220      	movs	r2, #32
 8004178:	431a      	orrs	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004182:	2201      	movs	r2, #1
 8004184:	431a      	orrs	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	0018      	movs	r0, r3
 800418e:	f7fe fa23 	bl	80025d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004192:	e00f      	b.n	80041b4 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004198:	2210      	movs	r2, #16
 800419a:	4013      	ands	r3, r2
 800419c:	d004      	beq.n	80041a8 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	0018      	movs	r0, r3
 80041a2:	f7ff fce5 	bl	8003b70 <HAL_ADC_ErrorCallback>
}
 80041a6:	e005      	b.n	80041b4 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	0010      	movs	r0, r2
 80041b2:	4798      	blx	r3
}
 80041b4:	46c0      	nop			; (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b004      	add	sp, #16
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	fffffefe 	.word	0xfffffefe

080041c0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	0018      	movs	r0, r3
 80041d2:	f7ff fcc5 	bl	8003b60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	46bd      	mov	sp, r7
 80041da:	b004      	add	sp, #16
 80041dc:	bd80      	pop	{r7, pc}

080041de <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f0:	2240      	movs	r2, #64	; 0x40
 80041f2:	431a      	orrs	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fc:	2204      	movs	r2, #4
 80041fe:	431a      	orrs	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	0018      	movs	r0, r3
 8004208:	f7ff fcb2 	bl	8003b70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800420c:	46c0      	nop			; (mov r8, r8)
 800420e:	46bd      	mov	sp, r7
 8004210:	b004      	add	sp, #16
 8004212:	bd80      	pop	{r7, pc}

08004214 <LL_ADC_SetCalibrationFactor>:
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	22b4      	movs	r2, #180	; 0xb4
 8004222:	589b      	ldr	r3, [r3, r2]
 8004224:	227f      	movs	r2, #127	; 0x7f
 8004226:	4393      	bics	r3, r2
 8004228:	001a      	movs	r2, r3
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	21b4      	movs	r1, #180	; 0xb4
 8004232:	505a      	str	r2, [r3, r1]
}
 8004234:	46c0      	nop			; (mov r8, r8)
 8004236:	46bd      	mov	sp, r7
 8004238:	b002      	add	sp, #8
 800423a:	bd80      	pop	{r7, pc}

0800423c <LL_ADC_GetCalibrationFactor>:
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	22b4      	movs	r2, #180	; 0xb4
 8004248:	589b      	ldr	r3, [r3, r2]
 800424a:	227f      	movs	r2, #127	; 0x7f
 800424c:	4013      	ands	r3, r2
}
 800424e:	0018      	movs	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	b002      	add	sp, #8
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <LL_ADC_Enable>:
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	4a04      	ldr	r2, [pc, #16]	; (8004278 <LL_ADC_Enable+0x20>)
 8004266:	4013      	ands	r3, r2
 8004268:	2201      	movs	r2, #1
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	609a      	str	r2, [r3, #8]
}
 8004270:	46c0      	nop			; (mov r8, r8)
 8004272:	46bd      	mov	sp, r7
 8004274:	b002      	add	sp, #8
 8004276:	bd80      	pop	{r7, pc}
 8004278:	7fffffe8 	.word	0x7fffffe8

0800427c <LL_ADC_Disable>:
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	4a04      	ldr	r2, [pc, #16]	; (800429c <LL_ADC_Disable+0x20>)
 800428a:	4013      	ands	r3, r2
 800428c:	2202      	movs	r2, #2
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	609a      	str	r2, [r3, #8]
}
 8004294:	46c0      	nop			; (mov r8, r8)
 8004296:	46bd      	mov	sp, r7
 8004298:	b002      	add	sp, #8
 800429a:	bd80      	pop	{r7, pc}
 800429c:	7fffffe8 	.word	0x7fffffe8

080042a0 <LL_ADC_IsEnabled>:
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2201      	movs	r2, #1
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <LL_ADC_IsEnabled+0x18>
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <LL_ADC_IsEnabled+0x1a>
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b002      	add	sp, #8
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <LL_ADC_StartCalibration>:
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	4a05      	ldr	r2, [pc, #20]	; (80042e8 <LL_ADC_StartCalibration+0x24>)
 80042d2:	4013      	ands	r3, r2
 80042d4:	2280      	movs	r2, #128	; 0x80
 80042d6:	0612      	lsls	r2, r2, #24
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	609a      	str	r2, [r3, #8]
}
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	46bd      	mov	sp, r7
 80042e2:	b002      	add	sp, #8
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	7fffffe8 	.word	0x7fffffe8

080042ec <LL_ADC_IsCalibrationOnGoing>:
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	0fdb      	lsrs	r3, r3, #31
 80042fa:	07da      	lsls	r2, r3, #31
 80042fc:	2380      	movs	r3, #128	; 0x80
 80042fe:	061b      	lsls	r3, r3, #24
 8004300:	429a      	cmp	r2, r3
 8004302:	d101      	bne.n	8004308 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <LL_ADC_IsCalibrationOnGoing+0x1e>
 8004308:	2300      	movs	r3, #0
}
 800430a:	0018      	movs	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	b002      	add	sp, #8
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004314:	b590      	push	{r4, r7, lr}
 8004316:	b089      	sub	sp, #36	; 0x24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800431c:	2300      	movs	r3, #0
 800431e:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2254      	movs	r2, #84	; 0x54
 8004328:	5c9b      	ldrb	r3, [r3, r2]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_ADCEx_Calibration_Start+0x1e>
 800432e:	2302      	movs	r3, #2
 8004330:	e0ba      	b.n	80044a8 <HAL_ADCEx_Calibration_Start+0x194>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2254      	movs	r2, #84	; 0x54
 8004336:	2101      	movs	r1, #1
 8004338:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800433a:	2317      	movs	r3, #23
 800433c:	18fc      	adds	r4, r7, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	0018      	movs	r0, r3
 8004342:	f7ff fe7b 	bl	800403c <ADC_Disable>
 8004346:	0003      	movs	r3, r0
 8004348:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	0018      	movs	r0, r3
 8004350:	f7ff ffa6 	bl	80042a0 <LL_ADC_IsEnabled>
 8004354:	1e03      	subs	r3, r0, #0
 8004356:	d000      	beq.n	800435a <HAL_ADCEx_Calibration_Start+0x46>
 8004358:	e099      	b.n	800448e <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435e:	4a54      	ldr	r2, [pc, #336]	; (80044b0 <HAL_ADCEx_Calibration_Start+0x19c>)
 8004360:	4013      	ands	r3, r2
 8004362:	2202      	movs	r2, #2
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	4a50      	ldr	r2, [pc, #320]	; (80044b4 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8004372:	4013      	ands	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	494d      	ldr	r1, [pc, #308]	; (80044b8 <HAL_ADCEx_Calibration_Start+0x1a4>)
 8004382:	400a      	ands	r2, r1
 8004384:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004386:	2300      	movs	r3, #0
 8004388:	61fb      	str	r3, [r7, #28]
 800438a:	e02d      	b.n	80043e8 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	0018      	movs	r0, r3
 8004392:	f7ff ff97 	bl	80042c4 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004396:	e014      	b.n	80043c2 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	3301      	adds	r3, #1
 800439c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	4a46      	ldr	r2, [pc, #280]	; (80044bc <HAL_ADCEx_Calibration_Start+0x1a8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d90d      	bls.n	80043c2 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043aa:	2212      	movs	r2, #18
 80043ac:	4393      	bics	r3, r2
 80043ae:	2210      	movs	r2, #16
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2254      	movs	r2, #84	; 0x54
 80043ba:	2100      	movs	r1, #0
 80043bc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e072      	b.n	80044a8 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	0018      	movs	r0, r3
 80043c8:	f7ff ff90 	bl	80042ec <LL_ADC_IsCalibrationOnGoing>
 80043cc:	1e03      	subs	r3, r0, #0
 80043ce:	d1e3      	bne.n	8004398 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	0018      	movs	r0, r3
 80043d6:	f7ff ff31 	bl	800423c <LL_ADC_GetCalibrationFactor>
 80043da:	0002      	movs	r2, r0
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	189b      	adds	r3, r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	3301      	adds	r3, #1
 80043e6:	61fb      	str	r3, [r7, #28]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	2b07      	cmp	r3, #7
 80043ec:	d9ce      	bls.n	800438c <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80043ee:	69f9      	ldr	r1, [r7, #28]
 80043f0:	69b8      	ldr	r0, [r7, #24]
 80043f2:	f7fb fe97 	bl	8000124 <__udivsi3>
 80043f6:	0003      	movs	r3, r0
 80043f8:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	0018      	movs	r0, r3
 8004400:	f7ff ff2a 	bl	8004258 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	0011      	movs	r1, r2
 800440c:	0018      	movs	r0, r3
 800440e:	f7ff ff01 	bl	8004214 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	0018      	movs	r0, r3
 8004418:	f7ff ff30 	bl	800427c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800441c:	f7fe ffe4 	bl	80033e8 <HAL_GetTick>
 8004420:	0003      	movs	r3, r0
 8004422:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004424:	e01b      	b.n	800445e <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004426:	f7fe ffdf 	bl	80033e8 <HAL_GetTick>
 800442a:	0002      	movs	r2, r0
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d914      	bls.n	800445e <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	0018      	movs	r0, r3
 800443a:	f7ff ff31 	bl	80042a0 <LL_ADC_IsEnabled>
 800443e:	1e03      	subs	r3, r0, #0
 8004440:	d00d      	beq.n	800445e <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004446:	2210      	movs	r2, #16
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004452:	2201      	movs	r2, #1
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e024      	b.n	80044a8 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0018      	movs	r0, r3
 8004464:	f7ff ff1c 	bl	80042a0 <LL_ADC_IsEnabled>
 8004468:	1e03      	subs	r3, r0, #0
 800446a:	d1dc      	bne.n	8004426 <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68d9      	ldr	r1, [r3, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	430a      	orrs	r2, r1
 800447a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004480:	2203      	movs	r2, #3
 8004482:	4393      	bics	r3, r2
 8004484:	2201      	movs	r2, #1
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	659a      	str	r2, [r3, #88]	; 0x58
 800448c:	e005      	b.n	800449a <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004492:	2210      	movs	r2, #16
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2254      	movs	r2, #84	; 0x54
 800449e:	2100      	movs	r1, #0
 80044a0:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80044a2:	2317      	movs	r3, #23
 80044a4:	18fb      	adds	r3, r7, r3
 80044a6:	781b      	ldrb	r3, [r3, #0]
}
 80044a8:	0018      	movs	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	b009      	add	sp, #36	; 0x24
 80044ae:	bd90      	pop	{r4, r7, pc}
 80044b0:	fffffefd 	.word	0xfffffefd
 80044b4:	00008003 	.word	0x00008003
 80044b8:	ffff7ffc 	.word	0xffff7ffc
 80044bc:	0002f1ff 	.word	0x0002f1ff

080044c0 <__NVIC_EnableIRQ>:
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	0002      	movs	r2, r0
 80044c8:	1dfb      	adds	r3, r7, #7
 80044ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044cc:	1dfb      	adds	r3, r7, #7
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b7f      	cmp	r3, #127	; 0x7f
 80044d2:	d809      	bhi.n	80044e8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044d4:	1dfb      	adds	r3, r7, #7
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	001a      	movs	r2, r3
 80044da:	231f      	movs	r3, #31
 80044dc:	401a      	ands	r2, r3
 80044de:	4b04      	ldr	r3, [pc, #16]	; (80044f0 <__NVIC_EnableIRQ+0x30>)
 80044e0:	2101      	movs	r1, #1
 80044e2:	4091      	lsls	r1, r2
 80044e4:	000a      	movs	r2, r1
 80044e6:	601a      	str	r2, [r3, #0]
}
 80044e8:	46c0      	nop			; (mov r8, r8)
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b002      	add	sp, #8
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	e000e100 	.word	0xe000e100

080044f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044f4:	b590      	push	{r4, r7, lr}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	0002      	movs	r2, r0
 80044fc:	6039      	str	r1, [r7, #0]
 80044fe:	1dfb      	adds	r3, r7, #7
 8004500:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004502:	1dfb      	adds	r3, r7, #7
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b7f      	cmp	r3, #127	; 0x7f
 8004508:	d828      	bhi.n	800455c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800450a:	4a2f      	ldr	r2, [pc, #188]	; (80045c8 <__NVIC_SetPriority+0xd4>)
 800450c:	1dfb      	adds	r3, r7, #7
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	b25b      	sxtb	r3, r3
 8004512:	089b      	lsrs	r3, r3, #2
 8004514:	33c0      	adds	r3, #192	; 0xc0
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	589b      	ldr	r3, [r3, r2]
 800451a:	1dfa      	adds	r2, r7, #7
 800451c:	7812      	ldrb	r2, [r2, #0]
 800451e:	0011      	movs	r1, r2
 8004520:	2203      	movs	r2, #3
 8004522:	400a      	ands	r2, r1
 8004524:	00d2      	lsls	r2, r2, #3
 8004526:	21ff      	movs	r1, #255	; 0xff
 8004528:	4091      	lsls	r1, r2
 800452a:	000a      	movs	r2, r1
 800452c:	43d2      	mvns	r2, r2
 800452e:	401a      	ands	r2, r3
 8004530:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	019b      	lsls	r3, r3, #6
 8004536:	22ff      	movs	r2, #255	; 0xff
 8004538:	401a      	ands	r2, r3
 800453a:	1dfb      	adds	r3, r7, #7
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	0018      	movs	r0, r3
 8004540:	2303      	movs	r3, #3
 8004542:	4003      	ands	r3, r0
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004548:	481f      	ldr	r0, [pc, #124]	; (80045c8 <__NVIC_SetPriority+0xd4>)
 800454a:	1dfb      	adds	r3, r7, #7
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	b25b      	sxtb	r3, r3
 8004550:	089b      	lsrs	r3, r3, #2
 8004552:	430a      	orrs	r2, r1
 8004554:	33c0      	adds	r3, #192	; 0xc0
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800455a:	e031      	b.n	80045c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800455c:	4a1b      	ldr	r2, [pc, #108]	; (80045cc <__NVIC_SetPriority+0xd8>)
 800455e:	1dfb      	adds	r3, r7, #7
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	0019      	movs	r1, r3
 8004564:	230f      	movs	r3, #15
 8004566:	400b      	ands	r3, r1
 8004568:	3b08      	subs	r3, #8
 800456a:	089b      	lsrs	r3, r3, #2
 800456c:	3306      	adds	r3, #6
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	18d3      	adds	r3, r2, r3
 8004572:	3304      	adds	r3, #4
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	1dfa      	adds	r2, r7, #7
 8004578:	7812      	ldrb	r2, [r2, #0]
 800457a:	0011      	movs	r1, r2
 800457c:	2203      	movs	r2, #3
 800457e:	400a      	ands	r2, r1
 8004580:	00d2      	lsls	r2, r2, #3
 8004582:	21ff      	movs	r1, #255	; 0xff
 8004584:	4091      	lsls	r1, r2
 8004586:	000a      	movs	r2, r1
 8004588:	43d2      	mvns	r2, r2
 800458a:	401a      	ands	r2, r3
 800458c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	019b      	lsls	r3, r3, #6
 8004592:	22ff      	movs	r2, #255	; 0xff
 8004594:	401a      	ands	r2, r3
 8004596:	1dfb      	adds	r3, r7, #7
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	0018      	movs	r0, r3
 800459c:	2303      	movs	r3, #3
 800459e:	4003      	ands	r3, r0
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045a4:	4809      	ldr	r0, [pc, #36]	; (80045cc <__NVIC_SetPriority+0xd8>)
 80045a6:	1dfb      	adds	r3, r7, #7
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	001c      	movs	r4, r3
 80045ac:	230f      	movs	r3, #15
 80045ae:	4023      	ands	r3, r4
 80045b0:	3b08      	subs	r3, #8
 80045b2:	089b      	lsrs	r3, r3, #2
 80045b4:	430a      	orrs	r2, r1
 80045b6:	3306      	adds	r3, #6
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	18c3      	adds	r3, r0, r3
 80045bc:	3304      	adds	r3, #4
 80045be:	601a      	str	r2, [r3, #0]
}
 80045c0:	46c0      	nop			; (mov r8, r8)
 80045c2:	46bd      	mov	sp, r7
 80045c4:	b003      	add	sp, #12
 80045c6:	bd90      	pop	{r4, r7, pc}
 80045c8:	e000e100 	.word	0xe000e100
 80045cc:	e000ed00 	.word	0xe000ed00

080045d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	1e5a      	subs	r2, r3, #1
 80045dc:	2380      	movs	r3, #128	; 0x80
 80045de:	045b      	lsls	r3, r3, #17
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d301      	bcc.n	80045e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045e4:	2301      	movs	r3, #1
 80045e6:	e010      	b.n	800460a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045e8:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <SysTick_Config+0x44>)
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	3a01      	subs	r2, #1
 80045ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045f0:	2301      	movs	r3, #1
 80045f2:	425b      	negs	r3, r3
 80045f4:	2103      	movs	r1, #3
 80045f6:	0018      	movs	r0, r3
 80045f8:	f7ff ff7c 	bl	80044f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <SysTick_Config+0x44>)
 80045fe:	2200      	movs	r2, #0
 8004600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004602:	4b04      	ldr	r3, [pc, #16]	; (8004614 <SysTick_Config+0x44>)
 8004604:	2207      	movs	r2, #7
 8004606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004608:	2300      	movs	r3, #0
}
 800460a:	0018      	movs	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	b002      	add	sp, #8
 8004610:	bd80      	pop	{r7, pc}
 8004612:	46c0      	nop			; (mov r8, r8)
 8004614:	e000e010 	.word	0xe000e010

08004618 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	607a      	str	r2, [r7, #4]
 8004622:	210f      	movs	r1, #15
 8004624:	187b      	adds	r3, r7, r1
 8004626:	1c02      	adds	r2, r0, #0
 8004628:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	187b      	adds	r3, r7, r1
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	b25b      	sxtb	r3, r3
 8004632:	0011      	movs	r1, r2
 8004634:	0018      	movs	r0, r3
 8004636:	f7ff ff5d 	bl	80044f4 <__NVIC_SetPriority>
}
 800463a:	46c0      	nop			; (mov r8, r8)
 800463c:	46bd      	mov	sp, r7
 800463e:	b004      	add	sp, #16
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	0002      	movs	r2, r0
 800464a:	1dfb      	adds	r3, r7, #7
 800464c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800464e:	1dfb      	adds	r3, r7, #7
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	b25b      	sxtb	r3, r3
 8004654:	0018      	movs	r0, r3
 8004656:	f7ff ff33 	bl	80044c0 <__NVIC_EnableIRQ>
}
 800465a:	46c0      	nop			; (mov r8, r8)
 800465c:	46bd      	mov	sp, r7
 800465e:	b002      	add	sp, #8
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b082      	sub	sp, #8
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	0018      	movs	r0, r3
 800466e:	f7ff ffaf 	bl	80045d0 <SysTick_Config>
 8004672:	0003      	movs	r3, r0
}
 8004674:	0018      	movs	r0, r3
 8004676:	46bd      	mov	sp, r7
 8004678:	b002      	add	sp, #8
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e077      	b.n	800477e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a3d      	ldr	r2, [pc, #244]	; (8004788 <HAL_DMA_Init+0x10c>)
 8004694:	4694      	mov	ip, r2
 8004696:	4463      	add	r3, ip
 8004698:	2114      	movs	r1, #20
 800469a:	0018      	movs	r0, r3
 800469c:	f7fb fd42 	bl	8000124 <__udivsi3>
 80046a0:	0003      	movs	r3, r0
 80046a2:	009a      	lsls	r2, r3, #2
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2225      	movs	r2, #37	; 0x25
 80046ac:	2102      	movs	r1, #2
 80046ae:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4934      	ldr	r1, [pc, #208]	; (800478c <HAL_DMA_Init+0x110>)
 80046bc:	400a      	ands	r2, r1
 80046be:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6819      	ldr	r1, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	0018      	movs	r0, r3
 80046fa:	f000 f9c1 	bl	8004a80 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	2380      	movs	r3, #128	; 0x80
 8004704:	01db      	lsls	r3, r3, #7
 8004706:	429a      	cmp	r2, r3
 8004708:	d102      	bne.n	8004710 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004718:	213f      	movs	r1, #63	; 0x3f
 800471a:	400a      	ands	r2, r1
 800471c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004726:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d011      	beq.n	8004754 <HAL_DMA_Init+0xd8>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b04      	cmp	r3, #4
 8004736:	d80d      	bhi.n	8004754 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	0018      	movs	r0, r3
 800473c:	f000 f9cc 	bl	8004ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004750:	605a      	str	r2, [r3, #4]
 8004752:	e008      	b.n	8004766 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2225      	movs	r2, #37	; 0x25
 8004770:	2101      	movs	r1, #1
 8004772:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2224      	movs	r2, #36	; 0x24
 8004778:	2100      	movs	r1, #0
 800477a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	0018      	movs	r0, r3
 8004780:	46bd      	mov	sp, r7
 8004782:	b002      	add	sp, #8
 8004784:	bd80      	pop	{r7, pc}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	bffdfff8 	.word	0xbffdfff8
 800478c:	ffff800f 	.word	0xffff800f

08004790 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	2317      	movs	r3, #23
 80047a0:	18fb      	adds	r3, r7, r3
 80047a2:	2200      	movs	r2, #0
 80047a4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2224      	movs	r2, #36	; 0x24
 80047aa:	5c9b      	ldrb	r3, [r3, r2]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_DMA_Start_IT+0x24>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e06f      	b.n	8004894 <HAL_DMA_Start_IT+0x104>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2224      	movs	r2, #36	; 0x24
 80047b8:	2101      	movs	r1, #1
 80047ba:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2225      	movs	r2, #37	; 0x25
 80047c0:	5c9b      	ldrb	r3, [r3, r2]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d157      	bne.n	8004878 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2225      	movs	r2, #37	; 0x25
 80047cc:	2102      	movs	r1, #2
 80047ce:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2101      	movs	r1, #1
 80047e2:	438a      	bics	r2, r1
 80047e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	68b9      	ldr	r1, [r7, #8]
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 f907 	bl	8004a00 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d008      	beq.n	800480c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	210e      	movs	r1, #14
 8004806:	430a      	orrs	r2, r1
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	e00f      	b.n	800482c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2104      	movs	r1, #4
 8004818:	438a      	bics	r2, r1
 800481a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	210a      	movs	r1, #10
 8004828:	430a      	orrs	r2, r1
 800482a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	2380      	movs	r3, #128	; 0x80
 8004834:	025b      	lsls	r3, r3, #9
 8004836:	4013      	ands	r3, r2
 8004838:	d008      	beq.n	800484c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004844:	2180      	movs	r1, #128	; 0x80
 8004846:	0049      	lsls	r1, r1, #1
 8004848:	430a      	orrs	r2, r1
 800484a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004850:	2b00      	cmp	r3, #0
 8004852:	d008      	beq.n	8004866 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485e:	2180      	movs	r1, #128	; 0x80
 8004860:	0049      	lsls	r1, r1, #1
 8004862:	430a      	orrs	r2, r1
 8004864:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2101      	movs	r1, #1
 8004872:	430a      	orrs	r2, r1
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	e00a      	b.n	800488e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2280      	movs	r2, #128	; 0x80
 800487c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2224      	movs	r2, #36	; 0x24
 8004882:	2100      	movs	r1, #0
 8004884:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8004886:	2317      	movs	r3, #23
 8004888:	18fb      	adds	r3, r7, r3
 800488a:	2201      	movs	r2, #1
 800488c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800488e:	2317      	movs	r3, #23
 8004890:	18fb      	adds	r3, r7, r3
 8004892:	781b      	ldrb	r3, [r3, #0]
}
 8004894:	0018      	movs	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	b006      	add	sp, #24
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80048a4:	4b55      	ldr	r3, [pc, #340]	; (80049fc <HAL_DMA_IRQHandler+0x160>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	221c      	movs	r2, #28
 80048b8:	4013      	ands	r3, r2
 80048ba:	2204      	movs	r2, #4
 80048bc:	409a      	lsls	r2, r3
 80048be:	0013      	movs	r3, r2
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	4013      	ands	r3, r2
 80048c4:	d027      	beq.n	8004916 <HAL_DMA_IRQHandler+0x7a>
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2204      	movs	r2, #4
 80048ca:	4013      	ands	r3, r2
 80048cc:	d023      	beq.n	8004916 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2220      	movs	r2, #32
 80048d6:	4013      	ands	r3, r2
 80048d8:	d107      	bne.n	80048ea <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2104      	movs	r1, #4
 80048e6:	438a      	bics	r2, r1
 80048e8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80048ea:	4b44      	ldr	r3, [pc, #272]	; (80049fc <HAL_DMA_IRQHandler+0x160>)
 80048ec:	6859      	ldr	r1, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	221c      	movs	r2, #28
 80048f4:	4013      	ands	r3, r2
 80048f6:	2204      	movs	r2, #4
 80048f8:	409a      	lsls	r2, r3
 80048fa:	4b40      	ldr	r3, [pc, #256]	; (80049fc <HAL_DMA_IRQHandler+0x160>)
 80048fc:	430a      	orrs	r2, r1
 80048fe:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004904:	2b00      	cmp	r3, #0
 8004906:	d100      	bne.n	800490a <HAL_DMA_IRQHandler+0x6e>
 8004908:	e073      	b.n	80049f2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	0010      	movs	r0, r2
 8004912:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004914:	e06d      	b.n	80049f2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	221c      	movs	r2, #28
 800491c:	4013      	ands	r3, r2
 800491e:	2202      	movs	r2, #2
 8004920:	409a      	lsls	r2, r3
 8004922:	0013      	movs	r3, r2
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	4013      	ands	r3, r2
 8004928:	d02e      	beq.n	8004988 <HAL_DMA_IRQHandler+0xec>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2202      	movs	r2, #2
 800492e:	4013      	ands	r3, r2
 8004930:	d02a      	beq.n	8004988 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2220      	movs	r2, #32
 800493a:	4013      	ands	r3, r2
 800493c:	d10b      	bne.n	8004956 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	210a      	movs	r1, #10
 800494a:	438a      	bics	r2, r1
 800494c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2225      	movs	r2, #37	; 0x25
 8004952:	2101      	movs	r1, #1
 8004954:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004956:	4b29      	ldr	r3, [pc, #164]	; (80049fc <HAL_DMA_IRQHandler+0x160>)
 8004958:	6859      	ldr	r1, [r3, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	221c      	movs	r2, #28
 8004960:	4013      	ands	r3, r2
 8004962:	2202      	movs	r2, #2
 8004964:	409a      	lsls	r2, r3
 8004966:	4b25      	ldr	r3, [pc, #148]	; (80049fc <HAL_DMA_IRQHandler+0x160>)
 8004968:	430a      	orrs	r2, r1
 800496a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2224      	movs	r2, #36	; 0x24
 8004970:	2100      	movs	r1, #0
 8004972:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	2b00      	cmp	r3, #0
 800497a:	d03a      	beq.n	80049f2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	0010      	movs	r0, r2
 8004984:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004986:	e034      	b.n	80049f2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	221c      	movs	r2, #28
 800498e:	4013      	ands	r3, r2
 8004990:	2208      	movs	r2, #8
 8004992:	409a      	lsls	r2, r3
 8004994:	0013      	movs	r3, r2
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4013      	ands	r3, r2
 800499a:	d02b      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x158>
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2208      	movs	r2, #8
 80049a0:	4013      	ands	r3, r2
 80049a2:	d027      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	210e      	movs	r1, #14
 80049b0:	438a      	bics	r2, r1
 80049b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80049b4:	4b11      	ldr	r3, [pc, #68]	; (80049fc <HAL_DMA_IRQHandler+0x160>)
 80049b6:	6859      	ldr	r1, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	221c      	movs	r2, #28
 80049be:	4013      	ands	r3, r2
 80049c0:	2201      	movs	r2, #1
 80049c2:	409a      	lsls	r2, r3
 80049c4:	4b0d      	ldr	r3, [pc, #52]	; (80049fc <HAL_DMA_IRQHandler+0x160>)
 80049c6:	430a      	orrs	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2225      	movs	r2, #37	; 0x25
 80049d4:	2101      	movs	r1, #1
 80049d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2224      	movs	r2, #36	; 0x24
 80049dc:	2100      	movs	r1, #0
 80049de:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	0010      	movs	r0, r2
 80049f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	46c0      	nop			; (mov r8, r8)
}
 80049f6:	46bd      	mov	sp, r7
 80049f8:	b004      	add	sp, #16
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40020000 	.word	0x40020000

08004a00 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004a16:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d004      	beq.n	8004a2a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004a28:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004a2a:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <DMA_SetConfig+0x7c>)
 8004a2c:	6859      	ldr	r1, [r3, #4]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	221c      	movs	r2, #28
 8004a34:	4013      	ands	r3, r2
 8004a36:	2201      	movs	r2, #1
 8004a38:	409a      	lsls	r2, r3
 8004a3a:	4b10      	ldr	r3, [pc, #64]	; (8004a7c <DMA_SetConfig+0x7c>)
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	2b10      	cmp	r3, #16
 8004a4e:	d108      	bne.n	8004a62 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a60:	e007      	b.n	8004a72 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	60da      	str	r2, [r3, #12]
}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b004      	add	sp, #16
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	40020000 	.word	0x40020000

08004a80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	089b      	lsrs	r3, r3, #2
 8004a8e:	4a10      	ldr	r2, [pc, #64]	; (8004ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004a90:	4694      	mov	ip, r2
 8004a92:	4463      	add	r3, ip
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	001a      	movs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	001a      	movs	r2, r3
 8004aa2:	23ff      	movs	r3, #255	; 0xff
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	3b08      	subs	r3, #8
 8004aa8:	2114      	movs	r1, #20
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f7fb fb3a 	bl	8000124 <__udivsi3>
 8004ab0:	0003      	movs	r3, r0
 8004ab2:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a07      	ldr	r2, [pc, #28]	; (8004ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004ab8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	221f      	movs	r2, #31
 8004abe:	4013      	ands	r3, r2
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004ac8:	46c0      	nop			; (mov r8, r8)
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b004      	add	sp, #16
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	10008200 	.word	0x10008200
 8004ad4:	40020880 	.word	0x40020880

08004ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	223f      	movs	r2, #63	; 0x3f
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4a0a      	ldr	r2, [pc, #40]	; (8004b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004aee:	4694      	mov	ip, r2
 8004af0:	4463      	add	r3, ip
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	001a      	movs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a07      	ldr	r2, [pc, #28]	; (8004b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004afe:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	2203      	movs	r2, #3
 8004b06:	4013      	ands	r3, r2
 8004b08:	2201      	movs	r2, #1
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8004b10:	46c0      	nop			; (mov r8, r8)
 8004b12:	46bd      	mov	sp, r7
 8004b14:	b004      	add	sp, #16
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	1000823f 	.word	0x1000823f
 8004b1c:	40020940 	.word	0x40020940

08004b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b2e:	e147      	b.n	8004dc0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2101      	movs	r1, #1
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4091      	lsls	r1, r2
 8004b3a:	000a      	movs	r2, r1
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d100      	bne.n	8004b48 <HAL_GPIO_Init+0x28>
 8004b46:	e138      	b.n	8004dba <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2203      	movs	r2, #3
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d005      	beq.n	8004b60 <HAL_GPIO_Init+0x40>
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2203      	movs	r2, #3
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d130      	bne.n	8004bc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	2203      	movs	r2, #3
 8004b6c:	409a      	lsls	r2, r3
 8004b6e:	0013      	movs	r3, r2
 8004b70:	43da      	mvns	r2, r3
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	4013      	ands	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	409a      	lsls	r2, r3
 8004b82:	0013      	movs	r3, r2
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b96:	2201      	movs	r2, #1
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	409a      	lsls	r2, r3
 8004b9c:	0013      	movs	r3, r2
 8004b9e:	43da      	mvns	r2, r3
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	091b      	lsrs	r3, r3, #4
 8004bac:	2201      	movs	r2, #1
 8004bae:	401a      	ands	r2, r3
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	409a      	lsls	r2, r3
 8004bb4:	0013      	movs	r3, r2
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2203      	movs	r2, #3
 8004bc8:	4013      	ands	r3, r2
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d017      	beq.n	8004bfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	2203      	movs	r2, #3
 8004bda:	409a      	lsls	r2, r3
 8004bdc:	0013      	movs	r3, r2
 8004bde:	43da      	mvns	r2, r3
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	4013      	ands	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	409a      	lsls	r2, r3
 8004bf0:	0013      	movs	r3, r2
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	2203      	movs	r2, #3
 8004c04:	4013      	ands	r3, r2
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d123      	bne.n	8004c52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	08da      	lsrs	r2, r3, #3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3208      	adds	r2, #8
 8004c12:	0092      	lsls	r2, r2, #2
 8004c14:	58d3      	ldr	r3, [r2, r3]
 8004c16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2207      	movs	r2, #7
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	220f      	movs	r2, #15
 8004c22:	409a      	lsls	r2, r3
 8004c24:	0013      	movs	r3, r2
 8004c26:	43da      	mvns	r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2107      	movs	r1, #7
 8004c36:	400b      	ands	r3, r1
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	409a      	lsls	r2, r3
 8004c3c:	0013      	movs	r3, r2
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	08da      	lsrs	r2, r3, #3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3208      	adds	r2, #8
 8004c4c:	0092      	lsls	r2, r2, #2
 8004c4e:	6939      	ldr	r1, [r7, #16]
 8004c50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	409a      	lsls	r2, r3
 8004c60:	0013      	movs	r3, r2
 8004c62:	43da      	mvns	r2, r3
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	4013      	ands	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2203      	movs	r2, #3
 8004c70:	401a      	ands	r2, r3
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	409a      	lsls	r2, r3
 8004c78:	0013      	movs	r3, r2
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	23c0      	movs	r3, #192	; 0xc0
 8004c8c:	029b      	lsls	r3, r3, #10
 8004c8e:	4013      	ands	r3, r2
 8004c90:	d100      	bne.n	8004c94 <HAL_GPIO_Init+0x174>
 8004c92:	e092      	b.n	8004dba <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004c94:	4a50      	ldr	r2, [pc, #320]	; (8004dd8 <HAL_GPIO_Init+0x2b8>)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	089b      	lsrs	r3, r3, #2
 8004c9a:	3318      	adds	r3, #24
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	589b      	ldr	r3, [r3, r2]
 8004ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2203      	movs	r2, #3
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	220f      	movs	r2, #15
 8004cac:	409a      	lsls	r2, r3
 8004cae:	0013      	movs	r3, r2
 8004cb0:	43da      	mvns	r2, r3
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	23a0      	movs	r3, #160	; 0xa0
 8004cbc:	05db      	lsls	r3, r3, #23
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d013      	beq.n	8004cea <HAL_GPIO_Init+0x1ca>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a45      	ldr	r2, [pc, #276]	; (8004ddc <HAL_GPIO_Init+0x2bc>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d00d      	beq.n	8004ce6 <HAL_GPIO_Init+0x1c6>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a44      	ldr	r2, [pc, #272]	; (8004de0 <HAL_GPIO_Init+0x2c0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d007      	beq.n	8004ce2 <HAL_GPIO_Init+0x1c2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a43      	ldr	r2, [pc, #268]	; (8004de4 <HAL_GPIO_Init+0x2c4>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d101      	bne.n	8004cde <HAL_GPIO_Init+0x1be>
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e006      	b.n	8004cec <HAL_GPIO_Init+0x1cc>
 8004cde:	2305      	movs	r3, #5
 8004ce0:	e004      	b.n	8004cec <HAL_GPIO_Init+0x1cc>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	e002      	b.n	8004cec <HAL_GPIO_Init+0x1cc>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e000      	b.n	8004cec <HAL_GPIO_Init+0x1cc>
 8004cea:	2300      	movs	r3, #0
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	2103      	movs	r1, #3
 8004cf0:	400a      	ands	r2, r1
 8004cf2:	00d2      	lsls	r2, r2, #3
 8004cf4:	4093      	lsls	r3, r2
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004cfc:	4936      	ldr	r1, [pc, #216]	; (8004dd8 <HAL_GPIO_Init+0x2b8>)
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	089b      	lsrs	r3, r3, #2
 8004d02:	3318      	adds	r3, #24
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d0a:	4b33      	ldr	r3, [pc, #204]	; (8004dd8 <HAL_GPIO_Init+0x2b8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	43da      	mvns	r2, r3
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	4013      	ands	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	2380      	movs	r3, #128	; 0x80
 8004d20:	035b      	lsls	r3, r3, #13
 8004d22:	4013      	ands	r3, r2
 8004d24:	d003      	beq.n	8004d2e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d2e:	4b2a      	ldr	r3, [pc, #168]	; (8004dd8 <HAL_GPIO_Init+0x2b8>)
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004d34:	4b28      	ldr	r3, [pc, #160]	; (8004dd8 <HAL_GPIO_Init+0x2b8>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	43da      	mvns	r2, r3
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	4013      	ands	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	2380      	movs	r3, #128	; 0x80
 8004d4a:	039b      	lsls	r3, r3, #14
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d58:	4b1f      	ldr	r3, [pc, #124]	; (8004dd8 <HAL_GPIO_Init+0x2b8>)
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004d5e:	4a1e      	ldr	r2, [pc, #120]	; (8004dd8 <HAL_GPIO_Init+0x2b8>)
 8004d60:	2384      	movs	r3, #132	; 0x84
 8004d62:	58d3      	ldr	r3, [r2, r3]
 8004d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	43da      	mvns	r2, r3
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	2380      	movs	r3, #128	; 0x80
 8004d76:	029b      	lsls	r3, r3, #10
 8004d78:	4013      	ands	r3, r2
 8004d7a:	d003      	beq.n	8004d84 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d84:	4914      	ldr	r1, [pc, #80]	; (8004dd8 <HAL_GPIO_Init+0x2b8>)
 8004d86:	2284      	movs	r2, #132	; 0x84
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004d8c:	4a12      	ldr	r2, [pc, #72]	; (8004dd8 <HAL_GPIO_Init+0x2b8>)
 8004d8e:	2380      	movs	r3, #128	; 0x80
 8004d90:	58d3      	ldr	r3, [r2, r3]
 8004d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	43da      	mvns	r2, r3
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	2380      	movs	r3, #128	; 0x80
 8004da4:	025b      	lsls	r3, r3, #9
 8004da6:	4013      	ands	r3, r2
 8004da8:	d003      	beq.n	8004db2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004db2:	4909      	ldr	r1, [pc, #36]	; (8004dd8 <HAL_GPIO_Init+0x2b8>)
 8004db4:	2280      	movs	r2, #128	; 0x80
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	40da      	lsrs	r2, r3
 8004dc8:	1e13      	subs	r3, r2, #0
 8004dca:	d000      	beq.n	8004dce <HAL_GPIO_Init+0x2ae>
 8004dcc:	e6b0      	b.n	8004b30 <HAL_GPIO_Init+0x10>
  }
}
 8004dce:	46c0      	nop			; (mov r8, r8)
 8004dd0:	46c0      	nop			; (mov r8, r8)
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	b006      	add	sp, #24
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40021800 	.word	0x40021800
 8004ddc:	50000400 	.word	0x50000400
 8004de0:	50000800 	.word	0x50000800
 8004de4:	50000c00 	.word	0x50000c00

08004de8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004df0:	4b19      	ldr	r3, [pc, #100]	; (8004e58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a19      	ldr	r2, [pc, #100]	; (8004e5c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	0019      	movs	r1, r3
 8004dfa:	4b17      	ldr	r3, [pc, #92]	; (8004e58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	2380      	movs	r3, #128	; 0x80
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d11f      	bne.n	8004e4c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004e0c:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	0013      	movs	r3, r2
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	189b      	adds	r3, r3, r2
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	4912      	ldr	r1, [pc, #72]	; (8004e64 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f7fb f982 	bl	8000124 <__udivsi3>
 8004e20:	0003      	movs	r3, r0
 8004e22:	3301      	adds	r3, #1
 8004e24:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e26:	e008      	b.n	8004e3a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	3b01      	subs	r3, #1
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	e001      	b.n	8004e3a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e009      	b.n	8004e4e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e3a:	4b07      	ldr	r3, [pc, #28]	; (8004e58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004e3c:	695a      	ldr	r2, [r3, #20]
 8004e3e:	2380      	movs	r3, #128	; 0x80
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	401a      	ands	r2, r3
 8004e44:	2380      	movs	r3, #128	; 0x80
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d0ed      	beq.n	8004e28 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	0018      	movs	r0, r3
 8004e50:	46bd      	mov	sp, r7
 8004e52:	b004      	add	sp, #16
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	40007000 	.word	0x40007000
 8004e5c:	fffff9ff 	.word	0xfffff9ff
 8004e60:	20000000 	.word	0x20000000
 8004e64:	000f4240 	.word	0x000f4240

08004e68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e2f3      	b.n	8005462 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	4013      	ands	r3, r2
 8004e82:	d100      	bne.n	8004e86 <HAL_RCC_OscConfig+0x1e>
 8004e84:	e07c      	b.n	8004f80 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e86:	4bc3      	ldr	r3, [pc, #780]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2238      	movs	r2, #56	; 0x38
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e90:	4bc0      	ldr	r3, [pc, #768]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	2203      	movs	r2, #3
 8004e96:	4013      	ands	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	2b10      	cmp	r3, #16
 8004e9e:	d102      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x3e>
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2b03      	cmp	r3, #3
 8004ea4:	d002      	beq.n	8004eac <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d10b      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eac:	4bb9      	ldr	r3, [pc, #740]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	2380      	movs	r3, #128	; 0x80
 8004eb2:	029b      	lsls	r3, r3, #10
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	d062      	beq.n	8004f7e <HAL_RCC_OscConfig+0x116>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d15e      	bne.n	8004f7e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e2ce      	b.n	8005462 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	2380      	movs	r3, #128	; 0x80
 8004eca:	025b      	lsls	r3, r3, #9
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d107      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x78>
 8004ed0:	4bb0      	ldr	r3, [pc, #704]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4baf      	ldr	r3, [pc, #700]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004ed6:	2180      	movs	r1, #128	; 0x80
 8004ed8:	0249      	lsls	r1, r1, #9
 8004eda:	430a      	orrs	r2, r1
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	e020      	b.n	8004f22 <HAL_RCC_OscConfig+0xba>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	23a0      	movs	r3, #160	; 0xa0
 8004ee6:	02db      	lsls	r3, r3, #11
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d10e      	bne.n	8004f0a <HAL_RCC_OscConfig+0xa2>
 8004eec:	4ba9      	ldr	r3, [pc, #676]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	4ba8      	ldr	r3, [pc, #672]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004ef2:	2180      	movs	r1, #128	; 0x80
 8004ef4:	02c9      	lsls	r1, r1, #11
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	4ba6      	ldr	r3, [pc, #664]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	4ba5      	ldr	r3, [pc, #660]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004f00:	2180      	movs	r1, #128	; 0x80
 8004f02:	0249      	lsls	r1, r1, #9
 8004f04:	430a      	orrs	r2, r1
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	e00b      	b.n	8004f22 <HAL_RCC_OscConfig+0xba>
 8004f0a:	4ba2      	ldr	r3, [pc, #648]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	4ba1      	ldr	r3, [pc, #644]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004f10:	49a1      	ldr	r1, [pc, #644]	; (8005198 <HAL_RCC_OscConfig+0x330>)
 8004f12:	400a      	ands	r2, r1
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	4b9f      	ldr	r3, [pc, #636]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	4b9e      	ldr	r3, [pc, #632]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004f1c:	499f      	ldr	r1, [pc, #636]	; (800519c <HAL_RCC_OscConfig+0x334>)
 8004f1e:	400a      	ands	r2, r1
 8004f20:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d014      	beq.n	8004f54 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2a:	f7fe fa5d 	bl	80033e8 <HAL_GetTick>
 8004f2e:	0003      	movs	r3, r0
 8004f30:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f34:	f7fe fa58 	bl	80033e8 <HAL_GetTick>
 8004f38:	0002      	movs	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b64      	cmp	r3, #100	; 0x64
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e28d      	b.n	8005462 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f46:	4b93      	ldr	r3, [pc, #588]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	2380      	movs	r3, #128	; 0x80
 8004f4c:	029b      	lsls	r3, r3, #10
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d0f0      	beq.n	8004f34 <HAL_RCC_OscConfig+0xcc>
 8004f52:	e015      	b.n	8004f80 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f54:	f7fe fa48 	bl	80033e8 <HAL_GetTick>
 8004f58:	0003      	movs	r3, r0
 8004f5a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f5c:	e008      	b.n	8004f70 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f5e:	f7fe fa43 	bl	80033e8 <HAL_GetTick>
 8004f62:	0002      	movs	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b64      	cmp	r3, #100	; 0x64
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e278      	b.n	8005462 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f70:	4b88      	ldr	r3, [pc, #544]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	2380      	movs	r3, #128	; 0x80
 8004f76:	029b      	lsls	r3, r3, #10
 8004f78:	4013      	ands	r3, r2
 8004f7a:	d1f0      	bne.n	8004f5e <HAL_RCC_OscConfig+0xf6>
 8004f7c:	e000      	b.n	8004f80 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f7e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2202      	movs	r2, #2
 8004f86:	4013      	ands	r3, r2
 8004f88:	d100      	bne.n	8004f8c <HAL_RCC_OscConfig+0x124>
 8004f8a:	e099      	b.n	80050c0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f8c:	4b81      	ldr	r3, [pc, #516]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	2238      	movs	r2, #56	; 0x38
 8004f92:	4013      	ands	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f96:	4b7f      	ldr	r3, [pc, #508]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	2203      	movs	r2, #3
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	2b10      	cmp	r3, #16
 8004fa4:	d102      	bne.n	8004fac <HAL_RCC_OscConfig+0x144>
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d002      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d135      	bne.n	800501e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fb2:	4b78      	ldr	r3, [pc, #480]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	2380      	movs	r3, #128	; 0x80
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	4013      	ands	r3, r2
 8004fbc:	d005      	beq.n	8004fca <HAL_RCC_OscConfig+0x162>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e24b      	b.n	8005462 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fca:	4b72      	ldr	r3, [pc, #456]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	4a74      	ldr	r2, [pc, #464]	; (80051a0 <HAL_RCC_OscConfig+0x338>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	0019      	movs	r1, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	021a      	lsls	r2, r3, #8
 8004fda:	4b6e      	ldr	r3, [pc, #440]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d112      	bne.n	800500c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004fe6:	4b6b      	ldr	r3, [pc, #428]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a6e      	ldr	r2, [pc, #440]	; (80051a4 <HAL_RCC_OscConfig+0x33c>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	0019      	movs	r1, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	4b67      	ldr	r3, [pc, #412]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004ffa:	4b66      	ldr	r3, [pc, #408]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	0adb      	lsrs	r3, r3, #11
 8005000:	2207      	movs	r2, #7
 8005002:	4013      	ands	r3, r2
 8005004:	4a68      	ldr	r2, [pc, #416]	; (80051a8 <HAL_RCC_OscConfig+0x340>)
 8005006:	40da      	lsrs	r2, r3
 8005008:	4b68      	ldr	r3, [pc, #416]	; (80051ac <HAL_RCC_OscConfig+0x344>)
 800500a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800500c:	4b68      	ldr	r3, [pc, #416]	; (80051b0 <HAL_RCC_OscConfig+0x348>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	0018      	movs	r0, r3
 8005012:	f7fe f98d 	bl	8003330 <HAL_InitTick>
 8005016:	1e03      	subs	r3, r0, #0
 8005018:	d051      	beq.n	80050be <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e221      	b.n	8005462 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d030      	beq.n	8005088 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005026:	4b5b      	ldr	r3, [pc, #364]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a5e      	ldr	r2, [pc, #376]	; (80051a4 <HAL_RCC_OscConfig+0x33c>)
 800502c:	4013      	ands	r3, r2
 800502e:	0019      	movs	r1, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	4b57      	ldr	r3, [pc, #348]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8005036:	430a      	orrs	r2, r1
 8005038:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800503a:	4b56      	ldr	r3, [pc, #344]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4b55      	ldr	r3, [pc, #340]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8005040:	2180      	movs	r1, #128	; 0x80
 8005042:	0049      	lsls	r1, r1, #1
 8005044:	430a      	orrs	r2, r1
 8005046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005048:	f7fe f9ce 	bl	80033e8 <HAL_GetTick>
 800504c:	0003      	movs	r3, r0
 800504e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005052:	f7fe f9c9 	bl	80033e8 <HAL_GetTick>
 8005056:	0002      	movs	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e1fe      	b.n	8005462 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005064:	4b4b      	ldr	r3, [pc, #300]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	2380      	movs	r3, #128	; 0x80
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	4013      	ands	r3, r2
 800506e:	d0f0      	beq.n	8005052 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005070:	4b48      	ldr	r3, [pc, #288]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	4a4a      	ldr	r2, [pc, #296]	; (80051a0 <HAL_RCC_OscConfig+0x338>)
 8005076:	4013      	ands	r3, r2
 8005078:	0019      	movs	r1, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	021a      	lsls	r2, r3, #8
 8005080:	4b44      	ldr	r3, [pc, #272]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8005082:	430a      	orrs	r2, r1
 8005084:	605a      	str	r2, [r3, #4]
 8005086:	e01b      	b.n	80050c0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005088:	4b42      	ldr	r3, [pc, #264]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	4b41      	ldr	r3, [pc, #260]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 800508e:	4949      	ldr	r1, [pc, #292]	; (80051b4 <HAL_RCC_OscConfig+0x34c>)
 8005090:	400a      	ands	r2, r1
 8005092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005094:	f7fe f9a8 	bl	80033e8 <HAL_GetTick>
 8005098:	0003      	movs	r3, r0
 800509a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800509c:	e008      	b.n	80050b0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800509e:	f7fe f9a3 	bl	80033e8 <HAL_GetTick>
 80050a2:	0002      	movs	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e1d8      	b.n	8005462 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050b0:	4b38      	ldr	r3, [pc, #224]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	2380      	movs	r3, #128	; 0x80
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	4013      	ands	r3, r2
 80050ba:	d1f0      	bne.n	800509e <HAL_RCC_OscConfig+0x236>
 80050bc:	e000      	b.n	80050c0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2208      	movs	r2, #8
 80050c6:	4013      	ands	r3, r2
 80050c8:	d047      	beq.n	800515a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80050ca:	4b32      	ldr	r3, [pc, #200]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	2238      	movs	r2, #56	; 0x38
 80050d0:	4013      	ands	r3, r2
 80050d2:	2b18      	cmp	r3, #24
 80050d4:	d10a      	bne.n	80050ec <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80050d6:	4b2f      	ldr	r3, [pc, #188]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 80050d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050da:	2202      	movs	r2, #2
 80050dc:	4013      	ands	r3, r2
 80050de:	d03c      	beq.n	800515a <HAL_RCC_OscConfig+0x2f2>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d138      	bne.n	800515a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e1ba      	b.n	8005462 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d019      	beq.n	8005128 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80050f4:	4b27      	ldr	r3, [pc, #156]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 80050f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80050f8:	4b26      	ldr	r3, [pc, #152]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 80050fa:	2101      	movs	r1, #1
 80050fc:	430a      	orrs	r2, r1
 80050fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005100:	f7fe f972 	bl	80033e8 <HAL_GetTick>
 8005104:	0003      	movs	r3, r0
 8005106:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800510a:	f7fe f96d 	bl	80033e8 <HAL_GetTick>
 800510e:	0002      	movs	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e1a2      	b.n	8005462 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800511c:	4b1d      	ldr	r3, [pc, #116]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 800511e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005120:	2202      	movs	r2, #2
 8005122:	4013      	ands	r3, r2
 8005124:	d0f1      	beq.n	800510a <HAL_RCC_OscConfig+0x2a2>
 8005126:	e018      	b.n	800515a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005128:	4b1a      	ldr	r3, [pc, #104]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 800512a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800512c:	4b19      	ldr	r3, [pc, #100]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 800512e:	2101      	movs	r1, #1
 8005130:	438a      	bics	r2, r1
 8005132:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005134:	f7fe f958 	bl	80033e8 <HAL_GetTick>
 8005138:	0003      	movs	r3, r0
 800513a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800513c:	e008      	b.n	8005150 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800513e:	f7fe f953 	bl	80033e8 <HAL_GetTick>
 8005142:	0002      	movs	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e188      	b.n	8005462 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005150:	4b10      	ldr	r3, [pc, #64]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8005152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005154:	2202      	movs	r2, #2
 8005156:	4013      	ands	r3, r2
 8005158:	d1f1      	bne.n	800513e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2204      	movs	r2, #4
 8005160:	4013      	ands	r3, r2
 8005162:	d100      	bne.n	8005166 <HAL_RCC_OscConfig+0x2fe>
 8005164:	e0c6      	b.n	80052f4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005166:	231f      	movs	r3, #31
 8005168:	18fb      	adds	r3, r7, r3
 800516a:	2200      	movs	r2, #0
 800516c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800516e:	4b09      	ldr	r3, [pc, #36]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	2238      	movs	r2, #56	; 0x38
 8005174:	4013      	ands	r3, r2
 8005176:	2b20      	cmp	r3, #32
 8005178:	d11e      	bne.n	80051b8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800517a:	4b06      	ldr	r3, [pc, #24]	; (8005194 <HAL_RCC_OscConfig+0x32c>)
 800517c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800517e:	2202      	movs	r2, #2
 8005180:	4013      	ands	r3, r2
 8005182:	d100      	bne.n	8005186 <HAL_RCC_OscConfig+0x31e>
 8005184:	e0b6      	b.n	80052f4 <HAL_RCC_OscConfig+0x48c>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d000      	beq.n	8005190 <HAL_RCC_OscConfig+0x328>
 800518e:	e0b1      	b.n	80052f4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e166      	b.n	8005462 <HAL_RCC_OscConfig+0x5fa>
 8005194:	40021000 	.word	0x40021000
 8005198:	fffeffff 	.word	0xfffeffff
 800519c:	fffbffff 	.word	0xfffbffff
 80051a0:	ffff80ff 	.word	0xffff80ff
 80051a4:	ffffc7ff 	.word	0xffffc7ff
 80051a8:	00f42400 	.word	0x00f42400
 80051ac:	20000000 	.word	0x20000000
 80051b0:	20000004 	.word	0x20000004
 80051b4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051b8:	4bac      	ldr	r3, [pc, #688]	; (800546c <HAL_RCC_OscConfig+0x604>)
 80051ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051bc:	2380      	movs	r3, #128	; 0x80
 80051be:	055b      	lsls	r3, r3, #21
 80051c0:	4013      	ands	r3, r2
 80051c2:	d101      	bne.n	80051c8 <HAL_RCC_OscConfig+0x360>
 80051c4:	2301      	movs	r3, #1
 80051c6:	e000      	b.n	80051ca <HAL_RCC_OscConfig+0x362>
 80051c8:	2300      	movs	r3, #0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d011      	beq.n	80051f2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80051ce:	4ba7      	ldr	r3, [pc, #668]	; (800546c <HAL_RCC_OscConfig+0x604>)
 80051d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051d2:	4ba6      	ldr	r3, [pc, #664]	; (800546c <HAL_RCC_OscConfig+0x604>)
 80051d4:	2180      	movs	r1, #128	; 0x80
 80051d6:	0549      	lsls	r1, r1, #21
 80051d8:	430a      	orrs	r2, r1
 80051da:	63da      	str	r2, [r3, #60]	; 0x3c
 80051dc:	4ba3      	ldr	r3, [pc, #652]	; (800546c <HAL_RCC_OscConfig+0x604>)
 80051de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051e0:	2380      	movs	r3, #128	; 0x80
 80051e2:	055b      	lsls	r3, r3, #21
 80051e4:	4013      	ands	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80051ea:	231f      	movs	r3, #31
 80051ec:	18fb      	adds	r3, r7, r3
 80051ee:	2201      	movs	r2, #1
 80051f0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051f2:	4b9f      	ldr	r3, [pc, #636]	; (8005470 <HAL_RCC_OscConfig+0x608>)
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	2380      	movs	r3, #128	; 0x80
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	4013      	ands	r3, r2
 80051fc:	d11a      	bne.n	8005234 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051fe:	4b9c      	ldr	r3, [pc, #624]	; (8005470 <HAL_RCC_OscConfig+0x608>)
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	4b9b      	ldr	r3, [pc, #620]	; (8005470 <HAL_RCC_OscConfig+0x608>)
 8005204:	2180      	movs	r1, #128	; 0x80
 8005206:	0049      	lsls	r1, r1, #1
 8005208:	430a      	orrs	r2, r1
 800520a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800520c:	f7fe f8ec 	bl	80033e8 <HAL_GetTick>
 8005210:	0003      	movs	r3, r0
 8005212:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005214:	e008      	b.n	8005228 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005216:	f7fe f8e7 	bl	80033e8 <HAL_GetTick>
 800521a:	0002      	movs	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e11c      	b.n	8005462 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005228:	4b91      	ldr	r3, [pc, #580]	; (8005470 <HAL_RCC_OscConfig+0x608>)
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	2380      	movs	r3, #128	; 0x80
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	4013      	ands	r3, r2
 8005232:	d0f0      	beq.n	8005216 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d106      	bne.n	800524a <HAL_RCC_OscConfig+0x3e2>
 800523c:	4b8b      	ldr	r3, [pc, #556]	; (800546c <HAL_RCC_OscConfig+0x604>)
 800523e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005240:	4b8a      	ldr	r3, [pc, #552]	; (800546c <HAL_RCC_OscConfig+0x604>)
 8005242:	2101      	movs	r1, #1
 8005244:	430a      	orrs	r2, r1
 8005246:	65da      	str	r2, [r3, #92]	; 0x5c
 8005248:	e01c      	b.n	8005284 <HAL_RCC_OscConfig+0x41c>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	2b05      	cmp	r3, #5
 8005250:	d10c      	bne.n	800526c <HAL_RCC_OscConfig+0x404>
 8005252:	4b86      	ldr	r3, [pc, #536]	; (800546c <HAL_RCC_OscConfig+0x604>)
 8005254:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005256:	4b85      	ldr	r3, [pc, #532]	; (800546c <HAL_RCC_OscConfig+0x604>)
 8005258:	2104      	movs	r1, #4
 800525a:	430a      	orrs	r2, r1
 800525c:	65da      	str	r2, [r3, #92]	; 0x5c
 800525e:	4b83      	ldr	r3, [pc, #524]	; (800546c <HAL_RCC_OscConfig+0x604>)
 8005260:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005262:	4b82      	ldr	r3, [pc, #520]	; (800546c <HAL_RCC_OscConfig+0x604>)
 8005264:	2101      	movs	r1, #1
 8005266:	430a      	orrs	r2, r1
 8005268:	65da      	str	r2, [r3, #92]	; 0x5c
 800526a:	e00b      	b.n	8005284 <HAL_RCC_OscConfig+0x41c>
 800526c:	4b7f      	ldr	r3, [pc, #508]	; (800546c <HAL_RCC_OscConfig+0x604>)
 800526e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005270:	4b7e      	ldr	r3, [pc, #504]	; (800546c <HAL_RCC_OscConfig+0x604>)
 8005272:	2101      	movs	r1, #1
 8005274:	438a      	bics	r2, r1
 8005276:	65da      	str	r2, [r3, #92]	; 0x5c
 8005278:	4b7c      	ldr	r3, [pc, #496]	; (800546c <HAL_RCC_OscConfig+0x604>)
 800527a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800527c:	4b7b      	ldr	r3, [pc, #492]	; (800546c <HAL_RCC_OscConfig+0x604>)
 800527e:	2104      	movs	r1, #4
 8005280:	438a      	bics	r2, r1
 8005282:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d014      	beq.n	80052b6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528c:	f7fe f8ac 	bl	80033e8 <HAL_GetTick>
 8005290:	0003      	movs	r3, r0
 8005292:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005294:	e009      	b.n	80052aa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005296:	f7fe f8a7 	bl	80033e8 <HAL_GetTick>
 800529a:	0002      	movs	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	4a74      	ldr	r2, [pc, #464]	; (8005474 <HAL_RCC_OscConfig+0x60c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e0db      	b.n	8005462 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052aa:	4b70      	ldr	r3, [pc, #448]	; (800546c <HAL_RCC_OscConfig+0x604>)
 80052ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ae:	2202      	movs	r2, #2
 80052b0:	4013      	ands	r3, r2
 80052b2:	d0f0      	beq.n	8005296 <HAL_RCC_OscConfig+0x42e>
 80052b4:	e013      	b.n	80052de <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b6:	f7fe f897 	bl	80033e8 <HAL_GetTick>
 80052ba:	0003      	movs	r3, r0
 80052bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052be:	e009      	b.n	80052d4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c0:	f7fe f892 	bl	80033e8 <HAL_GetTick>
 80052c4:	0002      	movs	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	4a6a      	ldr	r2, [pc, #424]	; (8005474 <HAL_RCC_OscConfig+0x60c>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e0c6      	b.n	8005462 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052d4:	4b65      	ldr	r3, [pc, #404]	; (800546c <HAL_RCC_OscConfig+0x604>)
 80052d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d8:	2202      	movs	r2, #2
 80052da:	4013      	ands	r3, r2
 80052dc:	d1f0      	bne.n	80052c0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80052de:	231f      	movs	r3, #31
 80052e0:	18fb      	adds	r3, r7, r3
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d105      	bne.n	80052f4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80052e8:	4b60      	ldr	r3, [pc, #384]	; (800546c <HAL_RCC_OscConfig+0x604>)
 80052ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052ec:	4b5f      	ldr	r3, [pc, #380]	; (800546c <HAL_RCC_OscConfig+0x604>)
 80052ee:	4962      	ldr	r1, [pc, #392]	; (8005478 <HAL_RCC_OscConfig+0x610>)
 80052f0:	400a      	ands	r2, r1
 80052f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d100      	bne.n	80052fe <HAL_RCC_OscConfig+0x496>
 80052fc:	e0b0      	b.n	8005460 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052fe:	4b5b      	ldr	r3, [pc, #364]	; (800546c <HAL_RCC_OscConfig+0x604>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2238      	movs	r2, #56	; 0x38
 8005304:	4013      	ands	r3, r2
 8005306:	2b10      	cmp	r3, #16
 8005308:	d100      	bne.n	800530c <HAL_RCC_OscConfig+0x4a4>
 800530a:	e078      	b.n	80053fe <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	2b02      	cmp	r3, #2
 8005312:	d153      	bne.n	80053bc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005314:	4b55      	ldr	r3, [pc, #340]	; (800546c <HAL_RCC_OscConfig+0x604>)
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	4b54      	ldr	r3, [pc, #336]	; (800546c <HAL_RCC_OscConfig+0x604>)
 800531a:	4958      	ldr	r1, [pc, #352]	; (800547c <HAL_RCC_OscConfig+0x614>)
 800531c:	400a      	ands	r2, r1
 800531e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005320:	f7fe f862 	bl	80033e8 <HAL_GetTick>
 8005324:	0003      	movs	r3, r0
 8005326:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800532a:	f7fe f85d 	bl	80033e8 <HAL_GetTick>
 800532e:	0002      	movs	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e092      	b.n	8005462 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800533c:	4b4b      	ldr	r3, [pc, #300]	; (800546c <HAL_RCC_OscConfig+0x604>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	2380      	movs	r3, #128	; 0x80
 8005342:	049b      	lsls	r3, r3, #18
 8005344:	4013      	ands	r3, r2
 8005346:	d1f0      	bne.n	800532a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005348:	4b48      	ldr	r3, [pc, #288]	; (800546c <HAL_RCC_OscConfig+0x604>)
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	4a4c      	ldr	r2, [pc, #304]	; (8005480 <HAL_RCC_OscConfig+0x618>)
 800534e:	4013      	ands	r3, r2
 8005350:	0019      	movs	r1, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1a      	ldr	r2, [r3, #32]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005360:	021b      	lsls	r3, r3, #8
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	431a      	orrs	r2, r3
 8005370:	4b3e      	ldr	r3, [pc, #248]	; (800546c <HAL_RCC_OscConfig+0x604>)
 8005372:	430a      	orrs	r2, r1
 8005374:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005376:	4b3d      	ldr	r3, [pc, #244]	; (800546c <HAL_RCC_OscConfig+0x604>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	4b3c      	ldr	r3, [pc, #240]	; (800546c <HAL_RCC_OscConfig+0x604>)
 800537c:	2180      	movs	r1, #128	; 0x80
 800537e:	0449      	lsls	r1, r1, #17
 8005380:	430a      	orrs	r2, r1
 8005382:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005384:	4b39      	ldr	r3, [pc, #228]	; (800546c <HAL_RCC_OscConfig+0x604>)
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	4b38      	ldr	r3, [pc, #224]	; (800546c <HAL_RCC_OscConfig+0x604>)
 800538a:	2180      	movs	r1, #128	; 0x80
 800538c:	0549      	lsls	r1, r1, #21
 800538e:	430a      	orrs	r2, r1
 8005390:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005392:	f7fe f829 	bl	80033e8 <HAL_GetTick>
 8005396:	0003      	movs	r3, r0
 8005398:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800539c:	f7fe f824 	bl	80033e8 <HAL_GetTick>
 80053a0:	0002      	movs	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e059      	b.n	8005462 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053ae:	4b2f      	ldr	r3, [pc, #188]	; (800546c <HAL_RCC_OscConfig+0x604>)
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	2380      	movs	r3, #128	; 0x80
 80053b4:	049b      	lsls	r3, r3, #18
 80053b6:	4013      	ands	r3, r2
 80053b8:	d0f0      	beq.n	800539c <HAL_RCC_OscConfig+0x534>
 80053ba:	e051      	b.n	8005460 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053bc:	4b2b      	ldr	r3, [pc, #172]	; (800546c <HAL_RCC_OscConfig+0x604>)
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	4b2a      	ldr	r3, [pc, #168]	; (800546c <HAL_RCC_OscConfig+0x604>)
 80053c2:	492e      	ldr	r1, [pc, #184]	; (800547c <HAL_RCC_OscConfig+0x614>)
 80053c4:	400a      	ands	r2, r1
 80053c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c8:	f7fe f80e 	bl	80033e8 <HAL_GetTick>
 80053cc:	0003      	movs	r3, r0
 80053ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053d0:	e008      	b.n	80053e4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d2:	f7fe f809 	bl	80033e8 <HAL_GetTick>
 80053d6:	0002      	movs	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e03e      	b.n	8005462 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053e4:	4b21      	ldr	r3, [pc, #132]	; (800546c <HAL_RCC_OscConfig+0x604>)
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	2380      	movs	r3, #128	; 0x80
 80053ea:	049b      	lsls	r3, r3, #18
 80053ec:	4013      	ands	r3, r2
 80053ee:	d1f0      	bne.n	80053d2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80053f0:	4b1e      	ldr	r3, [pc, #120]	; (800546c <HAL_RCC_OscConfig+0x604>)
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	4b1d      	ldr	r3, [pc, #116]	; (800546c <HAL_RCC_OscConfig+0x604>)
 80053f6:	4923      	ldr	r1, [pc, #140]	; (8005484 <HAL_RCC_OscConfig+0x61c>)
 80053f8:	400a      	ands	r2, r1
 80053fa:	60da      	str	r2, [r3, #12]
 80053fc:	e030      	b.n	8005460 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e02b      	b.n	8005462 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800540a:	4b18      	ldr	r3, [pc, #96]	; (800546c <HAL_RCC_OscConfig+0x604>)
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	2203      	movs	r2, #3
 8005414:	401a      	ands	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	429a      	cmp	r2, r3
 800541c:	d11e      	bne.n	800545c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2270      	movs	r2, #112	; 0x70
 8005422:	401a      	ands	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005428:	429a      	cmp	r2, r3
 800542a:	d117      	bne.n	800545c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	23fe      	movs	r3, #254	; 0xfe
 8005430:	01db      	lsls	r3, r3, #7
 8005432:	401a      	ands	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005438:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800543a:	429a      	cmp	r2, r3
 800543c:	d10e      	bne.n	800545c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	23f8      	movs	r3, #248	; 0xf8
 8005442:	039b      	lsls	r3, r3, #14
 8005444:	401a      	ands	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800544a:	429a      	cmp	r2, r3
 800544c:	d106      	bne.n	800545c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	0f5b      	lsrs	r3, r3, #29
 8005452:	075a      	lsls	r2, r3, #29
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005458:	429a      	cmp	r2, r3
 800545a:	d001      	beq.n	8005460 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	0018      	movs	r0, r3
 8005464:	46bd      	mov	sp, r7
 8005466:	b008      	add	sp, #32
 8005468:	bd80      	pop	{r7, pc}
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	40021000 	.word	0x40021000
 8005470:	40007000 	.word	0x40007000
 8005474:	00001388 	.word	0x00001388
 8005478:	efffffff 	.word	0xefffffff
 800547c:	feffffff 	.word	0xfeffffff
 8005480:	1fc1808c 	.word	0x1fc1808c
 8005484:	effefffc 	.word	0xeffefffc

08005488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e0e9      	b.n	8005670 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800549c:	4b76      	ldr	r3, [pc, #472]	; (8005678 <HAL_RCC_ClockConfig+0x1f0>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2207      	movs	r2, #7
 80054a2:	4013      	ands	r3, r2
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d91e      	bls.n	80054e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054aa:	4b73      	ldr	r3, [pc, #460]	; (8005678 <HAL_RCC_ClockConfig+0x1f0>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2207      	movs	r2, #7
 80054b0:	4393      	bics	r3, r2
 80054b2:	0019      	movs	r1, r3
 80054b4:	4b70      	ldr	r3, [pc, #448]	; (8005678 <HAL_RCC_ClockConfig+0x1f0>)
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80054bc:	f7fd ff94 	bl	80033e8 <HAL_GetTick>
 80054c0:	0003      	movs	r3, r0
 80054c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80054c4:	e009      	b.n	80054da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054c6:	f7fd ff8f 	bl	80033e8 <HAL_GetTick>
 80054ca:	0002      	movs	r2, r0
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	4a6a      	ldr	r2, [pc, #424]	; (800567c <HAL_RCC_ClockConfig+0x1f4>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e0ca      	b.n	8005670 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80054da:	4b67      	ldr	r3, [pc, #412]	; (8005678 <HAL_RCC_ClockConfig+0x1f0>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2207      	movs	r2, #7
 80054e0:	4013      	ands	r3, r2
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d1ee      	bne.n	80054c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2202      	movs	r2, #2
 80054ee:	4013      	ands	r3, r2
 80054f0:	d015      	beq.n	800551e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2204      	movs	r2, #4
 80054f8:	4013      	ands	r3, r2
 80054fa:	d006      	beq.n	800550a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80054fc:	4b60      	ldr	r3, [pc, #384]	; (8005680 <HAL_RCC_ClockConfig+0x1f8>)
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	4b5f      	ldr	r3, [pc, #380]	; (8005680 <HAL_RCC_ClockConfig+0x1f8>)
 8005502:	21e0      	movs	r1, #224	; 0xe0
 8005504:	01c9      	lsls	r1, r1, #7
 8005506:	430a      	orrs	r2, r1
 8005508:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800550a:	4b5d      	ldr	r3, [pc, #372]	; (8005680 <HAL_RCC_ClockConfig+0x1f8>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	4a5d      	ldr	r2, [pc, #372]	; (8005684 <HAL_RCC_ClockConfig+0x1fc>)
 8005510:	4013      	ands	r3, r2
 8005512:	0019      	movs	r1, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	4b59      	ldr	r3, [pc, #356]	; (8005680 <HAL_RCC_ClockConfig+0x1f8>)
 800551a:	430a      	orrs	r2, r1
 800551c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2201      	movs	r2, #1
 8005524:	4013      	ands	r3, r2
 8005526:	d057      	beq.n	80055d8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d107      	bne.n	8005540 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005530:	4b53      	ldr	r3, [pc, #332]	; (8005680 <HAL_RCC_ClockConfig+0x1f8>)
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	2380      	movs	r3, #128	; 0x80
 8005536:	029b      	lsls	r3, r3, #10
 8005538:	4013      	ands	r3, r2
 800553a:	d12b      	bne.n	8005594 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e097      	b.n	8005670 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2b02      	cmp	r3, #2
 8005546:	d107      	bne.n	8005558 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005548:	4b4d      	ldr	r3, [pc, #308]	; (8005680 <HAL_RCC_ClockConfig+0x1f8>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	2380      	movs	r3, #128	; 0x80
 800554e:	049b      	lsls	r3, r3, #18
 8005550:	4013      	ands	r3, r2
 8005552:	d11f      	bne.n	8005594 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e08b      	b.n	8005670 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d107      	bne.n	8005570 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005560:	4b47      	ldr	r3, [pc, #284]	; (8005680 <HAL_RCC_ClockConfig+0x1f8>)
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	2380      	movs	r3, #128	; 0x80
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	4013      	ands	r3, r2
 800556a:	d113      	bne.n	8005594 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e07f      	b.n	8005670 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	2b03      	cmp	r3, #3
 8005576:	d106      	bne.n	8005586 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005578:	4b41      	ldr	r3, [pc, #260]	; (8005680 <HAL_RCC_ClockConfig+0x1f8>)
 800557a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800557c:	2202      	movs	r2, #2
 800557e:	4013      	ands	r3, r2
 8005580:	d108      	bne.n	8005594 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e074      	b.n	8005670 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005586:	4b3e      	ldr	r3, [pc, #248]	; (8005680 <HAL_RCC_ClockConfig+0x1f8>)
 8005588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800558a:	2202      	movs	r2, #2
 800558c:	4013      	ands	r3, r2
 800558e:	d101      	bne.n	8005594 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e06d      	b.n	8005670 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005594:	4b3a      	ldr	r3, [pc, #232]	; (8005680 <HAL_RCC_ClockConfig+0x1f8>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	2207      	movs	r2, #7
 800559a:	4393      	bics	r3, r2
 800559c:	0019      	movs	r1, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	4b37      	ldr	r3, [pc, #220]	; (8005680 <HAL_RCC_ClockConfig+0x1f8>)
 80055a4:	430a      	orrs	r2, r1
 80055a6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a8:	f7fd ff1e 	bl	80033e8 <HAL_GetTick>
 80055ac:	0003      	movs	r3, r0
 80055ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055b0:	e009      	b.n	80055c6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055b2:	f7fd ff19 	bl	80033e8 <HAL_GetTick>
 80055b6:	0002      	movs	r2, r0
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	4a2f      	ldr	r2, [pc, #188]	; (800567c <HAL_RCC_ClockConfig+0x1f4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e054      	b.n	8005670 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055c6:	4b2e      	ldr	r3, [pc, #184]	; (8005680 <HAL_RCC_ClockConfig+0x1f8>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2238      	movs	r2, #56	; 0x38
 80055cc:	401a      	ands	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d1ec      	bne.n	80055b2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055d8:	4b27      	ldr	r3, [pc, #156]	; (8005678 <HAL_RCC_ClockConfig+0x1f0>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2207      	movs	r2, #7
 80055de:	4013      	ands	r3, r2
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d21e      	bcs.n	8005624 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055e6:	4b24      	ldr	r3, [pc, #144]	; (8005678 <HAL_RCC_ClockConfig+0x1f0>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2207      	movs	r2, #7
 80055ec:	4393      	bics	r3, r2
 80055ee:	0019      	movs	r1, r3
 80055f0:	4b21      	ldr	r3, [pc, #132]	; (8005678 <HAL_RCC_ClockConfig+0x1f0>)
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055f8:	f7fd fef6 	bl	80033e8 <HAL_GetTick>
 80055fc:	0003      	movs	r3, r0
 80055fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005600:	e009      	b.n	8005616 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005602:	f7fd fef1 	bl	80033e8 <HAL_GetTick>
 8005606:	0002      	movs	r2, r0
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	4a1b      	ldr	r2, [pc, #108]	; (800567c <HAL_RCC_ClockConfig+0x1f4>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e02c      	b.n	8005670 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005616:	4b18      	ldr	r3, [pc, #96]	; (8005678 <HAL_RCC_ClockConfig+0x1f0>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2207      	movs	r2, #7
 800561c:	4013      	ands	r3, r2
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d1ee      	bne.n	8005602 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2204      	movs	r2, #4
 800562a:	4013      	ands	r3, r2
 800562c:	d009      	beq.n	8005642 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800562e:	4b14      	ldr	r3, [pc, #80]	; (8005680 <HAL_RCC_ClockConfig+0x1f8>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	4a15      	ldr	r2, [pc, #84]	; (8005688 <HAL_RCC_ClockConfig+0x200>)
 8005634:	4013      	ands	r3, r2
 8005636:	0019      	movs	r1, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	4b10      	ldr	r3, [pc, #64]	; (8005680 <HAL_RCC_ClockConfig+0x1f8>)
 800563e:	430a      	orrs	r2, r1
 8005640:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005642:	f000 f829 	bl	8005698 <HAL_RCC_GetSysClockFreq>
 8005646:	0001      	movs	r1, r0
 8005648:	4b0d      	ldr	r3, [pc, #52]	; (8005680 <HAL_RCC_ClockConfig+0x1f8>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	0a1b      	lsrs	r3, r3, #8
 800564e:	220f      	movs	r2, #15
 8005650:	401a      	ands	r2, r3
 8005652:	4b0e      	ldr	r3, [pc, #56]	; (800568c <HAL_RCC_ClockConfig+0x204>)
 8005654:	0092      	lsls	r2, r2, #2
 8005656:	58d3      	ldr	r3, [r2, r3]
 8005658:	221f      	movs	r2, #31
 800565a:	4013      	ands	r3, r2
 800565c:	000a      	movs	r2, r1
 800565e:	40da      	lsrs	r2, r3
 8005660:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <HAL_RCC_ClockConfig+0x208>)
 8005662:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005664:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <HAL_RCC_ClockConfig+0x20c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	0018      	movs	r0, r3
 800566a:	f7fd fe61 	bl	8003330 <HAL_InitTick>
 800566e:	0003      	movs	r3, r0
}
 8005670:	0018      	movs	r0, r3
 8005672:	46bd      	mov	sp, r7
 8005674:	b004      	add	sp, #16
 8005676:	bd80      	pop	{r7, pc}
 8005678:	40022000 	.word	0x40022000
 800567c:	00001388 	.word	0x00001388
 8005680:	40021000 	.word	0x40021000
 8005684:	fffff0ff 	.word	0xfffff0ff
 8005688:	ffff8fff 	.word	0xffff8fff
 800568c:	08006544 	.word	0x08006544
 8005690:	20000000 	.word	0x20000000
 8005694:	20000004 	.word	0x20000004

08005698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800569e:	4b3c      	ldr	r3, [pc, #240]	; (8005790 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2238      	movs	r2, #56	; 0x38
 80056a4:	4013      	ands	r3, r2
 80056a6:	d10f      	bne.n	80056c8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80056a8:	4b39      	ldr	r3, [pc, #228]	; (8005790 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	0adb      	lsrs	r3, r3, #11
 80056ae:	2207      	movs	r2, #7
 80056b0:	4013      	ands	r3, r2
 80056b2:	2201      	movs	r2, #1
 80056b4:	409a      	lsls	r2, r3
 80056b6:	0013      	movs	r3, r2
 80056b8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80056ba:	6839      	ldr	r1, [r7, #0]
 80056bc:	4835      	ldr	r0, [pc, #212]	; (8005794 <HAL_RCC_GetSysClockFreq+0xfc>)
 80056be:	f7fa fd31 	bl	8000124 <__udivsi3>
 80056c2:	0003      	movs	r3, r0
 80056c4:	613b      	str	r3, [r7, #16]
 80056c6:	e05d      	b.n	8005784 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056c8:	4b31      	ldr	r3, [pc, #196]	; (8005790 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	2238      	movs	r2, #56	; 0x38
 80056ce:	4013      	ands	r3, r2
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d102      	bne.n	80056da <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80056d4:	4b30      	ldr	r3, [pc, #192]	; (8005798 <HAL_RCC_GetSysClockFreq+0x100>)
 80056d6:	613b      	str	r3, [r7, #16]
 80056d8:	e054      	b.n	8005784 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056da:	4b2d      	ldr	r3, [pc, #180]	; (8005790 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2238      	movs	r2, #56	; 0x38
 80056e0:	4013      	ands	r3, r2
 80056e2:	2b10      	cmp	r3, #16
 80056e4:	d138      	bne.n	8005758 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80056e6:	4b2a      	ldr	r3, [pc, #168]	; (8005790 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	2203      	movs	r2, #3
 80056ec:	4013      	ands	r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056f0:	4b27      	ldr	r3, [pc, #156]	; (8005790 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	091b      	lsrs	r3, r3, #4
 80056f6:	2207      	movs	r2, #7
 80056f8:	4013      	ands	r3, r2
 80056fa:	3301      	adds	r3, #1
 80056fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b03      	cmp	r3, #3
 8005702:	d10d      	bne.n	8005720 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005704:	68b9      	ldr	r1, [r7, #8]
 8005706:	4824      	ldr	r0, [pc, #144]	; (8005798 <HAL_RCC_GetSysClockFreq+0x100>)
 8005708:	f7fa fd0c 	bl	8000124 <__udivsi3>
 800570c:	0003      	movs	r3, r0
 800570e:	0019      	movs	r1, r3
 8005710:	4b1f      	ldr	r3, [pc, #124]	; (8005790 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	0a1b      	lsrs	r3, r3, #8
 8005716:	227f      	movs	r2, #127	; 0x7f
 8005718:	4013      	ands	r3, r2
 800571a:	434b      	muls	r3, r1
 800571c:	617b      	str	r3, [r7, #20]
        break;
 800571e:	e00d      	b.n	800573c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005720:	68b9      	ldr	r1, [r7, #8]
 8005722:	481c      	ldr	r0, [pc, #112]	; (8005794 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005724:	f7fa fcfe 	bl	8000124 <__udivsi3>
 8005728:	0003      	movs	r3, r0
 800572a:	0019      	movs	r1, r3
 800572c:	4b18      	ldr	r3, [pc, #96]	; (8005790 <HAL_RCC_GetSysClockFreq+0xf8>)
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	0a1b      	lsrs	r3, r3, #8
 8005732:	227f      	movs	r2, #127	; 0x7f
 8005734:	4013      	ands	r3, r2
 8005736:	434b      	muls	r3, r1
 8005738:	617b      	str	r3, [r7, #20]
        break;
 800573a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800573c:	4b14      	ldr	r3, [pc, #80]	; (8005790 <HAL_RCC_GetSysClockFreq+0xf8>)
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	0f5b      	lsrs	r3, r3, #29
 8005742:	2207      	movs	r2, #7
 8005744:	4013      	ands	r3, r2
 8005746:	3301      	adds	r3, #1
 8005748:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	6978      	ldr	r0, [r7, #20]
 800574e:	f7fa fce9 	bl	8000124 <__udivsi3>
 8005752:	0003      	movs	r3, r0
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	e015      	b.n	8005784 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005758:	4b0d      	ldr	r3, [pc, #52]	; (8005790 <HAL_RCC_GetSysClockFreq+0xf8>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	2238      	movs	r2, #56	; 0x38
 800575e:	4013      	ands	r3, r2
 8005760:	2b20      	cmp	r3, #32
 8005762:	d103      	bne.n	800576c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005764:	2380      	movs	r3, #128	; 0x80
 8005766:	021b      	lsls	r3, r3, #8
 8005768:	613b      	str	r3, [r7, #16]
 800576a:	e00b      	b.n	8005784 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800576c:	4b08      	ldr	r3, [pc, #32]	; (8005790 <HAL_RCC_GetSysClockFreq+0xf8>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	2238      	movs	r2, #56	; 0x38
 8005772:	4013      	ands	r3, r2
 8005774:	2b18      	cmp	r3, #24
 8005776:	d103      	bne.n	8005780 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005778:	23fa      	movs	r3, #250	; 0xfa
 800577a:	01db      	lsls	r3, r3, #7
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	e001      	b.n	8005784 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005784:	693b      	ldr	r3, [r7, #16]
}
 8005786:	0018      	movs	r0, r3
 8005788:	46bd      	mov	sp, r7
 800578a:	b006      	add	sp, #24
 800578c:	bd80      	pop	{r7, pc}
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	40021000 	.word	0x40021000
 8005794:	00f42400 	.word	0x00f42400
 8005798:	007a1200 	.word	0x007a1200

0800579c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80057a4:	2313      	movs	r3, #19
 80057a6:	18fb      	adds	r3, r7, r3
 80057a8:	2200      	movs	r2, #0
 80057aa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057ac:	2312      	movs	r3, #18
 80057ae:	18fb      	adds	r3, r7, r3
 80057b0:	2200      	movs	r2, #0
 80057b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	2380      	movs	r3, #128	; 0x80
 80057ba:	029b      	lsls	r3, r3, #10
 80057bc:	4013      	ands	r3, r2
 80057be:	d100      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80057c0:	e0a3      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057c2:	2011      	movs	r0, #17
 80057c4:	183b      	adds	r3, r7, r0
 80057c6:	2200      	movs	r2, #0
 80057c8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057ca:	4b7f      	ldr	r3, [pc, #508]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80057cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057ce:	2380      	movs	r3, #128	; 0x80
 80057d0:	055b      	lsls	r3, r3, #21
 80057d2:	4013      	ands	r3, r2
 80057d4:	d110      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057d6:	4b7c      	ldr	r3, [pc, #496]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80057d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057da:	4b7b      	ldr	r3, [pc, #492]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80057dc:	2180      	movs	r1, #128	; 0x80
 80057de:	0549      	lsls	r1, r1, #21
 80057e0:	430a      	orrs	r2, r1
 80057e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80057e4:	4b78      	ldr	r3, [pc, #480]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80057e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	055b      	lsls	r3, r3, #21
 80057ec:	4013      	ands	r3, r2
 80057ee:	60bb      	str	r3, [r7, #8]
 80057f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057f2:	183b      	adds	r3, r7, r0
 80057f4:	2201      	movs	r2, #1
 80057f6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057f8:	4b74      	ldr	r3, [pc, #464]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	4b73      	ldr	r3, [pc, #460]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80057fe:	2180      	movs	r1, #128	; 0x80
 8005800:	0049      	lsls	r1, r1, #1
 8005802:	430a      	orrs	r2, r1
 8005804:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005806:	f7fd fdef 	bl	80033e8 <HAL_GetTick>
 800580a:	0003      	movs	r3, r0
 800580c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800580e:	e00b      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005810:	f7fd fdea 	bl	80033e8 <HAL_GetTick>
 8005814:	0002      	movs	r2, r0
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d904      	bls.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800581e:	2313      	movs	r3, #19
 8005820:	18fb      	adds	r3, r7, r3
 8005822:	2203      	movs	r2, #3
 8005824:	701a      	strb	r2, [r3, #0]
        break;
 8005826:	e005      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005828:	4b68      	ldr	r3, [pc, #416]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	2380      	movs	r3, #128	; 0x80
 800582e:	005b      	lsls	r3, r3, #1
 8005830:	4013      	ands	r3, r2
 8005832:	d0ed      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005834:	2313      	movs	r3, #19
 8005836:	18fb      	adds	r3, r7, r3
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d154      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800583e:	4b62      	ldr	r3, [pc, #392]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005840:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005842:	23c0      	movs	r3, #192	; 0xc0
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4013      	ands	r3, r2
 8005848:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d019      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	429a      	cmp	r2, r3
 8005858:	d014      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800585a:	4b5b      	ldr	r3, [pc, #364]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800585c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800585e:	4a5c      	ldr	r2, [pc, #368]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005860:	4013      	ands	r3, r2
 8005862:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005864:	4b58      	ldr	r3, [pc, #352]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005866:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005868:	4b57      	ldr	r3, [pc, #348]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800586a:	2180      	movs	r1, #128	; 0x80
 800586c:	0249      	lsls	r1, r1, #9
 800586e:	430a      	orrs	r2, r1
 8005870:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005872:	4b55      	ldr	r3, [pc, #340]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005874:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005876:	4b54      	ldr	r3, [pc, #336]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005878:	4956      	ldr	r1, [pc, #344]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800587a:	400a      	ands	r2, r1
 800587c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800587e:	4b52      	ldr	r3, [pc, #328]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2201      	movs	r2, #1
 8005888:	4013      	ands	r3, r2
 800588a:	d016      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588c:	f7fd fdac 	bl	80033e8 <HAL_GetTick>
 8005890:	0003      	movs	r3, r0
 8005892:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005894:	e00c      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005896:	f7fd fda7 	bl	80033e8 <HAL_GetTick>
 800589a:	0002      	movs	r2, r0
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	4a4d      	ldr	r2, [pc, #308]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d904      	bls.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80058a6:	2313      	movs	r3, #19
 80058a8:	18fb      	adds	r3, r7, r3
 80058aa:	2203      	movs	r2, #3
 80058ac:	701a      	strb	r2, [r3, #0]
            break;
 80058ae:	e004      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058b0:	4b45      	ldr	r3, [pc, #276]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80058b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b4:	2202      	movs	r2, #2
 80058b6:	4013      	ands	r3, r2
 80058b8:	d0ed      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80058ba:	2313      	movs	r3, #19
 80058bc:	18fb      	adds	r3, r7, r3
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058c4:	4b40      	ldr	r3, [pc, #256]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80058c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c8:	4a41      	ldr	r2, [pc, #260]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80058ca:	4013      	ands	r3, r2
 80058cc:	0019      	movs	r1, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695a      	ldr	r2, [r3, #20]
 80058d2:	4b3d      	ldr	r3, [pc, #244]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80058d4:	430a      	orrs	r2, r1
 80058d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80058d8:	e00c      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058da:	2312      	movs	r3, #18
 80058dc:	18fb      	adds	r3, r7, r3
 80058de:	2213      	movs	r2, #19
 80058e0:	18ba      	adds	r2, r7, r2
 80058e2:	7812      	ldrb	r2, [r2, #0]
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	e005      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e8:	2312      	movs	r3, #18
 80058ea:	18fb      	adds	r3, r7, r3
 80058ec:	2213      	movs	r2, #19
 80058ee:	18ba      	adds	r2, r7, r2
 80058f0:	7812      	ldrb	r2, [r2, #0]
 80058f2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058f4:	2311      	movs	r3, #17
 80058f6:	18fb      	adds	r3, r7, r3
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d105      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058fe:	4b32      	ldr	r3, [pc, #200]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005900:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005902:	4b31      	ldr	r3, [pc, #196]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005904:	4935      	ldr	r1, [pc, #212]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005906:	400a      	ands	r2, r1
 8005908:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2201      	movs	r2, #1
 8005910:	4013      	ands	r3, r2
 8005912:	d009      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005914:	4b2c      	ldr	r3, [pc, #176]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005918:	2203      	movs	r2, #3
 800591a:	4393      	bics	r3, r2
 800591c:	0019      	movs	r1, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	4b29      	ldr	r3, [pc, #164]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005924:	430a      	orrs	r2, r1
 8005926:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2220      	movs	r2, #32
 800592e:	4013      	ands	r3, r2
 8005930:	d009      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005932:	4b25      	ldr	r3, [pc, #148]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005936:	4a2a      	ldr	r2, [pc, #168]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005938:	4013      	ands	r3, r2
 800593a:	0019      	movs	r1, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	4b21      	ldr	r3, [pc, #132]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005942:	430a      	orrs	r2, r1
 8005944:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	2380      	movs	r3, #128	; 0x80
 800594c:	01db      	lsls	r3, r3, #7
 800594e:	4013      	ands	r3, r2
 8005950:	d015      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005952:	4b1d      	ldr	r3, [pc, #116]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	0899      	lsrs	r1, r3, #2
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691a      	ldr	r2, [r3, #16]
 800595e:	4b1a      	ldr	r3, [pc, #104]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005960:	430a      	orrs	r2, r1
 8005962:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	2380      	movs	r3, #128	; 0x80
 800596a:	05db      	lsls	r3, r3, #23
 800596c:	429a      	cmp	r2, r3
 800596e:	d106      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005970:	4b15      	ldr	r3, [pc, #84]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005972:	68da      	ldr	r2, [r3, #12]
 8005974:	4b14      	ldr	r3, [pc, #80]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005976:	2180      	movs	r1, #128	; 0x80
 8005978:	0249      	lsls	r1, r1, #9
 800597a:	430a      	orrs	r2, r1
 800597c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	2380      	movs	r3, #128	; 0x80
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	4013      	ands	r3, r2
 8005988:	d016      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800598a:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800598c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598e:	4a15      	ldr	r2, [pc, #84]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005990:	4013      	ands	r3, r2
 8005992:	0019      	movs	r1, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800599a:	430a      	orrs	r2, r1
 800599c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	2380      	movs	r3, #128	; 0x80
 80059a4:	01db      	lsls	r3, r3, #7
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d106      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80059aa:	4b07      	ldr	r3, [pc, #28]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80059b0:	2180      	movs	r1, #128	; 0x80
 80059b2:	0249      	lsls	r1, r1, #9
 80059b4:	430a      	orrs	r2, r1
 80059b6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80059b8:	2312      	movs	r3, #18
 80059ba:	18fb      	adds	r3, r7, r3
 80059bc:	781b      	ldrb	r3, [r3, #0]
}
 80059be:	0018      	movs	r0, r3
 80059c0:	46bd      	mov	sp, r7
 80059c2:	b006      	add	sp, #24
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	46c0      	nop			; (mov r8, r8)
 80059c8:	40021000 	.word	0x40021000
 80059cc:	40007000 	.word	0x40007000
 80059d0:	fffffcff 	.word	0xfffffcff
 80059d4:	fffeffff 	.word	0xfffeffff
 80059d8:	00001388 	.word	0x00001388
 80059dc:	efffffff 	.word	0xefffffff
 80059e0:	ffffcfff 	.word	0xffffcfff
 80059e4:	ffff3fff 	.word	0xffff3fff

080059e8 <__errno>:
 80059e8:	4b01      	ldr	r3, [pc, #4]	; (80059f0 <__errno+0x8>)
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	4770      	bx	lr
 80059ee:	46c0      	nop			; (mov r8, r8)
 80059f0:	2000000c 	.word	0x2000000c

080059f4 <__libc_init_array>:
 80059f4:	b570      	push	{r4, r5, r6, lr}
 80059f6:	2600      	movs	r6, #0
 80059f8:	4d0c      	ldr	r5, [pc, #48]	; (8005a2c <__libc_init_array+0x38>)
 80059fa:	4c0d      	ldr	r4, [pc, #52]	; (8005a30 <__libc_init_array+0x3c>)
 80059fc:	1b64      	subs	r4, r4, r5
 80059fe:	10a4      	asrs	r4, r4, #2
 8005a00:	42a6      	cmp	r6, r4
 8005a02:	d109      	bne.n	8005a18 <__libc_init_array+0x24>
 8005a04:	2600      	movs	r6, #0
 8005a06:	f000 fc9d 	bl	8006344 <_init>
 8005a0a:	4d0a      	ldr	r5, [pc, #40]	; (8005a34 <__libc_init_array+0x40>)
 8005a0c:	4c0a      	ldr	r4, [pc, #40]	; (8005a38 <__libc_init_array+0x44>)
 8005a0e:	1b64      	subs	r4, r4, r5
 8005a10:	10a4      	asrs	r4, r4, #2
 8005a12:	42a6      	cmp	r6, r4
 8005a14:	d105      	bne.n	8005a22 <__libc_init_array+0x2e>
 8005a16:	bd70      	pop	{r4, r5, r6, pc}
 8005a18:	00b3      	lsls	r3, r6, #2
 8005a1a:	58eb      	ldr	r3, [r5, r3]
 8005a1c:	4798      	blx	r3
 8005a1e:	3601      	adds	r6, #1
 8005a20:	e7ee      	b.n	8005a00 <__libc_init_array+0xc>
 8005a22:	00b3      	lsls	r3, r6, #2
 8005a24:	58eb      	ldr	r3, [r5, r3]
 8005a26:	4798      	blx	r3
 8005a28:	3601      	adds	r6, #1
 8005a2a:	e7f2      	b.n	8005a12 <__libc_init_array+0x1e>
 8005a2c:	080065b8 	.word	0x080065b8
 8005a30:	080065b8 	.word	0x080065b8
 8005a34:	080065b8 	.word	0x080065b8
 8005a38:	080065bc 	.word	0x080065bc

08005a3c <malloc>:
 8005a3c:	b510      	push	{r4, lr}
 8005a3e:	4b03      	ldr	r3, [pc, #12]	; (8005a4c <malloc+0x10>)
 8005a40:	0001      	movs	r1, r0
 8005a42:	6818      	ldr	r0, [r3, #0]
 8005a44:	f000 f882 	bl	8005b4c <_malloc_r>
 8005a48:	bd10      	pop	{r4, pc}
 8005a4a:	46c0      	nop			; (mov r8, r8)
 8005a4c:	2000000c 	.word	0x2000000c

08005a50 <free>:
 8005a50:	b510      	push	{r4, lr}
 8005a52:	4b03      	ldr	r3, [pc, #12]	; (8005a60 <free+0x10>)
 8005a54:	0001      	movs	r1, r0
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	f000 f80c 	bl	8005a74 <_free_r>
 8005a5c:	bd10      	pop	{r4, pc}
 8005a5e:	46c0      	nop			; (mov r8, r8)
 8005a60:	2000000c 	.word	0x2000000c

08005a64 <memset>:
 8005a64:	0003      	movs	r3, r0
 8005a66:	1882      	adds	r2, r0, r2
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d100      	bne.n	8005a6e <memset+0xa>
 8005a6c:	4770      	bx	lr
 8005a6e:	7019      	strb	r1, [r3, #0]
 8005a70:	3301      	adds	r3, #1
 8005a72:	e7f9      	b.n	8005a68 <memset+0x4>

08005a74 <_free_r>:
 8005a74:	b570      	push	{r4, r5, r6, lr}
 8005a76:	0005      	movs	r5, r0
 8005a78:	2900      	cmp	r1, #0
 8005a7a:	d010      	beq.n	8005a9e <_free_r+0x2a>
 8005a7c:	1f0c      	subs	r4, r1, #4
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	da00      	bge.n	8005a86 <_free_r+0x12>
 8005a84:	18e4      	adds	r4, r4, r3
 8005a86:	0028      	movs	r0, r5
 8005a88:	f000 f908 	bl	8005c9c <__malloc_lock>
 8005a8c:	4a1d      	ldr	r2, [pc, #116]	; (8005b04 <_free_r+0x90>)
 8005a8e:	6813      	ldr	r3, [r2, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d105      	bne.n	8005aa0 <_free_r+0x2c>
 8005a94:	6063      	str	r3, [r4, #4]
 8005a96:	6014      	str	r4, [r2, #0]
 8005a98:	0028      	movs	r0, r5
 8005a9a:	f000 f907 	bl	8005cac <__malloc_unlock>
 8005a9e:	bd70      	pop	{r4, r5, r6, pc}
 8005aa0:	42a3      	cmp	r3, r4
 8005aa2:	d908      	bls.n	8005ab6 <_free_r+0x42>
 8005aa4:	6821      	ldr	r1, [r4, #0]
 8005aa6:	1860      	adds	r0, r4, r1
 8005aa8:	4283      	cmp	r3, r0
 8005aaa:	d1f3      	bne.n	8005a94 <_free_r+0x20>
 8005aac:	6818      	ldr	r0, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	1841      	adds	r1, r0, r1
 8005ab2:	6021      	str	r1, [r4, #0]
 8005ab4:	e7ee      	b.n	8005a94 <_free_r+0x20>
 8005ab6:	001a      	movs	r2, r3
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <_free_r+0x4e>
 8005abe:	42a3      	cmp	r3, r4
 8005ac0:	d9f9      	bls.n	8005ab6 <_free_r+0x42>
 8005ac2:	6811      	ldr	r1, [r2, #0]
 8005ac4:	1850      	adds	r0, r2, r1
 8005ac6:	42a0      	cmp	r0, r4
 8005ac8:	d10b      	bne.n	8005ae2 <_free_r+0x6e>
 8005aca:	6820      	ldr	r0, [r4, #0]
 8005acc:	1809      	adds	r1, r1, r0
 8005ace:	1850      	adds	r0, r2, r1
 8005ad0:	6011      	str	r1, [r2, #0]
 8005ad2:	4283      	cmp	r3, r0
 8005ad4:	d1e0      	bne.n	8005a98 <_free_r+0x24>
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	1841      	adds	r1, r0, r1
 8005adc:	6011      	str	r1, [r2, #0]
 8005ade:	6053      	str	r3, [r2, #4]
 8005ae0:	e7da      	b.n	8005a98 <_free_r+0x24>
 8005ae2:	42a0      	cmp	r0, r4
 8005ae4:	d902      	bls.n	8005aec <_free_r+0x78>
 8005ae6:	230c      	movs	r3, #12
 8005ae8:	602b      	str	r3, [r5, #0]
 8005aea:	e7d5      	b.n	8005a98 <_free_r+0x24>
 8005aec:	6821      	ldr	r1, [r4, #0]
 8005aee:	1860      	adds	r0, r4, r1
 8005af0:	4283      	cmp	r3, r0
 8005af2:	d103      	bne.n	8005afc <_free_r+0x88>
 8005af4:	6818      	ldr	r0, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	1841      	adds	r1, r0, r1
 8005afa:	6021      	str	r1, [r4, #0]
 8005afc:	6063      	str	r3, [r4, #4]
 8005afe:	6054      	str	r4, [r2, #4]
 8005b00:	e7ca      	b.n	8005a98 <_free_r+0x24>
 8005b02:	46c0      	nop			; (mov r8, r8)
 8005b04:	200002b8 	.word	0x200002b8

08005b08 <sbrk_aligned>:
 8005b08:	b570      	push	{r4, r5, r6, lr}
 8005b0a:	4e0f      	ldr	r6, [pc, #60]	; (8005b48 <sbrk_aligned+0x40>)
 8005b0c:	000d      	movs	r5, r1
 8005b0e:	6831      	ldr	r1, [r6, #0]
 8005b10:	0004      	movs	r4, r0
 8005b12:	2900      	cmp	r1, #0
 8005b14:	d102      	bne.n	8005b1c <sbrk_aligned+0x14>
 8005b16:	f000 f88f 	bl	8005c38 <_sbrk_r>
 8005b1a:	6030      	str	r0, [r6, #0]
 8005b1c:	0029      	movs	r1, r5
 8005b1e:	0020      	movs	r0, r4
 8005b20:	f000 f88a 	bl	8005c38 <_sbrk_r>
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	d00a      	beq.n	8005b3e <sbrk_aligned+0x36>
 8005b28:	2303      	movs	r3, #3
 8005b2a:	1cc5      	adds	r5, r0, #3
 8005b2c:	439d      	bics	r5, r3
 8005b2e:	42a8      	cmp	r0, r5
 8005b30:	d007      	beq.n	8005b42 <sbrk_aligned+0x3a>
 8005b32:	1a29      	subs	r1, r5, r0
 8005b34:	0020      	movs	r0, r4
 8005b36:	f000 f87f 	bl	8005c38 <_sbrk_r>
 8005b3a:	1c43      	adds	r3, r0, #1
 8005b3c:	d101      	bne.n	8005b42 <sbrk_aligned+0x3a>
 8005b3e:	2501      	movs	r5, #1
 8005b40:	426d      	negs	r5, r5
 8005b42:	0028      	movs	r0, r5
 8005b44:	bd70      	pop	{r4, r5, r6, pc}
 8005b46:	46c0      	nop			; (mov r8, r8)
 8005b48:	200002bc 	.word	0x200002bc

08005b4c <_malloc_r>:
 8005b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b4e:	2203      	movs	r2, #3
 8005b50:	1ccb      	adds	r3, r1, #3
 8005b52:	4393      	bics	r3, r2
 8005b54:	3308      	adds	r3, #8
 8005b56:	0006      	movs	r6, r0
 8005b58:	001f      	movs	r7, r3
 8005b5a:	2b0c      	cmp	r3, #12
 8005b5c:	d232      	bcs.n	8005bc4 <_malloc_r+0x78>
 8005b5e:	270c      	movs	r7, #12
 8005b60:	42b9      	cmp	r1, r7
 8005b62:	d831      	bhi.n	8005bc8 <_malloc_r+0x7c>
 8005b64:	0030      	movs	r0, r6
 8005b66:	f000 f899 	bl	8005c9c <__malloc_lock>
 8005b6a:	4d32      	ldr	r5, [pc, #200]	; (8005c34 <_malloc_r+0xe8>)
 8005b6c:	682b      	ldr	r3, [r5, #0]
 8005b6e:	001c      	movs	r4, r3
 8005b70:	2c00      	cmp	r4, #0
 8005b72:	d12e      	bne.n	8005bd2 <_malloc_r+0x86>
 8005b74:	0039      	movs	r1, r7
 8005b76:	0030      	movs	r0, r6
 8005b78:	f7ff ffc6 	bl	8005b08 <sbrk_aligned>
 8005b7c:	0004      	movs	r4, r0
 8005b7e:	1c43      	adds	r3, r0, #1
 8005b80:	d11e      	bne.n	8005bc0 <_malloc_r+0x74>
 8005b82:	682c      	ldr	r4, [r5, #0]
 8005b84:	0025      	movs	r5, r4
 8005b86:	2d00      	cmp	r5, #0
 8005b88:	d14a      	bne.n	8005c20 <_malloc_r+0xd4>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	0029      	movs	r1, r5
 8005b8e:	18e3      	adds	r3, r4, r3
 8005b90:	0030      	movs	r0, r6
 8005b92:	9301      	str	r3, [sp, #4]
 8005b94:	f000 f850 	bl	8005c38 <_sbrk_r>
 8005b98:	9b01      	ldr	r3, [sp, #4]
 8005b9a:	4283      	cmp	r3, r0
 8005b9c:	d143      	bne.n	8005c26 <_malloc_r+0xda>
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	3703      	adds	r7, #3
 8005ba2:	1aff      	subs	r7, r7, r3
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	439f      	bics	r7, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	2f0c      	cmp	r7, #12
 8005bac:	d200      	bcs.n	8005bb0 <_malloc_r+0x64>
 8005bae:	270c      	movs	r7, #12
 8005bb0:	0039      	movs	r1, r7
 8005bb2:	0030      	movs	r0, r6
 8005bb4:	f7ff ffa8 	bl	8005b08 <sbrk_aligned>
 8005bb8:	1c43      	adds	r3, r0, #1
 8005bba:	d034      	beq.n	8005c26 <_malloc_r+0xda>
 8005bbc:	6823      	ldr	r3, [r4, #0]
 8005bbe:	19df      	adds	r7, r3, r7
 8005bc0:	6027      	str	r7, [r4, #0]
 8005bc2:	e013      	b.n	8005bec <_malloc_r+0xa0>
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	dacb      	bge.n	8005b60 <_malloc_r+0x14>
 8005bc8:	230c      	movs	r3, #12
 8005bca:	2500      	movs	r5, #0
 8005bcc:	6033      	str	r3, [r6, #0]
 8005bce:	0028      	movs	r0, r5
 8005bd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005bd2:	6822      	ldr	r2, [r4, #0]
 8005bd4:	1bd1      	subs	r1, r2, r7
 8005bd6:	d420      	bmi.n	8005c1a <_malloc_r+0xce>
 8005bd8:	290b      	cmp	r1, #11
 8005bda:	d917      	bls.n	8005c0c <_malloc_r+0xc0>
 8005bdc:	19e2      	adds	r2, r4, r7
 8005bde:	6027      	str	r7, [r4, #0]
 8005be0:	42a3      	cmp	r3, r4
 8005be2:	d111      	bne.n	8005c08 <_malloc_r+0xbc>
 8005be4:	602a      	str	r2, [r5, #0]
 8005be6:	6863      	ldr	r3, [r4, #4]
 8005be8:	6011      	str	r1, [r2, #0]
 8005bea:	6053      	str	r3, [r2, #4]
 8005bec:	0030      	movs	r0, r6
 8005bee:	0025      	movs	r5, r4
 8005bf0:	f000 f85c 	bl	8005cac <__malloc_unlock>
 8005bf4:	2207      	movs	r2, #7
 8005bf6:	350b      	adds	r5, #11
 8005bf8:	1d23      	adds	r3, r4, #4
 8005bfa:	4395      	bics	r5, r2
 8005bfc:	1aea      	subs	r2, r5, r3
 8005bfe:	429d      	cmp	r5, r3
 8005c00:	d0e5      	beq.n	8005bce <_malloc_r+0x82>
 8005c02:	1b5b      	subs	r3, r3, r5
 8005c04:	50a3      	str	r3, [r4, r2]
 8005c06:	e7e2      	b.n	8005bce <_malloc_r+0x82>
 8005c08:	605a      	str	r2, [r3, #4]
 8005c0a:	e7ec      	b.n	8005be6 <_malloc_r+0x9a>
 8005c0c:	6862      	ldr	r2, [r4, #4]
 8005c0e:	42a3      	cmp	r3, r4
 8005c10:	d101      	bne.n	8005c16 <_malloc_r+0xca>
 8005c12:	602a      	str	r2, [r5, #0]
 8005c14:	e7ea      	b.n	8005bec <_malloc_r+0xa0>
 8005c16:	605a      	str	r2, [r3, #4]
 8005c18:	e7e8      	b.n	8005bec <_malloc_r+0xa0>
 8005c1a:	0023      	movs	r3, r4
 8005c1c:	6864      	ldr	r4, [r4, #4]
 8005c1e:	e7a7      	b.n	8005b70 <_malloc_r+0x24>
 8005c20:	002c      	movs	r4, r5
 8005c22:	686d      	ldr	r5, [r5, #4]
 8005c24:	e7af      	b.n	8005b86 <_malloc_r+0x3a>
 8005c26:	230c      	movs	r3, #12
 8005c28:	0030      	movs	r0, r6
 8005c2a:	6033      	str	r3, [r6, #0]
 8005c2c:	f000 f83e 	bl	8005cac <__malloc_unlock>
 8005c30:	e7cd      	b.n	8005bce <_malloc_r+0x82>
 8005c32:	46c0      	nop			; (mov r8, r8)
 8005c34:	200002b8 	.word	0x200002b8

08005c38 <_sbrk_r>:
 8005c38:	2300      	movs	r3, #0
 8005c3a:	b570      	push	{r4, r5, r6, lr}
 8005c3c:	4d06      	ldr	r5, [pc, #24]	; (8005c58 <_sbrk_r+0x20>)
 8005c3e:	0004      	movs	r4, r0
 8005c40:	0008      	movs	r0, r1
 8005c42:	602b      	str	r3, [r5, #0]
 8005c44:	f7fd f85a 	bl	8002cfc <_sbrk>
 8005c48:	1c43      	adds	r3, r0, #1
 8005c4a:	d103      	bne.n	8005c54 <_sbrk_r+0x1c>
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d000      	beq.n	8005c54 <_sbrk_r+0x1c>
 8005c52:	6023      	str	r3, [r4, #0]
 8005c54:	bd70      	pop	{r4, r5, r6, pc}
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	200002c0 	.word	0x200002c0

08005c5c <siprintf>:
 8005c5c:	b40e      	push	{r1, r2, r3}
 8005c5e:	b500      	push	{lr}
 8005c60:	490b      	ldr	r1, [pc, #44]	; (8005c90 <siprintf+0x34>)
 8005c62:	b09c      	sub	sp, #112	; 0x70
 8005c64:	ab1d      	add	r3, sp, #116	; 0x74
 8005c66:	9002      	str	r0, [sp, #8]
 8005c68:	9006      	str	r0, [sp, #24]
 8005c6a:	9107      	str	r1, [sp, #28]
 8005c6c:	9104      	str	r1, [sp, #16]
 8005c6e:	4809      	ldr	r0, [pc, #36]	; (8005c94 <siprintf+0x38>)
 8005c70:	4909      	ldr	r1, [pc, #36]	; (8005c98 <siprintf+0x3c>)
 8005c72:	cb04      	ldmia	r3!, {r2}
 8005c74:	9105      	str	r1, [sp, #20]
 8005c76:	6800      	ldr	r0, [r0, #0]
 8005c78:	a902      	add	r1, sp, #8
 8005c7a:	9301      	str	r3, [sp, #4]
 8005c7c:	f000 f880 	bl	8005d80 <_svfiprintf_r>
 8005c80:	2300      	movs	r3, #0
 8005c82:	9a02      	ldr	r2, [sp, #8]
 8005c84:	7013      	strb	r3, [r2, #0]
 8005c86:	b01c      	add	sp, #112	; 0x70
 8005c88:	bc08      	pop	{r3}
 8005c8a:	b003      	add	sp, #12
 8005c8c:	4718      	bx	r3
 8005c8e:	46c0      	nop			; (mov r8, r8)
 8005c90:	7fffffff 	.word	0x7fffffff
 8005c94:	2000000c 	.word	0x2000000c
 8005c98:	ffff0208 	.word	0xffff0208

08005c9c <__malloc_lock>:
 8005c9c:	b510      	push	{r4, lr}
 8005c9e:	4802      	ldr	r0, [pc, #8]	; (8005ca8 <__malloc_lock+0xc>)
 8005ca0:	f000 faf0 	bl	8006284 <__retarget_lock_acquire_recursive>
 8005ca4:	bd10      	pop	{r4, pc}
 8005ca6:	46c0      	nop			; (mov r8, r8)
 8005ca8:	200002c4 	.word	0x200002c4

08005cac <__malloc_unlock>:
 8005cac:	b510      	push	{r4, lr}
 8005cae:	4802      	ldr	r0, [pc, #8]	; (8005cb8 <__malloc_unlock+0xc>)
 8005cb0:	f000 fae9 	bl	8006286 <__retarget_lock_release_recursive>
 8005cb4:	bd10      	pop	{r4, pc}
 8005cb6:	46c0      	nop			; (mov r8, r8)
 8005cb8:	200002c4 	.word	0x200002c4

08005cbc <__ssputs_r>:
 8005cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cbe:	688e      	ldr	r6, [r1, #8]
 8005cc0:	b085      	sub	sp, #20
 8005cc2:	0007      	movs	r7, r0
 8005cc4:	000c      	movs	r4, r1
 8005cc6:	9203      	str	r2, [sp, #12]
 8005cc8:	9301      	str	r3, [sp, #4]
 8005cca:	429e      	cmp	r6, r3
 8005ccc:	d83c      	bhi.n	8005d48 <__ssputs_r+0x8c>
 8005cce:	2390      	movs	r3, #144	; 0x90
 8005cd0:	898a      	ldrh	r2, [r1, #12]
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	421a      	tst	r2, r3
 8005cd6:	d034      	beq.n	8005d42 <__ssputs_r+0x86>
 8005cd8:	6909      	ldr	r1, [r1, #16]
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	6960      	ldr	r0, [r4, #20]
 8005cde:	1a5b      	subs	r3, r3, r1
 8005ce0:	9302      	str	r3, [sp, #8]
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	4343      	muls	r3, r0
 8005ce6:	0fdd      	lsrs	r5, r3, #31
 8005ce8:	18ed      	adds	r5, r5, r3
 8005cea:	9b01      	ldr	r3, [sp, #4]
 8005cec:	9802      	ldr	r0, [sp, #8]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	181b      	adds	r3, r3, r0
 8005cf2:	106d      	asrs	r5, r5, #1
 8005cf4:	42ab      	cmp	r3, r5
 8005cf6:	d900      	bls.n	8005cfa <__ssputs_r+0x3e>
 8005cf8:	001d      	movs	r5, r3
 8005cfa:	0553      	lsls	r3, r2, #21
 8005cfc:	d532      	bpl.n	8005d64 <__ssputs_r+0xa8>
 8005cfe:	0029      	movs	r1, r5
 8005d00:	0038      	movs	r0, r7
 8005d02:	f7ff ff23 	bl	8005b4c <_malloc_r>
 8005d06:	1e06      	subs	r6, r0, #0
 8005d08:	d109      	bne.n	8005d1e <__ssputs_r+0x62>
 8005d0a:	230c      	movs	r3, #12
 8005d0c:	603b      	str	r3, [r7, #0]
 8005d0e:	2340      	movs	r3, #64	; 0x40
 8005d10:	2001      	movs	r0, #1
 8005d12:	89a2      	ldrh	r2, [r4, #12]
 8005d14:	4240      	negs	r0, r0
 8005d16:	4313      	orrs	r3, r2
 8005d18:	81a3      	strh	r3, [r4, #12]
 8005d1a:	b005      	add	sp, #20
 8005d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d1e:	9a02      	ldr	r2, [sp, #8]
 8005d20:	6921      	ldr	r1, [r4, #16]
 8005d22:	f000 fabc 	bl	800629e <memcpy>
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	4a14      	ldr	r2, [pc, #80]	; (8005d7c <__ssputs_r+0xc0>)
 8005d2a:	401a      	ands	r2, r3
 8005d2c:	2380      	movs	r3, #128	; 0x80
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	81a3      	strh	r3, [r4, #12]
 8005d32:	9b02      	ldr	r3, [sp, #8]
 8005d34:	6126      	str	r6, [r4, #16]
 8005d36:	18f6      	adds	r6, r6, r3
 8005d38:	6026      	str	r6, [r4, #0]
 8005d3a:	6165      	str	r5, [r4, #20]
 8005d3c:	9e01      	ldr	r6, [sp, #4]
 8005d3e:	1aed      	subs	r5, r5, r3
 8005d40:	60a5      	str	r5, [r4, #8]
 8005d42:	9b01      	ldr	r3, [sp, #4]
 8005d44:	429e      	cmp	r6, r3
 8005d46:	d900      	bls.n	8005d4a <__ssputs_r+0x8e>
 8005d48:	9e01      	ldr	r6, [sp, #4]
 8005d4a:	0032      	movs	r2, r6
 8005d4c:	9903      	ldr	r1, [sp, #12]
 8005d4e:	6820      	ldr	r0, [r4, #0]
 8005d50:	f000 faae 	bl	80062b0 <memmove>
 8005d54:	68a3      	ldr	r3, [r4, #8]
 8005d56:	2000      	movs	r0, #0
 8005d58:	1b9b      	subs	r3, r3, r6
 8005d5a:	60a3      	str	r3, [r4, #8]
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	199e      	adds	r6, r3, r6
 8005d60:	6026      	str	r6, [r4, #0]
 8005d62:	e7da      	b.n	8005d1a <__ssputs_r+0x5e>
 8005d64:	002a      	movs	r2, r5
 8005d66:	0038      	movs	r0, r7
 8005d68:	f000 fab5 	bl	80062d6 <_realloc_r>
 8005d6c:	1e06      	subs	r6, r0, #0
 8005d6e:	d1e0      	bne.n	8005d32 <__ssputs_r+0x76>
 8005d70:	0038      	movs	r0, r7
 8005d72:	6921      	ldr	r1, [r4, #16]
 8005d74:	f7ff fe7e 	bl	8005a74 <_free_r>
 8005d78:	e7c7      	b.n	8005d0a <__ssputs_r+0x4e>
 8005d7a:	46c0      	nop			; (mov r8, r8)
 8005d7c:	fffffb7f 	.word	0xfffffb7f

08005d80 <_svfiprintf_r>:
 8005d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d82:	b0a1      	sub	sp, #132	; 0x84
 8005d84:	9003      	str	r0, [sp, #12]
 8005d86:	001d      	movs	r5, r3
 8005d88:	898b      	ldrh	r3, [r1, #12]
 8005d8a:	000f      	movs	r7, r1
 8005d8c:	0016      	movs	r6, r2
 8005d8e:	061b      	lsls	r3, r3, #24
 8005d90:	d511      	bpl.n	8005db6 <_svfiprintf_r+0x36>
 8005d92:	690b      	ldr	r3, [r1, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10e      	bne.n	8005db6 <_svfiprintf_r+0x36>
 8005d98:	2140      	movs	r1, #64	; 0x40
 8005d9a:	f7ff fed7 	bl	8005b4c <_malloc_r>
 8005d9e:	6038      	str	r0, [r7, #0]
 8005da0:	6138      	str	r0, [r7, #16]
 8005da2:	2800      	cmp	r0, #0
 8005da4:	d105      	bne.n	8005db2 <_svfiprintf_r+0x32>
 8005da6:	230c      	movs	r3, #12
 8005da8:	9a03      	ldr	r2, [sp, #12]
 8005daa:	3801      	subs	r0, #1
 8005dac:	6013      	str	r3, [r2, #0]
 8005dae:	b021      	add	sp, #132	; 0x84
 8005db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005db2:	2340      	movs	r3, #64	; 0x40
 8005db4:	617b      	str	r3, [r7, #20]
 8005db6:	2300      	movs	r3, #0
 8005db8:	ac08      	add	r4, sp, #32
 8005dba:	6163      	str	r3, [r4, #20]
 8005dbc:	3320      	adds	r3, #32
 8005dbe:	7663      	strb	r3, [r4, #25]
 8005dc0:	3310      	adds	r3, #16
 8005dc2:	76a3      	strb	r3, [r4, #26]
 8005dc4:	9507      	str	r5, [sp, #28]
 8005dc6:	0035      	movs	r5, r6
 8005dc8:	782b      	ldrb	r3, [r5, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <_svfiprintf_r+0x52>
 8005dce:	2b25      	cmp	r3, #37	; 0x25
 8005dd0:	d147      	bne.n	8005e62 <_svfiprintf_r+0xe2>
 8005dd2:	1bab      	subs	r3, r5, r6
 8005dd4:	9305      	str	r3, [sp, #20]
 8005dd6:	42b5      	cmp	r5, r6
 8005dd8:	d00c      	beq.n	8005df4 <_svfiprintf_r+0x74>
 8005dda:	0032      	movs	r2, r6
 8005ddc:	0039      	movs	r1, r7
 8005dde:	9803      	ldr	r0, [sp, #12]
 8005de0:	f7ff ff6c 	bl	8005cbc <__ssputs_r>
 8005de4:	1c43      	adds	r3, r0, #1
 8005de6:	d100      	bne.n	8005dea <_svfiprintf_r+0x6a>
 8005de8:	e0ae      	b.n	8005f48 <_svfiprintf_r+0x1c8>
 8005dea:	6962      	ldr	r2, [r4, #20]
 8005dec:	9b05      	ldr	r3, [sp, #20]
 8005dee:	4694      	mov	ip, r2
 8005df0:	4463      	add	r3, ip
 8005df2:	6163      	str	r3, [r4, #20]
 8005df4:	782b      	ldrb	r3, [r5, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d100      	bne.n	8005dfc <_svfiprintf_r+0x7c>
 8005dfa:	e0a5      	b.n	8005f48 <_svfiprintf_r+0x1c8>
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	2300      	movs	r3, #0
 8005e00:	4252      	negs	r2, r2
 8005e02:	6062      	str	r2, [r4, #4]
 8005e04:	a904      	add	r1, sp, #16
 8005e06:	3254      	adds	r2, #84	; 0x54
 8005e08:	1852      	adds	r2, r2, r1
 8005e0a:	1c6e      	adds	r6, r5, #1
 8005e0c:	6023      	str	r3, [r4, #0]
 8005e0e:	60e3      	str	r3, [r4, #12]
 8005e10:	60a3      	str	r3, [r4, #8]
 8005e12:	7013      	strb	r3, [r2, #0]
 8005e14:	65a3      	str	r3, [r4, #88]	; 0x58
 8005e16:	2205      	movs	r2, #5
 8005e18:	7831      	ldrb	r1, [r6, #0]
 8005e1a:	4854      	ldr	r0, [pc, #336]	; (8005f6c <_svfiprintf_r+0x1ec>)
 8005e1c:	f000 fa34 	bl	8006288 <memchr>
 8005e20:	1c75      	adds	r5, r6, #1
 8005e22:	2800      	cmp	r0, #0
 8005e24:	d11f      	bne.n	8005e66 <_svfiprintf_r+0xe6>
 8005e26:	6822      	ldr	r2, [r4, #0]
 8005e28:	06d3      	lsls	r3, r2, #27
 8005e2a:	d504      	bpl.n	8005e36 <_svfiprintf_r+0xb6>
 8005e2c:	2353      	movs	r3, #83	; 0x53
 8005e2e:	a904      	add	r1, sp, #16
 8005e30:	185b      	adds	r3, r3, r1
 8005e32:	2120      	movs	r1, #32
 8005e34:	7019      	strb	r1, [r3, #0]
 8005e36:	0713      	lsls	r3, r2, #28
 8005e38:	d504      	bpl.n	8005e44 <_svfiprintf_r+0xc4>
 8005e3a:	2353      	movs	r3, #83	; 0x53
 8005e3c:	a904      	add	r1, sp, #16
 8005e3e:	185b      	adds	r3, r3, r1
 8005e40:	212b      	movs	r1, #43	; 0x2b
 8005e42:	7019      	strb	r1, [r3, #0]
 8005e44:	7833      	ldrb	r3, [r6, #0]
 8005e46:	2b2a      	cmp	r3, #42	; 0x2a
 8005e48:	d016      	beq.n	8005e78 <_svfiprintf_r+0xf8>
 8005e4a:	0035      	movs	r5, r6
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	200a      	movs	r0, #10
 8005e50:	68e3      	ldr	r3, [r4, #12]
 8005e52:	782a      	ldrb	r2, [r5, #0]
 8005e54:	1c6e      	adds	r6, r5, #1
 8005e56:	3a30      	subs	r2, #48	; 0x30
 8005e58:	2a09      	cmp	r2, #9
 8005e5a:	d94e      	bls.n	8005efa <_svfiprintf_r+0x17a>
 8005e5c:	2900      	cmp	r1, #0
 8005e5e:	d111      	bne.n	8005e84 <_svfiprintf_r+0x104>
 8005e60:	e017      	b.n	8005e92 <_svfiprintf_r+0x112>
 8005e62:	3501      	adds	r5, #1
 8005e64:	e7b0      	b.n	8005dc8 <_svfiprintf_r+0x48>
 8005e66:	4b41      	ldr	r3, [pc, #260]	; (8005f6c <_svfiprintf_r+0x1ec>)
 8005e68:	6822      	ldr	r2, [r4, #0]
 8005e6a:	1ac0      	subs	r0, r0, r3
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	4083      	lsls	r3, r0
 8005e70:	4313      	orrs	r3, r2
 8005e72:	002e      	movs	r6, r5
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	e7ce      	b.n	8005e16 <_svfiprintf_r+0x96>
 8005e78:	9b07      	ldr	r3, [sp, #28]
 8005e7a:	1d19      	adds	r1, r3, #4
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	9107      	str	r1, [sp, #28]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	db01      	blt.n	8005e88 <_svfiprintf_r+0x108>
 8005e84:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e86:	e004      	b.n	8005e92 <_svfiprintf_r+0x112>
 8005e88:	425b      	negs	r3, r3
 8005e8a:	60e3      	str	r3, [r4, #12]
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	782b      	ldrb	r3, [r5, #0]
 8005e94:	2b2e      	cmp	r3, #46	; 0x2e
 8005e96:	d10a      	bne.n	8005eae <_svfiprintf_r+0x12e>
 8005e98:	786b      	ldrb	r3, [r5, #1]
 8005e9a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e9c:	d135      	bne.n	8005f0a <_svfiprintf_r+0x18a>
 8005e9e:	9b07      	ldr	r3, [sp, #28]
 8005ea0:	3502      	adds	r5, #2
 8005ea2:	1d1a      	adds	r2, r3, #4
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	9207      	str	r2, [sp, #28]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	db2b      	blt.n	8005f04 <_svfiprintf_r+0x184>
 8005eac:	9309      	str	r3, [sp, #36]	; 0x24
 8005eae:	4e30      	ldr	r6, [pc, #192]	; (8005f70 <_svfiprintf_r+0x1f0>)
 8005eb0:	2203      	movs	r2, #3
 8005eb2:	0030      	movs	r0, r6
 8005eb4:	7829      	ldrb	r1, [r5, #0]
 8005eb6:	f000 f9e7 	bl	8006288 <memchr>
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	d006      	beq.n	8005ecc <_svfiprintf_r+0x14c>
 8005ebe:	2340      	movs	r3, #64	; 0x40
 8005ec0:	1b80      	subs	r0, r0, r6
 8005ec2:	4083      	lsls	r3, r0
 8005ec4:	6822      	ldr	r2, [r4, #0]
 8005ec6:	3501      	adds	r5, #1
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	6023      	str	r3, [r4, #0]
 8005ecc:	7829      	ldrb	r1, [r5, #0]
 8005ece:	2206      	movs	r2, #6
 8005ed0:	4828      	ldr	r0, [pc, #160]	; (8005f74 <_svfiprintf_r+0x1f4>)
 8005ed2:	1c6e      	adds	r6, r5, #1
 8005ed4:	7621      	strb	r1, [r4, #24]
 8005ed6:	f000 f9d7 	bl	8006288 <memchr>
 8005eda:	2800      	cmp	r0, #0
 8005edc:	d03c      	beq.n	8005f58 <_svfiprintf_r+0x1d8>
 8005ede:	4b26      	ldr	r3, [pc, #152]	; (8005f78 <_svfiprintf_r+0x1f8>)
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d125      	bne.n	8005f30 <_svfiprintf_r+0x1b0>
 8005ee4:	2207      	movs	r2, #7
 8005ee6:	9b07      	ldr	r3, [sp, #28]
 8005ee8:	3307      	adds	r3, #7
 8005eea:	4393      	bics	r3, r2
 8005eec:	3308      	adds	r3, #8
 8005eee:	9307      	str	r3, [sp, #28]
 8005ef0:	6963      	ldr	r3, [r4, #20]
 8005ef2:	9a04      	ldr	r2, [sp, #16]
 8005ef4:	189b      	adds	r3, r3, r2
 8005ef6:	6163      	str	r3, [r4, #20]
 8005ef8:	e765      	b.n	8005dc6 <_svfiprintf_r+0x46>
 8005efa:	4343      	muls	r3, r0
 8005efc:	0035      	movs	r5, r6
 8005efe:	2101      	movs	r1, #1
 8005f00:	189b      	adds	r3, r3, r2
 8005f02:	e7a6      	b.n	8005e52 <_svfiprintf_r+0xd2>
 8005f04:	2301      	movs	r3, #1
 8005f06:	425b      	negs	r3, r3
 8005f08:	e7d0      	b.n	8005eac <_svfiprintf_r+0x12c>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	200a      	movs	r0, #10
 8005f0e:	001a      	movs	r2, r3
 8005f10:	3501      	adds	r5, #1
 8005f12:	6063      	str	r3, [r4, #4]
 8005f14:	7829      	ldrb	r1, [r5, #0]
 8005f16:	1c6e      	adds	r6, r5, #1
 8005f18:	3930      	subs	r1, #48	; 0x30
 8005f1a:	2909      	cmp	r1, #9
 8005f1c:	d903      	bls.n	8005f26 <_svfiprintf_r+0x1a6>
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0c5      	beq.n	8005eae <_svfiprintf_r+0x12e>
 8005f22:	9209      	str	r2, [sp, #36]	; 0x24
 8005f24:	e7c3      	b.n	8005eae <_svfiprintf_r+0x12e>
 8005f26:	4342      	muls	r2, r0
 8005f28:	0035      	movs	r5, r6
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	1852      	adds	r2, r2, r1
 8005f2e:	e7f1      	b.n	8005f14 <_svfiprintf_r+0x194>
 8005f30:	ab07      	add	r3, sp, #28
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	003a      	movs	r2, r7
 8005f36:	0021      	movs	r1, r4
 8005f38:	4b10      	ldr	r3, [pc, #64]	; (8005f7c <_svfiprintf_r+0x1fc>)
 8005f3a:	9803      	ldr	r0, [sp, #12]
 8005f3c:	e000      	b.n	8005f40 <_svfiprintf_r+0x1c0>
 8005f3e:	bf00      	nop
 8005f40:	9004      	str	r0, [sp, #16]
 8005f42:	9b04      	ldr	r3, [sp, #16]
 8005f44:	3301      	adds	r3, #1
 8005f46:	d1d3      	bne.n	8005ef0 <_svfiprintf_r+0x170>
 8005f48:	89bb      	ldrh	r3, [r7, #12]
 8005f4a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005f4c:	065b      	lsls	r3, r3, #25
 8005f4e:	d400      	bmi.n	8005f52 <_svfiprintf_r+0x1d2>
 8005f50:	e72d      	b.n	8005dae <_svfiprintf_r+0x2e>
 8005f52:	2001      	movs	r0, #1
 8005f54:	4240      	negs	r0, r0
 8005f56:	e72a      	b.n	8005dae <_svfiprintf_r+0x2e>
 8005f58:	ab07      	add	r3, sp, #28
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	003a      	movs	r2, r7
 8005f5e:	0021      	movs	r1, r4
 8005f60:	4b06      	ldr	r3, [pc, #24]	; (8005f7c <_svfiprintf_r+0x1fc>)
 8005f62:	9803      	ldr	r0, [sp, #12]
 8005f64:	f000 f87c 	bl	8006060 <_printf_i>
 8005f68:	e7ea      	b.n	8005f40 <_svfiprintf_r+0x1c0>
 8005f6a:	46c0      	nop			; (mov r8, r8)
 8005f6c:	08006584 	.word	0x08006584
 8005f70:	0800658a 	.word	0x0800658a
 8005f74:	0800658e 	.word	0x0800658e
 8005f78:	00000000 	.word	0x00000000
 8005f7c:	08005cbd 	.word	0x08005cbd

08005f80 <_printf_common>:
 8005f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f82:	0015      	movs	r5, r2
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	688a      	ldr	r2, [r1, #8]
 8005f88:	690b      	ldr	r3, [r1, #16]
 8005f8a:	000c      	movs	r4, r1
 8005f8c:	9000      	str	r0, [sp, #0]
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	da00      	bge.n	8005f94 <_printf_common+0x14>
 8005f92:	0013      	movs	r3, r2
 8005f94:	0022      	movs	r2, r4
 8005f96:	602b      	str	r3, [r5, #0]
 8005f98:	3243      	adds	r2, #67	; 0x43
 8005f9a:	7812      	ldrb	r2, [r2, #0]
 8005f9c:	2a00      	cmp	r2, #0
 8005f9e:	d001      	beq.n	8005fa4 <_printf_common+0x24>
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	602b      	str	r3, [r5, #0]
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	069b      	lsls	r3, r3, #26
 8005fa8:	d502      	bpl.n	8005fb0 <_printf_common+0x30>
 8005faa:	682b      	ldr	r3, [r5, #0]
 8005fac:	3302      	adds	r3, #2
 8005fae:	602b      	str	r3, [r5, #0]
 8005fb0:	6822      	ldr	r2, [r4, #0]
 8005fb2:	2306      	movs	r3, #6
 8005fb4:	0017      	movs	r7, r2
 8005fb6:	401f      	ands	r7, r3
 8005fb8:	421a      	tst	r2, r3
 8005fba:	d027      	beq.n	800600c <_printf_common+0x8c>
 8005fbc:	0023      	movs	r3, r4
 8005fbe:	3343      	adds	r3, #67	; 0x43
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	1e5a      	subs	r2, r3, #1
 8005fc4:	4193      	sbcs	r3, r2
 8005fc6:	6822      	ldr	r2, [r4, #0]
 8005fc8:	0692      	lsls	r2, r2, #26
 8005fca:	d430      	bmi.n	800602e <_printf_common+0xae>
 8005fcc:	0022      	movs	r2, r4
 8005fce:	9901      	ldr	r1, [sp, #4]
 8005fd0:	9800      	ldr	r0, [sp, #0]
 8005fd2:	9e08      	ldr	r6, [sp, #32]
 8005fd4:	3243      	adds	r2, #67	; 0x43
 8005fd6:	47b0      	blx	r6
 8005fd8:	1c43      	adds	r3, r0, #1
 8005fda:	d025      	beq.n	8006028 <_printf_common+0xa8>
 8005fdc:	2306      	movs	r3, #6
 8005fde:	6820      	ldr	r0, [r4, #0]
 8005fe0:	682a      	ldr	r2, [r5, #0]
 8005fe2:	68e1      	ldr	r1, [r4, #12]
 8005fe4:	2500      	movs	r5, #0
 8005fe6:	4003      	ands	r3, r0
 8005fe8:	2b04      	cmp	r3, #4
 8005fea:	d103      	bne.n	8005ff4 <_printf_common+0x74>
 8005fec:	1a8d      	subs	r5, r1, r2
 8005fee:	43eb      	mvns	r3, r5
 8005ff0:	17db      	asrs	r3, r3, #31
 8005ff2:	401d      	ands	r5, r3
 8005ff4:	68a3      	ldr	r3, [r4, #8]
 8005ff6:	6922      	ldr	r2, [r4, #16]
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	dd01      	ble.n	8006000 <_printf_common+0x80>
 8005ffc:	1a9b      	subs	r3, r3, r2
 8005ffe:	18ed      	adds	r5, r5, r3
 8006000:	2700      	movs	r7, #0
 8006002:	42bd      	cmp	r5, r7
 8006004:	d120      	bne.n	8006048 <_printf_common+0xc8>
 8006006:	2000      	movs	r0, #0
 8006008:	e010      	b.n	800602c <_printf_common+0xac>
 800600a:	3701      	adds	r7, #1
 800600c:	68e3      	ldr	r3, [r4, #12]
 800600e:	682a      	ldr	r2, [r5, #0]
 8006010:	1a9b      	subs	r3, r3, r2
 8006012:	42bb      	cmp	r3, r7
 8006014:	ddd2      	ble.n	8005fbc <_printf_common+0x3c>
 8006016:	0022      	movs	r2, r4
 8006018:	2301      	movs	r3, #1
 800601a:	9901      	ldr	r1, [sp, #4]
 800601c:	9800      	ldr	r0, [sp, #0]
 800601e:	9e08      	ldr	r6, [sp, #32]
 8006020:	3219      	adds	r2, #25
 8006022:	47b0      	blx	r6
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d1f0      	bne.n	800600a <_printf_common+0x8a>
 8006028:	2001      	movs	r0, #1
 800602a:	4240      	negs	r0, r0
 800602c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800602e:	2030      	movs	r0, #48	; 0x30
 8006030:	18e1      	adds	r1, r4, r3
 8006032:	3143      	adds	r1, #67	; 0x43
 8006034:	7008      	strb	r0, [r1, #0]
 8006036:	0021      	movs	r1, r4
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	3145      	adds	r1, #69	; 0x45
 800603c:	7809      	ldrb	r1, [r1, #0]
 800603e:	18a2      	adds	r2, r4, r2
 8006040:	3243      	adds	r2, #67	; 0x43
 8006042:	3302      	adds	r3, #2
 8006044:	7011      	strb	r1, [r2, #0]
 8006046:	e7c1      	b.n	8005fcc <_printf_common+0x4c>
 8006048:	0022      	movs	r2, r4
 800604a:	2301      	movs	r3, #1
 800604c:	9901      	ldr	r1, [sp, #4]
 800604e:	9800      	ldr	r0, [sp, #0]
 8006050:	9e08      	ldr	r6, [sp, #32]
 8006052:	321a      	adds	r2, #26
 8006054:	47b0      	blx	r6
 8006056:	1c43      	adds	r3, r0, #1
 8006058:	d0e6      	beq.n	8006028 <_printf_common+0xa8>
 800605a:	3701      	adds	r7, #1
 800605c:	e7d1      	b.n	8006002 <_printf_common+0x82>
	...

08006060 <_printf_i>:
 8006060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006062:	b08b      	sub	sp, #44	; 0x2c
 8006064:	9206      	str	r2, [sp, #24]
 8006066:	000a      	movs	r2, r1
 8006068:	3243      	adds	r2, #67	; 0x43
 800606a:	9307      	str	r3, [sp, #28]
 800606c:	9005      	str	r0, [sp, #20]
 800606e:	9204      	str	r2, [sp, #16]
 8006070:	7e0a      	ldrb	r2, [r1, #24]
 8006072:	000c      	movs	r4, r1
 8006074:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006076:	2a78      	cmp	r2, #120	; 0x78
 8006078:	d807      	bhi.n	800608a <_printf_i+0x2a>
 800607a:	2a62      	cmp	r2, #98	; 0x62
 800607c:	d809      	bhi.n	8006092 <_printf_i+0x32>
 800607e:	2a00      	cmp	r2, #0
 8006080:	d100      	bne.n	8006084 <_printf_i+0x24>
 8006082:	e0c1      	b.n	8006208 <_printf_i+0x1a8>
 8006084:	2a58      	cmp	r2, #88	; 0x58
 8006086:	d100      	bne.n	800608a <_printf_i+0x2a>
 8006088:	e08c      	b.n	80061a4 <_printf_i+0x144>
 800608a:	0026      	movs	r6, r4
 800608c:	3642      	adds	r6, #66	; 0x42
 800608e:	7032      	strb	r2, [r6, #0]
 8006090:	e022      	b.n	80060d8 <_printf_i+0x78>
 8006092:	0010      	movs	r0, r2
 8006094:	3863      	subs	r0, #99	; 0x63
 8006096:	2815      	cmp	r0, #21
 8006098:	d8f7      	bhi.n	800608a <_printf_i+0x2a>
 800609a:	f7fa f839 	bl	8000110 <__gnu_thumb1_case_shi>
 800609e:	0016      	.short	0x0016
 80060a0:	fff6001f 	.word	0xfff6001f
 80060a4:	fff6fff6 	.word	0xfff6fff6
 80060a8:	001ffff6 	.word	0x001ffff6
 80060ac:	fff6fff6 	.word	0xfff6fff6
 80060b0:	fff6fff6 	.word	0xfff6fff6
 80060b4:	003600a8 	.word	0x003600a8
 80060b8:	fff6009a 	.word	0xfff6009a
 80060bc:	00b9fff6 	.word	0x00b9fff6
 80060c0:	0036fff6 	.word	0x0036fff6
 80060c4:	fff6fff6 	.word	0xfff6fff6
 80060c8:	009e      	.short	0x009e
 80060ca:	0026      	movs	r6, r4
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	3642      	adds	r6, #66	; 0x42
 80060d0:	1d11      	adds	r1, r2, #4
 80060d2:	6019      	str	r1, [r3, #0]
 80060d4:	6813      	ldr	r3, [r2, #0]
 80060d6:	7033      	strb	r3, [r6, #0]
 80060d8:	2301      	movs	r3, #1
 80060da:	e0a7      	b.n	800622c <_printf_i+0x1cc>
 80060dc:	6808      	ldr	r0, [r1, #0]
 80060de:	6819      	ldr	r1, [r3, #0]
 80060e0:	1d0a      	adds	r2, r1, #4
 80060e2:	0605      	lsls	r5, r0, #24
 80060e4:	d50b      	bpl.n	80060fe <_printf_i+0x9e>
 80060e6:	680d      	ldr	r5, [r1, #0]
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	2d00      	cmp	r5, #0
 80060ec:	da03      	bge.n	80060f6 <_printf_i+0x96>
 80060ee:	232d      	movs	r3, #45	; 0x2d
 80060f0:	9a04      	ldr	r2, [sp, #16]
 80060f2:	426d      	negs	r5, r5
 80060f4:	7013      	strb	r3, [r2, #0]
 80060f6:	4b61      	ldr	r3, [pc, #388]	; (800627c <_printf_i+0x21c>)
 80060f8:	270a      	movs	r7, #10
 80060fa:	9303      	str	r3, [sp, #12]
 80060fc:	e01b      	b.n	8006136 <_printf_i+0xd6>
 80060fe:	680d      	ldr	r5, [r1, #0]
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	0641      	lsls	r1, r0, #25
 8006104:	d5f1      	bpl.n	80060ea <_printf_i+0x8a>
 8006106:	b22d      	sxth	r5, r5
 8006108:	e7ef      	b.n	80060ea <_printf_i+0x8a>
 800610a:	680d      	ldr	r5, [r1, #0]
 800610c:	6819      	ldr	r1, [r3, #0]
 800610e:	1d08      	adds	r0, r1, #4
 8006110:	6018      	str	r0, [r3, #0]
 8006112:	062e      	lsls	r6, r5, #24
 8006114:	d501      	bpl.n	800611a <_printf_i+0xba>
 8006116:	680d      	ldr	r5, [r1, #0]
 8006118:	e003      	b.n	8006122 <_printf_i+0xc2>
 800611a:	066d      	lsls	r5, r5, #25
 800611c:	d5fb      	bpl.n	8006116 <_printf_i+0xb6>
 800611e:	680d      	ldr	r5, [r1, #0]
 8006120:	b2ad      	uxth	r5, r5
 8006122:	4b56      	ldr	r3, [pc, #344]	; (800627c <_printf_i+0x21c>)
 8006124:	2708      	movs	r7, #8
 8006126:	9303      	str	r3, [sp, #12]
 8006128:	2a6f      	cmp	r2, #111	; 0x6f
 800612a:	d000      	beq.n	800612e <_printf_i+0xce>
 800612c:	3702      	adds	r7, #2
 800612e:	0023      	movs	r3, r4
 8006130:	2200      	movs	r2, #0
 8006132:	3343      	adds	r3, #67	; 0x43
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	6863      	ldr	r3, [r4, #4]
 8006138:	60a3      	str	r3, [r4, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	db03      	blt.n	8006146 <_printf_i+0xe6>
 800613e:	2204      	movs	r2, #4
 8006140:	6821      	ldr	r1, [r4, #0]
 8006142:	4391      	bics	r1, r2
 8006144:	6021      	str	r1, [r4, #0]
 8006146:	2d00      	cmp	r5, #0
 8006148:	d102      	bne.n	8006150 <_printf_i+0xf0>
 800614a:	9e04      	ldr	r6, [sp, #16]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00c      	beq.n	800616a <_printf_i+0x10a>
 8006150:	9e04      	ldr	r6, [sp, #16]
 8006152:	0028      	movs	r0, r5
 8006154:	0039      	movs	r1, r7
 8006156:	f7fa f86b 	bl	8000230 <__aeabi_uidivmod>
 800615a:	9b03      	ldr	r3, [sp, #12]
 800615c:	3e01      	subs	r6, #1
 800615e:	5c5b      	ldrb	r3, [r3, r1]
 8006160:	7033      	strb	r3, [r6, #0]
 8006162:	002b      	movs	r3, r5
 8006164:	0005      	movs	r5, r0
 8006166:	429f      	cmp	r7, r3
 8006168:	d9f3      	bls.n	8006152 <_printf_i+0xf2>
 800616a:	2f08      	cmp	r7, #8
 800616c:	d109      	bne.n	8006182 <_printf_i+0x122>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	07db      	lsls	r3, r3, #31
 8006172:	d506      	bpl.n	8006182 <_printf_i+0x122>
 8006174:	6863      	ldr	r3, [r4, #4]
 8006176:	6922      	ldr	r2, [r4, #16]
 8006178:	4293      	cmp	r3, r2
 800617a:	dc02      	bgt.n	8006182 <_printf_i+0x122>
 800617c:	2330      	movs	r3, #48	; 0x30
 800617e:	3e01      	subs	r6, #1
 8006180:	7033      	strb	r3, [r6, #0]
 8006182:	9b04      	ldr	r3, [sp, #16]
 8006184:	1b9b      	subs	r3, r3, r6
 8006186:	6123      	str	r3, [r4, #16]
 8006188:	9b07      	ldr	r3, [sp, #28]
 800618a:	0021      	movs	r1, r4
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	9805      	ldr	r0, [sp, #20]
 8006190:	9b06      	ldr	r3, [sp, #24]
 8006192:	aa09      	add	r2, sp, #36	; 0x24
 8006194:	f7ff fef4 	bl	8005f80 <_printf_common>
 8006198:	1c43      	adds	r3, r0, #1
 800619a:	d14c      	bne.n	8006236 <_printf_i+0x1d6>
 800619c:	2001      	movs	r0, #1
 800619e:	4240      	negs	r0, r0
 80061a0:	b00b      	add	sp, #44	; 0x2c
 80061a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061a4:	3145      	adds	r1, #69	; 0x45
 80061a6:	700a      	strb	r2, [r1, #0]
 80061a8:	4a34      	ldr	r2, [pc, #208]	; (800627c <_printf_i+0x21c>)
 80061aa:	9203      	str	r2, [sp, #12]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	6821      	ldr	r1, [r4, #0]
 80061b0:	ca20      	ldmia	r2!, {r5}
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	0608      	lsls	r0, r1, #24
 80061b6:	d516      	bpl.n	80061e6 <_printf_i+0x186>
 80061b8:	07cb      	lsls	r3, r1, #31
 80061ba:	d502      	bpl.n	80061c2 <_printf_i+0x162>
 80061bc:	2320      	movs	r3, #32
 80061be:	4319      	orrs	r1, r3
 80061c0:	6021      	str	r1, [r4, #0]
 80061c2:	2710      	movs	r7, #16
 80061c4:	2d00      	cmp	r5, #0
 80061c6:	d1b2      	bne.n	800612e <_printf_i+0xce>
 80061c8:	2320      	movs	r3, #32
 80061ca:	6822      	ldr	r2, [r4, #0]
 80061cc:	439a      	bics	r2, r3
 80061ce:	6022      	str	r2, [r4, #0]
 80061d0:	e7ad      	b.n	800612e <_printf_i+0xce>
 80061d2:	2220      	movs	r2, #32
 80061d4:	6809      	ldr	r1, [r1, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	6022      	str	r2, [r4, #0]
 80061da:	0022      	movs	r2, r4
 80061dc:	2178      	movs	r1, #120	; 0x78
 80061de:	3245      	adds	r2, #69	; 0x45
 80061e0:	7011      	strb	r1, [r2, #0]
 80061e2:	4a27      	ldr	r2, [pc, #156]	; (8006280 <_printf_i+0x220>)
 80061e4:	e7e1      	b.n	80061aa <_printf_i+0x14a>
 80061e6:	0648      	lsls	r0, r1, #25
 80061e8:	d5e6      	bpl.n	80061b8 <_printf_i+0x158>
 80061ea:	b2ad      	uxth	r5, r5
 80061ec:	e7e4      	b.n	80061b8 <_printf_i+0x158>
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	680d      	ldr	r5, [r1, #0]
 80061f2:	1d10      	adds	r0, r2, #4
 80061f4:	6949      	ldr	r1, [r1, #20]
 80061f6:	6018      	str	r0, [r3, #0]
 80061f8:	6813      	ldr	r3, [r2, #0]
 80061fa:	062e      	lsls	r6, r5, #24
 80061fc:	d501      	bpl.n	8006202 <_printf_i+0x1a2>
 80061fe:	6019      	str	r1, [r3, #0]
 8006200:	e002      	b.n	8006208 <_printf_i+0x1a8>
 8006202:	066d      	lsls	r5, r5, #25
 8006204:	d5fb      	bpl.n	80061fe <_printf_i+0x19e>
 8006206:	8019      	strh	r1, [r3, #0]
 8006208:	2300      	movs	r3, #0
 800620a:	9e04      	ldr	r6, [sp, #16]
 800620c:	6123      	str	r3, [r4, #16]
 800620e:	e7bb      	b.n	8006188 <_printf_i+0x128>
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	1d11      	adds	r1, r2, #4
 8006214:	6019      	str	r1, [r3, #0]
 8006216:	6816      	ldr	r6, [r2, #0]
 8006218:	2100      	movs	r1, #0
 800621a:	0030      	movs	r0, r6
 800621c:	6862      	ldr	r2, [r4, #4]
 800621e:	f000 f833 	bl	8006288 <memchr>
 8006222:	2800      	cmp	r0, #0
 8006224:	d001      	beq.n	800622a <_printf_i+0x1ca>
 8006226:	1b80      	subs	r0, r0, r6
 8006228:	6060      	str	r0, [r4, #4]
 800622a:	6863      	ldr	r3, [r4, #4]
 800622c:	6123      	str	r3, [r4, #16]
 800622e:	2300      	movs	r3, #0
 8006230:	9a04      	ldr	r2, [sp, #16]
 8006232:	7013      	strb	r3, [r2, #0]
 8006234:	e7a8      	b.n	8006188 <_printf_i+0x128>
 8006236:	6923      	ldr	r3, [r4, #16]
 8006238:	0032      	movs	r2, r6
 800623a:	9906      	ldr	r1, [sp, #24]
 800623c:	9805      	ldr	r0, [sp, #20]
 800623e:	9d07      	ldr	r5, [sp, #28]
 8006240:	47a8      	blx	r5
 8006242:	1c43      	adds	r3, r0, #1
 8006244:	d0aa      	beq.n	800619c <_printf_i+0x13c>
 8006246:	6823      	ldr	r3, [r4, #0]
 8006248:	079b      	lsls	r3, r3, #30
 800624a:	d415      	bmi.n	8006278 <_printf_i+0x218>
 800624c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800624e:	68e0      	ldr	r0, [r4, #12]
 8006250:	4298      	cmp	r0, r3
 8006252:	daa5      	bge.n	80061a0 <_printf_i+0x140>
 8006254:	0018      	movs	r0, r3
 8006256:	e7a3      	b.n	80061a0 <_printf_i+0x140>
 8006258:	0022      	movs	r2, r4
 800625a:	2301      	movs	r3, #1
 800625c:	9906      	ldr	r1, [sp, #24]
 800625e:	9805      	ldr	r0, [sp, #20]
 8006260:	9e07      	ldr	r6, [sp, #28]
 8006262:	3219      	adds	r2, #25
 8006264:	47b0      	blx	r6
 8006266:	1c43      	adds	r3, r0, #1
 8006268:	d098      	beq.n	800619c <_printf_i+0x13c>
 800626a:	3501      	adds	r5, #1
 800626c:	68e3      	ldr	r3, [r4, #12]
 800626e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006270:	1a9b      	subs	r3, r3, r2
 8006272:	42ab      	cmp	r3, r5
 8006274:	dcf0      	bgt.n	8006258 <_printf_i+0x1f8>
 8006276:	e7e9      	b.n	800624c <_printf_i+0x1ec>
 8006278:	2500      	movs	r5, #0
 800627a:	e7f7      	b.n	800626c <_printf_i+0x20c>
 800627c:	08006595 	.word	0x08006595
 8006280:	080065a6 	.word	0x080065a6

08006284 <__retarget_lock_acquire_recursive>:
 8006284:	4770      	bx	lr

08006286 <__retarget_lock_release_recursive>:
 8006286:	4770      	bx	lr

08006288 <memchr>:
 8006288:	b2c9      	uxtb	r1, r1
 800628a:	1882      	adds	r2, r0, r2
 800628c:	4290      	cmp	r0, r2
 800628e:	d101      	bne.n	8006294 <memchr+0xc>
 8006290:	2000      	movs	r0, #0
 8006292:	4770      	bx	lr
 8006294:	7803      	ldrb	r3, [r0, #0]
 8006296:	428b      	cmp	r3, r1
 8006298:	d0fb      	beq.n	8006292 <memchr+0xa>
 800629a:	3001      	adds	r0, #1
 800629c:	e7f6      	b.n	800628c <memchr+0x4>

0800629e <memcpy>:
 800629e:	2300      	movs	r3, #0
 80062a0:	b510      	push	{r4, lr}
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d100      	bne.n	80062a8 <memcpy+0xa>
 80062a6:	bd10      	pop	{r4, pc}
 80062a8:	5ccc      	ldrb	r4, [r1, r3]
 80062aa:	54c4      	strb	r4, [r0, r3]
 80062ac:	3301      	adds	r3, #1
 80062ae:	e7f8      	b.n	80062a2 <memcpy+0x4>

080062b0 <memmove>:
 80062b0:	b510      	push	{r4, lr}
 80062b2:	4288      	cmp	r0, r1
 80062b4:	d902      	bls.n	80062bc <memmove+0xc>
 80062b6:	188b      	adds	r3, r1, r2
 80062b8:	4298      	cmp	r0, r3
 80062ba:	d303      	bcc.n	80062c4 <memmove+0x14>
 80062bc:	2300      	movs	r3, #0
 80062be:	e007      	b.n	80062d0 <memmove+0x20>
 80062c0:	5c8b      	ldrb	r3, [r1, r2]
 80062c2:	5483      	strb	r3, [r0, r2]
 80062c4:	3a01      	subs	r2, #1
 80062c6:	d2fb      	bcs.n	80062c0 <memmove+0x10>
 80062c8:	bd10      	pop	{r4, pc}
 80062ca:	5ccc      	ldrb	r4, [r1, r3]
 80062cc:	54c4      	strb	r4, [r0, r3]
 80062ce:	3301      	adds	r3, #1
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d1fa      	bne.n	80062ca <memmove+0x1a>
 80062d4:	e7f8      	b.n	80062c8 <memmove+0x18>

080062d6 <_realloc_r>:
 80062d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062d8:	0007      	movs	r7, r0
 80062da:	000e      	movs	r6, r1
 80062dc:	0014      	movs	r4, r2
 80062de:	2900      	cmp	r1, #0
 80062e0:	d105      	bne.n	80062ee <_realloc_r+0x18>
 80062e2:	0011      	movs	r1, r2
 80062e4:	f7ff fc32 	bl	8005b4c <_malloc_r>
 80062e8:	0005      	movs	r5, r0
 80062ea:	0028      	movs	r0, r5
 80062ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80062ee:	2a00      	cmp	r2, #0
 80062f0:	d103      	bne.n	80062fa <_realloc_r+0x24>
 80062f2:	f7ff fbbf 	bl	8005a74 <_free_r>
 80062f6:	0025      	movs	r5, r4
 80062f8:	e7f7      	b.n	80062ea <_realloc_r+0x14>
 80062fa:	f000 f81b 	bl	8006334 <_malloc_usable_size_r>
 80062fe:	9001      	str	r0, [sp, #4]
 8006300:	4284      	cmp	r4, r0
 8006302:	d803      	bhi.n	800630c <_realloc_r+0x36>
 8006304:	0035      	movs	r5, r6
 8006306:	0843      	lsrs	r3, r0, #1
 8006308:	42a3      	cmp	r3, r4
 800630a:	d3ee      	bcc.n	80062ea <_realloc_r+0x14>
 800630c:	0021      	movs	r1, r4
 800630e:	0038      	movs	r0, r7
 8006310:	f7ff fc1c 	bl	8005b4c <_malloc_r>
 8006314:	1e05      	subs	r5, r0, #0
 8006316:	d0e8      	beq.n	80062ea <_realloc_r+0x14>
 8006318:	9b01      	ldr	r3, [sp, #4]
 800631a:	0022      	movs	r2, r4
 800631c:	429c      	cmp	r4, r3
 800631e:	d900      	bls.n	8006322 <_realloc_r+0x4c>
 8006320:	001a      	movs	r2, r3
 8006322:	0031      	movs	r1, r6
 8006324:	0028      	movs	r0, r5
 8006326:	f7ff ffba 	bl	800629e <memcpy>
 800632a:	0031      	movs	r1, r6
 800632c:	0038      	movs	r0, r7
 800632e:	f7ff fba1 	bl	8005a74 <_free_r>
 8006332:	e7da      	b.n	80062ea <_realloc_r+0x14>

08006334 <_malloc_usable_size_r>:
 8006334:	1f0b      	subs	r3, r1, #4
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	1f18      	subs	r0, r3, #4
 800633a:	2b00      	cmp	r3, #0
 800633c:	da01      	bge.n	8006342 <_malloc_usable_size_r+0xe>
 800633e:	580b      	ldr	r3, [r1, r0]
 8006340:	18c0      	adds	r0, r0, r3
 8006342:	4770      	bx	lr

08006344 <_init>:
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006346:	46c0      	nop			; (mov r8, r8)
 8006348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800634a:	bc08      	pop	{r3}
 800634c:	469e      	mov	lr, r3
 800634e:	4770      	bx	lr

08006350 <_fini>:
 8006350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006352:	46c0      	nop			; (mov r8, r8)
 8006354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006356:	bc08      	pop	{r3}
 8006358:	469e      	mov	lr, r3
 800635a:	4770      	bx	lr


PA_UHF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067d8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  08006890  08006890  00016890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b9c  08006b9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006b9c  08006b9c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b9c  08006b9c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b9c  08006b9c  00016b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ba0  08006ba0  00016ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000070  08006c14  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08006c14  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2d4  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c02  00000000  00000000  0002b36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0002df70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002ea40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177f7  00000000  00000000  0002f390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100d2  00000000  00000000  00046b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086307  00000000  00000000  00056c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dcf60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002954  00000000  00000000  000dcfb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006878 	.word	0x08006878

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08006878 	.word	0x08006878

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cfrcmple>:
 8000400:	4684      	mov	ip, r0
 8000402:	0008      	movs	r0, r1
 8000404:	4661      	mov	r1, ip
 8000406:	e7ff      	b.n	8000408 <__aeabi_cfcmpeq>

08000408 <__aeabi_cfcmpeq>:
 8000408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800040a:	f000 fb6d 	bl	8000ae8 <__lesf2>
 800040e:	2800      	cmp	r0, #0
 8000410:	d401      	bmi.n	8000416 <__aeabi_cfcmpeq+0xe>
 8000412:	2100      	movs	r1, #0
 8000414:	42c8      	cmn	r0, r1
 8000416:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000418 <__aeabi_fcmpeq>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 faf9 	bl	8000a10 <__eqsf2>
 800041e:	4240      	negs	r0, r0
 8000420:	3001      	adds	r0, #1
 8000422:	bd10      	pop	{r4, pc}

08000424 <__aeabi_fcmplt>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 fb5f 	bl	8000ae8 <__lesf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	db01      	blt.n	8000432 <__aeabi_fcmplt+0xe>
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	2001      	movs	r0, #1
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_fcmple>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fb55 	bl	8000ae8 <__lesf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	dd01      	ble.n	8000446 <__aeabi_fcmple+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_fcmpgt>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fb05 	bl	8000a5c <__gesf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	dc01      	bgt.n	800045a <__aeabi_fcmpgt+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__aeabi_fcmpge>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 fafb 	bl	8000a5c <__gesf2>
 8000466:	2800      	cmp	r0, #0
 8000468:	da01      	bge.n	800046e <__aeabi_fcmpge+0xe>
 800046a:	2000      	movs	r0, #0
 800046c:	bd10      	pop	{r4, pc}
 800046e:	2001      	movs	r0, #1
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__aeabi_f2uiz>:
 8000474:	219e      	movs	r1, #158	; 0x9e
 8000476:	b510      	push	{r4, lr}
 8000478:	05c9      	lsls	r1, r1, #23
 800047a:	1c04      	adds	r4, r0, #0
 800047c:	f7ff fff0 	bl	8000460 <__aeabi_fcmpge>
 8000480:	2800      	cmp	r0, #0
 8000482:	d103      	bne.n	800048c <__aeabi_f2uiz+0x18>
 8000484:	1c20      	adds	r0, r4, #0
 8000486:	f000 fe5d 	bl	8001144 <__aeabi_f2iz>
 800048a:	bd10      	pop	{r4, pc}
 800048c:	219e      	movs	r1, #158	; 0x9e
 800048e:	1c20      	adds	r0, r4, #0
 8000490:	05c9      	lsls	r1, r1, #23
 8000492:	f000 fc93 	bl	8000dbc <__aeabi_fsub>
 8000496:	f000 fe55 	bl	8001144 <__aeabi_f2iz>
 800049a:	2380      	movs	r3, #128	; 0x80
 800049c:	061b      	lsls	r3, r3, #24
 800049e:	469c      	mov	ip, r3
 80004a0:	4460      	add	r0, ip
 80004a2:	e7f2      	b.n	800048a <__aeabi_f2uiz+0x16>

080004a4 <__aeabi_fadd>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	46c6      	mov	lr, r8
 80004a8:	0243      	lsls	r3, r0, #9
 80004aa:	0a5b      	lsrs	r3, r3, #9
 80004ac:	024e      	lsls	r6, r1, #9
 80004ae:	0045      	lsls	r5, r0, #1
 80004b0:	004f      	lsls	r7, r1, #1
 80004b2:	00da      	lsls	r2, r3, #3
 80004b4:	0fc4      	lsrs	r4, r0, #31
 80004b6:	469c      	mov	ip, r3
 80004b8:	0a70      	lsrs	r0, r6, #9
 80004ba:	4690      	mov	r8, r2
 80004bc:	b500      	push	{lr}
 80004be:	0e2d      	lsrs	r5, r5, #24
 80004c0:	0e3f      	lsrs	r7, r7, #24
 80004c2:	0fc9      	lsrs	r1, r1, #31
 80004c4:	09b6      	lsrs	r6, r6, #6
 80004c6:	428c      	cmp	r4, r1
 80004c8:	d04b      	beq.n	8000562 <__aeabi_fadd+0xbe>
 80004ca:	1bea      	subs	r2, r5, r7
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	dd36      	ble.n	800053e <__aeabi_fadd+0x9a>
 80004d0:	2f00      	cmp	r7, #0
 80004d2:	d061      	beq.n	8000598 <__aeabi_fadd+0xf4>
 80004d4:	2dff      	cmp	r5, #255	; 0xff
 80004d6:	d100      	bne.n	80004da <__aeabi_fadd+0x36>
 80004d8:	e0ad      	b.n	8000636 <__aeabi_fadd+0x192>
 80004da:	2380      	movs	r3, #128	; 0x80
 80004dc:	04db      	lsls	r3, r3, #19
 80004de:	431e      	orrs	r6, r3
 80004e0:	2a1b      	cmp	r2, #27
 80004e2:	dc00      	bgt.n	80004e6 <__aeabi_fadd+0x42>
 80004e4:	e0d3      	b.n	800068e <__aeabi_fadd+0x1ea>
 80004e6:	2001      	movs	r0, #1
 80004e8:	4643      	mov	r3, r8
 80004ea:	1a18      	subs	r0, r3, r0
 80004ec:	0143      	lsls	r3, r0, #5
 80004ee:	d400      	bmi.n	80004f2 <__aeabi_fadd+0x4e>
 80004f0:	e08c      	b.n	800060c <__aeabi_fadd+0x168>
 80004f2:	0180      	lsls	r0, r0, #6
 80004f4:	0987      	lsrs	r7, r0, #6
 80004f6:	0038      	movs	r0, r7
 80004f8:	f000 fed4 	bl	80012a4 <__clzsi2>
 80004fc:	3805      	subs	r0, #5
 80004fe:	4087      	lsls	r7, r0
 8000500:	4285      	cmp	r5, r0
 8000502:	dc00      	bgt.n	8000506 <__aeabi_fadd+0x62>
 8000504:	e0b6      	b.n	8000674 <__aeabi_fadd+0x1d0>
 8000506:	1a2d      	subs	r5, r5, r0
 8000508:	48b3      	ldr	r0, [pc, #716]	; (80007d8 <__aeabi_fadd+0x334>)
 800050a:	4038      	ands	r0, r7
 800050c:	0743      	lsls	r3, r0, #29
 800050e:	d004      	beq.n	800051a <__aeabi_fadd+0x76>
 8000510:	230f      	movs	r3, #15
 8000512:	4003      	ands	r3, r0
 8000514:	2b04      	cmp	r3, #4
 8000516:	d000      	beq.n	800051a <__aeabi_fadd+0x76>
 8000518:	3004      	adds	r0, #4
 800051a:	0143      	lsls	r3, r0, #5
 800051c:	d400      	bmi.n	8000520 <__aeabi_fadd+0x7c>
 800051e:	e078      	b.n	8000612 <__aeabi_fadd+0x16e>
 8000520:	1c6a      	adds	r2, r5, #1
 8000522:	2dfe      	cmp	r5, #254	; 0xfe
 8000524:	d065      	beq.n	80005f2 <__aeabi_fadd+0x14e>
 8000526:	0180      	lsls	r0, r0, #6
 8000528:	0a43      	lsrs	r3, r0, #9
 800052a:	469c      	mov	ip, r3
 800052c:	b2d2      	uxtb	r2, r2
 800052e:	4663      	mov	r3, ip
 8000530:	05d0      	lsls	r0, r2, #23
 8000532:	4318      	orrs	r0, r3
 8000534:	07e4      	lsls	r4, r4, #31
 8000536:	4320      	orrs	r0, r4
 8000538:	bc80      	pop	{r7}
 800053a:	46b8      	mov	r8, r7
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	2a00      	cmp	r2, #0
 8000540:	d035      	beq.n	80005ae <__aeabi_fadd+0x10a>
 8000542:	1b7a      	subs	r2, r7, r5
 8000544:	2d00      	cmp	r5, #0
 8000546:	d000      	beq.n	800054a <__aeabi_fadd+0xa6>
 8000548:	e0af      	b.n	80006aa <__aeabi_fadd+0x206>
 800054a:	4643      	mov	r3, r8
 800054c:	2b00      	cmp	r3, #0
 800054e:	d100      	bne.n	8000552 <__aeabi_fadd+0xae>
 8000550:	e0a7      	b.n	80006a2 <__aeabi_fadd+0x1fe>
 8000552:	1e53      	subs	r3, r2, #1
 8000554:	2a01      	cmp	r2, #1
 8000556:	d100      	bne.n	800055a <__aeabi_fadd+0xb6>
 8000558:	e12f      	b.n	80007ba <__aeabi_fadd+0x316>
 800055a:	2aff      	cmp	r2, #255	; 0xff
 800055c:	d069      	beq.n	8000632 <__aeabi_fadd+0x18e>
 800055e:	001a      	movs	r2, r3
 8000560:	e0aa      	b.n	80006b8 <__aeabi_fadd+0x214>
 8000562:	1be9      	subs	r1, r5, r7
 8000564:	2900      	cmp	r1, #0
 8000566:	dd70      	ble.n	800064a <__aeabi_fadd+0x1a6>
 8000568:	2f00      	cmp	r7, #0
 800056a:	d037      	beq.n	80005dc <__aeabi_fadd+0x138>
 800056c:	2dff      	cmp	r5, #255	; 0xff
 800056e:	d062      	beq.n	8000636 <__aeabi_fadd+0x192>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	04db      	lsls	r3, r3, #19
 8000574:	431e      	orrs	r6, r3
 8000576:	291b      	cmp	r1, #27
 8000578:	dc00      	bgt.n	800057c <__aeabi_fadd+0xd8>
 800057a:	e0b0      	b.n	80006de <__aeabi_fadd+0x23a>
 800057c:	2001      	movs	r0, #1
 800057e:	4440      	add	r0, r8
 8000580:	0143      	lsls	r3, r0, #5
 8000582:	d543      	bpl.n	800060c <__aeabi_fadd+0x168>
 8000584:	3501      	adds	r5, #1
 8000586:	2dff      	cmp	r5, #255	; 0xff
 8000588:	d033      	beq.n	80005f2 <__aeabi_fadd+0x14e>
 800058a:	2301      	movs	r3, #1
 800058c:	4a93      	ldr	r2, [pc, #588]	; (80007dc <__aeabi_fadd+0x338>)
 800058e:	4003      	ands	r3, r0
 8000590:	0840      	lsrs	r0, r0, #1
 8000592:	4010      	ands	r0, r2
 8000594:	4318      	orrs	r0, r3
 8000596:	e7b9      	b.n	800050c <__aeabi_fadd+0x68>
 8000598:	2e00      	cmp	r6, #0
 800059a:	d100      	bne.n	800059e <__aeabi_fadd+0xfa>
 800059c:	e083      	b.n	80006a6 <__aeabi_fadd+0x202>
 800059e:	1e51      	subs	r1, r2, #1
 80005a0:	2a01      	cmp	r2, #1
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fadd+0x102>
 80005a4:	e0d8      	b.n	8000758 <__aeabi_fadd+0x2b4>
 80005a6:	2aff      	cmp	r2, #255	; 0xff
 80005a8:	d045      	beq.n	8000636 <__aeabi_fadd+0x192>
 80005aa:	000a      	movs	r2, r1
 80005ac:	e798      	b.n	80004e0 <__aeabi_fadd+0x3c>
 80005ae:	27fe      	movs	r7, #254	; 0xfe
 80005b0:	1c6a      	adds	r2, r5, #1
 80005b2:	4217      	tst	r7, r2
 80005b4:	d000      	beq.n	80005b8 <__aeabi_fadd+0x114>
 80005b6:	e086      	b.n	80006c6 <__aeabi_fadd+0x222>
 80005b8:	2d00      	cmp	r5, #0
 80005ba:	d000      	beq.n	80005be <__aeabi_fadd+0x11a>
 80005bc:	e0b7      	b.n	800072e <__aeabi_fadd+0x28a>
 80005be:	4643      	mov	r3, r8
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d100      	bne.n	80005c6 <__aeabi_fadd+0x122>
 80005c4:	e0f3      	b.n	80007ae <__aeabi_fadd+0x30a>
 80005c6:	2200      	movs	r2, #0
 80005c8:	2e00      	cmp	r6, #0
 80005ca:	d0b0      	beq.n	800052e <__aeabi_fadd+0x8a>
 80005cc:	1b98      	subs	r0, r3, r6
 80005ce:	0143      	lsls	r3, r0, #5
 80005d0:	d400      	bmi.n	80005d4 <__aeabi_fadd+0x130>
 80005d2:	e0fa      	b.n	80007ca <__aeabi_fadd+0x326>
 80005d4:	4643      	mov	r3, r8
 80005d6:	000c      	movs	r4, r1
 80005d8:	1af0      	subs	r0, r6, r3
 80005da:	e797      	b.n	800050c <__aeabi_fadd+0x68>
 80005dc:	2e00      	cmp	r6, #0
 80005de:	d100      	bne.n	80005e2 <__aeabi_fadd+0x13e>
 80005e0:	e0c8      	b.n	8000774 <__aeabi_fadd+0x2d0>
 80005e2:	1e4a      	subs	r2, r1, #1
 80005e4:	2901      	cmp	r1, #1
 80005e6:	d100      	bne.n	80005ea <__aeabi_fadd+0x146>
 80005e8:	e0ae      	b.n	8000748 <__aeabi_fadd+0x2a4>
 80005ea:	29ff      	cmp	r1, #255	; 0xff
 80005ec:	d023      	beq.n	8000636 <__aeabi_fadd+0x192>
 80005ee:	0011      	movs	r1, r2
 80005f0:	e7c1      	b.n	8000576 <__aeabi_fadd+0xd2>
 80005f2:	2300      	movs	r3, #0
 80005f4:	22ff      	movs	r2, #255	; 0xff
 80005f6:	469c      	mov	ip, r3
 80005f8:	e799      	b.n	800052e <__aeabi_fadd+0x8a>
 80005fa:	21fe      	movs	r1, #254	; 0xfe
 80005fc:	1c6a      	adds	r2, r5, #1
 80005fe:	4211      	tst	r1, r2
 8000600:	d077      	beq.n	80006f2 <__aeabi_fadd+0x24e>
 8000602:	2aff      	cmp	r2, #255	; 0xff
 8000604:	d0f5      	beq.n	80005f2 <__aeabi_fadd+0x14e>
 8000606:	0015      	movs	r5, r2
 8000608:	4446      	add	r6, r8
 800060a:	0870      	lsrs	r0, r6, #1
 800060c:	0743      	lsls	r3, r0, #29
 800060e:	d000      	beq.n	8000612 <__aeabi_fadd+0x16e>
 8000610:	e77e      	b.n	8000510 <__aeabi_fadd+0x6c>
 8000612:	08c3      	lsrs	r3, r0, #3
 8000614:	2dff      	cmp	r5, #255	; 0xff
 8000616:	d00e      	beq.n	8000636 <__aeabi_fadd+0x192>
 8000618:	025b      	lsls	r3, r3, #9
 800061a:	0a5b      	lsrs	r3, r3, #9
 800061c:	469c      	mov	ip, r3
 800061e:	b2ea      	uxtb	r2, r5
 8000620:	e785      	b.n	800052e <__aeabi_fadd+0x8a>
 8000622:	2e00      	cmp	r6, #0
 8000624:	d007      	beq.n	8000636 <__aeabi_fadd+0x192>
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	03d2      	lsls	r2, r2, #15
 800062a:	4213      	tst	r3, r2
 800062c:	d003      	beq.n	8000636 <__aeabi_fadd+0x192>
 800062e:	4210      	tst	r0, r2
 8000630:	d101      	bne.n	8000636 <__aeabi_fadd+0x192>
 8000632:	000c      	movs	r4, r1
 8000634:	0003      	movs	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d0db      	beq.n	80005f2 <__aeabi_fadd+0x14e>
 800063a:	2080      	movs	r0, #128	; 0x80
 800063c:	03c0      	lsls	r0, r0, #15
 800063e:	4318      	orrs	r0, r3
 8000640:	0240      	lsls	r0, r0, #9
 8000642:	0a43      	lsrs	r3, r0, #9
 8000644:	469c      	mov	ip, r3
 8000646:	22ff      	movs	r2, #255	; 0xff
 8000648:	e771      	b.n	800052e <__aeabi_fadd+0x8a>
 800064a:	2900      	cmp	r1, #0
 800064c:	d0d5      	beq.n	80005fa <__aeabi_fadd+0x156>
 800064e:	1b7a      	subs	r2, r7, r5
 8000650:	2d00      	cmp	r5, #0
 8000652:	d160      	bne.n	8000716 <__aeabi_fadd+0x272>
 8000654:	4643      	mov	r3, r8
 8000656:	2b00      	cmp	r3, #0
 8000658:	d024      	beq.n	80006a4 <__aeabi_fadd+0x200>
 800065a:	1e53      	subs	r3, r2, #1
 800065c:	2a01      	cmp	r2, #1
 800065e:	d073      	beq.n	8000748 <__aeabi_fadd+0x2a4>
 8000660:	2aff      	cmp	r2, #255	; 0xff
 8000662:	d0e7      	beq.n	8000634 <__aeabi_fadd+0x190>
 8000664:	001a      	movs	r2, r3
 8000666:	2a1b      	cmp	r2, #27
 8000668:	dc00      	bgt.n	800066c <__aeabi_fadd+0x1c8>
 800066a:	e085      	b.n	8000778 <__aeabi_fadd+0x2d4>
 800066c:	2001      	movs	r0, #1
 800066e:	003d      	movs	r5, r7
 8000670:	1980      	adds	r0, r0, r6
 8000672:	e785      	b.n	8000580 <__aeabi_fadd+0xdc>
 8000674:	2320      	movs	r3, #32
 8000676:	003a      	movs	r2, r7
 8000678:	1b45      	subs	r5, r0, r5
 800067a:	0038      	movs	r0, r7
 800067c:	3501      	adds	r5, #1
 800067e:	40ea      	lsrs	r2, r5
 8000680:	1b5d      	subs	r5, r3, r5
 8000682:	40a8      	lsls	r0, r5
 8000684:	1e43      	subs	r3, r0, #1
 8000686:	4198      	sbcs	r0, r3
 8000688:	2500      	movs	r5, #0
 800068a:	4310      	orrs	r0, r2
 800068c:	e73e      	b.n	800050c <__aeabi_fadd+0x68>
 800068e:	2320      	movs	r3, #32
 8000690:	0030      	movs	r0, r6
 8000692:	1a9b      	subs	r3, r3, r2
 8000694:	0031      	movs	r1, r6
 8000696:	4098      	lsls	r0, r3
 8000698:	40d1      	lsrs	r1, r2
 800069a:	1e43      	subs	r3, r0, #1
 800069c:	4198      	sbcs	r0, r3
 800069e:	4308      	orrs	r0, r1
 80006a0:	e722      	b.n	80004e8 <__aeabi_fadd+0x44>
 80006a2:	000c      	movs	r4, r1
 80006a4:	0003      	movs	r3, r0
 80006a6:	0015      	movs	r5, r2
 80006a8:	e7b4      	b.n	8000614 <__aeabi_fadd+0x170>
 80006aa:	2fff      	cmp	r7, #255	; 0xff
 80006ac:	d0c1      	beq.n	8000632 <__aeabi_fadd+0x18e>
 80006ae:	2380      	movs	r3, #128	; 0x80
 80006b0:	4640      	mov	r0, r8
 80006b2:	04db      	lsls	r3, r3, #19
 80006b4:	4318      	orrs	r0, r3
 80006b6:	4680      	mov	r8, r0
 80006b8:	2a1b      	cmp	r2, #27
 80006ba:	dd51      	ble.n	8000760 <__aeabi_fadd+0x2bc>
 80006bc:	2001      	movs	r0, #1
 80006be:	000c      	movs	r4, r1
 80006c0:	003d      	movs	r5, r7
 80006c2:	1a30      	subs	r0, r6, r0
 80006c4:	e712      	b.n	80004ec <__aeabi_fadd+0x48>
 80006c6:	4643      	mov	r3, r8
 80006c8:	1b9f      	subs	r7, r3, r6
 80006ca:	017b      	lsls	r3, r7, #5
 80006cc:	d42b      	bmi.n	8000726 <__aeabi_fadd+0x282>
 80006ce:	2f00      	cmp	r7, #0
 80006d0:	d000      	beq.n	80006d4 <__aeabi_fadd+0x230>
 80006d2:	e710      	b.n	80004f6 <__aeabi_fadd+0x52>
 80006d4:	2300      	movs	r3, #0
 80006d6:	2400      	movs	r4, #0
 80006d8:	2200      	movs	r2, #0
 80006da:	469c      	mov	ip, r3
 80006dc:	e727      	b.n	800052e <__aeabi_fadd+0x8a>
 80006de:	2320      	movs	r3, #32
 80006e0:	0032      	movs	r2, r6
 80006e2:	0030      	movs	r0, r6
 80006e4:	40ca      	lsrs	r2, r1
 80006e6:	1a59      	subs	r1, r3, r1
 80006e8:	4088      	lsls	r0, r1
 80006ea:	1e43      	subs	r3, r0, #1
 80006ec:	4198      	sbcs	r0, r3
 80006ee:	4310      	orrs	r0, r2
 80006f0:	e745      	b.n	800057e <__aeabi_fadd+0xda>
 80006f2:	2d00      	cmp	r5, #0
 80006f4:	d14a      	bne.n	800078c <__aeabi_fadd+0x2e8>
 80006f6:	4643      	mov	r3, r8
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d063      	beq.n	80007c4 <__aeabi_fadd+0x320>
 80006fc:	2200      	movs	r2, #0
 80006fe:	2e00      	cmp	r6, #0
 8000700:	d100      	bne.n	8000704 <__aeabi_fadd+0x260>
 8000702:	e714      	b.n	800052e <__aeabi_fadd+0x8a>
 8000704:	0030      	movs	r0, r6
 8000706:	4440      	add	r0, r8
 8000708:	0143      	lsls	r3, r0, #5
 800070a:	d400      	bmi.n	800070e <__aeabi_fadd+0x26a>
 800070c:	e77e      	b.n	800060c <__aeabi_fadd+0x168>
 800070e:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <__aeabi_fadd+0x334>)
 8000710:	3501      	adds	r5, #1
 8000712:	4018      	ands	r0, r3
 8000714:	e77a      	b.n	800060c <__aeabi_fadd+0x168>
 8000716:	2fff      	cmp	r7, #255	; 0xff
 8000718:	d08c      	beq.n	8000634 <__aeabi_fadd+0x190>
 800071a:	2380      	movs	r3, #128	; 0x80
 800071c:	4641      	mov	r1, r8
 800071e:	04db      	lsls	r3, r3, #19
 8000720:	4319      	orrs	r1, r3
 8000722:	4688      	mov	r8, r1
 8000724:	e79f      	b.n	8000666 <__aeabi_fadd+0x1c2>
 8000726:	4643      	mov	r3, r8
 8000728:	000c      	movs	r4, r1
 800072a:	1af7      	subs	r7, r6, r3
 800072c:	e6e3      	b.n	80004f6 <__aeabi_fadd+0x52>
 800072e:	4642      	mov	r2, r8
 8000730:	2a00      	cmp	r2, #0
 8000732:	d000      	beq.n	8000736 <__aeabi_fadd+0x292>
 8000734:	e775      	b.n	8000622 <__aeabi_fadd+0x17e>
 8000736:	2e00      	cmp	r6, #0
 8000738:	d000      	beq.n	800073c <__aeabi_fadd+0x298>
 800073a:	e77a      	b.n	8000632 <__aeabi_fadd+0x18e>
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	03db      	lsls	r3, r3, #15
 8000740:	2400      	movs	r4, #0
 8000742:	469c      	mov	ip, r3
 8000744:	22ff      	movs	r2, #255	; 0xff
 8000746:	e6f2      	b.n	800052e <__aeabi_fadd+0x8a>
 8000748:	0030      	movs	r0, r6
 800074a:	4440      	add	r0, r8
 800074c:	2501      	movs	r5, #1
 800074e:	0143      	lsls	r3, r0, #5
 8000750:	d400      	bmi.n	8000754 <__aeabi_fadd+0x2b0>
 8000752:	e75b      	b.n	800060c <__aeabi_fadd+0x168>
 8000754:	2502      	movs	r5, #2
 8000756:	e718      	b.n	800058a <__aeabi_fadd+0xe6>
 8000758:	4643      	mov	r3, r8
 800075a:	2501      	movs	r5, #1
 800075c:	1b98      	subs	r0, r3, r6
 800075e:	e6c5      	b.n	80004ec <__aeabi_fadd+0x48>
 8000760:	2320      	movs	r3, #32
 8000762:	4644      	mov	r4, r8
 8000764:	4640      	mov	r0, r8
 8000766:	40d4      	lsrs	r4, r2
 8000768:	1a9a      	subs	r2, r3, r2
 800076a:	4090      	lsls	r0, r2
 800076c:	1e43      	subs	r3, r0, #1
 800076e:	4198      	sbcs	r0, r3
 8000770:	4320      	orrs	r0, r4
 8000772:	e7a4      	b.n	80006be <__aeabi_fadd+0x21a>
 8000774:	000d      	movs	r5, r1
 8000776:	e74d      	b.n	8000614 <__aeabi_fadd+0x170>
 8000778:	2320      	movs	r3, #32
 800077a:	4641      	mov	r1, r8
 800077c:	4640      	mov	r0, r8
 800077e:	40d1      	lsrs	r1, r2
 8000780:	1a9a      	subs	r2, r3, r2
 8000782:	4090      	lsls	r0, r2
 8000784:	1e43      	subs	r3, r0, #1
 8000786:	4198      	sbcs	r0, r3
 8000788:	4308      	orrs	r0, r1
 800078a:	e770      	b.n	800066e <__aeabi_fadd+0x1ca>
 800078c:	4642      	mov	r2, r8
 800078e:	2a00      	cmp	r2, #0
 8000790:	d100      	bne.n	8000794 <__aeabi_fadd+0x2f0>
 8000792:	e74f      	b.n	8000634 <__aeabi_fadd+0x190>
 8000794:	2e00      	cmp	r6, #0
 8000796:	d100      	bne.n	800079a <__aeabi_fadd+0x2f6>
 8000798:	e74d      	b.n	8000636 <__aeabi_fadd+0x192>
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	03d2      	lsls	r2, r2, #15
 800079e:	4213      	tst	r3, r2
 80007a0:	d100      	bne.n	80007a4 <__aeabi_fadd+0x300>
 80007a2:	e748      	b.n	8000636 <__aeabi_fadd+0x192>
 80007a4:	4210      	tst	r0, r2
 80007a6:	d000      	beq.n	80007aa <__aeabi_fadd+0x306>
 80007a8:	e745      	b.n	8000636 <__aeabi_fadd+0x192>
 80007aa:	0003      	movs	r3, r0
 80007ac:	e743      	b.n	8000636 <__aeabi_fadd+0x192>
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d090      	beq.n	80006d4 <__aeabi_fadd+0x230>
 80007b2:	000c      	movs	r4, r1
 80007b4:	4684      	mov	ip, r0
 80007b6:	2200      	movs	r2, #0
 80007b8:	e6b9      	b.n	800052e <__aeabi_fadd+0x8a>
 80007ba:	4643      	mov	r3, r8
 80007bc:	000c      	movs	r4, r1
 80007be:	1af0      	subs	r0, r6, r3
 80007c0:	3501      	adds	r5, #1
 80007c2:	e693      	b.n	80004ec <__aeabi_fadd+0x48>
 80007c4:	4684      	mov	ip, r0
 80007c6:	2200      	movs	r2, #0
 80007c8:	e6b1      	b.n	800052e <__aeabi_fadd+0x8a>
 80007ca:	2800      	cmp	r0, #0
 80007cc:	d000      	beq.n	80007d0 <__aeabi_fadd+0x32c>
 80007ce:	e71d      	b.n	800060c <__aeabi_fadd+0x168>
 80007d0:	2300      	movs	r3, #0
 80007d2:	2400      	movs	r4, #0
 80007d4:	469c      	mov	ip, r3
 80007d6:	e6aa      	b.n	800052e <__aeabi_fadd+0x8a>
 80007d8:	fbffffff 	.word	0xfbffffff
 80007dc:	7dffffff 	.word	0x7dffffff

080007e0 <__aeabi_fdiv>:
 80007e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e2:	464f      	mov	r7, r9
 80007e4:	4646      	mov	r6, r8
 80007e6:	46d6      	mov	lr, sl
 80007e8:	0245      	lsls	r5, r0, #9
 80007ea:	b5c0      	push	{r6, r7, lr}
 80007ec:	0047      	lsls	r7, r0, #1
 80007ee:	1c0c      	adds	r4, r1, #0
 80007f0:	0a6d      	lsrs	r5, r5, #9
 80007f2:	0e3f      	lsrs	r7, r7, #24
 80007f4:	0fc6      	lsrs	r6, r0, #31
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	d100      	bne.n	80007fc <__aeabi_fdiv+0x1c>
 80007fa:	e070      	b.n	80008de <__aeabi_fdiv+0xfe>
 80007fc:	2fff      	cmp	r7, #255	; 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fdiv+0x22>
 8000800:	e075      	b.n	80008ee <__aeabi_fdiv+0x10e>
 8000802:	00eb      	lsls	r3, r5, #3
 8000804:	2580      	movs	r5, #128	; 0x80
 8000806:	04ed      	lsls	r5, r5, #19
 8000808:	431d      	orrs	r5, r3
 800080a:	2300      	movs	r3, #0
 800080c:	4699      	mov	r9, r3
 800080e:	469a      	mov	sl, r3
 8000810:	3f7f      	subs	r7, #127	; 0x7f
 8000812:	0260      	lsls	r0, r4, #9
 8000814:	0a43      	lsrs	r3, r0, #9
 8000816:	4698      	mov	r8, r3
 8000818:	0063      	lsls	r3, r4, #1
 800081a:	0e1b      	lsrs	r3, r3, #24
 800081c:	0fe4      	lsrs	r4, r4, #31
 800081e:	2b00      	cmp	r3, #0
 8000820:	d04e      	beq.n	80008c0 <__aeabi_fdiv+0xe0>
 8000822:	2bff      	cmp	r3, #255	; 0xff
 8000824:	d046      	beq.n	80008b4 <__aeabi_fdiv+0xd4>
 8000826:	4642      	mov	r2, r8
 8000828:	00d0      	lsls	r0, r2, #3
 800082a:	2280      	movs	r2, #128	; 0x80
 800082c:	04d2      	lsls	r2, r2, #19
 800082e:	4302      	orrs	r2, r0
 8000830:	4690      	mov	r8, r2
 8000832:	2200      	movs	r2, #0
 8000834:	3b7f      	subs	r3, #127	; 0x7f
 8000836:	0031      	movs	r1, r6
 8000838:	1aff      	subs	r7, r7, r3
 800083a:	464b      	mov	r3, r9
 800083c:	4061      	eors	r1, r4
 800083e:	b2c9      	uxtb	r1, r1
 8000840:	4313      	orrs	r3, r2
 8000842:	2b0f      	cmp	r3, #15
 8000844:	d900      	bls.n	8000848 <__aeabi_fdiv+0x68>
 8000846:	e0b5      	b.n	80009b4 <__aeabi_fdiv+0x1d4>
 8000848:	486e      	ldr	r0, [pc, #440]	; (8000a04 <__aeabi_fdiv+0x224>)
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	58c3      	ldr	r3, [r0, r3]
 800084e:	469f      	mov	pc, r3
 8000850:	2300      	movs	r3, #0
 8000852:	4698      	mov	r8, r3
 8000854:	0026      	movs	r6, r4
 8000856:	4645      	mov	r5, r8
 8000858:	4692      	mov	sl, r2
 800085a:	4653      	mov	r3, sl
 800085c:	2b02      	cmp	r3, #2
 800085e:	d100      	bne.n	8000862 <__aeabi_fdiv+0x82>
 8000860:	e089      	b.n	8000976 <__aeabi_fdiv+0x196>
 8000862:	2b03      	cmp	r3, #3
 8000864:	d100      	bne.n	8000868 <__aeabi_fdiv+0x88>
 8000866:	e09e      	b.n	80009a6 <__aeabi_fdiv+0x1c6>
 8000868:	2b01      	cmp	r3, #1
 800086a:	d018      	beq.n	800089e <__aeabi_fdiv+0xbe>
 800086c:	003b      	movs	r3, r7
 800086e:	337f      	adds	r3, #127	; 0x7f
 8000870:	2b00      	cmp	r3, #0
 8000872:	dd69      	ble.n	8000948 <__aeabi_fdiv+0x168>
 8000874:	076a      	lsls	r2, r5, #29
 8000876:	d004      	beq.n	8000882 <__aeabi_fdiv+0xa2>
 8000878:	220f      	movs	r2, #15
 800087a:	402a      	ands	r2, r5
 800087c:	2a04      	cmp	r2, #4
 800087e:	d000      	beq.n	8000882 <__aeabi_fdiv+0xa2>
 8000880:	3504      	adds	r5, #4
 8000882:	012a      	lsls	r2, r5, #4
 8000884:	d503      	bpl.n	800088e <__aeabi_fdiv+0xae>
 8000886:	4b60      	ldr	r3, [pc, #384]	; (8000a08 <__aeabi_fdiv+0x228>)
 8000888:	401d      	ands	r5, r3
 800088a:	003b      	movs	r3, r7
 800088c:	3380      	adds	r3, #128	; 0x80
 800088e:	2bfe      	cmp	r3, #254	; 0xfe
 8000890:	dd00      	ble.n	8000894 <__aeabi_fdiv+0xb4>
 8000892:	e070      	b.n	8000976 <__aeabi_fdiv+0x196>
 8000894:	01ad      	lsls	r5, r5, #6
 8000896:	0a6d      	lsrs	r5, r5, #9
 8000898:	b2d8      	uxtb	r0, r3
 800089a:	e002      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 800089c:	000e      	movs	r6, r1
 800089e:	2000      	movs	r0, #0
 80008a0:	2500      	movs	r5, #0
 80008a2:	05c0      	lsls	r0, r0, #23
 80008a4:	4328      	orrs	r0, r5
 80008a6:	07f6      	lsls	r6, r6, #31
 80008a8:	4330      	orrs	r0, r6
 80008aa:	bce0      	pop	{r5, r6, r7}
 80008ac:	46ba      	mov	sl, r7
 80008ae:	46b1      	mov	r9, r6
 80008b0:	46a8      	mov	r8, r5
 80008b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008b4:	4643      	mov	r3, r8
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d13f      	bne.n	800093a <__aeabi_fdiv+0x15a>
 80008ba:	2202      	movs	r2, #2
 80008bc:	3fff      	subs	r7, #255	; 0xff
 80008be:	e003      	b.n	80008c8 <__aeabi_fdiv+0xe8>
 80008c0:	4643      	mov	r3, r8
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d12d      	bne.n	8000922 <__aeabi_fdiv+0x142>
 80008c6:	2201      	movs	r2, #1
 80008c8:	0031      	movs	r1, r6
 80008ca:	464b      	mov	r3, r9
 80008cc:	4061      	eors	r1, r4
 80008ce:	b2c9      	uxtb	r1, r1
 80008d0:	4313      	orrs	r3, r2
 80008d2:	2b0f      	cmp	r3, #15
 80008d4:	d834      	bhi.n	8000940 <__aeabi_fdiv+0x160>
 80008d6:	484d      	ldr	r0, [pc, #308]	; (8000a0c <__aeabi_fdiv+0x22c>)
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	58c3      	ldr	r3, [r0, r3]
 80008dc:	469f      	mov	pc, r3
 80008de:	2d00      	cmp	r5, #0
 80008e0:	d113      	bne.n	800090a <__aeabi_fdiv+0x12a>
 80008e2:	2304      	movs	r3, #4
 80008e4:	4699      	mov	r9, r3
 80008e6:	3b03      	subs	r3, #3
 80008e8:	2700      	movs	r7, #0
 80008ea:	469a      	mov	sl, r3
 80008ec:	e791      	b.n	8000812 <__aeabi_fdiv+0x32>
 80008ee:	2d00      	cmp	r5, #0
 80008f0:	d105      	bne.n	80008fe <__aeabi_fdiv+0x11e>
 80008f2:	2308      	movs	r3, #8
 80008f4:	4699      	mov	r9, r3
 80008f6:	3b06      	subs	r3, #6
 80008f8:	27ff      	movs	r7, #255	; 0xff
 80008fa:	469a      	mov	sl, r3
 80008fc:	e789      	b.n	8000812 <__aeabi_fdiv+0x32>
 80008fe:	230c      	movs	r3, #12
 8000900:	4699      	mov	r9, r3
 8000902:	3b09      	subs	r3, #9
 8000904:	27ff      	movs	r7, #255	; 0xff
 8000906:	469a      	mov	sl, r3
 8000908:	e783      	b.n	8000812 <__aeabi_fdiv+0x32>
 800090a:	0028      	movs	r0, r5
 800090c:	f000 fcca 	bl	80012a4 <__clzsi2>
 8000910:	2776      	movs	r7, #118	; 0x76
 8000912:	1f43      	subs	r3, r0, #5
 8000914:	409d      	lsls	r5, r3
 8000916:	2300      	movs	r3, #0
 8000918:	427f      	negs	r7, r7
 800091a:	4699      	mov	r9, r3
 800091c:	469a      	mov	sl, r3
 800091e:	1a3f      	subs	r7, r7, r0
 8000920:	e777      	b.n	8000812 <__aeabi_fdiv+0x32>
 8000922:	4640      	mov	r0, r8
 8000924:	f000 fcbe 	bl	80012a4 <__clzsi2>
 8000928:	4642      	mov	r2, r8
 800092a:	1f43      	subs	r3, r0, #5
 800092c:	409a      	lsls	r2, r3
 800092e:	2376      	movs	r3, #118	; 0x76
 8000930:	425b      	negs	r3, r3
 8000932:	4690      	mov	r8, r2
 8000934:	1a1b      	subs	r3, r3, r0
 8000936:	2200      	movs	r2, #0
 8000938:	e77d      	b.n	8000836 <__aeabi_fdiv+0x56>
 800093a:	23ff      	movs	r3, #255	; 0xff
 800093c:	2203      	movs	r2, #3
 800093e:	e77a      	b.n	8000836 <__aeabi_fdiv+0x56>
 8000940:	000e      	movs	r6, r1
 8000942:	20ff      	movs	r0, #255	; 0xff
 8000944:	2500      	movs	r5, #0
 8000946:	e7ac      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 8000948:	2001      	movs	r0, #1
 800094a:	1ac0      	subs	r0, r0, r3
 800094c:	281b      	cmp	r0, #27
 800094e:	dca6      	bgt.n	800089e <__aeabi_fdiv+0xbe>
 8000950:	379e      	adds	r7, #158	; 0x9e
 8000952:	002a      	movs	r2, r5
 8000954:	40bd      	lsls	r5, r7
 8000956:	40c2      	lsrs	r2, r0
 8000958:	1e6b      	subs	r3, r5, #1
 800095a:	419d      	sbcs	r5, r3
 800095c:	4315      	orrs	r5, r2
 800095e:	076b      	lsls	r3, r5, #29
 8000960:	d004      	beq.n	800096c <__aeabi_fdiv+0x18c>
 8000962:	230f      	movs	r3, #15
 8000964:	402b      	ands	r3, r5
 8000966:	2b04      	cmp	r3, #4
 8000968:	d000      	beq.n	800096c <__aeabi_fdiv+0x18c>
 800096a:	3504      	adds	r5, #4
 800096c:	016b      	lsls	r3, r5, #5
 800096e:	d544      	bpl.n	80009fa <__aeabi_fdiv+0x21a>
 8000970:	2001      	movs	r0, #1
 8000972:	2500      	movs	r5, #0
 8000974:	e795      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 8000976:	20ff      	movs	r0, #255	; 0xff
 8000978:	2500      	movs	r5, #0
 800097a:	e792      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 800097c:	2580      	movs	r5, #128	; 0x80
 800097e:	2600      	movs	r6, #0
 8000980:	20ff      	movs	r0, #255	; 0xff
 8000982:	03ed      	lsls	r5, r5, #15
 8000984:	e78d      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 8000986:	2300      	movs	r3, #0
 8000988:	4698      	mov	r8, r3
 800098a:	2080      	movs	r0, #128	; 0x80
 800098c:	03c0      	lsls	r0, r0, #15
 800098e:	4205      	tst	r5, r0
 8000990:	d009      	beq.n	80009a6 <__aeabi_fdiv+0x1c6>
 8000992:	4643      	mov	r3, r8
 8000994:	4203      	tst	r3, r0
 8000996:	d106      	bne.n	80009a6 <__aeabi_fdiv+0x1c6>
 8000998:	4645      	mov	r5, r8
 800099a:	4305      	orrs	r5, r0
 800099c:	026d      	lsls	r5, r5, #9
 800099e:	0026      	movs	r6, r4
 80009a0:	20ff      	movs	r0, #255	; 0xff
 80009a2:	0a6d      	lsrs	r5, r5, #9
 80009a4:	e77d      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 80009a6:	2080      	movs	r0, #128	; 0x80
 80009a8:	03c0      	lsls	r0, r0, #15
 80009aa:	4305      	orrs	r5, r0
 80009ac:	026d      	lsls	r5, r5, #9
 80009ae:	20ff      	movs	r0, #255	; 0xff
 80009b0:	0a6d      	lsrs	r5, r5, #9
 80009b2:	e776      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 80009b4:	4642      	mov	r2, r8
 80009b6:	016b      	lsls	r3, r5, #5
 80009b8:	0150      	lsls	r0, r2, #5
 80009ba:	4283      	cmp	r3, r0
 80009bc:	d219      	bcs.n	80009f2 <__aeabi_fdiv+0x212>
 80009be:	221b      	movs	r2, #27
 80009c0:	2500      	movs	r5, #0
 80009c2:	3f01      	subs	r7, #1
 80009c4:	2601      	movs	r6, #1
 80009c6:	001c      	movs	r4, r3
 80009c8:	006d      	lsls	r5, r5, #1
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	2c00      	cmp	r4, #0
 80009ce:	db01      	blt.n	80009d4 <__aeabi_fdiv+0x1f4>
 80009d0:	4298      	cmp	r0, r3
 80009d2:	d801      	bhi.n	80009d8 <__aeabi_fdiv+0x1f8>
 80009d4:	1a1b      	subs	r3, r3, r0
 80009d6:	4335      	orrs	r5, r6
 80009d8:	3a01      	subs	r2, #1
 80009da:	2a00      	cmp	r2, #0
 80009dc:	d1f3      	bne.n	80009c6 <__aeabi_fdiv+0x1e6>
 80009de:	1e5a      	subs	r2, r3, #1
 80009e0:	4193      	sbcs	r3, r2
 80009e2:	431d      	orrs	r5, r3
 80009e4:	003b      	movs	r3, r7
 80009e6:	337f      	adds	r3, #127	; 0x7f
 80009e8:	000e      	movs	r6, r1
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	dd00      	ble.n	80009f0 <__aeabi_fdiv+0x210>
 80009ee:	e741      	b.n	8000874 <__aeabi_fdiv+0x94>
 80009f0:	e7aa      	b.n	8000948 <__aeabi_fdiv+0x168>
 80009f2:	221a      	movs	r2, #26
 80009f4:	2501      	movs	r5, #1
 80009f6:	1a1b      	subs	r3, r3, r0
 80009f8:	e7e4      	b.n	80009c4 <__aeabi_fdiv+0x1e4>
 80009fa:	01ad      	lsls	r5, r5, #6
 80009fc:	2000      	movs	r0, #0
 80009fe:	0a6d      	lsrs	r5, r5, #9
 8000a00:	e74f      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	080069e4 	.word	0x080069e4
 8000a08:	f7ffffff 	.word	0xf7ffffff
 8000a0c:	08006a24 	.word	0x08006a24

08000a10 <__eqsf2>:
 8000a10:	b570      	push	{r4, r5, r6, lr}
 8000a12:	0042      	lsls	r2, r0, #1
 8000a14:	0245      	lsls	r5, r0, #9
 8000a16:	024e      	lsls	r6, r1, #9
 8000a18:	004c      	lsls	r4, r1, #1
 8000a1a:	0fc3      	lsrs	r3, r0, #31
 8000a1c:	0a6d      	lsrs	r5, r5, #9
 8000a1e:	2001      	movs	r0, #1
 8000a20:	0e12      	lsrs	r2, r2, #24
 8000a22:	0a76      	lsrs	r6, r6, #9
 8000a24:	0e24      	lsrs	r4, r4, #24
 8000a26:	0fc9      	lsrs	r1, r1, #31
 8000a28:	2aff      	cmp	r2, #255	; 0xff
 8000a2a:	d006      	beq.n	8000a3a <__eqsf2+0x2a>
 8000a2c:	2cff      	cmp	r4, #255	; 0xff
 8000a2e:	d003      	beq.n	8000a38 <__eqsf2+0x28>
 8000a30:	42a2      	cmp	r2, r4
 8000a32:	d101      	bne.n	8000a38 <__eqsf2+0x28>
 8000a34:	42b5      	cmp	r5, r6
 8000a36:	d006      	beq.n	8000a46 <__eqsf2+0x36>
 8000a38:	bd70      	pop	{r4, r5, r6, pc}
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d1fc      	bne.n	8000a38 <__eqsf2+0x28>
 8000a3e:	2cff      	cmp	r4, #255	; 0xff
 8000a40:	d1fa      	bne.n	8000a38 <__eqsf2+0x28>
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	d1f8      	bne.n	8000a38 <__eqsf2+0x28>
 8000a46:	428b      	cmp	r3, r1
 8000a48:	d006      	beq.n	8000a58 <__eqsf2+0x48>
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	d1f3      	bne.n	8000a38 <__eqsf2+0x28>
 8000a50:	0028      	movs	r0, r5
 8000a52:	1e43      	subs	r3, r0, #1
 8000a54:	4198      	sbcs	r0, r3
 8000a56:	e7ef      	b.n	8000a38 <__eqsf2+0x28>
 8000a58:	2000      	movs	r0, #0
 8000a5a:	e7ed      	b.n	8000a38 <__eqsf2+0x28>

08000a5c <__gesf2>:
 8000a5c:	b570      	push	{r4, r5, r6, lr}
 8000a5e:	0042      	lsls	r2, r0, #1
 8000a60:	0245      	lsls	r5, r0, #9
 8000a62:	024e      	lsls	r6, r1, #9
 8000a64:	004c      	lsls	r4, r1, #1
 8000a66:	0fc3      	lsrs	r3, r0, #31
 8000a68:	0a6d      	lsrs	r5, r5, #9
 8000a6a:	0e12      	lsrs	r2, r2, #24
 8000a6c:	0a76      	lsrs	r6, r6, #9
 8000a6e:	0e24      	lsrs	r4, r4, #24
 8000a70:	0fc8      	lsrs	r0, r1, #31
 8000a72:	2aff      	cmp	r2, #255	; 0xff
 8000a74:	d01b      	beq.n	8000aae <__gesf2+0x52>
 8000a76:	2cff      	cmp	r4, #255	; 0xff
 8000a78:	d00e      	beq.n	8000a98 <__gesf2+0x3c>
 8000a7a:	2a00      	cmp	r2, #0
 8000a7c:	d11b      	bne.n	8000ab6 <__gesf2+0x5a>
 8000a7e:	2c00      	cmp	r4, #0
 8000a80:	d101      	bne.n	8000a86 <__gesf2+0x2a>
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d01c      	beq.n	8000ac0 <__gesf2+0x64>
 8000a86:	2d00      	cmp	r5, #0
 8000a88:	d00c      	beq.n	8000aa4 <__gesf2+0x48>
 8000a8a:	4283      	cmp	r3, r0
 8000a8c:	d01c      	beq.n	8000ac8 <__gesf2+0x6c>
 8000a8e:	2102      	movs	r1, #2
 8000a90:	1e58      	subs	r0, r3, #1
 8000a92:	4008      	ands	r0, r1
 8000a94:	3801      	subs	r0, #1
 8000a96:	bd70      	pop	{r4, r5, r6, pc}
 8000a98:	2e00      	cmp	r6, #0
 8000a9a:	d122      	bne.n	8000ae2 <__gesf2+0x86>
 8000a9c:	2a00      	cmp	r2, #0
 8000a9e:	d1f4      	bne.n	8000a8a <__gesf2+0x2e>
 8000aa0:	2d00      	cmp	r5, #0
 8000aa2:	d1f2      	bne.n	8000a8a <__gesf2+0x2e>
 8000aa4:	2800      	cmp	r0, #0
 8000aa6:	d1f6      	bne.n	8000a96 <__gesf2+0x3a>
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	4240      	negs	r0, r0
 8000aac:	e7f3      	b.n	8000a96 <__gesf2+0x3a>
 8000aae:	2d00      	cmp	r5, #0
 8000ab0:	d117      	bne.n	8000ae2 <__gesf2+0x86>
 8000ab2:	2cff      	cmp	r4, #255	; 0xff
 8000ab4:	d0f0      	beq.n	8000a98 <__gesf2+0x3c>
 8000ab6:	2c00      	cmp	r4, #0
 8000ab8:	d1e7      	bne.n	8000a8a <__gesf2+0x2e>
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	d1e5      	bne.n	8000a8a <__gesf2+0x2e>
 8000abe:	e7e6      	b.n	8000a8e <__gesf2+0x32>
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d0e7      	beq.n	8000a96 <__gesf2+0x3a>
 8000ac6:	e7e2      	b.n	8000a8e <__gesf2+0x32>
 8000ac8:	42a2      	cmp	r2, r4
 8000aca:	dc05      	bgt.n	8000ad8 <__gesf2+0x7c>
 8000acc:	dbea      	blt.n	8000aa4 <__gesf2+0x48>
 8000ace:	42b5      	cmp	r5, r6
 8000ad0:	d802      	bhi.n	8000ad8 <__gesf2+0x7c>
 8000ad2:	d3e7      	bcc.n	8000aa4 <__gesf2+0x48>
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	e7de      	b.n	8000a96 <__gesf2+0x3a>
 8000ad8:	4243      	negs	r3, r0
 8000ada:	4158      	adcs	r0, r3
 8000adc:	0040      	lsls	r0, r0, #1
 8000ade:	3801      	subs	r0, #1
 8000ae0:	e7d9      	b.n	8000a96 <__gesf2+0x3a>
 8000ae2:	2002      	movs	r0, #2
 8000ae4:	4240      	negs	r0, r0
 8000ae6:	e7d6      	b.n	8000a96 <__gesf2+0x3a>

08000ae8 <__lesf2>:
 8000ae8:	b570      	push	{r4, r5, r6, lr}
 8000aea:	0042      	lsls	r2, r0, #1
 8000aec:	0245      	lsls	r5, r0, #9
 8000aee:	024e      	lsls	r6, r1, #9
 8000af0:	004c      	lsls	r4, r1, #1
 8000af2:	0fc3      	lsrs	r3, r0, #31
 8000af4:	0a6d      	lsrs	r5, r5, #9
 8000af6:	0e12      	lsrs	r2, r2, #24
 8000af8:	0a76      	lsrs	r6, r6, #9
 8000afa:	0e24      	lsrs	r4, r4, #24
 8000afc:	0fc8      	lsrs	r0, r1, #31
 8000afe:	2aff      	cmp	r2, #255	; 0xff
 8000b00:	d00b      	beq.n	8000b1a <__lesf2+0x32>
 8000b02:	2cff      	cmp	r4, #255	; 0xff
 8000b04:	d00d      	beq.n	8000b22 <__lesf2+0x3a>
 8000b06:	2a00      	cmp	r2, #0
 8000b08:	d11f      	bne.n	8000b4a <__lesf2+0x62>
 8000b0a:	2c00      	cmp	r4, #0
 8000b0c:	d116      	bne.n	8000b3c <__lesf2+0x54>
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d114      	bne.n	8000b3c <__lesf2+0x54>
 8000b12:	2000      	movs	r0, #0
 8000b14:	2d00      	cmp	r5, #0
 8000b16:	d010      	beq.n	8000b3a <__lesf2+0x52>
 8000b18:	e009      	b.n	8000b2e <__lesf2+0x46>
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d10c      	bne.n	8000b38 <__lesf2+0x50>
 8000b1e:	2cff      	cmp	r4, #255	; 0xff
 8000b20:	d113      	bne.n	8000b4a <__lesf2+0x62>
 8000b22:	2e00      	cmp	r6, #0
 8000b24:	d108      	bne.n	8000b38 <__lesf2+0x50>
 8000b26:	2a00      	cmp	r2, #0
 8000b28:	d008      	beq.n	8000b3c <__lesf2+0x54>
 8000b2a:	4283      	cmp	r3, r0
 8000b2c:	d012      	beq.n	8000b54 <__lesf2+0x6c>
 8000b2e:	2102      	movs	r1, #2
 8000b30:	1e58      	subs	r0, r3, #1
 8000b32:	4008      	ands	r0, r1
 8000b34:	3801      	subs	r0, #1
 8000b36:	e000      	b.n	8000b3a <__lesf2+0x52>
 8000b38:	2002      	movs	r0, #2
 8000b3a:	bd70      	pop	{r4, r5, r6, pc}
 8000b3c:	2d00      	cmp	r5, #0
 8000b3e:	d1f4      	bne.n	8000b2a <__lesf2+0x42>
 8000b40:	2800      	cmp	r0, #0
 8000b42:	d1fa      	bne.n	8000b3a <__lesf2+0x52>
 8000b44:	2001      	movs	r0, #1
 8000b46:	4240      	negs	r0, r0
 8000b48:	e7f7      	b.n	8000b3a <__lesf2+0x52>
 8000b4a:	2c00      	cmp	r4, #0
 8000b4c:	d1ed      	bne.n	8000b2a <__lesf2+0x42>
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d1eb      	bne.n	8000b2a <__lesf2+0x42>
 8000b52:	e7ec      	b.n	8000b2e <__lesf2+0x46>
 8000b54:	42a2      	cmp	r2, r4
 8000b56:	dc05      	bgt.n	8000b64 <__lesf2+0x7c>
 8000b58:	dbf2      	blt.n	8000b40 <__lesf2+0x58>
 8000b5a:	42b5      	cmp	r5, r6
 8000b5c:	d802      	bhi.n	8000b64 <__lesf2+0x7c>
 8000b5e:	d3ef      	bcc.n	8000b40 <__lesf2+0x58>
 8000b60:	2000      	movs	r0, #0
 8000b62:	e7ea      	b.n	8000b3a <__lesf2+0x52>
 8000b64:	4243      	negs	r3, r0
 8000b66:	4158      	adcs	r0, r3
 8000b68:	0040      	lsls	r0, r0, #1
 8000b6a:	3801      	subs	r0, #1
 8000b6c:	e7e5      	b.n	8000b3a <__lesf2+0x52>
 8000b6e:	46c0      	nop			; (mov r8, r8)

08000b70 <__aeabi_fmul>:
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	464f      	mov	r7, r9
 8000b74:	4646      	mov	r6, r8
 8000b76:	46d6      	mov	lr, sl
 8000b78:	0244      	lsls	r4, r0, #9
 8000b7a:	0045      	lsls	r5, r0, #1
 8000b7c:	b5c0      	push	{r6, r7, lr}
 8000b7e:	0a64      	lsrs	r4, r4, #9
 8000b80:	1c0f      	adds	r7, r1, #0
 8000b82:	0e2d      	lsrs	r5, r5, #24
 8000b84:	0fc6      	lsrs	r6, r0, #31
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	d100      	bne.n	8000b8c <__aeabi_fmul+0x1c>
 8000b8a:	e08d      	b.n	8000ca8 <__aeabi_fmul+0x138>
 8000b8c:	2dff      	cmp	r5, #255	; 0xff
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_fmul+0x22>
 8000b90:	e092      	b.n	8000cb8 <__aeabi_fmul+0x148>
 8000b92:	2300      	movs	r3, #0
 8000b94:	2080      	movs	r0, #128	; 0x80
 8000b96:	4699      	mov	r9, r3
 8000b98:	469a      	mov	sl, r3
 8000b9a:	00e4      	lsls	r4, r4, #3
 8000b9c:	04c0      	lsls	r0, r0, #19
 8000b9e:	4304      	orrs	r4, r0
 8000ba0:	3d7f      	subs	r5, #127	; 0x7f
 8000ba2:	0278      	lsls	r0, r7, #9
 8000ba4:	0a43      	lsrs	r3, r0, #9
 8000ba6:	4698      	mov	r8, r3
 8000ba8:	007b      	lsls	r3, r7, #1
 8000baa:	0e1b      	lsrs	r3, r3, #24
 8000bac:	0fff      	lsrs	r7, r7, #31
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_fmul+0x44>
 8000bb2:	e070      	b.n	8000c96 <__aeabi_fmul+0x126>
 8000bb4:	2bff      	cmp	r3, #255	; 0xff
 8000bb6:	d100      	bne.n	8000bba <__aeabi_fmul+0x4a>
 8000bb8:	e086      	b.n	8000cc8 <__aeabi_fmul+0x158>
 8000bba:	4642      	mov	r2, r8
 8000bbc:	00d0      	lsls	r0, r2, #3
 8000bbe:	2280      	movs	r2, #128	; 0x80
 8000bc0:	3b7f      	subs	r3, #127	; 0x7f
 8000bc2:	18ed      	adds	r5, r5, r3
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	04d2      	lsls	r2, r2, #19
 8000bc8:	4302      	orrs	r2, r0
 8000bca:	4690      	mov	r8, r2
 8000bcc:	469c      	mov	ip, r3
 8000bce:	0031      	movs	r1, r6
 8000bd0:	464b      	mov	r3, r9
 8000bd2:	4079      	eors	r1, r7
 8000bd4:	1c68      	adds	r0, r5, #1
 8000bd6:	2b0f      	cmp	r3, #15
 8000bd8:	d81c      	bhi.n	8000c14 <__aeabi_fmul+0xa4>
 8000bda:	4a76      	ldr	r2, [pc, #472]	; (8000db4 <__aeabi_fmul+0x244>)
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	58d3      	ldr	r3, [r2, r3]
 8000be0:	469f      	mov	pc, r3
 8000be2:	0039      	movs	r1, r7
 8000be4:	4644      	mov	r4, r8
 8000be6:	46e2      	mov	sl, ip
 8000be8:	4653      	mov	r3, sl
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d00f      	beq.n	8000c0e <__aeabi_fmul+0x9e>
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fmul+0x84>
 8000bf2:	e0d7      	b.n	8000da4 <__aeabi_fmul+0x234>
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d137      	bne.n	8000c68 <__aeabi_fmul+0xf8>
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	2400      	movs	r4, #0
 8000bfc:	05c0      	lsls	r0, r0, #23
 8000bfe:	4320      	orrs	r0, r4
 8000c00:	07c9      	lsls	r1, r1, #31
 8000c02:	4308      	orrs	r0, r1
 8000c04:	bce0      	pop	{r5, r6, r7}
 8000c06:	46ba      	mov	sl, r7
 8000c08:	46b1      	mov	r9, r6
 8000c0a:	46a8      	mov	r8, r5
 8000c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c0e:	20ff      	movs	r0, #255	; 0xff
 8000c10:	2400      	movs	r4, #0
 8000c12:	e7f3      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000c14:	0c26      	lsrs	r6, r4, #16
 8000c16:	0424      	lsls	r4, r4, #16
 8000c18:	0c22      	lsrs	r2, r4, #16
 8000c1a:	4644      	mov	r4, r8
 8000c1c:	0424      	lsls	r4, r4, #16
 8000c1e:	0c24      	lsrs	r4, r4, #16
 8000c20:	4643      	mov	r3, r8
 8000c22:	0027      	movs	r7, r4
 8000c24:	0c1b      	lsrs	r3, r3, #16
 8000c26:	4357      	muls	r7, r2
 8000c28:	4374      	muls	r4, r6
 8000c2a:	435a      	muls	r2, r3
 8000c2c:	435e      	muls	r6, r3
 8000c2e:	1912      	adds	r2, r2, r4
 8000c30:	0c3b      	lsrs	r3, r7, #16
 8000c32:	189b      	adds	r3, r3, r2
 8000c34:	429c      	cmp	r4, r3
 8000c36:	d903      	bls.n	8000c40 <__aeabi_fmul+0xd0>
 8000c38:	2280      	movs	r2, #128	; 0x80
 8000c3a:	0252      	lsls	r2, r2, #9
 8000c3c:	4694      	mov	ip, r2
 8000c3e:	4466      	add	r6, ip
 8000c40:	043f      	lsls	r7, r7, #16
 8000c42:	041a      	lsls	r2, r3, #16
 8000c44:	0c3f      	lsrs	r7, r7, #16
 8000c46:	19d2      	adds	r2, r2, r7
 8000c48:	0194      	lsls	r4, r2, #6
 8000c4a:	1e67      	subs	r7, r4, #1
 8000c4c:	41bc      	sbcs	r4, r7
 8000c4e:	0c1b      	lsrs	r3, r3, #16
 8000c50:	0e92      	lsrs	r2, r2, #26
 8000c52:	199b      	adds	r3, r3, r6
 8000c54:	4314      	orrs	r4, r2
 8000c56:	019b      	lsls	r3, r3, #6
 8000c58:	431c      	orrs	r4, r3
 8000c5a:	011b      	lsls	r3, r3, #4
 8000c5c:	d400      	bmi.n	8000c60 <__aeabi_fmul+0xf0>
 8000c5e:	e09b      	b.n	8000d98 <__aeabi_fmul+0x228>
 8000c60:	2301      	movs	r3, #1
 8000c62:	0862      	lsrs	r2, r4, #1
 8000c64:	401c      	ands	r4, r3
 8000c66:	4314      	orrs	r4, r2
 8000c68:	0002      	movs	r2, r0
 8000c6a:	327f      	adds	r2, #127	; 0x7f
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	dd64      	ble.n	8000d3a <__aeabi_fmul+0x1ca>
 8000c70:	0763      	lsls	r3, r4, #29
 8000c72:	d004      	beq.n	8000c7e <__aeabi_fmul+0x10e>
 8000c74:	230f      	movs	r3, #15
 8000c76:	4023      	ands	r3, r4
 8000c78:	2b04      	cmp	r3, #4
 8000c7a:	d000      	beq.n	8000c7e <__aeabi_fmul+0x10e>
 8000c7c:	3404      	adds	r4, #4
 8000c7e:	0123      	lsls	r3, r4, #4
 8000c80:	d503      	bpl.n	8000c8a <__aeabi_fmul+0x11a>
 8000c82:	0002      	movs	r2, r0
 8000c84:	4b4c      	ldr	r3, [pc, #304]	; (8000db8 <__aeabi_fmul+0x248>)
 8000c86:	3280      	adds	r2, #128	; 0x80
 8000c88:	401c      	ands	r4, r3
 8000c8a:	2afe      	cmp	r2, #254	; 0xfe
 8000c8c:	dcbf      	bgt.n	8000c0e <__aeabi_fmul+0x9e>
 8000c8e:	01a4      	lsls	r4, r4, #6
 8000c90:	0a64      	lsrs	r4, r4, #9
 8000c92:	b2d0      	uxtb	r0, r2
 8000c94:	e7b2      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000c96:	4643      	mov	r3, r8
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d13d      	bne.n	8000d18 <__aeabi_fmul+0x1a8>
 8000c9c:	464a      	mov	r2, r9
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	4691      	mov	r9, r2
 8000ca4:	469c      	mov	ip, r3
 8000ca6:	e792      	b.n	8000bce <__aeabi_fmul+0x5e>
 8000ca8:	2c00      	cmp	r4, #0
 8000caa:	d129      	bne.n	8000d00 <__aeabi_fmul+0x190>
 8000cac:	2304      	movs	r3, #4
 8000cae:	4699      	mov	r9, r3
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	2500      	movs	r5, #0
 8000cb4:	469a      	mov	sl, r3
 8000cb6:	e774      	b.n	8000ba2 <__aeabi_fmul+0x32>
 8000cb8:	2c00      	cmp	r4, #0
 8000cba:	d11b      	bne.n	8000cf4 <__aeabi_fmul+0x184>
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	4699      	mov	r9, r3
 8000cc0:	3b06      	subs	r3, #6
 8000cc2:	25ff      	movs	r5, #255	; 0xff
 8000cc4:	469a      	mov	sl, r3
 8000cc6:	e76c      	b.n	8000ba2 <__aeabi_fmul+0x32>
 8000cc8:	4643      	mov	r3, r8
 8000cca:	35ff      	adds	r5, #255	; 0xff
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d10b      	bne.n	8000ce8 <__aeabi_fmul+0x178>
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	464a      	mov	r2, r9
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	4691      	mov	r9, r2
 8000cd8:	469c      	mov	ip, r3
 8000cda:	e778      	b.n	8000bce <__aeabi_fmul+0x5e>
 8000cdc:	4653      	mov	r3, sl
 8000cde:	0031      	movs	r1, r6
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d000      	beq.n	8000ce6 <__aeabi_fmul+0x176>
 8000ce4:	e783      	b.n	8000bee <__aeabi_fmul+0x7e>
 8000ce6:	e792      	b.n	8000c0e <__aeabi_fmul+0x9e>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	464a      	mov	r2, r9
 8000cec:	431a      	orrs	r2, r3
 8000cee:	4691      	mov	r9, r2
 8000cf0:	469c      	mov	ip, r3
 8000cf2:	e76c      	b.n	8000bce <__aeabi_fmul+0x5e>
 8000cf4:	230c      	movs	r3, #12
 8000cf6:	4699      	mov	r9, r3
 8000cf8:	3b09      	subs	r3, #9
 8000cfa:	25ff      	movs	r5, #255	; 0xff
 8000cfc:	469a      	mov	sl, r3
 8000cfe:	e750      	b.n	8000ba2 <__aeabi_fmul+0x32>
 8000d00:	0020      	movs	r0, r4
 8000d02:	f000 facf 	bl	80012a4 <__clzsi2>
 8000d06:	2576      	movs	r5, #118	; 0x76
 8000d08:	1f43      	subs	r3, r0, #5
 8000d0a:	409c      	lsls	r4, r3
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	426d      	negs	r5, r5
 8000d10:	4699      	mov	r9, r3
 8000d12:	469a      	mov	sl, r3
 8000d14:	1a2d      	subs	r5, r5, r0
 8000d16:	e744      	b.n	8000ba2 <__aeabi_fmul+0x32>
 8000d18:	4640      	mov	r0, r8
 8000d1a:	f000 fac3 	bl	80012a4 <__clzsi2>
 8000d1e:	4642      	mov	r2, r8
 8000d20:	1f43      	subs	r3, r0, #5
 8000d22:	409a      	lsls	r2, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	1a2d      	subs	r5, r5, r0
 8000d28:	4690      	mov	r8, r2
 8000d2a:	469c      	mov	ip, r3
 8000d2c:	3d76      	subs	r5, #118	; 0x76
 8000d2e:	e74e      	b.n	8000bce <__aeabi_fmul+0x5e>
 8000d30:	2480      	movs	r4, #128	; 0x80
 8000d32:	2100      	movs	r1, #0
 8000d34:	20ff      	movs	r0, #255	; 0xff
 8000d36:	03e4      	lsls	r4, r4, #15
 8000d38:	e760      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	1a9b      	subs	r3, r3, r2
 8000d3e:	2b1b      	cmp	r3, #27
 8000d40:	dd00      	ble.n	8000d44 <__aeabi_fmul+0x1d4>
 8000d42:	e759      	b.n	8000bf8 <__aeabi_fmul+0x88>
 8000d44:	0022      	movs	r2, r4
 8000d46:	309e      	adds	r0, #158	; 0x9e
 8000d48:	40da      	lsrs	r2, r3
 8000d4a:	4084      	lsls	r4, r0
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	1e62      	subs	r2, r4, #1
 8000d50:	4194      	sbcs	r4, r2
 8000d52:	431c      	orrs	r4, r3
 8000d54:	0763      	lsls	r3, r4, #29
 8000d56:	d004      	beq.n	8000d62 <__aeabi_fmul+0x1f2>
 8000d58:	230f      	movs	r3, #15
 8000d5a:	4023      	ands	r3, r4
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	d000      	beq.n	8000d62 <__aeabi_fmul+0x1f2>
 8000d60:	3404      	adds	r4, #4
 8000d62:	0163      	lsls	r3, r4, #5
 8000d64:	d51a      	bpl.n	8000d9c <__aeabi_fmul+0x22c>
 8000d66:	2001      	movs	r0, #1
 8000d68:	2400      	movs	r4, #0
 8000d6a:	e747      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000d6c:	2080      	movs	r0, #128	; 0x80
 8000d6e:	03c0      	lsls	r0, r0, #15
 8000d70:	4204      	tst	r4, r0
 8000d72:	d009      	beq.n	8000d88 <__aeabi_fmul+0x218>
 8000d74:	4643      	mov	r3, r8
 8000d76:	4203      	tst	r3, r0
 8000d78:	d106      	bne.n	8000d88 <__aeabi_fmul+0x218>
 8000d7a:	4644      	mov	r4, r8
 8000d7c:	4304      	orrs	r4, r0
 8000d7e:	0264      	lsls	r4, r4, #9
 8000d80:	0039      	movs	r1, r7
 8000d82:	20ff      	movs	r0, #255	; 0xff
 8000d84:	0a64      	lsrs	r4, r4, #9
 8000d86:	e739      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000d88:	2080      	movs	r0, #128	; 0x80
 8000d8a:	03c0      	lsls	r0, r0, #15
 8000d8c:	4304      	orrs	r4, r0
 8000d8e:	0264      	lsls	r4, r4, #9
 8000d90:	0031      	movs	r1, r6
 8000d92:	20ff      	movs	r0, #255	; 0xff
 8000d94:	0a64      	lsrs	r4, r4, #9
 8000d96:	e731      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000d98:	0028      	movs	r0, r5
 8000d9a:	e765      	b.n	8000c68 <__aeabi_fmul+0xf8>
 8000d9c:	01a4      	lsls	r4, r4, #6
 8000d9e:	2000      	movs	r0, #0
 8000da0:	0a64      	lsrs	r4, r4, #9
 8000da2:	e72b      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000da4:	2080      	movs	r0, #128	; 0x80
 8000da6:	03c0      	lsls	r0, r0, #15
 8000da8:	4304      	orrs	r4, r0
 8000daa:	0264      	lsls	r4, r4, #9
 8000dac:	20ff      	movs	r0, #255	; 0xff
 8000dae:	0a64      	lsrs	r4, r4, #9
 8000db0:	e724      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	08006a64 	.word	0x08006a64
 8000db8:	f7ffffff 	.word	0xf7ffffff

08000dbc <__aeabi_fsub>:
 8000dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dbe:	46ce      	mov	lr, r9
 8000dc0:	4647      	mov	r7, r8
 8000dc2:	0243      	lsls	r3, r0, #9
 8000dc4:	0a5b      	lsrs	r3, r3, #9
 8000dc6:	024e      	lsls	r6, r1, #9
 8000dc8:	00da      	lsls	r2, r3, #3
 8000dca:	4694      	mov	ip, r2
 8000dcc:	0a72      	lsrs	r2, r6, #9
 8000dce:	4691      	mov	r9, r2
 8000dd0:	0045      	lsls	r5, r0, #1
 8000dd2:	004a      	lsls	r2, r1, #1
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	0e2d      	lsrs	r5, r5, #24
 8000dd8:	001f      	movs	r7, r3
 8000dda:	0fc4      	lsrs	r4, r0, #31
 8000ddc:	0e12      	lsrs	r2, r2, #24
 8000dde:	0fc9      	lsrs	r1, r1, #31
 8000de0:	09b6      	lsrs	r6, r6, #6
 8000de2:	2aff      	cmp	r2, #255	; 0xff
 8000de4:	d05b      	beq.n	8000e9e <__aeabi_fsub+0xe2>
 8000de6:	2001      	movs	r0, #1
 8000de8:	4041      	eors	r1, r0
 8000dea:	428c      	cmp	r4, r1
 8000dec:	d039      	beq.n	8000e62 <__aeabi_fsub+0xa6>
 8000dee:	1aa8      	subs	r0, r5, r2
 8000df0:	2800      	cmp	r0, #0
 8000df2:	dd5a      	ble.n	8000eaa <__aeabi_fsub+0xee>
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	d06a      	beq.n	8000ece <__aeabi_fsub+0x112>
 8000df8:	2dff      	cmp	r5, #255	; 0xff
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_fsub+0x42>
 8000dfc:	e0d9      	b.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000dfe:	2280      	movs	r2, #128	; 0x80
 8000e00:	04d2      	lsls	r2, r2, #19
 8000e02:	4316      	orrs	r6, r2
 8000e04:	281b      	cmp	r0, #27
 8000e06:	dc00      	bgt.n	8000e0a <__aeabi_fsub+0x4e>
 8000e08:	e0e9      	b.n	8000fde <__aeabi_fsub+0x222>
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	4663      	mov	r3, ip
 8000e0e:	1a18      	subs	r0, r3, r0
 8000e10:	0143      	lsls	r3, r0, #5
 8000e12:	d400      	bmi.n	8000e16 <__aeabi_fsub+0x5a>
 8000e14:	e0b4      	b.n	8000f80 <__aeabi_fsub+0x1c4>
 8000e16:	0180      	lsls	r0, r0, #6
 8000e18:	0987      	lsrs	r7, r0, #6
 8000e1a:	0038      	movs	r0, r7
 8000e1c:	f000 fa42 	bl	80012a4 <__clzsi2>
 8000e20:	3805      	subs	r0, #5
 8000e22:	4087      	lsls	r7, r0
 8000e24:	4285      	cmp	r5, r0
 8000e26:	dc00      	bgt.n	8000e2a <__aeabi_fsub+0x6e>
 8000e28:	e0cc      	b.n	8000fc4 <__aeabi_fsub+0x208>
 8000e2a:	1a2d      	subs	r5, r5, r0
 8000e2c:	48b5      	ldr	r0, [pc, #724]	; (8001104 <__aeabi_fsub+0x348>)
 8000e2e:	4038      	ands	r0, r7
 8000e30:	0743      	lsls	r3, r0, #29
 8000e32:	d004      	beq.n	8000e3e <__aeabi_fsub+0x82>
 8000e34:	230f      	movs	r3, #15
 8000e36:	4003      	ands	r3, r0
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	d000      	beq.n	8000e3e <__aeabi_fsub+0x82>
 8000e3c:	3004      	adds	r0, #4
 8000e3e:	0143      	lsls	r3, r0, #5
 8000e40:	d400      	bmi.n	8000e44 <__aeabi_fsub+0x88>
 8000e42:	e0a0      	b.n	8000f86 <__aeabi_fsub+0x1ca>
 8000e44:	1c6a      	adds	r2, r5, #1
 8000e46:	2dfe      	cmp	r5, #254	; 0xfe
 8000e48:	d100      	bne.n	8000e4c <__aeabi_fsub+0x90>
 8000e4a:	e08d      	b.n	8000f68 <__aeabi_fsub+0x1ac>
 8000e4c:	0180      	lsls	r0, r0, #6
 8000e4e:	0a47      	lsrs	r7, r0, #9
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	05d0      	lsls	r0, r2, #23
 8000e54:	4338      	orrs	r0, r7
 8000e56:	07e4      	lsls	r4, r4, #31
 8000e58:	4320      	orrs	r0, r4
 8000e5a:	bcc0      	pop	{r6, r7}
 8000e5c:	46b9      	mov	r9, r7
 8000e5e:	46b0      	mov	r8, r6
 8000e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e62:	1aa8      	subs	r0, r5, r2
 8000e64:	4680      	mov	r8, r0
 8000e66:	2800      	cmp	r0, #0
 8000e68:	dd45      	ble.n	8000ef6 <__aeabi_fsub+0x13a>
 8000e6a:	2a00      	cmp	r2, #0
 8000e6c:	d070      	beq.n	8000f50 <__aeabi_fsub+0x194>
 8000e6e:	2dff      	cmp	r5, #255	; 0xff
 8000e70:	d100      	bne.n	8000e74 <__aeabi_fsub+0xb8>
 8000e72:	e09e      	b.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	04db      	lsls	r3, r3, #19
 8000e78:	431e      	orrs	r6, r3
 8000e7a:	4643      	mov	r3, r8
 8000e7c:	2b1b      	cmp	r3, #27
 8000e7e:	dc00      	bgt.n	8000e82 <__aeabi_fsub+0xc6>
 8000e80:	e0d2      	b.n	8001028 <__aeabi_fsub+0x26c>
 8000e82:	2001      	movs	r0, #1
 8000e84:	4460      	add	r0, ip
 8000e86:	0143      	lsls	r3, r0, #5
 8000e88:	d57a      	bpl.n	8000f80 <__aeabi_fsub+0x1c4>
 8000e8a:	3501      	adds	r5, #1
 8000e8c:	2dff      	cmp	r5, #255	; 0xff
 8000e8e:	d06b      	beq.n	8000f68 <__aeabi_fsub+0x1ac>
 8000e90:	2301      	movs	r3, #1
 8000e92:	4a9d      	ldr	r2, [pc, #628]	; (8001108 <__aeabi_fsub+0x34c>)
 8000e94:	4003      	ands	r3, r0
 8000e96:	0840      	lsrs	r0, r0, #1
 8000e98:	4010      	ands	r0, r2
 8000e9a:	4318      	orrs	r0, r3
 8000e9c:	e7c8      	b.n	8000e30 <__aeabi_fsub+0x74>
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d020      	beq.n	8000ee4 <__aeabi_fsub+0x128>
 8000ea2:	428c      	cmp	r4, r1
 8000ea4:	d023      	beq.n	8000eee <__aeabi_fsub+0x132>
 8000ea6:	0028      	movs	r0, r5
 8000ea8:	38ff      	subs	r0, #255	; 0xff
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	d039      	beq.n	8000f22 <__aeabi_fsub+0x166>
 8000eae:	1b57      	subs	r7, r2, r5
 8000eb0:	2d00      	cmp	r5, #0
 8000eb2:	d000      	beq.n	8000eb6 <__aeabi_fsub+0xfa>
 8000eb4:	e09d      	b.n	8000ff2 <__aeabi_fsub+0x236>
 8000eb6:	4663      	mov	r3, ip
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d100      	bne.n	8000ebe <__aeabi_fsub+0x102>
 8000ebc:	e0db      	b.n	8001076 <__aeabi_fsub+0x2ba>
 8000ebe:	1e7b      	subs	r3, r7, #1
 8000ec0:	2f01      	cmp	r7, #1
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_fsub+0x10a>
 8000ec4:	e10d      	b.n	80010e2 <__aeabi_fsub+0x326>
 8000ec6:	2fff      	cmp	r7, #255	; 0xff
 8000ec8:	d071      	beq.n	8000fae <__aeabi_fsub+0x1f2>
 8000eca:	001f      	movs	r7, r3
 8000ecc:	e098      	b.n	8001000 <__aeabi_fsub+0x244>
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_fsub+0x118>
 8000ed2:	e0a7      	b.n	8001024 <__aeabi_fsub+0x268>
 8000ed4:	1e42      	subs	r2, r0, #1
 8000ed6:	2801      	cmp	r0, #1
 8000ed8:	d100      	bne.n	8000edc <__aeabi_fsub+0x120>
 8000eda:	e0e6      	b.n	80010aa <__aeabi_fsub+0x2ee>
 8000edc:	28ff      	cmp	r0, #255	; 0xff
 8000ede:	d068      	beq.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000ee0:	0010      	movs	r0, r2
 8000ee2:	e78f      	b.n	8000e04 <__aeabi_fsub+0x48>
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	4041      	eors	r1, r0
 8000ee8:	42a1      	cmp	r1, r4
 8000eea:	d000      	beq.n	8000eee <__aeabi_fsub+0x132>
 8000eec:	e77f      	b.n	8000dee <__aeabi_fsub+0x32>
 8000eee:	20ff      	movs	r0, #255	; 0xff
 8000ef0:	4240      	negs	r0, r0
 8000ef2:	4680      	mov	r8, r0
 8000ef4:	44a8      	add	r8, r5
 8000ef6:	4640      	mov	r0, r8
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	d038      	beq.n	8000f6e <__aeabi_fsub+0x1b2>
 8000efc:	1b51      	subs	r1, r2, r5
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	d100      	bne.n	8000f04 <__aeabi_fsub+0x148>
 8000f02:	e0ae      	b.n	8001062 <__aeabi_fsub+0x2a6>
 8000f04:	2aff      	cmp	r2, #255	; 0xff
 8000f06:	d100      	bne.n	8000f0a <__aeabi_fsub+0x14e>
 8000f08:	e0df      	b.n	80010ca <__aeabi_fsub+0x30e>
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	4660      	mov	r0, ip
 8000f0e:	04db      	lsls	r3, r3, #19
 8000f10:	4318      	orrs	r0, r3
 8000f12:	4684      	mov	ip, r0
 8000f14:	291b      	cmp	r1, #27
 8000f16:	dc00      	bgt.n	8000f1a <__aeabi_fsub+0x15e>
 8000f18:	e0d9      	b.n	80010ce <__aeabi_fsub+0x312>
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	0015      	movs	r5, r2
 8000f1e:	1980      	adds	r0, r0, r6
 8000f20:	e7b1      	b.n	8000e86 <__aeabi_fsub+0xca>
 8000f22:	20fe      	movs	r0, #254	; 0xfe
 8000f24:	1c6a      	adds	r2, r5, #1
 8000f26:	4210      	tst	r0, r2
 8000f28:	d171      	bne.n	800100e <__aeabi_fsub+0x252>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d000      	beq.n	8000f30 <__aeabi_fsub+0x174>
 8000f2e:	e0a6      	b.n	800107e <__aeabi_fsub+0x2c2>
 8000f30:	4663      	mov	r3, ip
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d100      	bne.n	8000f38 <__aeabi_fsub+0x17c>
 8000f36:	e0d9      	b.n	80010ec <__aeabi_fsub+0x330>
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2e00      	cmp	r6, #0
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_fsub+0x184>
 8000f3e:	e788      	b.n	8000e52 <__aeabi_fsub+0x96>
 8000f40:	1b98      	subs	r0, r3, r6
 8000f42:	0143      	lsls	r3, r0, #5
 8000f44:	d400      	bmi.n	8000f48 <__aeabi_fsub+0x18c>
 8000f46:	e0e1      	b.n	800110c <__aeabi_fsub+0x350>
 8000f48:	4663      	mov	r3, ip
 8000f4a:	000c      	movs	r4, r1
 8000f4c:	1af0      	subs	r0, r6, r3
 8000f4e:	e76f      	b.n	8000e30 <__aeabi_fsub+0x74>
 8000f50:	2e00      	cmp	r6, #0
 8000f52:	d100      	bne.n	8000f56 <__aeabi_fsub+0x19a>
 8000f54:	e0b7      	b.n	80010c6 <__aeabi_fsub+0x30a>
 8000f56:	0002      	movs	r2, r0
 8000f58:	3a01      	subs	r2, #1
 8000f5a:	2801      	cmp	r0, #1
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_fsub+0x1a4>
 8000f5e:	e09c      	b.n	800109a <__aeabi_fsub+0x2de>
 8000f60:	28ff      	cmp	r0, #255	; 0xff
 8000f62:	d026      	beq.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000f64:	4690      	mov	r8, r2
 8000f66:	e788      	b.n	8000e7a <__aeabi_fsub+0xbe>
 8000f68:	22ff      	movs	r2, #255	; 0xff
 8000f6a:	2700      	movs	r7, #0
 8000f6c:	e771      	b.n	8000e52 <__aeabi_fsub+0x96>
 8000f6e:	20fe      	movs	r0, #254	; 0xfe
 8000f70:	1c6a      	adds	r2, r5, #1
 8000f72:	4210      	tst	r0, r2
 8000f74:	d064      	beq.n	8001040 <__aeabi_fsub+0x284>
 8000f76:	2aff      	cmp	r2, #255	; 0xff
 8000f78:	d0f6      	beq.n	8000f68 <__aeabi_fsub+0x1ac>
 8000f7a:	0015      	movs	r5, r2
 8000f7c:	4466      	add	r6, ip
 8000f7e:	0870      	lsrs	r0, r6, #1
 8000f80:	0743      	lsls	r3, r0, #29
 8000f82:	d000      	beq.n	8000f86 <__aeabi_fsub+0x1ca>
 8000f84:	e756      	b.n	8000e34 <__aeabi_fsub+0x78>
 8000f86:	08c3      	lsrs	r3, r0, #3
 8000f88:	2dff      	cmp	r5, #255	; 0xff
 8000f8a:	d012      	beq.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000f8c:	025b      	lsls	r3, r3, #9
 8000f8e:	0a5f      	lsrs	r7, r3, #9
 8000f90:	b2ea      	uxtb	r2, r5
 8000f92:	e75e      	b.n	8000e52 <__aeabi_fsub+0x96>
 8000f94:	4662      	mov	r2, ip
 8000f96:	2a00      	cmp	r2, #0
 8000f98:	d100      	bne.n	8000f9c <__aeabi_fsub+0x1e0>
 8000f9a:	e096      	b.n	80010ca <__aeabi_fsub+0x30e>
 8000f9c:	2e00      	cmp	r6, #0
 8000f9e:	d008      	beq.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	03d2      	lsls	r2, r2, #15
 8000fa4:	4213      	tst	r3, r2
 8000fa6:	d004      	beq.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000fa8:	4648      	mov	r0, r9
 8000faa:	4210      	tst	r0, r2
 8000fac:	d101      	bne.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000fae:	000c      	movs	r4, r1
 8000fb0:	464b      	mov	r3, r9
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0d8      	beq.n	8000f68 <__aeabi_fsub+0x1ac>
 8000fb6:	2780      	movs	r7, #128	; 0x80
 8000fb8:	03ff      	lsls	r7, r7, #15
 8000fba:	431f      	orrs	r7, r3
 8000fbc:	027f      	lsls	r7, r7, #9
 8000fbe:	22ff      	movs	r2, #255	; 0xff
 8000fc0:	0a7f      	lsrs	r7, r7, #9
 8000fc2:	e746      	b.n	8000e52 <__aeabi_fsub+0x96>
 8000fc4:	2320      	movs	r3, #32
 8000fc6:	003a      	movs	r2, r7
 8000fc8:	1b45      	subs	r5, r0, r5
 8000fca:	0038      	movs	r0, r7
 8000fcc:	3501      	adds	r5, #1
 8000fce:	40ea      	lsrs	r2, r5
 8000fd0:	1b5d      	subs	r5, r3, r5
 8000fd2:	40a8      	lsls	r0, r5
 8000fd4:	1e43      	subs	r3, r0, #1
 8000fd6:	4198      	sbcs	r0, r3
 8000fd8:	2500      	movs	r5, #0
 8000fda:	4310      	orrs	r0, r2
 8000fdc:	e728      	b.n	8000e30 <__aeabi_fsub+0x74>
 8000fde:	2320      	movs	r3, #32
 8000fe0:	1a1b      	subs	r3, r3, r0
 8000fe2:	0032      	movs	r2, r6
 8000fe4:	409e      	lsls	r6, r3
 8000fe6:	40c2      	lsrs	r2, r0
 8000fe8:	0030      	movs	r0, r6
 8000fea:	1e43      	subs	r3, r0, #1
 8000fec:	4198      	sbcs	r0, r3
 8000fee:	4310      	orrs	r0, r2
 8000ff0:	e70c      	b.n	8000e0c <__aeabi_fsub+0x50>
 8000ff2:	2aff      	cmp	r2, #255	; 0xff
 8000ff4:	d0db      	beq.n	8000fae <__aeabi_fsub+0x1f2>
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	04db      	lsls	r3, r3, #19
 8000ffc:	4318      	orrs	r0, r3
 8000ffe:	4684      	mov	ip, r0
 8001000:	2f1b      	cmp	r7, #27
 8001002:	dd56      	ble.n	80010b2 <__aeabi_fsub+0x2f6>
 8001004:	2001      	movs	r0, #1
 8001006:	000c      	movs	r4, r1
 8001008:	0015      	movs	r5, r2
 800100a:	1a30      	subs	r0, r6, r0
 800100c:	e700      	b.n	8000e10 <__aeabi_fsub+0x54>
 800100e:	4663      	mov	r3, ip
 8001010:	1b9f      	subs	r7, r3, r6
 8001012:	017b      	lsls	r3, r7, #5
 8001014:	d43d      	bmi.n	8001092 <__aeabi_fsub+0x2d6>
 8001016:	2f00      	cmp	r7, #0
 8001018:	d000      	beq.n	800101c <__aeabi_fsub+0x260>
 800101a:	e6fe      	b.n	8000e1a <__aeabi_fsub+0x5e>
 800101c:	2400      	movs	r4, #0
 800101e:	2200      	movs	r2, #0
 8001020:	2700      	movs	r7, #0
 8001022:	e716      	b.n	8000e52 <__aeabi_fsub+0x96>
 8001024:	0005      	movs	r5, r0
 8001026:	e7af      	b.n	8000f88 <__aeabi_fsub+0x1cc>
 8001028:	0032      	movs	r2, r6
 800102a:	4643      	mov	r3, r8
 800102c:	4641      	mov	r1, r8
 800102e:	40da      	lsrs	r2, r3
 8001030:	2320      	movs	r3, #32
 8001032:	1a5b      	subs	r3, r3, r1
 8001034:	409e      	lsls	r6, r3
 8001036:	0030      	movs	r0, r6
 8001038:	1e43      	subs	r3, r0, #1
 800103a:	4198      	sbcs	r0, r3
 800103c:	4310      	orrs	r0, r2
 800103e:	e721      	b.n	8000e84 <__aeabi_fsub+0xc8>
 8001040:	2d00      	cmp	r5, #0
 8001042:	d1a7      	bne.n	8000f94 <__aeabi_fsub+0x1d8>
 8001044:	4663      	mov	r3, ip
 8001046:	2b00      	cmp	r3, #0
 8001048:	d059      	beq.n	80010fe <__aeabi_fsub+0x342>
 800104a:	2200      	movs	r2, #0
 800104c:	2e00      	cmp	r6, #0
 800104e:	d100      	bne.n	8001052 <__aeabi_fsub+0x296>
 8001050:	e6ff      	b.n	8000e52 <__aeabi_fsub+0x96>
 8001052:	0030      	movs	r0, r6
 8001054:	4460      	add	r0, ip
 8001056:	0143      	lsls	r3, r0, #5
 8001058:	d592      	bpl.n	8000f80 <__aeabi_fsub+0x1c4>
 800105a:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <__aeabi_fsub+0x348>)
 800105c:	3501      	adds	r5, #1
 800105e:	4018      	ands	r0, r3
 8001060:	e78e      	b.n	8000f80 <__aeabi_fsub+0x1c4>
 8001062:	4663      	mov	r3, ip
 8001064:	2b00      	cmp	r3, #0
 8001066:	d047      	beq.n	80010f8 <__aeabi_fsub+0x33c>
 8001068:	1e4b      	subs	r3, r1, #1
 800106a:	2901      	cmp	r1, #1
 800106c:	d015      	beq.n	800109a <__aeabi_fsub+0x2de>
 800106e:	29ff      	cmp	r1, #255	; 0xff
 8001070:	d02b      	beq.n	80010ca <__aeabi_fsub+0x30e>
 8001072:	0019      	movs	r1, r3
 8001074:	e74e      	b.n	8000f14 <__aeabi_fsub+0x158>
 8001076:	000c      	movs	r4, r1
 8001078:	464b      	mov	r3, r9
 800107a:	003d      	movs	r5, r7
 800107c:	e784      	b.n	8000f88 <__aeabi_fsub+0x1cc>
 800107e:	4662      	mov	r2, ip
 8001080:	2a00      	cmp	r2, #0
 8001082:	d18b      	bne.n	8000f9c <__aeabi_fsub+0x1e0>
 8001084:	2e00      	cmp	r6, #0
 8001086:	d192      	bne.n	8000fae <__aeabi_fsub+0x1f2>
 8001088:	2780      	movs	r7, #128	; 0x80
 800108a:	2400      	movs	r4, #0
 800108c:	22ff      	movs	r2, #255	; 0xff
 800108e:	03ff      	lsls	r7, r7, #15
 8001090:	e6df      	b.n	8000e52 <__aeabi_fsub+0x96>
 8001092:	4663      	mov	r3, ip
 8001094:	000c      	movs	r4, r1
 8001096:	1af7      	subs	r7, r6, r3
 8001098:	e6bf      	b.n	8000e1a <__aeabi_fsub+0x5e>
 800109a:	0030      	movs	r0, r6
 800109c:	4460      	add	r0, ip
 800109e:	2501      	movs	r5, #1
 80010a0:	0143      	lsls	r3, r0, #5
 80010a2:	d400      	bmi.n	80010a6 <__aeabi_fsub+0x2ea>
 80010a4:	e76c      	b.n	8000f80 <__aeabi_fsub+0x1c4>
 80010a6:	2502      	movs	r5, #2
 80010a8:	e6f2      	b.n	8000e90 <__aeabi_fsub+0xd4>
 80010aa:	4663      	mov	r3, ip
 80010ac:	2501      	movs	r5, #1
 80010ae:	1b98      	subs	r0, r3, r6
 80010b0:	e6ae      	b.n	8000e10 <__aeabi_fsub+0x54>
 80010b2:	2320      	movs	r3, #32
 80010b4:	4664      	mov	r4, ip
 80010b6:	4660      	mov	r0, ip
 80010b8:	40fc      	lsrs	r4, r7
 80010ba:	1bdf      	subs	r7, r3, r7
 80010bc:	40b8      	lsls	r0, r7
 80010be:	1e43      	subs	r3, r0, #1
 80010c0:	4198      	sbcs	r0, r3
 80010c2:	4320      	orrs	r0, r4
 80010c4:	e79f      	b.n	8001006 <__aeabi_fsub+0x24a>
 80010c6:	0005      	movs	r5, r0
 80010c8:	e75e      	b.n	8000f88 <__aeabi_fsub+0x1cc>
 80010ca:	464b      	mov	r3, r9
 80010cc:	e771      	b.n	8000fb2 <__aeabi_fsub+0x1f6>
 80010ce:	2320      	movs	r3, #32
 80010d0:	4665      	mov	r5, ip
 80010d2:	4660      	mov	r0, ip
 80010d4:	40cd      	lsrs	r5, r1
 80010d6:	1a59      	subs	r1, r3, r1
 80010d8:	4088      	lsls	r0, r1
 80010da:	1e43      	subs	r3, r0, #1
 80010dc:	4198      	sbcs	r0, r3
 80010de:	4328      	orrs	r0, r5
 80010e0:	e71c      	b.n	8000f1c <__aeabi_fsub+0x160>
 80010e2:	4663      	mov	r3, ip
 80010e4:	000c      	movs	r4, r1
 80010e6:	2501      	movs	r5, #1
 80010e8:	1af0      	subs	r0, r6, r3
 80010ea:	e691      	b.n	8000e10 <__aeabi_fsub+0x54>
 80010ec:	2e00      	cmp	r6, #0
 80010ee:	d095      	beq.n	800101c <__aeabi_fsub+0x260>
 80010f0:	000c      	movs	r4, r1
 80010f2:	464f      	mov	r7, r9
 80010f4:	2200      	movs	r2, #0
 80010f6:	e6ac      	b.n	8000e52 <__aeabi_fsub+0x96>
 80010f8:	464b      	mov	r3, r9
 80010fa:	000d      	movs	r5, r1
 80010fc:	e744      	b.n	8000f88 <__aeabi_fsub+0x1cc>
 80010fe:	464f      	mov	r7, r9
 8001100:	2200      	movs	r2, #0
 8001102:	e6a6      	b.n	8000e52 <__aeabi_fsub+0x96>
 8001104:	fbffffff 	.word	0xfbffffff
 8001108:	7dffffff 	.word	0x7dffffff
 800110c:	2800      	cmp	r0, #0
 800110e:	d000      	beq.n	8001112 <__aeabi_fsub+0x356>
 8001110:	e736      	b.n	8000f80 <__aeabi_fsub+0x1c4>
 8001112:	2400      	movs	r4, #0
 8001114:	2700      	movs	r7, #0
 8001116:	e69c      	b.n	8000e52 <__aeabi_fsub+0x96>

08001118 <__aeabi_fcmpun>:
 8001118:	0243      	lsls	r3, r0, #9
 800111a:	024a      	lsls	r2, r1, #9
 800111c:	0040      	lsls	r0, r0, #1
 800111e:	0049      	lsls	r1, r1, #1
 8001120:	0a5b      	lsrs	r3, r3, #9
 8001122:	0a52      	lsrs	r2, r2, #9
 8001124:	0e09      	lsrs	r1, r1, #24
 8001126:	0e00      	lsrs	r0, r0, #24
 8001128:	28ff      	cmp	r0, #255	; 0xff
 800112a:	d006      	beq.n	800113a <__aeabi_fcmpun+0x22>
 800112c:	2000      	movs	r0, #0
 800112e:	29ff      	cmp	r1, #255	; 0xff
 8001130:	d102      	bne.n	8001138 <__aeabi_fcmpun+0x20>
 8001132:	1e53      	subs	r3, r2, #1
 8001134:	419a      	sbcs	r2, r3
 8001136:	0010      	movs	r0, r2
 8001138:	4770      	bx	lr
 800113a:	38fe      	subs	r0, #254	; 0xfe
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1fb      	bne.n	8001138 <__aeabi_fcmpun+0x20>
 8001140:	e7f4      	b.n	800112c <__aeabi_fcmpun+0x14>
 8001142:	46c0      	nop			; (mov r8, r8)

08001144 <__aeabi_f2iz>:
 8001144:	0241      	lsls	r1, r0, #9
 8001146:	0042      	lsls	r2, r0, #1
 8001148:	0fc3      	lsrs	r3, r0, #31
 800114a:	0a49      	lsrs	r1, r1, #9
 800114c:	2000      	movs	r0, #0
 800114e:	0e12      	lsrs	r2, r2, #24
 8001150:	2a7e      	cmp	r2, #126	; 0x7e
 8001152:	dd03      	ble.n	800115c <__aeabi_f2iz+0x18>
 8001154:	2a9d      	cmp	r2, #157	; 0x9d
 8001156:	dd02      	ble.n	800115e <__aeabi_f2iz+0x1a>
 8001158:	4a09      	ldr	r2, [pc, #36]	; (8001180 <__aeabi_f2iz+0x3c>)
 800115a:	1898      	adds	r0, r3, r2
 800115c:	4770      	bx	lr
 800115e:	2080      	movs	r0, #128	; 0x80
 8001160:	0400      	lsls	r0, r0, #16
 8001162:	4301      	orrs	r1, r0
 8001164:	2a95      	cmp	r2, #149	; 0x95
 8001166:	dc07      	bgt.n	8001178 <__aeabi_f2iz+0x34>
 8001168:	2096      	movs	r0, #150	; 0x96
 800116a:	1a82      	subs	r2, r0, r2
 800116c:	40d1      	lsrs	r1, r2
 800116e:	4248      	negs	r0, r1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1f3      	bne.n	800115c <__aeabi_f2iz+0x18>
 8001174:	0008      	movs	r0, r1
 8001176:	e7f1      	b.n	800115c <__aeabi_f2iz+0x18>
 8001178:	3a96      	subs	r2, #150	; 0x96
 800117a:	4091      	lsls	r1, r2
 800117c:	e7f7      	b.n	800116e <__aeabi_f2iz+0x2a>
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	7fffffff 	.word	0x7fffffff

08001184 <__aeabi_i2f>:
 8001184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001186:	2800      	cmp	r0, #0
 8001188:	d013      	beq.n	80011b2 <__aeabi_i2f+0x2e>
 800118a:	17c3      	asrs	r3, r0, #31
 800118c:	18c6      	adds	r6, r0, r3
 800118e:	405e      	eors	r6, r3
 8001190:	0fc4      	lsrs	r4, r0, #31
 8001192:	0030      	movs	r0, r6
 8001194:	f000 f886 	bl	80012a4 <__clzsi2>
 8001198:	239e      	movs	r3, #158	; 0x9e
 800119a:	0005      	movs	r5, r0
 800119c:	1a1b      	subs	r3, r3, r0
 800119e:	2b96      	cmp	r3, #150	; 0x96
 80011a0:	dc0f      	bgt.n	80011c2 <__aeabi_i2f+0x3e>
 80011a2:	2808      	cmp	r0, #8
 80011a4:	dd01      	ble.n	80011aa <__aeabi_i2f+0x26>
 80011a6:	3d08      	subs	r5, #8
 80011a8:	40ae      	lsls	r6, r5
 80011aa:	0276      	lsls	r6, r6, #9
 80011ac:	0a76      	lsrs	r6, r6, #9
 80011ae:	b2d8      	uxtb	r0, r3
 80011b0:	e002      	b.n	80011b8 <__aeabi_i2f+0x34>
 80011b2:	2400      	movs	r4, #0
 80011b4:	2000      	movs	r0, #0
 80011b6:	2600      	movs	r6, #0
 80011b8:	05c0      	lsls	r0, r0, #23
 80011ba:	4330      	orrs	r0, r6
 80011bc:	07e4      	lsls	r4, r4, #31
 80011be:	4320      	orrs	r0, r4
 80011c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011c2:	2b99      	cmp	r3, #153	; 0x99
 80011c4:	dd0c      	ble.n	80011e0 <__aeabi_i2f+0x5c>
 80011c6:	2205      	movs	r2, #5
 80011c8:	0031      	movs	r1, r6
 80011ca:	1a12      	subs	r2, r2, r0
 80011cc:	40d1      	lsrs	r1, r2
 80011ce:	000a      	movs	r2, r1
 80011d0:	0001      	movs	r1, r0
 80011d2:	0030      	movs	r0, r6
 80011d4:	311b      	adds	r1, #27
 80011d6:	4088      	lsls	r0, r1
 80011d8:	1e41      	subs	r1, r0, #1
 80011da:	4188      	sbcs	r0, r1
 80011dc:	4302      	orrs	r2, r0
 80011de:	0016      	movs	r6, r2
 80011e0:	2d05      	cmp	r5, #5
 80011e2:	dc12      	bgt.n	800120a <__aeabi_i2f+0x86>
 80011e4:	0031      	movs	r1, r6
 80011e6:	4f0d      	ldr	r7, [pc, #52]	; (800121c <__aeabi_i2f+0x98>)
 80011e8:	4039      	ands	r1, r7
 80011ea:	0772      	lsls	r2, r6, #29
 80011ec:	d009      	beq.n	8001202 <__aeabi_i2f+0x7e>
 80011ee:	200f      	movs	r0, #15
 80011f0:	4030      	ands	r0, r6
 80011f2:	2804      	cmp	r0, #4
 80011f4:	d005      	beq.n	8001202 <__aeabi_i2f+0x7e>
 80011f6:	3104      	adds	r1, #4
 80011f8:	014a      	lsls	r2, r1, #5
 80011fa:	d502      	bpl.n	8001202 <__aeabi_i2f+0x7e>
 80011fc:	239f      	movs	r3, #159	; 0x9f
 80011fe:	4039      	ands	r1, r7
 8001200:	1b5b      	subs	r3, r3, r5
 8001202:	0189      	lsls	r1, r1, #6
 8001204:	0a4e      	lsrs	r6, r1, #9
 8001206:	b2d8      	uxtb	r0, r3
 8001208:	e7d6      	b.n	80011b8 <__aeabi_i2f+0x34>
 800120a:	1f6a      	subs	r2, r5, #5
 800120c:	4096      	lsls	r6, r2
 800120e:	0031      	movs	r1, r6
 8001210:	4f02      	ldr	r7, [pc, #8]	; (800121c <__aeabi_i2f+0x98>)
 8001212:	4039      	ands	r1, r7
 8001214:	0772      	lsls	r2, r6, #29
 8001216:	d0f4      	beq.n	8001202 <__aeabi_i2f+0x7e>
 8001218:	e7e9      	b.n	80011ee <__aeabi_i2f+0x6a>
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	fbffffff 	.word	0xfbffffff

08001220 <__aeabi_ui2f>:
 8001220:	b570      	push	{r4, r5, r6, lr}
 8001222:	1e05      	subs	r5, r0, #0
 8001224:	d00e      	beq.n	8001244 <__aeabi_ui2f+0x24>
 8001226:	f000 f83d 	bl	80012a4 <__clzsi2>
 800122a:	239e      	movs	r3, #158	; 0x9e
 800122c:	0004      	movs	r4, r0
 800122e:	1a1b      	subs	r3, r3, r0
 8001230:	2b96      	cmp	r3, #150	; 0x96
 8001232:	dc0c      	bgt.n	800124e <__aeabi_ui2f+0x2e>
 8001234:	2808      	cmp	r0, #8
 8001236:	dd01      	ble.n	800123c <__aeabi_ui2f+0x1c>
 8001238:	3c08      	subs	r4, #8
 800123a:	40a5      	lsls	r5, r4
 800123c:	026d      	lsls	r5, r5, #9
 800123e:	0a6d      	lsrs	r5, r5, #9
 8001240:	b2d8      	uxtb	r0, r3
 8001242:	e001      	b.n	8001248 <__aeabi_ui2f+0x28>
 8001244:	2000      	movs	r0, #0
 8001246:	2500      	movs	r5, #0
 8001248:	05c0      	lsls	r0, r0, #23
 800124a:	4328      	orrs	r0, r5
 800124c:	bd70      	pop	{r4, r5, r6, pc}
 800124e:	2b99      	cmp	r3, #153	; 0x99
 8001250:	dd09      	ble.n	8001266 <__aeabi_ui2f+0x46>
 8001252:	0002      	movs	r2, r0
 8001254:	0029      	movs	r1, r5
 8001256:	321b      	adds	r2, #27
 8001258:	4091      	lsls	r1, r2
 800125a:	1e4a      	subs	r2, r1, #1
 800125c:	4191      	sbcs	r1, r2
 800125e:	2205      	movs	r2, #5
 8001260:	1a12      	subs	r2, r2, r0
 8001262:	40d5      	lsrs	r5, r2
 8001264:	430d      	orrs	r5, r1
 8001266:	2c05      	cmp	r4, #5
 8001268:	dc12      	bgt.n	8001290 <__aeabi_ui2f+0x70>
 800126a:	0029      	movs	r1, r5
 800126c:	4e0c      	ldr	r6, [pc, #48]	; (80012a0 <__aeabi_ui2f+0x80>)
 800126e:	4031      	ands	r1, r6
 8001270:	076a      	lsls	r2, r5, #29
 8001272:	d009      	beq.n	8001288 <__aeabi_ui2f+0x68>
 8001274:	200f      	movs	r0, #15
 8001276:	4028      	ands	r0, r5
 8001278:	2804      	cmp	r0, #4
 800127a:	d005      	beq.n	8001288 <__aeabi_ui2f+0x68>
 800127c:	3104      	adds	r1, #4
 800127e:	014a      	lsls	r2, r1, #5
 8001280:	d502      	bpl.n	8001288 <__aeabi_ui2f+0x68>
 8001282:	239f      	movs	r3, #159	; 0x9f
 8001284:	4031      	ands	r1, r6
 8001286:	1b1b      	subs	r3, r3, r4
 8001288:	0189      	lsls	r1, r1, #6
 800128a:	0a4d      	lsrs	r5, r1, #9
 800128c:	b2d8      	uxtb	r0, r3
 800128e:	e7db      	b.n	8001248 <__aeabi_ui2f+0x28>
 8001290:	1f62      	subs	r2, r4, #5
 8001292:	4095      	lsls	r5, r2
 8001294:	0029      	movs	r1, r5
 8001296:	4e02      	ldr	r6, [pc, #8]	; (80012a0 <__aeabi_ui2f+0x80>)
 8001298:	4031      	ands	r1, r6
 800129a:	076a      	lsls	r2, r5, #29
 800129c:	d0f4      	beq.n	8001288 <__aeabi_ui2f+0x68>
 800129e:	e7e9      	b.n	8001274 <__aeabi_ui2f+0x54>
 80012a0:	fbffffff 	.word	0xfbffffff

080012a4 <__clzsi2>:
 80012a4:	211c      	movs	r1, #28
 80012a6:	2301      	movs	r3, #1
 80012a8:	041b      	lsls	r3, r3, #16
 80012aa:	4298      	cmp	r0, r3
 80012ac:	d301      	bcc.n	80012b2 <__clzsi2+0xe>
 80012ae:	0c00      	lsrs	r0, r0, #16
 80012b0:	3910      	subs	r1, #16
 80012b2:	0a1b      	lsrs	r3, r3, #8
 80012b4:	4298      	cmp	r0, r3
 80012b6:	d301      	bcc.n	80012bc <__clzsi2+0x18>
 80012b8:	0a00      	lsrs	r0, r0, #8
 80012ba:	3908      	subs	r1, #8
 80012bc:	091b      	lsrs	r3, r3, #4
 80012be:	4298      	cmp	r0, r3
 80012c0:	d301      	bcc.n	80012c6 <__clzsi2+0x22>
 80012c2:	0900      	lsrs	r0, r0, #4
 80012c4:	3904      	subs	r1, #4
 80012c6:	a202      	add	r2, pc, #8	; (adr r2, 80012d0 <__clzsi2+0x2c>)
 80012c8:	5c10      	ldrb	r0, [r2, r0]
 80012ca:	1840      	adds	r0, r0, r1
 80012cc:	4770      	bx	lr
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	02020304 	.word	0x02020304
 80012d4:	01010101 	.word	0x01010101
	...

080012e0 <ad8363_get_dbm>:
 *      Author: sigmadev
 */

#include "ad8363.h"

uint8_t ad8363_get_dbm(AD8363_t *ad,uint16_t value) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	000a      	movs	r2, r1
 80012ea:	1cbb      	adds	r3, r7, #2
 80012ec:	801a      	strh	r2, [r3, #0]

	float m = (float) (AD8363_DBM_MAX - AD8363_DBM_MIN)
			/ (float) (ad->max - ad->min);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	001a      	movs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	885b      	ldrh	r3, [r3, #2]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	0018      	movs	r0, r3
 80012fc:	f7ff ff42 	bl	8001184 <__aeabi_i2f>
 8001300:	1c03      	adds	r3, r0, #0
	float m = (float) (AD8363_DBM_MAX - AD8363_DBM_MIN)
 8001302:	1c19      	adds	r1, r3, #0
 8001304:	481f      	ldr	r0, [pc, #124]	; (8001384 <ad8363_get_dbm+0xa4>)
 8001306:	f7ff fa6b 	bl	80007e0 <__aeabi_fdiv>
 800130a:	1c03      	adds	r3, r0, #0
 800130c:	60fb      	str	r3, [r7, #12]
	float b = AD8363_DBM_MAX -ad->max * m;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	0018      	movs	r0, r3
 8001314:	f7ff ff36 	bl	8001184 <__aeabi_i2f>
 8001318:	1c03      	adds	r3, r0, #0
 800131a:	68f9      	ldr	r1, [r7, #12]
 800131c:	1c18      	adds	r0, r3, #0
 800131e:	f7ff fc27 	bl	8000b70 <__aeabi_fmul>
 8001322:	1c03      	adds	r3, r0, #0
 8001324:	1c19      	adds	r1, r3, #0
 8001326:	2000      	movs	r0, #0
 8001328:	f7ff fd48 	bl	8000dbc <__aeabi_fsub>
 800132c:	1c03      	adds	r3, r0, #0
 800132e:	60bb      	str	r3, [r7, #8]

	if (value > ad->max) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	1cba      	adds	r2, r7, #2
 8001336:	8812      	ldrh	r2, [r2, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	d901      	bls.n	8001340 <ad8363_get_dbm+0x60>
		return AD8363_DBM_MAX;
 800133c:	2300      	movs	r3, #0
 800133e:	e01d      	b.n	800137c <ad8363_get_dbm+0x9c>
	} else if (value < ad->min) {
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	885b      	ldrh	r3, [r3, #2]
 8001344:	1cba      	adds	r2, r7, #2
 8001346:	8812      	ldrh	r2, [r2, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d201      	bcs.n	8001350 <ad8363_get_dbm+0x70>
		return AD8363_DBM_MIN;
 800134c:	23e2      	movs	r3, #226	; 0xe2
 800134e:	e015      	b.n	800137c <ad8363_get_dbm+0x9c>
	}
	return (int8_t) (m * (float) value + b);
 8001350:	1cbb      	adds	r3, r7, #2
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	0018      	movs	r0, r3
 8001356:	f7ff ff63 	bl	8001220 <__aeabi_ui2f>
 800135a:	1c03      	adds	r3, r0, #0
 800135c:	68f9      	ldr	r1, [r7, #12]
 800135e:	1c18      	adds	r0, r3, #0
 8001360:	f7ff fc06 	bl	8000b70 <__aeabi_fmul>
 8001364:	1c03      	adds	r3, r0, #0
 8001366:	68b9      	ldr	r1, [r7, #8]
 8001368:	1c18      	adds	r0, r3, #0
 800136a:	f7ff f89b 	bl	80004a4 <__aeabi_fadd>
 800136e:	1c03      	adds	r3, r0, #0
 8001370:	1c18      	adds	r0, r3, #0
 8001372:	f7ff fee7 	bl	8001144 <__aeabi_f2iz>
 8001376:	0003      	movs	r3, r0
 8001378:	b25b      	sxtb	r3, r3
 800137a:	b2db      	uxtb	r3, r3
}
 800137c:	0018      	movs	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	b004      	add	sp, #16
 8001382:	bd80      	pop	{r7, pc}
 8001384:	41f00000 	.word	0x41f00000

08001388 <bda4601_set_att>:
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE7_1);

}

void bda4601_set_att(uint8_t val, uint8_t times) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	0002      	movs	r2, r0
 8001390:	1dfb      	adds	r3, r7, #7
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	1dbb      	adds	r3, r7, #6
 8001396:	1c0a      	adds	r2, r1, #0
 8001398:	701a      	strb	r2, [r3, #0]

	if (val < MIN_DB_VALUE || val > MAX_DB_VALUE) {
 800139a:	1dfb      	adds	r3, r7, #7
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b1f      	cmp	r3, #31
 80013a0:	d902      	bls.n	80013a8 <bda4601_set_att+0x20>
		val = MIN_DB_VALUE;
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
	}
	val *= 2;
 80013a8:	1dfa      	adds	r2, r7, #7
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	18db      	adds	r3, r3, r3
 80013b0:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < times; i++) {
 80013b2:	230f      	movs	r3, #15
 80013b4:	18fb      	adds	r3, r7, r3
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
 80013ba:	e058      	b.n	800146e <bda4601_set_att+0xe6>
		uint8_t mask = 0b00100000;
 80013bc:	230e      	movs	r3, #14
 80013be:	18fb      	adds	r3, r7, r3
 80013c0:	2220      	movs	r2, #32
 80013c2:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < 6; j++) {
 80013c4:	230d      	movs	r3, #13
 80013c6:	18fb      	adds	r3, r7, r3
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
 80013cc:	e030      	b.n	8001430 <bda4601_set_att+0xa8>
			//Ciclo for de 6 vueltas para enviar los 6bits de configuración
			if (mask & val) {
 80013ce:	230e      	movs	r3, #14
 80013d0:	18fb      	adds	r3, r7, r3
 80013d2:	1dfa      	adds	r2, r7, #7
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	7812      	ldrb	r2, [r2, #0]
 80013d8:	4013      	ands	r3, r2
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d006      	beq.n	80013ee <bda4601_set_att+0x66>
				//Si el bit de la mascara en 1 coincide con el bit del valor, entonces
				SET_BIT(GPIOB->MODER, GPIO_MODER_MODE1_0);
 80013e0:	4b29      	ldr	r3, [pc, #164]	; (8001488 <bda4601_set_att+0x100>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b28      	ldr	r3, [pc, #160]	; (8001488 <bda4601_set_att+0x100>)
 80013e6:	2104      	movs	r1, #4
 80013e8:	430a      	orrs	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	e005      	b.n	80013fa <bda4601_set_att+0x72>
				//HAL_GPIO_WritePin(GPIOA, DATA_ATTENUATOR_Pin, GPIO_PIN_SET); //Pin data en alto
			} else {
				//	HAL_GPIO_WritePin(GPIOA, DATA_ATTENUATOR_Pin, GPIO_PIN_RESET); //Pin data en bajo
				CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE1_0);
 80013ee:	4b26      	ldr	r3, [pc, #152]	; (8001488 <bda4601_set_att+0x100>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b25      	ldr	r3, [pc, #148]	; (8001488 <bda4601_set_att+0x100>)
 80013f4:	2104      	movs	r1, #4
 80013f6:	438a      	bics	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]
			}

			SET_BIT(GPIOB->MODER, GPIO_MODER_MODE0_0);
 80013fa:	4b23      	ldr	r3, [pc, #140]	; (8001488 <bda4601_set_att+0x100>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <bda4601_set_att+0x100>)
 8001400:	2101      	movs	r1, #1
 8001402:	430a      	orrs	r2, r1
 8001404:	601a      	str	r2, [r3, #0]
			//HAL_GPIO_WritePin(GPIOA, CLK_ATTENUATOR_Pin, GPIO_PIN_SET); //Pin clock en alto
			HAL_Delay(1); //Delay de 1mS
 8001406:	2001      	movs	r0, #1
 8001408:	f002 fe74 	bl	80040f4 <HAL_Delay>
			CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE0_0);
 800140c:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <bda4601_set_att+0x100>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <bda4601_set_att+0x100>)
 8001412:	2101      	movs	r1, #1
 8001414:	438a      	bics	r2, r1
 8001416:	601a      	str	r2, [r3, #0]
			//HAL_GPIO_WritePin(GPIOA, CLK_ATTENUATOR_Pin, GPIO_PIN_RESET); //Pin clock en bajo
			mask = mask >> 1; //Muevo la máscara una posición
 8001418:	220e      	movs	r2, #14
 800141a:	18bb      	adds	r3, r7, r2
 800141c:	18ba      	adds	r2, r7, r2
 800141e:	7812      	ldrb	r2, [r2, #0]
 8001420:	0852      	lsrs	r2, r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < 6; j++) {
 8001424:	210d      	movs	r1, #13
 8001426:	187b      	adds	r3, r7, r1
 8001428:	781a      	ldrb	r2, [r3, #0]
 800142a:	187b      	adds	r3, r7, r1
 800142c:	3201      	adds	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	230d      	movs	r3, #13
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b05      	cmp	r3, #5
 8001438:	d9c9      	bls.n	80013ce <bda4601_set_att+0x46>
		}
		SET_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
 800143a:	23a0      	movs	r3, #160	; 0xa0
 800143c:	05db      	lsls	r3, r3, #23
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	23a0      	movs	r3, #160	; 0xa0
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	2180      	movs	r1, #128	; 0x80
 8001446:	01c9      	lsls	r1, r1, #7
 8001448:	430a      	orrs	r2, r1
 800144a:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOA, LE_ATTENUATOR_Pin, GPIO_PIN_SET); //Pin LE en alto
		HAL_Delay(1);
 800144c:	2001      	movs	r0, #1
 800144e:	f002 fe51 	bl	80040f4 <HAL_Delay>
		CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
 8001452:	23a0      	movs	r3, #160	; 0xa0
 8001454:	05db      	lsls	r3, r3, #23
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	23a0      	movs	r3, #160	; 0xa0
 800145a:	05db      	lsls	r3, r3, #23
 800145c:	490b      	ldr	r1, [pc, #44]	; (800148c <bda4601_set_att+0x104>)
 800145e:	400a      	ands	r2, r1
 8001460:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < times; i++) {
 8001462:	210f      	movs	r1, #15
 8001464:	187b      	adds	r3, r7, r1
 8001466:	781a      	ldrb	r2, [r3, #0]
 8001468:	187b      	adds	r3, r7, r1
 800146a:	3201      	adds	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	230f      	movs	r3, #15
 8001470:	18fa      	adds	r2, r7, r3
 8001472:	1dbb      	adds	r3, r7, #6
 8001474:	7812      	ldrb	r2, [r2, #0]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d39f      	bcc.n	80013bc <bda4601_set_att+0x34>
		//HAL_GPIO_WritePin(GPIOA, LE_ATTENUATOR_Pin, GPIO_PIN_RESET); //Pin LE en bajo
	}
}
 800147c:	46c0      	nop			; (mov r8, r8)
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	b004      	add	sp, #16
 8001484:	bd80      	pop	{r7, pc}
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	50000400 	.word	0x50000400
 800148c:	ffffbfff 	.word	0xffffbfff

08001490 <bda4601_set_initial_att>:

void bda4601_set_initial_att(uint8_t value, uint16_t period_millis) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	0002      	movs	r2, r0
 8001498:	1dfb      	adds	r3, r7, #7
 800149a:	701a      	strb	r2, [r3, #0]
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	1c0a      	adds	r2, r1, #0
 80014a0:	801a      	strh	r2, [r3, #0]
	uint8_t t_step = 500;
 80014a2:	210f      	movs	r1, #15
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	22f4      	movs	r2, #244	; 0xf4
 80014a8:	701a      	strb	r2, [r3, #0]
	uint8_t times = period_millis / t_step;
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	881a      	ldrh	r2, [r3, #0]
 80014ae:	187b      	adds	r3, r7, r1
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	0019      	movs	r1, r3
 80014b4:	0010      	movs	r0, r2
 80014b6:	f7fe feb7 	bl	8000228 <__divsi3>
 80014ba:	0003      	movs	r3, r0
 80014bc:	001a      	movs	r2, r3
 80014be:	210e      	movs	r1, #14
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	701a      	strb	r2, [r3, #0]
	int att_step = value / times;
 80014c4:	1dfa      	adds	r2, r7, #7
 80014c6:	187b      	adds	r3, r7, r1
 80014c8:	7812      	ldrb	r2, [r2, #0]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	0019      	movs	r1, r3
 80014ce:	0010      	movs	r0, r2
 80014d0:	f7fe fe20 	bl	8000114 <__udivsi3>
 80014d4:	0003      	movs	r3, r0
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	60bb      	str	r3, [r7, #8]
	int att = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]

	for (int i = 0; i <= times; i++) {
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	e015      	b.n	8001510 <bda4601_set_initial_att+0x80>
		bda4601_set_att(att, 2);
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2102      	movs	r1, #2
 80014ea:	0018      	movs	r0, r3
 80014ec:	f7ff ff4c 	bl	8001388 <bda4601_set_att>
		att += att_step;
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	18d3      	adds	r3, r2, r3
 80014f6:	617b      	str	r3, [r7, #20]
		if (att >= MAX_DB_VALUE) {
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	2b1e      	cmp	r3, #30
 80014fc:	dc0f      	bgt.n	800151e <bda4601_set_initial_att+0x8e>
			return;
		}
		HAL_Delay(t_step);
 80014fe:	230f      	movs	r3, #15
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	0018      	movs	r0, r3
 8001506:	f002 fdf5 	bl	80040f4 <HAL_Delay>
	for (int i = 0; i <= times; i++) {
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	3301      	adds	r3, #1
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	230e      	movs	r3, #14
 8001512:	18fb      	adds	r3, r7, r3
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	429a      	cmp	r2, r3
 800151a:	dde3      	ble.n	80014e4 <bda4601_set_initial_att+0x54>
 800151c:	e000      	b.n	8001520 <bda4601_set_initial_att+0x90>
			return;
 800151e:	46c0      	nop			; (mov r8, r8)
	}

}
 8001520:	46bd      	mov	sp, r7
 8001522:	b006      	add	sp, #24
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	0002      	movs	r2, r0
 8001530:	1dfb      	adds	r3, r7, #7
 8001532:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001534:	1dfb      	adds	r3, r7, #7
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b7f      	cmp	r3, #127	; 0x7f
 800153a:	d809      	bhi.n	8001550 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153c:	1dfb      	adds	r3, r7, #7
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	001a      	movs	r2, r3
 8001542:	231f      	movs	r3, #31
 8001544:	401a      	ands	r2, r3
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <__NVIC_EnableIRQ+0x30>)
 8001548:	2101      	movs	r1, #1
 800154a:	4091      	lsls	r1, r2
 800154c:	000a      	movs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001550:	46c0      	nop			; (mov r8, r8)
 8001552:	46bd      	mov	sp, r7
 8001554:	b002      	add	sp, #8
 8001556:	bd80      	pop	{r7, pc}
 8001558:	e000e100 	.word	0xe000e100

0800155c <ds18b20_timer3_init>:
#include "ds18b20.h"

void ds18b20_timer3_init() {
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	/*enable clock access to timer 2 */
	SET_BIT(RCC->APBENR2, RCC_APBENR2_TIM16EN);
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <ds18b20_timer3_init+0x60>)
 8001562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001564:	4b15      	ldr	r3, [pc, #84]	; (80015bc <ds18b20_timer3_init+0x60>)
 8001566:	2180      	movs	r1, #128	; 0x80
 8001568:	0289      	lsls	r1, r1, #10
 800156a:	430a      	orrs	r2, r1
 800156c:	641a      	str	r2, [r3, #64]	; 0x40
	/*set preescaler value */
	TIM16->PSC = 64 - 1; // 64 000 000 / 64  = 1 000 000
 800156e:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <ds18b20_timer3_init+0x64>)
 8001570:	223f      	movs	r2, #63	; 0x3f
 8001572:	629a      	str	r2, [r3, #40]	; 0x28
	/* set auto-reload */
	TIM16->ARR = 0XFFFF - 1; // 1 000  000 /
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <ds18b20_timer3_init+0x64>)
 8001576:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <ds18b20_timer3_init+0x68>)
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c
	SET_BIT(TIM16->CR1, TIM_CR1_ARPE);
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <ds18b20_timer3_init+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <ds18b20_timer3_init+0x64>)
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	430a      	orrs	r2, r1
 8001584:	601a      	str	r2, [r3, #0]
	/* clear counter */
	TIM16->CNT = 0;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <ds18b20_timer3_init+0x64>)
 8001588:	2200      	movs	r2, #0
 800158a:	625a      	str	r2, [r3, #36]	; 0x24
	/*enable timer 3*/
	SET_BIT(TIM16->CR1, TIM_CR1_CEN);
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <ds18b20_timer3_init+0x64>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <ds18b20_timer3_init+0x64>)
 8001592:	2101      	movs	r1, #1
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM16->DIER, TIM_DIER_UIE);
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <ds18b20_timer3_init+0x64>)
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <ds18b20_timer3_init+0x64>)
 800159e:	2101      	movs	r1, #1
 80015a0:	430a      	orrs	r2, r1
 80015a2:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ(TIM16_IRQn);
 80015a4:	2015      	movs	r0, #21
 80015a6:	f7ff ffbf 	bl	8001528 <__NVIC_EnableIRQ>
	CLEAR_BIT(TIM16->SR, TIM_SR_UIF);
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <ds18b20_timer3_init+0x64>)
 80015ac:	691a      	ldr	r2, [r3, #16]
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <ds18b20_timer3_init+0x64>)
 80015b0:	2101      	movs	r1, #1
 80015b2:	438a      	bics	r2, r1
 80015b4:	611a      	str	r2, [r3, #16]
}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40014400 	.word	0x40014400
 80015c4:	0000fffe 	.word	0x0000fffe

080015c8 <delay_us>:

void delay_us(uint16_t us) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	0002      	movs	r2, r0
 80015d0:	1dbb      	adds	r3, r7, #6
 80015d2:	801a      	strh	r2, [r3, #0]
	TIM16->CNT = 0;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <delay_us+0x34>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	; 0x24
	TIM16->ARR = us ;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <delay_us+0x34>)
 80015dc:	1dba      	adds	r2, r7, #6
 80015de:	8812      	ldrh	r2, [r2, #0]
 80015e0:	62da      	str	r2, [r3, #44]	; 0x2c
	while (TIM16->CNT < us)
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <delay_us+0x34>)
 80015e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015e8:	1dbb      	adds	r3, r7, #6
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d3f9      	bcc.n	80015e4 <delay_us+0x1c>
		;

}
 80015f0:	46c0      	nop			; (mov r8, r8)
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b002      	add	sp, #8
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	40014400 	.word	0x40014400

08001600 <pull_down>:
	response = READ_BIT(GPIOB->IDR, GPIO_ODR_OD2) ? 1 : 0;
	delay_us(410);
	return response;
}

void pull_down(uint16_t us) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	0002      	movs	r2, r0
 8001608:	1dbb      	adds	r3, r7, #6
 800160a:	801a      	strh	r2, [r3, #0]
	set_vdd_as_output();
 800160c:	f000 f8cc 	bl	80017a8 <set_vdd_as_output>
	set_vdd_low();
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <pull_down+0x34>)
 8001612:	695a      	ldr	r2, [r3, #20]
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <pull_down+0x34>)
 8001616:	2104      	movs	r1, #4
 8001618:	438a      	bics	r2, r1
 800161a:	615a      	str	r2, [r3, #20]
	delay_us(us);
 800161c:	1dbb      	adds	r3, r7, #6
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	0018      	movs	r0, r3
 8001622:	f7ff ffd1 	bl	80015c8 <delay_us>
	set_vdd_as_input();
 8001626:	f000 f8d3 	bl	80017d0 <set_vdd_as_input>
}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	46bd      	mov	sp, r7
 800162e:	b002      	add	sp, #8
 8001630:	bd80      	pop	{r7, pc}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	50000400 	.word	0x50000400

08001638 <DS18B20_Start>:

uint8_t DS18B20_Start(void) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800163e:	1dfb      	adds	r3, r7, #7
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
	pull_down(480);
 8001644:	23f0      	movs	r3, #240	; 0xf0
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	0018      	movs	r0, r3
 800164a:	f7ff ffd9 	bl	8001600 <pull_down>
	delay_us(80);
 800164e:	2050      	movs	r0, #80	; 0x50
 8001650:	f7ff ffba 	bl	80015c8 <delay_us>
	Response = READ_BIT(GPIOB->IDR, GPIO_ODR_OD2) ? 1 : 0;
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <DS18B20_Start+0x44>)
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	2204      	movs	r2, #4
 800165a:	4013      	ands	r3, r2
 800165c:	1e5a      	subs	r2, r3, #1
 800165e:	4193      	sbcs	r3, r2
 8001660:	b2da      	uxtb	r2, r3
 8001662:	1dfb      	adds	r3, r7, #7
 8001664:	701a      	strb	r2, [r3, #0]
	delay_us(400); // 480 us delay totally.
 8001666:	23c8      	movs	r3, #200	; 0xc8
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	0018      	movs	r0, r3
 800166c:	f7ff ffac 	bl	80015c8 <delay_us>
	return Response;
 8001670:	1dfb      	adds	r3, r7, #7
 8001672:	781b      	ldrb	r3, [r3, #0]
}
 8001674:	0018      	movs	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	b002      	add	sp, #8
 800167a:	bd80      	pop	{r7, pc}
 800167c:	50000400 	.word	0x50000400

08001680 <ds18b20_write1>:

void ds18b20_write1() {
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	set_vdd_as_output();
 8001684:	f000 f890 	bl	80017a8 <set_vdd_as_output>
	set_vdd_low();
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <ds18b20_write1+0x30>)
 800168a:	695a      	ldr	r2, [r3, #20]
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <ds18b20_write1+0x30>)
 800168e:	2104      	movs	r1, #4
 8001690:	438a      	bics	r2, r1
 8001692:	615a      	str	r2, [r3, #20]
	delay_us(10); // wait for 1 us
 8001694:	200a      	movs	r0, #10
 8001696:	f7ff ff97 	bl	80015c8 <delay_us>
	set_vdd_as_input();
 800169a:	f000 f899 	bl	80017d0 <set_vdd_as_input>
	delay_us(55); // wait for 60 us
 800169e:	2037      	movs	r0, #55	; 0x37
 80016a0:	f7ff ff92 	bl	80015c8 <delay_us>
	set_vdd_as_input(); // NOTE review if this is necessary
 80016a4:	f000 f894 	bl	80017d0 <set_vdd_as_input>
}
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	50000400 	.word	0x50000400

080016b4 <ds18b20_write0>:

void ds18b20_write0() {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	set_vdd_as_output();
 80016b8:	f000 f876 	bl	80017a8 <set_vdd_as_output>
	set_vdd_low();
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <ds18b20_write0+0x30>)
 80016be:	695a      	ldr	r2, [r3, #20]
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <ds18b20_write0+0x30>)
 80016c2:	2104      	movs	r1, #4
 80016c4:	438a      	bics	r2, r1
 80016c6:	615a      	str	r2, [r3, #20]
	delay_us(65); // wait for 60 us
 80016c8:	2041      	movs	r0, #65	; 0x41
 80016ca:	f7ff ff7d 	bl	80015c8 <delay_us>
	set_vdd_as_input();
 80016ce:	f000 f87f 	bl	80017d0 <set_vdd_as_input>
	delay_us(5); // wait for 60 us
 80016d2:	2005      	movs	r0, #5
 80016d4:	f7ff ff78 	bl	80015c8 <delay_us>
	set_vdd_as_input(); // NOTE review if this is necessary
 80016d8:	f000 f87a 	bl	80017d0 <set_vdd_as_input>
}
 80016dc:	46c0      	nop			; (mov r8, r8)
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	50000400 	.word	0x50000400

080016e8 <DS18B20_Write>:

void DS18B20_Write(uint8_t data) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	0002      	movs	r2, r0
 80016f0:	1dfb      	adds	r3, r7, #7
 80016f2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++) {
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	e00f      	b.n	800171a <DS18B20_Write+0x32>
		if ((data & (1 << i)) != 0)
 80016fa:	1dfb      	adds	r3, r7, #7
 80016fc:	781a      	ldrb	r2, [r3, #0]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	411a      	asrs	r2, r3
 8001702:	0013      	movs	r3, r2
 8001704:	2201      	movs	r2, #1
 8001706:	4013      	ands	r3, r2
 8001708:	d002      	beq.n	8001710 <DS18B20_Write+0x28>
			ds18b20_write1();
 800170a:	f7ff ffb9 	bl	8001680 <ds18b20_write1>
 800170e:	e001      	b.n	8001714 <DS18B20_Write+0x2c>
		else
			ds18b20_write0();
 8001710:	f7ff ffd0 	bl	80016b4 <ds18b20_write0>
	for (int i = 0; i < 8; i++) {
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	3301      	adds	r3, #1
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2b07      	cmp	r3, #7
 800171e:	ddec      	ble.n	80016fa <DS18B20_Write+0x12>
	}
}
 8001720:	46c0      	nop			; (mov r8, r8)
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	b004      	add	sp, #16
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <DS18B20_Read>:

uint8_t DS18B20_Read(void) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
	uint8_t value = 0;
 8001732:	1dfb      	adds	r3, r7, #7
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
	set_vdd_as_input();
 8001738:	f000 f84a 	bl	80017d0 <set_vdd_as_input>
	for (int i = 0; i < 8; i++) {
 800173c:	2300      	movs	r3, #0
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	e026      	b.n	8001790 <DS18B20_Read+0x64>
		set_vdd_as_output();
 8001742:	f000 f831 	bl	80017a8 <set_vdd_as_output>
		set_vdd_low();
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <DS18B20_Read+0x78>)
 8001748:	695a      	ldr	r2, [r3, #20]
 800174a:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <DS18B20_Read+0x78>)
 800174c:	2104      	movs	r1, #4
 800174e:	438a      	bics	r2, r1
 8001750:	615a      	str	r2, [r3, #20]
		delay_us(3);  // wait for > 1us
 8001752:	2003      	movs	r0, #3
 8001754:	f7ff ff38 	bl	80015c8 <delay_us>
		set_vdd_as_input();
 8001758:	f000 f83a 	bl	80017d0 <set_vdd_as_input>
		delay_us(3);
 800175c:	2003      	movs	r0, #3
 800175e:	f7ff ff33 	bl	80015c8 <delay_us>
		if (READ_BIT(GPIOB->IDR, GPIO_ODR_OD2))  // if the pin is HIGH
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <DS18B20_Read+0x78>)
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	2204      	movs	r2, #4
 8001768:	4013      	ands	r3, r2
 800176a:	d00b      	beq.n	8001784 <DS18B20_Read+0x58>
			value |= 1 << i;  // read = 1
 800176c:	2201      	movs	r2, #1
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	409a      	lsls	r2, r3
 8001772:	0013      	movs	r3, r2
 8001774:	b25a      	sxtb	r2, r3
 8001776:	1dfb      	adds	r3, r7, #7
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b25b      	sxtb	r3, r3
 800177c:	4313      	orrs	r3, r2
 800177e:	b25a      	sxtb	r2, r3
 8001780:	1dfb      	adds	r3, r7, #7
 8001782:	701a      	strb	r2, [r3, #0]

		delay_us(50);  // wait for 60 us
 8001784:	2032      	movs	r0, #50	; 0x32
 8001786:	f7ff ff1f 	bl	80015c8 <delay_us>
	for (int i = 0; i < 8; i++) {
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	2b07      	cmp	r3, #7
 8001794:	ddd5      	ble.n	8001742 <DS18B20_Read+0x16>
	}
	return value;
 8001796:	1dfb      	adds	r3, r7, #7
 8001798:	781b      	ldrb	r3, [r3, #0]
}
 800179a:	0018      	movs	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	b002      	add	sp, #8
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	50000400 	.word	0x50000400

080017a8 <set_vdd_as_output>:

void set_vdd_as_output() {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	/* PB2  as output */
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE2_0);
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <set_vdd_as_output+0x24>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <set_vdd_as_output+0x24>)
 80017b2:	2110      	movs	r1, #16
 80017b4:	430a      	orrs	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE2_1);
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <set_vdd_as_output+0x24>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <set_vdd_as_output+0x24>)
 80017be:	2120      	movs	r1, #32
 80017c0:	438a      	bics	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]
}
 80017c4:	46c0      	nop			; (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	50000400 	.word	0x50000400

080017d0 <set_vdd_as_input>:

void set_vdd_as_input() {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	/* PB2  as INPUT */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE2_0);
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <set_vdd_as_input+0x24>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <set_vdd_as_input+0x24>)
 80017da:	2110      	movs	r1, #16
 80017dc:	438a      	bics	r2, r1
 80017de:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE2_1);
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <set_vdd_as_input+0x24>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <set_vdd_as_input+0x24>)
 80017e6:	2120      	movs	r1, #32
 80017e8:	438a      	bics	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]
}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	50000400 	.word	0x50000400

080017f8 <ds18b20_convert>:

void ds18b20_convert() {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	if (!DS18B20_Start()) {
 80017fc:	f7ff ff1c 	bl	8001638 <DS18B20_Start>
 8001800:	1e03      	subs	r3, r0, #0
 8001802:	d108      	bne.n	8001816 <ds18b20_convert+0x1e>
		HAL_Delay(1);
 8001804:	2001      	movs	r0, #1
 8001806:	f002 fc75 	bl	80040f4 <HAL_Delay>
		DS18B20_Write(0xCC); // skip ROM
 800180a:	20cc      	movs	r0, #204	; 0xcc
 800180c:	f7ff ff6c 	bl	80016e8 <DS18B20_Write>
		DS18B20_Write(0x44); // convert t
 8001810:	2044      	movs	r0, #68	; 0x44
 8001812:	f7ff ff69 	bl	80016e8 <DS18B20_Write>
//		HAL_Delay(800);
	}
}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <ds18b20_read_temperature>:

float ds18b20_read_temperature() {
 800181c:	b590      	push	{r4, r7, lr}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
	if (!DS18B20_Start()) {
 8001822:	f7ff ff09 	bl	8001638 <DS18B20_Start>
 8001826:	1e03      	subs	r3, r0, #0
 8001828:	d128      	bne.n	800187c <ds18b20_read_temperature+0x60>
		uint8_t Temp_byte1, Temp_byte2;
		int TEMP = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
		HAL_Delay(1);
 800182e:	2001      	movs	r0, #1
 8001830:	f002 fc60 	bl	80040f4 <HAL_Delay>
		DS18B20_Write(0xCC); // skip ROM
 8001834:	20cc      	movs	r0, #204	; 0xcc
 8001836:	f7ff ff57 	bl	80016e8 <DS18B20_Write>
		DS18B20_Write(0xBE); // Read Scratch-pad
 800183a:	20be      	movs	r0, #190	; 0xbe
 800183c:	f7ff ff54 	bl	80016e8 <DS18B20_Write>
		TEMP = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	607b      	str	r3, [r7, #4]
		Temp_byte1 = DS18B20_Read();
 8001844:	1cfc      	adds	r4, r7, #3
 8001846:	f7ff ff71 	bl	800172c <DS18B20_Read>
 800184a:	0003      	movs	r3, r0
 800184c:	7023      	strb	r3, [r4, #0]
		Temp_byte2 = DS18B20_Read();
 800184e:	1cbc      	adds	r4, r7, #2
 8001850:	f7ff ff6c 	bl	800172c <DS18B20_Read>
 8001854:	0003      	movs	r3, r0
 8001856:	7023      	strb	r3, [r4, #0]
		TEMP = (Temp_byte2 << 8) | Temp_byte1;
 8001858:	1cbb      	adds	r3, r7, #2
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	021a      	lsls	r2, r3, #8
 800185e:	1cfb      	adds	r3, r7, #3
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	4313      	orrs	r3, r2
 8001864:	607b      	str	r3, [r7, #4]
		return (float) TEMP / 16.0;
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff fc8c 	bl	8001184 <__aeabi_i2f>
 800186c:	1c03      	adds	r3, r0, #0
 800186e:	2183      	movs	r1, #131	; 0x83
 8001870:	05c9      	lsls	r1, r1, #23
 8001872:	1c18      	adds	r0, r3, #0
 8001874:	f7fe ffb4 	bl	80007e0 <__aeabi_fdiv>
 8001878:	1c03      	adds	r3, r0, #0
 800187a:	e000      	b.n	800187e <ds18b20_read_temperature+0x62>
	}
	return 0.0f;
 800187c:	2300      	movs	r3, #0
}
 800187e:	1c18      	adds	r0, r3, #0
 8001880:	46bd      	mov	sp, r7
 8001882:	b003      	add	sp, #12
 8001884:	bd90      	pop	{r4, r7, pc}
	...

08001888 <i2c1_init>:
 *      Author: sigmadev
 */

#include "i2c1.h"

void i2c1_init() {
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0

	/* SCL PB8  as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE8_0);
 800188c:	4b53      	ldr	r3, [pc, #332]	; (80019dc <i2c1_init+0x154>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b52      	ldr	r3, [pc, #328]	; (80019dc <i2c1_init+0x154>)
 8001892:	4953      	ldr	r1, [pc, #332]	; (80019e0 <i2c1_init+0x158>)
 8001894:	400a      	ands	r2, r1
 8001896:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE8_1);
 8001898:	4b50      	ldr	r3, [pc, #320]	; (80019dc <i2c1_init+0x154>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b4f      	ldr	r3, [pc, #316]	; (80019dc <i2c1_init+0x154>)
 800189e:	2180      	movs	r1, #128	; 0x80
 80018a0:	0289      	lsls	r1, r1, #10
 80018a2:	430a      	orrs	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]
	/* SDC PB9 as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE9_0);
 80018a6:	4b4d      	ldr	r3, [pc, #308]	; (80019dc <i2c1_init+0x154>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4b4c      	ldr	r3, [pc, #304]	; (80019dc <i2c1_init+0x154>)
 80018ac:	494d      	ldr	r1, [pc, #308]	; (80019e4 <i2c1_init+0x15c>)
 80018ae:	400a      	ands	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE9_1);
 80018b2:	4b4a      	ldr	r3, [pc, #296]	; (80019dc <i2c1_init+0x154>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4b49      	ldr	r3, [pc, #292]	; (80019dc <i2c1_init+0x154>)
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	0309      	lsls	r1, r1, #12
 80018bc:	430a      	orrs	r2, r1
 80018be:	601a      	str	r2, [r3, #0]
	/* SCL PB8 as open-drain */
	SET_BIT(GPIOB->OTYPER, GPIO_OTYPER_OT8);
 80018c0:	4b46      	ldr	r3, [pc, #280]	; (80019dc <i2c1_init+0x154>)
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	4b45      	ldr	r3, [pc, #276]	; (80019dc <i2c1_init+0x154>)
 80018c6:	2180      	movs	r1, #128	; 0x80
 80018c8:	0049      	lsls	r1, r1, #1
 80018ca:	430a      	orrs	r2, r1
 80018cc:	605a      	str	r2, [r3, #4]
	/* SDC PB9 as open-drain */
	SET_BIT(GPIOB->OTYPER, GPIO_OTYPER_OT9);
 80018ce:	4b43      	ldr	r3, [pc, #268]	; (80019dc <i2c1_init+0x154>)
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	4b42      	ldr	r3, [pc, #264]	; (80019dc <i2c1_init+0x154>)
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	0089      	lsls	r1, r1, #2
 80018d8:	430a      	orrs	r2, r1
 80018da:	605a      	str	r2, [r3, #4]
	/* SCL PB8 High Speed output */
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED8_0);
 80018dc:	4b3f      	ldr	r3, [pc, #252]	; (80019dc <i2c1_init+0x154>)
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	4b3e      	ldr	r3, [pc, #248]	; (80019dc <i2c1_init+0x154>)
 80018e2:	2180      	movs	r1, #128	; 0x80
 80018e4:	0249      	lsls	r1, r1, #9
 80018e6:	430a      	orrs	r2, r1
 80018e8:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED8_1);
 80018ea:	4b3c      	ldr	r3, [pc, #240]	; (80019dc <i2c1_init+0x154>)
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	4b3b      	ldr	r3, [pc, #236]	; (80019dc <i2c1_init+0x154>)
 80018f0:	2180      	movs	r1, #128	; 0x80
 80018f2:	0289      	lsls	r1, r1, #10
 80018f4:	430a      	orrs	r2, r1
 80018f6:	609a      	str	r2, [r3, #8]
	/* SDC PB9  High Speed output */
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED9_0);
 80018f8:	4b38      	ldr	r3, [pc, #224]	; (80019dc <i2c1_init+0x154>)
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	4b37      	ldr	r3, [pc, #220]	; (80019dc <i2c1_init+0x154>)
 80018fe:	2180      	movs	r1, #128	; 0x80
 8001900:	02c9      	lsls	r1, r1, #11
 8001902:	430a      	orrs	r2, r1
 8001904:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED9_1);
 8001906:	4b35      	ldr	r3, [pc, #212]	; (80019dc <i2c1_init+0x154>)
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	4b34      	ldr	r3, [pc, #208]	; (80019dc <i2c1_init+0x154>)
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	0309      	lsls	r1, r1, #12
 8001910:	430a      	orrs	r2, r1
 8001912:	609a      	str	r2, [r3, #8]
	/* SCL PB8 as pull-up */
	CLEAR_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD8_0);
 8001914:	4b31      	ldr	r3, [pc, #196]	; (80019dc <i2c1_init+0x154>)
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	4b30      	ldr	r3, [pc, #192]	; (80019dc <i2c1_init+0x154>)
 800191a:	4931      	ldr	r1, [pc, #196]	; (80019e0 <i2c1_init+0x158>)
 800191c:	400a      	ands	r2, r1
 800191e:	60da      	str	r2, [r3, #12]
	SET_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD8_1);
 8001920:	4b2e      	ldr	r3, [pc, #184]	; (80019dc <i2c1_init+0x154>)
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <i2c1_init+0x154>)
 8001926:	2180      	movs	r1, #128	; 0x80
 8001928:	0289      	lsls	r1, r1, #10
 800192a:	430a      	orrs	r2, r1
 800192c:	60da      	str	r2, [r3, #12]
	/* SDC PB9 as pull-up */
	CLEAR_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD9_0);
 800192e:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <i2c1_init+0x154>)
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <i2c1_init+0x154>)
 8001934:	492b      	ldr	r1, [pc, #172]	; (80019e4 <i2c1_init+0x15c>)
 8001936:	400a      	ands	r2, r1
 8001938:	60da      	str	r2, [r3, #12]
	SET_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD9_1);
 800193a:	4b28      	ldr	r3, [pc, #160]	; (80019dc <i2c1_init+0x154>)
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	4b27      	ldr	r3, [pc, #156]	; (80019dc <i2c1_init+0x154>)
 8001940:	2180      	movs	r1, #128	; 0x80
 8001942:	0309      	lsls	r1, r1, #12
 8001944:	430a      	orrs	r2, r1
 8001946:	60da      	str	r2, [r3, #12]
	/*  PB8 as i2c SCL */
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_0);
 8001948:	4b24      	ldr	r3, [pc, #144]	; (80019dc <i2c1_init+0x154>)
 800194a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800194c:	4b23      	ldr	r3, [pc, #140]	; (80019dc <i2c1_init+0x154>)
 800194e:	2101      	movs	r1, #1
 8001950:	438a      	bics	r2, r1
 8001952:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_1);
 8001954:	4b21      	ldr	r3, [pc, #132]	; (80019dc <i2c1_init+0x154>)
 8001956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001958:	4b20      	ldr	r3, [pc, #128]	; (80019dc <i2c1_init+0x154>)
 800195a:	2102      	movs	r1, #2
 800195c:	430a      	orrs	r2, r1
 800195e:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_2);
 8001960:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <i2c1_init+0x154>)
 8001962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001964:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <i2c1_init+0x154>)
 8001966:	2104      	movs	r1, #4
 8001968:	430a      	orrs	r2, r1
 800196a:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_3);
 800196c:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <i2c1_init+0x154>)
 800196e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001970:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <i2c1_init+0x154>)
 8001972:	2108      	movs	r1, #8
 8001974:	438a      	bics	r2, r1
 8001976:	625a      	str	r2, [r3, #36]	; 0x24
	/*  PB9 as i2c SDL */
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_0);
 8001978:	4b18      	ldr	r3, [pc, #96]	; (80019dc <i2c1_init+0x154>)
 800197a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800197c:	4b17      	ldr	r3, [pc, #92]	; (80019dc <i2c1_init+0x154>)
 800197e:	2110      	movs	r1, #16
 8001980:	438a      	bics	r2, r1
 8001982:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_1);
 8001984:	4b15      	ldr	r3, [pc, #84]	; (80019dc <i2c1_init+0x154>)
 8001986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001988:	4b14      	ldr	r3, [pc, #80]	; (80019dc <i2c1_init+0x154>)
 800198a:	2120      	movs	r1, #32
 800198c:	430a      	orrs	r2, r1
 800198e:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_2);
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <i2c1_init+0x154>)
 8001992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <i2c1_init+0x154>)
 8001996:	2140      	movs	r1, #64	; 0x40
 8001998:	430a      	orrs	r2, r1
 800199a:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_3);
 800199c:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <i2c1_init+0x154>)
 800199e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019a0:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <i2c1_init+0x154>)
 80019a2:	2180      	movs	r1, #128	; 0x80
 80019a4:	438a      	bics	r2, r1
 80019a6:	625a      	str	r2, [r3, #36]	; 0x24

	/* select normal speed */
	SET_BIT(RCC->APBENR1, RCC_APBENR1_I2C1EN);
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <i2c1_init+0x160>)
 80019aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <i2c1_init+0x160>)
 80019ae:	2180      	movs	r1, #128	; 0x80
 80019b0:	0389      	lsls	r1, r1, #14
 80019b2:	430a      	orrs	r2, r1
 80019b4:	63da      	str	r2, [r3, #60]	; 0x3c

	/* i2c disable */
	CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <i2c1_init+0x164>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <i2c1_init+0x164>)
 80019bc:	2101      	movs	r1, #1
 80019be:	438a      	bics	r2, r1
 80019c0:	601a      	str	r2, [r3, #0]

	I2C1->TIMINGR = 0X10707DBCU;
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <i2c1_init+0x164>)
 80019c4:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <i2c1_init+0x168>)
 80019c6:	611a      	str	r2, [r3, #16]
	/*i2c Rx interrupt enable */
//SET_BIT(I2C1->CR1, I2C_CR1_RXIE);
//SET_BIT(I2C1->CR1, I2C_CR1_TXIE);

	/* i2c enable */
	SET_BIT(I2C1->CR1, I2C_CR1_PE);
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <i2c1_init+0x164>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b07      	ldr	r3, [pc, #28]	; (80019ec <i2c1_init+0x164>)
 80019ce:	2101      	movs	r1, #1
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]
}
 80019d4:	46c0      	nop			; (mov r8, r8)
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	50000400 	.word	0x50000400
 80019e0:	fffeffff 	.word	0xfffeffff
 80019e4:	fffbffff 	.word	0xfffbffff
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40005400 	.word	0x40005400
 80019f0:	10707dbc 	.word	0x10707dbc

080019f4 <i2c1_buffReceive>:
//	while (!(READ_BIT(I2C1->ISR, I2C_ISR_TC))) {
//	}
	return data;
}

void i2c1_buffReceive(char saddr, uint8_t *rcv, uint8_t N) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6039      	str	r1, [r7, #0]
 80019fc:	0011      	movs	r1, r2
 80019fe:	1dfb      	adds	r3, r7, #7
 8001a00:	1c02      	adds	r2, r0, #0
 8001a02:	701a      	strb	r2, [r3, #0]
 8001a04:	1dbb      	adds	r3, r7, #6
 8001a06:	1c0a      	adds	r2, r1, #0
 8001a08:	701a      	strb	r2, [r3, #0]
	uint32_t counter = HAL_GetTick();
 8001a0a:	f002 fb69 	bl	80040e0 <HAL_GetTick>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	60fb      	str	r3, [r7, #12]
	bool timeout = false;
 8001a12:	2317      	movs	r3, #23
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
	i2c1_start(saddr, READ, N);
 8001a1a:	1dbb      	adds	r3, r7, #6
 8001a1c:	781a      	ldrb	r2, [r3, #0]
 8001a1e:	1dfb      	adds	r3, r7, #7
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2101      	movs	r1, #1
 8001a24:	0018      	movs	r0, r3
 8001a26:	f000 f88f 	bl	8001b48 <i2c1_start>

	for (int i = 0; i < N; i++) {
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	e02a      	b.n	8001a86 <i2c1_buffReceive+0x92>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
			if (HAL_GetTick() - counter > 500)
 8001a30:	f002 fb56 	bl	80040e0 <HAL_GetTick>
 8001a34:	0002      	movs	r2, r0
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1ad2      	subs	r2, r2, r3
 8001a3a:	2017      	movs	r0, #23
 8001a3c:	183b      	adds	r3, r7, r0
 8001a3e:	1839      	adds	r1, r7, r0
 8001a40:	7809      	ldrb	r1, [r1, #0]
 8001a42:	7019      	strb	r1, [r3, #0]
 8001a44:	23fa      	movs	r3, #250	; 0xfa
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d902      	bls.n	8001a52 <i2c1_buffReceive+0x5e>
				timeout = true;
 8001a4c:	183b      	adds	r3, r7, r0
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <i2c1_buffReceive+0xa8>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	2204      	movs	r2, #4
 8001a58:	4013      	ands	r3, r2
 8001a5a:	425a      	negs	r2, r3
 8001a5c:	4153      	adcs	r3, r2
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	0019      	movs	r1, r3
 8001a62:	2317      	movs	r3, #23
 8001a64:	18fb      	adds	r3, r7, r3
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	4053      	eors	r3, r2
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	400b      	ands	r3, r1
 8001a70:	d1de      	bne.n	8001a30 <i2c1_buffReceive+0x3c>
		}
		rcv[i] = I2C1->RXDR;
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <i2c1_buffReceive+0xa8>)
 8001a74:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	18d3      	adds	r3, r2, r3
 8001a7c:	b2ca      	uxtb	r2, r1
 8001a7e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N; i++) {
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	3301      	adds	r3, #1
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	1dbb      	adds	r3, r7, #6
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	dbe0      	blt.n	8001a52 <i2c1_buffReceive+0x5e>
	}
}
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b006      	add	sp, #24
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	40005400 	.word	0x40005400

08001aa0 <i2c1_byte_tx>:

void i2c1_byte_tx(uint8_t saddr, uint8_t *data, uint8_t N) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6039      	str	r1, [r7, #0]
 8001aa8:	0011      	movs	r1, r2
 8001aaa:	1dfb      	adds	r3, r7, #7
 8001aac:	1c02      	adds	r2, r0, #0
 8001aae:	701a      	strb	r2, [r3, #0]
 8001ab0:	1dbb      	adds	r3, r7, #6
 8001ab2:	1c0a      	adds	r2, r1, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
	i2c1_start(saddr, WRITE, N);
 8001ab6:	1dbb      	adds	r3, r7, #6
 8001ab8:	781a      	ldrb	r2, [r3, #0]
 8001aba:	1dfb      	adds	r3, r7, #7
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2100      	movs	r1, #0
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f000 f841 	bl	8001b48 <i2c1_start>
	uint32_t counter = HAL_GetTick();
 8001ac6:	f002 fb0b 	bl	80040e0 <HAL_GetTick>
 8001aca:	0003      	movs	r3, r0
 8001acc:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < N; i++) {
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	e016      	b.n	8001b02 <i2c1_byte_tx+0x62>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXE)) {

			if (HAL_GetTick() - counter > 500)
 8001ad4:	f002 fb04 	bl	80040e0 <HAL_GetTick>
 8001ad8:	0002      	movs	r2, r0
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	1ad2      	subs	r2, r2, r3
 8001ade:	23fa      	movs	r3, #250	; 0xfa
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d828      	bhi.n	8001b38 <i2c1_byte_tx+0x98>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXE)) {
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <i2c1_byte_tx+0xa4>)
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	2201      	movs	r2, #1
 8001aec:	4013      	ands	r3, r2
 8001aee:	d0f1      	beq.n	8001ad4 <i2c1_byte_tx+0x34>
				return;
		}
		I2C1->TXDR = data[i];
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	18d3      	adds	r3, r2, r3
 8001af6:	781a      	ldrb	r2, [r3, #0]
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <i2c1_byte_tx+0xa4>)
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28
	for (int i = 0; i < N; i++) {
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3301      	adds	r3, #1
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	1dbb      	adds	r3, r7, #6
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	dbec      	blt.n	8001ae6 <i2c1_byte_tx+0x46>
	}

	while (!READ_BIT(I2C1->ISR, I2C_ISR_STOPF)) {
 8001b0c:	e008      	b.n	8001b20 <i2c1_byte_tx+0x80>
		if (HAL_GetTick() - counter > 500)
 8001b0e:	f002 fae7 	bl	80040e0 <HAL_GetTick>
 8001b12:	0002      	movs	r2, r0
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	1ad2      	subs	r2, r2, r3
 8001b18:	23fa      	movs	r3, #250	; 0xfa
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d80d      	bhi.n	8001b3c <i2c1_byte_tx+0x9c>
	while (!READ_BIT(I2C1->ISR, I2C_ISR_STOPF)) {
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <i2c1_byte_tx+0xa4>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	2220      	movs	r2, #32
 8001b26:	4013      	ands	r3, r2
 8001b28:	d0f1      	beq.n	8001b0e <i2c1_byte_tx+0x6e>
			return;

	}
	SET_BIT(I2C1->ICR, I2C_ICR_STOPCF);
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <i2c1_byte_tx+0xa4>)
 8001b2c:	69da      	ldr	r2, [r3, #28]
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <i2c1_byte_tx+0xa4>)
 8001b30:	2120      	movs	r1, #32
 8001b32:	430a      	orrs	r2, r1
 8001b34:	61da      	str	r2, [r3, #28]
 8001b36:	e002      	b.n	8001b3e <i2c1_byte_tx+0x9e>
				return;
 8001b38:	46c0      	nop			; (mov r8, r8)
 8001b3a:	e000      	b.n	8001b3e <i2c1_byte_tx+0x9e>
			return;
 8001b3c:	46c0      	nop			; (mov r8, r8)

}
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b004      	add	sp, #16
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40005400 	.word	0x40005400

08001b48 <i2c1_start>:
	}
	SET_BIT(I2C1->ISR, I2C_ICR_STOPCF);

}

void i2c1_start(char saddr, uint8_t transfer_request, uint8_t N) {
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	0004      	movs	r4, r0
 8001b50:	0008      	movs	r0, r1
 8001b52:	0011      	movs	r1, r2
 8001b54:	1dfb      	adds	r3, r7, #7
 8001b56:	1c22      	adds	r2, r4, #0
 8001b58:	701a      	strb	r2, [r3, #0]
 8001b5a:	1dbb      	adds	r3, r7, #6
 8001b5c:	1c02      	adds	r2, r0, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
 8001b60:	1d7b      	adds	r3, r7, #5
 8001b62:	1c0a      	adds	r2, r1, #0
 8001b64:	701a      	strb	r2, [r3, #0]
	/*master 7 bit addressing mode */
	CLEAR_BIT(I2C1->CR2, I2C_CR2_ADD10);
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <i2c1_start+0xa4>)
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	4b20      	ldr	r3, [pc, #128]	; (8001bec <i2c1_start+0xa4>)
 8001b6c:	4920      	ldr	r1, [pc, #128]	; (8001bf0 <i2c1_start+0xa8>)
 8001b6e:	400a      	ands	r2, r1
 8001b70:	605a      	str	r2, [r3, #4]
	/* set Slave address */
	MODIFY_REG(I2C1->CR2, I2C_CR2_SADD, saddr << I2C_CR2_SADD_Pos);
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <i2c1_start+0xa4>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	0a9b      	lsrs	r3, r3, #10
 8001b78:	0299      	lsls	r1, r3, #10
 8001b7a:	1dfb      	adds	r3, r7, #7
 8001b7c:	781a      	ldrb	r2, [r3, #0]
 8001b7e:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <i2c1_start+0xa4>)
 8001b80:	430a      	orrs	r2, r1
 8001b82:	605a      	str	r2, [r3, #4]
	/* read 1 byte */
	MODIFY_REG(I2C1->CR2, I2C_CR2_NBYTES, N << I2C_CR2_NBYTES_Pos);
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <i2c1_start+0xa4>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	4a1a      	ldr	r2, [pc, #104]	; (8001bf4 <i2c1_start+0xac>)
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	1d7b      	adds	r3, r7, #5
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	041b      	lsls	r3, r3, #16
 8001b92:	0019      	movs	r1, r3
 8001b94:	4b15      	ldr	r3, [pc, #84]	; (8001bec <i2c1_start+0xa4>)
 8001b96:	430a      	orrs	r2, r1
 8001b98:	605a      	str	r2, [r3, #4]
	/* stops when NBytes are transferred */
	SET_BIT(I2C1->CR2, I2C_CR2_AUTOEND);
 8001b9a:	4b14      	ldr	r3, [pc, #80]	; (8001bec <i2c1_start+0xa4>)
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <i2c1_start+0xa4>)
 8001ba0:	2180      	movs	r1, #128	; 0x80
 8001ba2:	0489      	lsls	r1, r1, #18
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	605a      	str	r2, [r3, #4]
	/* set START condition  automatically changes to master */


	if (transfer_request == 1) {
 8001ba8:	1dbb      	adds	r3, r7, #6
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d107      	bne.n	8001bc0 <i2c1_start+0x78>
		/* request a read transfer */
		SET_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <i2c1_start+0xa4>)
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <i2c1_start+0xa4>)
 8001bb6:	2180      	movs	r1, #128	; 0x80
 8001bb8:	00c9      	lsls	r1, r1, #3
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	e009      	b.n	8001bd4 <i2c1_start+0x8c>
	} else if (transfer_request == 0) {
 8001bc0:	1dbb      	adds	r3, r7, #6
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d105      	bne.n	8001bd4 <i2c1_start+0x8c>
		/* request a write transfer */
		CLEAR_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <i2c1_start+0xa4>)
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <i2c1_start+0xa4>)
 8001bce:	490a      	ldr	r1, [pc, #40]	; (8001bf8 <i2c1_start+0xb0>)
 8001bd0:	400a      	ands	r2, r1
 8001bd2:	605a      	str	r2, [r3, #4]
	}

	SET_BIT(I2C1->CR2, I2C_CR2_START);
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <i2c1_start+0xa4>)
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <i2c1_start+0xa4>)
 8001bda:	2180      	movs	r1, #128	; 0x80
 8001bdc:	0189      	lsls	r1, r1, #6
 8001bde:	430a      	orrs	r2, r1
 8001be0:	605a      	str	r2, [r3, #4]

}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b003      	add	sp, #12
 8001be8:	bd90      	pop	{r4, r7, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	40005400 	.word	0x40005400
 8001bf0:	fffff7ff 	.word	0xfffff7ff
 8001bf4:	ff00ffff 	.word	0xff00ffff
 8001bf8:	fffffbff 	.word	0xfffffbff

08001bfc <led_init>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void led_init(void) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0

	/*CURRENT LOW LED PA12  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE12_0);
 8001c00:	23a0      	movs	r3, #160	; 0xa0
 8001c02:	05db      	lsls	r3, r3, #23
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	23a0      	movs	r3, #160	; 0xa0
 8001c08:	05db      	lsls	r3, r3, #23
 8001c0a:	2180      	movs	r1, #128	; 0x80
 8001c0c:	0449      	lsls	r1, r1, #17
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE12_1);
 8001c12:	23a0      	movs	r3, #160	; 0xa0
 8001c14:	05db      	lsls	r3, r3, #23
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	23a0      	movs	r3, #160	; 0xa0
 8001c1a:	05db      	lsls	r3, r3, #23
 8001c1c:	492b      	ldr	r1, [pc, #172]	; (8001ccc <led_init+0xd0>)
 8001c1e:	400a      	ands	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]

	/*CURRENT NORMAL LED PA11  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE11_0);
 8001c22:	23a0      	movs	r3, #160	; 0xa0
 8001c24:	05db      	lsls	r3, r3, #23
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	23a0      	movs	r3, #160	; 0xa0
 8001c2a:	05db      	lsls	r3, r3, #23
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	03c9      	lsls	r1, r1, #15
 8001c30:	430a      	orrs	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE11_1);
 8001c34:	23a0      	movs	r3, #160	; 0xa0
 8001c36:	05db      	lsls	r3, r3, #23
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	23a0      	movs	r3, #160	; 0xa0
 8001c3c:	05db      	lsls	r3, r3, #23
 8001c3e:	4924      	ldr	r1, [pc, #144]	; (8001cd0 <led_init+0xd4>)
 8001c40:	400a      	ands	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]

	/*CURRENT HIGH  LED PA10  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE10_0);
 8001c44:	23a0      	movs	r3, #160	; 0xa0
 8001c46:	05db      	lsls	r3, r3, #23
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	23a0      	movs	r3, #160	; 0xa0
 8001c4c:	05db      	lsls	r3, r3, #23
 8001c4e:	2180      	movs	r1, #128	; 0x80
 8001c50:	0349      	lsls	r1, r1, #13
 8001c52:	430a      	orrs	r2, r1
 8001c54:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE10_1);
 8001c56:	23a0      	movs	r3, #160	; 0xa0
 8001c58:	05db      	lsls	r3, r3, #23
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	23a0      	movs	r3, #160	; 0xa0
 8001c5e:	05db      	lsls	r3, r3, #23
 8001c60:	491c      	ldr	r1, [pc, #112]	; (8001cd4 <led_init+0xd8>)
 8001c62:	400a      	ands	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]

	/*SYS_RP LED PC6  as output */
	SET_BIT(GPIOC->MODER, GPIO_MODER_MODE6_0);
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <led_init+0xdc>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <led_init+0xdc>)
 8001c6c:	2180      	movs	r1, #128	; 0x80
 8001c6e:	0149      	lsls	r1, r1, #5
 8001c70:	430a      	orrs	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOC->MODER, GPIO_MODER_MODE6_1);
 8001c74:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <led_init+0xdc>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <led_init+0xdc>)
 8001c7a:	4918      	ldr	r1, [pc, #96]	; (8001cdc <led_init+0xe0>)
 8001c7c:	400a      	ands	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]

	/* TEMPERATURE OK  LED PA9  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE9_0);
 8001c80:	23a0      	movs	r3, #160	; 0xa0
 8001c82:	05db      	lsls	r3, r3, #23
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	23a0      	movs	r3, #160	; 0xa0
 8001c88:	05db      	lsls	r3, r3, #23
 8001c8a:	2180      	movs	r1, #128	; 0x80
 8001c8c:	02c9      	lsls	r1, r1, #11
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE9_1);
 8001c92:	23a0      	movs	r3, #160	; 0xa0
 8001c94:	05db      	lsls	r3, r3, #23
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	23a0      	movs	r3, #160	; 0xa0
 8001c9a:	05db      	lsls	r3, r3, #23
 8001c9c:	4910      	ldr	r1, [pc, #64]	; (8001ce0 <led_init+0xe4>)
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]

	/* TEMPERATURE HIGH LED PA8  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE8_0);
 8001ca2:	23a0      	movs	r3, #160	; 0xa0
 8001ca4:	05db      	lsls	r3, r3, #23
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	23a0      	movs	r3, #160	; 0xa0
 8001caa:	05db      	lsls	r3, r3, #23
 8001cac:	2180      	movs	r1, #128	; 0x80
 8001cae:	0249      	lsls	r1, r1, #9
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE8_1);
 8001cb4:	23a0      	movs	r3, #160	; 0xa0
 8001cb6:	05db      	lsls	r3, r3, #23
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	23a0      	movs	r3, #160	; 0xa0
 8001cbc:	05db      	lsls	r3, r3, #23
 8001cbe:	4909      	ldr	r1, [pc, #36]	; (8001ce4 <led_init+0xe8>)
 8001cc0:	400a      	ands	r2, r1
 8001cc2:	601a      	str	r2, [r3, #0]

}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	fdffffff 	.word	0xfdffffff
 8001cd0:	ff7fffff 	.word	0xff7fffff
 8001cd4:	ffdfffff 	.word	0xffdfffff
 8001cd8:	50000800 	.word	0x50000800
 8001cdc:	ffffdfff 	.word	0xffffdfff
 8001ce0:	fff7ffff 	.word	0xfff7ffff
 8001ce4:	fffdffff 	.word	0xfffdffff

08001ce8 <led_enable_kalive>:
void led_off(void) {

}

void led_enable_kalive(LED_t *l) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - l->ka_counter > LED_KA_STATE_TIMEOUT)
 8001cf0:	f002 f9f6 	bl	80040e0 <HAL_GetTick>
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	1ad2      	subs	r2, r2, r3
 8001cfc:	23fa      	movs	r3, #250	; 0xfa
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d905      	bls.n	8001d10 <led_enable_kalive+0x28>
		l->ka_counter = HAL_GetTick();
 8001d04:	f002 f9ec 	bl	80040e0 <HAL_GetTick>
 8001d08:	0002      	movs	r2, r0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	601a      	str	r2, [r3, #0]
			sys_rp_led_off();
		else
			sys_rp_led_on();
	}

}
 8001d0e:	e014      	b.n	8001d3a <led_enable_kalive+0x52>
		if (HAL_GetTick() - l->ka_counter > LED_KA_ON_TIMEOUT)
 8001d10:	f002 f9e6 	bl	80040e0 <HAL_GetTick>
 8001d14:	0002      	movs	r2, r0
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b32      	cmp	r3, #50	; 0x32
 8001d1e:	d906      	bls.n	8001d2e <led_enable_kalive+0x46>
			sys_rp_led_off();
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <led_enable_kalive+0x5c>)
 8001d22:	695a      	ldr	r2, [r3, #20]
 8001d24:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <led_enable_kalive+0x5c>)
 8001d26:	2140      	movs	r1, #64	; 0x40
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	615a      	str	r2, [r3, #20]
}
 8001d2c:	e005      	b.n	8001d3a <led_enable_kalive+0x52>
			sys_rp_led_on();
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <led_enable_kalive+0x5c>)
 8001d30:	695a      	ldr	r2, [r3, #20]
 8001d32:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <led_enable_kalive+0x5c>)
 8001d34:	2140      	movs	r1, #64	; 0x40
 8001d36:	438a      	bics	r2, r1
 8001d38:	615a      	str	r2, [r3, #20]
}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b002      	add	sp, #8
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	50000800 	.word	0x50000800

08001d48 <led_reset>:
void led_reset(LED_t *l) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	l->ch_counter = 0;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
	l->cl_counter = 0;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	605a      	str	r2, [r3, #4]
	l->cn_counter = 0;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
	l->ka_counter = HAL_GetTick();
 8001d62:	f002 f9bd 	bl	80040e0 <HAL_GetTick>
 8001d66:	0002      	movs	r2, r0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	601a      	str	r2, [r3, #0]
	l->sysrp_counter = 0;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]
	l->th_counter = 0;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
	l->tok_counter = 0;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	615a      	str	r2, [r3, #20]
	current_low_led_on();
 8001d7e:	23a0      	movs	r3, #160	; 0xa0
 8001d80:	05db      	lsls	r3, r3, #23
 8001d82:	695a      	ldr	r2, [r3, #20]
 8001d84:	23a0      	movs	r3, #160	; 0xa0
 8001d86:	05db      	lsls	r3, r3, #23
 8001d88:	4916      	ldr	r1, [pc, #88]	; (8001de4 <led_reset+0x9c>)
 8001d8a:	400a      	ands	r2, r1
 8001d8c:	615a      	str	r2, [r3, #20]
	current_normal_led_on();
 8001d8e:	23a0      	movs	r3, #160	; 0xa0
 8001d90:	05db      	lsls	r3, r3, #23
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	23a0      	movs	r3, #160	; 0xa0
 8001d96:	05db      	lsls	r3, r3, #23
 8001d98:	4913      	ldr	r1, [pc, #76]	; (8001de8 <led_reset+0xa0>)
 8001d9a:	400a      	ands	r2, r1
 8001d9c:	615a      	str	r2, [r3, #20]
	current_high_led_on();
 8001d9e:	23a0      	movs	r3, #160	; 0xa0
 8001da0:	05db      	lsls	r3, r3, #23
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	23a0      	movs	r3, #160	; 0xa0
 8001da6:	05db      	lsls	r3, r3, #23
 8001da8:	4910      	ldr	r1, [pc, #64]	; (8001dec <led_reset+0xa4>)
 8001daa:	400a      	ands	r2, r1
 8001dac:	615a      	str	r2, [r3, #20]
	sys_rp_led_on();
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <led_reset+0xa8>)
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <led_reset+0xa8>)
 8001db4:	2140      	movs	r1, #64	; 0x40
 8001db6:	438a      	bics	r2, r1
 8001db8:	615a      	str	r2, [r3, #20]
	temperature_ok_led_on();
 8001dba:	23a0      	movs	r3, #160	; 0xa0
 8001dbc:	05db      	lsls	r3, r3, #23
 8001dbe:	695a      	ldr	r2, [r3, #20]
 8001dc0:	23a0      	movs	r3, #160	; 0xa0
 8001dc2:	05db      	lsls	r3, r3, #23
 8001dc4:	490b      	ldr	r1, [pc, #44]	; (8001df4 <led_reset+0xac>)
 8001dc6:	400a      	ands	r2, r1
 8001dc8:	615a      	str	r2, [r3, #20]
	temperature_high_led_on();
 8001dca:	23a0      	movs	r3, #160	; 0xa0
 8001dcc:	05db      	lsls	r3, r3, #23
 8001dce:	695a      	ldr	r2, [r3, #20]
 8001dd0:	23a0      	movs	r3, #160	; 0xa0
 8001dd2:	05db      	lsls	r3, r3, #23
 8001dd4:	4908      	ldr	r1, [pc, #32]	; (8001df8 <led_reset+0xb0>)
 8001dd6:	400a      	ands	r2, r1
 8001dd8:	615a      	str	r2, [r3, #20]
}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b002      	add	sp, #8
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	ffffefff 	.word	0xffffefff
 8001de8:	fffff7ff 	.word	0xfffff7ff
 8001dec:	fffffbff 	.word	0xfffffbff
 8001df0:	50000800 	.word	0x50000800
 8001df4:	fffffdff 	.word	0xfffffdff
 8001df8:	fffffeff 	.word	0xfffffeff

08001dfc <led_current_update>:

void led_current_update(int16_t current) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	0002      	movs	r2, r0
 8001e04:	1dbb      	adds	r3, r7, #6
 8001e06:	801a      	strh	r2, [r3, #0]

	if (current >= LED_MAX_CURRENT) {
 8001e08:	1dbb      	adds	r3, r7, #6
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	5e9a      	ldrsh	r2, [r3, r2]
 8001e0e:	2396      	movs	r3, #150	; 0x96
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	429a      	cmp	r2, r3
 8001e14:	db1a      	blt.n	8001e4c <led_current_update+0x50>
		current_high_led_on();
 8001e16:	23a0      	movs	r3, #160	; 0xa0
 8001e18:	05db      	lsls	r3, r3, #23
 8001e1a:	695a      	ldr	r2, [r3, #20]
 8001e1c:	23a0      	movs	r3, #160	; 0xa0
 8001e1e:	05db      	lsls	r3, r3, #23
 8001e20:	492f      	ldr	r1, [pc, #188]	; (8001ee0 <led_current_update+0xe4>)
 8001e22:	400a      	ands	r2, r1
 8001e24:	615a      	str	r2, [r3, #20]
		current_normal_led_off();
 8001e26:	23a0      	movs	r3, #160	; 0xa0
 8001e28:	05db      	lsls	r3, r3, #23
 8001e2a:	695a      	ldr	r2, [r3, #20]
 8001e2c:	23a0      	movs	r3, #160	; 0xa0
 8001e2e:	05db      	lsls	r3, r3, #23
 8001e30:	2180      	movs	r1, #128	; 0x80
 8001e32:	0109      	lsls	r1, r1, #4
 8001e34:	430a      	orrs	r2, r1
 8001e36:	615a      	str	r2, [r3, #20]
		current_low_led_off();
 8001e38:	23a0      	movs	r3, #160	; 0xa0
 8001e3a:	05db      	lsls	r3, r3, #23
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	23a0      	movs	r3, #160	; 0xa0
 8001e40:	05db      	lsls	r3, r3, #23
 8001e42:	2180      	movs	r1, #128	; 0x80
 8001e44:	0149      	lsls	r1, r1, #5
 8001e46:	430a      	orrs	r2, r1
 8001e48:	615a      	str	r2, [r3, #20]
	} else if (current <= LED_MIN_CURRENT) {
		current_high_led_off();
		current_normal_led_off();
		current_low_led_on();
	}
}
 8001e4a:	e045      	b.n	8001ed8 <led_current_update+0xdc>
	} else if (current > LED_MIN_CURRENT && current < LED_MAX_CURRENT) {
 8001e4c:	1dbb      	adds	r3, r7, #6
 8001e4e:	2200      	movs	r2, #0
 8001e50:	5e9b      	ldrsh	r3, [r3, r2]
 8001e52:	2b64      	cmp	r3, #100	; 0x64
 8001e54:	dd21      	ble.n	8001e9a <led_current_update+0x9e>
 8001e56:	1dbb      	adds	r3, r7, #6
 8001e58:	2200      	movs	r2, #0
 8001e5a:	5e9a      	ldrsh	r2, [r3, r2]
 8001e5c:	2396      	movs	r3, #150	; 0x96
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	429a      	cmp	r2, r3
 8001e62:	da1a      	bge.n	8001e9a <led_current_update+0x9e>
		current_high_led_off();
 8001e64:	23a0      	movs	r3, #160	; 0xa0
 8001e66:	05db      	lsls	r3, r3, #23
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	23a0      	movs	r3, #160	; 0xa0
 8001e6c:	05db      	lsls	r3, r3, #23
 8001e6e:	2180      	movs	r1, #128	; 0x80
 8001e70:	00c9      	lsls	r1, r1, #3
 8001e72:	430a      	orrs	r2, r1
 8001e74:	615a      	str	r2, [r3, #20]
		current_normal_led_on();
 8001e76:	23a0      	movs	r3, #160	; 0xa0
 8001e78:	05db      	lsls	r3, r3, #23
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	23a0      	movs	r3, #160	; 0xa0
 8001e7e:	05db      	lsls	r3, r3, #23
 8001e80:	4918      	ldr	r1, [pc, #96]	; (8001ee4 <led_current_update+0xe8>)
 8001e82:	400a      	ands	r2, r1
 8001e84:	615a      	str	r2, [r3, #20]
		current_low_led_off();
 8001e86:	23a0      	movs	r3, #160	; 0xa0
 8001e88:	05db      	lsls	r3, r3, #23
 8001e8a:	695a      	ldr	r2, [r3, #20]
 8001e8c:	23a0      	movs	r3, #160	; 0xa0
 8001e8e:	05db      	lsls	r3, r3, #23
 8001e90:	2180      	movs	r1, #128	; 0x80
 8001e92:	0149      	lsls	r1, r1, #5
 8001e94:	430a      	orrs	r2, r1
 8001e96:	615a      	str	r2, [r3, #20]
}
 8001e98:	e01e      	b.n	8001ed8 <led_current_update+0xdc>
	} else if (current <= LED_MIN_CURRENT) {
 8001e9a:	1dbb      	adds	r3, r7, #6
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	5e9b      	ldrsh	r3, [r3, r2]
 8001ea0:	2b64      	cmp	r3, #100	; 0x64
 8001ea2:	dc19      	bgt.n	8001ed8 <led_current_update+0xdc>
		current_high_led_off();
 8001ea4:	23a0      	movs	r3, #160	; 0xa0
 8001ea6:	05db      	lsls	r3, r3, #23
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	23a0      	movs	r3, #160	; 0xa0
 8001eac:	05db      	lsls	r3, r3, #23
 8001eae:	2180      	movs	r1, #128	; 0x80
 8001eb0:	00c9      	lsls	r1, r1, #3
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	615a      	str	r2, [r3, #20]
		current_normal_led_off();
 8001eb6:	23a0      	movs	r3, #160	; 0xa0
 8001eb8:	05db      	lsls	r3, r3, #23
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	23a0      	movs	r3, #160	; 0xa0
 8001ebe:	05db      	lsls	r3, r3, #23
 8001ec0:	2180      	movs	r1, #128	; 0x80
 8001ec2:	0109      	lsls	r1, r1, #4
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	615a      	str	r2, [r3, #20]
		current_low_led_on();
 8001ec8:	23a0      	movs	r3, #160	; 0xa0
 8001eca:	05db      	lsls	r3, r3, #23
 8001ecc:	695a      	ldr	r2, [r3, #20]
 8001ece:	23a0      	movs	r3, #160	; 0xa0
 8001ed0:	05db      	lsls	r3, r3, #23
 8001ed2:	4905      	ldr	r1, [pc, #20]	; (8001ee8 <led_current_update+0xec>)
 8001ed4:	400a      	ands	r2, r1
 8001ed6:	615a      	str	r2, [r3, #20]
}
 8001ed8:	46c0      	nop			; (mov r8, r8)
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b002      	add	sp, #8
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	fffffbff 	.word	0xfffffbff
 8001ee4:	fffff7ff 	.word	0xfffff7ff
 8001ee8:	ffffefff 	.word	0xffffefff

08001eec <led_temperature_update>:

uint8_t led_temperature_update(uint8_t temperature) {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	1dfb      	adds	r3, r7, #7
 8001ef6:	701a      	strb	r2, [r3, #0]
	if (temperature > LED_MAX_TEMPERATURE) {
 8001ef8:	1dfb      	adds	r3, r7, #7
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b4b      	cmp	r3, #75	; 0x4b
 8001efe:	d912      	bls.n	8001f26 <led_temperature_update+0x3a>
		temperature_ok_led_off();
 8001f00:	23a0      	movs	r3, #160	; 0xa0
 8001f02:	05db      	lsls	r3, r3, #23
 8001f04:	695a      	ldr	r2, [r3, #20]
 8001f06:	23a0      	movs	r3, #160	; 0xa0
 8001f08:	05db      	lsls	r3, r3, #23
 8001f0a:	2180      	movs	r1, #128	; 0x80
 8001f0c:	0089      	lsls	r1, r1, #2
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	615a      	str	r2, [r3, #20]
		temperature_high_led_on();
 8001f12:	23a0      	movs	r3, #160	; 0xa0
 8001f14:	05db      	lsls	r3, r3, #23
 8001f16:	695a      	ldr	r2, [r3, #20]
 8001f18:	23a0      	movs	r3, #160	; 0xa0
 8001f1a:	05db      	lsls	r3, r3, #23
 8001f1c:	490d      	ldr	r1, [pc, #52]	; (8001f54 <led_temperature_update+0x68>)
 8001f1e:	400a      	ands	r2, r1
 8001f20:	615a      	str	r2, [r3, #20]
		return 1;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e011      	b.n	8001f4a <led_temperature_update+0x5e>
	} else {
		temperature_ok_led_on();
 8001f26:	23a0      	movs	r3, #160	; 0xa0
 8001f28:	05db      	lsls	r3, r3, #23
 8001f2a:	695a      	ldr	r2, [r3, #20]
 8001f2c:	23a0      	movs	r3, #160	; 0xa0
 8001f2e:	05db      	lsls	r3, r3, #23
 8001f30:	4909      	ldr	r1, [pc, #36]	; (8001f58 <led_temperature_update+0x6c>)
 8001f32:	400a      	ands	r2, r1
 8001f34:	615a      	str	r2, [r3, #20]
		temperature_high_led_off();
 8001f36:	23a0      	movs	r3, #160	; 0xa0
 8001f38:	05db      	lsls	r3, r3, #23
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	23a0      	movs	r3, #160	; 0xa0
 8001f3e:	05db      	lsls	r3, r3, #23
 8001f40:	2180      	movs	r1, #128	; 0x80
 8001f42:	0049      	lsls	r1, r1, #1
 8001f44:	430a      	orrs	r2, r1
 8001f46:	615a      	str	r2, [r3, #20]
		return 0;
 8001f48:	2300      	movs	r3, #0
	}
}
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b002      	add	sp, #8
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	fffffeff 	.word	0xfffffeff
 8001f58:	fffffdff 	.word	0xfffffdff

08001f5c <lm75_init>:
#include "lm75.h"

void lm75_init(void ) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
	uint8_t cmd[2];
	cmd[0] = LM75_Conf;
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	2201      	movs	r2, #1
 8001f66:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x0;
 8001f68:	1d3b      	adds	r3, r7, #4
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	705a      	strb	r2, [r3, #1]
	i2c1_byte_tx(LM75_ADDR<<1, cmd, 2);
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	2202      	movs	r2, #2
 8001f72:	0019      	movs	r1, r3
 8001f74:	209e      	movs	r0, #158	; 0x9e
 8001f76:	f7ff fd93 	bl	8001aa0 <i2c1_byte_tx>
}
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b002      	add	sp, #8
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <lm75_read>:

float lm75_read(void) {
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
	uint8_t cmd[2];
	float result = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	607b      	str	r3, [r7, #4]
	cmd[0] = LM75_Temp;
 8001f8c:	003b      	movs	r3, r7
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]

	i2c1_byte_tx( LM75_ADDR<<1, cmd, 1); // Send command string
 8001f92:	003b      	movs	r3, r7
 8001f94:	2201      	movs	r2, #1
 8001f96:	0019      	movs	r1, r3
 8001f98:	209e      	movs	r0, #158	; 0x9e
 8001f9a:	f7ff fd81 	bl	8001aa0 <i2c1_byte_tx>
	HAL_Delay(1);
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	f002 f8a8 	bl	80040f4 <HAL_Delay>
	i2c1_buffReceive(LM75_ADDR<<1 | 1, cmd, 2); // Send command string
 8001fa4:	003b      	movs	r3, r7
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	0019      	movs	r1, r3
 8001faa:	209f      	movs	r0, #159	; 0x9f
 8001fac:	f7ff fd22 	bl	80019f4 <i2c1_buffReceive>
	result = (float) ((cmd[0] << 8) | cmd[1]) / 256.0f;
 8001fb0:	003b      	movs	r3, r7
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	021b      	lsls	r3, r3, #8
 8001fb6:	003a      	movs	r2, r7
 8001fb8:	7852      	ldrb	r2, [r2, #1]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f7ff f8e1 	bl	8001184 <__aeabi_i2f>
 8001fc2:	1c03      	adds	r3, r0, #0
 8001fc4:	2187      	movs	r1, #135	; 0x87
 8001fc6:	05c9      	lsls	r1, r1, #23
 8001fc8:	1c18      	adds	r0, r3, #0
 8001fca:	f7fe fc09 	bl	80007e0 <__aeabi_fdiv>
 8001fce:	1c03      	adds	r3, r0, #0
 8001fd0:	607b      	str	r3, [r7, #4]
	return result;
 8001fd2:	687b      	ldr	r3, [r7, #4]
}
 8001fd4:	1c18      	adds	r0, r3, #0
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b002      	add	sp, #8
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <m24c64_read_N>:

	i2c1_byte_tx(CHIP_ADDR, buff, 2);
	i2c1_buffReceive(CHIP_ADDR, data, 32);
}

void m24c64_read_N(uint8_t page, uint8_t *data, uint8_t offset, uint8_t size) {
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	0004      	movs	r4, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	0010      	movs	r0, r2
 8001fe8:	0019      	movs	r1, r3
 8001fea:	1dfb      	adds	r3, r7, #7
 8001fec:	1c22      	adds	r2, r4, #0
 8001fee:	701a      	strb	r2, [r3, #0]
 8001ff0:	1dbb      	adds	r3, r7, #6
 8001ff2:	1c02      	adds	r2, r0, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
 8001ff6:	1d7b      	adds	r3, r7, #5
 8001ff8:	1c0a      	adds	r2, r1, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
	uint8_t buff[2] = { 0 };
 8001ffc:	210c      	movs	r1, #12
 8001ffe:	187b      	adds	r3, r7, r1
 8002000:	2200      	movs	r2, #0
 8002002:	801a      	strh	r2, [r3, #0]
	uint16_t MemAddress = page << PADDRPOSITION | offset;
 8002004:	1dfb      	adds	r3, r7, #7
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	015b      	lsls	r3, r3, #5
 800200a:	b21a      	sxth	r2, r3
 800200c:	1dbb      	adds	r3, r7, #6
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	b21b      	sxth	r3, r3
 8002012:	4313      	orrs	r3, r2
 8002014:	b21a      	sxth	r2, r3
 8002016:	200e      	movs	r0, #14
 8002018:	183b      	adds	r3, r7, r0
 800201a:	801a      	strh	r2, [r3, #0]

	buff[0] = MemAddress >> 8;
 800201c:	183b      	adds	r3, r7, r0
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	b29b      	uxth	r3, r3
 8002024:	b2da      	uxtb	r2, r3
 8002026:	187b      	adds	r3, r7, r1
 8002028:	701a      	strb	r2, [r3, #0]
	buff[1] = MemAddress & 0xff;
 800202a:	183b      	adds	r3, r7, r0
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	187b      	adds	r3, r7, r1
 8002032:	705a      	strb	r2, [r3, #1]

	i2c1_byte_tx(CHIP_ADDR, buff, 2);
 8002034:	187b      	adds	r3, r7, r1
 8002036:	2202      	movs	r2, #2
 8002038:	0019      	movs	r1, r3
 800203a:	20a0      	movs	r0, #160	; 0xa0
 800203c:	f7ff fd30 	bl	8001aa0 <i2c1_byte_tx>
	i2c1_buffReceive(CHIP_ADDR, data, size);
 8002040:	1d7b      	adds	r3, r7, #5
 8002042:	781a      	ldrb	r2, [r3, #0]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	0019      	movs	r1, r3
 8002048:	20a0      	movs	r0, #160	; 0xa0
 800204a:	f7ff fcd3 	bl	80019f4 <i2c1_buffReceive>
}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	46bd      	mov	sp, r7
 8002052:	b005      	add	sp, #20
 8002054:	bd90      	pop	{r4, r7, pc}

08002056 <m24c64_write_N>:

void m24c64_write_N(uint8_t page, uint8_t *data, uint8_t offset, uint8_t size) {
 8002056:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002058:	b097      	sub	sp, #92	; 0x5c
 800205a:	af00      	add	r7, sp, #0
 800205c:	63b9      	str	r1, [r7, #56]	; 0x38
 800205e:	0011      	movs	r1, r2
 8002060:	001e      	movs	r6, r3
 8002062:	233f      	movs	r3, #63	; 0x3f
 8002064:	18fa      	adds	r2, r7, r3
 8002066:	1c03      	adds	r3, r0, #0
 8002068:	7013      	strb	r3, [r2, #0]
 800206a:	233e      	movs	r3, #62	; 0x3e
 800206c:	18fa      	adds	r2, r7, r3
 800206e:	1c0b      	adds	r3, r1, #0
 8002070:	7013      	strb	r3, [r2, #0]
 8002072:	233d      	movs	r3, #61	; 0x3d
 8002074:	18fa      	adds	r2, r7, r3
 8002076:	1c33      	adds	r3, r6, #0
 8002078:	7013      	strb	r3, [r2, #0]
 800207a:	466b      	mov	r3, sp
 800207c:	001e      	movs	r6, r3
	uint8_t buff[size + 2];
 800207e:	233d      	movs	r3, #61	; 0x3d
 8002080:	18fb      	adds	r3, r7, r3
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	1c9a      	adds	r2, r3, #2
 8002086:	1e53      	subs	r3, r2, #1
 8002088:	657b      	str	r3, [r7, #84]	; 0x54
 800208a:	0013      	movs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	69b8      	ldr	r0, [r7, #24]
 8002094:	69f9      	ldr	r1, [r7, #28]
 8002096:	0003      	movs	r3, r0
 8002098:	0f5b      	lsrs	r3, r3, #29
 800209a:	469c      	mov	ip, r3
 800209c:	000b      	movs	r3, r1
 800209e:	00dd      	lsls	r5, r3, #3
 80020a0:	4663      	mov	r3, ip
 80020a2:	431d      	orrs	r5, r3
 80020a4:	0003      	movs	r3, r0
 80020a6:	00dc      	lsls	r4, r3, #3
 80020a8:	0013      	movs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	6938      	ldr	r0, [r7, #16]
 80020b2:	6979      	ldr	r1, [r7, #20]
 80020b4:	0003      	movs	r3, r0
 80020b6:	0f5b      	lsrs	r3, r3, #29
 80020b8:	000c      	movs	r4, r1
 80020ba:	00e4      	lsls	r4, r4, #3
 80020bc:	637c      	str	r4, [r7, #52]	; 0x34
 80020be:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80020c0:	431c      	orrs	r4, r3
 80020c2:	637c      	str	r4, [r7, #52]	; 0x34
 80020c4:	0003      	movs	r3, r0
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	633b      	str	r3, [r7, #48]	; 0x30
 80020ca:	0013      	movs	r3, r2
 80020cc:	3307      	adds	r3, #7
 80020ce:	08db      	lsrs	r3, r3, #3
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	466a      	mov	r2, sp
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	469d      	mov	sp, r3
 80020d8:	466b      	mov	r3, sp
 80020da:	3300      	adds	r3, #0
 80020dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t read[size];
 80020de:	233d      	movs	r3, #61	; 0x3d
 80020e0:	18fb      	adds	r3, r7, r3
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	001a      	movs	r2, r3
 80020e6:	3a01      	subs	r2, #1
 80020e8:	64ba      	str	r2, [r7, #72]	; 0x48
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	2200      	movs	r2, #0
 80020ee:	60fa      	str	r2, [r7, #12]
 80020f0:	68b8      	ldr	r0, [r7, #8]
 80020f2:	68f9      	ldr	r1, [r7, #12]
 80020f4:	0002      	movs	r2, r0
 80020f6:	0f52      	lsrs	r2, r2, #29
 80020f8:	000c      	movs	r4, r1
 80020fa:	00e4      	lsls	r4, r4, #3
 80020fc:	62fc      	str	r4, [r7, #44]	; 0x2c
 80020fe:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002100:	4314      	orrs	r4, r2
 8002102:	62fc      	str	r4, [r7, #44]	; 0x2c
 8002104:	0002      	movs	r2, r0
 8002106:	00d2      	lsls	r2, r2, #3
 8002108:	62ba      	str	r2, [r7, #40]	; 0x28
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	2200      	movs	r2, #0
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	6838      	ldr	r0, [r7, #0]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	0002      	movs	r2, r0
 8002116:	0f52      	lsrs	r2, r2, #29
 8002118:	000c      	movs	r4, r1
 800211a:	00e4      	lsls	r4, r4, #3
 800211c:	627c      	str	r4, [r7, #36]	; 0x24
 800211e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002120:	4314      	orrs	r4, r2
 8002122:	627c      	str	r4, [r7, #36]	; 0x24
 8002124:	0002      	movs	r2, r0
 8002126:	00d2      	lsls	r2, r2, #3
 8002128:	623a      	str	r2, [r7, #32]
 800212a:	3307      	adds	r3, #7
 800212c:	08db      	lsrs	r3, r3, #3
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	466a      	mov	r2, sp
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	469d      	mov	sp, r3
 8002136:	466b      	mov	r3, sp
 8002138:	3300      	adds	r3, #0
 800213a:	647b      	str	r3, [r7, #68]	; 0x44

	m24c64_read_N(page, read, offset, size);
 800213c:	233d      	movs	r3, #61	; 0x3d
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	781c      	ldrb	r4, [r3, #0]
 8002142:	233e      	movs	r3, #62	; 0x3e
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	781a      	ldrb	r2, [r3, #0]
 8002148:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800214a:	233f      	movs	r3, #63	; 0x3f
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	7818      	ldrb	r0, [r3, #0]
 8002150:	0023      	movs	r3, r4
 8002152:	f7ff ff43 	bl	8001fdc <m24c64_read_N>

//	HAL_Delay(5);
	if (strncmp((const char*) data, (const char*) read, (size_t) size)) {
 8002156:	233d      	movs	r3, #61	; 0x3d
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	781a      	ldrb	r2, [r3, #0]
 800215c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800215e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002160:	0018      	movs	r0, r3
 8002162:	f003 ffaf 	bl	80060c4 <strncmp>
 8002166:	1e03      	subs	r3, r0, #0
 8002168:	d037      	beq.n	80021da <m24c64_write_N+0x184>
		buff[0] = (page << PADDRPOSITION | offset) >> 8;
 800216a:	233f      	movs	r3, #63	; 0x3f
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	233e      	movs	r3, #62	; 0x3e
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4313      	orrs	r3, r2
 800217a:	121b      	asrs	r3, r3, #8
 800217c:	b2da      	uxtb	r2, r3
 800217e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002180:	701a      	strb	r2, [r3, #0]
		buff[1] = (page << PADDRPOSITION | offset) & 0xff;
 8002182:	233f      	movs	r3, #63	; 0x3f
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	015b      	lsls	r3, r3, #5
 800218a:	b25a      	sxtb	r2, r3
 800218c:	233e      	movs	r3, #62	; 0x3e
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	b25b      	sxtb	r3, r3
 8002194:	4313      	orrs	r3, r2
 8002196:	b25b      	sxtb	r3, r3
 8002198:	b2da      	uxtb	r2, r3
 800219a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800219c:	705a      	strb	r2, [r3, #1]
		for (int i = 0; i < size; i++) {
 800219e:	2300      	movs	r3, #0
 80021a0:	653b      	str	r3, [r7, #80]	; 0x50
 80021a2:	e00a      	b.n	80021ba <m24c64_write_N+0x164>
			buff[i + 2] = data[i];
 80021a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021a8:	18d2      	adds	r2, r2, r3
 80021aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ac:	3302      	adds	r3, #2
 80021ae:	7811      	ldrb	r1, [r2, #0]
 80021b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021b2:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < size; i++) {
 80021b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021b6:	3301      	adds	r3, #1
 80021b8:	653b      	str	r3, [r7, #80]	; 0x50
 80021ba:	233d      	movs	r3, #61	; 0x3d
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80021c2:	429a      	cmp	r2, r3
 80021c4:	dbee      	blt.n	80021a4 <m24c64_write_N+0x14e>
		}
		i2c1_byte_tx(CHIP_ADDR, buff, size + 2);
 80021c6:	233d      	movs	r3, #61	; 0x3d
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	3302      	adds	r3, #2
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021d2:	0019      	movs	r1, r3
 80021d4:	20a0      	movs	r0, #160	; 0xa0
 80021d6:	f7ff fc63 	bl	8001aa0 <i2c1_byte_tx>
	}
	HAL_Delay(6);
 80021da:	2006      	movs	r0, #6
 80021dc:	f001 ff8a 	bl	80040f4 <HAL_Delay>
 80021e0:	46b5      	mov	sp, r6
}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b017      	add	sp, #92	; 0x5c
 80021e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021ea <m24c64_init_16uvalue>:

void m24c64_init_16uvalue(M24C64_ADDR_t addr, uint16_t value) {
 80021ea:	b590      	push	{r4, r7, lr}
 80021ec:	b085      	sub	sp, #20
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	0002      	movs	r2, r0
 80021f2:	1dfb      	adds	r3, r7, #7
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	1c0a      	adds	r2, r1, #0
 80021fa:	801a      	strh	r2, [r3, #0]
	uint8_t buff[2];
	m24c64_read_N(BASE_ADDR, buff, addr, 1);
 80021fc:	1dfb      	adds	r3, r7, #7
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	240c      	movs	r4, #12
 8002202:	1939      	adds	r1, r7, r4
 8002204:	2301      	movs	r3, #1
 8002206:	2003      	movs	r0, #3
 8002208:	f7ff fee8 	bl	8001fdc <m24c64_read_N>
	if (!(buff[0] == IS_READY)) {
 800220c:	0021      	movs	r1, r4
 800220e:	187b      	adds	r3, r7, r1
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2baa      	cmp	r3, #170	; 0xaa
 8002214:	d014      	beq.n	8002240 <m24c64_init_16uvalue+0x56>
		buff[0] = value >> 8;
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	0a1b      	lsrs	r3, r3, #8
 800221c:	b29b      	uxth	r3, r3
 800221e:	b2da      	uxtb	r2, r3
 8002220:	187b      	adds	r3, r7, r1
 8002222:	701a      	strb	r2, [r3, #0]
		buff[1] = value & 0xff;
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	b2da      	uxtb	r2, r3
 800222a:	187b      	adds	r3, r7, r1
 800222c:	705a      	strb	r2, [r3, #1]
		m24c64_write_N(BASE_ADDR, buff, addr + 1, 2);
 800222e:	1dfb      	adds	r3, r7, #7
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	3301      	adds	r3, #1
 8002234:	b2da      	uxtb	r2, r3
 8002236:	1879      	adds	r1, r7, r1
 8002238:	2302      	movs	r3, #2
 800223a:	2003      	movs	r0, #3
 800223c:	f7ff ff0b 	bl	8002056 <m24c64_write_N>
	}
}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b005      	add	sp, #20
 8002246:	bd90      	pop	{r4, r7, pc}

08002248 <m24c64_store_16uvalue>:

void m24c64_store_16uvalue(M24C64_ADDR_t addr, uint16_t value) {
 8002248:	b590      	push	{r4, r7, lr}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	0002      	movs	r2, r0
 8002250:	1dfb      	adds	r3, r7, #7
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	1d3b      	adds	r3, r7, #4
 8002256:	1c0a      	adds	r2, r1, #0
 8002258:	801a      	strh	r2, [r3, #0]
	uint8_t buff[2];
	buff[0] = value >> 8;
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	b29b      	uxth	r3, r3
 8002262:	b2da      	uxtb	r2, r3
 8002264:	210c      	movs	r1, #12
 8002266:	187b      	adds	r3, r7, r1
 8002268:	701a      	strb	r2, [r3, #0]
	buff[1] = value & 0xff;
 800226a:	1d3b      	adds	r3, r7, #4
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	187b      	adds	r3, r7, r1
 8002272:	705a      	strb	r2, [r3, #1]
	m24c64_write_N(BASE_ADDR, buff, addr + 1, 2);
 8002274:	1dfb      	adds	r3, r7, #7
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	3301      	adds	r3, #1
 800227a:	b2da      	uxtb	r2, r3
 800227c:	000c      	movs	r4, r1
 800227e:	1879      	adds	r1, r7, r1
 8002280:	2302      	movs	r3, #2
 8002282:	2003      	movs	r0, #3
 8002284:	f7ff fee7 	bl	8002056 <m24c64_write_N>
	buff[0] = addr;
 8002288:	0021      	movs	r1, r4
 800228a:	187b      	adds	r3, r7, r1
 800228c:	1dfa      	adds	r2, r7, #7
 800228e:	7812      	ldrb	r2, [r2, #0]
 8002290:	701a      	strb	r2, [r3, #0]
	m24c64_write_N(BASE_ADDR, buff, addr, 1);
 8002292:	1dfb      	adds	r3, r7, #7
 8002294:	781a      	ldrb	r2, [r3, #0]
 8002296:	1879      	adds	r1, r7, r1
 8002298:	2301      	movs	r3, #1
 800229a:	2003      	movs	r0, #3
 800229c:	f7ff fedb 	bl	8002056 <m24c64_write_N>
}
 80022a0:	46c0      	nop			; (mov r8, r8)
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b005      	add	sp, #20
 80022a6:	bd90      	pop	{r4, r7, pc}

080022a8 <print_parameters>:
/* USER CODE BEGIN PFP */

uint8_t get_db_gain(uint16_t adc_gain);
uint8_t get_dbm_pout(uint16_t pout_adc);

void print_parameters(UART1_t *u, Module_t m) {
 80022a8:	b084      	sub	sp, #16
 80022aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ac:	b087      	sub	sp, #28
 80022ae:	af04      	add	r7, sp, #16
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	2004      	movs	r0, #4
 80022b4:	2420      	movs	r4, #32
 80022b6:	1900      	adds	r0, r0, r4
 80022b8:	19c0      	adds	r0, r0, r7
 80022ba:	6001      	str	r1, [r0, #0]
 80022bc:	6042      	str	r2, [r0, #4]
 80022be:	6083      	str	r3, [r0, #8]
	sprintf((char*) u->tx_buffer,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6858      	ldr	r0, [r3, #4]
			"Pout %d[dBm] Att %u[dB] Gain %u[dB] Pin %d[dBm] Curent %d[mA] Voltage %u[V]\r\n",
			m.pout, m.att, m.gain, m.pin, m.current, (uint8_t) m.voltage);
 80022c4:	2304      	movs	r3, #4
 80022c6:	0021      	movs	r1, r4
 80022c8:	185b      	adds	r3, r3, r1
 80022ca:	19db      	adds	r3, r3, r7
 80022cc:	789b      	ldrb	r3, [r3, #2]
 80022ce:	b25b      	sxtb	r3, r3
	sprintf((char*) u->tx_buffer,
 80022d0:	001e      	movs	r6, r3
			m.pout, m.att, m.gain, m.pin, m.current, (uint8_t) m.voltage);
 80022d2:	2304      	movs	r3, #4
 80022d4:	185b      	adds	r3, r3, r1
 80022d6:	19db      	adds	r3, r3, r7
 80022d8:	781b      	ldrb	r3, [r3, #0]
	sprintf((char*) u->tx_buffer,
 80022da:	469c      	mov	ip, r3
			m.pout, m.att, m.gain, m.pin, m.current, (uint8_t) m.voltage);
 80022dc:	2304      	movs	r3, #4
 80022de:	185b      	adds	r3, r3, r1
 80022e0:	19db      	adds	r3, r3, r7
 80022e2:	785b      	ldrb	r3, [r3, #1]
	sprintf((char*) u->tx_buffer,
 80022e4:	001a      	movs	r2, r3
			m.pout, m.att, m.gain, m.pin, m.current, (uint8_t) m.voltage);
 80022e6:	2304      	movs	r3, #4
 80022e8:	185b      	adds	r3, r3, r1
 80022ea:	19db      	adds	r3, r3, r7
 80022ec:	795b      	ldrb	r3, [r3, #5]
 80022ee:	b25b      	sxtb	r3, r3
	sprintf((char*) u->tx_buffer,
 80022f0:	001c      	movs	r4, r3
			m.pout, m.att, m.gain, m.pin, m.current, (uint8_t) m.voltage);
 80022f2:	2304      	movs	r3, #4
 80022f4:	185b      	adds	r3, r3, r1
 80022f6:	19db      	adds	r3, r3, r7
 80022f8:	88db      	ldrh	r3, [r3, #6]
	sprintf((char*) u->tx_buffer,
 80022fa:	001d      	movs	r5, r3
			m.pout, m.att, m.gain, m.pin, m.current, (uint8_t) m.voltage);
 80022fc:	2304      	movs	r3, #4
 80022fe:	185b      	adds	r3, r3, r1
 8002300:	19db      	adds	r3, r3, r7
 8002302:	791b      	ldrb	r3, [r3, #4]
	sprintf((char*) u->tx_buffer,
 8002304:	490c      	ldr	r1, [pc, #48]	; (8002338 <print_parameters+0x90>)
 8002306:	9303      	str	r3, [sp, #12]
 8002308:	9502      	str	r5, [sp, #8]
 800230a:	9401      	str	r4, [sp, #4]
 800230c:	9200      	str	r2, [sp, #0]
 800230e:	4663      	mov	r3, ip
 8002310:	0032      	movs	r2, r6
 8002312:	f003 feb7 	bl	8006084 <siprintf>
	uart1_send_frame((char*) u->tx_buffer, TX_BUFFLEN);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2164      	movs	r1, #100	; 0x64
 800231c:	0018      	movs	r0, r3
 800231e:	f001 fd8d 	bl	8003e3c <uart1_send_frame>
	uart1_clean_buffer(u);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	0018      	movs	r0, r3
 8002326:	f001 fdaf 	bl	8003e88 <uart1_clean_buffer>
}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	46bd      	mov	sp, r7
 800232e:	b003      	add	sp, #12
 8002330:	bcf0      	pop	{r4, r5, r6, r7}
 8002332:	bc08      	pop	{r3}
 8002334:	b004      	add	sp, #16
 8002336:	4718      	bx	r3
 8002338:	08006890 	.word	0x08006890

0800233c <print_adc>:
void print_adc(UART1_t *u, uint16_t *adc) {
 800233c:	b5b0      	push	{r4, r5, r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af02      	add	r7, sp, #8
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
	sprintf((char*) u->tx_buffer,
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6858      	ldr	r0, [r3, #4]
			"Pout %d  \t Gain %u \t Curent %u \t Voltage %u\r\n", adc[POUT_i],
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	3308      	adds	r3, #8
 800234e:	881b      	ldrh	r3, [r3, #0]
	sprintf((char*) u->tx_buffer,
 8002350:	001c      	movs	r4, r3
			adc[GAIN_i], adc[CURRENT_i], adc[VOLTAGE_i]);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	881b      	ldrh	r3, [r3, #0]
	sprintf((char*) u->tx_buffer,
 8002356:	001d      	movs	r5, r3
			adc[GAIN_i], adc[CURRENT_i], adc[VOLTAGE_i]);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	3302      	adds	r3, #2
 800235c:	881b      	ldrh	r3, [r3, #0]
	sprintf((char*) u->tx_buffer,
 800235e:	001a      	movs	r2, r3
			adc[GAIN_i], adc[CURRENT_i], adc[VOLTAGE_i]);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	3304      	adds	r3, #4
 8002364:	881b      	ldrh	r3, [r3, #0]
	sprintf((char*) u->tx_buffer,
 8002366:	490a      	ldr	r1, [pc, #40]	; (8002390 <print_adc+0x54>)
 8002368:	9301      	str	r3, [sp, #4]
 800236a:	9200      	str	r2, [sp, #0]
 800236c:	002b      	movs	r3, r5
 800236e:	0022      	movs	r2, r4
 8002370:	f003 fe88 	bl	8006084 <siprintf>
	uart1_send_frame((char*) u->tx_buffer, TX_BUFFLEN);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2164      	movs	r1, #100	; 0x64
 800237a:	0018      	movs	r0, r3
 800237c:	f001 fd5e 	bl	8003e3c <uart1_send_frame>
	uart1_clean_buffer(u);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	0018      	movs	r0, r3
 8002384:	f001 fd80 	bl	8003e88 <uart1_clean_buffer>
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b002      	add	sp, #8
 800238e:	bdb0      	pop	{r4, r5, r7, pc}
 8002390:	080068e0 	.word	0x080068e0

08002394 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002396:	b09d      	sub	sp, #116	; 0x74
 8002398:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800239a:	f001 fe25 	bl	8003fe8 <HAL_Init>

	/* USER CODE BEGIN Init */

	/* enable clock access ro GPIOA and GPIOB */
	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOAEN);
 800239e:	4bf5      	ldr	r3, [pc, #980]	; (8002774 <main+0x3e0>)
 80023a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023a2:	4bf4      	ldr	r3, [pc, #976]	; (8002774 <main+0x3e0>)
 80023a4:	2101      	movs	r1, #1
 80023a6:	430a      	orrs	r2, r1
 80023a8:	635a      	str	r2, [r3, #52]	; 0x34
	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN);
 80023aa:	4bf2      	ldr	r3, [pc, #968]	; (8002774 <main+0x3e0>)
 80023ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ae:	4bf1      	ldr	r3, [pc, #964]	; (8002774 <main+0x3e0>)
 80023b0:	2102      	movs	r1, #2
 80023b2:	430a      	orrs	r2, r1
 80023b4:	635a      	str	r2, [r3, #52]	; 0x34
	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOCEN);
 80023b6:	4bef      	ldr	r3, [pc, #956]	; (8002774 <main+0x3e0>)
 80023b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ba:	4bee      	ldr	r3, [pc, #952]	; (8002774 <main+0x3e0>)
 80023bc:	2104      	movs	r1, #4
 80023be:	430a      	orrs	r2, r1
 80023c0:	635a      	str	r2, [r3, #52]	; 0x34
	/* PA15 as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE15_0);
 80023c2:	23a0      	movs	r3, #160	; 0xa0
 80023c4:	05db      	lsls	r3, r3, #23
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	23a0      	movs	r3, #160	; 0xa0
 80023ca:	05db      	lsls	r3, r3, #23
 80023cc:	2180      	movs	r1, #128	; 0x80
 80023ce:	05c9      	lsls	r1, r1, #23
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE15_1);
 80023d4:	23a0      	movs	r3, #160	; 0xa0
 80023d6:	05db      	lsls	r3, r3, #23
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	23a0      	movs	r3, #160	; 0xa0
 80023dc:	05db      	lsls	r3, r3, #23
 80023de:	0052      	lsls	r2, r2, #1
 80023e0:	0852      	lsrs	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

	/* PB5 as output */
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE5_0);
 80023e4:	4be4      	ldr	r3, [pc, #912]	; (8002778 <main+0x3e4>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4be3      	ldr	r3, [pc, #908]	; (8002778 <main+0x3e4>)
 80023ea:	2180      	movs	r1, #128	; 0x80
 80023ec:	00c9      	lsls	r1, r1, #3
 80023ee:	430a      	orrs	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE5_1);
 80023f2:	4be1      	ldr	r3, [pc, #900]	; (8002778 <main+0x3e4>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	4be0      	ldr	r3, [pc, #896]	; (8002778 <main+0x3e4>)
 80023f8:	49e0      	ldr	r1, [pc, #896]	; (800277c <main+0x3e8>)
 80023fa:	400a      	ands	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]

	/* PC15  TIMER_TEST  as output */
	SET_BIT(GPIOC->MODER, GPIO_MODER_MODE15_0);
 80023fe:	4be0      	ldr	r3, [pc, #896]	; (8002780 <main+0x3ec>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	4bdf      	ldr	r3, [pc, #892]	; (8002780 <main+0x3ec>)
 8002404:	2180      	movs	r1, #128	; 0x80
 8002406:	05c9      	lsls	r1, r1, #23
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOC->MODER, GPIO_MODER_MODE15_1);
 800240c:	4bdc      	ldr	r3, [pc, #880]	; (8002780 <main+0x3ec>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4bdb      	ldr	r3, [pc, #876]	; (8002780 <main+0x3ec>)
 8002412:	0052      	lsls	r2, r2, #1
 8002414:	0852      	lsrs	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]

	/* PA3  PA_HAB as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE3_0);
 8002418:	23a0      	movs	r3, #160	; 0xa0
 800241a:	05db      	lsls	r3, r3, #23
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	23a0      	movs	r3, #160	; 0xa0
 8002420:	05db      	lsls	r3, r3, #23
 8002422:	2140      	movs	r1, #64	; 0x40
 8002424:	430a      	orrs	r2, r1
 8002426:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE3_1);
 8002428:	23a0      	movs	r3, #160	; 0xa0
 800242a:	05db      	lsls	r3, r3, #23
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	23a0      	movs	r3, #160	; 0xa0
 8002430:	05db      	lsls	r3, r3, #23
 8002432:	2180      	movs	r1, #128	; 0x80
 8002434:	438a      	bics	r2, r1
 8002436:	601a      	str	r2, [r3, #0]

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002438:	f000 fb1a 	bl	8002a70 <SystemClock_Config>
	MAX4003_t vswr;
	LED_t led;
	uint8_t rcv_buff[2];
	uint8_t send_buff[2];

	uint32_t pa_calc_timeout = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	65fb      	str	r3, [r7, #92]	; 0x5c

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002440:	f000 fc6a 	bl	8002d18 <MX_GPIO_Init>
	MX_DMA_Init();
 8002444:	f000 fc4a 	bl	8002cdc <MX_DMA_Init>
	MX_ADC1_Init();
 8002448:	f000 fb70 	bl	8002b2c <MX_ADC1_Init>
//  MX_IWDG_Init();
	/* USER CODE BEGIN 2 */

	module_init(&pa, POWER_AMPLIFIER, ID8);
 800244c:	2440      	movs	r4, #64	; 0x40
 800244e:	193b      	adds	r3, r7, r4
 8002450:	2208      	movs	r2, #8
 8002452:	2109      	movs	r1, #9
 8002454:	0018      	movs	r0, r3
 8002456:	f000 ff87 	bl	8003368 <module_init>
	led_init();
 800245a:	f7ff fbcf 	bl	8001bfc <led_init>
	led_reset(&led);
 800245e:	230c      	movs	r3, #12
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	0018      	movs	r0, r3
 8002464:	f7ff fc70 	bl	8001d48 <led_reset>
	i2c1_init();
 8002468:	f7ff fa0e 	bl	8001888 <i2c1_init>
	uart1_init(HS16_CLK, BAUD_RATE, &uart1);
 800246c:	4ac5      	ldr	r2, [pc, #788]	; (8002784 <main+0x3f0>)
 800246e:	23e1      	movs	r3, #225	; 0xe1
 8002470:	025b      	lsls	r3, r3, #9
 8002472:	48c5      	ldr	r0, [pc, #788]	; (8002788 <main+0x3f4>)
 8002474:	0019      	movs	r1, r3
 8002476:	f001 fbe7 	bl	8003c48 <uart1_init>
	lm75_init();
 800247a:	f7ff fd6f 	bl	8001f5c <lm75_init>
	rs485_init(&rs485);
 800247e:	2334      	movs	r3, #52	; 0x34
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	0018      	movs	r0, r3
 8002484:	f000 ffda 	bl	800343c <rs485_init>
	ds18b20_timer3_init();
 8002488:	f7ff f868 	bl	800155c <ds18b20_timer3_init>

// Calibrate The ADC On Power-Up For Better Accuracy

	uart1_send_str("PA init\n\r");
 800248c:	4bbf      	ldr	r3, [pc, #764]	; (800278c <main+0x3f8>)
 800248e:	0018      	movs	r0, r3
 8002490:	f001 fcb0 	bl	8003df4 <uart1_send_str>

	m24c64_read_N(BASE_ADDR, &(pa.att), ATT_VALUE_ADDR, 1);
 8002494:	1939      	adds	r1, r7, r4
 8002496:	2301      	movs	r3, #1
 8002498:	2203      	movs	r2, #3
 800249a:	2003      	movs	r0, #3
 800249c:	f7ff fd9e 	bl	8001fdc <m24c64_read_N>

	if (pa.att > 0 && pa.att < 30)
 80024a0:	193b      	adds	r3, r7, r4
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00b      	beq.n	80024c0 <main+0x12c>
 80024a8:	193b      	adds	r3, r7, r4
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b1d      	cmp	r3, #29
 80024ae:	d807      	bhi.n	80024c0 <main+0x12c>
		bda4601_set_initial_att(pa.att, STARTING_MILLIS);
 80024b0:	193b      	adds	r3, r7, r4
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4ab6      	ldr	r2, [pc, #728]	; (8002790 <main+0x3fc>)
 80024b6:	0011      	movs	r1, r2
 80024b8:	0018      	movs	r0, r3
 80024ba:	f7fe ffe9 	bl	8001490 <bda4601_set_initial_att>
 80024be:	e003      	b.n	80024c8 <main+0x134>
	else
		bda4601_set_att(0, 3);
 80024c0:	2103      	movs	r1, #3
 80024c2:	2000      	movs	r0, #0
 80024c4:	f7fe ff60 	bl	8001388 <bda4601_set_att>

	m24c64_init_16uvalue(POUT_MAX_READY_ADDR, AD8363_ADC_MAX);
 80024c8:	4bb2      	ldr	r3, [pc, #712]	; (8002794 <main+0x400>)
 80024ca:	0019      	movs	r1, r3
 80024cc:	2004      	movs	r0, #4
 80024ce:	f7ff fe8c 	bl	80021ea <m24c64_init_16uvalue>
	m24c64_init_16uvalue(POUT_MIN_READY_ADDR, AD8363_ADC_MIN);
 80024d2:	23e8      	movs	r3, #232	; 0xe8
 80024d4:	33ff      	adds	r3, #255	; 0xff
 80024d6:	0019      	movs	r1, r3
 80024d8:	2007      	movs	r0, #7
 80024da:	f7ff fe86 	bl	80021ea <m24c64_init_16uvalue>
	m24c64_init_16uvalue(PIN_MAX_READY_ADDR, MAX4003_ADC_MAX);
 80024de:	23ec      	movs	r3, #236	; 0xec
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	0019      	movs	r1, r3
 80024e4:	200a      	movs	r0, #10
 80024e6:	f7ff fe80 	bl	80021ea <m24c64_init_16uvalue>
	m24c64_init_16uvalue(PIN_MIN_READY_ADDR, MAX4003_ADC_MIN);
 80024ea:	23e8      	movs	r3, #232	; 0xe8
 80024ec:	33ff      	adds	r3, #255	; 0xff
 80024ee:	0019      	movs	r1, r3
 80024f0:	200d      	movs	r0, #13
 80024f2:	f7ff fe7a 	bl	80021ea <m24c64_init_16uvalue>
	m24c64_init_16uvalue(VSWR_MAX_READY_ADDR, MAX4003_ADC_MAX);
 80024f6:	23ec      	movs	r3, #236	; 0xec
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	0019      	movs	r1, r3
 80024fc:	2010      	movs	r0, #16
 80024fe:	f7ff fe74 	bl	80021ea <m24c64_init_16uvalue>
	m24c64_init_16uvalue(VSWR_MIN_READY_ADDR, MAX4003_ADC_MIN);
 8002502:	23e8      	movs	r3, #232	; 0xe8
 8002504:	33ff      	adds	r3, #255	; 0xff
 8002506:	0019      	movs	r1, r3
 8002508:	2013      	movs	r0, #19
 800250a:	f7ff fe6e 	bl	80021ea <m24c64_init_16uvalue>

	m24c64_read_N(BASE_ADDR, rcv_buff, POUT_ADC_MIN_ADDR_0, 2);
 800250e:	2408      	movs	r4, #8
 8002510:	1939      	adds	r1, r7, r4
 8002512:	2302      	movs	r3, #2
 8002514:	2208      	movs	r2, #8
 8002516:	2003      	movs	r0, #3
 8002518:	f7ff fd60 	bl	8001fdc <m24c64_read_N>
	pout.min = (rcv_buff[0] << 8) | (rcv_buff[1] & 0xff);
 800251c:	0021      	movs	r1, r4
 800251e:	187b      	adds	r3, r7, r1
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	b21a      	sxth	r2, r3
 8002526:	187b      	adds	r3, r7, r1
 8002528:	785b      	ldrb	r3, [r3, #1]
 800252a:	b21b      	sxth	r3, r3
 800252c:	4313      	orrs	r3, r2
 800252e:	b21b      	sxth	r3, r3
 8002530:	b29a      	uxth	r2, r3
 8002532:	2530      	movs	r5, #48	; 0x30
 8002534:	197b      	adds	r3, r7, r5
 8002536:	805a      	strh	r2, [r3, #2]
	m24c64_read_N(BASE_ADDR, rcv_buff, POUT_ADC_MAX_ADDR_0, 2);
 8002538:	000c      	movs	r4, r1
 800253a:	1879      	adds	r1, r7, r1
 800253c:	2302      	movs	r3, #2
 800253e:	2205      	movs	r2, #5
 8002540:	2003      	movs	r0, #3
 8002542:	f7ff fd4b 	bl	8001fdc <m24c64_read_N>
	pout.max = (rcv_buff[0] << 8) | (rcv_buff[1] & 0xff);
 8002546:	0021      	movs	r1, r4
 8002548:	187b      	adds	r3, r7, r1
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	021b      	lsls	r3, r3, #8
 800254e:	b21a      	sxth	r2, r3
 8002550:	187b      	adds	r3, r7, r1
 8002552:	785b      	ldrb	r3, [r3, #1]
 8002554:	b21b      	sxth	r3, r3
 8002556:	4313      	orrs	r3, r2
 8002558:	b21b      	sxth	r3, r3
 800255a:	b29a      	uxth	r2, r3
 800255c:	197b      	adds	r3, r7, r5
 800255e:	801a      	strh	r2, [r3, #0]
	m24c64_read_N(BASE_ADDR, rcv_buff, PIN_ADC_MIN_ADDR_0, 2);
 8002560:	000c      	movs	r4, r1
 8002562:	1879      	adds	r1, r7, r1
 8002564:	2302      	movs	r3, #2
 8002566:	220e      	movs	r2, #14
 8002568:	2003      	movs	r0, #3
 800256a:	f7ff fd37 	bl	8001fdc <m24c64_read_N>
	pin.min = (rcv_buff[0] << 8) | (rcv_buff[1] & 0xff);
 800256e:	0021      	movs	r1, r4
 8002570:	187b      	adds	r3, r7, r1
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	021b      	lsls	r3, r3, #8
 8002576:	b21a      	sxth	r2, r3
 8002578:	187b      	adds	r3, r7, r1
 800257a:	785b      	ldrb	r3, [r3, #1]
 800257c:	b21b      	sxth	r3, r3
 800257e:	4313      	orrs	r3, r2
 8002580:	b21b      	sxth	r3, r3
 8002582:	b29a      	uxth	r2, r3
 8002584:	252c      	movs	r5, #44	; 0x2c
 8002586:	197b      	adds	r3, r7, r5
 8002588:	805a      	strh	r2, [r3, #2]
	m24c64_read_N(BASE_ADDR, rcv_buff, PIN_ADC_MAX_ADDR_0, 2);
 800258a:	000c      	movs	r4, r1
 800258c:	1879      	adds	r1, r7, r1
 800258e:	2302      	movs	r3, #2
 8002590:	220b      	movs	r2, #11
 8002592:	2003      	movs	r0, #3
 8002594:	f7ff fd22 	bl	8001fdc <m24c64_read_N>
	pin.max = (rcv_buff[0] << 8) | (rcv_buff[1] & 0xff);
 8002598:	0021      	movs	r1, r4
 800259a:	187b      	adds	r3, r7, r1
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	021b      	lsls	r3, r3, #8
 80025a0:	b21a      	sxth	r2, r3
 80025a2:	187b      	adds	r3, r7, r1
 80025a4:	785b      	ldrb	r3, [r3, #1]
 80025a6:	b21b      	sxth	r3, r3
 80025a8:	4313      	orrs	r3, r2
 80025aa:	b21b      	sxth	r3, r3
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	197b      	adds	r3, r7, r5
 80025b0:	801a      	strh	r2, [r3, #0]
	m24c64_read_N(BASE_ADDR, rcv_buff, VSWR_ADC_MIN_ADDR_0, 2);
 80025b2:	000c      	movs	r4, r1
 80025b4:	1879      	adds	r1, r7, r1
 80025b6:	2302      	movs	r3, #2
 80025b8:	2214      	movs	r2, #20
 80025ba:	2003      	movs	r0, #3
 80025bc:	f7ff fd0e 	bl	8001fdc <m24c64_read_N>
	vswr.min = (rcv_buff[0] << 8) | (rcv_buff[1] & 0xff);
 80025c0:	0021      	movs	r1, r4
 80025c2:	187b      	adds	r3, r7, r1
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	021b      	lsls	r3, r3, #8
 80025c8:	b21a      	sxth	r2, r3
 80025ca:	187b      	adds	r3, r7, r1
 80025cc:	785b      	ldrb	r3, [r3, #1]
 80025ce:	b21b      	sxth	r3, r3
 80025d0:	4313      	orrs	r3, r2
 80025d2:	b21b      	sxth	r3, r3
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	2528      	movs	r5, #40	; 0x28
 80025d8:	197b      	adds	r3, r7, r5
 80025da:	805a      	strh	r2, [r3, #2]
	m24c64_read_N(BASE_ADDR, rcv_buff, VSWR_ADC_MAX_ADDR_0, 2);
 80025dc:	000c      	movs	r4, r1
 80025de:	1879      	adds	r1, r7, r1
 80025e0:	2302      	movs	r3, #2
 80025e2:	2211      	movs	r2, #17
 80025e4:	2003      	movs	r0, #3
 80025e6:	f7ff fcf9 	bl	8001fdc <m24c64_read_N>
	vswr.max = (rcv_buff[0] << 8) | (rcv_buff[1] & 0xff);
 80025ea:	0021      	movs	r1, r4
 80025ec:	187b      	adds	r3, r7, r1
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	021b      	lsls	r3, r3, #8
 80025f2:	b21a      	sxth	r2, r3
 80025f4:	187b      	adds	r3, r7, r1
 80025f6:	785b      	ldrb	r3, [r3, #1]
 80025f8:	b21b      	sxth	r3, r3
 80025fa:	4313      	orrs	r3, r2
 80025fc:	b21b      	sxth	r3, r3
 80025fe:	b29a      	uxth	r2, r3
 8002600:	197b      	adds	r3, r7, r5
 8002602:	801a      	strh	r2, [r3, #0]
	uart1_send_str("PA main end\n\r");
 8002604:	4b64      	ldr	r3, [pc, #400]	; (8002798 <main+0x404>)
 8002606:	0018      	movs	r0, r3
 8002608:	f001 fbf4 	bl	8003df4 <uart1_send_str>

//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, ADC_CHANNEL_NUM);
	pa_calc_timeout = HAL_GetTick();
 800260c:	f001 fd68 	bl	80040e0 <HAL_GetTick>
 8002610:	0003      	movs	r3, r0
 8002612:	65fb      	str	r3, [r7, #92]	; 0x5c
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		rs485_update_status_by_uart(&rs485, &uart1);
 8002614:	4a5b      	ldr	r2, [pc, #364]	; (8002784 <main+0x3f0>)
 8002616:	2434      	movs	r4, #52	; 0x34
 8002618:	193b      	adds	r3, r7, r4
 800261a:	0011      	movs	r1, r2
 800261c:	0018      	movs	r0, r3
 800261e:	f001 f8e1 	bl	80037e4 <rs485_update_status_by_uart>

		switch (rs485.cmd) {
 8002622:	193b      	adds	r3, r7, r4
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	3b11      	subs	r3, #17
 8002628:	2b17      	cmp	r3, #23
 800262a:	d900      	bls.n	800262e <main+0x29a>
 800262c:	e12c      	b.n	8002888 <main+0x4f4>
 800262e:	009a      	lsls	r2, r3, #2
 8002630:	4b5a      	ldr	r3, [pc, #360]	; (800279c <main+0x408>)
 8002632:	18d3      	adds	r3, r2, r3
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	469f      	mov	pc, r3
		case QUERY_PARAMETER_LTEL:
			rs485.len = 14;
 8002638:	2434      	movs	r4, #52	; 0x34
 800263a:	193b      	adds	r3, r7, r4
 800263c:	220e      	movs	r2, #14
 800263e:	705a      	strb	r2, [r3, #1]
			rs485.frame = (uint8_t*) malloc(14);
 8002640:	200e      	movs	r0, #14
 8002642:	f003 fc0f 	bl	8005e64 <malloc>
 8002646:	0003      	movs	r3, r0
 8002648:	001a      	movs	r2, r3
 800264a:	193b      	adds	r3, r7, r4
 800264c:	605a      	str	r2, [r3, #4]
			uart1_send_frame((char*) rs485.frame, 14);
 800264e:	193b      	adds	r3, r7, r4
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	210e      	movs	r1, #14
 8002654:	0018      	movs	r0, r3
 8002656:	f001 fbf1 	bl	8003e3c <uart1_send_frame>
			free(rs485.frame);
 800265a:	193b      	adds	r3, r7, r4
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	0018      	movs	r0, r3
 8002660:	f003 fc0a 	bl	8005e78 <free>
			rs485.cmd = NONE;
 8002664:	193b      	adds	r3, r7, r4
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
			break;
 800266a:	e112      	b.n	8002892 <main+0x4fe>
		case QUERY_PARAMETER_STR:
			print_parameters(&uart1, pa);
 800266c:	2340      	movs	r3, #64	; 0x40
 800266e:	18fb      	adds	r3, r7, r3
 8002670:	4844      	ldr	r0, [pc, #272]	; (8002784 <main+0x3f0>)
 8002672:	466a      	mov	r2, sp
 8002674:	0011      	movs	r1, r2
 8002676:	001a      	movs	r2, r3
 8002678:	320c      	adds	r2, #12
 800267a:	ca70      	ldmia	r2!, {r4, r5, r6}
 800267c:	c170      	stmia	r1!, {r4, r5, r6}
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	600a      	str	r2, [r1, #0]
 8002682:	6819      	ldr	r1, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f7ff fe0e 	bl	80022a8 <print_parameters>
			rs485.cmd = NONE;
 800268c:	2334      	movs	r3, #52	; 0x34
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
			break;
 8002694:	e0fd      	b.n	8002892 <main+0x4fe>
		case QUERY_ADC:
			print_adc(&uart1, adc_media);
 8002696:	4a42      	ldr	r2, [pc, #264]	; (80027a0 <main+0x40c>)
 8002698:	4b3a      	ldr	r3, [pc, #232]	; (8002784 <main+0x3f0>)
 800269a:	0011      	movs	r1, r2
 800269c:	0018      	movs	r0, r3
 800269e:	f7ff fe4d 	bl	800233c <print_adc>
			rs485.cmd = NONE;
 80026a2:	2334      	movs	r3, #52	; 0x34
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
			break;
 80026aa:	e0f2      	b.n	8002892 <main+0x4fe>
		case QUERY_PARAMETER_SIGMA:
			rs485_set_query_frame(&rs485, &pa);
 80026ac:	2340      	movs	r3, #64	; 0x40
 80026ae:	18fa      	adds	r2, r7, r3
 80026b0:	2434      	movs	r4, #52	; 0x34
 80026b2:	193b      	adds	r3, r7, r4
 80026b4:	0011      	movs	r1, r2
 80026b6:	0018      	movs	r0, r3
 80026b8:	f000 ff25 	bl	8003506 <rs485_set_query_frame>
			uart1_send_frame((char*) rs485.frame, 14);
 80026bc:	193b      	adds	r3, r7, r4
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	210e      	movs	r1, #14
 80026c2:	0018      	movs	r0, r3
 80026c4:	f001 fbba 	bl	8003e3c <uart1_send_frame>
			rs485.cmd = NONE;
 80026c8:	193b      	adds	r3, r7, r4
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
			break;
 80026ce:	e0e0      	b.n	8002892 <main+0x4fe>
		case SET_ATT_LTEL:
			pa.att = uart1.rx_buffer[6];
 80026d0:	4b2c      	ldr	r3, [pc, #176]	; (8002784 <main+0x3f0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	799a      	ldrb	r2, [r3, #6]
 80026d6:	2440      	movs	r4, #64	; 0x40
 80026d8:	193b      	adds	r3, r7, r4
 80026da:	701a      	strb	r2, [r3, #0]
			bda4601_set_att(pa.att, 3);
 80026dc:	193b      	adds	r3, r7, r4
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2103      	movs	r1, #3
 80026e2:	0018      	movs	r0, r3
 80026e4:	f7fe fe50 	bl	8001388 <bda4601_set_att>
			send_buff[0] = pa.att;
 80026e8:	193b      	adds	r3, r7, r4
 80026ea:	781a      	ldrb	r2, [r3, #0]
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	701a      	strb	r2, [r3, #0]
			m24c64_write_N(BASE_ADDR, send_buff, ATT_VALUE_ADDR, 1);
 80026f0:	1d39      	adds	r1, r7, #4
 80026f2:	2301      	movs	r3, #1
 80026f4:	2203      	movs	r2, #3
 80026f6:	2003      	movs	r0, #3
 80026f8:	f7ff fcad 	bl	8002056 <m24c64_write_N>
			sprintf((char*) uart1.tx_buffer, "Attenuation %u\r\n", pa.att);
 80026fc:	4b21      	ldr	r3, [pc, #132]	; (8002784 <main+0x3f0>)
 80026fe:	6858      	ldr	r0, [r3, #4]
 8002700:	193b      	adds	r3, r7, r4
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	001a      	movs	r2, r3
 8002706:	4b27      	ldr	r3, [pc, #156]	; (80027a4 <main+0x410>)
 8002708:	0019      	movs	r1, r3
 800270a:	f003 fcbb 	bl	8006084 <siprintf>
			uart1_send_frame((char*) uart1.tx_buffer, TX_BUFFLEN);
 800270e:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <main+0x3f0>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2164      	movs	r1, #100	; 0x64
 8002714:	0018      	movs	r0, r3
 8002716:	f001 fb91 	bl	8003e3c <uart1_send_frame>
			rs485.cmd = NONE;
 800271a:	2334      	movs	r3, #52	; 0x34
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	2200      	movs	r2, #0
 8002720:	701a      	strb	r2, [r3, #0]
			break;
 8002722:	e0b6      	b.n	8002892 <main+0x4fe>
		case SET_POUT_MAX:
			pout.max = adc_media[POUT_i];
 8002724:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <main+0x40c>)
 8002726:	891a      	ldrh	r2, [r3, #8]
 8002728:	2130      	movs	r1, #48	; 0x30
 800272a:	187b      	adds	r3, r7, r1
 800272c:	801a      	strh	r2, [r3, #0]
			m24c64_store_16uvalue(POUT_MAX_READY_ADDR, pout.max);
 800272e:	187b      	adds	r3, r7, r1
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	0019      	movs	r1, r3
 8002734:	2004      	movs	r0, #4
 8002736:	f7ff fd87 	bl	8002248 <m24c64_store_16uvalue>
			uart1_send_str("Saved Pout max value\n\r");
 800273a:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <main+0x414>)
 800273c:	0018      	movs	r0, r3
 800273e:	f001 fb59 	bl	8003df4 <uart1_send_str>
			rs485.cmd = NONE;
 8002742:	2334      	movs	r3, #52	; 0x34
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]
			break;
 800274a:	e0a2      	b.n	8002892 <main+0x4fe>
		case SET_POUT_MIN:
			pout.min = adc_media[POUT_i];
 800274c:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <main+0x40c>)
 800274e:	891a      	ldrh	r2, [r3, #8]
 8002750:	2130      	movs	r1, #48	; 0x30
 8002752:	187b      	adds	r3, r7, r1
 8002754:	805a      	strh	r2, [r3, #2]
			m24c64_store_16uvalue(POUT_MIN_READY_ADDR, pout.min);
 8002756:	187b      	adds	r3, r7, r1
 8002758:	885b      	ldrh	r3, [r3, #2]
 800275a:	0019      	movs	r1, r3
 800275c:	2007      	movs	r0, #7
 800275e:	f7ff fd73 	bl	8002248 <m24c64_store_16uvalue>
			uart1_send_str("Saved Pout min value\n\r");
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <main+0x418>)
 8002764:	0018      	movs	r0, r3
 8002766:	f001 fb45 	bl	8003df4 <uart1_send_str>
			rs485.cmd = NONE;
 800276a:	2334      	movs	r3, #52	; 0x34
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]
			break;
 8002772:	e08e      	b.n	8002892 <main+0x4fe>
 8002774:	40021000 	.word	0x40021000
 8002778:	50000400 	.word	0x50000400
 800277c:	fffff7ff 	.word	0xfffff7ff
 8002780:	50000800 	.word	0x50000800
 8002784:	2000029c 	.word	0x2000029c
 8002788:	00f42400 	.word	0x00f42400
 800278c:	08006910 	.word	0x08006910
 8002790:	00001388 	.word	0x00001388
 8002794:	0000075a 	.word	0x0000075a
 8002798:	0800691c 	.word	0x0800691c
 800279c:	08006aa4 	.word	0x08006aa4
 80027a0:	20000274 	.word	0x20000274
 80027a4:	0800692c 	.word	0x0800692c
 80027a8:	08006940 	.word	0x08006940
 80027ac:	08006958 	.word	0x08006958
		case SET_PIN_MAX:
			pin.max = adc_media[PIN_i];
 80027b0:	4ba2      	ldr	r3, [pc, #648]	; (8002a3c <main+0x6a8>)
 80027b2:	895a      	ldrh	r2, [r3, #10]
 80027b4:	212c      	movs	r1, #44	; 0x2c
 80027b6:	187b      	adds	r3, r7, r1
 80027b8:	801a      	strh	r2, [r3, #0]
			m24c64_store_16uvalue(PIN_MAX_READY_ADDR, pin.max);
 80027ba:	187b      	adds	r3, r7, r1
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	0019      	movs	r1, r3
 80027c0:	200a      	movs	r0, #10
 80027c2:	f7ff fd41 	bl	8002248 <m24c64_store_16uvalue>
			uart1_send_str("Saved Pin max value\n\r");
 80027c6:	4b9e      	ldr	r3, [pc, #632]	; (8002a40 <main+0x6ac>)
 80027c8:	0018      	movs	r0, r3
 80027ca:	f001 fb13 	bl	8003df4 <uart1_send_str>
			rs485.cmd = NONE;
 80027ce:	2334      	movs	r3, #52	; 0x34
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]
			break;
 80027d6:	e05c      	b.n	8002892 <main+0x4fe>
		case SET_PIN_MIN:
			pin.min = adc_media[PIN_i];
 80027d8:	4b98      	ldr	r3, [pc, #608]	; (8002a3c <main+0x6a8>)
 80027da:	895a      	ldrh	r2, [r3, #10]
 80027dc:	212c      	movs	r1, #44	; 0x2c
 80027de:	187b      	adds	r3, r7, r1
 80027e0:	805a      	strh	r2, [r3, #2]
			m24c64_store_16uvalue(PIN_MAX_READY_ADDR, pin.min);
 80027e2:	187b      	adds	r3, r7, r1
 80027e4:	885b      	ldrh	r3, [r3, #2]
 80027e6:	0019      	movs	r1, r3
 80027e8:	200a      	movs	r0, #10
 80027ea:	f7ff fd2d 	bl	8002248 <m24c64_store_16uvalue>
			uart1_send_str("Saved Pin min value\n\r");
 80027ee:	4b95      	ldr	r3, [pc, #596]	; (8002a44 <main+0x6b0>)
 80027f0:	0018      	movs	r0, r3
 80027f2:	f001 faff 	bl	8003df4 <uart1_send_str>
			rs485.cmd = NONE;
 80027f6:	2334      	movs	r3, #52	; 0x34
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	2200      	movs	r2, #0
 80027fc:	701a      	strb	r2, [r3, #0]
			break;
 80027fe:	e048      	b.n	8002892 <main+0x4fe>
		case SET_VSWR_MAX:
			vswr.max = adc_media[VSWR_i];
 8002800:	4b8e      	ldr	r3, [pc, #568]	; (8002a3c <main+0x6a8>)
 8002802:	88da      	ldrh	r2, [r3, #6]
 8002804:	2128      	movs	r1, #40	; 0x28
 8002806:	187b      	adds	r3, r7, r1
 8002808:	801a      	strh	r2, [r3, #0]
			m24c64_store_16uvalue(VSWR_MIN_READY_ADDR, vswr.max);
 800280a:	187b      	adds	r3, r7, r1
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	0019      	movs	r1, r3
 8002810:	2013      	movs	r0, #19
 8002812:	f7ff fd19 	bl	8002248 <m24c64_store_16uvalue>
			uart1_send_str("Saved VSWR max value\n\r");
 8002816:	4b8c      	ldr	r3, [pc, #560]	; (8002a48 <main+0x6b4>)
 8002818:	0018      	movs	r0, r3
 800281a:	f001 faeb 	bl	8003df4 <uart1_send_str>
			rs485.cmd = NONE;
 800281e:	2334      	movs	r3, #52	; 0x34
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
			break;
 8002826:	e034      	b.n	8002892 <main+0x4fe>
		case SET_VSWR_MIN:
			vswr.min = adc_media[VSWR_i];
 8002828:	4b84      	ldr	r3, [pc, #528]	; (8002a3c <main+0x6a8>)
 800282a:	88da      	ldrh	r2, [r3, #6]
 800282c:	2128      	movs	r1, #40	; 0x28
 800282e:	187b      	adds	r3, r7, r1
 8002830:	805a      	strh	r2, [r3, #2]
			m24c64_store_16uvalue(VSWR_MAX_READY_ADDR, vswr.min);
 8002832:	187b      	adds	r3, r7, r1
 8002834:	885b      	ldrh	r3, [r3, #2]
 8002836:	0019      	movs	r1, r3
 8002838:	2010      	movs	r0, #16
 800283a:	f7ff fd05 	bl	8002248 <m24c64_store_16uvalue>
			uart1_send_str("Saved Pout min value\n\r");
 800283e:	4b83      	ldr	r3, [pc, #524]	; (8002a4c <main+0x6b8>)
 8002840:	0018      	movs	r0, r3
 8002842:	f001 fad7 	bl	8003df4 <uart1_send_str>
			rs485.cmd = NONE;
 8002846:	2334      	movs	r3, #52	; 0x34
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
			break;
 800284e:	e020      	b.n	8002892 <main+0x4fe>
		case SET_ENABLE_PA:
			uart1.rx_buffer[5] == 1 ? pa_on() : pa_off();
 8002850:	4b7f      	ldr	r3, [pc, #508]	; (8002a50 <main+0x6bc>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3305      	adds	r3, #5
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d108      	bne.n	800286e <main+0x4da>
 800285c:	23a0      	movs	r3, #160	; 0xa0
 800285e:	05db      	lsls	r3, r3, #23
 8002860:	695a      	ldr	r2, [r3, #20]
 8002862:	23a0      	movs	r3, #160	; 0xa0
 8002864:	05db      	lsls	r3, r3, #23
 8002866:	2108      	movs	r1, #8
 8002868:	438a      	bics	r2, r1
 800286a:	615a      	str	r2, [r3, #20]
 800286c:	e007      	b.n	800287e <main+0x4ea>
 800286e:	23a0      	movs	r3, #160	; 0xa0
 8002870:	05db      	lsls	r3, r3, #23
 8002872:	695a      	ldr	r2, [r3, #20]
 8002874:	23a0      	movs	r3, #160	; 0xa0
 8002876:	05db      	lsls	r3, r3, #23
 8002878:	2108      	movs	r1, #8
 800287a:	430a      	orrs	r2, r1
 800287c:	615a      	str	r2, [r3, #20]
			rs485.cmd = NONE;
 800287e:	2334      	movs	r3, #52	; 0x34
 8002880:	18fb      	adds	r3, r7, r3
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
			break;
 8002886:	e004      	b.n	8002892 <main+0x4fe>
		default:
			rs485.cmd = NONE;
 8002888:	2334      	movs	r3, #52	; 0x34
 800288a:	18fb      	adds	r3, r7, r3
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
			break;
 8002890:	46c0      	nop			; (mov r8, r8)
		}


		//DS18B20_Start();

		if (HAL_GetTick() - pa_calc_timeout > SECONDS(2)) {
 8002892:	f001 fc25 	bl	80040e0 <HAL_GetTick>
 8002896:	0002      	movs	r2, r0
 8002898:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800289a:	1ad2      	subs	r2, r2, r3
 800289c:	23fa      	movs	r3, #250	; 0xfa
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d800      	bhi.n	80028a6 <main+0x512>
 80028a4:	e099      	b.n	80029da <main+0x646>
			adc_get_resultsDMA(adc_counter);
 80028a6:	4b6b      	ldr	r3, [pc, #428]	; (8002a54 <main+0x6c0>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	0018      	movs	r0, r3
 80028ac:	f000 fc90 	bl	80031d0 <adc_get_resultsDMA>
			adcDataReady = false;
 80028b0:	4b69      	ldr	r3, [pc, #420]	; (8002a58 <main+0x6c4>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	701a      	strb	r2, [r3, #0]
			adc_counter++;
 80028b6:	4b67      	ldr	r3, [pc, #412]	; (8002a54 <main+0x6c0>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	3301      	adds	r3, #1
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4b65      	ldr	r3, [pc, #404]	; (8002a54 <main+0x6c0>)
 80028c0:	701a      	strb	r2, [r3, #0]
			if (adc_counter >= MEDIA_NUM)
 80028c2:	4b64      	ldr	r3, [pc, #400]	; (8002a54 <main+0x6c0>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b13      	cmp	r3, #19
 80028c8:	d902      	bls.n	80028d0 <main+0x53c>
				adc_counter = 0;
 80028ca:	4b62      	ldr	r3, [pc, #392]	; (8002a54 <main+0x6c0>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
			ds18b20_convert();
 80028d0:	f7fe ff92 	bl	80017f8 <ds18b20_convert>

			pa.temperature_out = ds18b20_read_temperature();
 80028d4:	f7fe ffa2 	bl	800181c <ds18b20_read_temperature>
 80028d8:	1c02      	adds	r2, r0, #0
 80028da:	2440      	movs	r4, #64	; 0x40
 80028dc:	193b      	adds	r3, r7, r4
 80028de:	611a      	str	r2, [r3, #16]
			pa.temperature = lm75_read();
 80028e0:	f7ff fb4f 	bl	8001f82 <lm75_read>
 80028e4:	1c02      	adds	r2, r0, #0
 80028e6:	193b      	adds	r3, r7, r4
 80028e8:	60da      	str	r2, [r3, #12]
			pa.pr = max4003_get_dbm(&vswr, adc_media[VSWR_i]);
 80028ea:	4b54      	ldr	r3, [pc, #336]	; (8002a3c <main+0x6a8>)
 80028ec:	88da      	ldrh	r2, [r3, #6]
 80028ee:	2328      	movs	r3, #40	; 0x28
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	0011      	movs	r1, r2
 80028f4:	0018      	movs	r0, r3
 80028f6:	f000 fce3 	bl	80032c0 <max4003_get_dbm>
 80028fa:	0003      	movs	r3, r0
 80028fc:	b25a      	sxtb	r2, r3
 80028fe:	193b      	adds	r3, r7, r4
 8002900:	70da      	strb	r2, [r3, #3]
			pa.pout = ad8363_get_dbm(&pout, adc_media[POUT_i]);
 8002902:	4b4e      	ldr	r3, [pc, #312]	; (8002a3c <main+0x6a8>)
 8002904:	891a      	ldrh	r2, [r3, #8]
 8002906:	2330      	movs	r3, #48	; 0x30
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	0011      	movs	r1, r2
 800290c:	0018      	movs	r0, r3
 800290e:	f7fe fce7 	bl	80012e0 <ad8363_get_dbm>
 8002912:	0003      	movs	r3, r0
 8002914:	b25a      	sxtb	r2, r3
 8002916:	193b      	adds	r3, r7, r4
 8002918:	709a      	strb	r2, [r3, #2]
			pa.current = ADC_CURRENT_FACTOR * adc_media[CURRENT_i] / 4096.0f;
 800291a:	4b48      	ldr	r3, [pc, #288]	; (8002a3c <main+0x6a8>)
 800291c:	885b      	ldrh	r3, [r3, #2]
 800291e:	0018      	movs	r0, r3
 8002920:	f7fe fc30 	bl	8001184 <__aeabi_i2f>
 8002924:	1c03      	adds	r3, r0, #0
 8002926:	4a4d      	ldr	r2, [pc, #308]	; (8002a5c <main+0x6c8>)
 8002928:	1c11      	adds	r1, r2, #0
 800292a:	1c18      	adds	r0, r3, #0
 800292c:	f7fe f920 	bl	8000b70 <__aeabi_fmul>
 8002930:	1c03      	adds	r3, r0, #0
 8002932:	218b      	movs	r1, #139	; 0x8b
 8002934:	05c9      	lsls	r1, r1, #23
 8002936:	1c18      	adds	r0, r3, #0
 8002938:	f7fd ff52 	bl	80007e0 <__aeabi_fdiv>
 800293c:	1c03      	adds	r3, r0, #0
 800293e:	1c18      	adds	r0, r3, #0
 8002940:	f7fd fd98 	bl	8000474 <__aeabi_f2uiz>
 8002944:	0003      	movs	r3, r0
 8002946:	b29a      	uxth	r2, r3
 8002948:	193b      	adds	r3, r7, r4
 800294a:	80da      	strh	r2, [r3, #6]
			pa.gain = get_db_gain(adc_media[GAIN_i]);
 800294c:	4b3b      	ldr	r3, [pc, #236]	; (8002a3c <main+0x6a8>)
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	0018      	movs	r0, r3
 8002952:	f000 faa5 	bl	8002ea0 <get_db_gain>
 8002956:	0003      	movs	r3, r0
 8002958:	001a      	movs	r2, r3
 800295a:	193b      	adds	r3, r7, r4
 800295c:	705a      	strb	r2, [r3, #1]
			pa.vswr = module_vswr_calc(pa.pout, pa.pr);
 800295e:	193b      	adds	r3, r7, r4
 8002960:	2202      	movs	r2, #2
 8002962:	569a      	ldrsb	r2, [r3, r2]
 8002964:	193b      	adds	r3, r7, r4
 8002966:	78db      	ldrb	r3, [r3, #3]
 8002968:	b25b      	sxtb	r3, r3
 800296a:	0019      	movs	r1, r3
 800296c:	0010      	movs	r0, r2
 800296e:	f000 fd25 	bl	80033bc <module_vswr_calc>
 8002972:	1c02      	adds	r2, r0, #0
 8002974:	193b      	adds	r3, r7, r4
 8002976:	615a      	str	r2, [r3, #20]
			pa.pin = max4003_get_dbm(&pin, adc_media[PIN_i]);
 8002978:	4b30      	ldr	r3, [pc, #192]	; (8002a3c <main+0x6a8>)
 800297a:	895a      	ldrh	r2, [r3, #10]
 800297c:	232c      	movs	r3, #44	; 0x2c
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	0011      	movs	r1, r2
 8002982:	0018      	movs	r0, r3
 8002984:	f000 fc9c 	bl	80032c0 <max4003_get_dbm>
 8002988:	0003      	movs	r3, r0
 800298a:	b25a      	sxtb	r2, r3
 800298c:	193b      	adds	r3, r7, r4
 800298e:	715a      	strb	r2, [r3, #5]
			pa.voltage = ADC_VOLTAGE_FACTOR * adc_media[VOLTAGE_i] / 4096.0f;
 8002990:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <main+0x6a8>)
 8002992:	889b      	ldrh	r3, [r3, #4]
 8002994:	0018      	movs	r0, r3
 8002996:	f7fe fbf5 	bl	8001184 <__aeabi_i2f>
 800299a:	1c03      	adds	r3, r0, #0
 800299c:	4a30      	ldr	r2, [pc, #192]	; (8002a60 <main+0x6cc>)
 800299e:	1c11      	adds	r1, r2, #0
 80029a0:	1c18      	adds	r0, r3, #0
 80029a2:	f7fe f8e5 	bl	8000b70 <__aeabi_fmul>
 80029a6:	1c03      	adds	r3, r0, #0
 80029a8:	218b      	movs	r1, #139	; 0x8b
 80029aa:	05c9      	lsls	r1, r1, #23
 80029ac:	1c18      	adds	r0, r3, #0
 80029ae:	f7fd ff17 	bl	80007e0 <__aeabi_fdiv>
 80029b2:	1c03      	adds	r3, r0, #0
 80029b4:	1c18      	adds	r0, r3, #0
 80029b6:	f7fd fd5d 	bl	8000474 <__aeabi_f2uiz>
 80029ba:	0003      	movs	r3, r0
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	193b      	adds	r3, r7, r4
 80029c0:	711a      	strb	r2, [r3, #4]
			pa_calc_timeout = HAL_GetTick();
 80029c2:	f001 fb8d 	bl	80040e0 <HAL_GetTick>
 80029c6:	0003      	movs	r3, r0
 80029c8:	65fb      	str	r3, [r7, #92]	; 0x5c
			temp_out = pa.temperature_out;
 80029ca:	193b      	adds	r3, r7, r4
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <main+0x6d0>)
 80029d0:	601a      	str	r2, [r3, #0]
			temp_in = pa.temperature;
 80029d2:	193b      	adds	r3, r7, r4
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	4b24      	ldr	r3, [pc, #144]	; (8002a68 <main+0x6d4>)
 80029d8:	601a      	str	r2, [r3, #0]
		}

		pa.temperature > MAX_TEMPERATURE ? pa_off() : pa_on();
 80029da:	2340      	movs	r3, #64	; 0x40
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	4922      	ldr	r1, [pc, #136]	; (8002a6c <main+0x6d8>)
 80029e2:	1c18      	adds	r0, r3, #0
 80029e4:	f7fd fd32 	bl	800044c <__aeabi_fcmpgt>
 80029e8:	1e03      	subs	r3, r0, #0
 80029ea:	d008      	beq.n	80029fe <main+0x66a>
 80029ec:	23a0      	movs	r3, #160	; 0xa0
 80029ee:	05db      	lsls	r3, r3, #23
 80029f0:	695a      	ldr	r2, [r3, #20]
 80029f2:	23a0      	movs	r3, #160	; 0xa0
 80029f4:	05db      	lsls	r3, r3, #23
 80029f6:	2108      	movs	r1, #8
 80029f8:	430a      	orrs	r2, r1
 80029fa:	615a      	str	r2, [r3, #20]
 80029fc:	e007      	b.n	8002a0e <main+0x67a>
 80029fe:	23a0      	movs	r3, #160	; 0xa0
 8002a00:	05db      	lsls	r3, r3, #23
 8002a02:	695a      	ldr	r2, [r3, #20]
 8002a04:	23a0      	movs	r3, #160	; 0xa0
 8002a06:	05db      	lsls	r3, r3, #23
 8002a08:	2108      	movs	r1, #8
 8002a0a:	438a      	bics	r2, r1
 8002a0c:	615a      	str	r2, [r3, #20]

		led_temperature_update(pa.temperature);
 8002a0e:	2440      	movs	r4, #64	; 0x40
 8002a10:	193b      	adds	r3, r7, r4
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	1c18      	adds	r0, r3, #0
 8002a16:	f7fd fd2d 	bl	8000474 <__aeabi_f2uiz>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f7ff fa64 	bl	8001eec <led_temperature_update>
		led_current_update(pa.current);
 8002a24:	193b      	adds	r3, r7, r4
 8002a26:	88db      	ldrh	r3, [r3, #6]
 8002a28:	b21b      	sxth	r3, r3
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f7ff f9e6 	bl	8001dfc <led_current_update>
		led_enable_kalive(&led);
 8002a30:	230c      	movs	r3, #12
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7ff f957 	bl	8001ce8 <led_enable_kalive>
		rs485_update_status_by_uart(&rs485, &uart1);
 8002a3a:	e5eb      	b.n	8002614 <main+0x280>
 8002a3c:	20000274 	.word	0x20000274
 8002a40:	08006970 	.word	0x08006970
 8002a44:	08006988 	.word	0x08006988
 8002a48:	080069a0 	.word	0x080069a0
 8002a4c:	08006958 	.word	0x08006958
 8002a50:	2000029c 	.word	0x2000029c
 8002a54:	20000292 	.word	0x20000292
 8002a58:	20000293 	.word	0x20000293
 8002a5c:	43951746 	.word	0x43951746
 8002a60:	3bf2a006 	.word	0x3bf2a006
 8002a64:	20000298 	.word	0x20000298
 8002a68:	20000294 	.word	0x20000294
 8002a6c:	42960000 	.word	0x42960000

08002a70 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b093      	sub	sp, #76	; 0x4c
 8002a74:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002a76:	2414      	movs	r4, #20
 8002a78:	193b      	adds	r3, r7, r4
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	2334      	movs	r3, #52	; 0x34
 8002a7e:	001a      	movs	r2, r3
 8002a80:	2100      	movs	r1, #0
 8002a82:	f003 fa03 	bl	8005e8c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002a86:	1d3b      	adds	r3, r7, #4
 8002a88:	0018      	movs	r0, r3
 8002a8a:	2310      	movs	r3, #16
 8002a8c:	001a      	movs	r2, r3
 8002a8e:	2100      	movs	r1, #0
 8002a90:	f003 f9fc 	bl	8005e8c <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a94:	2380      	movs	r3, #128	; 0x80
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f002 fbb9 	bl	8005210 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8002a9e:	193b      	adds	r3, r7, r4
 8002aa0:	220a      	movs	r2, #10
 8002aa2:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002aa4:	193b      	adds	r3, r7, r4
 8002aa6:	2280      	movs	r2, #128	; 0x80
 8002aa8:	0052      	lsls	r2, r2, #1
 8002aaa:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002aac:	0021      	movs	r1, r4
 8002aae:	187b      	adds	r3, r7, r1
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ab4:	187b      	adds	r3, r7, r1
 8002ab6:	2240      	movs	r2, #64	; 0x40
 8002ab8:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002aba:	187b      	adds	r3, r7, r1
 8002abc:	2201      	movs	r2, #1
 8002abe:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ac0:	187b      	adds	r3, r7, r1
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ac6:	187b      	adds	r3, r7, r1
 8002ac8:	2202      	movs	r2, #2
 8002aca:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002acc:	187b      	adds	r3, r7, r1
 8002ace:	2210      	movs	r2, #16
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLN = 16;
 8002ad2:	187b      	adds	r3, r7, r1
 8002ad4:	2210      	movs	r2, #16
 8002ad6:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ad8:	187b      	adds	r3, r7, r1
 8002ada:	2280      	movs	r2, #128	; 0x80
 8002adc:	0292      	lsls	r2, r2, #10
 8002ade:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	2280      	movs	r2, #128	; 0x80
 8002ae4:	0592      	lsls	r2, r2, #22
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	0018      	movs	r0, r3
 8002aec:	f002 fbd0 	bl	8005290 <HAL_RCC_OscConfig>
 8002af0:	1e03      	subs	r3, r0, #0
 8002af2:	d001      	beq.n	8002af8 <SystemClock_Config+0x88>
		Error_Handler();
 8002af4:	f000 fbde 	bl	80032b4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002af8:	1d3b      	adds	r3, r7, #4
 8002afa:	2207      	movs	r2, #7
 8002afc:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002afe:	1d3b      	adds	r3, r7, #4
 8002b00:	2202      	movs	r2, #2
 8002b02:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	2102      	movs	r1, #2
 8002b14:	0018      	movs	r0, r3
 8002b16:	f002 fecb 	bl	80058b0 <HAL_RCC_ClockConfig>
 8002b1a:	1e03      	subs	r3, r0, #0
 8002b1c:	d001      	beq.n	8002b22 <SystemClock_Config+0xb2>
		Error_Handler();
 8002b1e:	f000 fbc9 	bl	80032b4 <Error_Handler>
	}
}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b013      	add	sp, #76	; 0x4c
 8002b28:	bd90      	pop	{r4, r7, pc}
	...

08002b2c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	0018      	movs	r0, r3
 8002b36:	230c      	movs	r3, #12
 8002b38:	001a      	movs	r2, r3
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	f003 f9a6 	bl	8005e8c <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8002b40:	4b5e      	ldr	r3, [pc, #376]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002b42:	4a5f      	ldr	r2, [pc, #380]	; (8002cc0 <MX_ADC1_Init+0x194>)
 8002b44:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002b46:	4b5d      	ldr	r3, [pc, #372]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002b48:	2280      	movs	r2, #128	; 0x80
 8002b4a:	05d2      	lsls	r2, r2, #23
 8002b4c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b4e:	4b5b      	ldr	r3, [pc, #364]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b54:	4b59      	ldr	r3, [pc, #356]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002b5a:	4b58      	ldr	r3, [pc, #352]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002b5c:	2280      	movs	r2, #128	; 0x80
 8002b5e:	0392      	lsls	r2, r2, #14
 8002b60:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b62:	4b56      	ldr	r3, [pc, #344]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002b64:	2204      	movs	r2, #4
 8002b66:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8002b68:	4b54      	ldr	r3, [pc, #336]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002b6e:	4b53      	ldr	r3, [pc, #332]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002b74:	4b51      	ldr	r3, [pc, #324]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 7;
 8002b7a:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b80:	4b4e      	ldr	r3, [pc, #312]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002b82:	2220      	movs	r2, #32
 8002b84:	2100      	movs	r1, #0
 8002b86:	5499      	strb	r1, [r3, r2]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b88:	4b4c      	ldr	r3, [pc, #304]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b8e:	4b4b      	ldr	r3, [pc, #300]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b94:	4b49      	ldr	r3, [pc, #292]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002b96:	222c      	movs	r2, #44	; 0x2c
 8002b98:	2100      	movs	r1, #0
 8002b9a:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002b9c:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002ba2:	4b46      	ldr	r3, [pc, #280]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002ba8:	4b44      	ldr	r3, [pc, #272]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	639a      	str	r2, [r3, #56]	; 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 8002bae:	4b43      	ldr	r3, [pc, #268]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002bb0:	223c      	movs	r2, #60	; 0x3c
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002bb6:	4b41      	ldr	r3, [pc, #260]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002bbc:	4b3f      	ldr	r3, [pc, #252]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f001 fbba 	bl	8004338 <HAL_ADC_Init>
 8002bc4:	1e03      	subs	r3, r0, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_ADC1_Init+0xa0>
		Error_Handler();
 8002bc8:	f000 fb74 	bl	80032b4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	2201      	movs	r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002bd2:	1d3b      	adds	r3, r7, #4
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002bd8:	1d3b      	adds	r3, r7, #4
 8002bda:	2200      	movs	r2, #0
 8002bdc:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002bde:	1d3a      	adds	r2, r7, #4
 8002be0:	4b36      	ldr	r3, [pc, #216]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002be2:	0011      	movs	r1, r2
 8002be4:	0018      	movs	r0, r3
 8002be6:	f001 fd4f 	bl	8004688 <HAL_ADC_ConfigChannel>
 8002bea:	1e03      	subs	r3, r0, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_ADC1_Init+0xc6>
		Error_Handler();
 8002bee:	f000 fb61 	bl	80032b4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8002bf2:	1d3b      	adds	r3, r7, #4
 8002bf4:	4a33      	ldr	r2, [pc, #204]	; (8002cc4 <MX_ADC1_Init+0x198>)
 8002bf6:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8002bf8:	1d3b      	adds	r3, r7, #4
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002bfe:	1d3a      	adds	r2, r7, #4
 8002c00:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002c02:	0011      	movs	r1, r2
 8002c04:	0018      	movs	r0, r3
 8002c06:	f001 fd3f 	bl	8004688 <HAL_ADC_ConfigChannel>
 8002c0a:	1e03      	subs	r3, r0, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_ADC1_Init+0xe6>
		Error_Handler();
 8002c0e:	f000 fb51 	bl	80032b4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8002c12:	1d3b      	adds	r3, r7, #4
 8002c14:	4a2c      	ldr	r2, [pc, #176]	; (8002cc8 <MX_ADC1_Init+0x19c>)
 8002c16:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8002c18:	1d3b      	adds	r3, r7, #4
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002c1e:	1d3a      	adds	r2, r7, #4
 8002c20:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002c22:	0011      	movs	r1, r2
 8002c24:	0018      	movs	r0, r3
 8002c26:	f001 fd2f 	bl	8004688 <HAL_ADC_ConfigChannel>
 8002c2a:	1e03      	subs	r3, r0, #0
 8002c2c:	d001      	beq.n	8002c32 <MX_ADC1_Init+0x106>
		Error_Handler();
 8002c2e:	f000 fb41 	bl	80032b4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	4a25      	ldr	r2, [pc, #148]	; (8002ccc <MX_ADC1_Init+0x1a0>)
 8002c36:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8002c38:	1d3b      	adds	r3, r7, #4
 8002c3a:	220c      	movs	r2, #12
 8002c3c:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002c3e:	1d3a      	adds	r2, r7, #4
 8002c40:	4b1e      	ldr	r3, [pc, #120]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002c42:	0011      	movs	r1, r2
 8002c44:	0018      	movs	r0, r3
 8002c46:	f001 fd1f 	bl	8004688 <HAL_ADC_ConfigChannel>
 8002c4a:	1e03      	subs	r3, r0, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_ADC1_Init+0x126>
		Error_Handler();
 8002c4e:	f000 fb31 	bl	80032b4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8002c52:	1d3b      	adds	r3, r7, #4
 8002c54:	4a1e      	ldr	r2, [pc, #120]	; (8002cd0 <MX_ADC1_Init+0x1a4>)
 8002c56:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_5;
 8002c58:	1d3b      	adds	r3, r7, #4
 8002c5a:	2210      	movs	r2, #16
 8002c5c:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002c5e:	1d3a      	adds	r2, r7, #4
 8002c60:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002c62:	0011      	movs	r1, r2
 8002c64:	0018      	movs	r0, r3
 8002c66:	f001 fd0f 	bl	8004688 <HAL_ADC_ConfigChannel>
 8002c6a:	1e03      	subs	r3, r0, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_ADC1_Init+0x146>
		Error_Handler();
 8002c6e:	f000 fb21 	bl	80032b4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	4a17      	ldr	r2, [pc, #92]	; (8002cd4 <MX_ADC1_Init+0x1a8>)
 8002c76:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_6;
 8002c78:	1d3b      	adds	r3, r7, #4
 8002c7a:	2214      	movs	r2, #20
 8002c7c:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002c7e:	1d3a      	adds	r2, r7, #4
 8002c80:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002c82:	0011      	movs	r1, r2
 8002c84:	0018      	movs	r0, r3
 8002c86:	f001 fcff 	bl	8004688 <HAL_ADC_ConfigChannel>
 8002c8a:	1e03      	subs	r3, r0, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_ADC1_Init+0x166>
		Error_Handler();
 8002c8e:	f000 fb11 	bl	80032b4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	4a10      	ldr	r2, [pc, #64]	; (8002cd8 <MX_ADC1_Init+0x1ac>)
 8002c96:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_7;
 8002c98:	1d3b      	adds	r3, r7, #4
 8002c9a:	2218      	movs	r2, #24
 8002c9c:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002c9e:	1d3a      	adds	r2, r7, #4
 8002ca0:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <MX_ADC1_Init+0x190>)
 8002ca2:	0011      	movs	r1, r2
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f001 fcef 	bl	8004688 <HAL_ADC_ConfigChannel>
 8002caa:	1e03      	subs	r3, r0, #0
 8002cac:	d001      	beq.n	8002cb2 <MX_ADC1_Init+0x186>
		Error_Handler();
 8002cae:	f000 fb01 	bl	80032b4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	b004      	add	sp, #16
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	2000008c 	.word	0x2000008c
 8002cc0:	40012400 	.word	0x40012400
 8002cc4:	04000002 	.word	0x04000002
 8002cc8:	08000004 	.word	0x08000004
 8002ccc:	10000010 	.word	0x10000010
 8002cd0:	14000020 	.word	0x14000020
 8002cd4:	18000040 	.word	0x18000040
 8002cd8:	b0001000 	.word	0xb0001000

08002cdc <MX_DMA_Init>:
}

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <MX_DMA_Init+0x38>)
 8002ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ce6:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <MX_DMA_Init+0x38>)
 8002ce8:	2101      	movs	r1, #1
 8002cea:	430a      	orrs	r2, r1
 8002cec:	639a      	str	r2, [r3, #56]	; 0x38
 8002cee:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <MX_DMA_Init+0x38>)
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	2009      	movs	r0, #9
 8002d00:	f001 ff46 	bl	8004b90 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002d04:	2009      	movs	r0, #9
 8002d06:	f001 ff58 	bl	8004bba <HAL_NVIC_EnableIRQ>

}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b002      	add	sp, #8
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	40021000 	.word	0x40021000

08002d18 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b089      	sub	sp, #36	; 0x24
 8002d1c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002d1e:	240c      	movs	r4, #12
 8002d20:	193b      	adds	r3, r7, r4
 8002d22:	0018      	movs	r0, r3
 8002d24:	2314      	movs	r3, #20
 8002d26:	001a      	movs	r2, r3
 8002d28:	2100      	movs	r1, #0
 8002d2a:	f003 f8af 	bl	8005e8c <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2e:	4b58      	ldr	r3, [pc, #352]	; (8002e90 <MX_GPIO_Init+0x178>)
 8002d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d32:	4b57      	ldr	r3, [pc, #348]	; (8002e90 <MX_GPIO_Init+0x178>)
 8002d34:	2102      	movs	r1, #2
 8002d36:	430a      	orrs	r2, r1
 8002d38:	635a      	str	r2, [r3, #52]	; 0x34
 8002d3a:	4b55      	ldr	r3, [pc, #340]	; (8002e90 <MX_GPIO_Init+0x178>)
 8002d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3e:	2202      	movs	r2, #2
 8002d40:	4013      	ands	r3, r2
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002d46:	4b52      	ldr	r3, [pc, #328]	; (8002e90 <MX_GPIO_Init+0x178>)
 8002d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d4a:	4b51      	ldr	r3, [pc, #324]	; (8002e90 <MX_GPIO_Init+0x178>)
 8002d4c:	2104      	movs	r1, #4
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	635a      	str	r2, [r3, #52]	; 0x34
 8002d52:	4b4f      	ldr	r3, [pc, #316]	; (8002e90 <MX_GPIO_Init+0x178>)
 8002d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d56:	2204      	movs	r2, #4
 8002d58:	4013      	ands	r3, r2
 8002d5a:	607b      	str	r3, [r7, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5e:	4b4c      	ldr	r3, [pc, #304]	; (8002e90 <MX_GPIO_Init+0x178>)
 8002d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d62:	4b4b      	ldr	r3, [pc, #300]	; (8002e90 <MX_GPIO_Init+0x178>)
 8002d64:	2101      	movs	r1, #1
 8002d66:	430a      	orrs	r2, r1
 8002d68:	635a      	str	r2, [r3, #52]	; 0x34
 8002d6a:	4b49      	ldr	r3, [pc, #292]	; (8002e90 <MX_GPIO_Init+0x178>)
 8002d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6e:	2201      	movs	r2, #1
 8002d70:	4013      	ands	r3, r2
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8002d76:	4947      	ldr	r1, [pc, #284]	; (8002e94 <MX_GPIO_Init+0x17c>)
 8002d78:	23a0      	movs	r3, #160	; 0xa0
 8002d7a:	05db      	lsls	r3, r3, #23
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f002 fa28 	bl	80051d4 <HAL_GPIO_WritePin>
			PA_HAB_Pin | LE_ATT_Pin | TEMP_HIGH_Pin | TEMP_OK_Pin | CURR_H_Pin
					| CURR_N_Pin | CURR_L_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, CLK_ATT_Pin | DATA_ATT_Pin | DE_485_Pin,
 8002d84:	4b44      	ldr	r3, [pc, #272]	; (8002e98 <MX_GPIO_Init+0x180>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	2123      	movs	r1, #35	; 0x23
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f002 fa22 	bl	80051d4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002d90:	4b42      	ldr	r3, [pc, #264]	; (8002e9c <MX_GPIO_Init+0x184>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	2140      	movs	r1, #64	; 0x40
 8002d96:	0018      	movs	r0, r3
 8002d98:	f002 fa1c 	bl	80051d4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB9 PB8 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_8;
 8002d9c:	193b      	adds	r3, r7, r4
 8002d9e:	22c0      	movs	r2, #192	; 0xc0
 8002da0:	0092      	lsls	r2, r2, #2
 8002da2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002da4:	193b      	adds	r3, r7, r4
 8002da6:	2212      	movs	r2, #18
 8002da8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	193b      	adds	r3, r7, r4
 8002dac:	2200      	movs	r2, #0
 8002dae:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db0:	193b      	adds	r3, r7, r4
 8002db2:	2200      	movs	r2, #0
 8002db4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002db6:	193b      	adds	r3, r7, r4
 8002db8:	2206      	movs	r2, #6
 8002dba:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dbc:	193b      	adds	r3, r7, r4
 8002dbe:	4a36      	ldr	r2, [pc, #216]	; (8002e98 <MX_GPIO_Init+0x180>)
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	0010      	movs	r0, r2
 8002dc4:	f002 f8a2 	bl	8004f0c <HAL_GPIO_Init>

	/*Configure GPIO pin : TEMP_OS_Pin */
	GPIO_InitStruct.Pin = TEMP_OS_Pin;
 8002dc8:	0021      	movs	r1, r4
 8002dca:	187b      	adds	r3, r7, r1
 8002dcc:	2280      	movs	r2, #128	; 0x80
 8002dce:	01d2      	lsls	r2, r2, #7
 8002dd0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dd2:	000c      	movs	r4, r1
 8002dd4:	193b      	adds	r3, r7, r4
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	193b      	adds	r3, r7, r4
 8002ddc:	2200      	movs	r2, #0
 8002dde:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(TEMP_OS_GPIO_Port, &GPIO_InitStruct);
 8002de0:	193b      	adds	r3, r7, r4
 8002de2:	4a2e      	ldr	r2, [pc, #184]	; (8002e9c <MX_GPIO_Init+0x184>)
 8002de4:	0019      	movs	r1, r3
 8002de6:	0010      	movs	r0, r2
 8002de8:	f002 f890 	bl	8004f0c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA_HAB_Pin LE_ATT_Pin TEMP_HIGH_Pin TEMP_OK_Pin
	 CURR_H_Pin CURR_N_Pin CURR_L_Pin */
	GPIO_InitStruct.Pin = PA_HAB_Pin | LE_ATT_Pin | TEMP_HIGH_Pin | TEMP_OK_Pin
 8002dec:	193b      	adds	r3, r7, r4
 8002dee:	4a29      	ldr	r2, [pc, #164]	; (8002e94 <MX_GPIO_Init+0x17c>)
 8002df0:	601a      	str	r2, [r3, #0]
			| CURR_H_Pin | CURR_N_Pin | CURR_L_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002df2:	193b      	adds	r3, r7, r4
 8002df4:	2201      	movs	r2, #1
 8002df6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df8:	193b      	adds	r3, r7, r4
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfe:	193b      	adds	r3, r7, r4
 8002e00:	2200      	movs	r2, #0
 8002e02:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e04:	193a      	adds	r2, r7, r4
 8002e06:	23a0      	movs	r3, #160	; 0xa0
 8002e08:	05db      	lsls	r3, r3, #23
 8002e0a:	0011      	movs	r1, r2
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f002 f87d 	bl	8004f0c <HAL_GPIO_Init>

	/*Configure GPIO pins : CLK_ATT_Pin DATA_ATT_Pin DE_485_Pin */
	GPIO_InitStruct.Pin = CLK_ATT_Pin | DATA_ATT_Pin | DE_485_Pin;
 8002e12:	193b      	adds	r3, r7, r4
 8002e14:	2223      	movs	r2, #35	; 0x23
 8002e16:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e18:	193b      	adds	r3, r7, r4
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	193b      	adds	r3, r7, r4
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e24:	193b      	adds	r3, r7, r4
 8002e26:	2200      	movs	r2, #0
 8002e28:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2a:	193b      	adds	r3, r7, r4
 8002e2c:	4a1a      	ldr	r2, [pc, #104]	; (8002e98 <MX_GPIO_Init+0x180>)
 8002e2e:	0019      	movs	r1, r3
 8002e30:	0010      	movs	r0, r2
 8002e32:	f002 f86b 	bl	8004f0c <HAL_GPIO_Init>

	/*Configure GPIO pin : PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e36:	193b      	adds	r3, r7, r4
 8002e38:	2240      	movs	r2, #64	; 0x40
 8002e3a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e3c:	193b      	adds	r3, r7, r4
 8002e3e:	2201      	movs	r2, #1
 8002e40:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e42:	193b      	adds	r3, r7, r4
 8002e44:	2200      	movs	r2, #0
 8002e46:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e48:	193b      	adds	r3, r7, r4
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e4e:	193b      	adds	r3, r7, r4
 8002e50:	4a12      	ldr	r2, [pc, #72]	; (8002e9c <MX_GPIO_Init+0x184>)
 8002e52:	0019      	movs	r1, r3
 8002e54:	0010      	movs	r0, r2
 8002e56:	f002 f859 	bl	8004f0c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB6 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8002e5a:	0021      	movs	r1, r4
 8002e5c:	187b      	adds	r3, r7, r1
 8002e5e:	22c0      	movs	r2, #192	; 0xc0
 8002e60:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	187b      	adds	r3, r7, r1
 8002e64:	2202      	movs	r2, #2
 8002e66:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	187b      	adds	r3, r7, r1
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6e:	187b      	adds	r3, r7, r1
 8002e70:	2200      	movs	r2, #0
 8002e72:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002e74:	187b      	adds	r3, r7, r1
 8002e76:	2200      	movs	r2, #0
 8002e78:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7a:	187b      	adds	r3, r7, r1
 8002e7c:	4a06      	ldr	r2, [pc, #24]	; (8002e98 <MX_GPIO_Init+0x180>)
 8002e7e:	0019      	movs	r1, r3
 8002e80:	0010      	movs	r0, r2
 8002e82:	f002 f843 	bl	8004f0c <HAL_GPIO_Init>

}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b009      	add	sp, #36	; 0x24
 8002e8c:	bd90      	pop	{r4, r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	40021000 	.word	0x40021000
 8002e94:	00001f88 	.word	0x00001f88
 8002e98:	50000400 	.word	0x50000400
 8002e9c:	50000800 	.word	0x50000800

08002ea0 <get_db_gain>:

/* USER CODE BEGIN 4 */

uint8_t get_db_gain(uint16_t adc_gain) {
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	0002      	movs	r2, r0
 8002ea8:	1dbb      	adds	r3, r7, #6
 8002eaa:	801a      	strh	r2, [r3, #0]

	if (adc_gain >= 3781)
 8002eac:	1dbb      	adds	r3, r7, #6
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	4a9e      	ldr	r2, [pc, #632]	; (800312c <get_db_gain+0x28c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <get_db_gain+0x1a>
		return 45;
 8002eb6:	232d      	movs	r3, #45	; 0x2d
 8002eb8:	e133      	b.n	8003122 <get_db_gain+0x282>
	else if (adc_gain < 3781 && adc_gain >= 1515)
 8002eba:	1dbb      	adds	r3, r7, #6
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	4a9b      	ldr	r2, [pc, #620]	; (800312c <get_db_gain+0x28c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d81a      	bhi.n	8002efa <get_db_gain+0x5a>
 8002ec4:	1dbb      	adds	r3, r7, #6
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	4a99      	ldr	r2, [pc, #612]	; (8003130 <get_db_gain+0x290>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d915      	bls.n	8002efa <get_db_gain+0x5a>
		return 0.0022f * adc_gain + 36.6571f;
 8002ece:	1dbb      	adds	r3, r7, #6
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f7fe f956 	bl	8001184 <__aeabi_i2f>
 8002ed8:	1c03      	adds	r3, r0, #0
 8002eda:	4996      	ldr	r1, [pc, #600]	; (8003134 <get_db_gain+0x294>)
 8002edc:	1c18      	adds	r0, r3, #0
 8002ede:	f7fd fe47 	bl	8000b70 <__aeabi_fmul>
 8002ee2:	1c03      	adds	r3, r0, #0
 8002ee4:	4994      	ldr	r1, [pc, #592]	; (8003138 <get_db_gain+0x298>)
 8002ee6:	1c18      	adds	r0, r3, #0
 8002ee8:	f7fd fadc 	bl	80004a4 <__aeabi_fadd>
 8002eec:	1c03      	adds	r3, r0, #0
 8002eee:	1c18      	adds	r0, r3, #0
 8002ef0:	f7fd fac0 	bl	8000474 <__aeabi_f2uiz>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	e113      	b.n	8003122 <get_db_gain+0x282>
	else if (adc_gain < 1515 && adc_gain >= 1188)
 8002efa:	1dbb      	adds	r3, r7, #6
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	4a8c      	ldr	r2, [pc, #560]	; (8003130 <get_db_gain+0x290>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d81a      	bhi.n	8002f3a <get_db_gain+0x9a>
 8002f04:	1dbb      	adds	r3, r7, #6
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	4a8c      	ldr	r2, [pc, #560]	; (800313c <get_db_gain+0x29c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d915      	bls.n	8002f3a <get_db_gain+0x9a>
		return (0.0153f * adc_gain + 16.8349f);
 8002f0e:	1dbb      	adds	r3, r7, #6
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	0018      	movs	r0, r3
 8002f14:	f7fe f936 	bl	8001184 <__aeabi_i2f>
 8002f18:	1c03      	adds	r3, r0, #0
 8002f1a:	4989      	ldr	r1, [pc, #548]	; (8003140 <get_db_gain+0x2a0>)
 8002f1c:	1c18      	adds	r0, r3, #0
 8002f1e:	f7fd fe27 	bl	8000b70 <__aeabi_fmul>
 8002f22:	1c03      	adds	r3, r0, #0
 8002f24:	4987      	ldr	r1, [pc, #540]	; (8003144 <get_db_gain+0x2a4>)
 8002f26:	1c18      	adds	r0, r3, #0
 8002f28:	f7fd fabc 	bl	80004a4 <__aeabi_fadd>
 8002f2c:	1c03      	adds	r3, r0, #0
 8002f2e:	1c18      	adds	r0, r3, #0
 8002f30:	f7fd faa0 	bl	8000474 <__aeabi_f2uiz>
 8002f34:	0003      	movs	r3, r0
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	e0f3      	b.n	8003122 <get_db_gain+0x282>
	else if (adc_gain < 1188 && adc_gain >= 1005)
 8002f3a:	1dbb      	adds	r3, r7, #6
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	4a7f      	ldr	r2, [pc, #508]	; (800313c <get_db_gain+0x29c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d81b      	bhi.n	8002f7c <get_db_gain+0xdc>
 8002f44:	1dbb      	adds	r3, r7, #6
 8002f46:	881a      	ldrh	r2, [r3, #0]
 8002f48:	23fb      	movs	r3, #251	; 0xfb
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d915      	bls.n	8002f7c <get_db_gain+0xdc>
		return (0.0273f * adc_gain + 2.540f);
 8002f50:	1dbb      	adds	r3, r7, #6
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	0018      	movs	r0, r3
 8002f56:	f7fe f915 	bl	8001184 <__aeabi_i2f>
 8002f5a:	1c03      	adds	r3, r0, #0
 8002f5c:	497a      	ldr	r1, [pc, #488]	; (8003148 <get_db_gain+0x2a8>)
 8002f5e:	1c18      	adds	r0, r3, #0
 8002f60:	f7fd fe06 	bl	8000b70 <__aeabi_fmul>
 8002f64:	1c03      	adds	r3, r0, #0
 8002f66:	4979      	ldr	r1, [pc, #484]	; (800314c <get_db_gain+0x2ac>)
 8002f68:	1c18      	adds	r0, r3, #0
 8002f6a:	f7fd fa9b 	bl	80004a4 <__aeabi_fadd>
 8002f6e:	1c03      	adds	r3, r0, #0
 8002f70:	1c18      	adds	r0, r3, #0
 8002f72:	f7fd fa7f 	bl	8000474 <__aeabi_f2uiz>
 8002f76:	0003      	movs	r3, r0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	e0d2      	b.n	8003122 <get_db_gain+0x282>
	else if (adc_gain < 1005 && adc_gain >= 897)
 8002f7c:	1dbb      	adds	r3, r7, #6
 8002f7e:	881a      	ldrh	r2, [r3, #0]
 8002f80:	23fb      	movs	r3, #251	; 0xfb
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d81b      	bhi.n	8002fc0 <get_db_gain+0x120>
 8002f88:	1dbb      	adds	r3, r7, #6
 8002f8a:	881a      	ldrh	r2, [r3, #0]
 8002f8c:	23e0      	movs	r3, #224	; 0xe0
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d915      	bls.n	8002fc0 <get_db_gain+0x120>
		return (0.0463f * adc_gain - 16.5278f);
 8002f94:	1dbb      	adds	r3, r7, #6
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f7fe f8f3 	bl	8001184 <__aeabi_i2f>
 8002f9e:	1c03      	adds	r3, r0, #0
 8002fa0:	496b      	ldr	r1, [pc, #428]	; (8003150 <get_db_gain+0x2b0>)
 8002fa2:	1c18      	adds	r0, r3, #0
 8002fa4:	f7fd fde4 	bl	8000b70 <__aeabi_fmul>
 8002fa8:	1c03      	adds	r3, r0, #0
 8002faa:	496a      	ldr	r1, [pc, #424]	; (8003154 <get_db_gain+0x2b4>)
 8002fac:	1c18      	adds	r0, r3, #0
 8002fae:	f7fd ff05 	bl	8000dbc <__aeabi_fsub>
 8002fb2:	1c03      	adds	r3, r0, #0
 8002fb4:	1c18      	adds	r0, r3, #0
 8002fb6:	f7fd fa5d 	bl	8000474 <__aeabi_f2uiz>
 8002fba:	0003      	movs	r3, r0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	e0b0      	b.n	8003122 <get_db_gain+0x282>
	else if (adc_gain < 897 && adc_gain >= 825)
 8002fc0:	1dbb      	adds	r3, r7, #6
 8002fc2:	881a      	ldrh	r2, [r3, #0]
 8002fc4:	23e0      	movs	r3, #224	; 0xe0
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d81b      	bhi.n	8003004 <get_db_gain+0x164>
 8002fcc:	1dbb      	adds	r3, r7, #6
 8002fce:	881a      	ldrh	r2, [r3, #0]
 8002fd0:	23ce      	movs	r3, #206	; 0xce
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d915      	bls.n	8003004 <get_db_gain+0x164>
		return (0.0694f * adc_gain - 37.2917f);
 8002fd8:	1dbb      	adds	r3, r7, #6
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f7fe f8d1 	bl	8001184 <__aeabi_i2f>
 8002fe2:	1c03      	adds	r3, r0, #0
 8002fe4:	495c      	ldr	r1, [pc, #368]	; (8003158 <get_db_gain+0x2b8>)
 8002fe6:	1c18      	adds	r0, r3, #0
 8002fe8:	f7fd fdc2 	bl	8000b70 <__aeabi_fmul>
 8002fec:	1c03      	adds	r3, r0, #0
 8002fee:	495b      	ldr	r1, [pc, #364]	; (800315c <get_db_gain+0x2bc>)
 8002ff0:	1c18      	adds	r0, r3, #0
 8002ff2:	f7fd fee3 	bl	8000dbc <__aeabi_fsub>
 8002ff6:	1c03      	adds	r3, r0, #0
 8002ff8:	1c18      	adds	r0, r3, #0
 8002ffa:	f7fd fa3b 	bl	8000474 <__aeabi_f2uiz>
 8002ffe:	0003      	movs	r3, r0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	e08e      	b.n	8003122 <get_db_gain+0x282>
	else if (adc_gain < 825 && adc_gain >= 776)
 8003004:	1dbb      	adds	r3, r7, #6
 8003006:	881a      	ldrh	r2, [r3, #0]
 8003008:	23ce      	movs	r3, #206	; 0xce
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	429a      	cmp	r2, r3
 800300e:	d81b      	bhi.n	8003048 <get_db_gain+0x1a8>
 8003010:	1dbb      	adds	r3, r7, #6
 8003012:	881a      	ldrh	r2, [r3, #0]
 8003014:	23c2      	movs	r3, #194	; 0xc2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	429a      	cmp	r2, r3
 800301a:	d315      	bcc.n	8003048 <get_db_gain+0x1a8>
		return (0.1020f * adc_gain - 64.1837f);
 800301c:	1dbb      	adds	r3, r7, #6
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	0018      	movs	r0, r3
 8003022:	f7fe f8af 	bl	8001184 <__aeabi_i2f>
 8003026:	1c03      	adds	r3, r0, #0
 8003028:	494d      	ldr	r1, [pc, #308]	; (8003160 <get_db_gain+0x2c0>)
 800302a:	1c18      	adds	r0, r3, #0
 800302c:	f7fd fda0 	bl	8000b70 <__aeabi_fmul>
 8003030:	1c03      	adds	r3, r0, #0
 8003032:	494c      	ldr	r1, [pc, #304]	; (8003164 <get_db_gain+0x2c4>)
 8003034:	1c18      	adds	r0, r3, #0
 8003036:	f7fd fec1 	bl	8000dbc <__aeabi_fsub>
 800303a:	1c03      	adds	r3, r0, #0
 800303c:	1c18      	adds	r0, r3, #0
 800303e:	f7fd fa19 	bl	8000474 <__aeabi_f2uiz>
 8003042:	0003      	movs	r3, r0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	e06c      	b.n	8003122 <get_db_gain+0x282>
	else if (adc_gain < 776 && adc_gain >= 746)
 8003048:	1dbb      	adds	r3, r7, #6
 800304a:	881a      	ldrh	r2, [r3, #0]
 800304c:	23c2      	movs	r3, #194	; 0xc2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	429a      	cmp	r2, r3
 8003052:	d21a      	bcs.n	800308a <get_db_gain+0x1ea>
 8003054:	1dbb      	adds	r3, r7, #6
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	4a43      	ldr	r2, [pc, #268]	; (8003168 <get_db_gain+0x2c8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d915      	bls.n	800308a <get_db_gain+0x1ea>
		return (0.1667f * adc_gain - 114.333f);
 800305e:	1dbb      	adds	r3, r7, #6
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	0018      	movs	r0, r3
 8003064:	f7fe f88e 	bl	8001184 <__aeabi_i2f>
 8003068:	1c03      	adds	r3, r0, #0
 800306a:	4940      	ldr	r1, [pc, #256]	; (800316c <get_db_gain+0x2cc>)
 800306c:	1c18      	adds	r0, r3, #0
 800306e:	f7fd fd7f 	bl	8000b70 <__aeabi_fmul>
 8003072:	1c03      	adds	r3, r0, #0
 8003074:	493e      	ldr	r1, [pc, #248]	; (8003170 <get_db_gain+0x2d0>)
 8003076:	1c18      	adds	r0, r3, #0
 8003078:	f7fd fea0 	bl	8000dbc <__aeabi_fsub>
 800307c:	1c03      	adds	r3, r0, #0
 800307e:	1c18      	adds	r0, r3, #0
 8003080:	f7fd f9f8 	bl	8000474 <__aeabi_f2uiz>
 8003084:	0003      	movs	r3, r0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	e04b      	b.n	8003122 <get_db_gain+0x282>
	else if (adc_gain < 746 && adc_gain >= 733)
 800308a:	1dbb      	adds	r3, r7, #6
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	4a36      	ldr	r2, [pc, #216]	; (8003168 <get_db_gain+0x2c8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d81b      	bhi.n	80030cc <get_db_gain+0x22c>
 8003094:	1dbb      	adds	r3, r7, #6
 8003096:	881a      	ldrh	r2, [r3, #0]
 8003098:	23b7      	movs	r3, #183	; 0xb7
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	429a      	cmp	r2, r3
 800309e:	d915      	bls.n	80030cc <get_db_gain+0x22c>
		return (0.3846f * adc_gain - 276.9231f);
 80030a0:	1dbb      	adds	r3, r7, #6
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	0018      	movs	r0, r3
 80030a6:	f7fe f86d 	bl	8001184 <__aeabi_i2f>
 80030aa:	1c03      	adds	r3, r0, #0
 80030ac:	4931      	ldr	r1, [pc, #196]	; (8003174 <get_db_gain+0x2d4>)
 80030ae:	1c18      	adds	r0, r3, #0
 80030b0:	f7fd fd5e 	bl	8000b70 <__aeabi_fmul>
 80030b4:	1c03      	adds	r3, r0, #0
 80030b6:	4930      	ldr	r1, [pc, #192]	; (8003178 <get_db_gain+0x2d8>)
 80030b8:	1c18      	adds	r0, r3, #0
 80030ba:	f7fd fe7f 	bl	8000dbc <__aeabi_fsub>
 80030be:	1c03      	adds	r3, r0, #0
 80030c0:	1c18      	adds	r0, r3, #0
 80030c2:	f7fd f9d7 	bl	8000474 <__aeabi_f2uiz>
 80030c6:	0003      	movs	r3, r0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	e02a      	b.n	8003122 <get_db_gain+0x282>
	else if (adc_gain < 733 && adc_gain >= 725)
 80030cc:	1dbb      	adds	r3, r7, #6
 80030ce:	881a      	ldrh	r2, [r3, #0]
 80030d0:	23b7      	movs	r3, #183	; 0xb7
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d81b      	bhi.n	8003110 <get_db_gain+0x270>
 80030d8:	1dbb      	adds	r3, r7, #6
 80030da:	881a      	ldrh	r2, [r3, #0]
 80030dc:	23b5      	movs	r3, #181	; 0xb5
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d915      	bls.n	8003110 <get_db_gain+0x270>
		return (0.625f * adc_gain - 453.125f);
 80030e4:	1dbb      	adds	r3, r7, #6
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	0018      	movs	r0, r3
 80030ea:	f7fe f84b 	bl	8001184 <__aeabi_i2f>
 80030ee:	1c03      	adds	r3, r0, #0
 80030f0:	4922      	ldr	r1, [pc, #136]	; (800317c <get_db_gain+0x2dc>)
 80030f2:	1c18      	adds	r0, r3, #0
 80030f4:	f7fd fd3c 	bl	8000b70 <__aeabi_fmul>
 80030f8:	1c03      	adds	r3, r0, #0
 80030fa:	4921      	ldr	r1, [pc, #132]	; (8003180 <get_db_gain+0x2e0>)
 80030fc:	1c18      	adds	r0, r3, #0
 80030fe:	f7fd fe5d 	bl	8000dbc <__aeabi_fsub>
 8003102:	1c03      	adds	r3, r0, #0
 8003104:	1c18      	adds	r0, r3, #0
 8003106:	f7fd f9b5 	bl	8000474 <__aeabi_f2uiz>
 800310a:	0003      	movs	r3, r0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e008      	b.n	8003122 <get_db_gain+0x282>
	else if (adc_gain < 725)
 8003110:	1dbb      	adds	r3, r7, #6
 8003112:	881a      	ldrh	r2, [r3, #0]
 8003114:	23b5      	movs	r3, #181	; 0xb5
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	429a      	cmp	r2, r3
 800311a:	d801      	bhi.n	8003120 <get_db_gain+0x280>
		return 0;
 800311c:	2300      	movs	r3, #0
 800311e:	e000      	b.n	8003122 <get_db_gain+0x282>
	return 0;
 8003120:	2300      	movs	r3, #0
}
 8003122:	0018      	movs	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	b002      	add	sp, #8
 8003128:	bd80      	pop	{r7, pc}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	00000ec4 	.word	0x00000ec4
 8003130:	000005ea 	.word	0x000005ea
 8003134:	3b102de0 	.word	0x3b102de0
 8003138:	4212a0df 	.word	0x4212a0df
 800313c:	000004a3 	.word	0x000004a3
 8003140:	3c7aacda 	.word	0x3c7aacda
 8003144:	4186ade0 	.word	0x4186ade0
 8003148:	3cdfa440 	.word	0x3cdfa440
 800314c:	40228f5c 	.word	0x40228f5c
 8003150:	3d3da512 	.word	0x3d3da512
 8003154:	418438ef 	.word	0x418438ef
 8003158:	3d8e2196 	.word	0x3d8e2196
 800315c:	42152ab3 	.word	0x42152ab3
 8003160:	3dd0e560 	.word	0x3dd0e560
 8003164:	42805e0e 	.word	0x42805e0e
 8003168:	000002e9 	.word	0x000002e9
 800316c:	3e2ab368 	.word	0x3e2ab368
 8003170:	42e4aa7f 	.word	0x42e4aa7f
 8003174:	3ec4ea4b 	.word	0x3ec4ea4b
 8003178:	438a7628 	.word	0x438a7628
 800317c:	3f200000 	.word	0x3f200000
 8003180:	43e29000 	.word	0x43e29000

08003184 <TIM16_IRQHandler>:

void TIM16_IRQHandler(void) {
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
	CLEAR_BIT(TIM16->SR, TIM_SR_UIF);
 8003188:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <TIM16_IRQHandler+0x40>)
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <TIM16_IRQHandler+0x40>)
 800318e:	2101      	movs	r1, #1
 8003190:	438a      	bics	r2, r1
 8003192:	611a      	str	r2, [r3, #16]
	if (READ_BIT(GPIOC->ODR, GPIO_ODR_OD15))
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <TIM16_IRQHandler+0x44>)
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	2380      	movs	r3, #128	; 0x80
 800319a:	021b      	lsls	r3, r3, #8
 800319c:	4013      	ands	r3, r2
 800319e:	d006      	beq.n	80031ae <TIM16_IRQHandler+0x2a>
		CLEAR_BIT(GPIOC->ODR, GPIO_ODR_OD15);
 80031a0:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <TIM16_IRQHandler+0x44>)
 80031a2:	695a      	ldr	r2, [r3, #20]
 80031a4:	4b08      	ldr	r3, [pc, #32]	; (80031c8 <TIM16_IRQHandler+0x44>)
 80031a6:	4909      	ldr	r1, [pc, #36]	; (80031cc <TIM16_IRQHandler+0x48>)
 80031a8:	400a      	ands	r2, r1
 80031aa:	615a      	str	r2, [r3, #20]
	else
		SET_BIT(GPIOC->ODR, GPIO_ODR_OD15);
}
 80031ac:	e006      	b.n	80031bc <TIM16_IRQHandler+0x38>
		SET_BIT(GPIOC->ODR, GPIO_ODR_OD15);
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <TIM16_IRQHandler+0x44>)
 80031b0:	695a      	ldr	r2, [r3, #20]
 80031b2:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <TIM16_IRQHandler+0x44>)
 80031b4:	2180      	movs	r1, #128	; 0x80
 80031b6:	0209      	lsls	r1, r1, #8
 80031b8:	430a      	orrs	r2, r1
 80031ba:	615a      	str	r2, [r3, #20]
}
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	40014400 	.word	0x40014400
 80031c8:	50000800 	.word	0x50000800
 80031cc:	ffff7fff 	.word	0xffff7fff

080031d0 <adc_get_resultsDMA>:

void adc_get_resultsDMA(uint8_t _adc_counter) {
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	0002      	movs	r2, r0
 80031d8:	1dfb      	adds	r3, r7, #7
 80031da:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < ADC_CHANNEL_NUM; i++) {
 80031dc:	2300      	movs	r3, #0
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	e04b      	b.n	800327a <adc_get_resultsDMA+0xaa>
		sum[i] -= adc_values[i][_adc_counter];
 80031e2:	4b2a      	ldr	r3, [pc, #168]	; (800328c <adc_get_resultsDMA+0xbc>)
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	0052      	lsls	r2, r2, #1
 80031e8:	5ad1      	ldrh	r1, [r2, r3]
 80031ea:	1dfb      	adds	r3, r7, #7
 80031ec:	781c      	ldrb	r4, [r3, #0]
 80031ee:	4828      	ldr	r0, [pc, #160]	; (8003290 <adc_get_resultsDMA+0xc0>)
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	0013      	movs	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	189b      	adds	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	191b      	adds	r3, r3, r4
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	5a1b      	ldrh	r3, [r3, r0]
 8003200:	1acb      	subs	r3, r1, r3
 8003202:	b299      	uxth	r1, r3
 8003204:	4b21      	ldr	r3, [pc, #132]	; (800328c <adc_get_resultsDMA+0xbc>)
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	0052      	lsls	r2, r2, #1
 800320a:	52d1      	strh	r1, [r2, r3]
		adc_values[i][_adc_counter] = adcResultsDMA[i];
 800320c:	1dfb      	adds	r3, r7, #7
 800320e:	7818      	ldrb	r0, [r3, #0]
 8003210:	4b20      	ldr	r3, [pc, #128]	; (8003294 <adc_get_resultsDMA+0xc4>)
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	0052      	lsls	r2, r2, #1
 8003216:	5ad3      	ldrh	r3, [r2, r3]
 8003218:	b29c      	uxth	r4, r3
 800321a:	491d      	ldr	r1, [pc, #116]	; (8003290 <adc_get_resultsDMA+0xc0>)
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	0013      	movs	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	189b      	adds	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	181b      	adds	r3, r3, r0
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	1c22      	adds	r2, r4, #0
 800322c:	525a      	strh	r2, [r3, r1]
		sum[i] += adc_values[i][_adc_counter];
 800322e:	4b17      	ldr	r3, [pc, #92]	; (800328c <adc_get_resultsDMA+0xbc>)
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	0052      	lsls	r2, r2, #1
 8003234:	5ad1      	ldrh	r1, [r2, r3]
 8003236:	1dfb      	adds	r3, r7, #7
 8003238:	781c      	ldrb	r4, [r3, #0]
 800323a:	4815      	ldr	r0, [pc, #84]	; (8003290 <adc_get_resultsDMA+0xc0>)
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	0013      	movs	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	189b      	adds	r3, r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	191b      	adds	r3, r3, r4
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	5a1b      	ldrh	r3, [r3, r0]
 800324c:	18cb      	adds	r3, r1, r3
 800324e:	b299      	uxth	r1, r3
 8003250:	4b0e      	ldr	r3, [pc, #56]	; (800328c <adc_get_resultsDMA+0xbc>)
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	0052      	lsls	r2, r2, #1
 8003256:	52d1      	strh	r1, [r2, r3]
		adc_media[i] = sum[i] / MEDIA_NUM;
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <adc_get_resultsDMA+0xbc>)
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	0052      	lsls	r2, r2, #1
 800325e:	5ad3      	ldrh	r3, [r2, r3]
 8003260:	2114      	movs	r1, #20
 8003262:	0018      	movs	r0, r3
 8003264:	f7fc ff56 	bl	8000114 <__udivsi3>
 8003268:	0003      	movs	r3, r0
 800326a:	b299      	uxth	r1, r3
 800326c:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <adc_get_resultsDMA+0xc8>)
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	0052      	lsls	r2, r2, #1
 8003272:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < ADC_CHANNEL_NUM; i++) {
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	3301      	adds	r3, #1
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b06      	cmp	r3, #6
 800327e:	ddb0      	ble.n	80031e2 <adc_get_resultsDMA+0x12>
	}
}
 8003280:	46c0      	nop			; (mov r8, r8)
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	46bd      	mov	sp, r7
 8003286:	b005      	add	sp, #20
 8003288:	bd90      	pop	{r4, r7, pc}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	20000284 	.word	0x20000284
 8003290:	2000015c 	.word	0x2000015c
 8003294:	2000014c 	.word	0x2000014c
 8003298:	20000274 	.word	0x20000274

0800329c <USART1_IRQHandler>:
	adcDataReady = true;

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, ADC_CHANNEL_NUM);
}

void USART1_IRQHandler(void) {
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
	uart1_read_to_frame(&uart1);
 80032a0:	4b03      	ldr	r3, [pc, #12]	; (80032b0 <USART1_IRQHandler+0x14>)
 80032a2:	0018      	movs	r0, r3
 80032a4:	f000 fd86 	bl	8003db4 <uart1_read_to_frame>
}
 80032a8:	46c0      	nop			; (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	2000029c 	.word	0x2000029c

080032b4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032b8:	b672      	cpsid	i
}
 80032ba:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80032bc:	e7fe      	b.n	80032bc <Error_Handler+0x8>
	...

080032c0 <max4003_get_dbm>:
 *  Created on: Sep 29, 2022
 *      Author: sigmadev
 */
#include "max4003.h"

uint8_t max4003_get_dbm( MAX4003_t *mx,uint16_t value) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	000a      	movs	r2, r1
 80032ca:	1cbb      	adds	r3, r7, #2
 80032cc:	801a      	strh	r2, [r3, #0]
	float m;
	float b;
	 m = (float) ( MAX4003_DBM_MAX -  MAX4003_DBM_MIN)
			/ (float) (mx->max - mx->min);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	001a      	movs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	885b      	ldrh	r3, [r3, #2]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	0018      	movs	r0, r3
 80032dc:	f7fd ff52 	bl	8001184 <__aeabi_i2f>
 80032e0:	1c03      	adds	r3, r0, #0
	 m = (float) ( MAX4003_DBM_MAX -  MAX4003_DBM_MIN)
 80032e2:	1c19      	adds	r1, r3, #0
 80032e4:	481f      	ldr	r0, [pc, #124]	; (8003364 <max4003_get_dbm+0xa4>)
 80032e6:	f7fd fa7b 	bl	80007e0 <__aeabi_fdiv>
 80032ea:	1c03      	adds	r3, r0, #0
 80032ec:	60fb      	str	r3, [r7, #12]
	 b =  MAX4003_DBM_MAX -mx->max * m;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	0018      	movs	r0, r3
 80032f4:	f7fd ff46 	bl	8001184 <__aeabi_i2f>
 80032f8:	1c03      	adds	r3, r0, #0
 80032fa:	68f9      	ldr	r1, [r7, #12]
 80032fc:	1c18      	adds	r0, r3, #0
 80032fe:	f7fd fc37 	bl	8000b70 <__aeabi_fmul>
 8003302:	1c03      	adds	r3, r0, #0
 8003304:	1c19      	adds	r1, r3, #0
 8003306:	2000      	movs	r0, #0
 8003308:	f7fd fd58 	bl	8000dbc <__aeabi_fsub>
 800330c:	1c03      	adds	r3, r0, #0
 800330e:	60bb      	str	r3, [r7, #8]

	if (value > mx->max) {
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	1cba      	adds	r2, r7, #2
 8003316:	8812      	ldrh	r2, [r2, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d901      	bls.n	8003320 <max4003_get_dbm+0x60>
		return  MAX4003_DBM_MAX;
 800331c:	2300      	movs	r3, #0
 800331e:	e01d      	b.n	800335c <max4003_get_dbm+0x9c>
	} else if (value < mx->min) {
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	885b      	ldrh	r3, [r3, #2]
 8003324:	1cba      	adds	r2, r7, #2
 8003326:	8812      	ldrh	r2, [r2, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d201      	bcs.n	8003330 <max4003_get_dbm+0x70>
		return  MAX4003_DBM_MIN;
 800332c:	23e2      	movs	r3, #226	; 0xe2
 800332e:	e015      	b.n	800335c <max4003_get_dbm+0x9c>
	}
	return (int8_t) (m * (float) value + b);
 8003330:	1cbb      	adds	r3, r7, #2
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	0018      	movs	r0, r3
 8003336:	f7fd ff73 	bl	8001220 <__aeabi_ui2f>
 800333a:	1c03      	adds	r3, r0, #0
 800333c:	68f9      	ldr	r1, [r7, #12]
 800333e:	1c18      	adds	r0, r3, #0
 8003340:	f7fd fc16 	bl	8000b70 <__aeabi_fmul>
 8003344:	1c03      	adds	r3, r0, #0
 8003346:	68b9      	ldr	r1, [r7, #8]
 8003348:	1c18      	adds	r0, r3, #0
 800334a:	f7fd f8ab 	bl	80004a4 <__aeabi_fadd>
 800334e:	1c03      	adds	r3, r0, #0
 8003350:	1c18      	adds	r0, r3, #0
 8003352:	f7fd fef7 	bl	8001144 <__aeabi_f2iz>
 8003356:	0003      	movs	r3, r0
 8003358:	b25b      	sxtb	r3, r3
 800335a:	b2db      	uxtb	r3, r3
}
 800335c:	0018      	movs	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	b004      	add	sp, #16
 8003362:	bd80      	pop	{r7, pc}
 8003364:	41f00000 	.word	0x41f00000

08003368 <module_init>:
 *      Author: sigmadev
 */

#include <module.h>

void  module_init(Module_t* module ,Function_t funcion, Id_t id){
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	0008      	movs	r0, r1
 8003372:	0011      	movs	r1, r2
 8003374:	1cfb      	adds	r3, r7, #3
 8003376:	1c02      	adds	r2, r0, #0
 8003378:	701a      	strb	r2, [r3, #0]
 800337a:	1cbb      	adds	r3, r7, #2
 800337c:	1c0a      	adds	r2, r1, #0
 800337e:	701a      	strb	r2, [r3, #0]
module->function = funcion;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	1cfa      	adds	r2, r7, #3
 8003384:	7812      	ldrb	r2, [r2, #0]
 8003386:	765a      	strb	r2, [r3, #25]
module->id = id;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	1cba      	adds	r2, r7, #2
 800338c:	7812      	ldrb	r2, [r2, #0]
 800338e:	761a      	strb	r2, [r3, #24]
module->att = 0;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]
module->gain =   0;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	705a      	strb	r2, [r3, #1]
module->pin = 0;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	715a      	strb	r2, [r3, #5]
module->pout = 0;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	709a      	strb	r2, [r3, #2]
module->temperature = 0;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	60da      	str	r2, [r3, #12]
module->state = true;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	721a      	strb	r2, [r3, #8]
}
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b002      	add	sp, #8
 80033ba:	bd80      	pop	{r7, pc}

080033bc <module_vswr_calc>:

float module_vswr_calc(int8_t pf, int8_t pr){
 80033bc:	b590      	push	{r4, r7, lr}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	0002      	movs	r2, r0
 80033c4:	1dfb      	adds	r3, r7, #7
 80033c6:	701a      	strb	r2, [r3, #0]
 80033c8:	1dbb      	adds	r3, r7, #6
 80033ca:	1c0a      	adds	r2, r1, #0
 80033cc:	701a      	strb	r2, [r3, #0]
	float den;
	float num;
	float factor;
	float result;

	factor = (float) pf/ (float) pr;
 80033ce:	1dfb      	adds	r3, r7, #7
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	b25b      	sxtb	r3, r3
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7fd fed5 	bl	8001184 <__aeabi_i2f>
 80033da:	1c04      	adds	r4, r0, #0
 80033dc:	1dbb      	adds	r3, r7, #6
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	b25b      	sxtb	r3, r3
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7fd fece 	bl	8001184 <__aeabi_i2f>
 80033e8:	1c03      	adds	r3, r0, #0
 80033ea:	1c19      	adds	r1, r3, #0
 80033ec:	1c20      	adds	r0, r4, #0
 80033ee:	f7fd f9f7 	bl	80007e0 <__aeabi_fdiv>
 80033f2:	1c03      	adds	r3, r0, #0
 80033f4:	617b      	str	r3, [r7, #20]
	den  = 1.0f + sqrtf(factor);
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	1c18      	adds	r0, r3, #0
 80033fa:	f003 f9c9 	bl	8006790 <sqrtf>
 80033fe:	1c03      	adds	r3, r0, #0
 8003400:	21fe      	movs	r1, #254	; 0xfe
 8003402:	0589      	lsls	r1, r1, #22
 8003404:	1c18      	adds	r0, r3, #0
 8003406:	f7fd f84d 	bl	80004a4 <__aeabi_fadd>
 800340a:	1c03      	adds	r3, r0, #0
 800340c:	613b      	str	r3, [r7, #16]
	num = 1.0f - sqrtf(factor);
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	1c18      	adds	r0, r3, #0
 8003412:	f003 f9bd 	bl	8006790 <sqrtf>
 8003416:	1c03      	adds	r3, r0, #0
 8003418:	1c19      	adds	r1, r3, #0
 800341a:	20fe      	movs	r0, #254	; 0xfe
 800341c:	0580      	lsls	r0, r0, #22
 800341e:	f7fd fccd 	bl	8000dbc <__aeabi_fsub>
 8003422:	1c03      	adds	r3, r0, #0
 8003424:	60fb      	str	r3, [r7, #12]
	result = den / num;
 8003426:	68f9      	ldr	r1, [r7, #12]
 8003428:	6938      	ldr	r0, [r7, #16]
 800342a:	f7fd f9d9 	bl	80007e0 <__aeabi_fdiv>
 800342e:	1c03      	adds	r3, r0, #0
 8003430:	60bb      	str	r3, [r7, #8]
	return result;
 8003432:	68bb      	ldr	r3, [r7, #8]
}
 8003434:	1c18      	adds	r0, r3, #0
 8003436:	46bd      	mov	sp, r7
 8003438:	b007      	add	sp, #28
 800343a:	bd90      	pop	{r4, r7, pc}

0800343c <rs485_init>:
 *  Created on: Sep 28, 2022
 *      Author: sigmadev
 */
#include "rs485.h"

void rs485_init(RS485_t *r) {
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
	r->len = 0;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	705a      	strb	r2, [r3, #1]
	r->status = DONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2207      	movs	r2, #7
 800344e:	721a      	strb	r2, [r3, #8]
	r->cmd = NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	46bd      	mov	sp, r7
 800345a:	b002      	add	sp, #8
 800345c:	bd80      	pop	{r7, pc}

0800345e <rs485_check_frame>:
Rs485_status_t rs485_check_frame(RS485_t *r, UART1_t *u) {
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]

	if (u->rx_count > (3 + 1 + 2)){
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	7a1b      	ldrb	r3, [r3, #8]
 800346c:	2b06      	cmp	r3, #6
 800346e:	d915      	bls.n	800349c <rs485_check_frame+0x3e>
		if (u->rx_buffer[0] == LTEL_START_MARK)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	227e      	movs	r2, #126	; 0x7e
 8003478:	4293      	cmp	r3, r2
 800347a:	d10d      	bne.n	8003498 <rs485_check_frame+0x3a>
			if(u->rx_buffer[u->rx_count-1] == LTEL_END_MARK)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	7a1b      	ldrb	r3, [r3, #8]
 8003484:	3b01      	subs	r3, #1
 8003486:	18d3      	adds	r3, r2, r3
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	227f      	movs	r2, #127	; 0x7f
 800348c:	4293      	cmp	r3, r2
 800348e:	d101      	bne.n	8003494 <rs485_check_frame+0x36>
				return VALID_FRAME;
 8003490:	2302      	movs	r3, #2
 8003492:	e004      	b.n	800349e <rs485_check_frame+0x40>
			else
				return START_READING;
 8003494:	2301      	movs	r3, #1
 8003496:	e002      	b.n	800349e <rs485_check_frame+0x40>
		else
			return START_READING;
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <rs485_check_frame+0x40>
	}
	return  WAITING;
 800349c:	2308      	movs	r3, #8
}
 800349e:	0018      	movs	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b002      	add	sp, #8
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <rs485_check_valid_module>:


Rs485_status_t  rs485_check_valid_module(UART1_t *uart1){
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
if (uart1->rx_buffer[1] == POWER_AMPLIFIER) {
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3301      	adds	r3, #1
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b09      	cmp	r3, #9
 80034b8:	d11e      	bne.n	80034f8 <rs485_check_valid_module+0x52>
			if (uart1->rx_buffer[2] == ID8) {
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3302      	adds	r3, #2
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d116      	bne.n	80034f4 <rs485_check_valid_module+0x4e>
				for (int i = 3; i  < uart1->rx_count; i++)
 80034c6:	2303      	movs	r3, #3
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	e00c      	b.n	80034e6 <rs485_check_valid_module+0x40>
					if (uart1->rx_buffer[i] == LTEL_END_MARK)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	18d3      	adds	r3, r2, r3
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	227f      	movs	r2, #127	; 0x7f
 80034d8:	4293      	cmp	r3, r2
 80034da:	d101      	bne.n	80034e0 <rs485_check_valid_module+0x3a>
						return   DATA_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	e00e      	b.n	80034fe <rs485_check_valid_module+0x58>
				for (int i = 3; i  < uart1->rx_count; i++)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	3301      	adds	r3, #1
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	7a1b      	ldrb	r3, [r3, #8]
 80034ea:	001a      	movs	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4293      	cmp	r3, r2
 80034f0:	dbec      	blt.n	80034cc <rs485_check_valid_module+0x26>
 80034f2:	e003      	b.n	80034fc <rs485_check_valid_module+0x56>
			} else
				return   WRONG_MODULE_ID;
 80034f4:	2305      	movs	r3, #5
 80034f6:	e002      	b.n	80034fe <rs485_check_valid_module+0x58>
		} else
			return  NO_VALID_MODULE;
 80034f8:	2304      	movs	r3, #4
 80034fa:	e000      	b.n	80034fe <rs485_check_valid_module+0x58>
return NO_VALID_MODULE;
 80034fc:	2304      	movs	r3, #4
}
 80034fe:	0018      	movs	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	b004      	add	sp, #16
 8003504:	bd80      	pop	{r7, pc}

08003506 <rs485_set_query_frame>:

void rs485_set_query_frame(RS485_t *r, Module_t *module) {
 8003506:	b590      	push	{r4, r7, lr}
 8003508:	b085      	sub	sp, #20
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	6039      	str	r1, [r7, #0]

	uint8_t crc_frame[2];
	uint16_t crc;
	r->frame[0] = LTEL_START_MARK;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	227e      	movs	r2, #126	; 0x7e
 8003516:	701a      	strb	r2, [r3, #0]
	r->frame[1] = module->function;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	3301      	adds	r3, #1
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	7e52      	ldrb	r2, [r2, #25]
 8003522:	701a      	strb	r2, [r3, #0]
	r->frame[2] = module->id;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	3302      	adds	r3, #2
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	7e12      	ldrb	r2, [r2, #24]
 800352e:	701a      	strb	r2, [r3, #0]
	r->frame[3] = r->cmd;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	3303      	adds	r3, #3
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	7812      	ldrb	r2, [r2, #0]
 800353a:	701a      	strb	r2, [r3, #0]

	if (module->function == LOW_NOISE_AMPLIFIER) {
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	7e5b      	ldrb	r3, [r3, #25]
 8003540:	2b08      	cmp	r3, #8
 8003542:	d000      	beq.n	8003546 <rs485_set_query_frame+0x40>
 8003544:	e085      	b.n	8003652 <rs485_set_query_frame+0x14c>
		switch (r->cmd) {
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b11      	cmp	r3, #17
 800354c:	d002      	beq.n	8003554 <rs485_set_query_frame+0x4e>
 800354e:	2b12      	cmp	r3, #18
 8003550:	d02a      	beq.n	80035a8 <rs485_set_query_frame+0xa2>
 8003552:	e057      	b.n	8003604 <rs485_set_query_frame+0xfe>
		case QUERY_PARAMETER_LTEL:
			r->frame[4] = 0x00;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	3304      	adds	r3, #4
 800355a:	2200      	movs	r2, #0
 800355c:	701a      	strb	r2, [r3, #0]
			r->frame[5] = 0x05;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	3305      	adds	r3, #5
 8003564:	2205      	movs	r2, #5
 8003566:	701a      	strb	r2, [r3, #0]
			r->frame[6] = 0x00;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	3306      	adds	r3, #6
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
			r->frame[7] = module->att;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	3307      	adds	r3, #7
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	7812      	ldrb	r2, [r2, #0]
 800357c:	701a      	strb	r2, [r3, #0]
			r->frame[8] = module->gain;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	3308      	adds	r3, #8
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	7852      	ldrb	r2, [r2, #1]
 8003588:	701a      	strb	r2, [r3, #0]
			r->frame[9] = module->pout;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2202      	movs	r2, #2
 800358e:	569a      	ldrsb	r2, [r3, r2]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	3309      	adds	r3, #9
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]
			r->frame[10] = module->voltage;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	330a      	adds	r3, #10
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	7912      	ldrb	r2, [r2, #4]
 80035a4:	701a      	strb	r2, [r3, #0]
			break;
 80035a6:	e031      	b.n	800360c <rs485_set_query_frame+0x106>
		case QUERY_PARAMETER_SIGMA:
			r->frame[4] = 0x06;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	3304      	adds	r3, #4
 80035ae:	2206      	movs	r2, #6
 80035b0:	701a      	strb	r2, [r3, #0]
			r->frame[5] = module->pout;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2202      	movs	r2, #2
 80035b6:	569a      	ldrsb	r2, [r3, r2]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	3305      	adds	r3, #5
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	701a      	strb	r2, [r3, #0]
			r->frame[6] = module->att;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	3306      	adds	r3, #6
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	7812      	ldrb	r2, [r2, #0]
 80035cc:	701a      	strb	r2, [r3, #0]
			r->frame[7] = module->gain;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	3307      	adds	r3, #7
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	7852      	ldrb	r2, [r2, #1]
 80035d8:	701a      	strb	r2, [r3, #0]
			r->frame[8] = module->current;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	88da      	ldrh	r2, [r3, #6]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	3308      	adds	r3, #8
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	701a      	strb	r2, [r3, #0]
			r->frame[9] = module->voltage;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	3309      	adds	r3, #9
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	7912      	ldrb	r2, [r2, #4]
 80035f2:	701a      	strb	r2, [r3, #0]
			r->frame[10] = module->pin;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2205      	movs	r2, #5
 80035f8:	569a      	ldrsb	r2, [r3, r2]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	330a      	adds	r3, #10
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	701a      	strb	r2, [r3, #0]
		default:
			r->frame[0] = 0;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	701a      	strb	r2, [r3, #0]
		}
		crc = crc_get(&(r->frame[1]), 10);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	3301      	adds	r3, #1
 8003612:	210a      	movs	r1, #10
 8003614:	0018      	movs	r0, r3
 8003616:	f000 fc5b 	bl	8003ed0 <crc_get>
 800361a:	0003      	movs	r3, r0
 800361c:	b29a      	uxth	r2, r3
 800361e:	200a      	movs	r0, #10
 8003620:	183b      	adds	r3, r7, r0
 8003622:	801a      	strh	r2, [r3, #0]
		memcpy(crc_frame, &crc, 2);
 8003624:	210c      	movs	r1, #12
 8003626:	187b      	adds	r3, r7, r1
 8003628:	183a      	adds	r2, r7, r0
 800362a:	8812      	ldrh	r2, [r2, #0]
 800362c:	801a      	strh	r2, [r3, #0]
		r->frame[11] = crc_frame[0];
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	330b      	adds	r3, #11
 8003634:	187a      	adds	r2, r7, r1
 8003636:	7812      	ldrb	r2, [r2, #0]
 8003638:	701a      	strb	r2, [r3, #0]
		r->frame[12] = crc_frame[1];
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	330c      	adds	r3, #12
 8003640:	187a      	adds	r2, r7, r1
 8003642:	7852      	ldrb	r2, [r2, #1]
 8003644:	701a      	strb	r2, [r3, #0]
		r->frame[13] = LTEL_END_MARK;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	330d      	adds	r3, #13
 800364c:	227f      	movs	r2, #127	; 0x7f
 800364e:	701a      	strb	r2, [r3, #0]
		memcpy(crc_frame, &crc, 2);
		r->frame[13 + 1] = crc_frame[0];
		r->frame[13 + 2] = crc_frame[1];
		r->frame[13 + 3] = LTEL_END_MARK;
	}
}
 8003650:	e0c4      	b.n	80037dc <rs485_set_query_frame+0x2d6>
	} else if (module->function == POWER_AMPLIFIER) {
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	7e5b      	ldrb	r3, [r3, #25]
 8003656:	2b09      	cmp	r3, #9
 8003658:	d000      	beq.n	800365c <rs485_set_query_frame+0x156>
 800365a:	e0bf      	b.n	80037dc <rs485_set_query_frame+0x2d6>
		switch (r->cmd) {
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b11      	cmp	r3, #17
 8003662:	d002      	beq.n	800366a <rs485_set_query_frame+0x164>
 8003664:	2b12      	cmp	r3, #18
 8003666:	d04a      	beq.n	80036fe <rs485_set_query_frame+0x1f8>
 8003668:	e092      	b.n	8003790 <rs485_set_query_frame+0x28a>
			r->frame[4] = 0x00;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	3304      	adds	r3, #4
 8003670:	2200      	movs	r2, #0
 8003672:	701a      	strb	r2, [r3, #0]
			r->frame[5] = 0x08;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	3305      	adds	r3, #5
 800367a:	2208      	movs	r2, #8
 800367c:	701a      	strb	r2, [r3, #0]
			r->frame[6] = module->state;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	7a1a      	ldrb	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	3306      	adds	r3, #6
 8003688:	701a      	strb	r2, [r3, #0]
			r->frame[7] = 0x00;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	3307      	adds	r3, #7
 8003690:	2200      	movs	r2, #0
 8003692:	701a      	strb	r2, [r3, #0]
			r->frame[8] = module->temperature;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	3308      	adds	r3, #8
 800369e:	001c      	movs	r4, r3
 80036a0:	1c10      	adds	r0, r2, #0
 80036a2:	f7fc fee7 	bl	8000474 <__aeabi_f2uiz>
 80036a6:	0003      	movs	r3, r0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	7023      	strb	r3, [r4, #0]
			r->frame[9] = module->gain;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	3309      	adds	r3, #9
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	7852      	ldrb	r2, [r2, #1]
 80036b6:	701a      	strb	r2, [r3, #0]
			r->frame[10] = module->vswr;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	695a      	ldr	r2, [r3, #20]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	330a      	adds	r3, #10
 80036c2:	001c      	movs	r4, r3
 80036c4:	1c10      	adds	r0, r2, #0
 80036c6:	f7fc fed5 	bl	8000474 <__aeabi_f2uiz>
 80036ca:	0003      	movs	r3, r0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	7023      	strb	r3, [r4, #0]
			r->frame[11] = module->att;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	330b      	adds	r3, #11
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	7812      	ldrb	r2, [r2, #0]
 80036da:	701a      	strb	r2, [r3, #0]
			r->frame[12] = module->pout;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2202      	movs	r2, #2
 80036e0:	569a      	ldrsb	r2, [r3, r2]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	330c      	adds	r3, #12
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	701a      	strb	r2, [r3, #0]
			r->frame[13] = module->pin;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	2205      	movs	r2, #5
 80036f0:	569a      	ldrsb	r2, [r3, r2]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	330d      	adds	r3, #13
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	701a      	strb	r2, [r3, #0]
			break;
 80036fc:	e04c      	b.n	8003798 <rs485_set_query_frame+0x292>
			r->frame[4] = 0x00;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	3304      	adds	r3, #4
 8003704:	2200      	movs	r2, #0
 8003706:	701a      	strb	r2, [r3, #0]
			r->frame[5] = 0x08;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	3305      	adds	r3, #5
 800370e:	2208      	movs	r2, #8
 8003710:	701a      	strb	r2, [r3, #0]
			r->frame[6] = module->state;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	7a1a      	ldrb	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	3306      	adds	r3, #6
 800371c:	701a      	strb	r2, [r3, #0]
			r->frame[7] = 0x00;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	3307      	adds	r3, #7
 8003724:	2200      	movs	r2, #0
 8003726:	701a      	strb	r2, [r3, #0]
			r->frame[8] = module->temperature;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	3308      	adds	r3, #8
 8003732:	001c      	movs	r4, r3
 8003734:	1c10      	adds	r0, r2, #0
 8003736:	f7fc fe9d 	bl	8000474 <__aeabi_f2uiz>
 800373a:	0003      	movs	r3, r0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	7023      	strb	r3, [r4, #0]
			r->frame[9] = module->gain;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	3309      	adds	r3, #9
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	7852      	ldrb	r2, [r2, #1]
 800374a:	701a      	strb	r2, [r3, #0]
			r->frame[10] = module->vswr;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	330a      	adds	r3, #10
 8003756:	001c      	movs	r4, r3
 8003758:	1c10      	adds	r0, r2, #0
 800375a:	f7fc fe8b 	bl	8000474 <__aeabi_f2uiz>
 800375e:	0003      	movs	r3, r0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	7023      	strb	r3, [r4, #0]
			r->frame[11] = module->att;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	330b      	adds	r3, #11
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	7812      	ldrb	r2, [r2, #0]
 800376e:	701a      	strb	r2, [r3, #0]
			r->frame[12] = module->pout;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	2202      	movs	r2, #2
 8003774:	569a      	ldrsb	r2, [r3, r2]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	330c      	adds	r3, #12
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	701a      	strb	r2, [r3, #0]
			r->frame[13] = module->pin;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2205      	movs	r2, #5
 8003784:	569a      	ldrsb	r2, [r3, r2]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	330d      	adds	r3, #13
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	701a      	strb	r2, [r3, #0]
			r->frame[0] = 0;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	701a      	strb	r2, [r3, #0]
		crc = crc_get(&(r->frame[1]), 10);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	3301      	adds	r3, #1
 800379e:	210a      	movs	r1, #10
 80037a0:	0018      	movs	r0, r3
 80037a2:	f000 fb95 	bl	8003ed0 <crc_get>
 80037a6:	0003      	movs	r3, r0
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	200a      	movs	r0, #10
 80037ac:	183b      	adds	r3, r7, r0
 80037ae:	801a      	strh	r2, [r3, #0]
		memcpy(crc_frame, &crc, 2);
 80037b0:	210c      	movs	r1, #12
 80037b2:	187b      	adds	r3, r7, r1
 80037b4:	183a      	adds	r2, r7, r0
 80037b6:	8812      	ldrh	r2, [r2, #0]
 80037b8:	801a      	strh	r2, [r3, #0]
		r->frame[13 + 1] = crc_frame[0];
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	330e      	adds	r3, #14
 80037c0:	187a      	adds	r2, r7, r1
 80037c2:	7812      	ldrb	r2, [r2, #0]
 80037c4:	701a      	strb	r2, [r3, #0]
		r->frame[13 + 2] = crc_frame[1];
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	330f      	adds	r3, #15
 80037cc:	187a      	adds	r2, r7, r1
 80037ce:	7852      	ldrb	r2, [r2, #1]
 80037d0:	701a      	strb	r2, [r3, #0]
		r->frame[13 + 3] = LTEL_END_MARK;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	3310      	adds	r3, #16
 80037d8:	227f      	movs	r2, #127	; 0x7f
 80037da:	701a      	strb	r2, [r3, #0]
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	b005      	add	sp, #20
 80037e2:	bd90      	pop	{r4, r7, pc}

080037e4 <rs485_update_status_by_uart>:

void rs485_parameters_cmd_action(uint8_t *frame) {

}

void rs485_update_status_by_uart(RS485_t *rs485,UART1_t *uart1){
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]

	switch (rs485->status) {
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	7a1b      	ldrb	r3, [r3, #8]
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d858      	bhi.n	80038a8 <rs485_update_status_by_uart+0xc4>
 80037f6:	009a      	lsls	r2, r3, #2
 80037f8:	4b32      	ldr	r3, [pc, #200]	; (80038c4 <rs485_update_status_by_uart+0xe0>)
 80037fa:	18d3      	adds	r3, r2, r3
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	469f      	mov	pc, r3
	case DATA_OK:
		rs485->cmd = uart1->rx_buffer[3];
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3303      	adds	r3, #3
 8003806:	781a      	ldrb	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	701a      	strb	r2, [r3, #0]
		rs485->status = DONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2207      	movs	r2, #7
 8003810:	721a      	strb	r2, [r3, #8]
		break;
 8003812:	e052      	b.n	80038ba <rs485_update_status_by_uart+0xd6>
	case START_READING:
		rs485->status = WAITING;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2208      	movs	r2, #8
 8003818:	721a      	strb	r2, [r3, #8]
		if (uart1_clean_by_timeout(uart1, "START_READING"))
 800381a:	4a2b      	ldr	r2, [pc, #172]	; (80038c8 <rs485_update_status_by_uart+0xe4>)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	0011      	movs	r1, r2
 8003820:	0018      	movs	r0, r3
 8003822:	f000 f97f 	bl	8003b24 <uart1_clean_by_timeout>
 8003826:	1e03      	subs	r3, r0, #0
 8003828:	d046      	beq.n	80038b8 <rs485_update_status_by_uart+0xd4>
			rs485->status = DONE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2207      	movs	r2, #7
 800382e:	721a      	strb	r2, [r3, #8]
		break;
 8003830:	e042      	b.n	80038b8 <rs485_update_status_by_uart+0xd4>
	case VALID_FRAME:
		rs485->status = rs485_check_valid_module(uart1);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	0018      	movs	r0, r3
 8003836:	f7ff fe36 	bl	80034a6 <rs485_check_valid_module>
 800383a:	0003      	movs	r3, r0
 800383c:	001a      	movs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	721a      	strb	r2, [r3, #8]
		break;
 8003842:	e03a      	b.n	80038ba <rs485_update_status_by_uart+0xd6>
	case NOT_VALID_FRAME:
		// TODO
		uart1_clean_buffer(uart1);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	0018      	movs	r0, r3
 8003848:	f000 fb1e 	bl	8003e88 <uart1_clean_buffer>
		rs485->status = DONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2207      	movs	r2, #7
 8003850:	721a      	strb	r2, [r3, #8]
		break;
 8003852:	e032      	b.n	80038ba <rs485_update_status_by_uart+0xd6>
	case WRONG_MODULE_ID:
		// TODO
		uart1_clean_buffer(uart1);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	0018      	movs	r0, r3
 8003858:	f000 fb16 	bl	8003e88 <uart1_clean_buffer>
		rs485->status = DONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2207      	movs	r2, #7
 8003860:	721a      	strb	r2, [r3, #8]
		break;
 8003862:	e02a      	b.n	80038ba <rs485_update_status_by_uart+0xd6>
	case CRC_ERROR:
		// TODO add crc
		uart1_clean_buffer(uart1);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	0018      	movs	r0, r3
 8003868:	f000 fb0e 	bl	8003e88 <uart1_clean_buffer>
		break;
 800386c:	e025      	b.n	80038ba <rs485_update_status_by_uart+0xd6>
	case WAITING:
		rs485->status = rs485_check_frame(rs485, uart1);
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	0011      	movs	r1, r2
 8003874:	0018      	movs	r0, r3
 8003876:	f7ff fdf2 	bl	800345e <rs485_check_frame>
 800387a:	0003      	movs	r3, r0
 800387c:	001a      	movs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	721a      	strb	r2, [r3, #8]
		uart1_clean_by_timeout(uart1, "WAITING");
 8003882:	4a12      	ldr	r2, [pc, #72]	; (80038cc <rs485_update_status_by_uart+0xe8>)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	0011      	movs	r1, r2
 8003888:	0018      	movs	r0, r3
 800388a:	f000 f94b 	bl	8003b24 <uart1_clean_by_timeout>
		break;
 800388e:	e014      	b.n	80038ba <rs485_update_status_by_uart+0xd6>
	case DONE:
		uart1_send_str("DONE\r\n");
 8003890:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <rs485_update_status_by_uart+0xec>)
 8003892:	0018      	movs	r0, r3
 8003894:	f000 faae 	bl	8003df4 <uart1_send_str>
		uart1_clean_buffer(uart1);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	0018      	movs	r0, r3
 800389c:	f000 faf4 	bl	8003e88 <uart1_clean_buffer>
		rs485->status = WAITING;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2208      	movs	r2, #8
 80038a4:	721a      	strb	r2, [r3, #8]
		break;
 80038a6:	e008      	b.n	80038ba <rs485_update_status_by_uart+0xd6>
	default:
		rs485->status = DONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2207      	movs	r2, #7
 80038ac:	721a      	strb	r2, [r3, #8]
		uart1_clean_buffer(uart1);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	0018      	movs	r0, r3
 80038b2:	f000 fae9 	bl	8003e88 <uart1_clean_buffer>
		break;
 80038b6:	e000      	b.n	80038ba <rs485_update_status_by_uart+0xd6>
		break;
 80038b8:	46c0      	nop			; (mov r8, r8)
	}
}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	46bd      	mov	sp, r7
 80038be:	b002      	add	sp, #8
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	08006b04 	.word	0x08006b04
 80038c8:	080069b8 	.word	0x080069b8
 80038cc:	080069c8 	.word	0x080069c8
 80038d0:	080069d0 	.word	0x080069d0

080038d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038da:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <HAL_MspInit+0x44>)
 80038dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038de:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <HAL_MspInit+0x44>)
 80038e0:	2101      	movs	r1, #1
 80038e2:	430a      	orrs	r2, r1
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40
 80038e6:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <HAL_MspInit+0x44>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2201      	movs	r2, #1
 80038ec:	4013      	ands	r3, r2
 80038ee:	607b      	str	r3, [r7, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038f2:	4b09      	ldr	r3, [pc, #36]	; (8003918 <HAL_MspInit+0x44>)
 80038f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038f6:	4b08      	ldr	r3, [pc, #32]	; (8003918 <HAL_MspInit+0x44>)
 80038f8:	2180      	movs	r1, #128	; 0x80
 80038fa:	0549      	lsls	r1, r1, #21
 80038fc:	430a      	orrs	r2, r1
 80038fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8003900:	4b05      	ldr	r3, [pc, #20]	; (8003918 <HAL_MspInit+0x44>)
 8003902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003904:	2380      	movs	r3, #128	; 0x80
 8003906:	055b      	lsls	r3, r3, #21
 8003908:	4013      	ands	r3, r2
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	46bd      	mov	sp, r7
 8003912:	b002      	add	sp, #8
 8003914:	bd80      	pop	{r7, pc}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	40021000 	.word	0x40021000

0800391c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800391c:	b590      	push	{r4, r7, lr}
 800391e:	b091      	sub	sp, #68	; 0x44
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003924:	232c      	movs	r3, #44	; 0x2c
 8003926:	18fb      	adds	r3, r7, r3
 8003928:	0018      	movs	r0, r3
 800392a:	2314      	movs	r3, #20
 800392c:	001a      	movs	r2, r3
 800392e:	2100      	movs	r1, #0
 8003930:	f002 faac 	bl	8005e8c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003934:	2414      	movs	r4, #20
 8003936:	193b      	adds	r3, r7, r4
 8003938:	0018      	movs	r0, r3
 800393a:	2318      	movs	r3, #24
 800393c:	001a      	movs	r2, r3
 800393e:	2100      	movs	r1, #0
 8003940:	f002 faa4 	bl	8005e8c <memset>
  if(hadc->Instance==ADC1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a35      	ldr	r2, [pc, #212]	; (8003a20 <HAL_ADC_MspInit+0x104>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d164      	bne.n	8003a18 <HAL_ADC_MspInit+0xfc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800394e:	193b      	adds	r3, r7, r4
 8003950:	2280      	movs	r2, #128	; 0x80
 8003952:	01d2      	lsls	r2, r2, #7
 8003954:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003956:	193b      	adds	r3, r7, r4
 8003958:	2200      	movs	r2, #0
 800395a:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800395c:	193b      	adds	r3, r7, r4
 800395e:	0018      	movs	r0, r3
 8003960:	f002 f930 	bl	8005bc4 <HAL_RCCEx_PeriphCLKConfig>
 8003964:	1e03      	subs	r3, r0, #0
 8003966:	d001      	beq.n	800396c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003968:	f7ff fca4 	bl	80032b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800396c:	4b2d      	ldr	r3, [pc, #180]	; (8003a24 <HAL_ADC_MspInit+0x108>)
 800396e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003970:	4b2c      	ldr	r3, [pc, #176]	; (8003a24 <HAL_ADC_MspInit+0x108>)
 8003972:	2180      	movs	r1, #128	; 0x80
 8003974:	0349      	lsls	r1, r1, #13
 8003976:	430a      	orrs	r2, r1
 8003978:	641a      	str	r2, [r3, #64]	; 0x40
 800397a:	4b2a      	ldr	r3, [pc, #168]	; (8003a24 <HAL_ADC_MspInit+0x108>)
 800397c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800397e:	2380      	movs	r3, #128	; 0x80
 8003980:	035b      	lsls	r3, r3, #13
 8003982:	4013      	ands	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003988:	4b26      	ldr	r3, [pc, #152]	; (8003a24 <HAL_ADC_MspInit+0x108>)
 800398a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800398c:	4b25      	ldr	r3, [pc, #148]	; (8003a24 <HAL_ADC_MspInit+0x108>)
 800398e:	2101      	movs	r1, #1
 8003990:	430a      	orrs	r2, r1
 8003992:	635a      	str	r2, [r3, #52]	; 0x34
 8003994:	4b23      	ldr	r3, [pc, #140]	; (8003a24 <HAL_ADC_MspInit+0x108>)
 8003996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003998:	2201      	movs	r2, #1
 800399a:	4013      	ands	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = AGC_LEVEL_Pin|CURR_Pin|V_IN_SAMPLE_Pin|SWR_Pin
 80039a0:	212c      	movs	r1, #44	; 0x2c
 80039a2:	187b      	adds	r3, r7, r1
 80039a4:	2277      	movs	r2, #119	; 0x77
 80039a6:	601a      	str	r2, [r3, #0]
                          |P_OUT_Pin|P_IN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039a8:	187b      	adds	r3, r7, r1
 80039aa:	2203      	movs	r2, #3
 80039ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ae:	187b      	adds	r3, r7, r1
 80039b0:	2200      	movs	r2, #0
 80039b2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b4:	187a      	adds	r2, r7, r1
 80039b6:	23a0      	movs	r3, #160	; 0xa0
 80039b8:	05db      	lsls	r3, r3, #23
 80039ba:	0011      	movs	r1, r2
 80039bc:	0018      	movs	r0, r3
 80039be:	f001 faa5 	bl	8004f0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80039c2:	4b19      	ldr	r3, [pc, #100]	; (8003a28 <HAL_ADC_MspInit+0x10c>)
 80039c4:	4a19      	ldr	r2, [pc, #100]	; (8003a2c <HAL_ADC_MspInit+0x110>)
 80039c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80039c8:	4b17      	ldr	r3, [pc, #92]	; (8003a28 <HAL_ADC_MspInit+0x10c>)
 80039ca:	2205      	movs	r2, #5
 80039cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039ce:	4b16      	ldr	r3, [pc, #88]	; (8003a28 <HAL_ADC_MspInit+0x10c>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80039d4:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <HAL_ADC_MspInit+0x10c>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80039da:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <HAL_ADC_MspInit+0x10c>)
 80039dc:	2280      	movs	r2, #128	; 0x80
 80039de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <HAL_ADC_MspInit+0x10c>)
 80039e2:	2280      	movs	r2, #128	; 0x80
 80039e4:	0052      	lsls	r2, r2, #1
 80039e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80039e8:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <HAL_ADC_MspInit+0x10c>)
 80039ea:	2280      	movs	r2, #128	; 0x80
 80039ec:	00d2      	lsls	r2, r2, #3
 80039ee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80039f0:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <HAL_ADC_MspInit+0x10c>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80039f6:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <HAL_ADC_MspInit+0x10c>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80039fc:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <HAL_ADC_MspInit+0x10c>)
 80039fe:	0018      	movs	r0, r3
 8003a00:	f001 f8f8 	bl	8004bf4 <HAL_DMA_Init>
 8003a04:	1e03      	subs	r3, r0, #0
 8003a06:	d001      	beq.n	8003a0c <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8003a08:	f7ff fc54 	bl	80032b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a06      	ldr	r2, [pc, #24]	; (8003a28 <HAL_ADC_MspInit+0x10c>)
 8003a10:	651a      	str	r2, [r3, #80]	; 0x50
 8003a12:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <HAL_ADC_MspInit+0x10c>)
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003a18:	46c0      	nop			; (mov r8, r8)
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b011      	add	sp, #68	; 0x44
 8003a1e:	bd90      	pop	{r4, r7, pc}
 8003a20:	40012400 	.word	0x40012400
 8003a24:	40021000 	.word	0x40021000
 8003a28:	200000f0 	.word	0x200000f0
 8003a2c:	40020008 	.word	0x40020008

08003a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a34:	e7fe      	b.n	8003a34 <NMI_Handler+0x4>

08003a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a3a:	e7fe      	b.n	8003a3a <HardFault_Handler+0x4>

08003a3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a54:	f000 fb32 	bl	80040bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a58:	46c0      	nop			; (mov r8, r8)
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <DMA1_Channel1_IRQHandler+0x14>)
 8003a66:	0018      	movs	r0, r3
 8003a68:	f001 f94e 	bl	8004d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003a6c:	46c0      	nop			; (mov r8, r8)
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	200000f0 	.word	0x200000f0

08003a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a80:	4a14      	ldr	r2, [pc, #80]	; (8003ad4 <_sbrk+0x5c>)
 8003a82:	4b15      	ldr	r3, [pc, #84]	; (8003ad8 <_sbrk+0x60>)
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a8c:	4b13      	ldr	r3, [pc, #76]	; (8003adc <_sbrk+0x64>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d102      	bne.n	8003a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a94:	4b11      	ldr	r3, [pc, #68]	; (8003adc <_sbrk+0x64>)
 8003a96:	4a12      	ldr	r2, [pc, #72]	; (8003ae0 <_sbrk+0x68>)
 8003a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a9a:	4b10      	ldr	r3, [pc, #64]	; (8003adc <_sbrk+0x64>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	18d3      	adds	r3, r2, r3
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d207      	bcs.n	8003ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003aa8:	f002 f9b2 	bl	8005e10 <__errno>
 8003aac:	0003      	movs	r3, r0
 8003aae:	220c      	movs	r2, #12
 8003ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	425b      	negs	r3, r3
 8003ab6:	e009      	b.n	8003acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ab8:	4b08      	ldr	r3, [pc, #32]	; (8003adc <_sbrk+0x64>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003abe:	4b07      	ldr	r3, [pc, #28]	; (8003adc <_sbrk+0x64>)
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	18d2      	adds	r2, r2, r3
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <_sbrk+0x64>)
 8003ac8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003aca:	68fb      	ldr	r3, [r7, #12]
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b006      	add	sp, #24
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20002000 	.word	0x20002000
 8003ad8:	00000400 	.word	0x00000400
 8003adc:	200002ac 	.word	0x200002ac
 8003ae0:	200002c8 	.word	0x200002c8

08003ae4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ae8:	46c0      	nop			; (mov r8, r8)
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <__NVIC_EnableIRQ>:
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	0002      	movs	r2, r0
 8003af8:	1dfb      	adds	r3, r7, #7
 8003afa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003afc:	1dfb      	adds	r3, r7, #7
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b7f      	cmp	r3, #127	; 0x7f
 8003b02:	d809      	bhi.n	8003b18 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b04:	1dfb      	adds	r3, r7, #7
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	001a      	movs	r2, r3
 8003b0a:	231f      	movs	r3, #31
 8003b0c:	401a      	ands	r2, r3
 8003b0e:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <__NVIC_EnableIRQ+0x30>)
 8003b10:	2101      	movs	r1, #1
 8003b12:	4091      	lsls	r1, r2
 8003b14:	000a      	movs	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]
}
 8003b18:	46c0      	nop			; (mov r8, r8)
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b002      	add	sp, #8
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	e000e100 	.word	0xe000e100

08003b24 <uart1_clean_by_timeout>:
 *      Author: sigmadev
 */

#include <uart1.h>

uint8_t  uart1_clean_by_timeout(UART1_t* uart1,const char* str){
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
		if (HAL_GetTick() - uart1->timeout > SECONDS(5)) {
 8003b2e:	f000 fad7 	bl	80040e0 <HAL_GetTick>
 8003b32:	0002      	movs	r2, r0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	4a0f      	ldr	r2, [pc, #60]	; (8003b78 <uart1_clean_by_timeout+0x54>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d916      	bls.n	8003b6e <uart1_clean_by_timeout+0x4a>
			uart1_send_str((char*)str);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	0018      	movs	r0, r3
 8003b44:	f000 f956 	bl	8003df4 <uart1_send_str>
			uart1_send_str("-TIMEOUT\r\n");
 8003b48:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <uart1_clean_by_timeout+0x58>)
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f000 f952 	bl	8003df4 <uart1_send_str>
			if(strlen(str)>0)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <uart1_clean_by_timeout+0x3c>
				uart1_clean_buffer(uart1);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f000 f994 	bl	8003e88 <uart1_clean_buffer>
			uart1->timeout = HAL_GetTick();
 8003b60:	f000 fabe 	bl	80040e0 <HAL_GetTick>
 8003b64:	0002      	movs	r2, r0
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	60da      	str	r2, [r3, #12]
			return 1;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <uart1_clean_by_timeout+0x4c>
		}
		return 0;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	0018      	movs	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b002      	add	sp, #8
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	00001388 	.word	0x00001388
 8003b7c:	080069d8 	.word	0x080069d8

08003b80 <uart1_gpio_init>:

void uart1_gpio_init() {
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
	/**USART1 GPIO Configuration
	 PB6     ------> USART1_TX
	 PB7     ------> USART1_RX
	 */

	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE6_0);
 8003b84:	4b26      	ldr	r3, [pc, #152]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4b25      	ldr	r3, [pc, #148]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003b8a:	4926      	ldr	r1, [pc, #152]	; (8003c24 <uart1_gpio_init+0xa4>)
 8003b8c:	400a      	ands	r2, r1
 8003b8e:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE6_1);
 8003b90:	4b23      	ldr	r3, [pc, #140]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4b22      	ldr	r3, [pc, #136]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003b96:	2180      	movs	r1, #128	; 0x80
 8003b98:	0189      	lsls	r1, r1, #6
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]

	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE7_0);
 8003b9e:	4b20      	ldr	r3, [pc, #128]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	4b1f      	ldr	r3, [pc, #124]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003ba4:	4920      	ldr	r1, [pc, #128]	; (8003c28 <uart1_gpio_init+0xa8>)
 8003ba6:	400a      	ands	r2, r1
 8003ba8:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE7_1);
 8003baa:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4b1c      	ldr	r3, [pc, #112]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003bb0:	2180      	movs	r1, #128	; 0x80
 8003bb2:	0209      	lsls	r1, r1, #8
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	601a      	str	r2, [r3, #0]

	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6_0);
 8003bb8:	4b19      	ldr	r3, [pc, #100]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003bba:	6a1a      	ldr	r2, [r3, #32]
 8003bbc:	4b18      	ldr	r3, [pc, #96]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003bbe:	491b      	ldr	r1, [pc, #108]	; (8003c2c <uart1_gpio_init+0xac>)
 8003bc0:	400a      	ands	r2, r1
 8003bc2:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6_1);
 8003bc4:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003bc6:	6a1a      	ldr	r2, [r3, #32]
 8003bc8:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003bca:	4919      	ldr	r1, [pc, #100]	; (8003c30 <uart1_gpio_init+0xb0>)
 8003bcc:	400a      	ands	r2, r1
 8003bce:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6_2);
 8003bd0:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003bd2:	6a1a      	ldr	r2, [r3, #32]
 8003bd4:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003bd6:	4917      	ldr	r1, [pc, #92]	; (8003c34 <uart1_gpio_init+0xb4>)
 8003bd8:	400a      	ands	r2, r1
 8003bda:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6_3);
 8003bdc:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003bde:	6a1a      	ldr	r2, [r3, #32]
 8003be0:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003be2:	4915      	ldr	r1, [pc, #84]	; (8003c38 <uart1_gpio_init+0xb8>)
 8003be4:	400a      	ands	r2, r1
 8003be6:	621a      	str	r2, [r3, #32]

	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7_0);
 8003be8:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003bea:	6a1a      	ldr	r2, [r3, #32]
 8003bec:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003bee:	4913      	ldr	r1, [pc, #76]	; (8003c3c <uart1_gpio_init+0xbc>)
 8003bf0:	400a      	ands	r2, r1
 8003bf2:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7_1);
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003bf6:	6a1a      	ldr	r2, [r3, #32]
 8003bf8:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003bfa:	4911      	ldr	r1, [pc, #68]	; (8003c40 <uart1_gpio_init+0xc0>)
 8003bfc:	400a      	ands	r2, r1
 8003bfe:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7_2);
 8003c00:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003c02:	6a1a      	ldr	r2, [r3, #32]
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003c06:	490f      	ldr	r1, [pc, #60]	; (8003c44 <uart1_gpio_init+0xc4>)
 8003c08:	400a      	ands	r2, r1
 8003c0a:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7_3);
 8003c0c:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003c0e:	6a1a      	ldr	r2, [r3, #32]
 8003c10:	4b03      	ldr	r3, [pc, #12]	; (8003c20 <uart1_gpio_init+0xa0>)
 8003c12:	0052      	lsls	r2, r2, #1
 8003c14:	0852      	lsrs	r2, r2, #1
 8003c16:	621a      	str	r2, [r3, #32]
}
 8003c18:	46c0      	nop			; (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	50000400 	.word	0x50000400
 8003c24:	ffffefff 	.word	0xffffefff
 8003c28:	ffffbfff 	.word	0xffffbfff
 8003c2c:	feffffff 	.word	0xfeffffff
 8003c30:	fdffffff 	.word	0xfdffffff
 8003c34:	fbffffff 	.word	0xfbffffff
 8003c38:	f7ffffff 	.word	0xf7ffffff
 8003c3c:	efffffff 	.word	0xefffffff
 8003c40:	dfffffff 	.word	0xdfffffff
 8003c44:	bfffffff 	.word	0xbfffffff

08003c48 <uart1_init>:

void uart1_init(uint32_t pclk, uint32_t baud_rate, UART1_t *u) {
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
	uint32_t br_value = 0;
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]

	uart1_gpio_init();
 8003c58:	f7ff ff92 	bl	8003b80 <uart1_gpio_init>

	/*enable clock access to USART1 */
	SET_BIT(RCC->APBENR2, RCC_APBENR2_USART1EN);
 8003c5c:	4b25      	ldr	r3, [pc, #148]	; (8003cf4 <uart1_init+0xac>)
 8003c5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c60:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <uart1_init+0xac>)
 8003c62:	2180      	movs	r1, #128	; 0x80
 8003c64:	01c9      	lsls	r1, r1, #7
 8003c66:	430a      	orrs	r2, r1
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40
	if (pclk == 16000000) {
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4a22      	ldr	r2, [pc, #136]	; (8003cf8 <uart1_init+0xb0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d10b      	bne.n	8003c8a <uart1_init+0x42>
		/*set HSI 16 CLK */
		CLEAR_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_0);
 8003c72:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <uart1_init+0xac>)
 8003c74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c76:	4b1f      	ldr	r3, [pc, #124]	; (8003cf4 <uart1_init+0xac>)
 8003c78:	2101      	movs	r1, #1
 8003c7a:	438a      	bics	r2, r1
 8003c7c:	655a      	str	r2, [r3, #84]	; 0x54
		SET_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_1);
 8003c7e:	4b1d      	ldr	r3, [pc, #116]	; (8003cf4 <uart1_init+0xac>)
 8003c80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c82:	4b1c      	ldr	r3, [pc, #112]	; (8003cf4 <uart1_init+0xac>)
 8003c84:	2102      	movs	r1, #2
 8003c86:	430a      	orrs	r2, r1
 8003c88:	655a      	str	r2, [r3, #84]	; 0x54
	}
	//MODIFY_REG(USART1->PRESC,USART_PRESC_PRESCALER,0x0010);
	/* set baud rate */
	br_value = (pclk) / baud_rate;
 8003c8a:	68b9      	ldr	r1, [r7, #8]
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f7fc fa41 	bl	8000114 <__udivsi3>
 8003c92:	0003      	movs	r3, r0
 8003c94:	617b      	str	r3, [r7, #20]
	USART1->BRR = (uint16_t) br_value;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	4b18      	ldr	r3, [pc, #96]	; (8003cfc <uart1_init+0xb4>)
 8003c9c:	60da      	str	r2, [r3, #12]
	/* transmitter enable*/
	USART1->CR1 = USART_CR1_TE | USART_CR1_RE;
 8003c9e:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <uart1_init+0xb4>)
 8003ca0:	220c      	movs	r2, #12
 8003ca2:	601a      	str	r2, [r3, #0]

	u->rx_buffer = (uint8_t*) malloc(RX_BUFFLEN);
 8003ca4:	2019      	movs	r0, #25
 8003ca6:	f002 f8dd 	bl	8005e64 <malloc>
 8003caa:	0003      	movs	r3, r0
 8003cac:	001a      	movs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	601a      	str	r2, [r3, #0]
	u->tx_buffer = (uint8_t*) malloc(TX_BUFFLEN);
 8003cb2:	2064      	movs	r0, #100	; 0x64
 8003cb4:	f002 f8d6 	bl	8005e64 <malloc>
 8003cb8:	0003      	movs	r3, r0
 8003cba:	001a      	movs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	605a      	str	r2, [r3, #4]
	u->rx_count = 0;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	721a      	strb	r2, [r3, #8]

	uart1_clean_buffer(u);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f000 f8dd 	bl	8003e88 <uart1_clean_buffer>

	/* enable FIFO */
	//SET_BIT(USART1->CR2, USART_CR1_FIFOEN);
	/* Enable interrupt */
	SET_BIT(USART1->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003cce:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <uart1_init+0xb4>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <uart1_init+0xb4>)
 8003cd4:	2120      	movs	r1, #32
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART1_IRQn);
 8003cda:	201b      	movs	r0, #27
 8003cdc:	f7ff ff08 	bl	8003af0 <__NVIC_EnableIRQ>
	SET_BIT(USART1->CR1, USART_CR1_UE);
 8003ce0:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <uart1_init+0xb4>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <uart1_init+0xb4>)
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]
}
 8003cec:	46c0      	nop			; (mov r8, r8)
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b006      	add	sp, #24
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	00f42400 	.word	0x00f42400
 8003cfc:	40013800 	.word	0x40013800

08003d00 <uart1_write>:
	/* set the destination buffer */
	/*set the source buffer */

}

void uart1_write(char ch) {
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	0002      	movs	r2, r0
 8003d08:	1dfb      	adds	r3, r7, #7
 8003d0a:	701a      	strb	r2, [r3, #0]
	SET_BIT(GPIOB->ODR, GPIO_ODR_OD5);
 8003d0c:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <uart1_write+0x4c>)
 8003d0e:	695a      	ldr	r2, [r3, #20]
 8003d10:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <uart1_write+0x4c>)
 8003d12:	2120      	movs	r1, #32
 8003d14:	430a      	orrs	r2, r1
 8003d16:	615a      	str	r2, [r3, #20]

	while (!READ_BIT(USART1->ISR, USART_ISR_TXE_TXFNF))
 8003d18:	46c0      	nop			; (mov r8, r8)
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	; (8003d50 <uart1_write+0x50>)
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	2280      	movs	r2, #128	; 0x80
 8003d20:	4013      	ands	r3, r2
 8003d22:	d0fa      	beq.n	8003d1a <uart1_write+0x1a>
		;
	USART1->TDR = (uint8_t) (ch & 0xFFU);
 8003d24:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <uart1_write+0x50>)
 8003d26:	1dfa      	adds	r2, r7, #7
 8003d28:	7812      	ldrb	r2, [r2, #0]
 8003d2a:	629a      	str	r2, [r3, #40]	; 0x28

	while (!READ_BIT(USART1->ISR, USART_ISR_TC))
 8003d2c:	46c0      	nop			; (mov r8, r8)
 8003d2e:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <uart1_write+0x50>)
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	2240      	movs	r2, #64	; 0x40
 8003d34:	4013      	ands	r3, r2
 8003d36:	d0fa      	beq.n	8003d2e <uart1_write+0x2e>
		;

	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_OD5);
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <uart1_write+0x4c>)
 8003d3a:	695a      	ldr	r2, [r3, #20]
 8003d3c:	4b03      	ldr	r3, [pc, #12]	; (8003d4c <uart1_write+0x4c>)
 8003d3e:	2120      	movs	r1, #32
 8003d40:	438a      	bics	r2, r1
 8003d42:	615a      	str	r2, [r3, #20]
}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b002      	add	sp, #8
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	50000400 	.word	0x50000400
 8003d50:	40013800 	.word	0x40013800

08003d54 <uart1_1byte_read>:
		}
		data[0] = USART1->RDR;
	}
}

uint8_t uart1_1byte_read(void) {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
	bool override = READ_BIT(USART1->ISR, USART_ISR_ORE);
 8003d5a:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <uart1_1byte_read+0x5c>)
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	2208      	movs	r2, #8
 8003d60:	401a      	ands	r2, r3
 8003d62:	1dfb      	adds	r3, r7, #7
 8003d64:	1e51      	subs	r1, r2, #1
 8003d66:	418a      	sbcs	r2, r1
 8003d68:	701a      	strb	r2, [r3, #0]
	bool data_present = READ_BIT(USART1->ISR, USART_ISR_RXNE_RXFNE);
 8003d6a:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <uart1_1byte_read+0x5c>)
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	401a      	ands	r2, r3
 8003d72:	1dbb      	adds	r3, r7, #6
 8003d74:	1e51      	subs	r1, r2, #1
 8003d76:	418a      	sbcs	r2, r1
 8003d78:	701a      	strb	r2, [r3, #0]
//	bool busy = READ_BIT(USART1->ISR, USART_ISR_BUSY);
	if ((data_present || override)) {
 8003d7a:	1dbb      	adds	r3, r7, #6
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d103      	bne.n	8003d8a <uart1_1byte_read+0x36>
 8003d82:	1dfb      	adds	r3, r7, #7
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00d      	beq.n	8003da6 <uart1_1byte_read+0x52>
		if (override)
 8003d8a:	1dfb      	adds	r3, r7, #7
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <uart1_1byte_read+0x4a>
			SET_BIT(USART1->ICR, USART_ICR_ORECF);
 8003d92:	4b07      	ldr	r3, [pc, #28]	; (8003db0 <uart1_1byte_read+0x5c>)
 8003d94:	6a1a      	ldr	r2, [r3, #32]
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <uart1_1byte_read+0x5c>)
 8003d98:	2108      	movs	r1, #8
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	621a      	str	r2, [r3, #32]
		return USART1->RDR;
 8003d9e:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <uart1_1byte_read+0x5c>)
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	e000      	b.n	8003da8 <uart1_1byte_read+0x54>
	} else
		return '\0';
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	0018      	movs	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b002      	add	sp, #8
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40013800 	.word	0x40013800

08003db4 <uart1_read_to_frame>:

void  uart1_read_to_frame(UART1_t *u) {
 8003db4:	b590      	push	{r4, r7, lr}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
	if (u->rx_count >= RX_BUFFLEN) {
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	7a1b      	ldrb	r3, [r3, #8]
 8003dc0:	2b18      	cmp	r3, #24
 8003dc2:	d906      	bls.n	8003dd2 <uart1_read_to_frame+0x1e>
		uart1_clean_buffer(u);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f000 f85e 	bl	8003e88 <uart1_clean_buffer>
		u->rx_count = 0;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	721a      	strb	r2, [r3, #8]
	}
	u->rx_buffer[u->rx_count++] = uart1_1byte_read();
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	7a1b      	ldrb	r3, [r3, #8]
 8003dda:	1c59      	adds	r1, r3, #1
 8003ddc:	b2c8      	uxtb	r0, r1
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	7208      	strb	r0, [r1, #8]
 8003de2:	18d4      	adds	r4, r2, r3
 8003de4:	f7ff ffb6 	bl	8003d54 <uart1_1byte_read>
 8003de8:	0003      	movs	r3, r0
 8003dea:	7023      	strb	r3, [r4, #0]
}
 8003dec:	46c0      	nop			; (mov r8, r8)
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b003      	add	sp, #12
 8003df2:	bd90      	pop	{r4, r7, pc}

08003df4 <uart1_send_str>:

void uart1_send_str(char *str) {
 8003df4:	b590      	push	{r4, r7, lr}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; str[i] != '\0'; i++)
 8003dfc:	230f      	movs	r3, #15
 8003dfe:	18fb      	adds	r3, r7, r3
 8003e00:	2200      	movs	r2, #0
 8003e02:	701a      	strb	r2, [r3, #0]
 8003e04:	e00d      	b.n	8003e22 <uart1_send_str+0x2e>
		uart1_write(str[i]);
 8003e06:	240f      	movs	r4, #15
 8003e08:	193b      	adds	r3, r7, r4
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	18d3      	adds	r3, r2, r3
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	0018      	movs	r0, r3
 8003e14:	f7ff ff74 	bl	8003d00 <uart1_write>
	for (i = 0; str[i] != '\0'; i++)
 8003e18:	193b      	adds	r3, r7, r4
 8003e1a:	781a      	ldrb	r2, [r3, #0]
 8003e1c:	193b      	adds	r3, r7, r4
 8003e1e:	3201      	adds	r2, #1
 8003e20:	701a      	strb	r2, [r3, #0]
 8003e22:	230f      	movs	r3, #15
 8003e24:	18fb      	adds	r3, r7, r3
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	18d3      	adds	r3, r2, r3
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1e9      	bne.n	8003e06 <uart1_send_str+0x12>
}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	46c0      	nop			; (mov r8, r8)
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b005      	add	sp, #20
 8003e3a:	bd90      	pop	{r4, r7, pc}

08003e3c <uart1_send_frame>:

void uart1_send_frame(char *str, uint8_t len) {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	000a      	movs	r2, r1
 8003e46:	1cfb      	adds	r3, r7, #3
 8003e48:	701a      	strb	r2, [r3, #0]

	if (len > 0) {
 8003e4a:	1cfb      	adds	r3, r7, #3
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d016      	beq.n	8003e80 <uart1_send_frame+0x44>
		for (int i = 0; i < len; i++){
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	e00e      	b.n	8003e76 <uart1_send_frame+0x3a>
			uart1_write(str[i]);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	18d3      	adds	r3, r2, r3
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	0018      	movs	r0, r3
 8003e62:	f7ff ff4d 	bl	8003d00 <uart1_write>
			str[i] = (char) '\0';
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	18d3      	adds	r3, r2, r3
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len; i++){
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3301      	adds	r3, #1
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	1cfb      	adds	r3, r7, #3
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	dbeb      	blt.n	8003e58 <uart1_send_frame+0x1c>
		}
	}
}
 8003e80:	46c0      	nop			; (mov r8, r8)
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b004      	add	sp, #16
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <uart1_clean_buffer>:

void uart1_clean_buffer(UART1_t *u) {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
	u->rx_count = 0;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	721a      	strb	r2, [r3, #8]
	if (TX_BUFFLEN > RX_BUFFLEN) {
		for (int i = 0; i < TX_BUFFLEN; i++) {
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	e011      	b.n	8003ec0 <uart1_clean_buffer+0x38>
			if (i < RX_BUFFLEN)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b18      	cmp	r3, #24
 8003ea0:	dc05      	bgt.n	8003eae <uart1_clean_buffer+0x26>
				u->rx_buffer[i] = 0x00;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	18d3      	adds	r3, r2, r3
 8003eaa:	2200      	movs	r2, #0
 8003eac:	701a      	strb	r2, [r3, #0]
			u->tx_buffer[i] = 0x00;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	18d3      	adds	r3, r2, r3
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < TX_BUFFLEN; i++) {
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b63      	cmp	r3, #99	; 0x63
 8003ec4:	ddea      	ble.n	8003e9c <uart1_clean_buffer+0x14>
			if (i < TX_BUFFLEN)
				u->tx_buffer[i] = 0x00;
			u->rx_buffer[i] = 0x00;
		}
	}
}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	46c0      	nop			; (mov r8, r8)
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	b004      	add	sp, #16
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <crc_get>:
#include "utils.h"

uint16_t crc_get(uint8_t* buffer, uint8_t buff_len) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	000a      	movs	r2, r1
 8003eda:	1cfb      	adds	r3, r7, #3
 8003edc:	701a      	strb	r2, [r3, #0]
	uint8_t b;
	uint8_t i;
	uint16_t generator = 0x1021; //divisor is 16bit
 8003ede:	230a      	movs	r3, #10
 8003ee0:	18fb      	adds	r3, r7, r3
 8003ee2:	4a2b      	ldr	r2, [pc, #172]	; (8003f90 <crc_get+0xc0>)
 8003ee4:	801a      	strh	r2, [r3, #0]
	uint16_t crc = 0;			 // CRC value is 16bit
 8003ee6:	230c      	movs	r3, #12
 8003ee8:	18fb      	adds	r3, r7, r3
 8003eea:	2200      	movs	r2, #0
 8003eec:	801a      	strh	r2, [r3, #0]

	for (b = 0; b < buff_len; b++) {
 8003eee:	230f      	movs	r3, #15
 8003ef0:	18fb      	adds	r3, r7, r3
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	e03d      	b.n	8003f74 <crc_get+0xa4>
		crc ^= ((uint16_t) (buffer[b] << 8)); // move byte into MSB of 16bit CRC
 8003ef8:	230f      	movs	r3, #15
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	18d3      	adds	r3, r2, r3
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	b299      	uxth	r1, r3
 8003f0a:	220c      	movs	r2, #12
 8003f0c:	18bb      	adds	r3, r7, r2
 8003f0e:	18ba      	adds	r2, r7, r2
 8003f10:	8812      	ldrh	r2, [r2, #0]
 8003f12:	404a      	eors	r2, r1
 8003f14:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 8; i++) {
 8003f16:	230e      	movs	r3, #14
 8003f18:	18fb      	adds	r3, r7, r3
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	e01e      	b.n	8003f5e <crc_get+0x8e>
			if ((crc & 0x8000) != 0) // test for MSB = bit 15
 8003f20:	210c      	movs	r1, #12
 8003f22:	187b      	adds	r3, r7, r1
 8003f24:	2200      	movs	r2, #0
 8003f26:	5e9b      	ldrsh	r3, [r3, r2]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	da0c      	bge.n	8003f46 <crc_get+0x76>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 8003f2c:	187b      	adds	r3, r7, r1
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	b21a      	sxth	r2, r3
 8003f34:	230a      	movs	r3, #10
 8003f36:	18fb      	adds	r3, r7, r3
 8003f38:	2000      	movs	r0, #0
 8003f3a:	5e1b      	ldrsh	r3, [r3, r0]
 8003f3c:	4053      	eors	r3, r2
 8003f3e:	b21a      	sxth	r2, r3
 8003f40:	187b      	adds	r3, r7, r1
 8003f42:	801a      	strh	r2, [r3, #0]
 8003f44:	e005      	b.n	8003f52 <crc_get+0x82>
			else
				crc <<= 1;
 8003f46:	230c      	movs	r3, #12
 8003f48:	18fa      	adds	r2, r7, r3
 8003f4a:	18fb      	adds	r3, r7, r3
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	18db      	adds	r3, r3, r3
 8003f50:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
 8003f52:	210e      	movs	r1, #14
 8003f54:	187b      	adds	r3, r7, r1
 8003f56:	781a      	ldrb	r2, [r3, #0]
 8003f58:	187b      	adds	r3, r7, r1
 8003f5a:	3201      	adds	r2, #1
 8003f5c:	701a      	strb	r2, [r3, #0]
 8003f5e:	230e      	movs	r3, #14
 8003f60:	18fb      	adds	r3, r7, r3
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b07      	cmp	r3, #7
 8003f66:	d9db      	bls.n	8003f20 <crc_get+0x50>
	for (b = 0; b < buff_len; b++) {
 8003f68:	210f      	movs	r1, #15
 8003f6a:	187b      	adds	r3, r7, r1
 8003f6c:	781a      	ldrb	r2, [r3, #0]
 8003f6e:	187b      	adds	r3, r7, r1
 8003f70:	3201      	adds	r2, #1
 8003f72:	701a      	strb	r2, [r3, #0]
 8003f74:	230f      	movs	r3, #15
 8003f76:	18fa      	adds	r2, r7, r3
 8003f78:	1cfb      	adds	r3, r7, #3
 8003f7a:	7812      	ldrb	r2, [r2, #0]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d3ba      	bcc.n	8003ef8 <crc_get+0x28>
		}
	}
	return crc;
 8003f82:	230c      	movs	r3, #12
 8003f84:	18fb      	adds	r3, r7, r3
 8003f86:	881b      	ldrh	r3, [r3, #0]
}
 8003f88:	0018      	movs	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	b004      	add	sp, #16
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	00001021 	.word	0x00001021

08003f94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003f94:	480d      	ldr	r0, [pc, #52]	; (8003fcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003f96:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f98:	f7ff fda4 	bl	8003ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f9c:	480c      	ldr	r0, [pc, #48]	; (8003fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f9e:	490d      	ldr	r1, [pc, #52]	; (8003fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003fa0:	4a0d      	ldr	r2, [pc, #52]	; (8003fd8 <LoopForever+0xe>)
  movs r3, #0
 8003fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fa4:	e002      	b.n	8003fac <LoopCopyDataInit>

08003fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003faa:	3304      	adds	r3, #4

08003fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fb0:	d3f9      	bcc.n	8003fa6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003fb4:	4c0a      	ldr	r4, [pc, #40]	; (8003fe0 <LoopForever+0x16>)
  movs r3, #0
 8003fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fb8:	e001      	b.n	8003fbe <LoopFillZerobss>

08003fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fbc:	3204      	adds	r2, #4

08003fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fc0:	d3fb      	bcc.n	8003fba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003fc2:	f001 ff2b 	bl	8005e1c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003fc6:	f7fe f9e5 	bl	8002394 <main>

08003fca <LoopForever>:

LoopForever:
  b LoopForever
 8003fca:	e7fe      	b.n	8003fca <LoopForever>
  ldr   r0, =_estack
 8003fcc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fd4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003fd8:	08006ba4 	.word	0x08006ba4
  ldr r2, =_sbss
 8003fdc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003fe0:	200002c4 	.word	0x200002c4

08003fe4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003fe4:	e7fe      	b.n	8003fe4 <ADC1_IRQHandler>
	...

08003fe8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003fee:	1dfb      	adds	r3, r7, #7
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_Init+0x3c>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <HAL_Init+0x3c>)
 8003ffa:	2180      	movs	r1, #128	; 0x80
 8003ffc:	0049      	lsls	r1, r1, #1
 8003ffe:	430a      	orrs	r2, r1
 8004000:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004002:	2003      	movs	r0, #3
 8004004:	f000 f810 	bl	8004028 <HAL_InitTick>
 8004008:	1e03      	subs	r3, r0, #0
 800400a:	d003      	beq.n	8004014 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800400c:	1dfb      	adds	r3, r7, #7
 800400e:	2201      	movs	r2, #1
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	e001      	b.n	8004018 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004014:	f7ff fc5e 	bl	80038d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004018:	1dfb      	adds	r3, r7, #7
 800401a:	781b      	ldrb	r3, [r3, #0]
}
 800401c:	0018      	movs	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	b002      	add	sp, #8
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40022000 	.word	0x40022000

08004028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004028:	b590      	push	{r4, r7, lr}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004030:	230f      	movs	r3, #15
 8004032:	18fb      	adds	r3, r7, r3
 8004034:	2200      	movs	r2, #0
 8004036:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004038:	4b1d      	ldr	r3, [pc, #116]	; (80040b0 <HAL_InitTick+0x88>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d02b      	beq.n	8004098 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004040:	4b1c      	ldr	r3, [pc, #112]	; (80040b4 <HAL_InitTick+0x8c>)
 8004042:	681c      	ldr	r4, [r3, #0]
 8004044:	4b1a      	ldr	r3, [pc, #104]	; (80040b0 <HAL_InitTick+0x88>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	0019      	movs	r1, r3
 800404a:	23fa      	movs	r3, #250	; 0xfa
 800404c:	0098      	lsls	r0, r3, #2
 800404e:	f7fc f861 	bl	8000114 <__udivsi3>
 8004052:	0003      	movs	r3, r0
 8004054:	0019      	movs	r1, r3
 8004056:	0020      	movs	r0, r4
 8004058:	f7fc f85c 	bl	8000114 <__udivsi3>
 800405c:	0003      	movs	r3, r0
 800405e:	0018      	movs	r0, r3
 8004060:	f000 fdbb 	bl	8004bda <HAL_SYSTICK_Config>
 8004064:	1e03      	subs	r3, r0, #0
 8004066:	d112      	bne.n	800408e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b03      	cmp	r3, #3
 800406c:	d80a      	bhi.n	8004084 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	2301      	movs	r3, #1
 8004072:	425b      	negs	r3, r3
 8004074:	2200      	movs	r2, #0
 8004076:	0018      	movs	r0, r3
 8004078:	f000 fd8a 	bl	8004b90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800407c:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <HAL_InitTick+0x90>)
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	e00d      	b.n	80040a0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004084:	230f      	movs	r3, #15
 8004086:	18fb      	adds	r3, r7, r3
 8004088:	2201      	movs	r2, #1
 800408a:	701a      	strb	r2, [r3, #0]
 800408c:	e008      	b.n	80040a0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800408e:	230f      	movs	r3, #15
 8004090:	18fb      	adds	r3, r7, r3
 8004092:	2201      	movs	r2, #1
 8004094:	701a      	strb	r2, [r3, #0]
 8004096:	e003      	b.n	80040a0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004098:	230f      	movs	r3, #15
 800409a:	18fb      	adds	r3, r7, r3
 800409c:	2201      	movs	r2, #1
 800409e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80040a0:	230f      	movs	r3, #15
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	781b      	ldrb	r3, [r3, #0]
}
 80040a6:	0018      	movs	r0, r3
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b005      	add	sp, #20
 80040ac:	bd90      	pop	{r4, r7, pc}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	20000008 	.word	0x20000008
 80040b4:	20000000 	.word	0x20000000
 80040b8:	20000004 	.word	0x20000004

080040bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80040c0:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <HAL_IncTick+0x1c>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	001a      	movs	r2, r3
 80040c6:	4b05      	ldr	r3, [pc, #20]	; (80040dc <HAL_IncTick+0x20>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	18d2      	adds	r2, r2, r3
 80040cc:	4b03      	ldr	r3, [pc, #12]	; (80040dc <HAL_IncTick+0x20>)
 80040ce:	601a      	str	r2, [r3, #0]
}
 80040d0:	46c0      	nop			; (mov r8, r8)
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	20000008 	.word	0x20000008
 80040dc:	200002b0 	.word	0x200002b0

080040e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  return uwTick;
 80040e4:	4b02      	ldr	r3, [pc, #8]	; (80040f0 <HAL_GetTick+0x10>)
 80040e6:	681b      	ldr	r3, [r3, #0]
}
 80040e8:	0018      	movs	r0, r3
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	200002b0 	.word	0x200002b0

080040f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040fc:	f7ff fff0 	bl	80040e0 <HAL_GetTick>
 8004100:	0003      	movs	r3, r0
 8004102:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3301      	adds	r3, #1
 800410c:	d005      	beq.n	800411a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800410e:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <HAL_Delay+0x44>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	001a      	movs	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	189b      	adds	r3, r3, r2
 8004118:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	f7ff ffe0 	bl	80040e0 <HAL_GetTick>
 8004120:	0002      	movs	r2, r0
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	429a      	cmp	r2, r3
 800412a:	d8f7      	bhi.n	800411c <HAL_Delay+0x28>
  {
  }
}
 800412c:	46c0      	nop			; (mov r8, r8)
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	46bd      	mov	sp, r7
 8004132:	b004      	add	sp, #16
 8004134:	bd80      	pop	{r7, pc}
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	20000008 	.word	0x20000008

0800413c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a05      	ldr	r2, [pc, #20]	; (8004160 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800414c:	401a      	ands	r2, r3
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	431a      	orrs	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	601a      	str	r2, [r3, #0]
}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	46bd      	mov	sp, r7
 800415a:	b002      	add	sp, #8
 800415c:	bd80      	pop	{r7, pc}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	fe3fffff 	.word	0xfe3fffff

08004164 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	23e0      	movs	r3, #224	; 0xe0
 8004172:	045b      	lsls	r3, r3, #17
 8004174:	4013      	ands	r3, r2
}
 8004176:	0018      	movs	r0, r3
 8004178:	46bd      	mov	sp, r7
 800417a:	b002      	add	sp, #8
 800417c:	bd80      	pop	{r7, pc}

0800417e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	2104      	movs	r1, #4
 8004192:	400a      	ands	r2, r1
 8004194:	2107      	movs	r1, #7
 8004196:	4091      	lsls	r1, r2
 8004198:	000a      	movs	r2, r1
 800419a:	43d2      	mvns	r2, r2
 800419c:	401a      	ands	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2104      	movs	r1, #4
 80041a2:	400b      	ands	r3, r1
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	4099      	lsls	r1, r3
 80041a8:	000b      	movs	r3, r1
 80041aa:	431a      	orrs	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80041b0:	46c0      	nop			; (mov r8, r8)
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b004      	add	sp, #16
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	2104      	movs	r1, #4
 80041ca:	400a      	ands	r2, r1
 80041cc:	2107      	movs	r1, #7
 80041ce:	4091      	lsls	r1, r2
 80041d0:	000a      	movs	r2, r1
 80041d2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2104      	movs	r1, #4
 80041d8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80041da:	40da      	lsrs	r2, r3
 80041dc:	0013      	movs	r3, r2
}
 80041de:	0018      	movs	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b002      	add	sp, #8
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	211f      	movs	r1, #31
 80041fa:	400a      	ands	r2, r1
 80041fc:	210f      	movs	r1, #15
 80041fe:	4091      	lsls	r1, r2
 8004200:	000a      	movs	r2, r1
 8004202:	43d2      	mvns	r2, r2
 8004204:	401a      	ands	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	0e9b      	lsrs	r3, r3, #26
 800420a:	210f      	movs	r1, #15
 800420c:	4019      	ands	r1, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	201f      	movs	r0, #31
 8004212:	4003      	ands	r3, r0
 8004214:	4099      	lsls	r1, r3
 8004216:	000b      	movs	r3, r1
 8004218:	431a      	orrs	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	46bd      	mov	sp, r7
 8004222:	b004      	add	sp, #16
 8004224:	bd80      	pop	{r7, pc}

08004226 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	035b      	lsls	r3, r3, #13
 8004238:	0b5b      	lsrs	r3, r3, #13
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004240:	46c0      	nop			; (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	b002      	add	sp, #8
 8004246:	bd80      	pop	{r7, pc}

08004248 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	0352      	lsls	r2, r2, #13
 800425a:	0b52      	lsrs	r2, r2, #13
 800425c:	43d2      	mvns	r2, r2
 800425e:	401a      	ands	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004264:	46c0      	nop			; (mov r8, r8)
 8004266:	46bd      	mov	sp, r7
 8004268:	b002      	add	sp, #8
 800426a:	bd80      	pop	{r7, pc}

0800426c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	0212      	lsls	r2, r2, #8
 8004280:	43d2      	mvns	r2, r2
 8004282:	401a      	ands	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	400b      	ands	r3, r1
 800428c:	4904      	ldr	r1, [pc, #16]	; (80042a0 <LL_ADC_SetChannelSamplingTime+0x34>)
 800428e:	400b      	ands	r3, r1
 8004290:	431a      	orrs	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	46bd      	mov	sp, r7
 800429a:	b004      	add	sp, #16
 800429c:	bd80      	pop	{r7, pc}
 800429e:	46c0      	nop			; (mov r8, r8)
 80042a0:	07ffff00 	.word	0x07ffff00

080042a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	4a05      	ldr	r2, [pc, #20]	; (80042c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	2280      	movs	r2, #128	; 0x80
 80042b6:	0552      	lsls	r2, r2, #21
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b002      	add	sp, #8
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	6fffffe8 	.word	0x6fffffe8

080042cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	2380      	movs	r3, #128	; 0x80
 80042da:	055b      	lsls	r3, r3, #21
 80042dc:	401a      	ands	r2, r3
 80042de:	2380      	movs	r3, #128	; 0x80
 80042e0:	055b      	lsls	r3, r3, #21
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d101      	bne.n	80042ea <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	0018      	movs	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	b002      	add	sp, #8
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	2201      	movs	r2, #1
 8004302:	4013      	ands	r3, r2
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <LL_ADC_IsEnabled+0x18>
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <LL_ADC_IsEnabled+0x1a>
 800430c:	2300      	movs	r3, #0
}
 800430e:	0018      	movs	r0, r3
 8004310:	46bd      	mov	sp, r7
 8004312:	b002      	add	sp, #8
 8004314:	bd80      	pop	{r7, pc}

08004316 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2204      	movs	r2, #4
 8004324:	4013      	ands	r3, r2
 8004326:	2b04      	cmp	r3, #4
 8004328:	d101      	bne.n	800432e <LL_ADC_REG_IsConversionOngoing+0x18>
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800432e:	2300      	movs	r3, #0
}
 8004330:	0018      	movs	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	b002      	add	sp, #8
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004340:	231f      	movs	r3, #31
 8004342:	18fb      	adds	r3, r7, r3
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8004348:	2300      	movs	r3, #0
 800434a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e17f      	b.n	800465e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10a      	bne.n	800437c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	0018      	movs	r0, r3
 800436a:	f7ff fad7 	bl	800391c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2254      	movs	r2, #84	; 0x54
 8004378:	2100      	movs	r1, #0
 800437a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	0018      	movs	r0, r3
 8004382:	f7ff ffa3 	bl	80042cc <LL_ADC_IsInternalRegulatorEnabled>
 8004386:	1e03      	subs	r3, r0, #0
 8004388:	d115      	bne.n	80043b6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	0018      	movs	r0, r3
 8004390:	f7ff ff88 	bl	80042a4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004394:	4bb4      	ldr	r3, [pc, #720]	; (8004668 <HAL_ADC_Init+0x330>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	49b4      	ldr	r1, [pc, #720]	; (800466c <HAL_ADC_Init+0x334>)
 800439a:	0018      	movs	r0, r3
 800439c:	f7fb feba 	bl	8000114 <__udivsi3>
 80043a0:	0003      	movs	r3, r0
 80043a2:	3301      	adds	r3, #1
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80043a8:	e002      	b.n	80043b0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f9      	bne.n	80043aa <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	0018      	movs	r0, r3
 80043bc:	f7ff ff86 	bl	80042cc <LL_ADC_IsInternalRegulatorEnabled>
 80043c0:	1e03      	subs	r3, r0, #0
 80043c2:	d10f      	bne.n	80043e4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c8:	2210      	movs	r2, #16
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d4:	2201      	movs	r2, #1
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80043dc:	231f      	movs	r3, #31
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	2201      	movs	r2, #1
 80043e2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	0018      	movs	r0, r3
 80043ea:	f7ff ff94 	bl	8004316 <LL_ADC_REG_IsConversionOngoing>
 80043ee:	0003      	movs	r3, r0
 80043f0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f6:	2210      	movs	r2, #16
 80043f8:	4013      	ands	r3, r2
 80043fa:	d000      	beq.n	80043fe <HAL_ADC_Init+0xc6>
 80043fc:	e122      	b.n	8004644 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d000      	beq.n	8004406 <HAL_ADC_Init+0xce>
 8004404:	e11e      	b.n	8004644 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440a:	4a99      	ldr	r2, [pc, #612]	; (8004670 <HAL_ADC_Init+0x338>)
 800440c:	4013      	ands	r3, r2
 800440e:	2202      	movs	r2, #2
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	0018      	movs	r0, r3
 800441c:	f7ff ff6a 	bl	80042f4 <LL_ADC_IsEnabled>
 8004420:	1e03      	subs	r3, r0, #0
 8004422:	d000      	beq.n	8004426 <HAL_ADC_Init+0xee>
 8004424:	e0ad      	b.n	8004582 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	7e1b      	ldrb	r3, [r3, #24]
 800442e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004430:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	7e5b      	ldrb	r3, [r3, #25]
 8004436:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004438:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	7e9b      	ldrb	r3, [r3, #26]
 800443e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004440:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <HAL_ADC_Init+0x118>
 800444a:	2380      	movs	r3, #128	; 0x80
 800444c:	015b      	lsls	r3, r3, #5
 800444e:	e000      	b.n	8004452 <HAL_ADC_Init+0x11a>
 8004450:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004452:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004458:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	da04      	bge.n	800446c <HAL_ADC_Init+0x134>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	085b      	lsrs	r3, r3, #1
 800446a:	e001      	b.n	8004470 <HAL_ADC_Init+0x138>
 800446c:	2380      	movs	r3, #128	; 0x80
 800446e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8004470:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	212c      	movs	r1, #44	; 0x2c
 8004476:	5c5b      	ldrb	r3, [r3, r1]
 8004478:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800447a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	4313      	orrs	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2220      	movs	r2, #32
 8004486:	5c9b      	ldrb	r3, [r3, r2]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d115      	bne.n	80044b8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	7e9b      	ldrb	r3, [r3, #26]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d105      	bne.n	80044a0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	2280      	movs	r2, #128	; 0x80
 8004498:	0252      	lsls	r2, r2, #9
 800449a:	4313      	orrs	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
 800449e:	e00b      	b.n	80044b8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a4:	2220      	movs	r2, #32
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b0:	2201      	movs	r2, #1
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044c4:	23e0      	movs	r3, #224	; 0xe0
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80044ce:	4313      	orrs	r3, r2
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	4a65      	ldr	r2, [pc, #404]	; (8004674 <HAL_ADC_Init+0x33c>)
 80044de:	4013      	ands	r3, r2
 80044e0:	0019      	movs	r1, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	0f9b      	lsrs	r3, r3, #30
 80044f2:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80044f8:	4313      	orrs	r3, r2
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	223c      	movs	r2, #60	; 0x3c
 8004504:	5c9b      	ldrb	r3, [r3, r2]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d111      	bne.n	800452e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	0f9b      	lsrs	r3, r3, #30
 8004510:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004516:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800451c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8004522:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	2201      	movs	r2, #1
 800452a:	4313      	orrs	r3, r2
 800452c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	4a50      	ldr	r2, [pc, #320]	; (8004678 <HAL_ADC_Init+0x340>)
 8004536:	4013      	ands	r3, r2
 8004538:	0019      	movs	r1, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	430a      	orrs	r2, r1
 8004542:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	23c0      	movs	r3, #192	; 0xc0
 800454a:	061b      	lsls	r3, r3, #24
 800454c:	429a      	cmp	r2, r3
 800454e:	d018      	beq.n	8004582 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	05db      	lsls	r3, r3, #23
 8004558:	429a      	cmp	r2, r3
 800455a:	d012      	beq.n	8004582 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	061b      	lsls	r3, r3, #24
 8004564:	429a      	cmp	r2, r3
 8004566:	d00c      	beq.n	8004582 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004568:	4b44      	ldr	r3, [pc, #272]	; (800467c <HAL_ADC_Init+0x344>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a44      	ldr	r2, [pc, #272]	; (8004680 <HAL_ADC_Init+0x348>)
 800456e:	4013      	ands	r3, r2
 8004570:	0019      	movs	r1, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	23f0      	movs	r3, #240	; 0xf0
 8004578:	039b      	lsls	r3, r3, #14
 800457a:	401a      	ands	r2, r3
 800457c:	4b3f      	ldr	r3, [pc, #252]	; (800467c <HAL_ADC_Init+0x344>)
 800457e:	430a      	orrs	r2, r1
 8004580:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458a:	001a      	movs	r2, r3
 800458c:	2100      	movs	r1, #0
 800458e:	f7ff fdf6 	bl	800417e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459a:	493a      	ldr	r1, [pc, #232]	; (8004684 <HAL_ADC_Init+0x34c>)
 800459c:	001a      	movs	r2, r3
 800459e:	f7ff fdee 	bl	800417e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d109      	bne.n	80045be <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2110      	movs	r1, #16
 80045b6:	4249      	negs	r1, r1
 80045b8:	430a      	orrs	r2, r1
 80045ba:	629a      	str	r2, [r3, #40]	; 0x28
 80045bc:	e018      	b.n	80045f0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	039b      	lsls	r3, r3, #14
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d112      	bne.n	80045f0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	221c      	movs	r2, #28
 80045da:	4013      	ands	r3, r2
 80045dc:	2210      	movs	r2, #16
 80045de:	4252      	negs	r2, r2
 80045e0:	409a      	lsls	r2, r3
 80045e2:	0011      	movs	r1, r2
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2100      	movs	r1, #0
 80045f6:	0018      	movs	r0, r3
 80045f8:	f7ff fdde 	bl	80041b8 <LL_ADC_GetSamplingTimeCommonChannels>
 80045fc:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004602:	429a      	cmp	r2, r3
 8004604:	d10b      	bne.n	800461e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004610:	2203      	movs	r2, #3
 8004612:	4393      	bics	r3, r2
 8004614:	2201      	movs	r2, #1
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800461c:	e01c      	b.n	8004658 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004622:	2212      	movs	r2, #18
 8004624:	4393      	bics	r3, r2
 8004626:	2210      	movs	r2, #16
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004632:	2201      	movs	r2, #1
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800463a:	231f      	movs	r3, #31
 800463c:	18fb      	adds	r3, r7, r3
 800463e:	2201      	movs	r2, #1
 8004640:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004642:	e009      	b.n	8004658 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004648:	2210      	movs	r2, #16
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004650:	231f      	movs	r3, #31
 8004652:	18fb      	adds	r3, r7, r3
 8004654:	2201      	movs	r2, #1
 8004656:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004658:	231f      	movs	r3, #31
 800465a:	18fb      	adds	r3, r7, r3
 800465c:	781b      	ldrb	r3, [r3, #0]
}
 800465e:	0018      	movs	r0, r3
 8004660:	46bd      	mov	sp, r7
 8004662:	b008      	add	sp, #32
 8004664:	bd80      	pop	{r7, pc}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	20000000 	.word	0x20000000
 800466c:	00030d40 	.word	0x00030d40
 8004670:	fffffefd 	.word	0xfffffefd
 8004674:	fffe0201 	.word	0xfffe0201
 8004678:	1ffffc02 	.word	0x1ffffc02
 800467c:	40012708 	.word	0x40012708
 8004680:	ffc3ffff 	.word	0xffc3ffff
 8004684:	07ffff04 	.word	0x07ffff04

08004688 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004692:	2317      	movs	r3, #23
 8004694:	18fb      	adds	r3, r7, r3
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2254      	movs	r2, #84	; 0x54
 80046a2:	5c9b      	ldrb	r3, [r3, r2]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_ADC_ConfigChannel+0x24>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e1c0      	b.n	8004a2e <HAL_ADC_ConfigChannel+0x3a6>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2254      	movs	r2, #84	; 0x54
 80046b0:	2101      	movs	r1, #1
 80046b2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	0018      	movs	r0, r3
 80046ba:	f7ff fe2c 	bl	8004316 <LL_ADC_REG_IsConversionOngoing>
 80046be:	1e03      	subs	r3, r0, #0
 80046c0:	d000      	beq.n	80046c4 <HAL_ADC_ConfigChannel+0x3c>
 80046c2:	e1a3      	b.n	8004a0c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d100      	bne.n	80046ce <HAL_ADC_ConfigChannel+0x46>
 80046cc:	e143      	b.n	8004956 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	061b      	lsls	r3, r3, #24
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d004      	beq.n	80046e4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80046de:	4ac1      	ldr	r2, [pc, #772]	; (80049e4 <HAL_ADC_ConfigChannel+0x35c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d108      	bne.n	80046f6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	0019      	movs	r1, r3
 80046ee:	0010      	movs	r0, r2
 80046f0:	f7ff fd99 	bl	8004226 <LL_ADC_REG_SetSequencerChAdd>
 80046f4:	e0c9      	b.n	800488a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	211f      	movs	r1, #31
 8004700:	400b      	ands	r3, r1
 8004702:	210f      	movs	r1, #15
 8004704:	4099      	lsls	r1, r3
 8004706:	000b      	movs	r3, r1
 8004708:	43db      	mvns	r3, r3
 800470a:	4013      	ands	r3, r2
 800470c:	0019      	movs	r1, r3
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	035b      	lsls	r3, r3, #13
 8004714:	0b5b      	lsrs	r3, r3, #13
 8004716:	d105      	bne.n	8004724 <HAL_ADC_ConfigChannel+0x9c>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	0e9b      	lsrs	r3, r3, #26
 800471e:	221f      	movs	r2, #31
 8004720:	4013      	ands	r3, r2
 8004722:	e098      	b.n	8004856 <HAL_ADC_ConfigChannel+0x1ce>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2201      	movs	r2, #1
 800472a:	4013      	ands	r3, r2
 800472c:	d000      	beq.n	8004730 <HAL_ADC_ConfigChannel+0xa8>
 800472e:	e091      	b.n	8004854 <HAL_ADC_ConfigChannel+0x1cc>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2202      	movs	r2, #2
 8004736:	4013      	ands	r3, r2
 8004738:	d000      	beq.n	800473c <HAL_ADC_ConfigChannel+0xb4>
 800473a:	e089      	b.n	8004850 <HAL_ADC_ConfigChannel+0x1c8>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2204      	movs	r2, #4
 8004742:	4013      	ands	r3, r2
 8004744:	d000      	beq.n	8004748 <HAL_ADC_ConfigChannel+0xc0>
 8004746:	e081      	b.n	800484c <HAL_ADC_ConfigChannel+0x1c4>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2208      	movs	r2, #8
 800474e:	4013      	ands	r3, r2
 8004750:	d000      	beq.n	8004754 <HAL_ADC_ConfigChannel+0xcc>
 8004752:	e079      	b.n	8004848 <HAL_ADC_ConfigChannel+0x1c0>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2210      	movs	r2, #16
 800475a:	4013      	ands	r3, r2
 800475c:	d000      	beq.n	8004760 <HAL_ADC_ConfigChannel+0xd8>
 800475e:	e071      	b.n	8004844 <HAL_ADC_ConfigChannel+0x1bc>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2220      	movs	r2, #32
 8004766:	4013      	ands	r3, r2
 8004768:	d000      	beq.n	800476c <HAL_ADC_ConfigChannel+0xe4>
 800476a:	e069      	b.n	8004840 <HAL_ADC_ConfigChannel+0x1b8>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2240      	movs	r2, #64	; 0x40
 8004772:	4013      	ands	r3, r2
 8004774:	d000      	beq.n	8004778 <HAL_ADC_ConfigChannel+0xf0>
 8004776:	e061      	b.n	800483c <HAL_ADC_ConfigChannel+0x1b4>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2280      	movs	r2, #128	; 0x80
 800477e:	4013      	ands	r3, r2
 8004780:	d000      	beq.n	8004784 <HAL_ADC_ConfigChannel+0xfc>
 8004782:	e059      	b.n	8004838 <HAL_ADC_ConfigChannel+0x1b0>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	4013      	ands	r3, r2
 800478e:	d151      	bne.n	8004834 <HAL_ADC_ConfigChannel+0x1ac>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	2380      	movs	r3, #128	; 0x80
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4013      	ands	r3, r2
 800479a:	d149      	bne.n	8004830 <HAL_ADC_ConfigChannel+0x1a8>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	2380      	movs	r3, #128	; 0x80
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	4013      	ands	r3, r2
 80047a6:	d141      	bne.n	800482c <HAL_ADC_ConfigChannel+0x1a4>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	2380      	movs	r3, #128	; 0x80
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	4013      	ands	r3, r2
 80047b2:	d139      	bne.n	8004828 <HAL_ADC_ConfigChannel+0x1a0>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	2380      	movs	r3, #128	; 0x80
 80047ba:	015b      	lsls	r3, r3, #5
 80047bc:	4013      	ands	r3, r2
 80047be:	d131      	bne.n	8004824 <HAL_ADC_ConfigChannel+0x19c>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	2380      	movs	r3, #128	; 0x80
 80047c6:	019b      	lsls	r3, r3, #6
 80047c8:	4013      	ands	r3, r2
 80047ca:	d129      	bne.n	8004820 <HAL_ADC_ConfigChannel+0x198>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	2380      	movs	r3, #128	; 0x80
 80047d2:	01db      	lsls	r3, r3, #7
 80047d4:	4013      	ands	r3, r2
 80047d6:	d121      	bne.n	800481c <HAL_ADC_ConfigChannel+0x194>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	2380      	movs	r3, #128	; 0x80
 80047de:	021b      	lsls	r3, r3, #8
 80047e0:	4013      	ands	r3, r2
 80047e2:	d119      	bne.n	8004818 <HAL_ADC_ConfigChannel+0x190>
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	2380      	movs	r3, #128	; 0x80
 80047ea:	025b      	lsls	r3, r3, #9
 80047ec:	4013      	ands	r3, r2
 80047ee:	d111      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x18c>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	2380      	movs	r3, #128	; 0x80
 80047f6:	029b      	lsls	r3, r3, #10
 80047f8:	4013      	ands	r3, r2
 80047fa:	d109      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x188>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	2380      	movs	r3, #128	; 0x80
 8004802:	02db      	lsls	r3, r3, #11
 8004804:	4013      	ands	r3, r2
 8004806:	d001      	beq.n	800480c <HAL_ADC_ConfigChannel+0x184>
 8004808:	2312      	movs	r3, #18
 800480a:	e024      	b.n	8004856 <HAL_ADC_ConfigChannel+0x1ce>
 800480c:	2300      	movs	r3, #0
 800480e:	e022      	b.n	8004856 <HAL_ADC_ConfigChannel+0x1ce>
 8004810:	2311      	movs	r3, #17
 8004812:	e020      	b.n	8004856 <HAL_ADC_ConfigChannel+0x1ce>
 8004814:	2310      	movs	r3, #16
 8004816:	e01e      	b.n	8004856 <HAL_ADC_ConfigChannel+0x1ce>
 8004818:	230f      	movs	r3, #15
 800481a:	e01c      	b.n	8004856 <HAL_ADC_ConfigChannel+0x1ce>
 800481c:	230e      	movs	r3, #14
 800481e:	e01a      	b.n	8004856 <HAL_ADC_ConfigChannel+0x1ce>
 8004820:	230d      	movs	r3, #13
 8004822:	e018      	b.n	8004856 <HAL_ADC_ConfigChannel+0x1ce>
 8004824:	230c      	movs	r3, #12
 8004826:	e016      	b.n	8004856 <HAL_ADC_ConfigChannel+0x1ce>
 8004828:	230b      	movs	r3, #11
 800482a:	e014      	b.n	8004856 <HAL_ADC_ConfigChannel+0x1ce>
 800482c:	230a      	movs	r3, #10
 800482e:	e012      	b.n	8004856 <HAL_ADC_ConfigChannel+0x1ce>
 8004830:	2309      	movs	r3, #9
 8004832:	e010      	b.n	8004856 <HAL_ADC_ConfigChannel+0x1ce>
 8004834:	2308      	movs	r3, #8
 8004836:	e00e      	b.n	8004856 <HAL_ADC_ConfigChannel+0x1ce>
 8004838:	2307      	movs	r3, #7
 800483a:	e00c      	b.n	8004856 <HAL_ADC_ConfigChannel+0x1ce>
 800483c:	2306      	movs	r3, #6
 800483e:	e00a      	b.n	8004856 <HAL_ADC_ConfigChannel+0x1ce>
 8004840:	2305      	movs	r3, #5
 8004842:	e008      	b.n	8004856 <HAL_ADC_ConfigChannel+0x1ce>
 8004844:	2304      	movs	r3, #4
 8004846:	e006      	b.n	8004856 <HAL_ADC_ConfigChannel+0x1ce>
 8004848:	2303      	movs	r3, #3
 800484a:	e004      	b.n	8004856 <HAL_ADC_ConfigChannel+0x1ce>
 800484c:	2302      	movs	r3, #2
 800484e:	e002      	b.n	8004856 <HAL_ADC_ConfigChannel+0x1ce>
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <HAL_ADC_ConfigChannel+0x1ce>
 8004854:	2300      	movs	r3, #0
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	6852      	ldr	r2, [r2, #4]
 800485a:	201f      	movs	r0, #31
 800485c:	4002      	ands	r2, r0
 800485e:	4093      	lsls	r3, r2
 8004860:	000a      	movs	r2, r1
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	089b      	lsrs	r3, r3, #2
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	429a      	cmp	r2, r3
 8004876:	d808      	bhi.n	800488a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	6859      	ldr	r1, [r3, #4]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	001a      	movs	r2, r3
 8004886:	f7ff fcae 	bl	80041e6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	6819      	ldr	r1, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	001a      	movs	r2, r3
 8004898:	f7ff fce8 	bl	800426c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	db00      	blt.n	80048a6 <HAL_ADC_ConfigChannel+0x21e>
 80048a4:	e0bc      	b.n	8004a20 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048a6:	4b50      	ldr	r3, [pc, #320]	; (80049e8 <HAL_ADC_ConfigChannel+0x360>)
 80048a8:	0018      	movs	r0, r3
 80048aa:	f7ff fc5b 	bl	8004164 <LL_ADC_GetCommonPathInternalCh>
 80048ae:	0003      	movs	r3, r0
 80048b0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a4d      	ldr	r2, [pc, #308]	; (80049ec <HAL_ADC_ConfigChannel+0x364>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d122      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	2380      	movs	r3, #128	; 0x80
 80048c0:	041b      	lsls	r3, r3, #16
 80048c2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80048c4:	d11d      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2280      	movs	r2, #128	; 0x80
 80048ca:	0412      	lsls	r2, r2, #16
 80048cc:	4313      	orrs	r3, r2
 80048ce:	4a46      	ldr	r2, [pc, #280]	; (80049e8 <HAL_ADC_ConfigChannel+0x360>)
 80048d0:	0019      	movs	r1, r3
 80048d2:	0010      	movs	r0, r2
 80048d4:	f7ff fc32 	bl	800413c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048d8:	4b45      	ldr	r3, [pc, #276]	; (80049f0 <HAL_ADC_ConfigChannel+0x368>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4945      	ldr	r1, [pc, #276]	; (80049f4 <HAL_ADC_ConfigChannel+0x36c>)
 80048de:	0018      	movs	r0, r3
 80048e0:	f7fb fc18 	bl	8000114 <__udivsi3>
 80048e4:	0003      	movs	r3, r0
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	0013      	movs	r3, r2
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	189b      	adds	r3, r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80048f2:	e002      	b.n	80048fa <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1f9      	bne.n	80048f4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004900:	e08e      	b.n	8004a20 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a3c      	ldr	r2, [pc, #240]	; (80049f8 <HAL_ADC_ConfigChannel+0x370>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d10e      	bne.n	800492a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	2380      	movs	r3, #128	; 0x80
 8004910:	045b      	lsls	r3, r3, #17
 8004912:	4013      	ands	r3, r2
 8004914:	d109      	bne.n	800492a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2280      	movs	r2, #128	; 0x80
 800491a:	0452      	lsls	r2, r2, #17
 800491c:	4313      	orrs	r3, r2
 800491e:	4a32      	ldr	r2, [pc, #200]	; (80049e8 <HAL_ADC_ConfigChannel+0x360>)
 8004920:	0019      	movs	r1, r3
 8004922:	0010      	movs	r0, r2
 8004924:	f7ff fc0a 	bl	800413c <LL_ADC_SetCommonPathInternalCh>
 8004928:	e07a      	b.n	8004a20 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a33      	ldr	r2, [pc, #204]	; (80049fc <HAL_ADC_ConfigChannel+0x374>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d000      	beq.n	8004936 <HAL_ADC_ConfigChannel+0x2ae>
 8004934:	e074      	b.n	8004a20 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	03db      	lsls	r3, r3, #15
 800493c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800493e:	d000      	beq.n	8004942 <HAL_ADC_ConfigChannel+0x2ba>
 8004940:	e06e      	b.n	8004a20 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2280      	movs	r2, #128	; 0x80
 8004946:	03d2      	lsls	r2, r2, #15
 8004948:	4313      	orrs	r3, r2
 800494a:	4a27      	ldr	r2, [pc, #156]	; (80049e8 <HAL_ADC_ConfigChannel+0x360>)
 800494c:	0019      	movs	r1, r3
 800494e:	0010      	movs	r0, r2
 8004950:	f7ff fbf4 	bl	800413c <LL_ADC_SetCommonPathInternalCh>
 8004954:	e064      	b.n	8004a20 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691a      	ldr	r2, [r3, #16]
 800495a:	2380      	movs	r3, #128	; 0x80
 800495c:	061b      	lsls	r3, r3, #24
 800495e:	429a      	cmp	r2, r3
 8004960:	d004      	beq.n	800496c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004966:	4a1f      	ldr	r2, [pc, #124]	; (80049e4 <HAL_ADC_ConfigChannel+0x35c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d107      	bne.n	800497c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	0019      	movs	r1, r3
 8004976:	0010      	movs	r0, r2
 8004978:	f7ff fc66 	bl	8004248 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	da4d      	bge.n	8004a20 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004984:	4b18      	ldr	r3, [pc, #96]	; (80049e8 <HAL_ADC_ConfigChannel+0x360>)
 8004986:	0018      	movs	r0, r3
 8004988:	f7ff fbec 	bl	8004164 <LL_ADC_GetCommonPathInternalCh>
 800498c:	0003      	movs	r3, r0
 800498e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a15      	ldr	r2, [pc, #84]	; (80049ec <HAL_ADC_ConfigChannel+0x364>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d108      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	4a18      	ldr	r2, [pc, #96]	; (8004a00 <HAL_ADC_ConfigChannel+0x378>)
 800499e:	4013      	ands	r3, r2
 80049a0:	4a11      	ldr	r2, [pc, #68]	; (80049e8 <HAL_ADC_ConfigChannel+0x360>)
 80049a2:	0019      	movs	r1, r3
 80049a4:	0010      	movs	r0, r2
 80049a6:	f7ff fbc9 	bl	800413c <LL_ADC_SetCommonPathInternalCh>
 80049aa:	e039      	b.n	8004a20 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a11      	ldr	r2, [pc, #68]	; (80049f8 <HAL_ADC_ConfigChannel+0x370>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d108      	bne.n	80049c8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	4a12      	ldr	r2, [pc, #72]	; (8004a04 <HAL_ADC_ConfigChannel+0x37c>)
 80049ba:	4013      	ands	r3, r2
 80049bc:	4a0a      	ldr	r2, [pc, #40]	; (80049e8 <HAL_ADC_ConfigChannel+0x360>)
 80049be:	0019      	movs	r1, r3
 80049c0:	0010      	movs	r0, r2
 80049c2:	f7ff fbbb 	bl	800413c <LL_ADC_SetCommonPathInternalCh>
 80049c6:	e02b      	b.n	8004a20 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a0b      	ldr	r2, [pc, #44]	; (80049fc <HAL_ADC_ConfigChannel+0x374>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d126      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	4a0c      	ldr	r2, [pc, #48]	; (8004a08 <HAL_ADC_ConfigChannel+0x380>)
 80049d6:	4013      	ands	r3, r2
 80049d8:	4a03      	ldr	r2, [pc, #12]	; (80049e8 <HAL_ADC_ConfigChannel+0x360>)
 80049da:	0019      	movs	r1, r3
 80049dc:	0010      	movs	r0, r2
 80049de:	f7ff fbad 	bl	800413c <LL_ADC_SetCommonPathInternalCh>
 80049e2:	e01d      	b.n	8004a20 <HAL_ADC_ConfigChannel+0x398>
 80049e4:	80000004 	.word	0x80000004
 80049e8:	40012708 	.word	0x40012708
 80049ec:	b0001000 	.word	0xb0001000
 80049f0:	20000000 	.word	0x20000000
 80049f4:	00030d40 	.word	0x00030d40
 80049f8:	b8004000 	.word	0xb8004000
 80049fc:	b4002000 	.word	0xb4002000
 8004a00:	ff7fffff 	.word	0xff7fffff
 8004a04:	feffffff 	.word	0xfeffffff
 8004a08:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a10:	2220      	movs	r2, #32
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004a18:	2317      	movs	r3, #23
 8004a1a:	18fb      	adds	r3, r7, r3
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2254      	movs	r2, #84	; 0x54
 8004a24:	2100      	movs	r1, #0
 8004a26:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004a28:	2317      	movs	r3, #23
 8004a2a:	18fb      	adds	r3, r7, r3
 8004a2c:	781b      	ldrb	r3, [r3, #0]
}
 8004a2e:	0018      	movs	r0, r3
 8004a30:	46bd      	mov	sp, r7
 8004a32:	b006      	add	sp, #24
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	46c0      	nop			; (mov r8, r8)

08004a38 <__NVIC_EnableIRQ>:
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	0002      	movs	r2, r0
 8004a40:	1dfb      	adds	r3, r7, #7
 8004a42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004a44:	1dfb      	adds	r3, r7, #7
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2b7f      	cmp	r3, #127	; 0x7f
 8004a4a:	d809      	bhi.n	8004a60 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a4c:	1dfb      	adds	r3, r7, #7
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	001a      	movs	r2, r3
 8004a52:	231f      	movs	r3, #31
 8004a54:	401a      	ands	r2, r3
 8004a56:	4b04      	ldr	r3, [pc, #16]	; (8004a68 <__NVIC_EnableIRQ+0x30>)
 8004a58:	2101      	movs	r1, #1
 8004a5a:	4091      	lsls	r1, r2
 8004a5c:	000a      	movs	r2, r1
 8004a5e:	601a      	str	r2, [r3, #0]
}
 8004a60:	46c0      	nop			; (mov r8, r8)
 8004a62:	46bd      	mov	sp, r7
 8004a64:	b002      	add	sp, #8
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	e000e100 	.word	0xe000e100

08004a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a6c:	b590      	push	{r4, r7, lr}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	0002      	movs	r2, r0
 8004a74:	6039      	str	r1, [r7, #0]
 8004a76:	1dfb      	adds	r3, r7, #7
 8004a78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004a7a:	1dfb      	adds	r3, r7, #7
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8004a80:	d828      	bhi.n	8004ad4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a82:	4a2f      	ldr	r2, [pc, #188]	; (8004b40 <__NVIC_SetPriority+0xd4>)
 8004a84:	1dfb      	adds	r3, r7, #7
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	b25b      	sxtb	r3, r3
 8004a8a:	089b      	lsrs	r3, r3, #2
 8004a8c:	33c0      	adds	r3, #192	; 0xc0
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	589b      	ldr	r3, [r3, r2]
 8004a92:	1dfa      	adds	r2, r7, #7
 8004a94:	7812      	ldrb	r2, [r2, #0]
 8004a96:	0011      	movs	r1, r2
 8004a98:	2203      	movs	r2, #3
 8004a9a:	400a      	ands	r2, r1
 8004a9c:	00d2      	lsls	r2, r2, #3
 8004a9e:	21ff      	movs	r1, #255	; 0xff
 8004aa0:	4091      	lsls	r1, r2
 8004aa2:	000a      	movs	r2, r1
 8004aa4:	43d2      	mvns	r2, r2
 8004aa6:	401a      	ands	r2, r3
 8004aa8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	019b      	lsls	r3, r3, #6
 8004aae:	22ff      	movs	r2, #255	; 0xff
 8004ab0:	401a      	ands	r2, r3
 8004ab2:	1dfb      	adds	r3, r7, #7
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	2303      	movs	r3, #3
 8004aba:	4003      	ands	r3, r0
 8004abc:	00db      	lsls	r3, r3, #3
 8004abe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ac0:	481f      	ldr	r0, [pc, #124]	; (8004b40 <__NVIC_SetPriority+0xd4>)
 8004ac2:	1dfb      	adds	r3, r7, #7
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	b25b      	sxtb	r3, r3
 8004ac8:	089b      	lsrs	r3, r3, #2
 8004aca:	430a      	orrs	r2, r1
 8004acc:	33c0      	adds	r3, #192	; 0xc0
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004ad2:	e031      	b.n	8004b38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ad4:	4a1b      	ldr	r2, [pc, #108]	; (8004b44 <__NVIC_SetPriority+0xd8>)
 8004ad6:	1dfb      	adds	r3, r7, #7
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	0019      	movs	r1, r3
 8004adc:	230f      	movs	r3, #15
 8004ade:	400b      	ands	r3, r1
 8004ae0:	3b08      	subs	r3, #8
 8004ae2:	089b      	lsrs	r3, r3, #2
 8004ae4:	3306      	adds	r3, #6
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	18d3      	adds	r3, r2, r3
 8004aea:	3304      	adds	r3, #4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	1dfa      	adds	r2, r7, #7
 8004af0:	7812      	ldrb	r2, [r2, #0]
 8004af2:	0011      	movs	r1, r2
 8004af4:	2203      	movs	r2, #3
 8004af6:	400a      	ands	r2, r1
 8004af8:	00d2      	lsls	r2, r2, #3
 8004afa:	21ff      	movs	r1, #255	; 0xff
 8004afc:	4091      	lsls	r1, r2
 8004afe:	000a      	movs	r2, r1
 8004b00:	43d2      	mvns	r2, r2
 8004b02:	401a      	ands	r2, r3
 8004b04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	019b      	lsls	r3, r3, #6
 8004b0a:	22ff      	movs	r2, #255	; 0xff
 8004b0c:	401a      	ands	r2, r3
 8004b0e:	1dfb      	adds	r3, r7, #7
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	0018      	movs	r0, r3
 8004b14:	2303      	movs	r3, #3
 8004b16:	4003      	ands	r3, r0
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b1c:	4809      	ldr	r0, [pc, #36]	; (8004b44 <__NVIC_SetPriority+0xd8>)
 8004b1e:	1dfb      	adds	r3, r7, #7
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	001c      	movs	r4, r3
 8004b24:	230f      	movs	r3, #15
 8004b26:	4023      	ands	r3, r4
 8004b28:	3b08      	subs	r3, #8
 8004b2a:	089b      	lsrs	r3, r3, #2
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	3306      	adds	r3, #6
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	18c3      	adds	r3, r0, r3
 8004b34:	3304      	adds	r3, #4
 8004b36:	601a      	str	r2, [r3, #0]
}
 8004b38:	46c0      	nop			; (mov r8, r8)
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b003      	add	sp, #12
 8004b3e:	bd90      	pop	{r4, r7, pc}
 8004b40:	e000e100 	.word	0xe000e100
 8004b44:	e000ed00 	.word	0xe000ed00

08004b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	1e5a      	subs	r2, r3, #1
 8004b54:	2380      	movs	r3, #128	; 0x80
 8004b56:	045b      	lsls	r3, r3, #17
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d301      	bcc.n	8004b60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e010      	b.n	8004b82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b60:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <SysTick_Config+0x44>)
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	3a01      	subs	r2, #1
 8004b66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b68:	2301      	movs	r3, #1
 8004b6a:	425b      	negs	r3, r3
 8004b6c:	2103      	movs	r1, #3
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f7ff ff7c 	bl	8004a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b74:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <SysTick_Config+0x44>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b7a:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <SysTick_Config+0x44>)
 8004b7c:	2207      	movs	r2, #7
 8004b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	0018      	movs	r0, r3
 8004b84:	46bd      	mov	sp, r7
 8004b86:	b002      	add	sp, #8
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	e000e010 	.word	0xe000e010

08004b90 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60b9      	str	r1, [r7, #8]
 8004b98:	607a      	str	r2, [r7, #4]
 8004b9a:	210f      	movs	r1, #15
 8004b9c:	187b      	adds	r3, r7, r1
 8004b9e:	1c02      	adds	r2, r0, #0
 8004ba0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	187b      	adds	r3, r7, r1
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	b25b      	sxtb	r3, r3
 8004baa:	0011      	movs	r1, r2
 8004bac:	0018      	movs	r0, r3
 8004bae:	f7ff ff5d 	bl	8004a6c <__NVIC_SetPriority>
}
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	b004      	add	sp, #16
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b082      	sub	sp, #8
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	0002      	movs	r2, r0
 8004bc2:	1dfb      	adds	r3, r7, #7
 8004bc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bc6:	1dfb      	adds	r3, r7, #7
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	b25b      	sxtb	r3, r3
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f7ff ff33 	bl	8004a38 <__NVIC_EnableIRQ>
}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	b002      	add	sp, #8
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b082      	sub	sp, #8
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	0018      	movs	r0, r3
 8004be6:	f7ff ffaf 	bl	8004b48 <SysTick_Config>
 8004bea:	0003      	movs	r3, r0
}
 8004bec:	0018      	movs	r0, r3
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	b002      	add	sp, #8
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e077      	b.n	8004cf6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a3d      	ldr	r2, [pc, #244]	; (8004d00 <HAL_DMA_Init+0x10c>)
 8004c0c:	4694      	mov	ip, r2
 8004c0e:	4463      	add	r3, ip
 8004c10:	2114      	movs	r1, #20
 8004c12:	0018      	movs	r0, r3
 8004c14:	f7fb fa7e 	bl	8000114 <__udivsi3>
 8004c18:	0003      	movs	r3, r0
 8004c1a:	009a      	lsls	r2, r3, #2
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2225      	movs	r2, #37	; 0x25
 8004c24:	2102      	movs	r1, #2
 8004c26:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4934      	ldr	r1, [pc, #208]	; (8004d04 <HAL_DMA_Init+0x110>)
 8004c34:	400a      	ands	r2, r1
 8004c36:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6819      	ldr	r1, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	431a      	orrs	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	0018      	movs	r0, r3
 8004c72:	f000 f8fb 	bl	8004e6c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	2380      	movs	r3, #128	; 0x80
 8004c7c:	01db      	lsls	r3, r3, #7
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d102      	bne.n	8004c88 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c90:	213f      	movs	r1, #63	; 0x3f
 8004c92:	400a      	ands	r2, r1
 8004c94:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004c9e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d011      	beq.n	8004ccc <HAL_DMA_Init+0xd8>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d80d      	bhi.n	8004ccc <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	f000 f906 	bl	8004ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004cc8:	605a      	str	r2, [r3, #4]
 8004cca:	e008      	b.n	8004cde <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2225      	movs	r2, #37	; 0x25
 8004ce8:	2101      	movs	r1, #1
 8004cea:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2224      	movs	r2, #36	; 0x24
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	b002      	add	sp, #8
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	bffdfff8 	.word	0xbffdfff8
 8004d04:	ffff800f 	.word	0xffff800f

08004d08 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8004d10:	4b55      	ldr	r3, [pc, #340]	; (8004e68 <HAL_DMA_IRQHandler+0x160>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	221c      	movs	r2, #28
 8004d24:	4013      	ands	r3, r2
 8004d26:	2204      	movs	r2, #4
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	0013      	movs	r3, r2
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d027      	beq.n	8004d82 <HAL_DMA_IRQHandler+0x7a>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2204      	movs	r2, #4
 8004d36:	4013      	ands	r3, r2
 8004d38:	d023      	beq.n	8004d82 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2220      	movs	r2, #32
 8004d42:	4013      	ands	r3, r2
 8004d44:	d107      	bne.n	8004d56 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2104      	movs	r1, #4
 8004d52:	438a      	bics	r2, r1
 8004d54:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004d56:	4b44      	ldr	r3, [pc, #272]	; (8004e68 <HAL_DMA_IRQHandler+0x160>)
 8004d58:	6859      	ldr	r1, [r3, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	221c      	movs	r2, #28
 8004d60:	4013      	ands	r3, r2
 8004d62:	2204      	movs	r2, #4
 8004d64:	409a      	lsls	r2, r3
 8004d66:	4b40      	ldr	r3, [pc, #256]	; (8004e68 <HAL_DMA_IRQHandler+0x160>)
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d100      	bne.n	8004d76 <HAL_DMA_IRQHandler+0x6e>
 8004d74:	e073      	b.n	8004e5e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	0010      	movs	r0, r2
 8004d7e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004d80:	e06d      	b.n	8004e5e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	221c      	movs	r2, #28
 8004d88:	4013      	ands	r3, r2
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	409a      	lsls	r2, r3
 8004d8e:	0013      	movs	r3, r2
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	4013      	ands	r3, r2
 8004d94:	d02e      	beq.n	8004df4 <HAL_DMA_IRQHandler+0xec>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2202      	movs	r2, #2
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d02a      	beq.n	8004df4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2220      	movs	r2, #32
 8004da6:	4013      	ands	r3, r2
 8004da8:	d10b      	bne.n	8004dc2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	210a      	movs	r1, #10
 8004db6:	438a      	bics	r2, r1
 8004db8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2225      	movs	r2, #37	; 0x25
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004dc2:	4b29      	ldr	r3, [pc, #164]	; (8004e68 <HAL_DMA_IRQHandler+0x160>)
 8004dc4:	6859      	ldr	r1, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	221c      	movs	r2, #28
 8004dcc:	4013      	ands	r3, r2
 8004dce:	2202      	movs	r2, #2
 8004dd0:	409a      	lsls	r2, r3
 8004dd2:	4b25      	ldr	r3, [pc, #148]	; (8004e68 <HAL_DMA_IRQHandler+0x160>)
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2224      	movs	r2, #36	; 0x24
 8004ddc:	2100      	movs	r1, #0
 8004dde:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d03a      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	0010      	movs	r0, r2
 8004df0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004df2:	e034      	b.n	8004e5e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df8:	221c      	movs	r2, #28
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2208      	movs	r2, #8
 8004dfe:	409a      	lsls	r2, r3
 8004e00:	0013      	movs	r3, r2
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4013      	ands	r3, r2
 8004e06:	d02b      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x158>
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2208      	movs	r2, #8
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d027      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	210e      	movs	r1, #14
 8004e1c:	438a      	bics	r2, r1
 8004e1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004e20:	4b11      	ldr	r3, [pc, #68]	; (8004e68 <HAL_DMA_IRQHandler+0x160>)
 8004e22:	6859      	ldr	r1, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	221c      	movs	r2, #28
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	409a      	lsls	r2, r3
 8004e30:	4b0d      	ldr	r3, [pc, #52]	; (8004e68 <HAL_DMA_IRQHandler+0x160>)
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2225      	movs	r2, #37	; 0x25
 8004e40:	2101      	movs	r1, #1
 8004e42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2224      	movs	r2, #36	; 0x24
 8004e48:	2100      	movs	r1, #0
 8004e4a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	0010      	movs	r0, r2
 8004e5c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	46c0      	nop			; (mov r8, r8)
}
 8004e62:	46bd      	mov	sp, r7
 8004e64:	b004      	add	sp, #16
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40020000 	.word	0x40020000

08004e6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	089b      	lsrs	r3, r3, #2
 8004e7a:	4a10      	ldr	r2, [pc, #64]	; (8004ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004e7c:	4694      	mov	ip, r2
 8004e7e:	4463      	add	r3, ip
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	001a      	movs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	001a      	movs	r2, r3
 8004e8e:	23ff      	movs	r3, #255	; 0xff
 8004e90:	4013      	ands	r3, r2
 8004e92:	3b08      	subs	r3, #8
 8004e94:	2114      	movs	r1, #20
 8004e96:	0018      	movs	r0, r3
 8004e98:	f7fb f93c 	bl	8000114 <__udivsi3>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a07      	ldr	r2, [pc, #28]	; (8004ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004ea4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	221f      	movs	r2, #31
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2201      	movs	r2, #1
 8004eae:	409a      	lsls	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004eb4:	46c0      	nop			; (mov r8, r8)
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b004      	add	sp, #16
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	10008200 	.word	0x10008200
 8004ec0:	40020880 	.word	0x40020880

08004ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	223f      	movs	r2, #63	; 0x3f
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4a0a      	ldr	r2, [pc, #40]	; (8004f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004eda:	4694      	mov	ip, r2
 8004edc:	4463      	add	r3, ip
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	001a      	movs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a07      	ldr	r2, [pc, #28]	; (8004f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004eea:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	2203      	movs	r2, #3
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	409a      	lsls	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	659a      	str	r2, [r3, #88]	; 0x58
}
 8004efc:	46c0      	nop			; (mov r8, r8)
 8004efe:	46bd      	mov	sp, r7
 8004f00:	b004      	add	sp, #16
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	1000823f 	.word	0x1000823f
 8004f08:	40020940 	.word	0x40020940

08004f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f1a:	e147      	b.n	80051ac <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2101      	movs	r1, #1
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4091      	lsls	r1, r2
 8004f26:	000a      	movs	r2, r1
 8004f28:	4013      	ands	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d100      	bne.n	8004f34 <HAL_GPIO_Init+0x28>
 8004f32:	e138      	b.n	80051a6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2203      	movs	r2, #3
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d005      	beq.n	8004f4c <HAL_GPIO_Init+0x40>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2203      	movs	r2, #3
 8004f46:	4013      	ands	r3, r2
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d130      	bne.n	8004fae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	2203      	movs	r2, #3
 8004f58:	409a      	lsls	r2, r3
 8004f5a:	0013      	movs	r3, r2
 8004f5c:	43da      	mvns	r2, r3
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	4013      	ands	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	409a      	lsls	r2, r3
 8004f6e:	0013      	movs	r3, r2
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f82:	2201      	movs	r2, #1
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	409a      	lsls	r2, r3
 8004f88:	0013      	movs	r3, r2
 8004f8a:	43da      	mvns	r2, r3
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	091b      	lsrs	r3, r3, #4
 8004f98:	2201      	movs	r2, #1
 8004f9a:	401a      	ands	r2, r3
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	409a      	lsls	r2, r3
 8004fa0:	0013      	movs	r3, r2
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2203      	movs	r2, #3
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d017      	beq.n	8004fea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	2203      	movs	r2, #3
 8004fc6:	409a      	lsls	r2, r3
 8004fc8:	0013      	movs	r3, r2
 8004fca:	43da      	mvns	r2, r3
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	409a      	lsls	r2, r3
 8004fdc:	0013      	movs	r3, r2
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2203      	movs	r2, #3
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d123      	bne.n	800503e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	08da      	lsrs	r2, r3, #3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3208      	adds	r2, #8
 8004ffe:	0092      	lsls	r2, r2, #2
 8005000:	58d3      	ldr	r3, [r2, r3]
 8005002:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	2207      	movs	r2, #7
 8005008:	4013      	ands	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	220f      	movs	r2, #15
 800500e:	409a      	lsls	r2, r3
 8005010:	0013      	movs	r3, r2
 8005012:	43da      	mvns	r2, r3
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	4013      	ands	r3, r2
 8005018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2107      	movs	r1, #7
 8005022:	400b      	ands	r3, r1
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	409a      	lsls	r2, r3
 8005028:	0013      	movs	r3, r2
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	08da      	lsrs	r2, r3, #3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3208      	adds	r2, #8
 8005038:	0092      	lsls	r2, r2, #2
 800503a:	6939      	ldr	r1, [r7, #16]
 800503c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	2203      	movs	r2, #3
 800504a:	409a      	lsls	r2, r3
 800504c:	0013      	movs	r3, r2
 800504e:	43da      	mvns	r2, r3
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4013      	ands	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2203      	movs	r2, #3
 800505c:	401a      	ands	r2, r3
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	409a      	lsls	r2, r3
 8005064:	0013      	movs	r3, r2
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	23c0      	movs	r3, #192	; 0xc0
 8005078:	029b      	lsls	r3, r3, #10
 800507a:	4013      	ands	r3, r2
 800507c:	d100      	bne.n	8005080 <HAL_GPIO_Init+0x174>
 800507e:	e092      	b.n	80051a6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005080:	4a50      	ldr	r2, [pc, #320]	; (80051c4 <HAL_GPIO_Init+0x2b8>)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	089b      	lsrs	r3, r3, #2
 8005086:	3318      	adds	r3, #24
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	589b      	ldr	r3, [r3, r2]
 800508c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2203      	movs	r2, #3
 8005092:	4013      	ands	r3, r2
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	220f      	movs	r2, #15
 8005098:	409a      	lsls	r2, r3
 800509a:	0013      	movs	r3, r2
 800509c:	43da      	mvns	r2, r3
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	4013      	ands	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	23a0      	movs	r3, #160	; 0xa0
 80050a8:	05db      	lsls	r3, r3, #23
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d013      	beq.n	80050d6 <HAL_GPIO_Init+0x1ca>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a45      	ldr	r2, [pc, #276]	; (80051c8 <HAL_GPIO_Init+0x2bc>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d00d      	beq.n	80050d2 <HAL_GPIO_Init+0x1c6>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a44      	ldr	r2, [pc, #272]	; (80051cc <HAL_GPIO_Init+0x2c0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d007      	beq.n	80050ce <HAL_GPIO_Init+0x1c2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a43      	ldr	r2, [pc, #268]	; (80051d0 <HAL_GPIO_Init+0x2c4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d101      	bne.n	80050ca <HAL_GPIO_Init+0x1be>
 80050c6:	2303      	movs	r3, #3
 80050c8:	e006      	b.n	80050d8 <HAL_GPIO_Init+0x1cc>
 80050ca:	2305      	movs	r3, #5
 80050cc:	e004      	b.n	80050d8 <HAL_GPIO_Init+0x1cc>
 80050ce:	2302      	movs	r3, #2
 80050d0:	e002      	b.n	80050d8 <HAL_GPIO_Init+0x1cc>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <HAL_GPIO_Init+0x1cc>
 80050d6:	2300      	movs	r3, #0
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	2103      	movs	r1, #3
 80050dc:	400a      	ands	r2, r1
 80050de:	00d2      	lsls	r2, r2, #3
 80050e0:	4093      	lsls	r3, r2
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80050e8:	4936      	ldr	r1, [pc, #216]	; (80051c4 <HAL_GPIO_Init+0x2b8>)
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	089b      	lsrs	r3, r3, #2
 80050ee:	3318      	adds	r3, #24
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050f6:	4b33      	ldr	r3, [pc, #204]	; (80051c4 <HAL_GPIO_Init+0x2b8>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	43da      	mvns	r2, r3
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	4013      	ands	r3, r2
 8005104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	2380      	movs	r3, #128	; 0x80
 800510c:	035b      	lsls	r3, r3, #13
 800510e:	4013      	ands	r3, r2
 8005110:	d003      	beq.n	800511a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800511a:	4b2a      	ldr	r3, [pc, #168]	; (80051c4 <HAL_GPIO_Init+0x2b8>)
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005120:	4b28      	ldr	r3, [pc, #160]	; (80051c4 <HAL_GPIO_Init+0x2b8>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	43da      	mvns	r2, r3
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	4013      	ands	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	2380      	movs	r3, #128	; 0x80
 8005136:	039b      	lsls	r3, r3, #14
 8005138:	4013      	ands	r3, r2
 800513a:	d003      	beq.n	8005144 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4313      	orrs	r3, r2
 8005142:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005144:	4b1f      	ldr	r3, [pc, #124]	; (80051c4 <HAL_GPIO_Init+0x2b8>)
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800514a:	4a1e      	ldr	r2, [pc, #120]	; (80051c4 <HAL_GPIO_Init+0x2b8>)
 800514c:	2384      	movs	r3, #132	; 0x84
 800514e:	58d3      	ldr	r3, [r2, r3]
 8005150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	43da      	mvns	r2, r3
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	4013      	ands	r3, r2
 800515a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	2380      	movs	r3, #128	; 0x80
 8005162:	029b      	lsls	r3, r3, #10
 8005164:	4013      	ands	r3, r2
 8005166:	d003      	beq.n	8005170 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005170:	4914      	ldr	r1, [pc, #80]	; (80051c4 <HAL_GPIO_Init+0x2b8>)
 8005172:	2284      	movs	r2, #132	; 0x84
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005178:	4a12      	ldr	r2, [pc, #72]	; (80051c4 <HAL_GPIO_Init+0x2b8>)
 800517a:	2380      	movs	r3, #128	; 0x80
 800517c:	58d3      	ldr	r3, [r2, r3]
 800517e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	43da      	mvns	r2, r3
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	4013      	ands	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	2380      	movs	r3, #128	; 0x80
 8005190:	025b      	lsls	r3, r3, #9
 8005192:	4013      	ands	r3, r2
 8005194:	d003      	beq.n	800519e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800519e:	4909      	ldr	r1, [pc, #36]	; (80051c4 <HAL_GPIO_Init+0x2b8>)
 80051a0:	2280      	movs	r2, #128	; 0x80
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	3301      	adds	r3, #1
 80051aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	40da      	lsrs	r2, r3
 80051b4:	1e13      	subs	r3, r2, #0
 80051b6:	d000      	beq.n	80051ba <HAL_GPIO_Init+0x2ae>
 80051b8:	e6b0      	b.n	8004f1c <HAL_GPIO_Init+0x10>
  }
}
 80051ba:	46c0      	nop			; (mov r8, r8)
 80051bc:	46c0      	nop			; (mov r8, r8)
 80051be:	46bd      	mov	sp, r7
 80051c0:	b006      	add	sp, #24
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40021800 	.word	0x40021800
 80051c8:	50000400 	.word	0x50000400
 80051cc:	50000800 	.word	0x50000800
 80051d0:	50000c00 	.word	0x50000c00

080051d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	0008      	movs	r0, r1
 80051de:	0011      	movs	r1, r2
 80051e0:	1cbb      	adds	r3, r7, #2
 80051e2:	1c02      	adds	r2, r0, #0
 80051e4:	801a      	strh	r2, [r3, #0]
 80051e6:	1c7b      	adds	r3, r7, #1
 80051e8:	1c0a      	adds	r2, r1, #0
 80051ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051ec:	1c7b      	adds	r3, r7, #1
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d004      	beq.n	80051fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80051f4:	1cbb      	adds	r3, r7, #2
 80051f6:	881a      	ldrh	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80051fc:	e003      	b.n	8005206 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051fe:	1cbb      	adds	r3, r7, #2
 8005200:	881a      	ldrh	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005206:	46c0      	nop			; (mov r8, r8)
 8005208:	46bd      	mov	sp, r7
 800520a:	b002      	add	sp, #8
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005218:	4b19      	ldr	r3, [pc, #100]	; (8005280 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a19      	ldr	r2, [pc, #100]	; (8005284 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800521e:	4013      	ands	r3, r2
 8005220:	0019      	movs	r1, r3
 8005222:	4b17      	ldr	r3, [pc, #92]	; (8005280 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	430a      	orrs	r2, r1
 8005228:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	2380      	movs	r3, #128	; 0x80
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	429a      	cmp	r2, r3
 8005232:	d11f      	bne.n	8005274 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005234:	4b14      	ldr	r3, [pc, #80]	; (8005288 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	0013      	movs	r3, r2
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	189b      	adds	r3, r3, r2
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	4912      	ldr	r1, [pc, #72]	; (800528c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005242:	0018      	movs	r0, r3
 8005244:	f7fa ff66 	bl	8000114 <__udivsi3>
 8005248:	0003      	movs	r3, r0
 800524a:	3301      	adds	r3, #1
 800524c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800524e:	e008      	b.n	8005262 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3b01      	subs	r3, #1
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	e001      	b.n	8005262 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e009      	b.n	8005276 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005262:	4b07      	ldr	r3, [pc, #28]	; (8005280 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005264:	695a      	ldr	r2, [r3, #20]
 8005266:	2380      	movs	r3, #128	; 0x80
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	401a      	ands	r2, r3
 800526c:	2380      	movs	r3, #128	; 0x80
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	429a      	cmp	r2, r3
 8005272:	d0ed      	beq.n	8005250 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	0018      	movs	r0, r3
 8005278:	46bd      	mov	sp, r7
 800527a:	b004      	add	sp, #16
 800527c:	bd80      	pop	{r7, pc}
 800527e:	46c0      	nop			; (mov r8, r8)
 8005280:	40007000 	.word	0x40007000
 8005284:	fffff9ff 	.word	0xfffff9ff
 8005288:	20000000 	.word	0x20000000
 800528c:	000f4240 	.word	0x000f4240

08005290 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e2f3      	b.n	800588a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2201      	movs	r2, #1
 80052a8:	4013      	ands	r3, r2
 80052aa:	d100      	bne.n	80052ae <HAL_RCC_OscConfig+0x1e>
 80052ac:	e07c      	b.n	80053a8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ae:	4bc3      	ldr	r3, [pc, #780]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	2238      	movs	r2, #56	; 0x38
 80052b4:	4013      	ands	r3, r2
 80052b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052b8:	4bc0      	ldr	r3, [pc, #768]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	2203      	movs	r2, #3
 80052be:	4013      	ands	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	2b10      	cmp	r3, #16
 80052c6:	d102      	bne.n	80052ce <HAL_RCC_OscConfig+0x3e>
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	d002      	beq.n	80052d4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d10b      	bne.n	80052ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d4:	4bb9      	ldr	r3, [pc, #740]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	2380      	movs	r3, #128	; 0x80
 80052da:	029b      	lsls	r3, r3, #10
 80052dc:	4013      	ands	r3, r2
 80052de:	d062      	beq.n	80053a6 <HAL_RCC_OscConfig+0x116>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d15e      	bne.n	80053a6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e2ce      	b.n	800588a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	2380      	movs	r3, #128	; 0x80
 80052f2:	025b      	lsls	r3, r3, #9
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d107      	bne.n	8005308 <HAL_RCC_OscConfig+0x78>
 80052f8:	4bb0      	ldr	r3, [pc, #704]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	4baf      	ldr	r3, [pc, #700]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 80052fe:	2180      	movs	r1, #128	; 0x80
 8005300:	0249      	lsls	r1, r1, #9
 8005302:	430a      	orrs	r2, r1
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	e020      	b.n	800534a <HAL_RCC_OscConfig+0xba>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	23a0      	movs	r3, #160	; 0xa0
 800530e:	02db      	lsls	r3, r3, #11
 8005310:	429a      	cmp	r2, r3
 8005312:	d10e      	bne.n	8005332 <HAL_RCC_OscConfig+0xa2>
 8005314:	4ba9      	ldr	r3, [pc, #676]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	4ba8      	ldr	r3, [pc, #672]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 800531a:	2180      	movs	r1, #128	; 0x80
 800531c:	02c9      	lsls	r1, r1, #11
 800531e:	430a      	orrs	r2, r1
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	4ba6      	ldr	r3, [pc, #664]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	4ba5      	ldr	r3, [pc, #660]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 8005328:	2180      	movs	r1, #128	; 0x80
 800532a:	0249      	lsls	r1, r1, #9
 800532c:	430a      	orrs	r2, r1
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	e00b      	b.n	800534a <HAL_RCC_OscConfig+0xba>
 8005332:	4ba2      	ldr	r3, [pc, #648]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	4ba1      	ldr	r3, [pc, #644]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 8005338:	49a1      	ldr	r1, [pc, #644]	; (80055c0 <HAL_RCC_OscConfig+0x330>)
 800533a:	400a      	ands	r2, r1
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	4b9f      	ldr	r3, [pc, #636]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	4b9e      	ldr	r3, [pc, #632]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 8005344:	499f      	ldr	r1, [pc, #636]	; (80055c4 <HAL_RCC_OscConfig+0x334>)
 8005346:	400a      	ands	r2, r1
 8005348:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d014      	beq.n	800537c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005352:	f7fe fec5 	bl	80040e0 <HAL_GetTick>
 8005356:	0003      	movs	r3, r0
 8005358:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800535c:	f7fe fec0 	bl	80040e0 <HAL_GetTick>
 8005360:	0002      	movs	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b64      	cmp	r3, #100	; 0x64
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e28d      	b.n	800588a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800536e:	4b93      	ldr	r3, [pc, #588]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	2380      	movs	r3, #128	; 0x80
 8005374:	029b      	lsls	r3, r3, #10
 8005376:	4013      	ands	r3, r2
 8005378:	d0f0      	beq.n	800535c <HAL_RCC_OscConfig+0xcc>
 800537a:	e015      	b.n	80053a8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537c:	f7fe feb0 	bl	80040e0 <HAL_GetTick>
 8005380:	0003      	movs	r3, r0
 8005382:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005384:	e008      	b.n	8005398 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005386:	f7fe feab 	bl	80040e0 <HAL_GetTick>
 800538a:	0002      	movs	r2, r0
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b64      	cmp	r3, #100	; 0x64
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e278      	b.n	800588a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005398:	4b88      	ldr	r3, [pc, #544]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	2380      	movs	r3, #128	; 0x80
 800539e:	029b      	lsls	r3, r3, #10
 80053a0:	4013      	ands	r3, r2
 80053a2:	d1f0      	bne.n	8005386 <HAL_RCC_OscConfig+0xf6>
 80053a4:	e000      	b.n	80053a8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2202      	movs	r2, #2
 80053ae:	4013      	ands	r3, r2
 80053b0:	d100      	bne.n	80053b4 <HAL_RCC_OscConfig+0x124>
 80053b2:	e099      	b.n	80054e8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053b4:	4b81      	ldr	r3, [pc, #516]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	2238      	movs	r2, #56	; 0x38
 80053ba:	4013      	ands	r3, r2
 80053bc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053be:	4b7f      	ldr	r3, [pc, #508]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	2203      	movs	r2, #3
 80053c4:	4013      	ands	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	2b10      	cmp	r3, #16
 80053cc:	d102      	bne.n	80053d4 <HAL_RCC_OscConfig+0x144>
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d002      	beq.n	80053da <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d135      	bne.n	8005446 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053da:	4b78      	ldr	r3, [pc, #480]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	2380      	movs	r3, #128	; 0x80
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	4013      	ands	r3, r2
 80053e4:	d005      	beq.n	80053f2 <HAL_RCC_OscConfig+0x162>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e24b      	b.n	800588a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f2:	4b72      	ldr	r3, [pc, #456]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	4a74      	ldr	r2, [pc, #464]	; (80055c8 <HAL_RCC_OscConfig+0x338>)
 80053f8:	4013      	ands	r3, r2
 80053fa:	0019      	movs	r1, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	021a      	lsls	r2, r3, #8
 8005402:	4b6e      	ldr	r3, [pc, #440]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 8005404:	430a      	orrs	r2, r1
 8005406:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d112      	bne.n	8005434 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800540e:	4b6b      	ldr	r3, [pc, #428]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a6e      	ldr	r2, [pc, #440]	; (80055cc <HAL_RCC_OscConfig+0x33c>)
 8005414:	4013      	ands	r3, r2
 8005416:	0019      	movs	r1, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	4b67      	ldr	r3, [pc, #412]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 800541e:	430a      	orrs	r2, r1
 8005420:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005422:	4b66      	ldr	r3, [pc, #408]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	0adb      	lsrs	r3, r3, #11
 8005428:	2207      	movs	r2, #7
 800542a:	4013      	ands	r3, r2
 800542c:	4a68      	ldr	r2, [pc, #416]	; (80055d0 <HAL_RCC_OscConfig+0x340>)
 800542e:	40da      	lsrs	r2, r3
 8005430:	4b68      	ldr	r3, [pc, #416]	; (80055d4 <HAL_RCC_OscConfig+0x344>)
 8005432:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005434:	4b68      	ldr	r3, [pc, #416]	; (80055d8 <HAL_RCC_OscConfig+0x348>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	0018      	movs	r0, r3
 800543a:	f7fe fdf5 	bl	8004028 <HAL_InitTick>
 800543e:	1e03      	subs	r3, r0, #0
 8005440:	d051      	beq.n	80054e6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e221      	b.n	800588a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d030      	beq.n	80054b0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800544e:	4b5b      	ldr	r3, [pc, #364]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a5e      	ldr	r2, [pc, #376]	; (80055cc <HAL_RCC_OscConfig+0x33c>)
 8005454:	4013      	ands	r3, r2
 8005456:	0019      	movs	r1, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	4b57      	ldr	r3, [pc, #348]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 800545e:	430a      	orrs	r2, r1
 8005460:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005462:	4b56      	ldr	r3, [pc, #344]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	4b55      	ldr	r3, [pc, #340]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 8005468:	2180      	movs	r1, #128	; 0x80
 800546a:	0049      	lsls	r1, r1, #1
 800546c:	430a      	orrs	r2, r1
 800546e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005470:	f7fe fe36 	bl	80040e0 <HAL_GetTick>
 8005474:	0003      	movs	r3, r0
 8005476:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005478:	e008      	b.n	800548c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800547a:	f7fe fe31 	bl	80040e0 <HAL_GetTick>
 800547e:	0002      	movs	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e1fe      	b.n	800588a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800548c:	4b4b      	ldr	r3, [pc, #300]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	2380      	movs	r3, #128	; 0x80
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	4013      	ands	r3, r2
 8005496:	d0f0      	beq.n	800547a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005498:	4b48      	ldr	r3, [pc, #288]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	4a4a      	ldr	r2, [pc, #296]	; (80055c8 <HAL_RCC_OscConfig+0x338>)
 800549e:	4013      	ands	r3, r2
 80054a0:	0019      	movs	r1, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	021a      	lsls	r2, r3, #8
 80054a8:	4b44      	ldr	r3, [pc, #272]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 80054aa:	430a      	orrs	r2, r1
 80054ac:	605a      	str	r2, [r3, #4]
 80054ae:	e01b      	b.n	80054e8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80054b0:	4b42      	ldr	r3, [pc, #264]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	4b41      	ldr	r3, [pc, #260]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 80054b6:	4949      	ldr	r1, [pc, #292]	; (80055dc <HAL_RCC_OscConfig+0x34c>)
 80054b8:	400a      	ands	r2, r1
 80054ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054bc:	f7fe fe10 	bl	80040e0 <HAL_GetTick>
 80054c0:	0003      	movs	r3, r0
 80054c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054c4:	e008      	b.n	80054d8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054c6:	f7fe fe0b 	bl	80040e0 <HAL_GetTick>
 80054ca:	0002      	movs	r2, r0
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d901      	bls.n	80054d8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e1d8      	b.n	800588a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054d8:	4b38      	ldr	r3, [pc, #224]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	2380      	movs	r3, #128	; 0x80
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	4013      	ands	r3, r2
 80054e2:	d1f0      	bne.n	80054c6 <HAL_RCC_OscConfig+0x236>
 80054e4:	e000      	b.n	80054e8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054e6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2208      	movs	r2, #8
 80054ee:	4013      	ands	r3, r2
 80054f0:	d047      	beq.n	8005582 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80054f2:	4b32      	ldr	r3, [pc, #200]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	2238      	movs	r2, #56	; 0x38
 80054f8:	4013      	ands	r3, r2
 80054fa:	2b18      	cmp	r3, #24
 80054fc:	d10a      	bne.n	8005514 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80054fe:	4b2f      	ldr	r3, [pc, #188]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 8005500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005502:	2202      	movs	r2, #2
 8005504:	4013      	ands	r3, r2
 8005506:	d03c      	beq.n	8005582 <HAL_RCC_OscConfig+0x2f2>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d138      	bne.n	8005582 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e1ba      	b.n	800588a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d019      	beq.n	8005550 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800551c:	4b27      	ldr	r3, [pc, #156]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 800551e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005520:	4b26      	ldr	r3, [pc, #152]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 8005522:	2101      	movs	r1, #1
 8005524:	430a      	orrs	r2, r1
 8005526:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005528:	f7fe fdda 	bl	80040e0 <HAL_GetTick>
 800552c:	0003      	movs	r3, r0
 800552e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005530:	e008      	b.n	8005544 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005532:	f7fe fdd5 	bl	80040e0 <HAL_GetTick>
 8005536:	0002      	movs	r2, r0
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b02      	cmp	r3, #2
 800553e:	d901      	bls.n	8005544 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e1a2      	b.n	800588a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005544:	4b1d      	ldr	r3, [pc, #116]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 8005546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005548:	2202      	movs	r2, #2
 800554a:	4013      	ands	r3, r2
 800554c:	d0f1      	beq.n	8005532 <HAL_RCC_OscConfig+0x2a2>
 800554e:	e018      	b.n	8005582 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005550:	4b1a      	ldr	r3, [pc, #104]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 8005552:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005554:	4b19      	ldr	r3, [pc, #100]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 8005556:	2101      	movs	r1, #1
 8005558:	438a      	bics	r2, r1
 800555a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555c:	f7fe fdc0 	bl	80040e0 <HAL_GetTick>
 8005560:	0003      	movs	r3, r0
 8005562:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005564:	e008      	b.n	8005578 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005566:	f7fe fdbb 	bl	80040e0 <HAL_GetTick>
 800556a:	0002      	movs	r2, r0
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e188      	b.n	800588a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005578:	4b10      	ldr	r3, [pc, #64]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 800557a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800557c:	2202      	movs	r2, #2
 800557e:	4013      	ands	r3, r2
 8005580:	d1f1      	bne.n	8005566 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2204      	movs	r2, #4
 8005588:	4013      	ands	r3, r2
 800558a:	d100      	bne.n	800558e <HAL_RCC_OscConfig+0x2fe>
 800558c:	e0c6      	b.n	800571c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800558e:	231f      	movs	r3, #31
 8005590:	18fb      	adds	r3, r7, r3
 8005592:	2200      	movs	r2, #0
 8005594:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005596:	4b09      	ldr	r3, [pc, #36]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	2238      	movs	r2, #56	; 0x38
 800559c:	4013      	ands	r3, r2
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d11e      	bne.n	80055e0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80055a2:	4b06      	ldr	r3, [pc, #24]	; (80055bc <HAL_RCC_OscConfig+0x32c>)
 80055a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a6:	2202      	movs	r2, #2
 80055a8:	4013      	ands	r3, r2
 80055aa:	d100      	bne.n	80055ae <HAL_RCC_OscConfig+0x31e>
 80055ac:	e0b6      	b.n	800571c <HAL_RCC_OscConfig+0x48c>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d000      	beq.n	80055b8 <HAL_RCC_OscConfig+0x328>
 80055b6:	e0b1      	b.n	800571c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e166      	b.n	800588a <HAL_RCC_OscConfig+0x5fa>
 80055bc:	40021000 	.word	0x40021000
 80055c0:	fffeffff 	.word	0xfffeffff
 80055c4:	fffbffff 	.word	0xfffbffff
 80055c8:	ffff80ff 	.word	0xffff80ff
 80055cc:	ffffc7ff 	.word	0xffffc7ff
 80055d0:	00f42400 	.word	0x00f42400
 80055d4:	20000000 	.word	0x20000000
 80055d8:	20000004 	.word	0x20000004
 80055dc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055e0:	4bac      	ldr	r3, [pc, #688]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 80055e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055e4:	2380      	movs	r3, #128	; 0x80
 80055e6:	055b      	lsls	r3, r3, #21
 80055e8:	4013      	ands	r3, r2
 80055ea:	d101      	bne.n	80055f0 <HAL_RCC_OscConfig+0x360>
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <HAL_RCC_OscConfig+0x362>
 80055f0:	2300      	movs	r3, #0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d011      	beq.n	800561a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80055f6:	4ba7      	ldr	r3, [pc, #668]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 80055f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055fa:	4ba6      	ldr	r3, [pc, #664]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 80055fc:	2180      	movs	r1, #128	; 0x80
 80055fe:	0549      	lsls	r1, r1, #21
 8005600:	430a      	orrs	r2, r1
 8005602:	63da      	str	r2, [r3, #60]	; 0x3c
 8005604:	4ba3      	ldr	r3, [pc, #652]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 8005606:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005608:	2380      	movs	r3, #128	; 0x80
 800560a:	055b      	lsls	r3, r3, #21
 800560c:	4013      	ands	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005612:	231f      	movs	r3, #31
 8005614:	18fb      	adds	r3, r7, r3
 8005616:	2201      	movs	r2, #1
 8005618:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800561a:	4b9f      	ldr	r3, [pc, #636]	; (8005898 <HAL_RCC_OscConfig+0x608>)
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	2380      	movs	r3, #128	; 0x80
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	4013      	ands	r3, r2
 8005624:	d11a      	bne.n	800565c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005626:	4b9c      	ldr	r3, [pc, #624]	; (8005898 <HAL_RCC_OscConfig+0x608>)
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	4b9b      	ldr	r3, [pc, #620]	; (8005898 <HAL_RCC_OscConfig+0x608>)
 800562c:	2180      	movs	r1, #128	; 0x80
 800562e:	0049      	lsls	r1, r1, #1
 8005630:	430a      	orrs	r2, r1
 8005632:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005634:	f7fe fd54 	bl	80040e0 <HAL_GetTick>
 8005638:	0003      	movs	r3, r0
 800563a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800563e:	f7fe fd4f 	bl	80040e0 <HAL_GetTick>
 8005642:	0002      	movs	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e11c      	b.n	800588a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005650:	4b91      	ldr	r3, [pc, #580]	; (8005898 <HAL_RCC_OscConfig+0x608>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	2380      	movs	r3, #128	; 0x80
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	4013      	ands	r3, r2
 800565a:	d0f0      	beq.n	800563e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d106      	bne.n	8005672 <HAL_RCC_OscConfig+0x3e2>
 8005664:	4b8b      	ldr	r3, [pc, #556]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 8005666:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005668:	4b8a      	ldr	r3, [pc, #552]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 800566a:	2101      	movs	r1, #1
 800566c:	430a      	orrs	r2, r1
 800566e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005670:	e01c      	b.n	80056ac <HAL_RCC_OscConfig+0x41c>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	2b05      	cmp	r3, #5
 8005678:	d10c      	bne.n	8005694 <HAL_RCC_OscConfig+0x404>
 800567a:	4b86      	ldr	r3, [pc, #536]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 800567c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800567e:	4b85      	ldr	r3, [pc, #532]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 8005680:	2104      	movs	r1, #4
 8005682:	430a      	orrs	r2, r1
 8005684:	65da      	str	r2, [r3, #92]	; 0x5c
 8005686:	4b83      	ldr	r3, [pc, #524]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 8005688:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800568a:	4b82      	ldr	r3, [pc, #520]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 800568c:	2101      	movs	r1, #1
 800568e:	430a      	orrs	r2, r1
 8005690:	65da      	str	r2, [r3, #92]	; 0x5c
 8005692:	e00b      	b.n	80056ac <HAL_RCC_OscConfig+0x41c>
 8005694:	4b7f      	ldr	r3, [pc, #508]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 8005696:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005698:	4b7e      	ldr	r3, [pc, #504]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 800569a:	2101      	movs	r1, #1
 800569c:	438a      	bics	r2, r1
 800569e:	65da      	str	r2, [r3, #92]	; 0x5c
 80056a0:	4b7c      	ldr	r3, [pc, #496]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 80056a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056a4:	4b7b      	ldr	r3, [pc, #492]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 80056a6:	2104      	movs	r1, #4
 80056a8:	438a      	bics	r2, r1
 80056aa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d014      	beq.n	80056de <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b4:	f7fe fd14 	bl	80040e0 <HAL_GetTick>
 80056b8:	0003      	movs	r3, r0
 80056ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056bc:	e009      	b.n	80056d2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056be:	f7fe fd0f 	bl	80040e0 <HAL_GetTick>
 80056c2:	0002      	movs	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	4a74      	ldr	r2, [pc, #464]	; (800589c <HAL_RCC_OscConfig+0x60c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e0db      	b.n	800588a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056d2:	4b70      	ldr	r3, [pc, #448]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 80056d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d6:	2202      	movs	r2, #2
 80056d8:	4013      	ands	r3, r2
 80056da:	d0f0      	beq.n	80056be <HAL_RCC_OscConfig+0x42e>
 80056dc:	e013      	b.n	8005706 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056de:	f7fe fcff 	bl	80040e0 <HAL_GetTick>
 80056e2:	0003      	movs	r3, r0
 80056e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056e6:	e009      	b.n	80056fc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e8:	f7fe fcfa 	bl	80040e0 <HAL_GetTick>
 80056ec:	0002      	movs	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	4a6a      	ldr	r2, [pc, #424]	; (800589c <HAL_RCC_OscConfig+0x60c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d901      	bls.n	80056fc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e0c6      	b.n	800588a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056fc:	4b65      	ldr	r3, [pc, #404]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 80056fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005700:	2202      	movs	r2, #2
 8005702:	4013      	ands	r3, r2
 8005704:	d1f0      	bne.n	80056e8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005706:	231f      	movs	r3, #31
 8005708:	18fb      	adds	r3, r7, r3
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d105      	bne.n	800571c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005710:	4b60      	ldr	r3, [pc, #384]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 8005712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005714:	4b5f      	ldr	r3, [pc, #380]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 8005716:	4962      	ldr	r1, [pc, #392]	; (80058a0 <HAL_RCC_OscConfig+0x610>)
 8005718:	400a      	ands	r2, r1
 800571a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d100      	bne.n	8005726 <HAL_RCC_OscConfig+0x496>
 8005724:	e0b0      	b.n	8005888 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005726:	4b5b      	ldr	r3, [pc, #364]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2238      	movs	r2, #56	; 0x38
 800572c:	4013      	ands	r3, r2
 800572e:	2b10      	cmp	r3, #16
 8005730:	d100      	bne.n	8005734 <HAL_RCC_OscConfig+0x4a4>
 8005732:	e078      	b.n	8005826 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	2b02      	cmp	r3, #2
 800573a:	d153      	bne.n	80057e4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800573c:	4b55      	ldr	r3, [pc, #340]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	4b54      	ldr	r3, [pc, #336]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 8005742:	4958      	ldr	r1, [pc, #352]	; (80058a4 <HAL_RCC_OscConfig+0x614>)
 8005744:	400a      	ands	r2, r1
 8005746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005748:	f7fe fcca 	bl	80040e0 <HAL_GetTick>
 800574c:	0003      	movs	r3, r0
 800574e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005750:	e008      	b.n	8005764 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005752:	f7fe fcc5 	bl	80040e0 <HAL_GetTick>
 8005756:	0002      	movs	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e092      	b.n	800588a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005764:	4b4b      	ldr	r3, [pc, #300]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	2380      	movs	r3, #128	; 0x80
 800576a:	049b      	lsls	r3, r3, #18
 800576c:	4013      	ands	r3, r2
 800576e:	d1f0      	bne.n	8005752 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005770:	4b48      	ldr	r3, [pc, #288]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	4a4c      	ldr	r2, [pc, #304]	; (80058a8 <HAL_RCC_OscConfig+0x618>)
 8005776:	4013      	ands	r3, r2
 8005778:	0019      	movs	r1, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1a      	ldr	r2, [r3, #32]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	431a      	orrs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005788:	021b      	lsls	r3, r3, #8
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005790:	431a      	orrs	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005796:	431a      	orrs	r2, r3
 8005798:	4b3e      	ldr	r3, [pc, #248]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 800579a:	430a      	orrs	r2, r1
 800579c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800579e:	4b3d      	ldr	r3, [pc, #244]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	4b3c      	ldr	r3, [pc, #240]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 80057a4:	2180      	movs	r1, #128	; 0x80
 80057a6:	0449      	lsls	r1, r1, #17
 80057a8:	430a      	orrs	r2, r1
 80057aa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80057ac:	4b39      	ldr	r3, [pc, #228]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	4b38      	ldr	r3, [pc, #224]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 80057b2:	2180      	movs	r1, #128	; 0x80
 80057b4:	0549      	lsls	r1, r1, #21
 80057b6:	430a      	orrs	r2, r1
 80057b8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ba:	f7fe fc91 	bl	80040e0 <HAL_GetTick>
 80057be:	0003      	movs	r3, r0
 80057c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057c4:	f7fe fc8c 	bl	80040e0 <HAL_GetTick>
 80057c8:	0002      	movs	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e059      	b.n	800588a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057d6:	4b2f      	ldr	r3, [pc, #188]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	2380      	movs	r3, #128	; 0x80
 80057dc:	049b      	lsls	r3, r3, #18
 80057de:	4013      	ands	r3, r2
 80057e0:	d0f0      	beq.n	80057c4 <HAL_RCC_OscConfig+0x534>
 80057e2:	e051      	b.n	8005888 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057e4:	4b2b      	ldr	r3, [pc, #172]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	4b2a      	ldr	r3, [pc, #168]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 80057ea:	492e      	ldr	r1, [pc, #184]	; (80058a4 <HAL_RCC_OscConfig+0x614>)
 80057ec:	400a      	ands	r2, r1
 80057ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f0:	f7fe fc76 	bl	80040e0 <HAL_GetTick>
 80057f4:	0003      	movs	r3, r0
 80057f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057f8:	e008      	b.n	800580c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057fa:	f7fe fc71 	bl	80040e0 <HAL_GetTick>
 80057fe:	0002      	movs	r2, r0
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e03e      	b.n	800588a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800580c:	4b21      	ldr	r3, [pc, #132]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	2380      	movs	r3, #128	; 0x80
 8005812:	049b      	lsls	r3, r3, #18
 8005814:	4013      	ands	r3, r2
 8005816:	d1f0      	bne.n	80057fa <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8005818:	4b1e      	ldr	r3, [pc, #120]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 800581a:	68da      	ldr	r2, [r3, #12]
 800581c:	4b1d      	ldr	r3, [pc, #116]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 800581e:	4923      	ldr	r1, [pc, #140]	; (80058ac <HAL_RCC_OscConfig+0x61c>)
 8005820:	400a      	ands	r2, r1
 8005822:	60da      	str	r2, [r3, #12]
 8005824:	e030      	b.n	8005888 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e02b      	b.n	800588a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005832:	4b18      	ldr	r3, [pc, #96]	; (8005894 <HAL_RCC_OscConfig+0x604>)
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	2203      	movs	r2, #3
 800583c:	401a      	ands	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	429a      	cmp	r2, r3
 8005844:	d11e      	bne.n	8005884 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2270      	movs	r2, #112	; 0x70
 800584a:	401a      	ands	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005850:	429a      	cmp	r2, r3
 8005852:	d117      	bne.n	8005884 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	23fe      	movs	r3, #254	; 0xfe
 8005858:	01db      	lsls	r3, r3, #7
 800585a:	401a      	ands	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005860:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005862:	429a      	cmp	r2, r3
 8005864:	d10e      	bne.n	8005884 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	23f8      	movs	r3, #248	; 0xf8
 800586a:	039b      	lsls	r3, r3, #14
 800586c:	401a      	ands	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005872:	429a      	cmp	r2, r3
 8005874:	d106      	bne.n	8005884 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	0f5b      	lsrs	r3, r3, #29
 800587a:	075a      	lsls	r2, r3, #29
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005880:	429a      	cmp	r2, r3
 8005882:	d001      	beq.n	8005888 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e000      	b.n	800588a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	0018      	movs	r0, r3
 800588c:	46bd      	mov	sp, r7
 800588e:	b008      	add	sp, #32
 8005890:	bd80      	pop	{r7, pc}
 8005892:	46c0      	nop			; (mov r8, r8)
 8005894:	40021000 	.word	0x40021000
 8005898:	40007000 	.word	0x40007000
 800589c:	00001388 	.word	0x00001388
 80058a0:	efffffff 	.word	0xefffffff
 80058a4:	feffffff 	.word	0xfeffffff
 80058a8:	1fc1808c 	.word	0x1fc1808c
 80058ac:	effefffc 	.word	0xeffefffc

080058b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e0e9      	b.n	8005a98 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058c4:	4b76      	ldr	r3, [pc, #472]	; (8005aa0 <HAL_RCC_ClockConfig+0x1f0>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2207      	movs	r2, #7
 80058ca:	4013      	ands	r3, r2
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d91e      	bls.n	8005910 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058d2:	4b73      	ldr	r3, [pc, #460]	; (8005aa0 <HAL_RCC_ClockConfig+0x1f0>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2207      	movs	r2, #7
 80058d8:	4393      	bics	r3, r2
 80058da:	0019      	movs	r1, r3
 80058dc:	4b70      	ldr	r3, [pc, #448]	; (8005aa0 <HAL_RCC_ClockConfig+0x1f0>)
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058e4:	f7fe fbfc 	bl	80040e0 <HAL_GetTick>
 80058e8:	0003      	movs	r3, r0
 80058ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80058ec:	e009      	b.n	8005902 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ee:	f7fe fbf7 	bl	80040e0 <HAL_GetTick>
 80058f2:	0002      	movs	r2, r0
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	4a6a      	ldr	r2, [pc, #424]	; (8005aa4 <HAL_RCC_ClockConfig+0x1f4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e0ca      	b.n	8005a98 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005902:	4b67      	ldr	r3, [pc, #412]	; (8005aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2207      	movs	r2, #7
 8005908:	4013      	ands	r3, r2
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d1ee      	bne.n	80058ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2202      	movs	r2, #2
 8005916:	4013      	ands	r3, r2
 8005918:	d015      	beq.n	8005946 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2204      	movs	r2, #4
 8005920:	4013      	ands	r3, r2
 8005922:	d006      	beq.n	8005932 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005924:	4b60      	ldr	r3, [pc, #384]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	4b5f      	ldr	r3, [pc, #380]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 800592a:	21e0      	movs	r1, #224	; 0xe0
 800592c:	01c9      	lsls	r1, r1, #7
 800592e:	430a      	orrs	r2, r1
 8005930:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005932:	4b5d      	ldr	r3, [pc, #372]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	4a5d      	ldr	r2, [pc, #372]	; (8005aac <HAL_RCC_ClockConfig+0x1fc>)
 8005938:	4013      	ands	r3, r2
 800593a:	0019      	movs	r1, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	4b59      	ldr	r3, [pc, #356]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8005942:	430a      	orrs	r2, r1
 8005944:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2201      	movs	r2, #1
 800594c:	4013      	ands	r3, r2
 800594e:	d057      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d107      	bne.n	8005968 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005958:	4b53      	ldr	r3, [pc, #332]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	2380      	movs	r3, #128	; 0x80
 800595e:	029b      	lsls	r3, r3, #10
 8005960:	4013      	ands	r3, r2
 8005962:	d12b      	bne.n	80059bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e097      	b.n	8005a98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	2b02      	cmp	r3, #2
 800596e:	d107      	bne.n	8005980 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005970:	4b4d      	ldr	r3, [pc, #308]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	2380      	movs	r3, #128	; 0x80
 8005976:	049b      	lsls	r3, r3, #18
 8005978:	4013      	ands	r3, r2
 800597a:	d11f      	bne.n	80059bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e08b      	b.n	8005a98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d107      	bne.n	8005998 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005988:	4b47      	ldr	r3, [pc, #284]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	2380      	movs	r3, #128	; 0x80
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	4013      	ands	r3, r2
 8005992:	d113      	bne.n	80059bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e07f      	b.n	8005a98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2b03      	cmp	r3, #3
 800599e:	d106      	bne.n	80059ae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059a0:	4b41      	ldr	r3, [pc, #260]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80059a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a4:	2202      	movs	r2, #2
 80059a6:	4013      	ands	r3, r2
 80059a8:	d108      	bne.n	80059bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e074      	b.n	8005a98 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059ae:	4b3e      	ldr	r3, [pc, #248]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80059b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b2:	2202      	movs	r2, #2
 80059b4:	4013      	ands	r3, r2
 80059b6:	d101      	bne.n	80059bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e06d      	b.n	8005a98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059bc:	4b3a      	ldr	r3, [pc, #232]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	2207      	movs	r2, #7
 80059c2:	4393      	bics	r3, r2
 80059c4:	0019      	movs	r1, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	4b37      	ldr	r3, [pc, #220]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80059cc:	430a      	orrs	r2, r1
 80059ce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059d0:	f7fe fb86 	bl	80040e0 <HAL_GetTick>
 80059d4:	0003      	movs	r3, r0
 80059d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059d8:	e009      	b.n	80059ee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059da:	f7fe fb81 	bl	80040e0 <HAL_GetTick>
 80059de:	0002      	movs	r2, r0
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	4a2f      	ldr	r2, [pc, #188]	; (8005aa4 <HAL_RCC_ClockConfig+0x1f4>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e054      	b.n	8005a98 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ee:	4b2e      	ldr	r3, [pc, #184]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	2238      	movs	r2, #56	; 0x38
 80059f4:	401a      	ands	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d1ec      	bne.n	80059da <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a00:	4b27      	ldr	r3, [pc, #156]	; (8005aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2207      	movs	r2, #7
 8005a06:	4013      	ands	r3, r2
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d21e      	bcs.n	8005a4c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a0e:	4b24      	ldr	r3, [pc, #144]	; (8005aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2207      	movs	r2, #7
 8005a14:	4393      	bics	r3, r2
 8005a16:	0019      	movs	r1, r3
 8005a18:	4b21      	ldr	r3, [pc, #132]	; (8005aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a20:	f7fe fb5e 	bl	80040e0 <HAL_GetTick>
 8005a24:	0003      	movs	r3, r0
 8005a26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a28:	e009      	b.n	8005a3e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a2a:	f7fe fb59 	bl	80040e0 <HAL_GetTick>
 8005a2e:	0002      	movs	r2, r0
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	4a1b      	ldr	r2, [pc, #108]	; (8005aa4 <HAL_RCC_ClockConfig+0x1f4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e02c      	b.n	8005a98 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a3e:	4b18      	ldr	r3, [pc, #96]	; (8005aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2207      	movs	r2, #7
 8005a44:	4013      	ands	r3, r2
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d1ee      	bne.n	8005a2a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2204      	movs	r2, #4
 8005a52:	4013      	ands	r3, r2
 8005a54:	d009      	beq.n	8005a6a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005a56:	4b14      	ldr	r3, [pc, #80]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	4a15      	ldr	r2, [pc, #84]	; (8005ab0 <HAL_RCC_ClockConfig+0x200>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	0019      	movs	r1, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	4b10      	ldr	r3, [pc, #64]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8005a66:	430a      	orrs	r2, r1
 8005a68:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005a6a:	f000 f829 	bl	8005ac0 <HAL_RCC_GetSysClockFreq>
 8005a6e:	0001      	movs	r1, r0
 8005a70:	4b0d      	ldr	r3, [pc, #52]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	0a1b      	lsrs	r3, r3, #8
 8005a76:	220f      	movs	r2, #15
 8005a78:	401a      	ands	r2, r3
 8005a7a:	4b0e      	ldr	r3, [pc, #56]	; (8005ab4 <HAL_RCC_ClockConfig+0x204>)
 8005a7c:	0092      	lsls	r2, r2, #2
 8005a7e:	58d3      	ldr	r3, [r2, r3]
 8005a80:	221f      	movs	r2, #31
 8005a82:	4013      	ands	r3, r2
 8005a84:	000a      	movs	r2, r1
 8005a86:	40da      	lsrs	r2, r3
 8005a88:	4b0b      	ldr	r3, [pc, #44]	; (8005ab8 <HAL_RCC_ClockConfig+0x208>)
 8005a8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005a8c:	4b0b      	ldr	r3, [pc, #44]	; (8005abc <HAL_RCC_ClockConfig+0x20c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	0018      	movs	r0, r3
 8005a92:	f7fe fac9 	bl	8004028 <HAL_InitTick>
 8005a96:	0003      	movs	r3, r0
}
 8005a98:	0018      	movs	r0, r3
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	b004      	add	sp, #16
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	40022000 	.word	0x40022000
 8005aa4:	00001388 	.word	0x00001388
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	fffff0ff 	.word	0xfffff0ff
 8005ab0:	ffff8fff 	.word	0xffff8fff
 8005ab4:	08006b28 	.word	0x08006b28
 8005ab8:	20000000 	.word	0x20000000
 8005abc:	20000004 	.word	0x20000004

08005ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ac6:	4b3c      	ldr	r3, [pc, #240]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	2238      	movs	r2, #56	; 0x38
 8005acc:	4013      	ands	r3, r2
 8005ace:	d10f      	bne.n	8005af0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005ad0:	4b39      	ldr	r3, [pc, #228]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	0adb      	lsrs	r3, r3, #11
 8005ad6:	2207      	movs	r2, #7
 8005ad8:	4013      	ands	r3, r2
 8005ada:	2201      	movs	r2, #1
 8005adc:	409a      	lsls	r2, r3
 8005ade:	0013      	movs	r3, r2
 8005ae0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005ae2:	6839      	ldr	r1, [r7, #0]
 8005ae4:	4835      	ldr	r0, [pc, #212]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xfc>)
 8005ae6:	f7fa fb15 	bl	8000114 <__udivsi3>
 8005aea:	0003      	movs	r3, r0
 8005aec:	613b      	str	r3, [r7, #16]
 8005aee:	e05d      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005af0:	4b31      	ldr	r3, [pc, #196]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	2238      	movs	r2, #56	; 0x38
 8005af6:	4013      	ands	r3, r2
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d102      	bne.n	8005b02 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005afc:	4b30      	ldr	r3, [pc, #192]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0x100>)
 8005afe:	613b      	str	r3, [r7, #16]
 8005b00:	e054      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b02:	4b2d      	ldr	r3, [pc, #180]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	2238      	movs	r2, #56	; 0x38
 8005b08:	4013      	ands	r3, r2
 8005b0a:	2b10      	cmp	r3, #16
 8005b0c:	d138      	bne.n	8005b80 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005b0e:	4b2a      	ldr	r3, [pc, #168]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	2203      	movs	r2, #3
 8005b14:	4013      	ands	r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b18:	4b27      	ldr	r3, [pc, #156]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	091b      	lsrs	r3, r3, #4
 8005b1e:	2207      	movs	r2, #7
 8005b20:	4013      	ands	r3, r2
 8005b22:	3301      	adds	r3, #1
 8005b24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2b03      	cmp	r3, #3
 8005b2a:	d10d      	bne.n	8005b48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b2c:	68b9      	ldr	r1, [r7, #8]
 8005b2e:	4824      	ldr	r0, [pc, #144]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0x100>)
 8005b30:	f7fa faf0 	bl	8000114 <__udivsi3>
 8005b34:	0003      	movs	r3, r0
 8005b36:	0019      	movs	r1, r3
 8005b38:	4b1f      	ldr	r3, [pc, #124]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	0a1b      	lsrs	r3, r3, #8
 8005b3e:	227f      	movs	r2, #127	; 0x7f
 8005b40:	4013      	ands	r3, r2
 8005b42:	434b      	muls	r3, r1
 8005b44:	617b      	str	r3, [r7, #20]
        break;
 8005b46:	e00d      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	481c      	ldr	r0, [pc, #112]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b4c:	f7fa fae2 	bl	8000114 <__udivsi3>
 8005b50:	0003      	movs	r3, r0
 8005b52:	0019      	movs	r1, r3
 8005b54:	4b18      	ldr	r3, [pc, #96]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	0a1b      	lsrs	r3, r3, #8
 8005b5a:	227f      	movs	r2, #127	; 0x7f
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	434b      	muls	r3, r1
 8005b60:	617b      	str	r3, [r7, #20]
        break;
 8005b62:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005b64:	4b14      	ldr	r3, [pc, #80]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	0f5b      	lsrs	r3, r3, #29
 8005b6a:	2207      	movs	r2, #7
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	3301      	adds	r3, #1
 8005b70:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005b72:	6879      	ldr	r1, [r7, #4]
 8005b74:	6978      	ldr	r0, [r7, #20]
 8005b76:	f7fa facd 	bl	8000114 <__udivsi3>
 8005b7a:	0003      	movs	r3, r0
 8005b7c:	613b      	str	r3, [r7, #16]
 8005b7e:	e015      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005b80:	4b0d      	ldr	r3, [pc, #52]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	2238      	movs	r2, #56	; 0x38
 8005b86:	4013      	ands	r3, r2
 8005b88:	2b20      	cmp	r3, #32
 8005b8a:	d103      	bne.n	8005b94 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005b8c:	2380      	movs	r3, #128	; 0x80
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	613b      	str	r3, [r7, #16]
 8005b92:	e00b      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005b94:	4b08      	ldr	r3, [pc, #32]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2238      	movs	r2, #56	; 0x38
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b18      	cmp	r3, #24
 8005b9e:	d103      	bne.n	8005ba8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005ba0:	23fa      	movs	r3, #250	; 0xfa
 8005ba2:	01db      	lsls	r3, r3, #7
 8005ba4:	613b      	str	r3, [r7, #16]
 8005ba6:	e001      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005bac:	693b      	ldr	r3, [r7, #16]
}
 8005bae:	0018      	movs	r0, r3
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	b006      	add	sp, #24
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	00f42400 	.word	0x00f42400
 8005bc0:	007a1200 	.word	0x007a1200

08005bc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005bcc:	2313      	movs	r3, #19
 8005bce:	18fb      	adds	r3, r7, r3
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bd4:	2312      	movs	r3, #18
 8005bd6:	18fb      	adds	r3, r7, r3
 8005bd8:	2200      	movs	r2, #0
 8005bda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	2380      	movs	r3, #128	; 0x80
 8005be2:	029b      	lsls	r3, r3, #10
 8005be4:	4013      	ands	r3, r2
 8005be6:	d100      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005be8:	e0a3      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bea:	2011      	movs	r0, #17
 8005bec:	183b      	adds	r3, r7, r0
 8005bee:	2200      	movs	r2, #0
 8005bf0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bf2:	4b7f      	ldr	r3, [pc, #508]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005bf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bf6:	2380      	movs	r3, #128	; 0x80
 8005bf8:	055b      	lsls	r3, r3, #21
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d110      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bfe:	4b7c      	ldr	r3, [pc, #496]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005c00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c02:	4b7b      	ldr	r3, [pc, #492]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005c04:	2180      	movs	r1, #128	; 0x80
 8005c06:	0549      	lsls	r1, r1, #21
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8005c0c:	4b78      	ldr	r3, [pc, #480]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c10:	2380      	movs	r3, #128	; 0x80
 8005c12:	055b      	lsls	r3, r3, #21
 8005c14:	4013      	ands	r3, r2
 8005c16:	60bb      	str	r3, [r7, #8]
 8005c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c1a:	183b      	adds	r3, r7, r0
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c20:	4b74      	ldr	r3, [pc, #464]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	4b73      	ldr	r3, [pc, #460]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005c26:	2180      	movs	r1, #128	; 0x80
 8005c28:	0049      	lsls	r1, r1, #1
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c2e:	f7fe fa57 	bl	80040e0 <HAL_GetTick>
 8005c32:	0003      	movs	r3, r0
 8005c34:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c36:	e00b      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c38:	f7fe fa52 	bl	80040e0 <HAL_GetTick>
 8005c3c:	0002      	movs	r2, r0
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d904      	bls.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005c46:	2313      	movs	r3, #19
 8005c48:	18fb      	adds	r3, r7, r3
 8005c4a:	2203      	movs	r2, #3
 8005c4c:	701a      	strb	r2, [r3, #0]
        break;
 8005c4e:	e005      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c50:	4b68      	ldr	r3, [pc, #416]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	2380      	movs	r3, #128	; 0x80
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	4013      	ands	r3, r2
 8005c5a:	d0ed      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005c5c:	2313      	movs	r3, #19
 8005c5e:	18fb      	adds	r3, r7, r3
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d154      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c66:	4b62      	ldr	r3, [pc, #392]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005c68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c6a:	23c0      	movs	r3, #192	; 0xc0
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4013      	ands	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d019      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d014      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c82:	4b5b      	ldr	r3, [pc, #364]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c86:	4a5c      	ldr	r2, [pc, #368]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005c88:	4013      	ands	r3, r2
 8005c8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c8c:	4b58      	ldr	r3, [pc, #352]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005c8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c90:	4b57      	ldr	r3, [pc, #348]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005c92:	2180      	movs	r1, #128	; 0x80
 8005c94:	0249      	lsls	r1, r1, #9
 8005c96:	430a      	orrs	r2, r1
 8005c98:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c9a:	4b55      	ldr	r3, [pc, #340]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005c9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c9e:	4b54      	ldr	r3, [pc, #336]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ca0:	4956      	ldr	r1, [pc, #344]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8005ca2:	400a      	ands	r2, r1
 8005ca4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ca6:	4b52      	ldr	r3, [pc, #328]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	d016      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb4:	f7fe fa14 	bl	80040e0 <HAL_GetTick>
 8005cb8:	0003      	movs	r3, r0
 8005cba:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cbc:	e00c      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cbe:	f7fe fa0f 	bl	80040e0 <HAL_GetTick>
 8005cc2:	0002      	movs	r2, r0
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	4a4d      	ldr	r2, [pc, #308]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d904      	bls.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005cce:	2313      	movs	r3, #19
 8005cd0:	18fb      	adds	r3, r7, r3
 8005cd2:	2203      	movs	r2, #3
 8005cd4:	701a      	strb	r2, [r3, #0]
            break;
 8005cd6:	e004      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cd8:	4b45      	ldr	r3, [pc, #276]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cdc:	2202      	movs	r2, #2
 8005cde:	4013      	ands	r3, r2
 8005ce0:	d0ed      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005ce2:	2313      	movs	r3, #19
 8005ce4:	18fb      	adds	r3, r7, r3
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10a      	bne.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cec:	4b40      	ldr	r3, [pc, #256]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf0:	4a41      	ldr	r2, [pc, #260]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	0019      	movs	r1, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	695a      	ldr	r2, [r3, #20]
 8005cfa:	4b3d      	ldr	r3, [pc, #244]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d00:	e00c      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d02:	2312      	movs	r3, #18
 8005d04:	18fb      	adds	r3, r7, r3
 8005d06:	2213      	movs	r2, #19
 8005d08:	18ba      	adds	r2, r7, r2
 8005d0a:	7812      	ldrb	r2, [r2, #0]
 8005d0c:	701a      	strb	r2, [r3, #0]
 8005d0e:	e005      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d10:	2312      	movs	r3, #18
 8005d12:	18fb      	adds	r3, r7, r3
 8005d14:	2213      	movs	r2, #19
 8005d16:	18ba      	adds	r2, r7, r2
 8005d18:	7812      	ldrb	r2, [r2, #0]
 8005d1a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d1c:	2311      	movs	r3, #17
 8005d1e:	18fb      	adds	r3, r7, r3
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d105      	bne.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d26:	4b32      	ldr	r3, [pc, #200]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d2a:	4b31      	ldr	r3, [pc, #196]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d2c:	4935      	ldr	r1, [pc, #212]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d2e:	400a      	ands	r2, r1
 8005d30:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2201      	movs	r2, #1
 8005d38:	4013      	ands	r3, r2
 8005d3a:	d009      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d3c:	4b2c      	ldr	r3, [pc, #176]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d40:	2203      	movs	r2, #3
 8005d42:	4393      	bics	r3, r2
 8005d44:	0019      	movs	r1, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	4b29      	ldr	r3, [pc, #164]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2220      	movs	r2, #32
 8005d56:	4013      	ands	r3, r2
 8005d58:	d009      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d5a:	4b25      	ldr	r3, [pc, #148]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5e:	4a2a      	ldr	r2, [pc, #168]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	0019      	movs	r1, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	4b21      	ldr	r3, [pc, #132]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	2380      	movs	r3, #128	; 0x80
 8005d74:	01db      	lsls	r3, r3, #7
 8005d76:	4013      	ands	r3, r2
 8005d78:	d015      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d7a:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	0899      	lsrs	r1, r3, #2
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	4b1a      	ldr	r3, [pc, #104]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	2380      	movs	r3, #128	; 0x80
 8005d92:	05db      	lsls	r3, r3, #23
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d106      	bne.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005d98:	4b15      	ldr	r3, [pc, #84]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	4b14      	ldr	r3, [pc, #80]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005d9e:	2180      	movs	r1, #128	; 0x80
 8005da0:	0249      	lsls	r1, r1, #9
 8005da2:	430a      	orrs	r2, r1
 8005da4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	2380      	movs	r3, #128	; 0x80
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	4013      	ands	r3, r2
 8005db0:	d016      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005db2:	4b0f      	ldr	r3, [pc, #60]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db6:	4a15      	ldr	r2, [pc, #84]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	0019      	movs	r1, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68da      	ldr	r2, [r3, #12]
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	2380      	movs	r3, #128	; 0x80
 8005dcc:	01db      	lsls	r3, r3, #7
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d106      	bne.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005dd2:	4b07      	ldr	r3, [pc, #28]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	4b06      	ldr	r3, [pc, #24]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005dd8:	2180      	movs	r1, #128	; 0x80
 8005dda:	0249      	lsls	r1, r1, #9
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005de0:	2312      	movs	r3, #18
 8005de2:	18fb      	adds	r3, r7, r3
 8005de4:	781b      	ldrb	r3, [r3, #0]
}
 8005de6:	0018      	movs	r0, r3
 8005de8:	46bd      	mov	sp, r7
 8005dea:	b006      	add	sp, #24
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	46c0      	nop			; (mov r8, r8)
 8005df0:	40021000 	.word	0x40021000
 8005df4:	40007000 	.word	0x40007000
 8005df8:	fffffcff 	.word	0xfffffcff
 8005dfc:	fffeffff 	.word	0xfffeffff
 8005e00:	00001388 	.word	0x00001388
 8005e04:	efffffff 	.word	0xefffffff
 8005e08:	ffffcfff 	.word	0xffffcfff
 8005e0c:	ffff3fff 	.word	0xffff3fff

08005e10 <__errno>:
 8005e10:	4b01      	ldr	r3, [pc, #4]	; (8005e18 <__errno+0x8>)
 8005e12:	6818      	ldr	r0, [r3, #0]
 8005e14:	4770      	bx	lr
 8005e16:	46c0      	nop			; (mov r8, r8)
 8005e18:	2000000c 	.word	0x2000000c

08005e1c <__libc_init_array>:
 8005e1c:	b570      	push	{r4, r5, r6, lr}
 8005e1e:	2600      	movs	r6, #0
 8005e20:	4d0c      	ldr	r5, [pc, #48]	; (8005e54 <__libc_init_array+0x38>)
 8005e22:	4c0d      	ldr	r4, [pc, #52]	; (8005e58 <__libc_init_array+0x3c>)
 8005e24:	1b64      	subs	r4, r4, r5
 8005e26:	10a4      	asrs	r4, r4, #2
 8005e28:	42a6      	cmp	r6, r4
 8005e2a:	d109      	bne.n	8005e40 <__libc_init_array+0x24>
 8005e2c:	2600      	movs	r6, #0
 8005e2e:	f000 fd23 	bl	8006878 <_init>
 8005e32:	4d0a      	ldr	r5, [pc, #40]	; (8005e5c <__libc_init_array+0x40>)
 8005e34:	4c0a      	ldr	r4, [pc, #40]	; (8005e60 <__libc_init_array+0x44>)
 8005e36:	1b64      	subs	r4, r4, r5
 8005e38:	10a4      	asrs	r4, r4, #2
 8005e3a:	42a6      	cmp	r6, r4
 8005e3c:	d105      	bne.n	8005e4a <__libc_init_array+0x2e>
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
 8005e40:	00b3      	lsls	r3, r6, #2
 8005e42:	58eb      	ldr	r3, [r5, r3]
 8005e44:	4798      	blx	r3
 8005e46:	3601      	adds	r6, #1
 8005e48:	e7ee      	b.n	8005e28 <__libc_init_array+0xc>
 8005e4a:	00b3      	lsls	r3, r6, #2
 8005e4c:	58eb      	ldr	r3, [r5, r3]
 8005e4e:	4798      	blx	r3
 8005e50:	3601      	adds	r6, #1
 8005e52:	e7f2      	b.n	8005e3a <__libc_init_array+0x1e>
 8005e54:	08006b9c 	.word	0x08006b9c
 8005e58:	08006b9c 	.word	0x08006b9c
 8005e5c:	08006b9c 	.word	0x08006b9c
 8005e60:	08006ba0 	.word	0x08006ba0

08005e64 <malloc>:
 8005e64:	b510      	push	{r4, lr}
 8005e66:	4b03      	ldr	r3, [pc, #12]	; (8005e74 <malloc+0x10>)
 8005e68:	0001      	movs	r1, r0
 8005e6a:	6818      	ldr	r0, [r3, #0]
 8005e6c:	f000 f882 	bl	8005f74 <_malloc_r>
 8005e70:	bd10      	pop	{r4, pc}
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	2000000c 	.word	0x2000000c

08005e78 <free>:
 8005e78:	b510      	push	{r4, lr}
 8005e7a:	4b03      	ldr	r3, [pc, #12]	; (8005e88 <free+0x10>)
 8005e7c:	0001      	movs	r1, r0
 8005e7e:	6818      	ldr	r0, [r3, #0]
 8005e80:	f000 f80c 	bl	8005e9c <_free_r>
 8005e84:	bd10      	pop	{r4, pc}
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	2000000c 	.word	0x2000000c

08005e8c <memset>:
 8005e8c:	0003      	movs	r3, r0
 8005e8e:	1882      	adds	r2, r0, r2
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d100      	bne.n	8005e96 <memset+0xa>
 8005e94:	4770      	bx	lr
 8005e96:	7019      	strb	r1, [r3, #0]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	e7f9      	b.n	8005e90 <memset+0x4>

08005e9c <_free_r>:
 8005e9c:	b570      	push	{r4, r5, r6, lr}
 8005e9e:	0005      	movs	r5, r0
 8005ea0:	2900      	cmp	r1, #0
 8005ea2:	d010      	beq.n	8005ec6 <_free_r+0x2a>
 8005ea4:	1f0c      	subs	r4, r1, #4
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	da00      	bge.n	8005eae <_free_r+0x12>
 8005eac:	18e4      	adds	r4, r4, r3
 8005eae:	0028      	movs	r0, r5
 8005eb0:	f000 f91a 	bl	80060e8 <__malloc_lock>
 8005eb4:	4a1d      	ldr	r2, [pc, #116]	; (8005f2c <_free_r+0x90>)
 8005eb6:	6813      	ldr	r3, [r2, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d105      	bne.n	8005ec8 <_free_r+0x2c>
 8005ebc:	6063      	str	r3, [r4, #4]
 8005ebe:	6014      	str	r4, [r2, #0]
 8005ec0:	0028      	movs	r0, r5
 8005ec2:	f000 f919 	bl	80060f8 <__malloc_unlock>
 8005ec6:	bd70      	pop	{r4, r5, r6, pc}
 8005ec8:	42a3      	cmp	r3, r4
 8005eca:	d908      	bls.n	8005ede <_free_r+0x42>
 8005ecc:	6821      	ldr	r1, [r4, #0]
 8005ece:	1860      	adds	r0, r4, r1
 8005ed0:	4283      	cmp	r3, r0
 8005ed2:	d1f3      	bne.n	8005ebc <_free_r+0x20>
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	1841      	adds	r1, r0, r1
 8005eda:	6021      	str	r1, [r4, #0]
 8005edc:	e7ee      	b.n	8005ebc <_free_r+0x20>
 8005ede:	001a      	movs	r2, r3
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <_free_r+0x4e>
 8005ee6:	42a3      	cmp	r3, r4
 8005ee8:	d9f9      	bls.n	8005ede <_free_r+0x42>
 8005eea:	6811      	ldr	r1, [r2, #0]
 8005eec:	1850      	adds	r0, r2, r1
 8005eee:	42a0      	cmp	r0, r4
 8005ef0:	d10b      	bne.n	8005f0a <_free_r+0x6e>
 8005ef2:	6820      	ldr	r0, [r4, #0]
 8005ef4:	1809      	adds	r1, r1, r0
 8005ef6:	1850      	adds	r0, r2, r1
 8005ef8:	6011      	str	r1, [r2, #0]
 8005efa:	4283      	cmp	r3, r0
 8005efc:	d1e0      	bne.n	8005ec0 <_free_r+0x24>
 8005efe:	6818      	ldr	r0, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	1841      	adds	r1, r0, r1
 8005f04:	6011      	str	r1, [r2, #0]
 8005f06:	6053      	str	r3, [r2, #4]
 8005f08:	e7da      	b.n	8005ec0 <_free_r+0x24>
 8005f0a:	42a0      	cmp	r0, r4
 8005f0c:	d902      	bls.n	8005f14 <_free_r+0x78>
 8005f0e:	230c      	movs	r3, #12
 8005f10:	602b      	str	r3, [r5, #0]
 8005f12:	e7d5      	b.n	8005ec0 <_free_r+0x24>
 8005f14:	6821      	ldr	r1, [r4, #0]
 8005f16:	1860      	adds	r0, r4, r1
 8005f18:	4283      	cmp	r3, r0
 8005f1a:	d103      	bne.n	8005f24 <_free_r+0x88>
 8005f1c:	6818      	ldr	r0, [r3, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	1841      	adds	r1, r0, r1
 8005f22:	6021      	str	r1, [r4, #0]
 8005f24:	6063      	str	r3, [r4, #4]
 8005f26:	6054      	str	r4, [r2, #4]
 8005f28:	e7ca      	b.n	8005ec0 <_free_r+0x24>
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	200002b4 	.word	0x200002b4

08005f30 <sbrk_aligned>:
 8005f30:	b570      	push	{r4, r5, r6, lr}
 8005f32:	4e0f      	ldr	r6, [pc, #60]	; (8005f70 <sbrk_aligned+0x40>)
 8005f34:	000d      	movs	r5, r1
 8005f36:	6831      	ldr	r1, [r6, #0]
 8005f38:	0004      	movs	r4, r0
 8005f3a:	2900      	cmp	r1, #0
 8005f3c:	d102      	bne.n	8005f44 <sbrk_aligned+0x14>
 8005f3e:	f000 f88f 	bl	8006060 <_sbrk_r>
 8005f42:	6030      	str	r0, [r6, #0]
 8005f44:	0029      	movs	r1, r5
 8005f46:	0020      	movs	r0, r4
 8005f48:	f000 f88a 	bl	8006060 <_sbrk_r>
 8005f4c:	1c43      	adds	r3, r0, #1
 8005f4e:	d00a      	beq.n	8005f66 <sbrk_aligned+0x36>
 8005f50:	2303      	movs	r3, #3
 8005f52:	1cc5      	adds	r5, r0, #3
 8005f54:	439d      	bics	r5, r3
 8005f56:	42a8      	cmp	r0, r5
 8005f58:	d007      	beq.n	8005f6a <sbrk_aligned+0x3a>
 8005f5a:	1a29      	subs	r1, r5, r0
 8005f5c:	0020      	movs	r0, r4
 8005f5e:	f000 f87f 	bl	8006060 <_sbrk_r>
 8005f62:	1c43      	adds	r3, r0, #1
 8005f64:	d101      	bne.n	8005f6a <sbrk_aligned+0x3a>
 8005f66:	2501      	movs	r5, #1
 8005f68:	426d      	negs	r5, r5
 8005f6a:	0028      	movs	r0, r5
 8005f6c:	bd70      	pop	{r4, r5, r6, pc}
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	200002b8 	.word	0x200002b8

08005f74 <_malloc_r>:
 8005f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f76:	2203      	movs	r2, #3
 8005f78:	1ccb      	adds	r3, r1, #3
 8005f7a:	4393      	bics	r3, r2
 8005f7c:	3308      	adds	r3, #8
 8005f7e:	0006      	movs	r6, r0
 8005f80:	001f      	movs	r7, r3
 8005f82:	2b0c      	cmp	r3, #12
 8005f84:	d232      	bcs.n	8005fec <_malloc_r+0x78>
 8005f86:	270c      	movs	r7, #12
 8005f88:	42b9      	cmp	r1, r7
 8005f8a:	d831      	bhi.n	8005ff0 <_malloc_r+0x7c>
 8005f8c:	0030      	movs	r0, r6
 8005f8e:	f000 f8ab 	bl	80060e8 <__malloc_lock>
 8005f92:	4d32      	ldr	r5, [pc, #200]	; (800605c <_malloc_r+0xe8>)
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	001c      	movs	r4, r3
 8005f98:	2c00      	cmp	r4, #0
 8005f9a:	d12e      	bne.n	8005ffa <_malloc_r+0x86>
 8005f9c:	0039      	movs	r1, r7
 8005f9e:	0030      	movs	r0, r6
 8005fa0:	f7ff ffc6 	bl	8005f30 <sbrk_aligned>
 8005fa4:	0004      	movs	r4, r0
 8005fa6:	1c43      	adds	r3, r0, #1
 8005fa8:	d11e      	bne.n	8005fe8 <_malloc_r+0x74>
 8005faa:	682c      	ldr	r4, [r5, #0]
 8005fac:	0025      	movs	r5, r4
 8005fae:	2d00      	cmp	r5, #0
 8005fb0:	d14a      	bne.n	8006048 <_malloc_r+0xd4>
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	0029      	movs	r1, r5
 8005fb6:	18e3      	adds	r3, r4, r3
 8005fb8:	0030      	movs	r0, r6
 8005fba:	9301      	str	r3, [sp, #4]
 8005fbc:	f000 f850 	bl	8006060 <_sbrk_r>
 8005fc0:	9b01      	ldr	r3, [sp, #4]
 8005fc2:	4283      	cmp	r3, r0
 8005fc4:	d143      	bne.n	800604e <_malloc_r+0xda>
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	3703      	adds	r7, #3
 8005fca:	1aff      	subs	r7, r7, r3
 8005fcc:	2303      	movs	r3, #3
 8005fce:	439f      	bics	r7, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	2f0c      	cmp	r7, #12
 8005fd4:	d200      	bcs.n	8005fd8 <_malloc_r+0x64>
 8005fd6:	270c      	movs	r7, #12
 8005fd8:	0039      	movs	r1, r7
 8005fda:	0030      	movs	r0, r6
 8005fdc:	f7ff ffa8 	bl	8005f30 <sbrk_aligned>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d034      	beq.n	800604e <_malloc_r+0xda>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	19df      	adds	r7, r3, r7
 8005fe8:	6027      	str	r7, [r4, #0]
 8005fea:	e013      	b.n	8006014 <_malloc_r+0xa0>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	dacb      	bge.n	8005f88 <_malloc_r+0x14>
 8005ff0:	230c      	movs	r3, #12
 8005ff2:	2500      	movs	r5, #0
 8005ff4:	6033      	str	r3, [r6, #0]
 8005ff6:	0028      	movs	r0, r5
 8005ff8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ffa:	6822      	ldr	r2, [r4, #0]
 8005ffc:	1bd1      	subs	r1, r2, r7
 8005ffe:	d420      	bmi.n	8006042 <_malloc_r+0xce>
 8006000:	290b      	cmp	r1, #11
 8006002:	d917      	bls.n	8006034 <_malloc_r+0xc0>
 8006004:	19e2      	adds	r2, r4, r7
 8006006:	6027      	str	r7, [r4, #0]
 8006008:	42a3      	cmp	r3, r4
 800600a:	d111      	bne.n	8006030 <_malloc_r+0xbc>
 800600c:	602a      	str	r2, [r5, #0]
 800600e:	6863      	ldr	r3, [r4, #4]
 8006010:	6011      	str	r1, [r2, #0]
 8006012:	6053      	str	r3, [r2, #4]
 8006014:	0030      	movs	r0, r6
 8006016:	0025      	movs	r5, r4
 8006018:	f000 f86e 	bl	80060f8 <__malloc_unlock>
 800601c:	2207      	movs	r2, #7
 800601e:	350b      	adds	r5, #11
 8006020:	1d23      	adds	r3, r4, #4
 8006022:	4395      	bics	r5, r2
 8006024:	1aea      	subs	r2, r5, r3
 8006026:	429d      	cmp	r5, r3
 8006028:	d0e5      	beq.n	8005ff6 <_malloc_r+0x82>
 800602a:	1b5b      	subs	r3, r3, r5
 800602c:	50a3      	str	r3, [r4, r2]
 800602e:	e7e2      	b.n	8005ff6 <_malloc_r+0x82>
 8006030:	605a      	str	r2, [r3, #4]
 8006032:	e7ec      	b.n	800600e <_malloc_r+0x9a>
 8006034:	6862      	ldr	r2, [r4, #4]
 8006036:	42a3      	cmp	r3, r4
 8006038:	d101      	bne.n	800603e <_malloc_r+0xca>
 800603a:	602a      	str	r2, [r5, #0]
 800603c:	e7ea      	b.n	8006014 <_malloc_r+0xa0>
 800603e:	605a      	str	r2, [r3, #4]
 8006040:	e7e8      	b.n	8006014 <_malloc_r+0xa0>
 8006042:	0023      	movs	r3, r4
 8006044:	6864      	ldr	r4, [r4, #4]
 8006046:	e7a7      	b.n	8005f98 <_malloc_r+0x24>
 8006048:	002c      	movs	r4, r5
 800604a:	686d      	ldr	r5, [r5, #4]
 800604c:	e7af      	b.n	8005fae <_malloc_r+0x3a>
 800604e:	230c      	movs	r3, #12
 8006050:	0030      	movs	r0, r6
 8006052:	6033      	str	r3, [r6, #0]
 8006054:	f000 f850 	bl	80060f8 <__malloc_unlock>
 8006058:	e7cd      	b.n	8005ff6 <_malloc_r+0x82>
 800605a:	46c0      	nop			; (mov r8, r8)
 800605c:	200002b4 	.word	0x200002b4

08006060 <_sbrk_r>:
 8006060:	2300      	movs	r3, #0
 8006062:	b570      	push	{r4, r5, r6, lr}
 8006064:	4d06      	ldr	r5, [pc, #24]	; (8006080 <_sbrk_r+0x20>)
 8006066:	0004      	movs	r4, r0
 8006068:	0008      	movs	r0, r1
 800606a:	602b      	str	r3, [r5, #0]
 800606c:	f7fd fd04 	bl	8003a78 <_sbrk>
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d103      	bne.n	800607c <_sbrk_r+0x1c>
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d000      	beq.n	800607c <_sbrk_r+0x1c>
 800607a:	6023      	str	r3, [r4, #0]
 800607c:	bd70      	pop	{r4, r5, r6, pc}
 800607e:	46c0      	nop			; (mov r8, r8)
 8006080:	200002bc 	.word	0x200002bc

08006084 <siprintf>:
 8006084:	b40e      	push	{r1, r2, r3}
 8006086:	b500      	push	{lr}
 8006088:	490b      	ldr	r1, [pc, #44]	; (80060b8 <siprintf+0x34>)
 800608a:	b09c      	sub	sp, #112	; 0x70
 800608c:	ab1d      	add	r3, sp, #116	; 0x74
 800608e:	9002      	str	r0, [sp, #8]
 8006090:	9006      	str	r0, [sp, #24]
 8006092:	9107      	str	r1, [sp, #28]
 8006094:	9104      	str	r1, [sp, #16]
 8006096:	4809      	ldr	r0, [pc, #36]	; (80060bc <siprintf+0x38>)
 8006098:	4909      	ldr	r1, [pc, #36]	; (80060c0 <siprintf+0x3c>)
 800609a:	cb04      	ldmia	r3!, {r2}
 800609c:	9105      	str	r1, [sp, #20]
 800609e:	6800      	ldr	r0, [r0, #0]
 80060a0:	a902      	add	r1, sp, #8
 80060a2:	9301      	str	r3, [sp, #4]
 80060a4:	f000 f892 	bl	80061cc <_svfiprintf_r>
 80060a8:	2300      	movs	r3, #0
 80060aa:	9a02      	ldr	r2, [sp, #8]
 80060ac:	7013      	strb	r3, [r2, #0]
 80060ae:	b01c      	add	sp, #112	; 0x70
 80060b0:	bc08      	pop	{r3}
 80060b2:	b003      	add	sp, #12
 80060b4:	4718      	bx	r3
 80060b6:	46c0      	nop			; (mov r8, r8)
 80060b8:	7fffffff 	.word	0x7fffffff
 80060bc:	2000000c 	.word	0x2000000c
 80060c0:	ffff0208 	.word	0xffff0208

080060c4 <strncmp>:
 80060c4:	b530      	push	{r4, r5, lr}
 80060c6:	0005      	movs	r5, r0
 80060c8:	1e10      	subs	r0, r2, #0
 80060ca:	d008      	beq.n	80060de <strncmp+0x1a>
 80060cc:	2400      	movs	r4, #0
 80060ce:	3a01      	subs	r2, #1
 80060d0:	5d2b      	ldrb	r3, [r5, r4]
 80060d2:	5d08      	ldrb	r0, [r1, r4]
 80060d4:	4283      	cmp	r3, r0
 80060d6:	d101      	bne.n	80060dc <strncmp+0x18>
 80060d8:	4294      	cmp	r4, r2
 80060da:	d101      	bne.n	80060e0 <strncmp+0x1c>
 80060dc:	1a18      	subs	r0, r3, r0
 80060de:	bd30      	pop	{r4, r5, pc}
 80060e0:	3401      	adds	r4, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1f4      	bne.n	80060d0 <strncmp+0xc>
 80060e6:	e7f9      	b.n	80060dc <strncmp+0x18>

080060e8 <__malloc_lock>:
 80060e8:	b510      	push	{r4, lr}
 80060ea:	4802      	ldr	r0, [pc, #8]	; (80060f4 <__malloc_lock+0xc>)
 80060ec:	f000 faf0 	bl	80066d0 <__retarget_lock_acquire_recursive>
 80060f0:	bd10      	pop	{r4, pc}
 80060f2:	46c0      	nop			; (mov r8, r8)
 80060f4:	200002c0 	.word	0x200002c0

080060f8 <__malloc_unlock>:
 80060f8:	b510      	push	{r4, lr}
 80060fa:	4802      	ldr	r0, [pc, #8]	; (8006104 <__malloc_unlock+0xc>)
 80060fc:	f000 fae9 	bl	80066d2 <__retarget_lock_release_recursive>
 8006100:	bd10      	pop	{r4, pc}
 8006102:	46c0      	nop			; (mov r8, r8)
 8006104:	200002c0 	.word	0x200002c0

08006108 <__ssputs_r>:
 8006108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800610a:	688e      	ldr	r6, [r1, #8]
 800610c:	b085      	sub	sp, #20
 800610e:	0007      	movs	r7, r0
 8006110:	000c      	movs	r4, r1
 8006112:	9203      	str	r2, [sp, #12]
 8006114:	9301      	str	r3, [sp, #4]
 8006116:	429e      	cmp	r6, r3
 8006118:	d83c      	bhi.n	8006194 <__ssputs_r+0x8c>
 800611a:	2390      	movs	r3, #144	; 0x90
 800611c:	898a      	ldrh	r2, [r1, #12]
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	421a      	tst	r2, r3
 8006122:	d034      	beq.n	800618e <__ssputs_r+0x86>
 8006124:	6909      	ldr	r1, [r1, #16]
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	6960      	ldr	r0, [r4, #20]
 800612a:	1a5b      	subs	r3, r3, r1
 800612c:	9302      	str	r3, [sp, #8]
 800612e:	2303      	movs	r3, #3
 8006130:	4343      	muls	r3, r0
 8006132:	0fdd      	lsrs	r5, r3, #31
 8006134:	18ed      	adds	r5, r5, r3
 8006136:	9b01      	ldr	r3, [sp, #4]
 8006138:	9802      	ldr	r0, [sp, #8]
 800613a:	3301      	adds	r3, #1
 800613c:	181b      	adds	r3, r3, r0
 800613e:	106d      	asrs	r5, r5, #1
 8006140:	42ab      	cmp	r3, r5
 8006142:	d900      	bls.n	8006146 <__ssputs_r+0x3e>
 8006144:	001d      	movs	r5, r3
 8006146:	0553      	lsls	r3, r2, #21
 8006148:	d532      	bpl.n	80061b0 <__ssputs_r+0xa8>
 800614a:	0029      	movs	r1, r5
 800614c:	0038      	movs	r0, r7
 800614e:	f7ff ff11 	bl	8005f74 <_malloc_r>
 8006152:	1e06      	subs	r6, r0, #0
 8006154:	d109      	bne.n	800616a <__ssputs_r+0x62>
 8006156:	230c      	movs	r3, #12
 8006158:	603b      	str	r3, [r7, #0]
 800615a:	2340      	movs	r3, #64	; 0x40
 800615c:	2001      	movs	r0, #1
 800615e:	89a2      	ldrh	r2, [r4, #12]
 8006160:	4240      	negs	r0, r0
 8006162:	4313      	orrs	r3, r2
 8006164:	81a3      	strh	r3, [r4, #12]
 8006166:	b005      	add	sp, #20
 8006168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800616a:	9a02      	ldr	r2, [sp, #8]
 800616c:	6921      	ldr	r1, [r4, #16]
 800616e:	f000 fabc 	bl	80066ea <memcpy>
 8006172:	89a3      	ldrh	r3, [r4, #12]
 8006174:	4a14      	ldr	r2, [pc, #80]	; (80061c8 <__ssputs_r+0xc0>)
 8006176:	401a      	ands	r2, r3
 8006178:	2380      	movs	r3, #128	; 0x80
 800617a:	4313      	orrs	r3, r2
 800617c:	81a3      	strh	r3, [r4, #12]
 800617e:	9b02      	ldr	r3, [sp, #8]
 8006180:	6126      	str	r6, [r4, #16]
 8006182:	18f6      	adds	r6, r6, r3
 8006184:	6026      	str	r6, [r4, #0]
 8006186:	6165      	str	r5, [r4, #20]
 8006188:	9e01      	ldr	r6, [sp, #4]
 800618a:	1aed      	subs	r5, r5, r3
 800618c:	60a5      	str	r5, [r4, #8]
 800618e:	9b01      	ldr	r3, [sp, #4]
 8006190:	429e      	cmp	r6, r3
 8006192:	d900      	bls.n	8006196 <__ssputs_r+0x8e>
 8006194:	9e01      	ldr	r6, [sp, #4]
 8006196:	0032      	movs	r2, r6
 8006198:	9903      	ldr	r1, [sp, #12]
 800619a:	6820      	ldr	r0, [r4, #0]
 800619c:	f000 faae 	bl	80066fc <memmove>
 80061a0:	68a3      	ldr	r3, [r4, #8]
 80061a2:	2000      	movs	r0, #0
 80061a4:	1b9b      	subs	r3, r3, r6
 80061a6:	60a3      	str	r3, [r4, #8]
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	199e      	adds	r6, r3, r6
 80061ac:	6026      	str	r6, [r4, #0]
 80061ae:	e7da      	b.n	8006166 <__ssputs_r+0x5e>
 80061b0:	002a      	movs	r2, r5
 80061b2:	0038      	movs	r0, r7
 80061b4:	f000 fab5 	bl	8006722 <_realloc_r>
 80061b8:	1e06      	subs	r6, r0, #0
 80061ba:	d1e0      	bne.n	800617e <__ssputs_r+0x76>
 80061bc:	0038      	movs	r0, r7
 80061be:	6921      	ldr	r1, [r4, #16]
 80061c0:	f7ff fe6c 	bl	8005e9c <_free_r>
 80061c4:	e7c7      	b.n	8006156 <__ssputs_r+0x4e>
 80061c6:	46c0      	nop			; (mov r8, r8)
 80061c8:	fffffb7f 	.word	0xfffffb7f

080061cc <_svfiprintf_r>:
 80061cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ce:	b0a1      	sub	sp, #132	; 0x84
 80061d0:	9003      	str	r0, [sp, #12]
 80061d2:	001d      	movs	r5, r3
 80061d4:	898b      	ldrh	r3, [r1, #12]
 80061d6:	000f      	movs	r7, r1
 80061d8:	0016      	movs	r6, r2
 80061da:	061b      	lsls	r3, r3, #24
 80061dc:	d511      	bpl.n	8006202 <_svfiprintf_r+0x36>
 80061de:	690b      	ldr	r3, [r1, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10e      	bne.n	8006202 <_svfiprintf_r+0x36>
 80061e4:	2140      	movs	r1, #64	; 0x40
 80061e6:	f7ff fec5 	bl	8005f74 <_malloc_r>
 80061ea:	6038      	str	r0, [r7, #0]
 80061ec:	6138      	str	r0, [r7, #16]
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d105      	bne.n	80061fe <_svfiprintf_r+0x32>
 80061f2:	230c      	movs	r3, #12
 80061f4:	9a03      	ldr	r2, [sp, #12]
 80061f6:	3801      	subs	r0, #1
 80061f8:	6013      	str	r3, [r2, #0]
 80061fa:	b021      	add	sp, #132	; 0x84
 80061fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061fe:	2340      	movs	r3, #64	; 0x40
 8006200:	617b      	str	r3, [r7, #20]
 8006202:	2300      	movs	r3, #0
 8006204:	ac08      	add	r4, sp, #32
 8006206:	6163      	str	r3, [r4, #20]
 8006208:	3320      	adds	r3, #32
 800620a:	7663      	strb	r3, [r4, #25]
 800620c:	3310      	adds	r3, #16
 800620e:	76a3      	strb	r3, [r4, #26]
 8006210:	9507      	str	r5, [sp, #28]
 8006212:	0035      	movs	r5, r6
 8006214:	782b      	ldrb	r3, [r5, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <_svfiprintf_r+0x52>
 800621a:	2b25      	cmp	r3, #37	; 0x25
 800621c:	d147      	bne.n	80062ae <_svfiprintf_r+0xe2>
 800621e:	1bab      	subs	r3, r5, r6
 8006220:	9305      	str	r3, [sp, #20]
 8006222:	42b5      	cmp	r5, r6
 8006224:	d00c      	beq.n	8006240 <_svfiprintf_r+0x74>
 8006226:	0032      	movs	r2, r6
 8006228:	0039      	movs	r1, r7
 800622a:	9803      	ldr	r0, [sp, #12]
 800622c:	f7ff ff6c 	bl	8006108 <__ssputs_r>
 8006230:	1c43      	adds	r3, r0, #1
 8006232:	d100      	bne.n	8006236 <_svfiprintf_r+0x6a>
 8006234:	e0ae      	b.n	8006394 <_svfiprintf_r+0x1c8>
 8006236:	6962      	ldr	r2, [r4, #20]
 8006238:	9b05      	ldr	r3, [sp, #20]
 800623a:	4694      	mov	ip, r2
 800623c:	4463      	add	r3, ip
 800623e:	6163      	str	r3, [r4, #20]
 8006240:	782b      	ldrb	r3, [r5, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d100      	bne.n	8006248 <_svfiprintf_r+0x7c>
 8006246:	e0a5      	b.n	8006394 <_svfiprintf_r+0x1c8>
 8006248:	2201      	movs	r2, #1
 800624a:	2300      	movs	r3, #0
 800624c:	4252      	negs	r2, r2
 800624e:	6062      	str	r2, [r4, #4]
 8006250:	a904      	add	r1, sp, #16
 8006252:	3254      	adds	r2, #84	; 0x54
 8006254:	1852      	adds	r2, r2, r1
 8006256:	1c6e      	adds	r6, r5, #1
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	60e3      	str	r3, [r4, #12]
 800625c:	60a3      	str	r3, [r4, #8]
 800625e:	7013      	strb	r3, [r2, #0]
 8006260:	65a3      	str	r3, [r4, #88]	; 0x58
 8006262:	2205      	movs	r2, #5
 8006264:	7831      	ldrb	r1, [r6, #0]
 8006266:	4854      	ldr	r0, [pc, #336]	; (80063b8 <_svfiprintf_r+0x1ec>)
 8006268:	f000 fa34 	bl	80066d4 <memchr>
 800626c:	1c75      	adds	r5, r6, #1
 800626e:	2800      	cmp	r0, #0
 8006270:	d11f      	bne.n	80062b2 <_svfiprintf_r+0xe6>
 8006272:	6822      	ldr	r2, [r4, #0]
 8006274:	06d3      	lsls	r3, r2, #27
 8006276:	d504      	bpl.n	8006282 <_svfiprintf_r+0xb6>
 8006278:	2353      	movs	r3, #83	; 0x53
 800627a:	a904      	add	r1, sp, #16
 800627c:	185b      	adds	r3, r3, r1
 800627e:	2120      	movs	r1, #32
 8006280:	7019      	strb	r1, [r3, #0]
 8006282:	0713      	lsls	r3, r2, #28
 8006284:	d504      	bpl.n	8006290 <_svfiprintf_r+0xc4>
 8006286:	2353      	movs	r3, #83	; 0x53
 8006288:	a904      	add	r1, sp, #16
 800628a:	185b      	adds	r3, r3, r1
 800628c:	212b      	movs	r1, #43	; 0x2b
 800628e:	7019      	strb	r1, [r3, #0]
 8006290:	7833      	ldrb	r3, [r6, #0]
 8006292:	2b2a      	cmp	r3, #42	; 0x2a
 8006294:	d016      	beq.n	80062c4 <_svfiprintf_r+0xf8>
 8006296:	0035      	movs	r5, r6
 8006298:	2100      	movs	r1, #0
 800629a:	200a      	movs	r0, #10
 800629c:	68e3      	ldr	r3, [r4, #12]
 800629e:	782a      	ldrb	r2, [r5, #0]
 80062a0:	1c6e      	adds	r6, r5, #1
 80062a2:	3a30      	subs	r2, #48	; 0x30
 80062a4:	2a09      	cmp	r2, #9
 80062a6:	d94e      	bls.n	8006346 <_svfiprintf_r+0x17a>
 80062a8:	2900      	cmp	r1, #0
 80062aa:	d111      	bne.n	80062d0 <_svfiprintf_r+0x104>
 80062ac:	e017      	b.n	80062de <_svfiprintf_r+0x112>
 80062ae:	3501      	adds	r5, #1
 80062b0:	e7b0      	b.n	8006214 <_svfiprintf_r+0x48>
 80062b2:	4b41      	ldr	r3, [pc, #260]	; (80063b8 <_svfiprintf_r+0x1ec>)
 80062b4:	6822      	ldr	r2, [r4, #0]
 80062b6:	1ac0      	subs	r0, r0, r3
 80062b8:	2301      	movs	r3, #1
 80062ba:	4083      	lsls	r3, r0
 80062bc:	4313      	orrs	r3, r2
 80062be:	002e      	movs	r6, r5
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	e7ce      	b.n	8006262 <_svfiprintf_r+0x96>
 80062c4:	9b07      	ldr	r3, [sp, #28]
 80062c6:	1d19      	adds	r1, r3, #4
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	9107      	str	r1, [sp, #28]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	db01      	blt.n	80062d4 <_svfiprintf_r+0x108>
 80062d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80062d2:	e004      	b.n	80062de <_svfiprintf_r+0x112>
 80062d4:	425b      	negs	r3, r3
 80062d6:	60e3      	str	r3, [r4, #12]
 80062d8:	2302      	movs	r3, #2
 80062da:	4313      	orrs	r3, r2
 80062dc:	6023      	str	r3, [r4, #0]
 80062de:	782b      	ldrb	r3, [r5, #0]
 80062e0:	2b2e      	cmp	r3, #46	; 0x2e
 80062e2:	d10a      	bne.n	80062fa <_svfiprintf_r+0x12e>
 80062e4:	786b      	ldrb	r3, [r5, #1]
 80062e6:	2b2a      	cmp	r3, #42	; 0x2a
 80062e8:	d135      	bne.n	8006356 <_svfiprintf_r+0x18a>
 80062ea:	9b07      	ldr	r3, [sp, #28]
 80062ec:	3502      	adds	r5, #2
 80062ee:	1d1a      	adds	r2, r3, #4
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	9207      	str	r2, [sp, #28]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	db2b      	blt.n	8006350 <_svfiprintf_r+0x184>
 80062f8:	9309      	str	r3, [sp, #36]	; 0x24
 80062fa:	4e30      	ldr	r6, [pc, #192]	; (80063bc <_svfiprintf_r+0x1f0>)
 80062fc:	2203      	movs	r2, #3
 80062fe:	0030      	movs	r0, r6
 8006300:	7829      	ldrb	r1, [r5, #0]
 8006302:	f000 f9e7 	bl	80066d4 <memchr>
 8006306:	2800      	cmp	r0, #0
 8006308:	d006      	beq.n	8006318 <_svfiprintf_r+0x14c>
 800630a:	2340      	movs	r3, #64	; 0x40
 800630c:	1b80      	subs	r0, r0, r6
 800630e:	4083      	lsls	r3, r0
 8006310:	6822      	ldr	r2, [r4, #0]
 8006312:	3501      	adds	r5, #1
 8006314:	4313      	orrs	r3, r2
 8006316:	6023      	str	r3, [r4, #0]
 8006318:	7829      	ldrb	r1, [r5, #0]
 800631a:	2206      	movs	r2, #6
 800631c:	4828      	ldr	r0, [pc, #160]	; (80063c0 <_svfiprintf_r+0x1f4>)
 800631e:	1c6e      	adds	r6, r5, #1
 8006320:	7621      	strb	r1, [r4, #24]
 8006322:	f000 f9d7 	bl	80066d4 <memchr>
 8006326:	2800      	cmp	r0, #0
 8006328:	d03c      	beq.n	80063a4 <_svfiprintf_r+0x1d8>
 800632a:	4b26      	ldr	r3, [pc, #152]	; (80063c4 <_svfiprintf_r+0x1f8>)
 800632c:	2b00      	cmp	r3, #0
 800632e:	d125      	bne.n	800637c <_svfiprintf_r+0x1b0>
 8006330:	2207      	movs	r2, #7
 8006332:	9b07      	ldr	r3, [sp, #28]
 8006334:	3307      	adds	r3, #7
 8006336:	4393      	bics	r3, r2
 8006338:	3308      	adds	r3, #8
 800633a:	9307      	str	r3, [sp, #28]
 800633c:	6963      	ldr	r3, [r4, #20]
 800633e:	9a04      	ldr	r2, [sp, #16]
 8006340:	189b      	adds	r3, r3, r2
 8006342:	6163      	str	r3, [r4, #20]
 8006344:	e765      	b.n	8006212 <_svfiprintf_r+0x46>
 8006346:	4343      	muls	r3, r0
 8006348:	0035      	movs	r5, r6
 800634a:	2101      	movs	r1, #1
 800634c:	189b      	adds	r3, r3, r2
 800634e:	e7a6      	b.n	800629e <_svfiprintf_r+0xd2>
 8006350:	2301      	movs	r3, #1
 8006352:	425b      	negs	r3, r3
 8006354:	e7d0      	b.n	80062f8 <_svfiprintf_r+0x12c>
 8006356:	2300      	movs	r3, #0
 8006358:	200a      	movs	r0, #10
 800635a:	001a      	movs	r2, r3
 800635c:	3501      	adds	r5, #1
 800635e:	6063      	str	r3, [r4, #4]
 8006360:	7829      	ldrb	r1, [r5, #0]
 8006362:	1c6e      	adds	r6, r5, #1
 8006364:	3930      	subs	r1, #48	; 0x30
 8006366:	2909      	cmp	r1, #9
 8006368:	d903      	bls.n	8006372 <_svfiprintf_r+0x1a6>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d0c5      	beq.n	80062fa <_svfiprintf_r+0x12e>
 800636e:	9209      	str	r2, [sp, #36]	; 0x24
 8006370:	e7c3      	b.n	80062fa <_svfiprintf_r+0x12e>
 8006372:	4342      	muls	r2, r0
 8006374:	0035      	movs	r5, r6
 8006376:	2301      	movs	r3, #1
 8006378:	1852      	adds	r2, r2, r1
 800637a:	e7f1      	b.n	8006360 <_svfiprintf_r+0x194>
 800637c:	ab07      	add	r3, sp, #28
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	003a      	movs	r2, r7
 8006382:	0021      	movs	r1, r4
 8006384:	4b10      	ldr	r3, [pc, #64]	; (80063c8 <_svfiprintf_r+0x1fc>)
 8006386:	9803      	ldr	r0, [sp, #12]
 8006388:	e000      	b.n	800638c <_svfiprintf_r+0x1c0>
 800638a:	bf00      	nop
 800638c:	9004      	str	r0, [sp, #16]
 800638e:	9b04      	ldr	r3, [sp, #16]
 8006390:	3301      	adds	r3, #1
 8006392:	d1d3      	bne.n	800633c <_svfiprintf_r+0x170>
 8006394:	89bb      	ldrh	r3, [r7, #12]
 8006396:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006398:	065b      	lsls	r3, r3, #25
 800639a:	d400      	bmi.n	800639e <_svfiprintf_r+0x1d2>
 800639c:	e72d      	b.n	80061fa <_svfiprintf_r+0x2e>
 800639e:	2001      	movs	r0, #1
 80063a0:	4240      	negs	r0, r0
 80063a2:	e72a      	b.n	80061fa <_svfiprintf_r+0x2e>
 80063a4:	ab07      	add	r3, sp, #28
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	003a      	movs	r2, r7
 80063aa:	0021      	movs	r1, r4
 80063ac:	4b06      	ldr	r3, [pc, #24]	; (80063c8 <_svfiprintf_r+0x1fc>)
 80063ae:	9803      	ldr	r0, [sp, #12]
 80063b0:	f000 f87c 	bl	80064ac <_printf_i>
 80063b4:	e7ea      	b.n	800638c <_svfiprintf_r+0x1c0>
 80063b6:	46c0      	nop			; (mov r8, r8)
 80063b8:	08006b68 	.word	0x08006b68
 80063bc:	08006b6e 	.word	0x08006b6e
 80063c0:	08006b72 	.word	0x08006b72
 80063c4:	00000000 	.word	0x00000000
 80063c8:	08006109 	.word	0x08006109

080063cc <_printf_common>:
 80063cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063ce:	0015      	movs	r5, r2
 80063d0:	9301      	str	r3, [sp, #4]
 80063d2:	688a      	ldr	r2, [r1, #8]
 80063d4:	690b      	ldr	r3, [r1, #16]
 80063d6:	000c      	movs	r4, r1
 80063d8:	9000      	str	r0, [sp, #0]
 80063da:	4293      	cmp	r3, r2
 80063dc:	da00      	bge.n	80063e0 <_printf_common+0x14>
 80063de:	0013      	movs	r3, r2
 80063e0:	0022      	movs	r2, r4
 80063e2:	602b      	str	r3, [r5, #0]
 80063e4:	3243      	adds	r2, #67	; 0x43
 80063e6:	7812      	ldrb	r2, [r2, #0]
 80063e8:	2a00      	cmp	r2, #0
 80063ea:	d001      	beq.n	80063f0 <_printf_common+0x24>
 80063ec:	3301      	adds	r3, #1
 80063ee:	602b      	str	r3, [r5, #0]
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	069b      	lsls	r3, r3, #26
 80063f4:	d502      	bpl.n	80063fc <_printf_common+0x30>
 80063f6:	682b      	ldr	r3, [r5, #0]
 80063f8:	3302      	adds	r3, #2
 80063fa:	602b      	str	r3, [r5, #0]
 80063fc:	6822      	ldr	r2, [r4, #0]
 80063fe:	2306      	movs	r3, #6
 8006400:	0017      	movs	r7, r2
 8006402:	401f      	ands	r7, r3
 8006404:	421a      	tst	r2, r3
 8006406:	d027      	beq.n	8006458 <_printf_common+0x8c>
 8006408:	0023      	movs	r3, r4
 800640a:	3343      	adds	r3, #67	; 0x43
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	1e5a      	subs	r2, r3, #1
 8006410:	4193      	sbcs	r3, r2
 8006412:	6822      	ldr	r2, [r4, #0]
 8006414:	0692      	lsls	r2, r2, #26
 8006416:	d430      	bmi.n	800647a <_printf_common+0xae>
 8006418:	0022      	movs	r2, r4
 800641a:	9901      	ldr	r1, [sp, #4]
 800641c:	9800      	ldr	r0, [sp, #0]
 800641e:	9e08      	ldr	r6, [sp, #32]
 8006420:	3243      	adds	r2, #67	; 0x43
 8006422:	47b0      	blx	r6
 8006424:	1c43      	adds	r3, r0, #1
 8006426:	d025      	beq.n	8006474 <_printf_common+0xa8>
 8006428:	2306      	movs	r3, #6
 800642a:	6820      	ldr	r0, [r4, #0]
 800642c:	682a      	ldr	r2, [r5, #0]
 800642e:	68e1      	ldr	r1, [r4, #12]
 8006430:	2500      	movs	r5, #0
 8006432:	4003      	ands	r3, r0
 8006434:	2b04      	cmp	r3, #4
 8006436:	d103      	bne.n	8006440 <_printf_common+0x74>
 8006438:	1a8d      	subs	r5, r1, r2
 800643a:	43eb      	mvns	r3, r5
 800643c:	17db      	asrs	r3, r3, #31
 800643e:	401d      	ands	r5, r3
 8006440:	68a3      	ldr	r3, [r4, #8]
 8006442:	6922      	ldr	r2, [r4, #16]
 8006444:	4293      	cmp	r3, r2
 8006446:	dd01      	ble.n	800644c <_printf_common+0x80>
 8006448:	1a9b      	subs	r3, r3, r2
 800644a:	18ed      	adds	r5, r5, r3
 800644c:	2700      	movs	r7, #0
 800644e:	42bd      	cmp	r5, r7
 8006450:	d120      	bne.n	8006494 <_printf_common+0xc8>
 8006452:	2000      	movs	r0, #0
 8006454:	e010      	b.n	8006478 <_printf_common+0xac>
 8006456:	3701      	adds	r7, #1
 8006458:	68e3      	ldr	r3, [r4, #12]
 800645a:	682a      	ldr	r2, [r5, #0]
 800645c:	1a9b      	subs	r3, r3, r2
 800645e:	42bb      	cmp	r3, r7
 8006460:	ddd2      	ble.n	8006408 <_printf_common+0x3c>
 8006462:	0022      	movs	r2, r4
 8006464:	2301      	movs	r3, #1
 8006466:	9901      	ldr	r1, [sp, #4]
 8006468:	9800      	ldr	r0, [sp, #0]
 800646a:	9e08      	ldr	r6, [sp, #32]
 800646c:	3219      	adds	r2, #25
 800646e:	47b0      	blx	r6
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	d1f0      	bne.n	8006456 <_printf_common+0x8a>
 8006474:	2001      	movs	r0, #1
 8006476:	4240      	negs	r0, r0
 8006478:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800647a:	2030      	movs	r0, #48	; 0x30
 800647c:	18e1      	adds	r1, r4, r3
 800647e:	3143      	adds	r1, #67	; 0x43
 8006480:	7008      	strb	r0, [r1, #0]
 8006482:	0021      	movs	r1, r4
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	3145      	adds	r1, #69	; 0x45
 8006488:	7809      	ldrb	r1, [r1, #0]
 800648a:	18a2      	adds	r2, r4, r2
 800648c:	3243      	adds	r2, #67	; 0x43
 800648e:	3302      	adds	r3, #2
 8006490:	7011      	strb	r1, [r2, #0]
 8006492:	e7c1      	b.n	8006418 <_printf_common+0x4c>
 8006494:	0022      	movs	r2, r4
 8006496:	2301      	movs	r3, #1
 8006498:	9901      	ldr	r1, [sp, #4]
 800649a:	9800      	ldr	r0, [sp, #0]
 800649c:	9e08      	ldr	r6, [sp, #32]
 800649e:	321a      	adds	r2, #26
 80064a0:	47b0      	blx	r6
 80064a2:	1c43      	adds	r3, r0, #1
 80064a4:	d0e6      	beq.n	8006474 <_printf_common+0xa8>
 80064a6:	3701      	adds	r7, #1
 80064a8:	e7d1      	b.n	800644e <_printf_common+0x82>
	...

080064ac <_printf_i>:
 80064ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ae:	b08b      	sub	sp, #44	; 0x2c
 80064b0:	9206      	str	r2, [sp, #24]
 80064b2:	000a      	movs	r2, r1
 80064b4:	3243      	adds	r2, #67	; 0x43
 80064b6:	9307      	str	r3, [sp, #28]
 80064b8:	9005      	str	r0, [sp, #20]
 80064ba:	9204      	str	r2, [sp, #16]
 80064bc:	7e0a      	ldrb	r2, [r1, #24]
 80064be:	000c      	movs	r4, r1
 80064c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064c2:	2a78      	cmp	r2, #120	; 0x78
 80064c4:	d807      	bhi.n	80064d6 <_printf_i+0x2a>
 80064c6:	2a62      	cmp	r2, #98	; 0x62
 80064c8:	d809      	bhi.n	80064de <_printf_i+0x32>
 80064ca:	2a00      	cmp	r2, #0
 80064cc:	d100      	bne.n	80064d0 <_printf_i+0x24>
 80064ce:	e0c1      	b.n	8006654 <_printf_i+0x1a8>
 80064d0:	2a58      	cmp	r2, #88	; 0x58
 80064d2:	d100      	bne.n	80064d6 <_printf_i+0x2a>
 80064d4:	e08c      	b.n	80065f0 <_printf_i+0x144>
 80064d6:	0026      	movs	r6, r4
 80064d8:	3642      	adds	r6, #66	; 0x42
 80064da:	7032      	strb	r2, [r6, #0]
 80064dc:	e022      	b.n	8006524 <_printf_i+0x78>
 80064de:	0010      	movs	r0, r2
 80064e0:	3863      	subs	r0, #99	; 0x63
 80064e2:	2815      	cmp	r0, #21
 80064e4:	d8f7      	bhi.n	80064d6 <_printf_i+0x2a>
 80064e6:	f7f9 fe0b 	bl	8000100 <__gnu_thumb1_case_shi>
 80064ea:	0016      	.short	0x0016
 80064ec:	fff6001f 	.word	0xfff6001f
 80064f0:	fff6fff6 	.word	0xfff6fff6
 80064f4:	001ffff6 	.word	0x001ffff6
 80064f8:	fff6fff6 	.word	0xfff6fff6
 80064fc:	fff6fff6 	.word	0xfff6fff6
 8006500:	003600a8 	.word	0x003600a8
 8006504:	fff6009a 	.word	0xfff6009a
 8006508:	00b9fff6 	.word	0x00b9fff6
 800650c:	0036fff6 	.word	0x0036fff6
 8006510:	fff6fff6 	.word	0xfff6fff6
 8006514:	009e      	.short	0x009e
 8006516:	0026      	movs	r6, r4
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	3642      	adds	r6, #66	; 0x42
 800651c:	1d11      	adds	r1, r2, #4
 800651e:	6019      	str	r1, [r3, #0]
 8006520:	6813      	ldr	r3, [r2, #0]
 8006522:	7033      	strb	r3, [r6, #0]
 8006524:	2301      	movs	r3, #1
 8006526:	e0a7      	b.n	8006678 <_printf_i+0x1cc>
 8006528:	6808      	ldr	r0, [r1, #0]
 800652a:	6819      	ldr	r1, [r3, #0]
 800652c:	1d0a      	adds	r2, r1, #4
 800652e:	0605      	lsls	r5, r0, #24
 8006530:	d50b      	bpl.n	800654a <_printf_i+0x9e>
 8006532:	680d      	ldr	r5, [r1, #0]
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	2d00      	cmp	r5, #0
 8006538:	da03      	bge.n	8006542 <_printf_i+0x96>
 800653a:	232d      	movs	r3, #45	; 0x2d
 800653c:	9a04      	ldr	r2, [sp, #16]
 800653e:	426d      	negs	r5, r5
 8006540:	7013      	strb	r3, [r2, #0]
 8006542:	4b61      	ldr	r3, [pc, #388]	; (80066c8 <_printf_i+0x21c>)
 8006544:	270a      	movs	r7, #10
 8006546:	9303      	str	r3, [sp, #12]
 8006548:	e01b      	b.n	8006582 <_printf_i+0xd6>
 800654a:	680d      	ldr	r5, [r1, #0]
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	0641      	lsls	r1, r0, #25
 8006550:	d5f1      	bpl.n	8006536 <_printf_i+0x8a>
 8006552:	b22d      	sxth	r5, r5
 8006554:	e7ef      	b.n	8006536 <_printf_i+0x8a>
 8006556:	680d      	ldr	r5, [r1, #0]
 8006558:	6819      	ldr	r1, [r3, #0]
 800655a:	1d08      	adds	r0, r1, #4
 800655c:	6018      	str	r0, [r3, #0]
 800655e:	062e      	lsls	r6, r5, #24
 8006560:	d501      	bpl.n	8006566 <_printf_i+0xba>
 8006562:	680d      	ldr	r5, [r1, #0]
 8006564:	e003      	b.n	800656e <_printf_i+0xc2>
 8006566:	066d      	lsls	r5, r5, #25
 8006568:	d5fb      	bpl.n	8006562 <_printf_i+0xb6>
 800656a:	680d      	ldr	r5, [r1, #0]
 800656c:	b2ad      	uxth	r5, r5
 800656e:	4b56      	ldr	r3, [pc, #344]	; (80066c8 <_printf_i+0x21c>)
 8006570:	2708      	movs	r7, #8
 8006572:	9303      	str	r3, [sp, #12]
 8006574:	2a6f      	cmp	r2, #111	; 0x6f
 8006576:	d000      	beq.n	800657a <_printf_i+0xce>
 8006578:	3702      	adds	r7, #2
 800657a:	0023      	movs	r3, r4
 800657c:	2200      	movs	r2, #0
 800657e:	3343      	adds	r3, #67	; 0x43
 8006580:	701a      	strb	r2, [r3, #0]
 8006582:	6863      	ldr	r3, [r4, #4]
 8006584:	60a3      	str	r3, [r4, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	db03      	blt.n	8006592 <_printf_i+0xe6>
 800658a:	2204      	movs	r2, #4
 800658c:	6821      	ldr	r1, [r4, #0]
 800658e:	4391      	bics	r1, r2
 8006590:	6021      	str	r1, [r4, #0]
 8006592:	2d00      	cmp	r5, #0
 8006594:	d102      	bne.n	800659c <_printf_i+0xf0>
 8006596:	9e04      	ldr	r6, [sp, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00c      	beq.n	80065b6 <_printf_i+0x10a>
 800659c:	9e04      	ldr	r6, [sp, #16]
 800659e:	0028      	movs	r0, r5
 80065a0:	0039      	movs	r1, r7
 80065a2:	f7f9 fe3d 	bl	8000220 <__aeabi_uidivmod>
 80065a6:	9b03      	ldr	r3, [sp, #12]
 80065a8:	3e01      	subs	r6, #1
 80065aa:	5c5b      	ldrb	r3, [r3, r1]
 80065ac:	7033      	strb	r3, [r6, #0]
 80065ae:	002b      	movs	r3, r5
 80065b0:	0005      	movs	r5, r0
 80065b2:	429f      	cmp	r7, r3
 80065b4:	d9f3      	bls.n	800659e <_printf_i+0xf2>
 80065b6:	2f08      	cmp	r7, #8
 80065b8:	d109      	bne.n	80065ce <_printf_i+0x122>
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	07db      	lsls	r3, r3, #31
 80065be:	d506      	bpl.n	80065ce <_printf_i+0x122>
 80065c0:	6863      	ldr	r3, [r4, #4]
 80065c2:	6922      	ldr	r2, [r4, #16]
 80065c4:	4293      	cmp	r3, r2
 80065c6:	dc02      	bgt.n	80065ce <_printf_i+0x122>
 80065c8:	2330      	movs	r3, #48	; 0x30
 80065ca:	3e01      	subs	r6, #1
 80065cc:	7033      	strb	r3, [r6, #0]
 80065ce:	9b04      	ldr	r3, [sp, #16]
 80065d0:	1b9b      	subs	r3, r3, r6
 80065d2:	6123      	str	r3, [r4, #16]
 80065d4:	9b07      	ldr	r3, [sp, #28]
 80065d6:	0021      	movs	r1, r4
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	9805      	ldr	r0, [sp, #20]
 80065dc:	9b06      	ldr	r3, [sp, #24]
 80065de:	aa09      	add	r2, sp, #36	; 0x24
 80065e0:	f7ff fef4 	bl	80063cc <_printf_common>
 80065e4:	1c43      	adds	r3, r0, #1
 80065e6:	d14c      	bne.n	8006682 <_printf_i+0x1d6>
 80065e8:	2001      	movs	r0, #1
 80065ea:	4240      	negs	r0, r0
 80065ec:	b00b      	add	sp, #44	; 0x2c
 80065ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065f0:	3145      	adds	r1, #69	; 0x45
 80065f2:	700a      	strb	r2, [r1, #0]
 80065f4:	4a34      	ldr	r2, [pc, #208]	; (80066c8 <_printf_i+0x21c>)
 80065f6:	9203      	str	r2, [sp, #12]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	6821      	ldr	r1, [r4, #0]
 80065fc:	ca20      	ldmia	r2!, {r5}
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	0608      	lsls	r0, r1, #24
 8006602:	d516      	bpl.n	8006632 <_printf_i+0x186>
 8006604:	07cb      	lsls	r3, r1, #31
 8006606:	d502      	bpl.n	800660e <_printf_i+0x162>
 8006608:	2320      	movs	r3, #32
 800660a:	4319      	orrs	r1, r3
 800660c:	6021      	str	r1, [r4, #0]
 800660e:	2710      	movs	r7, #16
 8006610:	2d00      	cmp	r5, #0
 8006612:	d1b2      	bne.n	800657a <_printf_i+0xce>
 8006614:	2320      	movs	r3, #32
 8006616:	6822      	ldr	r2, [r4, #0]
 8006618:	439a      	bics	r2, r3
 800661a:	6022      	str	r2, [r4, #0]
 800661c:	e7ad      	b.n	800657a <_printf_i+0xce>
 800661e:	2220      	movs	r2, #32
 8006620:	6809      	ldr	r1, [r1, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	6022      	str	r2, [r4, #0]
 8006626:	0022      	movs	r2, r4
 8006628:	2178      	movs	r1, #120	; 0x78
 800662a:	3245      	adds	r2, #69	; 0x45
 800662c:	7011      	strb	r1, [r2, #0]
 800662e:	4a27      	ldr	r2, [pc, #156]	; (80066cc <_printf_i+0x220>)
 8006630:	e7e1      	b.n	80065f6 <_printf_i+0x14a>
 8006632:	0648      	lsls	r0, r1, #25
 8006634:	d5e6      	bpl.n	8006604 <_printf_i+0x158>
 8006636:	b2ad      	uxth	r5, r5
 8006638:	e7e4      	b.n	8006604 <_printf_i+0x158>
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	680d      	ldr	r5, [r1, #0]
 800663e:	1d10      	adds	r0, r2, #4
 8006640:	6949      	ldr	r1, [r1, #20]
 8006642:	6018      	str	r0, [r3, #0]
 8006644:	6813      	ldr	r3, [r2, #0]
 8006646:	062e      	lsls	r6, r5, #24
 8006648:	d501      	bpl.n	800664e <_printf_i+0x1a2>
 800664a:	6019      	str	r1, [r3, #0]
 800664c:	e002      	b.n	8006654 <_printf_i+0x1a8>
 800664e:	066d      	lsls	r5, r5, #25
 8006650:	d5fb      	bpl.n	800664a <_printf_i+0x19e>
 8006652:	8019      	strh	r1, [r3, #0]
 8006654:	2300      	movs	r3, #0
 8006656:	9e04      	ldr	r6, [sp, #16]
 8006658:	6123      	str	r3, [r4, #16]
 800665a:	e7bb      	b.n	80065d4 <_printf_i+0x128>
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	1d11      	adds	r1, r2, #4
 8006660:	6019      	str	r1, [r3, #0]
 8006662:	6816      	ldr	r6, [r2, #0]
 8006664:	2100      	movs	r1, #0
 8006666:	0030      	movs	r0, r6
 8006668:	6862      	ldr	r2, [r4, #4]
 800666a:	f000 f833 	bl	80066d4 <memchr>
 800666e:	2800      	cmp	r0, #0
 8006670:	d001      	beq.n	8006676 <_printf_i+0x1ca>
 8006672:	1b80      	subs	r0, r0, r6
 8006674:	6060      	str	r0, [r4, #4]
 8006676:	6863      	ldr	r3, [r4, #4]
 8006678:	6123      	str	r3, [r4, #16]
 800667a:	2300      	movs	r3, #0
 800667c:	9a04      	ldr	r2, [sp, #16]
 800667e:	7013      	strb	r3, [r2, #0]
 8006680:	e7a8      	b.n	80065d4 <_printf_i+0x128>
 8006682:	6923      	ldr	r3, [r4, #16]
 8006684:	0032      	movs	r2, r6
 8006686:	9906      	ldr	r1, [sp, #24]
 8006688:	9805      	ldr	r0, [sp, #20]
 800668a:	9d07      	ldr	r5, [sp, #28]
 800668c:	47a8      	blx	r5
 800668e:	1c43      	adds	r3, r0, #1
 8006690:	d0aa      	beq.n	80065e8 <_printf_i+0x13c>
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	079b      	lsls	r3, r3, #30
 8006696:	d415      	bmi.n	80066c4 <_printf_i+0x218>
 8006698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800669a:	68e0      	ldr	r0, [r4, #12]
 800669c:	4298      	cmp	r0, r3
 800669e:	daa5      	bge.n	80065ec <_printf_i+0x140>
 80066a0:	0018      	movs	r0, r3
 80066a2:	e7a3      	b.n	80065ec <_printf_i+0x140>
 80066a4:	0022      	movs	r2, r4
 80066a6:	2301      	movs	r3, #1
 80066a8:	9906      	ldr	r1, [sp, #24]
 80066aa:	9805      	ldr	r0, [sp, #20]
 80066ac:	9e07      	ldr	r6, [sp, #28]
 80066ae:	3219      	adds	r2, #25
 80066b0:	47b0      	blx	r6
 80066b2:	1c43      	adds	r3, r0, #1
 80066b4:	d098      	beq.n	80065e8 <_printf_i+0x13c>
 80066b6:	3501      	adds	r5, #1
 80066b8:	68e3      	ldr	r3, [r4, #12]
 80066ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066bc:	1a9b      	subs	r3, r3, r2
 80066be:	42ab      	cmp	r3, r5
 80066c0:	dcf0      	bgt.n	80066a4 <_printf_i+0x1f8>
 80066c2:	e7e9      	b.n	8006698 <_printf_i+0x1ec>
 80066c4:	2500      	movs	r5, #0
 80066c6:	e7f7      	b.n	80066b8 <_printf_i+0x20c>
 80066c8:	08006b79 	.word	0x08006b79
 80066cc:	08006b8a 	.word	0x08006b8a

080066d0 <__retarget_lock_acquire_recursive>:
 80066d0:	4770      	bx	lr

080066d2 <__retarget_lock_release_recursive>:
 80066d2:	4770      	bx	lr

080066d4 <memchr>:
 80066d4:	b2c9      	uxtb	r1, r1
 80066d6:	1882      	adds	r2, r0, r2
 80066d8:	4290      	cmp	r0, r2
 80066da:	d101      	bne.n	80066e0 <memchr+0xc>
 80066dc:	2000      	movs	r0, #0
 80066de:	4770      	bx	lr
 80066e0:	7803      	ldrb	r3, [r0, #0]
 80066e2:	428b      	cmp	r3, r1
 80066e4:	d0fb      	beq.n	80066de <memchr+0xa>
 80066e6:	3001      	adds	r0, #1
 80066e8:	e7f6      	b.n	80066d8 <memchr+0x4>

080066ea <memcpy>:
 80066ea:	2300      	movs	r3, #0
 80066ec:	b510      	push	{r4, lr}
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d100      	bne.n	80066f4 <memcpy+0xa>
 80066f2:	bd10      	pop	{r4, pc}
 80066f4:	5ccc      	ldrb	r4, [r1, r3]
 80066f6:	54c4      	strb	r4, [r0, r3]
 80066f8:	3301      	adds	r3, #1
 80066fa:	e7f8      	b.n	80066ee <memcpy+0x4>

080066fc <memmove>:
 80066fc:	b510      	push	{r4, lr}
 80066fe:	4288      	cmp	r0, r1
 8006700:	d902      	bls.n	8006708 <memmove+0xc>
 8006702:	188b      	adds	r3, r1, r2
 8006704:	4298      	cmp	r0, r3
 8006706:	d303      	bcc.n	8006710 <memmove+0x14>
 8006708:	2300      	movs	r3, #0
 800670a:	e007      	b.n	800671c <memmove+0x20>
 800670c:	5c8b      	ldrb	r3, [r1, r2]
 800670e:	5483      	strb	r3, [r0, r2]
 8006710:	3a01      	subs	r2, #1
 8006712:	d2fb      	bcs.n	800670c <memmove+0x10>
 8006714:	bd10      	pop	{r4, pc}
 8006716:	5ccc      	ldrb	r4, [r1, r3]
 8006718:	54c4      	strb	r4, [r0, r3]
 800671a:	3301      	adds	r3, #1
 800671c:	429a      	cmp	r2, r3
 800671e:	d1fa      	bne.n	8006716 <memmove+0x1a>
 8006720:	e7f8      	b.n	8006714 <memmove+0x18>

08006722 <_realloc_r>:
 8006722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006724:	0007      	movs	r7, r0
 8006726:	000e      	movs	r6, r1
 8006728:	0014      	movs	r4, r2
 800672a:	2900      	cmp	r1, #0
 800672c:	d105      	bne.n	800673a <_realloc_r+0x18>
 800672e:	0011      	movs	r1, r2
 8006730:	f7ff fc20 	bl	8005f74 <_malloc_r>
 8006734:	0005      	movs	r5, r0
 8006736:	0028      	movs	r0, r5
 8006738:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800673a:	2a00      	cmp	r2, #0
 800673c:	d103      	bne.n	8006746 <_realloc_r+0x24>
 800673e:	f7ff fbad 	bl	8005e9c <_free_r>
 8006742:	0025      	movs	r5, r4
 8006744:	e7f7      	b.n	8006736 <_realloc_r+0x14>
 8006746:	f000 f81b 	bl	8006780 <_malloc_usable_size_r>
 800674a:	9001      	str	r0, [sp, #4]
 800674c:	4284      	cmp	r4, r0
 800674e:	d803      	bhi.n	8006758 <_realloc_r+0x36>
 8006750:	0035      	movs	r5, r6
 8006752:	0843      	lsrs	r3, r0, #1
 8006754:	42a3      	cmp	r3, r4
 8006756:	d3ee      	bcc.n	8006736 <_realloc_r+0x14>
 8006758:	0021      	movs	r1, r4
 800675a:	0038      	movs	r0, r7
 800675c:	f7ff fc0a 	bl	8005f74 <_malloc_r>
 8006760:	1e05      	subs	r5, r0, #0
 8006762:	d0e8      	beq.n	8006736 <_realloc_r+0x14>
 8006764:	9b01      	ldr	r3, [sp, #4]
 8006766:	0022      	movs	r2, r4
 8006768:	429c      	cmp	r4, r3
 800676a:	d900      	bls.n	800676e <_realloc_r+0x4c>
 800676c:	001a      	movs	r2, r3
 800676e:	0031      	movs	r1, r6
 8006770:	0028      	movs	r0, r5
 8006772:	f7ff ffba 	bl	80066ea <memcpy>
 8006776:	0031      	movs	r1, r6
 8006778:	0038      	movs	r0, r7
 800677a:	f7ff fb8f 	bl	8005e9c <_free_r>
 800677e:	e7da      	b.n	8006736 <_realloc_r+0x14>

08006780 <_malloc_usable_size_r>:
 8006780:	1f0b      	subs	r3, r1, #4
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	1f18      	subs	r0, r3, #4
 8006786:	2b00      	cmp	r3, #0
 8006788:	da01      	bge.n	800678e <_malloc_usable_size_r+0xe>
 800678a:	580b      	ldr	r3, [r1, r0]
 800678c:	18c0      	adds	r0, r0, r3
 800678e:	4770      	bx	lr

08006790 <sqrtf>:
 8006790:	b570      	push	{r4, r5, r6, lr}
 8006792:	1c05      	adds	r5, r0, #0
 8006794:	f000 f818 	bl	80067c8 <__ieee754_sqrtf>
 8006798:	1c29      	adds	r1, r5, #0
 800679a:	1c04      	adds	r4, r0, #0
 800679c:	1c28      	adds	r0, r5, #0
 800679e:	f7fa fcbb 	bl	8001118 <__aeabi_fcmpun>
 80067a2:	2800      	cmp	r0, #0
 80067a4:	d10e      	bne.n	80067c4 <sqrtf+0x34>
 80067a6:	2100      	movs	r1, #0
 80067a8:	1c28      	adds	r0, r5, #0
 80067aa:	f7f9 fe3b 	bl	8000424 <__aeabi_fcmplt>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d008      	beq.n	80067c4 <sqrtf+0x34>
 80067b2:	f7ff fb2d 	bl	8005e10 <__errno>
 80067b6:	2321      	movs	r3, #33	; 0x21
 80067b8:	2100      	movs	r1, #0
 80067ba:	6003      	str	r3, [r0, #0]
 80067bc:	1c08      	adds	r0, r1, #0
 80067be:	f7fa f80f 	bl	80007e0 <__aeabi_fdiv>
 80067c2:	1c04      	adds	r4, r0, #0
 80067c4:	1c20      	adds	r0, r4, #0
 80067c6:	bd70      	pop	{r4, r5, r6, pc}

080067c8 <__ieee754_sqrtf>:
 80067c8:	0042      	lsls	r2, r0, #1
 80067ca:	0003      	movs	r3, r0
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	1c04      	adds	r4, r0, #0
 80067d0:	20ff      	movs	r0, #255	; 0xff
 80067d2:	0852      	lsrs	r2, r2, #1
 80067d4:	05c0      	lsls	r0, r0, #23
 80067d6:	4282      	cmp	r2, r0
 80067d8:	d30a      	bcc.n	80067f0 <__ieee754_sqrtf+0x28>
 80067da:	1c21      	adds	r1, r4, #0
 80067dc:	1c20      	adds	r0, r4, #0
 80067de:	f7fa f9c7 	bl	8000b70 <__aeabi_fmul>
 80067e2:	1c01      	adds	r1, r0, #0
 80067e4:	1c20      	adds	r0, r4, #0
 80067e6:	f7f9 fe5d 	bl	80004a4 <__aeabi_fadd>
 80067ea:	1c04      	adds	r4, r0, #0
 80067ec:	1c20      	adds	r0, r4, #0
 80067ee:	bd70      	pop	{r4, r5, r6, pc}
 80067f0:	2a00      	cmp	r2, #0
 80067f2:	d0fb      	beq.n	80067ec <__ieee754_sqrtf+0x24>
 80067f4:	2c00      	cmp	r4, #0
 80067f6:	da07      	bge.n	8006808 <__ieee754_sqrtf+0x40>
 80067f8:	1c21      	adds	r1, r4, #0
 80067fa:	1c20      	adds	r0, r4, #0
 80067fc:	f7fa fade 	bl	8000dbc <__aeabi_fsub>
 8006800:	1c01      	adds	r1, r0, #0
 8006802:	f7f9 ffed 	bl	80007e0 <__aeabi_fdiv>
 8006806:	e7f0      	b.n	80067ea <__ieee754_sqrtf+0x22>
 8006808:	0022      	movs	r2, r4
 800680a:	15e1      	asrs	r1, r4, #23
 800680c:	4002      	ands	r2, r0
 800680e:	4204      	tst	r4, r0
 8006810:	d02e      	beq.n	8006870 <__ieee754_sqrtf+0xa8>
 8006812:	2280      	movs	r2, #128	; 0x80
 8006814:	000c      	movs	r4, r1
 8006816:	025b      	lsls	r3, r3, #9
 8006818:	0a5b      	lsrs	r3, r3, #9
 800681a:	0412      	lsls	r2, r2, #16
 800681c:	3c7f      	subs	r4, #127	; 0x7f
 800681e:	4313      	orrs	r3, r2
 8006820:	07ca      	lsls	r2, r1, #31
 8006822:	d400      	bmi.n	8006826 <__ieee754_sqrtf+0x5e>
 8006824:	005b      	lsls	r3, r3, #1
 8006826:	2200      	movs	r2, #0
 8006828:	2180      	movs	r1, #128	; 0x80
 800682a:	2019      	movs	r0, #25
 800682c:	0016      	movs	r6, r2
 800682e:	1064      	asrs	r4, r4, #1
 8006830:	005b      	lsls	r3, r3, #1
 8006832:	0449      	lsls	r1, r1, #17
 8006834:	1875      	adds	r5, r6, r1
 8006836:	429d      	cmp	r5, r3
 8006838:	dc02      	bgt.n	8006840 <__ieee754_sqrtf+0x78>
 800683a:	186e      	adds	r6, r5, r1
 800683c:	1b5b      	subs	r3, r3, r5
 800683e:	1852      	adds	r2, r2, r1
 8006840:	3801      	subs	r0, #1
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	0849      	lsrs	r1, r1, #1
 8006846:	2800      	cmp	r0, #0
 8006848:	d1f4      	bne.n	8006834 <__ieee754_sqrtf+0x6c>
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <__ieee754_sqrtf+0x8c>
 800684e:	2301      	movs	r3, #1
 8006850:	3201      	adds	r2, #1
 8006852:	439a      	bics	r2, r3
 8006854:	23fc      	movs	r3, #252	; 0xfc
 8006856:	1052      	asrs	r2, r2, #1
 8006858:	059b      	lsls	r3, r3, #22
 800685a:	18d2      	adds	r2, r2, r3
 800685c:	05e4      	lsls	r4, r4, #23
 800685e:	18a4      	adds	r4, r4, r2
 8006860:	e7c4      	b.n	80067ec <__ieee754_sqrtf+0x24>
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	3201      	adds	r2, #1
 8006866:	4203      	tst	r3, r0
 8006868:	d0fb      	beq.n	8006862 <__ieee754_sqrtf+0x9a>
 800686a:	3a01      	subs	r2, #1
 800686c:	1a89      	subs	r1, r1, r2
 800686e:	e7d0      	b.n	8006812 <__ieee754_sqrtf+0x4a>
 8006870:	2080      	movs	r0, #128	; 0x80
 8006872:	0400      	lsls	r0, r0, #16
 8006874:	e7f7      	b.n	8006866 <__ieee754_sqrtf+0x9e>
	...

08006878 <_init>:
 8006878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687a:	46c0      	nop			; (mov r8, r8)
 800687c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800687e:	bc08      	pop	{r3}
 8006880:	469e      	mov	lr, r3
 8006882:	4770      	bx	lr

08006884 <_fini>:
 8006884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006886:	46c0      	nop			; (mov r8, r8)
 8006888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800688a:	bc08      	pop	{r3}
 800688c:	469e      	mov	lr, r3
 800688e:	4770      	bx	lr


PA_UHF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a50  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  08006b08  08006b08  00016b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dcc  08006dcc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006dcc  08006dcc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006dcc  08006dcc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dcc  08006dcc  00016dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dd0  08006dd0  00016dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000070  08006e44  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08006e44  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0ff  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b92  00000000  00000000  0002b197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002dd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002e7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017721  00000000  00000000  0002f0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff32  00000000  00000000  00046811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000861d7  00000000  00000000  00056743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc91a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b0  00000000  00000000  000dc96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006af0 	.word	0x08006af0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08006af0 	.word	0x08006af0

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cfrcmple>:
 8000400:	4684      	mov	ip, r0
 8000402:	0008      	movs	r0, r1
 8000404:	4661      	mov	r1, ip
 8000406:	e7ff      	b.n	8000408 <__aeabi_cfcmpeq>

08000408 <__aeabi_cfcmpeq>:
 8000408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800040a:	f000 fb6d 	bl	8000ae8 <__lesf2>
 800040e:	2800      	cmp	r0, #0
 8000410:	d401      	bmi.n	8000416 <__aeabi_cfcmpeq+0xe>
 8000412:	2100      	movs	r1, #0
 8000414:	42c8      	cmn	r0, r1
 8000416:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000418 <__aeabi_fcmpeq>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 faf9 	bl	8000a10 <__eqsf2>
 800041e:	4240      	negs	r0, r0
 8000420:	3001      	adds	r0, #1
 8000422:	bd10      	pop	{r4, pc}

08000424 <__aeabi_fcmplt>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 fb5f 	bl	8000ae8 <__lesf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	db01      	blt.n	8000432 <__aeabi_fcmplt+0xe>
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	2001      	movs	r0, #1
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_fcmple>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fb55 	bl	8000ae8 <__lesf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	dd01      	ble.n	8000446 <__aeabi_fcmple+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_fcmpgt>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fb05 	bl	8000a5c <__gesf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	dc01      	bgt.n	800045a <__aeabi_fcmpgt+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__aeabi_fcmpge>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 fafb 	bl	8000a5c <__gesf2>
 8000466:	2800      	cmp	r0, #0
 8000468:	da01      	bge.n	800046e <__aeabi_fcmpge+0xe>
 800046a:	2000      	movs	r0, #0
 800046c:	bd10      	pop	{r4, pc}
 800046e:	2001      	movs	r0, #1
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__aeabi_f2uiz>:
 8000474:	219e      	movs	r1, #158	; 0x9e
 8000476:	b510      	push	{r4, lr}
 8000478:	05c9      	lsls	r1, r1, #23
 800047a:	1c04      	adds	r4, r0, #0
 800047c:	f7ff fff0 	bl	8000460 <__aeabi_fcmpge>
 8000480:	2800      	cmp	r0, #0
 8000482:	d103      	bne.n	800048c <__aeabi_f2uiz+0x18>
 8000484:	1c20      	adds	r0, r4, #0
 8000486:	f000 fe5d 	bl	8001144 <__aeabi_f2iz>
 800048a:	bd10      	pop	{r4, pc}
 800048c:	219e      	movs	r1, #158	; 0x9e
 800048e:	1c20      	adds	r0, r4, #0
 8000490:	05c9      	lsls	r1, r1, #23
 8000492:	f000 fc93 	bl	8000dbc <__aeabi_fsub>
 8000496:	f000 fe55 	bl	8001144 <__aeabi_f2iz>
 800049a:	2380      	movs	r3, #128	; 0x80
 800049c:	061b      	lsls	r3, r3, #24
 800049e:	469c      	mov	ip, r3
 80004a0:	4460      	add	r0, ip
 80004a2:	e7f2      	b.n	800048a <__aeabi_f2uiz+0x16>

080004a4 <__aeabi_fadd>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	46c6      	mov	lr, r8
 80004a8:	0243      	lsls	r3, r0, #9
 80004aa:	0a5b      	lsrs	r3, r3, #9
 80004ac:	024e      	lsls	r6, r1, #9
 80004ae:	0045      	lsls	r5, r0, #1
 80004b0:	004f      	lsls	r7, r1, #1
 80004b2:	00da      	lsls	r2, r3, #3
 80004b4:	0fc4      	lsrs	r4, r0, #31
 80004b6:	469c      	mov	ip, r3
 80004b8:	0a70      	lsrs	r0, r6, #9
 80004ba:	4690      	mov	r8, r2
 80004bc:	b500      	push	{lr}
 80004be:	0e2d      	lsrs	r5, r5, #24
 80004c0:	0e3f      	lsrs	r7, r7, #24
 80004c2:	0fc9      	lsrs	r1, r1, #31
 80004c4:	09b6      	lsrs	r6, r6, #6
 80004c6:	428c      	cmp	r4, r1
 80004c8:	d04b      	beq.n	8000562 <__aeabi_fadd+0xbe>
 80004ca:	1bea      	subs	r2, r5, r7
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	dd36      	ble.n	800053e <__aeabi_fadd+0x9a>
 80004d0:	2f00      	cmp	r7, #0
 80004d2:	d061      	beq.n	8000598 <__aeabi_fadd+0xf4>
 80004d4:	2dff      	cmp	r5, #255	; 0xff
 80004d6:	d100      	bne.n	80004da <__aeabi_fadd+0x36>
 80004d8:	e0ad      	b.n	8000636 <__aeabi_fadd+0x192>
 80004da:	2380      	movs	r3, #128	; 0x80
 80004dc:	04db      	lsls	r3, r3, #19
 80004de:	431e      	orrs	r6, r3
 80004e0:	2a1b      	cmp	r2, #27
 80004e2:	dc00      	bgt.n	80004e6 <__aeabi_fadd+0x42>
 80004e4:	e0d3      	b.n	800068e <__aeabi_fadd+0x1ea>
 80004e6:	2001      	movs	r0, #1
 80004e8:	4643      	mov	r3, r8
 80004ea:	1a18      	subs	r0, r3, r0
 80004ec:	0143      	lsls	r3, r0, #5
 80004ee:	d400      	bmi.n	80004f2 <__aeabi_fadd+0x4e>
 80004f0:	e08c      	b.n	800060c <__aeabi_fadd+0x168>
 80004f2:	0180      	lsls	r0, r0, #6
 80004f4:	0987      	lsrs	r7, r0, #6
 80004f6:	0038      	movs	r0, r7
 80004f8:	f000 fed4 	bl	80012a4 <__clzsi2>
 80004fc:	3805      	subs	r0, #5
 80004fe:	4087      	lsls	r7, r0
 8000500:	4285      	cmp	r5, r0
 8000502:	dc00      	bgt.n	8000506 <__aeabi_fadd+0x62>
 8000504:	e0b6      	b.n	8000674 <__aeabi_fadd+0x1d0>
 8000506:	1a2d      	subs	r5, r5, r0
 8000508:	48b3      	ldr	r0, [pc, #716]	; (80007d8 <__aeabi_fadd+0x334>)
 800050a:	4038      	ands	r0, r7
 800050c:	0743      	lsls	r3, r0, #29
 800050e:	d004      	beq.n	800051a <__aeabi_fadd+0x76>
 8000510:	230f      	movs	r3, #15
 8000512:	4003      	ands	r3, r0
 8000514:	2b04      	cmp	r3, #4
 8000516:	d000      	beq.n	800051a <__aeabi_fadd+0x76>
 8000518:	3004      	adds	r0, #4
 800051a:	0143      	lsls	r3, r0, #5
 800051c:	d400      	bmi.n	8000520 <__aeabi_fadd+0x7c>
 800051e:	e078      	b.n	8000612 <__aeabi_fadd+0x16e>
 8000520:	1c6a      	adds	r2, r5, #1
 8000522:	2dfe      	cmp	r5, #254	; 0xfe
 8000524:	d065      	beq.n	80005f2 <__aeabi_fadd+0x14e>
 8000526:	0180      	lsls	r0, r0, #6
 8000528:	0a43      	lsrs	r3, r0, #9
 800052a:	469c      	mov	ip, r3
 800052c:	b2d2      	uxtb	r2, r2
 800052e:	4663      	mov	r3, ip
 8000530:	05d0      	lsls	r0, r2, #23
 8000532:	4318      	orrs	r0, r3
 8000534:	07e4      	lsls	r4, r4, #31
 8000536:	4320      	orrs	r0, r4
 8000538:	bc80      	pop	{r7}
 800053a:	46b8      	mov	r8, r7
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	2a00      	cmp	r2, #0
 8000540:	d035      	beq.n	80005ae <__aeabi_fadd+0x10a>
 8000542:	1b7a      	subs	r2, r7, r5
 8000544:	2d00      	cmp	r5, #0
 8000546:	d000      	beq.n	800054a <__aeabi_fadd+0xa6>
 8000548:	e0af      	b.n	80006aa <__aeabi_fadd+0x206>
 800054a:	4643      	mov	r3, r8
 800054c:	2b00      	cmp	r3, #0
 800054e:	d100      	bne.n	8000552 <__aeabi_fadd+0xae>
 8000550:	e0a7      	b.n	80006a2 <__aeabi_fadd+0x1fe>
 8000552:	1e53      	subs	r3, r2, #1
 8000554:	2a01      	cmp	r2, #1
 8000556:	d100      	bne.n	800055a <__aeabi_fadd+0xb6>
 8000558:	e12f      	b.n	80007ba <__aeabi_fadd+0x316>
 800055a:	2aff      	cmp	r2, #255	; 0xff
 800055c:	d069      	beq.n	8000632 <__aeabi_fadd+0x18e>
 800055e:	001a      	movs	r2, r3
 8000560:	e0aa      	b.n	80006b8 <__aeabi_fadd+0x214>
 8000562:	1be9      	subs	r1, r5, r7
 8000564:	2900      	cmp	r1, #0
 8000566:	dd70      	ble.n	800064a <__aeabi_fadd+0x1a6>
 8000568:	2f00      	cmp	r7, #0
 800056a:	d037      	beq.n	80005dc <__aeabi_fadd+0x138>
 800056c:	2dff      	cmp	r5, #255	; 0xff
 800056e:	d062      	beq.n	8000636 <__aeabi_fadd+0x192>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	04db      	lsls	r3, r3, #19
 8000574:	431e      	orrs	r6, r3
 8000576:	291b      	cmp	r1, #27
 8000578:	dc00      	bgt.n	800057c <__aeabi_fadd+0xd8>
 800057a:	e0b0      	b.n	80006de <__aeabi_fadd+0x23a>
 800057c:	2001      	movs	r0, #1
 800057e:	4440      	add	r0, r8
 8000580:	0143      	lsls	r3, r0, #5
 8000582:	d543      	bpl.n	800060c <__aeabi_fadd+0x168>
 8000584:	3501      	adds	r5, #1
 8000586:	2dff      	cmp	r5, #255	; 0xff
 8000588:	d033      	beq.n	80005f2 <__aeabi_fadd+0x14e>
 800058a:	2301      	movs	r3, #1
 800058c:	4a93      	ldr	r2, [pc, #588]	; (80007dc <__aeabi_fadd+0x338>)
 800058e:	4003      	ands	r3, r0
 8000590:	0840      	lsrs	r0, r0, #1
 8000592:	4010      	ands	r0, r2
 8000594:	4318      	orrs	r0, r3
 8000596:	e7b9      	b.n	800050c <__aeabi_fadd+0x68>
 8000598:	2e00      	cmp	r6, #0
 800059a:	d100      	bne.n	800059e <__aeabi_fadd+0xfa>
 800059c:	e083      	b.n	80006a6 <__aeabi_fadd+0x202>
 800059e:	1e51      	subs	r1, r2, #1
 80005a0:	2a01      	cmp	r2, #1
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fadd+0x102>
 80005a4:	e0d8      	b.n	8000758 <__aeabi_fadd+0x2b4>
 80005a6:	2aff      	cmp	r2, #255	; 0xff
 80005a8:	d045      	beq.n	8000636 <__aeabi_fadd+0x192>
 80005aa:	000a      	movs	r2, r1
 80005ac:	e798      	b.n	80004e0 <__aeabi_fadd+0x3c>
 80005ae:	27fe      	movs	r7, #254	; 0xfe
 80005b0:	1c6a      	adds	r2, r5, #1
 80005b2:	4217      	tst	r7, r2
 80005b4:	d000      	beq.n	80005b8 <__aeabi_fadd+0x114>
 80005b6:	e086      	b.n	80006c6 <__aeabi_fadd+0x222>
 80005b8:	2d00      	cmp	r5, #0
 80005ba:	d000      	beq.n	80005be <__aeabi_fadd+0x11a>
 80005bc:	e0b7      	b.n	800072e <__aeabi_fadd+0x28a>
 80005be:	4643      	mov	r3, r8
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d100      	bne.n	80005c6 <__aeabi_fadd+0x122>
 80005c4:	e0f3      	b.n	80007ae <__aeabi_fadd+0x30a>
 80005c6:	2200      	movs	r2, #0
 80005c8:	2e00      	cmp	r6, #0
 80005ca:	d0b0      	beq.n	800052e <__aeabi_fadd+0x8a>
 80005cc:	1b98      	subs	r0, r3, r6
 80005ce:	0143      	lsls	r3, r0, #5
 80005d0:	d400      	bmi.n	80005d4 <__aeabi_fadd+0x130>
 80005d2:	e0fa      	b.n	80007ca <__aeabi_fadd+0x326>
 80005d4:	4643      	mov	r3, r8
 80005d6:	000c      	movs	r4, r1
 80005d8:	1af0      	subs	r0, r6, r3
 80005da:	e797      	b.n	800050c <__aeabi_fadd+0x68>
 80005dc:	2e00      	cmp	r6, #0
 80005de:	d100      	bne.n	80005e2 <__aeabi_fadd+0x13e>
 80005e0:	e0c8      	b.n	8000774 <__aeabi_fadd+0x2d0>
 80005e2:	1e4a      	subs	r2, r1, #1
 80005e4:	2901      	cmp	r1, #1
 80005e6:	d100      	bne.n	80005ea <__aeabi_fadd+0x146>
 80005e8:	e0ae      	b.n	8000748 <__aeabi_fadd+0x2a4>
 80005ea:	29ff      	cmp	r1, #255	; 0xff
 80005ec:	d023      	beq.n	8000636 <__aeabi_fadd+0x192>
 80005ee:	0011      	movs	r1, r2
 80005f0:	e7c1      	b.n	8000576 <__aeabi_fadd+0xd2>
 80005f2:	2300      	movs	r3, #0
 80005f4:	22ff      	movs	r2, #255	; 0xff
 80005f6:	469c      	mov	ip, r3
 80005f8:	e799      	b.n	800052e <__aeabi_fadd+0x8a>
 80005fa:	21fe      	movs	r1, #254	; 0xfe
 80005fc:	1c6a      	adds	r2, r5, #1
 80005fe:	4211      	tst	r1, r2
 8000600:	d077      	beq.n	80006f2 <__aeabi_fadd+0x24e>
 8000602:	2aff      	cmp	r2, #255	; 0xff
 8000604:	d0f5      	beq.n	80005f2 <__aeabi_fadd+0x14e>
 8000606:	0015      	movs	r5, r2
 8000608:	4446      	add	r6, r8
 800060a:	0870      	lsrs	r0, r6, #1
 800060c:	0743      	lsls	r3, r0, #29
 800060e:	d000      	beq.n	8000612 <__aeabi_fadd+0x16e>
 8000610:	e77e      	b.n	8000510 <__aeabi_fadd+0x6c>
 8000612:	08c3      	lsrs	r3, r0, #3
 8000614:	2dff      	cmp	r5, #255	; 0xff
 8000616:	d00e      	beq.n	8000636 <__aeabi_fadd+0x192>
 8000618:	025b      	lsls	r3, r3, #9
 800061a:	0a5b      	lsrs	r3, r3, #9
 800061c:	469c      	mov	ip, r3
 800061e:	b2ea      	uxtb	r2, r5
 8000620:	e785      	b.n	800052e <__aeabi_fadd+0x8a>
 8000622:	2e00      	cmp	r6, #0
 8000624:	d007      	beq.n	8000636 <__aeabi_fadd+0x192>
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	03d2      	lsls	r2, r2, #15
 800062a:	4213      	tst	r3, r2
 800062c:	d003      	beq.n	8000636 <__aeabi_fadd+0x192>
 800062e:	4210      	tst	r0, r2
 8000630:	d101      	bne.n	8000636 <__aeabi_fadd+0x192>
 8000632:	000c      	movs	r4, r1
 8000634:	0003      	movs	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d0db      	beq.n	80005f2 <__aeabi_fadd+0x14e>
 800063a:	2080      	movs	r0, #128	; 0x80
 800063c:	03c0      	lsls	r0, r0, #15
 800063e:	4318      	orrs	r0, r3
 8000640:	0240      	lsls	r0, r0, #9
 8000642:	0a43      	lsrs	r3, r0, #9
 8000644:	469c      	mov	ip, r3
 8000646:	22ff      	movs	r2, #255	; 0xff
 8000648:	e771      	b.n	800052e <__aeabi_fadd+0x8a>
 800064a:	2900      	cmp	r1, #0
 800064c:	d0d5      	beq.n	80005fa <__aeabi_fadd+0x156>
 800064e:	1b7a      	subs	r2, r7, r5
 8000650:	2d00      	cmp	r5, #0
 8000652:	d160      	bne.n	8000716 <__aeabi_fadd+0x272>
 8000654:	4643      	mov	r3, r8
 8000656:	2b00      	cmp	r3, #0
 8000658:	d024      	beq.n	80006a4 <__aeabi_fadd+0x200>
 800065a:	1e53      	subs	r3, r2, #1
 800065c:	2a01      	cmp	r2, #1
 800065e:	d073      	beq.n	8000748 <__aeabi_fadd+0x2a4>
 8000660:	2aff      	cmp	r2, #255	; 0xff
 8000662:	d0e7      	beq.n	8000634 <__aeabi_fadd+0x190>
 8000664:	001a      	movs	r2, r3
 8000666:	2a1b      	cmp	r2, #27
 8000668:	dc00      	bgt.n	800066c <__aeabi_fadd+0x1c8>
 800066a:	e085      	b.n	8000778 <__aeabi_fadd+0x2d4>
 800066c:	2001      	movs	r0, #1
 800066e:	003d      	movs	r5, r7
 8000670:	1980      	adds	r0, r0, r6
 8000672:	e785      	b.n	8000580 <__aeabi_fadd+0xdc>
 8000674:	2320      	movs	r3, #32
 8000676:	003a      	movs	r2, r7
 8000678:	1b45      	subs	r5, r0, r5
 800067a:	0038      	movs	r0, r7
 800067c:	3501      	adds	r5, #1
 800067e:	40ea      	lsrs	r2, r5
 8000680:	1b5d      	subs	r5, r3, r5
 8000682:	40a8      	lsls	r0, r5
 8000684:	1e43      	subs	r3, r0, #1
 8000686:	4198      	sbcs	r0, r3
 8000688:	2500      	movs	r5, #0
 800068a:	4310      	orrs	r0, r2
 800068c:	e73e      	b.n	800050c <__aeabi_fadd+0x68>
 800068e:	2320      	movs	r3, #32
 8000690:	0030      	movs	r0, r6
 8000692:	1a9b      	subs	r3, r3, r2
 8000694:	0031      	movs	r1, r6
 8000696:	4098      	lsls	r0, r3
 8000698:	40d1      	lsrs	r1, r2
 800069a:	1e43      	subs	r3, r0, #1
 800069c:	4198      	sbcs	r0, r3
 800069e:	4308      	orrs	r0, r1
 80006a0:	e722      	b.n	80004e8 <__aeabi_fadd+0x44>
 80006a2:	000c      	movs	r4, r1
 80006a4:	0003      	movs	r3, r0
 80006a6:	0015      	movs	r5, r2
 80006a8:	e7b4      	b.n	8000614 <__aeabi_fadd+0x170>
 80006aa:	2fff      	cmp	r7, #255	; 0xff
 80006ac:	d0c1      	beq.n	8000632 <__aeabi_fadd+0x18e>
 80006ae:	2380      	movs	r3, #128	; 0x80
 80006b0:	4640      	mov	r0, r8
 80006b2:	04db      	lsls	r3, r3, #19
 80006b4:	4318      	orrs	r0, r3
 80006b6:	4680      	mov	r8, r0
 80006b8:	2a1b      	cmp	r2, #27
 80006ba:	dd51      	ble.n	8000760 <__aeabi_fadd+0x2bc>
 80006bc:	2001      	movs	r0, #1
 80006be:	000c      	movs	r4, r1
 80006c0:	003d      	movs	r5, r7
 80006c2:	1a30      	subs	r0, r6, r0
 80006c4:	e712      	b.n	80004ec <__aeabi_fadd+0x48>
 80006c6:	4643      	mov	r3, r8
 80006c8:	1b9f      	subs	r7, r3, r6
 80006ca:	017b      	lsls	r3, r7, #5
 80006cc:	d42b      	bmi.n	8000726 <__aeabi_fadd+0x282>
 80006ce:	2f00      	cmp	r7, #0
 80006d0:	d000      	beq.n	80006d4 <__aeabi_fadd+0x230>
 80006d2:	e710      	b.n	80004f6 <__aeabi_fadd+0x52>
 80006d4:	2300      	movs	r3, #0
 80006d6:	2400      	movs	r4, #0
 80006d8:	2200      	movs	r2, #0
 80006da:	469c      	mov	ip, r3
 80006dc:	e727      	b.n	800052e <__aeabi_fadd+0x8a>
 80006de:	2320      	movs	r3, #32
 80006e0:	0032      	movs	r2, r6
 80006e2:	0030      	movs	r0, r6
 80006e4:	40ca      	lsrs	r2, r1
 80006e6:	1a59      	subs	r1, r3, r1
 80006e8:	4088      	lsls	r0, r1
 80006ea:	1e43      	subs	r3, r0, #1
 80006ec:	4198      	sbcs	r0, r3
 80006ee:	4310      	orrs	r0, r2
 80006f0:	e745      	b.n	800057e <__aeabi_fadd+0xda>
 80006f2:	2d00      	cmp	r5, #0
 80006f4:	d14a      	bne.n	800078c <__aeabi_fadd+0x2e8>
 80006f6:	4643      	mov	r3, r8
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d063      	beq.n	80007c4 <__aeabi_fadd+0x320>
 80006fc:	2200      	movs	r2, #0
 80006fe:	2e00      	cmp	r6, #0
 8000700:	d100      	bne.n	8000704 <__aeabi_fadd+0x260>
 8000702:	e714      	b.n	800052e <__aeabi_fadd+0x8a>
 8000704:	0030      	movs	r0, r6
 8000706:	4440      	add	r0, r8
 8000708:	0143      	lsls	r3, r0, #5
 800070a:	d400      	bmi.n	800070e <__aeabi_fadd+0x26a>
 800070c:	e77e      	b.n	800060c <__aeabi_fadd+0x168>
 800070e:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <__aeabi_fadd+0x334>)
 8000710:	3501      	adds	r5, #1
 8000712:	4018      	ands	r0, r3
 8000714:	e77a      	b.n	800060c <__aeabi_fadd+0x168>
 8000716:	2fff      	cmp	r7, #255	; 0xff
 8000718:	d08c      	beq.n	8000634 <__aeabi_fadd+0x190>
 800071a:	2380      	movs	r3, #128	; 0x80
 800071c:	4641      	mov	r1, r8
 800071e:	04db      	lsls	r3, r3, #19
 8000720:	4319      	orrs	r1, r3
 8000722:	4688      	mov	r8, r1
 8000724:	e79f      	b.n	8000666 <__aeabi_fadd+0x1c2>
 8000726:	4643      	mov	r3, r8
 8000728:	000c      	movs	r4, r1
 800072a:	1af7      	subs	r7, r6, r3
 800072c:	e6e3      	b.n	80004f6 <__aeabi_fadd+0x52>
 800072e:	4642      	mov	r2, r8
 8000730:	2a00      	cmp	r2, #0
 8000732:	d000      	beq.n	8000736 <__aeabi_fadd+0x292>
 8000734:	e775      	b.n	8000622 <__aeabi_fadd+0x17e>
 8000736:	2e00      	cmp	r6, #0
 8000738:	d000      	beq.n	800073c <__aeabi_fadd+0x298>
 800073a:	e77a      	b.n	8000632 <__aeabi_fadd+0x18e>
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	03db      	lsls	r3, r3, #15
 8000740:	2400      	movs	r4, #0
 8000742:	469c      	mov	ip, r3
 8000744:	22ff      	movs	r2, #255	; 0xff
 8000746:	e6f2      	b.n	800052e <__aeabi_fadd+0x8a>
 8000748:	0030      	movs	r0, r6
 800074a:	4440      	add	r0, r8
 800074c:	2501      	movs	r5, #1
 800074e:	0143      	lsls	r3, r0, #5
 8000750:	d400      	bmi.n	8000754 <__aeabi_fadd+0x2b0>
 8000752:	e75b      	b.n	800060c <__aeabi_fadd+0x168>
 8000754:	2502      	movs	r5, #2
 8000756:	e718      	b.n	800058a <__aeabi_fadd+0xe6>
 8000758:	4643      	mov	r3, r8
 800075a:	2501      	movs	r5, #1
 800075c:	1b98      	subs	r0, r3, r6
 800075e:	e6c5      	b.n	80004ec <__aeabi_fadd+0x48>
 8000760:	2320      	movs	r3, #32
 8000762:	4644      	mov	r4, r8
 8000764:	4640      	mov	r0, r8
 8000766:	40d4      	lsrs	r4, r2
 8000768:	1a9a      	subs	r2, r3, r2
 800076a:	4090      	lsls	r0, r2
 800076c:	1e43      	subs	r3, r0, #1
 800076e:	4198      	sbcs	r0, r3
 8000770:	4320      	orrs	r0, r4
 8000772:	e7a4      	b.n	80006be <__aeabi_fadd+0x21a>
 8000774:	000d      	movs	r5, r1
 8000776:	e74d      	b.n	8000614 <__aeabi_fadd+0x170>
 8000778:	2320      	movs	r3, #32
 800077a:	4641      	mov	r1, r8
 800077c:	4640      	mov	r0, r8
 800077e:	40d1      	lsrs	r1, r2
 8000780:	1a9a      	subs	r2, r3, r2
 8000782:	4090      	lsls	r0, r2
 8000784:	1e43      	subs	r3, r0, #1
 8000786:	4198      	sbcs	r0, r3
 8000788:	4308      	orrs	r0, r1
 800078a:	e770      	b.n	800066e <__aeabi_fadd+0x1ca>
 800078c:	4642      	mov	r2, r8
 800078e:	2a00      	cmp	r2, #0
 8000790:	d100      	bne.n	8000794 <__aeabi_fadd+0x2f0>
 8000792:	e74f      	b.n	8000634 <__aeabi_fadd+0x190>
 8000794:	2e00      	cmp	r6, #0
 8000796:	d100      	bne.n	800079a <__aeabi_fadd+0x2f6>
 8000798:	e74d      	b.n	8000636 <__aeabi_fadd+0x192>
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	03d2      	lsls	r2, r2, #15
 800079e:	4213      	tst	r3, r2
 80007a0:	d100      	bne.n	80007a4 <__aeabi_fadd+0x300>
 80007a2:	e748      	b.n	8000636 <__aeabi_fadd+0x192>
 80007a4:	4210      	tst	r0, r2
 80007a6:	d000      	beq.n	80007aa <__aeabi_fadd+0x306>
 80007a8:	e745      	b.n	8000636 <__aeabi_fadd+0x192>
 80007aa:	0003      	movs	r3, r0
 80007ac:	e743      	b.n	8000636 <__aeabi_fadd+0x192>
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d090      	beq.n	80006d4 <__aeabi_fadd+0x230>
 80007b2:	000c      	movs	r4, r1
 80007b4:	4684      	mov	ip, r0
 80007b6:	2200      	movs	r2, #0
 80007b8:	e6b9      	b.n	800052e <__aeabi_fadd+0x8a>
 80007ba:	4643      	mov	r3, r8
 80007bc:	000c      	movs	r4, r1
 80007be:	1af0      	subs	r0, r6, r3
 80007c0:	3501      	adds	r5, #1
 80007c2:	e693      	b.n	80004ec <__aeabi_fadd+0x48>
 80007c4:	4684      	mov	ip, r0
 80007c6:	2200      	movs	r2, #0
 80007c8:	e6b1      	b.n	800052e <__aeabi_fadd+0x8a>
 80007ca:	2800      	cmp	r0, #0
 80007cc:	d000      	beq.n	80007d0 <__aeabi_fadd+0x32c>
 80007ce:	e71d      	b.n	800060c <__aeabi_fadd+0x168>
 80007d0:	2300      	movs	r3, #0
 80007d2:	2400      	movs	r4, #0
 80007d4:	469c      	mov	ip, r3
 80007d6:	e6aa      	b.n	800052e <__aeabi_fadd+0x8a>
 80007d8:	fbffffff 	.word	0xfbffffff
 80007dc:	7dffffff 	.word	0x7dffffff

080007e0 <__aeabi_fdiv>:
 80007e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e2:	464f      	mov	r7, r9
 80007e4:	4646      	mov	r6, r8
 80007e6:	46d6      	mov	lr, sl
 80007e8:	0245      	lsls	r5, r0, #9
 80007ea:	b5c0      	push	{r6, r7, lr}
 80007ec:	0047      	lsls	r7, r0, #1
 80007ee:	1c0c      	adds	r4, r1, #0
 80007f0:	0a6d      	lsrs	r5, r5, #9
 80007f2:	0e3f      	lsrs	r7, r7, #24
 80007f4:	0fc6      	lsrs	r6, r0, #31
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	d100      	bne.n	80007fc <__aeabi_fdiv+0x1c>
 80007fa:	e070      	b.n	80008de <__aeabi_fdiv+0xfe>
 80007fc:	2fff      	cmp	r7, #255	; 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fdiv+0x22>
 8000800:	e075      	b.n	80008ee <__aeabi_fdiv+0x10e>
 8000802:	00eb      	lsls	r3, r5, #3
 8000804:	2580      	movs	r5, #128	; 0x80
 8000806:	04ed      	lsls	r5, r5, #19
 8000808:	431d      	orrs	r5, r3
 800080a:	2300      	movs	r3, #0
 800080c:	4699      	mov	r9, r3
 800080e:	469a      	mov	sl, r3
 8000810:	3f7f      	subs	r7, #127	; 0x7f
 8000812:	0260      	lsls	r0, r4, #9
 8000814:	0a43      	lsrs	r3, r0, #9
 8000816:	4698      	mov	r8, r3
 8000818:	0063      	lsls	r3, r4, #1
 800081a:	0e1b      	lsrs	r3, r3, #24
 800081c:	0fe4      	lsrs	r4, r4, #31
 800081e:	2b00      	cmp	r3, #0
 8000820:	d04e      	beq.n	80008c0 <__aeabi_fdiv+0xe0>
 8000822:	2bff      	cmp	r3, #255	; 0xff
 8000824:	d046      	beq.n	80008b4 <__aeabi_fdiv+0xd4>
 8000826:	4642      	mov	r2, r8
 8000828:	00d0      	lsls	r0, r2, #3
 800082a:	2280      	movs	r2, #128	; 0x80
 800082c:	04d2      	lsls	r2, r2, #19
 800082e:	4302      	orrs	r2, r0
 8000830:	4690      	mov	r8, r2
 8000832:	2200      	movs	r2, #0
 8000834:	3b7f      	subs	r3, #127	; 0x7f
 8000836:	0031      	movs	r1, r6
 8000838:	1aff      	subs	r7, r7, r3
 800083a:	464b      	mov	r3, r9
 800083c:	4061      	eors	r1, r4
 800083e:	b2c9      	uxtb	r1, r1
 8000840:	4313      	orrs	r3, r2
 8000842:	2b0f      	cmp	r3, #15
 8000844:	d900      	bls.n	8000848 <__aeabi_fdiv+0x68>
 8000846:	e0b5      	b.n	80009b4 <__aeabi_fdiv+0x1d4>
 8000848:	486e      	ldr	r0, [pc, #440]	; (8000a04 <__aeabi_fdiv+0x224>)
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	58c3      	ldr	r3, [r0, r3]
 800084e:	469f      	mov	pc, r3
 8000850:	2300      	movs	r3, #0
 8000852:	4698      	mov	r8, r3
 8000854:	0026      	movs	r6, r4
 8000856:	4645      	mov	r5, r8
 8000858:	4692      	mov	sl, r2
 800085a:	4653      	mov	r3, sl
 800085c:	2b02      	cmp	r3, #2
 800085e:	d100      	bne.n	8000862 <__aeabi_fdiv+0x82>
 8000860:	e089      	b.n	8000976 <__aeabi_fdiv+0x196>
 8000862:	2b03      	cmp	r3, #3
 8000864:	d100      	bne.n	8000868 <__aeabi_fdiv+0x88>
 8000866:	e09e      	b.n	80009a6 <__aeabi_fdiv+0x1c6>
 8000868:	2b01      	cmp	r3, #1
 800086a:	d018      	beq.n	800089e <__aeabi_fdiv+0xbe>
 800086c:	003b      	movs	r3, r7
 800086e:	337f      	adds	r3, #127	; 0x7f
 8000870:	2b00      	cmp	r3, #0
 8000872:	dd69      	ble.n	8000948 <__aeabi_fdiv+0x168>
 8000874:	076a      	lsls	r2, r5, #29
 8000876:	d004      	beq.n	8000882 <__aeabi_fdiv+0xa2>
 8000878:	220f      	movs	r2, #15
 800087a:	402a      	ands	r2, r5
 800087c:	2a04      	cmp	r2, #4
 800087e:	d000      	beq.n	8000882 <__aeabi_fdiv+0xa2>
 8000880:	3504      	adds	r5, #4
 8000882:	012a      	lsls	r2, r5, #4
 8000884:	d503      	bpl.n	800088e <__aeabi_fdiv+0xae>
 8000886:	4b60      	ldr	r3, [pc, #384]	; (8000a08 <__aeabi_fdiv+0x228>)
 8000888:	401d      	ands	r5, r3
 800088a:	003b      	movs	r3, r7
 800088c:	3380      	adds	r3, #128	; 0x80
 800088e:	2bfe      	cmp	r3, #254	; 0xfe
 8000890:	dd00      	ble.n	8000894 <__aeabi_fdiv+0xb4>
 8000892:	e070      	b.n	8000976 <__aeabi_fdiv+0x196>
 8000894:	01ad      	lsls	r5, r5, #6
 8000896:	0a6d      	lsrs	r5, r5, #9
 8000898:	b2d8      	uxtb	r0, r3
 800089a:	e002      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 800089c:	000e      	movs	r6, r1
 800089e:	2000      	movs	r0, #0
 80008a0:	2500      	movs	r5, #0
 80008a2:	05c0      	lsls	r0, r0, #23
 80008a4:	4328      	orrs	r0, r5
 80008a6:	07f6      	lsls	r6, r6, #31
 80008a8:	4330      	orrs	r0, r6
 80008aa:	bce0      	pop	{r5, r6, r7}
 80008ac:	46ba      	mov	sl, r7
 80008ae:	46b1      	mov	r9, r6
 80008b0:	46a8      	mov	r8, r5
 80008b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008b4:	4643      	mov	r3, r8
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d13f      	bne.n	800093a <__aeabi_fdiv+0x15a>
 80008ba:	2202      	movs	r2, #2
 80008bc:	3fff      	subs	r7, #255	; 0xff
 80008be:	e003      	b.n	80008c8 <__aeabi_fdiv+0xe8>
 80008c0:	4643      	mov	r3, r8
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d12d      	bne.n	8000922 <__aeabi_fdiv+0x142>
 80008c6:	2201      	movs	r2, #1
 80008c8:	0031      	movs	r1, r6
 80008ca:	464b      	mov	r3, r9
 80008cc:	4061      	eors	r1, r4
 80008ce:	b2c9      	uxtb	r1, r1
 80008d0:	4313      	orrs	r3, r2
 80008d2:	2b0f      	cmp	r3, #15
 80008d4:	d834      	bhi.n	8000940 <__aeabi_fdiv+0x160>
 80008d6:	484d      	ldr	r0, [pc, #308]	; (8000a0c <__aeabi_fdiv+0x22c>)
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	58c3      	ldr	r3, [r0, r3]
 80008dc:	469f      	mov	pc, r3
 80008de:	2d00      	cmp	r5, #0
 80008e0:	d113      	bne.n	800090a <__aeabi_fdiv+0x12a>
 80008e2:	2304      	movs	r3, #4
 80008e4:	4699      	mov	r9, r3
 80008e6:	3b03      	subs	r3, #3
 80008e8:	2700      	movs	r7, #0
 80008ea:	469a      	mov	sl, r3
 80008ec:	e791      	b.n	8000812 <__aeabi_fdiv+0x32>
 80008ee:	2d00      	cmp	r5, #0
 80008f0:	d105      	bne.n	80008fe <__aeabi_fdiv+0x11e>
 80008f2:	2308      	movs	r3, #8
 80008f4:	4699      	mov	r9, r3
 80008f6:	3b06      	subs	r3, #6
 80008f8:	27ff      	movs	r7, #255	; 0xff
 80008fa:	469a      	mov	sl, r3
 80008fc:	e789      	b.n	8000812 <__aeabi_fdiv+0x32>
 80008fe:	230c      	movs	r3, #12
 8000900:	4699      	mov	r9, r3
 8000902:	3b09      	subs	r3, #9
 8000904:	27ff      	movs	r7, #255	; 0xff
 8000906:	469a      	mov	sl, r3
 8000908:	e783      	b.n	8000812 <__aeabi_fdiv+0x32>
 800090a:	0028      	movs	r0, r5
 800090c:	f000 fcca 	bl	80012a4 <__clzsi2>
 8000910:	2776      	movs	r7, #118	; 0x76
 8000912:	1f43      	subs	r3, r0, #5
 8000914:	409d      	lsls	r5, r3
 8000916:	2300      	movs	r3, #0
 8000918:	427f      	negs	r7, r7
 800091a:	4699      	mov	r9, r3
 800091c:	469a      	mov	sl, r3
 800091e:	1a3f      	subs	r7, r7, r0
 8000920:	e777      	b.n	8000812 <__aeabi_fdiv+0x32>
 8000922:	4640      	mov	r0, r8
 8000924:	f000 fcbe 	bl	80012a4 <__clzsi2>
 8000928:	4642      	mov	r2, r8
 800092a:	1f43      	subs	r3, r0, #5
 800092c:	409a      	lsls	r2, r3
 800092e:	2376      	movs	r3, #118	; 0x76
 8000930:	425b      	negs	r3, r3
 8000932:	4690      	mov	r8, r2
 8000934:	1a1b      	subs	r3, r3, r0
 8000936:	2200      	movs	r2, #0
 8000938:	e77d      	b.n	8000836 <__aeabi_fdiv+0x56>
 800093a:	23ff      	movs	r3, #255	; 0xff
 800093c:	2203      	movs	r2, #3
 800093e:	e77a      	b.n	8000836 <__aeabi_fdiv+0x56>
 8000940:	000e      	movs	r6, r1
 8000942:	20ff      	movs	r0, #255	; 0xff
 8000944:	2500      	movs	r5, #0
 8000946:	e7ac      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 8000948:	2001      	movs	r0, #1
 800094a:	1ac0      	subs	r0, r0, r3
 800094c:	281b      	cmp	r0, #27
 800094e:	dca6      	bgt.n	800089e <__aeabi_fdiv+0xbe>
 8000950:	379e      	adds	r7, #158	; 0x9e
 8000952:	002a      	movs	r2, r5
 8000954:	40bd      	lsls	r5, r7
 8000956:	40c2      	lsrs	r2, r0
 8000958:	1e6b      	subs	r3, r5, #1
 800095a:	419d      	sbcs	r5, r3
 800095c:	4315      	orrs	r5, r2
 800095e:	076b      	lsls	r3, r5, #29
 8000960:	d004      	beq.n	800096c <__aeabi_fdiv+0x18c>
 8000962:	230f      	movs	r3, #15
 8000964:	402b      	ands	r3, r5
 8000966:	2b04      	cmp	r3, #4
 8000968:	d000      	beq.n	800096c <__aeabi_fdiv+0x18c>
 800096a:	3504      	adds	r5, #4
 800096c:	016b      	lsls	r3, r5, #5
 800096e:	d544      	bpl.n	80009fa <__aeabi_fdiv+0x21a>
 8000970:	2001      	movs	r0, #1
 8000972:	2500      	movs	r5, #0
 8000974:	e795      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 8000976:	20ff      	movs	r0, #255	; 0xff
 8000978:	2500      	movs	r5, #0
 800097a:	e792      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 800097c:	2580      	movs	r5, #128	; 0x80
 800097e:	2600      	movs	r6, #0
 8000980:	20ff      	movs	r0, #255	; 0xff
 8000982:	03ed      	lsls	r5, r5, #15
 8000984:	e78d      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 8000986:	2300      	movs	r3, #0
 8000988:	4698      	mov	r8, r3
 800098a:	2080      	movs	r0, #128	; 0x80
 800098c:	03c0      	lsls	r0, r0, #15
 800098e:	4205      	tst	r5, r0
 8000990:	d009      	beq.n	80009a6 <__aeabi_fdiv+0x1c6>
 8000992:	4643      	mov	r3, r8
 8000994:	4203      	tst	r3, r0
 8000996:	d106      	bne.n	80009a6 <__aeabi_fdiv+0x1c6>
 8000998:	4645      	mov	r5, r8
 800099a:	4305      	orrs	r5, r0
 800099c:	026d      	lsls	r5, r5, #9
 800099e:	0026      	movs	r6, r4
 80009a0:	20ff      	movs	r0, #255	; 0xff
 80009a2:	0a6d      	lsrs	r5, r5, #9
 80009a4:	e77d      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 80009a6:	2080      	movs	r0, #128	; 0x80
 80009a8:	03c0      	lsls	r0, r0, #15
 80009aa:	4305      	orrs	r5, r0
 80009ac:	026d      	lsls	r5, r5, #9
 80009ae:	20ff      	movs	r0, #255	; 0xff
 80009b0:	0a6d      	lsrs	r5, r5, #9
 80009b2:	e776      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 80009b4:	4642      	mov	r2, r8
 80009b6:	016b      	lsls	r3, r5, #5
 80009b8:	0150      	lsls	r0, r2, #5
 80009ba:	4283      	cmp	r3, r0
 80009bc:	d219      	bcs.n	80009f2 <__aeabi_fdiv+0x212>
 80009be:	221b      	movs	r2, #27
 80009c0:	2500      	movs	r5, #0
 80009c2:	3f01      	subs	r7, #1
 80009c4:	2601      	movs	r6, #1
 80009c6:	001c      	movs	r4, r3
 80009c8:	006d      	lsls	r5, r5, #1
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	2c00      	cmp	r4, #0
 80009ce:	db01      	blt.n	80009d4 <__aeabi_fdiv+0x1f4>
 80009d0:	4298      	cmp	r0, r3
 80009d2:	d801      	bhi.n	80009d8 <__aeabi_fdiv+0x1f8>
 80009d4:	1a1b      	subs	r3, r3, r0
 80009d6:	4335      	orrs	r5, r6
 80009d8:	3a01      	subs	r2, #1
 80009da:	2a00      	cmp	r2, #0
 80009dc:	d1f3      	bne.n	80009c6 <__aeabi_fdiv+0x1e6>
 80009de:	1e5a      	subs	r2, r3, #1
 80009e0:	4193      	sbcs	r3, r2
 80009e2:	431d      	orrs	r5, r3
 80009e4:	003b      	movs	r3, r7
 80009e6:	337f      	adds	r3, #127	; 0x7f
 80009e8:	000e      	movs	r6, r1
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	dd00      	ble.n	80009f0 <__aeabi_fdiv+0x210>
 80009ee:	e741      	b.n	8000874 <__aeabi_fdiv+0x94>
 80009f0:	e7aa      	b.n	8000948 <__aeabi_fdiv+0x168>
 80009f2:	221a      	movs	r2, #26
 80009f4:	2501      	movs	r5, #1
 80009f6:	1a1b      	subs	r3, r3, r0
 80009f8:	e7e4      	b.n	80009c4 <__aeabi_fdiv+0x1e4>
 80009fa:	01ad      	lsls	r5, r5, #6
 80009fc:	2000      	movs	r0, #0
 80009fe:	0a6d      	lsrs	r5, r5, #9
 8000a00:	e74f      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	08006c24 	.word	0x08006c24
 8000a08:	f7ffffff 	.word	0xf7ffffff
 8000a0c:	08006c64 	.word	0x08006c64

08000a10 <__eqsf2>:
 8000a10:	b570      	push	{r4, r5, r6, lr}
 8000a12:	0042      	lsls	r2, r0, #1
 8000a14:	0245      	lsls	r5, r0, #9
 8000a16:	024e      	lsls	r6, r1, #9
 8000a18:	004c      	lsls	r4, r1, #1
 8000a1a:	0fc3      	lsrs	r3, r0, #31
 8000a1c:	0a6d      	lsrs	r5, r5, #9
 8000a1e:	2001      	movs	r0, #1
 8000a20:	0e12      	lsrs	r2, r2, #24
 8000a22:	0a76      	lsrs	r6, r6, #9
 8000a24:	0e24      	lsrs	r4, r4, #24
 8000a26:	0fc9      	lsrs	r1, r1, #31
 8000a28:	2aff      	cmp	r2, #255	; 0xff
 8000a2a:	d006      	beq.n	8000a3a <__eqsf2+0x2a>
 8000a2c:	2cff      	cmp	r4, #255	; 0xff
 8000a2e:	d003      	beq.n	8000a38 <__eqsf2+0x28>
 8000a30:	42a2      	cmp	r2, r4
 8000a32:	d101      	bne.n	8000a38 <__eqsf2+0x28>
 8000a34:	42b5      	cmp	r5, r6
 8000a36:	d006      	beq.n	8000a46 <__eqsf2+0x36>
 8000a38:	bd70      	pop	{r4, r5, r6, pc}
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d1fc      	bne.n	8000a38 <__eqsf2+0x28>
 8000a3e:	2cff      	cmp	r4, #255	; 0xff
 8000a40:	d1fa      	bne.n	8000a38 <__eqsf2+0x28>
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	d1f8      	bne.n	8000a38 <__eqsf2+0x28>
 8000a46:	428b      	cmp	r3, r1
 8000a48:	d006      	beq.n	8000a58 <__eqsf2+0x48>
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	d1f3      	bne.n	8000a38 <__eqsf2+0x28>
 8000a50:	0028      	movs	r0, r5
 8000a52:	1e43      	subs	r3, r0, #1
 8000a54:	4198      	sbcs	r0, r3
 8000a56:	e7ef      	b.n	8000a38 <__eqsf2+0x28>
 8000a58:	2000      	movs	r0, #0
 8000a5a:	e7ed      	b.n	8000a38 <__eqsf2+0x28>

08000a5c <__gesf2>:
 8000a5c:	b570      	push	{r4, r5, r6, lr}
 8000a5e:	0042      	lsls	r2, r0, #1
 8000a60:	0245      	lsls	r5, r0, #9
 8000a62:	024e      	lsls	r6, r1, #9
 8000a64:	004c      	lsls	r4, r1, #1
 8000a66:	0fc3      	lsrs	r3, r0, #31
 8000a68:	0a6d      	lsrs	r5, r5, #9
 8000a6a:	0e12      	lsrs	r2, r2, #24
 8000a6c:	0a76      	lsrs	r6, r6, #9
 8000a6e:	0e24      	lsrs	r4, r4, #24
 8000a70:	0fc8      	lsrs	r0, r1, #31
 8000a72:	2aff      	cmp	r2, #255	; 0xff
 8000a74:	d01b      	beq.n	8000aae <__gesf2+0x52>
 8000a76:	2cff      	cmp	r4, #255	; 0xff
 8000a78:	d00e      	beq.n	8000a98 <__gesf2+0x3c>
 8000a7a:	2a00      	cmp	r2, #0
 8000a7c:	d11b      	bne.n	8000ab6 <__gesf2+0x5a>
 8000a7e:	2c00      	cmp	r4, #0
 8000a80:	d101      	bne.n	8000a86 <__gesf2+0x2a>
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d01c      	beq.n	8000ac0 <__gesf2+0x64>
 8000a86:	2d00      	cmp	r5, #0
 8000a88:	d00c      	beq.n	8000aa4 <__gesf2+0x48>
 8000a8a:	4283      	cmp	r3, r0
 8000a8c:	d01c      	beq.n	8000ac8 <__gesf2+0x6c>
 8000a8e:	2102      	movs	r1, #2
 8000a90:	1e58      	subs	r0, r3, #1
 8000a92:	4008      	ands	r0, r1
 8000a94:	3801      	subs	r0, #1
 8000a96:	bd70      	pop	{r4, r5, r6, pc}
 8000a98:	2e00      	cmp	r6, #0
 8000a9a:	d122      	bne.n	8000ae2 <__gesf2+0x86>
 8000a9c:	2a00      	cmp	r2, #0
 8000a9e:	d1f4      	bne.n	8000a8a <__gesf2+0x2e>
 8000aa0:	2d00      	cmp	r5, #0
 8000aa2:	d1f2      	bne.n	8000a8a <__gesf2+0x2e>
 8000aa4:	2800      	cmp	r0, #0
 8000aa6:	d1f6      	bne.n	8000a96 <__gesf2+0x3a>
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	4240      	negs	r0, r0
 8000aac:	e7f3      	b.n	8000a96 <__gesf2+0x3a>
 8000aae:	2d00      	cmp	r5, #0
 8000ab0:	d117      	bne.n	8000ae2 <__gesf2+0x86>
 8000ab2:	2cff      	cmp	r4, #255	; 0xff
 8000ab4:	d0f0      	beq.n	8000a98 <__gesf2+0x3c>
 8000ab6:	2c00      	cmp	r4, #0
 8000ab8:	d1e7      	bne.n	8000a8a <__gesf2+0x2e>
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	d1e5      	bne.n	8000a8a <__gesf2+0x2e>
 8000abe:	e7e6      	b.n	8000a8e <__gesf2+0x32>
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d0e7      	beq.n	8000a96 <__gesf2+0x3a>
 8000ac6:	e7e2      	b.n	8000a8e <__gesf2+0x32>
 8000ac8:	42a2      	cmp	r2, r4
 8000aca:	dc05      	bgt.n	8000ad8 <__gesf2+0x7c>
 8000acc:	dbea      	blt.n	8000aa4 <__gesf2+0x48>
 8000ace:	42b5      	cmp	r5, r6
 8000ad0:	d802      	bhi.n	8000ad8 <__gesf2+0x7c>
 8000ad2:	d3e7      	bcc.n	8000aa4 <__gesf2+0x48>
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	e7de      	b.n	8000a96 <__gesf2+0x3a>
 8000ad8:	4243      	negs	r3, r0
 8000ada:	4158      	adcs	r0, r3
 8000adc:	0040      	lsls	r0, r0, #1
 8000ade:	3801      	subs	r0, #1
 8000ae0:	e7d9      	b.n	8000a96 <__gesf2+0x3a>
 8000ae2:	2002      	movs	r0, #2
 8000ae4:	4240      	negs	r0, r0
 8000ae6:	e7d6      	b.n	8000a96 <__gesf2+0x3a>

08000ae8 <__lesf2>:
 8000ae8:	b570      	push	{r4, r5, r6, lr}
 8000aea:	0042      	lsls	r2, r0, #1
 8000aec:	0245      	lsls	r5, r0, #9
 8000aee:	024e      	lsls	r6, r1, #9
 8000af0:	004c      	lsls	r4, r1, #1
 8000af2:	0fc3      	lsrs	r3, r0, #31
 8000af4:	0a6d      	lsrs	r5, r5, #9
 8000af6:	0e12      	lsrs	r2, r2, #24
 8000af8:	0a76      	lsrs	r6, r6, #9
 8000afa:	0e24      	lsrs	r4, r4, #24
 8000afc:	0fc8      	lsrs	r0, r1, #31
 8000afe:	2aff      	cmp	r2, #255	; 0xff
 8000b00:	d00b      	beq.n	8000b1a <__lesf2+0x32>
 8000b02:	2cff      	cmp	r4, #255	; 0xff
 8000b04:	d00d      	beq.n	8000b22 <__lesf2+0x3a>
 8000b06:	2a00      	cmp	r2, #0
 8000b08:	d11f      	bne.n	8000b4a <__lesf2+0x62>
 8000b0a:	2c00      	cmp	r4, #0
 8000b0c:	d116      	bne.n	8000b3c <__lesf2+0x54>
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d114      	bne.n	8000b3c <__lesf2+0x54>
 8000b12:	2000      	movs	r0, #0
 8000b14:	2d00      	cmp	r5, #0
 8000b16:	d010      	beq.n	8000b3a <__lesf2+0x52>
 8000b18:	e009      	b.n	8000b2e <__lesf2+0x46>
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d10c      	bne.n	8000b38 <__lesf2+0x50>
 8000b1e:	2cff      	cmp	r4, #255	; 0xff
 8000b20:	d113      	bne.n	8000b4a <__lesf2+0x62>
 8000b22:	2e00      	cmp	r6, #0
 8000b24:	d108      	bne.n	8000b38 <__lesf2+0x50>
 8000b26:	2a00      	cmp	r2, #0
 8000b28:	d008      	beq.n	8000b3c <__lesf2+0x54>
 8000b2a:	4283      	cmp	r3, r0
 8000b2c:	d012      	beq.n	8000b54 <__lesf2+0x6c>
 8000b2e:	2102      	movs	r1, #2
 8000b30:	1e58      	subs	r0, r3, #1
 8000b32:	4008      	ands	r0, r1
 8000b34:	3801      	subs	r0, #1
 8000b36:	e000      	b.n	8000b3a <__lesf2+0x52>
 8000b38:	2002      	movs	r0, #2
 8000b3a:	bd70      	pop	{r4, r5, r6, pc}
 8000b3c:	2d00      	cmp	r5, #0
 8000b3e:	d1f4      	bne.n	8000b2a <__lesf2+0x42>
 8000b40:	2800      	cmp	r0, #0
 8000b42:	d1fa      	bne.n	8000b3a <__lesf2+0x52>
 8000b44:	2001      	movs	r0, #1
 8000b46:	4240      	negs	r0, r0
 8000b48:	e7f7      	b.n	8000b3a <__lesf2+0x52>
 8000b4a:	2c00      	cmp	r4, #0
 8000b4c:	d1ed      	bne.n	8000b2a <__lesf2+0x42>
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d1eb      	bne.n	8000b2a <__lesf2+0x42>
 8000b52:	e7ec      	b.n	8000b2e <__lesf2+0x46>
 8000b54:	42a2      	cmp	r2, r4
 8000b56:	dc05      	bgt.n	8000b64 <__lesf2+0x7c>
 8000b58:	dbf2      	blt.n	8000b40 <__lesf2+0x58>
 8000b5a:	42b5      	cmp	r5, r6
 8000b5c:	d802      	bhi.n	8000b64 <__lesf2+0x7c>
 8000b5e:	d3ef      	bcc.n	8000b40 <__lesf2+0x58>
 8000b60:	2000      	movs	r0, #0
 8000b62:	e7ea      	b.n	8000b3a <__lesf2+0x52>
 8000b64:	4243      	negs	r3, r0
 8000b66:	4158      	adcs	r0, r3
 8000b68:	0040      	lsls	r0, r0, #1
 8000b6a:	3801      	subs	r0, #1
 8000b6c:	e7e5      	b.n	8000b3a <__lesf2+0x52>
 8000b6e:	46c0      	nop			; (mov r8, r8)

08000b70 <__aeabi_fmul>:
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	464f      	mov	r7, r9
 8000b74:	4646      	mov	r6, r8
 8000b76:	46d6      	mov	lr, sl
 8000b78:	0244      	lsls	r4, r0, #9
 8000b7a:	0045      	lsls	r5, r0, #1
 8000b7c:	b5c0      	push	{r6, r7, lr}
 8000b7e:	0a64      	lsrs	r4, r4, #9
 8000b80:	1c0f      	adds	r7, r1, #0
 8000b82:	0e2d      	lsrs	r5, r5, #24
 8000b84:	0fc6      	lsrs	r6, r0, #31
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	d100      	bne.n	8000b8c <__aeabi_fmul+0x1c>
 8000b8a:	e08d      	b.n	8000ca8 <__aeabi_fmul+0x138>
 8000b8c:	2dff      	cmp	r5, #255	; 0xff
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_fmul+0x22>
 8000b90:	e092      	b.n	8000cb8 <__aeabi_fmul+0x148>
 8000b92:	2300      	movs	r3, #0
 8000b94:	2080      	movs	r0, #128	; 0x80
 8000b96:	4699      	mov	r9, r3
 8000b98:	469a      	mov	sl, r3
 8000b9a:	00e4      	lsls	r4, r4, #3
 8000b9c:	04c0      	lsls	r0, r0, #19
 8000b9e:	4304      	orrs	r4, r0
 8000ba0:	3d7f      	subs	r5, #127	; 0x7f
 8000ba2:	0278      	lsls	r0, r7, #9
 8000ba4:	0a43      	lsrs	r3, r0, #9
 8000ba6:	4698      	mov	r8, r3
 8000ba8:	007b      	lsls	r3, r7, #1
 8000baa:	0e1b      	lsrs	r3, r3, #24
 8000bac:	0fff      	lsrs	r7, r7, #31
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_fmul+0x44>
 8000bb2:	e070      	b.n	8000c96 <__aeabi_fmul+0x126>
 8000bb4:	2bff      	cmp	r3, #255	; 0xff
 8000bb6:	d100      	bne.n	8000bba <__aeabi_fmul+0x4a>
 8000bb8:	e086      	b.n	8000cc8 <__aeabi_fmul+0x158>
 8000bba:	4642      	mov	r2, r8
 8000bbc:	00d0      	lsls	r0, r2, #3
 8000bbe:	2280      	movs	r2, #128	; 0x80
 8000bc0:	3b7f      	subs	r3, #127	; 0x7f
 8000bc2:	18ed      	adds	r5, r5, r3
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	04d2      	lsls	r2, r2, #19
 8000bc8:	4302      	orrs	r2, r0
 8000bca:	4690      	mov	r8, r2
 8000bcc:	469c      	mov	ip, r3
 8000bce:	0031      	movs	r1, r6
 8000bd0:	464b      	mov	r3, r9
 8000bd2:	4079      	eors	r1, r7
 8000bd4:	1c68      	adds	r0, r5, #1
 8000bd6:	2b0f      	cmp	r3, #15
 8000bd8:	d81c      	bhi.n	8000c14 <__aeabi_fmul+0xa4>
 8000bda:	4a76      	ldr	r2, [pc, #472]	; (8000db4 <__aeabi_fmul+0x244>)
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	58d3      	ldr	r3, [r2, r3]
 8000be0:	469f      	mov	pc, r3
 8000be2:	0039      	movs	r1, r7
 8000be4:	4644      	mov	r4, r8
 8000be6:	46e2      	mov	sl, ip
 8000be8:	4653      	mov	r3, sl
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d00f      	beq.n	8000c0e <__aeabi_fmul+0x9e>
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fmul+0x84>
 8000bf2:	e0d7      	b.n	8000da4 <__aeabi_fmul+0x234>
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d137      	bne.n	8000c68 <__aeabi_fmul+0xf8>
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	2400      	movs	r4, #0
 8000bfc:	05c0      	lsls	r0, r0, #23
 8000bfe:	4320      	orrs	r0, r4
 8000c00:	07c9      	lsls	r1, r1, #31
 8000c02:	4308      	orrs	r0, r1
 8000c04:	bce0      	pop	{r5, r6, r7}
 8000c06:	46ba      	mov	sl, r7
 8000c08:	46b1      	mov	r9, r6
 8000c0a:	46a8      	mov	r8, r5
 8000c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c0e:	20ff      	movs	r0, #255	; 0xff
 8000c10:	2400      	movs	r4, #0
 8000c12:	e7f3      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000c14:	0c26      	lsrs	r6, r4, #16
 8000c16:	0424      	lsls	r4, r4, #16
 8000c18:	0c22      	lsrs	r2, r4, #16
 8000c1a:	4644      	mov	r4, r8
 8000c1c:	0424      	lsls	r4, r4, #16
 8000c1e:	0c24      	lsrs	r4, r4, #16
 8000c20:	4643      	mov	r3, r8
 8000c22:	0027      	movs	r7, r4
 8000c24:	0c1b      	lsrs	r3, r3, #16
 8000c26:	4357      	muls	r7, r2
 8000c28:	4374      	muls	r4, r6
 8000c2a:	435a      	muls	r2, r3
 8000c2c:	435e      	muls	r6, r3
 8000c2e:	1912      	adds	r2, r2, r4
 8000c30:	0c3b      	lsrs	r3, r7, #16
 8000c32:	189b      	adds	r3, r3, r2
 8000c34:	429c      	cmp	r4, r3
 8000c36:	d903      	bls.n	8000c40 <__aeabi_fmul+0xd0>
 8000c38:	2280      	movs	r2, #128	; 0x80
 8000c3a:	0252      	lsls	r2, r2, #9
 8000c3c:	4694      	mov	ip, r2
 8000c3e:	4466      	add	r6, ip
 8000c40:	043f      	lsls	r7, r7, #16
 8000c42:	041a      	lsls	r2, r3, #16
 8000c44:	0c3f      	lsrs	r7, r7, #16
 8000c46:	19d2      	adds	r2, r2, r7
 8000c48:	0194      	lsls	r4, r2, #6
 8000c4a:	1e67      	subs	r7, r4, #1
 8000c4c:	41bc      	sbcs	r4, r7
 8000c4e:	0c1b      	lsrs	r3, r3, #16
 8000c50:	0e92      	lsrs	r2, r2, #26
 8000c52:	199b      	adds	r3, r3, r6
 8000c54:	4314      	orrs	r4, r2
 8000c56:	019b      	lsls	r3, r3, #6
 8000c58:	431c      	orrs	r4, r3
 8000c5a:	011b      	lsls	r3, r3, #4
 8000c5c:	d400      	bmi.n	8000c60 <__aeabi_fmul+0xf0>
 8000c5e:	e09b      	b.n	8000d98 <__aeabi_fmul+0x228>
 8000c60:	2301      	movs	r3, #1
 8000c62:	0862      	lsrs	r2, r4, #1
 8000c64:	401c      	ands	r4, r3
 8000c66:	4314      	orrs	r4, r2
 8000c68:	0002      	movs	r2, r0
 8000c6a:	327f      	adds	r2, #127	; 0x7f
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	dd64      	ble.n	8000d3a <__aeabi_fmul+0x1ca>
 8000c70:	0763      	lsls	r3, r4, #29
 8000c72:	d004      	beq.n	8000c7e <__aeabi_fmul+0x10e>
 8000c74:	230f      	movs	r3, #15
 8000c76:	4023      	ands	r3, r4
 8000c78:	2b04      	cmp	r3, #4
 8000c7a:	d000      	beq.n	8000c7e <__aeabi_fmul+0x10e>
 8000c7c:	3404      	adds	r4, #4
 8000c7e:	0123      	lsls	r3, r4, #4
 8000c80:	d503      	bpl.n	8000c8a <__aeabi_fmul+0x11a>
 8000c82:	0002      	movs	r2, r0
 8000c84:	4b4c      	ldr	r3, [pc, #304]	; (8000db8 <__aeabi_fmul+0x248>)
 8000c86:	3280      	adds	r2, #128	; 0x80
 8000c88:	401c      	ands	r4, r3
 8000c8a:	2afe      	cmp	r2, #254	; 0xfe
 8000c8c:	dcbf      	bgt.n	8000c0e <__aeabi_fmul+0x9e>
 8000c8e:	01a4      	lsls	r4, r4, #6
 8000c90:	0a64      	lsrs	r4, r4, #9
 8000c92:	b2d0      	uxtb	r0, r2
 8000c94:	e7b2      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000c96:	4643      	mov	r3, r8
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d13d      	bne.n	8000d18 <__aeabi_fmul+0x1a8>
 8000c9c:	464a      	mov	r2, r9
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	4691      	mov	r9, r2
 8000ca4:	469c      	mov	ip, r3
 8000ca6:	e792      	b.n	8000bce <__aeabi_fmul+0x5e>
 8000ca8:	2c00      	cmp	r4, #0
 8000caa:	d129      	bne.n	8000d00 <__aeabi_fmul+0x190>
 8000cac:	2304      	movs	r3, #4
 8000cae:	4699      	mov	r9, r3
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	2500      	movs	r5, #0
 8000cb4:	469a      	mov	sl, r3
 8000cb6:	e774      	b.n	8000ba2 <__aeabi_fmul+0x32>
 8000cb8:	2c00      	cmp	r4, #0
 8000cba:	d11b      	bne.n	8000cf4 <__aeabi_fmul+0x184>
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	4699      	mov	r9, r3
 8000cc0:	3b06      	subs	r3, #6
 8000cc2:	25ff      	movs	r5, #255	; 0xff
 8000cc4:	469a      	mov	sl, r3
 8000cc6:	e76c      	b.n	8000ba2 <__aeabi_fmul+0x32>
 8000cc8:	4643      	mov	r3, r8
 8000cca:	35ff      	adds	r5, #255	; 0xff
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d10b      	bne.n	8000ce8 <__aeabi_fmul+0x178>
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	464a      	mov	r2, r9
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	4691      	mov	r9, r2
 8000cd8:	469c      	mov	ip, r3
 8000cda:	e778      	b.n	8000bce <__aeabi_fmul+0x5e>
 8000cdc:	4653      	mov	r3, sl
 8000cde:	0031      	movs	r1, r6
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d000      	beq.n	8000ce6 <__aeabi_fmul+0x176>
 8000ce4:	e783      	b.n	8000bee <__aeabi_fmul+0x7e>
 8000ce6:	e792      	b.n	8000c0e <__aeabi_fmul+0x9e>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	464a      	mov	r2, r9
 8000cec:	431a      	orrs	r2, r3
 8000cee:	4691      	mov	r9, r2
 8000cf0:	469c      	mov	ip, r3
 8000cf2:	e76c      	b.n	8000bce <__aeabi_fmul+0x5e>
 8000cf4:	230c      	movs	r3, #12
 8000cf6:	4699      	mov	r9, r3
 8000cf8:	3b09      	subs	r3, #9
 8000cfa:	25ff      	movs	r5, #255	; 0xff
 8000cfc:	469a      	mov	sl, r3
 8000cfe:	e750      	b.n	8000ba2 <__aeabi_fmul+0x32>
 8000d00:	0020      	movs	r0, r4
 8000d02:	f000 facf 	bl	80012a4 <__clzsi2>
 8000d06:	2576      	movs	r5, #118	; 0x76
 8000d08:	1f43      	subs	r3, r0, #5
 8000d0a:	409c      	lsls	r4, r3
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	426d      	negs	r5, r5
 8000d10:	4699      	mov	r9, r3
 8000d12:	469a      	mov	sl, r3
 8000d14:	1a2d      	subs	r5, r5, r0
 8000d16:	e744      	b.n	8000ba2 <__aeabi_fmul+0x32>
 8000d18:	4640      	mov	r0, r8
 8000d1a:	f000 fac3 	bl	80012a4 <__clzsi2>
 8000d1e:	4642      	mov	r2, r8
 8000d20:	1f43      	subs	r3, r0, #5
 8000d22:	409a      	lsls	r2, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	1a2d      	subs	r5, r5, r0
 8000d28:	4690      	mov	r8, r2
 8000d2a:	469c      	mov	ip, r3
 8000d2c:	3d76      	subs	r5, #118	; 0x76
 8000d2e:	e74e      	b.n	8000bce <__aeabi_fmul+0x5e>
 8000d30:	2480      	movs	r4, #128	; 0x80
 8000d32:	2100      	movs	r1, #0
 8000d34:	20ff      	movs	r0, #255	; 0xff
 8000d36:	03e4      	lsls	r4, r4, #15
 8000d38:	e760      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	1a9b      	subs	r3, r3, r2
 8000d3e:	2b1b      	cmp	r3, #27
 8000d40:	dd00      	ble.n	8000d44 <__aeabi_fmul+0x1d4>
 8000d42:	e759      	b.n	8000bf8 <__aeabi_fmul+0x88>
 8000d44:	0022      	movs	r2, r4
 8000d46:	309e      	adds	r0, #158	; 0x9e
 8000d48:	40da      	lsrs	r2, r3
 8000d4a:	4084      	lsls	r4, r0
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	1e62      	subs	r2, r4, #1
 8000d50:	4194      	sbcs	r4, r2
 8000d52:	431c      	orrs	r4, r3
 8000d54:	0763      	lsls	r3, r4, #29
 8000d56:	d004      	beq.n	8000d62 <__aeabi_fmul+0x1f2>
 8000d58:	230f      	movs	r3, #15
 8000d5a:	4023      	ands	r3, r4
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	d000      	beq.n	8000d62 <__aeabi_fmul+0x1f2>
 8000d60:	3404      	adds	r4, #4
 8000d62:	0163      	lsls	r3, r4, #5
 8000d64:	d51a      	bpl.n	8000d9c <__aeabi_fmul+0x22c>
 8000d66:	2001      	movs	r0, #1
 8000d68:	2400      	movs	r4, #0
 8000d6a:	e747      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000d6c:	2080      	movs	r0, #128	; 0x80
 8000d6e:	03c0      	lsls	r0, r0, #15
 8000d70:	4204      	tst	r4, r0
 8000d72:	d009      	beq.n	8000d88 <__aeabi_fmul+0x218>
 8000d74:	4643      	mov	r3, r8
 8000d76:	4203      	tst	r3, r0
 8000d78:	d106      	bne.n	8000d88 <__aeabi_fmul+0x218>
 8000d7a:	4644      	mov	r4, r8
 8000d7c:	4304      	orrs	r4, r0
 8000d7e:	0264      	lsls	r4, r4, #9
 8000d80:	0039      	movs	r1, r7
 8000d82:	20ff      	movs	r0, #255	; 0xff
 8000d84:	0a64      	lsrs	r4, r4, #9
 8000d86:	e739      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000d88:	2080      	movs	r0, #128	; 0x80
 8000d8a:	03c0      	lsls	r0, r0, #15
 8000d8c:	4304      	orrs	r4, r0
 8000d8e:	0264      	lsls	r4, r4, #9
 8000d90:	0031      	movs	r1, r6
 8000d92:	20ff      	movs	r0, #255	; 0xff
 8000d94:	0a64      	lsrs	r4, r4, #9
 8000d96:	e731      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000d98:	0028      	movs	r0, r5
 8000d9a:	e765      	b.n	8000c68 <__aeabi_fmul+0xf8>
 8000d9c:	01a4      	lsls	r4, r4, #6
 8000d9e:	2000      	movs	r0, #0
 8000da0:	0a64      	lsrs	r4, r4, #9
 8000da2:	e72b      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000da4:	2080      	movs	r0, #128	; 0x80
 8000da6:	03c0      	lsls	r0, r0, #15
 8000da8:	4304      	orrs	r4, r0
 8000daa:	0264      	lsls	r4, r4, #9
 8000dac:	20ff      	movs	r0, #255	; 0xff
 8000dae:	0a64      	lsrs	r4, r4, #9
 8000db0:	e724      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	08006ca4 	.word	0x08006ca4
 8000db8:	f7ffffff 	.word	0xf7ffffff

08000dbc <__aeabi_fsub>:
 8000dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dbe:	46ce      	mov	lr, r9
 8000dc0:	4647      	mov	r7, r8
 8000dc2:	0243      	lsls	r3, r0, #9
 8000dc4:	0a5b      	lsrs	r3, r3, #9
 8000dc6:	024e      	lsls	r6, r1, #9
 8000dc8:	00da      	lsls	r2, r3, #3
 8000dca:	4694      	mov	ip, r2
 8000dcc:	0a72      	lsrs	r2, r6, #9
 8000dce:	4691      	mov	r9, r2
 8000dd0:	0045      	lsls	r5, r0, #1
 8000dd2:	004a      	lsls	r2, r1, #1
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	0e2d      	lsrs	r5, r5, #24
 8000dd8:	001f      	movs	r7, r3
 8000dda:	0fc4      	lsrs	r4, r0, #31
 8000ddc:	0e12      	lsrs	r2, r2, #24
 8000dde:	0fc9      	lsrs	r1, r1, #31
 8000de0:	09b6      	lsrs	r6, r6, #6
 8000de2:	2aff      	cmp	r2, #255	; 0xff
 8000de4:	d05b      	beq.n	8000e9e <__aeabi_fsub+0xe2>
 8000de6:	2001      	movs	r0, #1
 8000de8:	4041      	eors	r1, r0
 8000dea:	428c      	cmp	r4, r1
 8000dec:	d039      	beq.n	8000e62 <__aeabi_fsub+0xa6>
 8000dee:	1aa8      	subs	r0, r5, r2
 8000df0:	2800      	cmp	r0, #0
 8000df2:	dd5a      	ble.n	8000eaa <__aeabi_fsub+0xee>
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	d06a      	beq.n	8000ece <__aeabi_fsub+0x112>
 8000df8:	2dff      	cmp	r5, #255	; 0xff
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_fsub+0x42>
 8000dfc:	e0d9      	b.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000dfe:	2280      	movs	r2, #128	; 0x80
 8000e00:	04d2      	lsls	r2, r2, #19
 8000e02:	4316      	orrs	r6, r2
 8000e04:	281b      	cmp	r0, #27
 8000e06:	dc00      	bgt.n	8000e0a <__aeabi_fsub+0x4e>
 8000e08:	e0e9      	b.n	8000fde <__aeabi_fsub+0x222>
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	4663      	mov	r3, ip
 8000e0e:	1a18      	subs	r0, r3, r0
 8000e10:	0143      	lsls	r3, r0, #5
 8000e12:	d400      	bmi.n	8000e16 <__aeabi_fsub+0x5a>
 8000e14:	e0b4      	b.n	8000f80 <__aeabi_fsub+0x1c4>
 8000e16:	0180      	lsls	r0, r0, #6
 8000e18:	0987      	lsrs	r7, r0, #6
 8000e1a:	0038      	movs	r0, r7
 8000e1c:	f000 fa42 	bl	80012a4 <__clzsi2>
 8000e20:	3805      	subs	r0, #5
 8000e22:	4087      	lsls	r7, r0
 8000e24:	4285      	cmp	r5, r0
 8000e26:	dc00      	bgt.n	8000e2a <__aeabi_fsub+0x6e>
 8000e28:	e0cc      	b.n	8000fc4 <__aeabi_fsub+0x208>
 8000e2a:	1a2d      	subs	r5, r5, r0
 8000e2c:	48b5      	ldr	r0, [pc, #724]	; (8001104 <__aeabi_fsub+0x348>)
 8000e2e:	4038      	ands	r0, r7
 8000e30:	0743      	lsls	r3, r0, #29
 8000e32:	d004      	beq.n	8000e3e <__aeabi_fsub+0x82>
 8000e34:	230f      	movs	r3, #15
 8000e36:	4003      	ands	r3, r0
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	d000      	beq.n	8000e3e <__aeabi_fsub+0x82>
 8000e3c:	3004      	adds	r0, #4
 8000e3e:	0143      	lsls	r3, r0, #5
 8000e40:	d400      	bmi.n	8000e44 <__aeabi_fsub+0x88>
 8000e42:	e0a0      	b.n	8000f86 <__aeabi_fsub+0x1ca>
 8000e44:	1c6a      	adds	r2, r5, #1
 8000e46:	2dfe      	cmp	r5, #254	; 0xfe
 8000e48:	d100      	bne.n	8000e4c <__aeabi_fsub+0x90>
 8000e4a:	e08d      	b.n	8000f68 <__aeabi_fsub+0x1ac>
 8000e4c:	0180      	lsls	r0, r0, #6
 8000e4e:	0a47      	lsrs	r7, r0, #9
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	05d0      	lsls	r0, r2, #23
 8000e54:	4338      	orrs	r0, r7
 8000e56:	07e4      	lsls	r4, r4, #31
 8000e58:	4320      	orrs	r0, r4
 8000e5a:	bcc0      	pop	{r6, r7}
 8000e5c:	46b9      	mov	r9, r7
 8000e5e:	46b0      	mov	r8, r6
 8000e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e62:	1aa8      	subs	r0, r5, r2
 8000e64:	4680      	mov	r8, r0
 8000e66:	2800      	cmp	r0, #0
 8000e68:	dd45      	ble.n	8000ef6 <__aeabi_fsub+0x13a>
 8000e6a:	2a00      	cmp	r2, #0
 8000e6c:	d070      	beq.n	8000f50 <__aeabi_fsub+0x194>
 8000e6e:	2dff      	cmp	r5, #255	; 0xff
 8000e70:	d100      	bne.n	8000e74 <__aeabi_fsub+0xb8>
 8000e72:	e09e      	b.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	04db      	lsls	r3, r3, #19
 8000e78:	431e      	orrs	r6, r3
 8000e7a:	4643      	mov	r3, r8
 8000e7c:	2b1b      	cmp	r3, #27
 8000e7e:	dc00      	bgt.n	8000e82 <__aeabi_fsub+0xc6>
 8000e80:	e0d2      	b.n	8001028 <__aeabi_fsub+0x26c>
 8000e82:	2001      	movs	r0, #1
 8000e84:	4460      	add	r0, ip
 8000e86:	0143      	lsls	r3, r0, #5
 8000e88:	d57a      	bpl.n	8000f80 <__aeabi_fsub+0x1c4>
 8000e8a:	3501      	adds	r5, #1
 8000e8c:	2dff      	cmp	r5, #255	; 0xff
 8000e8e:	d06b      	beq.n	8000f68 <__aeabi_fsub+0x1ac>
 8000e90:	2301      	movs	r3, #1
 8000e92:	4a9d      	ldr	r2, [pc, #628]	; (8001108 <__aeabi_fsub+0x34c>)
 8000e94:	4003      	ands	r3, r0
 8000e96:	0840      	lsrs	r0, r0, #1
 8000e98:	4010      	ands	r0, r2
 8000e9a:	4318      	orrs	r0, r3
 8000e9c:	e7c8      	b.n	8000e30 <__aeabi_fsub+0x74>
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d020      	beq.n	8000ee4 <__aeabi_fsub+0x128>
 8000ea2:	428c      	cmp	r4, r1
 8000ea4:	d023      	beq.n	8000eee <__aeabi_fsub+0x132>
 8000ea6:	0028      	movs	r0, r5
 8000ea8:	38ff      	subs	r0, #255	; 0xff
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	d039      	beq.n	8000f22 <__aeabi_fsub+0x166>
 8000eae:	1b57      	subs	r7, r2, r5
 8000eb0:	2d00      	cmp	r5, #0
 8000eb2:	d000      	beq.n	8000eb6 <__aeabi_fsub+0xfa>
 8000eb4:	e09d      	b.n	8000ff2 <__aeabi_fsub+0x236>
 8000eb6:	4663      	mov	r3, ip
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d100      	bne.n	8000ebe <__aeabi_fsub+0x102>
 8000ebc:	e0db      	b.n	8001076 <__aeabi_fsub+0x2ba>
 8000ebe:	1e7b      	subs	r3, r7, #1
 8000ec0:	2f01      	cmp	r7, #1
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_fsub+0x10a>
 8000ec4:	e10d      	b.n	80010e2 <__aeabi_fsub+0x326>
 8000ec6:	2fff      	cmp	r7, #255	; 0xff
 8000ec8:	d071      	beq.n	8000fae <__aeabi_fsub+0x1f2>
 8000eca:	001f      	movs	r7, r3
 8000ecc:	e098      	b.n	8001000 <__aeabi_fsub+0x244>
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_fsub+0x118>
 8000ed2:	e0a7      	b.n	8001024 <__aeabi_fsub+0x268>
 8000ed4:	1e42      	subs	r2, r0, #1
 8000ed6:	2801      	cmp	r0, #1
 8000ed8:	d100      	bne.n	8000edc <__aeabi_fsub+0x120>
 8000eda:	e0e6      	b.n	80010aa <__aeabi_fsub+0x2ee>
 8000edc:	28ff      	cmp	r0, #255	; 0xff
 8000ede:	d068      	beq.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000ee0:	0010      	movs	r0, r2
 8000ee2:	e78f      	b.n	8000e04 <__aeabi_fsub+0x48>
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	4041      	eors	r1, r0
 8000ee8:	42a1      	cmp	r1, r4
 8000eea:	d000      	beq.n	8000eee <__aeabi_fsub+0x132>
 8000eec:	e77f      	b.n	8000dee <__aeabi_fsub+0x32>
 8000eee:	20ff      	movs	r0, #255	; 0xff
 8000ef0:	4240      	negs	r0, r0
 8000ef2:	4680      	mov	r8, r0
 8000ef4:	44a8      	add	r8, r5
 8000ef6:	4640      	mov	r0, r8
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	d038      	beq.n	8000f6e <__aeabi_fsub+0x1b2>
 8000efc:	1b51      	subs	r1, r2, r5
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	d100      	bne.n	8000f04 <__aeabi_fsub+0x148>
 8000f02:	e0ae      	b.n	8001062 <__aeabi_fsub+0x2a6>
 8000f04:	2aff      	cmp	r2, #255	; 0xff
 8000f06:	d100      	bne.n	8000f0a <__aeabi_fsub+0x14e>
 8000f08:	e0df      	b.n	80010ca <__aeabi_fsub+0x30e>
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	4660      	mov	r0, ip
 8000f0e:	04db      	lsls	r3, r3, #19
 8000f10:	4318      	orrs	r0, r3
 8000f12:	4684      	mov	ip, r0
 8000f14:	291b      	cmp	r1, #27
 8000f16:	dc00      	bgt.n	8000f1a <__aeabi_fsub+0x15e>
 8000f18:	e0d9      	b.n	80010ce <__aeabi_fsub+0x312>
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	0015      	movs	r5, r2
 8000f1e:	1980      	adds	r0, r0, r6
 8000f20:	e7b1      	b.n	8000e86 <__aeabi_fsub+0xca>
 8000f22:	20fe      	movs	r0, #254	; 0xfe
 8000f24:	1c6a      	adds	r2, r5, #1
 8000f26:	4210      	tst	r0, r2
 8000f28:	d171      	bne.n	800100e <__aeabi_fsub+0x252>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d000      	beq.n	8000f30 <__aeabi_fsub+0x174>
 8000f2e:	e0a6      	b.n	800107e <__aeabi_fsub+0x2c2>
 8000f30:	4663      	mov	r3, ip
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d100      	bne.n	8000f38 <__aeabi_fsub+0x17c>
 8000f36:	e0d9      	b.n	80010ec <__aeabi_fsub+0x330>
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2e00      	cmp	r6, #0
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_fsub+0x184>
 8000f3e:	e788      	b.n	8000e52 <__aeabi_fsub+0x96>
 8000f40:	1b98      	subs	r0, r3, r6
 8000f42:	0143      	lsls	r3, r0, #5
 8000f44:	d400      	bmi.n	8000f48 <__aeabi_fsub+0x18c>
 8000f46:	e0e1      	b.n	800110c <__aeabi_fsub+0x350>
 8000f48:	4663      	mov	r3, ip
 8000f4a:	000c      	movs	r4, r1
 8000f4c:	1af0      	subs	r0, r6, r3
 8000f4e:	e76f      	b.n	8000e30 <__aeabi_fsub+0x74>
 8000f50:	2e00      	cmp	r6, #0
 8000f52:	d100      	bne.n	8000f56 <__aeabi_fsub+0x19a>
 8000f54:	e0b7      	b.n	80010c6 <__aeabi_fsub+0x30a>
 8000f56:	0002      	movs	r2, r0
 8000f58:	3a01      	subs	r2, #1
 8000f5a:	2801      	cmp	r0, #1
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_fsub+0x1a4>
 8000f5e:	e09c      	b.n	800109a <__aeabi_fsub+0x2de>
 8000f60:	28ff      	cmp	r0, #255	; 0xff
 8000f62:	d026      	beq.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000f64:	4690      	mov	r8, r2
 8000f66:	e788      	b.n	8000e7a <__aeabi_fsub+0xbe>
 8000f68:	22ff      	movs	r2, #255	; 0xff
 8000f6a:	2700      	movs	r7, #0
 8000f6c:	e771      	b.n	8000e52 <__aeabi_fsub+0x96>
 8000f6e:	20fe      	movs	r0, #254	; 0xfe
 8000f70:	1c6a      	adds	r2, r5, #1
 8000f72:	4210      	tst	r0, r2
 8000f74:	d064      	beq.n	8001040 <__aeabi_fsub+0x284>
 8000f76:	2aff      	cmp	r2, #255	; 0xff
 8000f78:	d0f6      	beq.n	8000f68 <__aeabi_fsub+0x1ac>
 8000f7a:	0015      	movs	r5, r2
 8000f7c:	4466      	add	r6, ip
 8000f7e:	0870      	lsrs	r0, r6, #1
 8000f80:	0743      	lsls	r3, r0, #29
 8000f82:	d000      	beq.n	8000f86 <__aeabi_fsub+0x1ca>
 8000f84:	e756      	b.n	8000e34 <__aeabi_fsub+0x78>
 8000f86:	08c3      	lsrs	r3, r0, #3
 8000f88:	2dff      	cmp	r5, #255	; 0xff
 8000f8a:	d012      	beq.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000f8c:	025b      	lsls	r3, r3, #9
 8000f8e:	0a5f      	lsrs	r7, r3, #9
 8000f90:	b2ea      	uxtb	r2, r5
 8000f92:	e75e      	b.n	8000e52 <__aeabi_fsub+0x96>
 8000f94:	4662      	mov	r2, ip
 8000f96:	2a00      	cmp	r2, #0
 8000f98:	d100      	bne.n	8000f9c <__aeabi_fsub+0x1e0>
 8000f9a:	e096      	b.n	80010ca <__aeabi_fsub+0x30e>
 8000f9c:	2e00      	cmp	r6, #0
 8000f9e:	d008      	beq.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	03d2      	lsls	r2, r2, #15
 8000fa4:	4213      	tst	r3, r2
 8000fa6:	d004      	beq.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000fa8:	4648      	mov	r0, r9
 8000faa:	4210      	tst	r0, r2
 8000fac:	d101      	bne.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000fae:	000c      	movs	r4, r1
 8000fb0:	464b      	mov	r3, r9
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0d8      	beq.n	8000f68 <__aeabi_fsub+0x1ac>
 8000fb6:	2780      	movs	r7, #128	; 0x80
 8000fb8:	03ff      	lsls	r7, r7, #15
 8000fba:	431f      	orrs	r7, r3
 8000fbc:	027f      	lsls	r7, r7, #9
 8000fbe:	22ff      	movs	r2, #255	; 0xff
 8000fc0:	0a7f      	lsrs	r7, r7, #9
 8000fc2:	e746      	b.n	8000e52 <__aeabi_fsub+0x96>
 8000fc4:	2320      	movs	r3, #32
 8000fc6:	003a      	movs	r2, r7
 8000fc8:	1b45      	subs	r5, r0, r5
 8000fca:	0038      	movs	r0, r7
 8000fcc:	3501      	adds	r5, #1
 8000fce:	40ea      	lsrs	r2, r5
 8000fd0:	1b5d      	subs	r5, r3, r5
 8000fd2:	40a8      	lsls	r0, r5
 8000fd4:	1e43      	subs	r3, r0, #1
 8000fd6:	4198      	sbcs	r0, r3
 8000fd8:	2500      	movs	r5, #0
 8000fda:	4310      	orrs	r0, r2
 8000fdc:	e728      	b.n	8000e30 <__aeabi_fsub+0x74>
 8000fde:	2320      	movs	r3, #32
 8000fe0:	1a1b      	subs	r3, r3, r0
 8000fe2:	0032      	movs	r2, r6
 8000fe4:	409e      	lsls	r6, r3
 8000fe6:	40c2      	lsrs	r2, r0
 8000fe8:	0030      	movs	r0, r6
 8000fea:	1e43      	subs	r3, r0, #1
 8000fec:	4198      	sbcs	r0, r3
 8000fee:	4310      	orrs	r0, r2
 8000ff0:	e70c      	b.n	8000e0c <__aeabi_fsub+0x50>
 8000ff2:	2aff      	cmp	r2, #255	; 0xff
 8000ff4:	d0db      	beq.n	8000fae <__aeabi_fsub+0x1f2>
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	04db      	lsls	r3, r3, #19
 8000ffc:	4318      	orrs	r0, r3
 8000ffe:	4684      	mov	ip, r0
 8001000:	2f1b      	cmp	r7, #27
 8001002:	dd56      	ble.n	80010b2 <__aeabi_fsub+0x2f6>
 8001004:	2001      	movs	r0, #1
 8001006:	000c      	movs	r4, r1
 8001008:	0015      	movs	r5, r2
 800100a:	1a30      	subs	r0, r6, r0
 800100c:	e700      	b.n	8000e10 <__aeabi_fsub+0x54>
 800100e:	4663      	mov	r3, ip
 8001010:	1b9f      	subs	r7, r3, r6
 8001012:	017b      	lsls	r3, r7, #5
 8001014:	d43d      	bmi.n	8001092 <__aeabi_fsub+0x2d6>
 8001016:	2f00      	cmp	r7, #0
 8001018:	d000      	beq.n	800101c <__aeabi_fsub+0x260>
 800101a:	e6fe      	b.n	8000e1a <__aeabi_fsub+0x5e>
 800101c:	2400      	movs	r4, #0
 800101e:	2200      	movs	r2, #0
 8001020:	2700      	movs	r7, #0
 8001022:	e716      	b.n	8000e52 <__aeabi_fsub+0x96>
 8001024:	0005      	movs	r5, r0
 8001026:	e7af      	b.n	8000f88 <__aeabi_fsub+0x1cc>
 8001028:	0032      	movs	r2, r6
 800102a:	4643      	mov	r3, r8
 800102c:	4641      	mov	r1, r8
 800102e:	40da      	lsrs	r2, r3
 8001030:	2320      	movs	r3, #32
 8001032:	1a5b      	subs	r3, r3, r1
 8001034:	409e      	lsls	r6, r3
 8001036:	0030      	movs	r0, r6
 8001038:	1e43      	subs	r3, r0, #1
 800103a:	4198      	sbcs	r0, r3
 800103c:	4310      	orrs	r0, r2
 800103e:	e721      	b.n	8000e84 <__aeabi_fsub+0xc8>
 8001040:	2d00      	cmp	r5, #0
 8001042:	d1a7      	bne.n	8000f94 <__aeabi_fsub+0x1d8>
 8001044:	4663      	mov	r3, ip
 8001046:	2b00      	cmp	r3, #0
 8001048:	d059      	beq.n	80010fe <__aeabi_fsub+0x342>
 800104a:	2200      	movs	r2, #0
 800104c:	2e00      	cmp	r6, #0
 800104e:	d100      	bne.n	8001052 <__aeabi_fsub+0x296>
 8001050:	e6ff      	b.n	8000e52 <__aeabi_fsub+0x96>
 8001052:	0030      	movs	r0, r6
 8001054:	4460      	add	r0, ip
 8001056:	0143      	lsls	r3, r0, #5
 8001058:	d592      	bpl.n	8000f80 <__aeabi_fsub+0x1c4>
 800105a:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <__aeabi_fsub+0x348>)
 800105c:	3501      	adds	r5, #1
 800105e:	4018      	ands	r0, r3
 8001060:	e78e      	b.n	8000f80 <__aeabi_fsub+0x1c4>
 8001062:	4663      	mov	r3, ip
 8001064:	2b00      	cmp	r3, #0
 8001066:	d047      	beq.n	80010f8 <__aeabi_fsub+0x33c>
 8001068:	1e4b      	subs	r3, r1, #1
 800106a:	2901      	cmp	r1, #1
 800106c:	d015      	beq.n	800109a <__aeabi_fsub+0x2de>
 800106e:	29ff      	cmp	r1, #255	; 0xff
 8001070:	d02b      	beq.n	80010ca <__aeabi_fsub+0x30e>
 8001072:	0019      	movs	r1, r3
 8001074:	e74e      	b.n	8000f14 <__aeabi_fsub+0x158>
 8001076:	000c      	movs	r4, r1
 8001078:	464b      	mov	r3, r9
 800107a:	003d      	movs	r5, r7
 800107c:	e784      	b.n	8000f88 <__aeabi_fsub+0x1cc>
 800107e:	4662      	mov	r2, ip
 8001080:	2a00      	cmp	r2, #0
 8001082:	d18b      	bne.n	8000f9c <__aeabi_fsub+0x1e0>
 8001084:	2e00      	cmp	r6, #0
 8001086:	d192      	bne.n	8000fae <__aeabi_fsub+0x1f2>
 8001088:	2780      	movs	r7, #128	; 0x80
 800108a:	2400      	movs	r4, #0
 800108c:	22ff      	movs	r2, #255	; 0xff
 800108e:	03ff      	lsls	r7, r7, #15
 8001090:	e6df      	b.n	8000e52 <__aeabi_fsub+0x96>
 8001092:	4663      	mov	r3, ip
 8001094:	000c      	movs	r4, r1
 8001096:	1af7      	subs	r7, r6, r3
 8001098:	e6bf      	b.n	8000e1a <__aeabi_fsub+0x5e>
 800109a:	0030      	movs	r0, r6
 800109c:	4460      	add	r0, ip
 800109e:	2501      	movs	r5, #1
 80010a0:	0143      	lsls	r3, r0, #5
 80010a2:	d400      	bmi.n	80010a6 <__aeabi_fsub+0x2ea>
 80010a4:	e76c      	b.n	8000f80 <__aeabi_fsub+0x1c4>
 80010a6:	2502      	movs	r5, #2
 80010a8:	e6f2      	b.n	8000e90 <__aeabi_fsub+0xd4>
 80010aa:	4663      	mov	r3, ip
 80010ac:	2501      	movs	r5, #1
 80010ae:	1b98      	subs	r0, r3, r6
 80010b0:	e6ae      	b.n	8000e10 <__aeabi_fsub+0x54>
 80010b2:	2320      	movs	r3, #32
 80010b4:	4664      	mov	r4, ip
 80010b6:	4660      	mov	r0, ip
 80010b8:	40fc      	lsrs	r4, r7
 80010ba:	1bdf      	subs	r7, r3, r7
 80010bc:	40b8      	lsls	r0, r7
 80010be:	1e43      	subs	r3, r0, #1
 80010c0:	4198      	sbcs	r0, r3
 80010c2:	4320      	orrs	r0, r4
 80010c4:	e79f      	b.n	8001006 <__aeabi_fsub+0x24a>
 80010c6:	0005      	movs	r5, r0
 80010c8:	e75e      	b.n	8000f88 <__aeabi_fsub+0x1cc>
 80010ca:	464b      	mov	r3, r9
 80010cc:	e771      	b.n	8000fb2 <__aeabi_fsub+0x1f6>
 80010ce:	2320      	movs	r3, #32
 80010d0:	4665      	mov	r5, ip
 80010d2:	4660      	mov	r0, ip
 80010d4:	40cd      	lsrs	r5, r1
 80010d6:	1a59      	subs	r1, r3, r1
 80010d8:	4088      	lsls	r0, r1
 80010da:	1e43      	subs	r3, r0, #1
 80010dc:	4198      	sbcs	r0, r3
 80010de:	4328      	orrs	r0, r5
 80010e0:	e71c      	b.n	8000f1c <__aeabi_fsub+0x160>
 80010e2:	4663      	mov	r3, ip
 80010e4:	000c      	movs	r4, r1
 80010e6:	2501      	movs	r5, #1
 80010e8:	1af0      	subs	r0, r6, r3
 80010ea:	e691      	b.n	8000e10 <__aeabi_fsub+0x54>
 80010ec:	2e00      	cmp	r6, #0
 80010ee:	d095      	beq.n	800101c <__aeabi_fsub+0x260>
 80010f0:	000c      	movs	r4, r1
 80010f2:	464f      	mov	r7, r9
 80010f4:	2200      	movs	r2, #0
 80010f6:	e6ac      	b.n	8000e52 <__aeabi_fsub+0x96>
 80010f8:	464b      	mov	r3, r9
 80010fa:	000d      	movs	r5, r1
 80010fc:	e744      	b.n	8000f88 <__aeabi_fsub+0x1cc>
 80010fe:	464f      	mov	r7, r9
 8001100:	2200      	movs	r2, #0
 8001102:	e6a6      	b.n	8000e52 <__aeabi_fsub+0x96>
 8001104:	fbffffff 	.word	0xfbffffff
 8001108:	7dffffff 	.word	0x7dffffff
 800110c:	2800      	cmp	r0, #0
 800110e:	d000      	beq.n	8001112 <__aeabi_fsub+0x356>
 8001110:	e736      	b.n	8000f80 <__aeabi_fsub+0x1c4>
 8001112:	2400      	movs	r4, #0
 8001114:	2700      	movs	r7, #0
 8001116:	e69c      	b.n	8000e52 <__aeabi_fsub+0x96>

08001118 <__aeabi_fcmpun>:
 8001118:	0243      	lsls	r3, r0, #9
 800111a:	024a      	lsls	r2, r1, #9
 800111c:	0040      	lsls	r0, r0, #1
 800111e:	0049      	lsls	r1, r1, #1
 8001120:	0a5b      	lsrs	r3, r3, #9
 8001122:	0a52      	lsrs	r2, r2, #9
 8001124:	0e09      	lsrs	r1, r1, #24
 8001126:	0e00      	lsrs	r0, r0, #24
 8001128:	28ff      	cmp	r0, #255	; 0xff
 800112a:	d006      	beq.n	800113a <__aeabi_fcmpun+0x22>
 800112c:	2000      	movs	r0, #0
 800112e:	29ff      	cmp	r1, #255	; 0xff
 8001130:	d102      	bne.n	8001138 <__aeabi_fcmpun+0x20>
 8001132:	1e53      	subs	r3, r2, #1
 8001134:	419a      	sbcs	r2, r3
 8001136:	0010      	movs	r0, r2
 8001138:	4770      	bx	lr
 800113a:	38fe      	subs	r0, #254	; 0xfe
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1fb      	bne.n	8001138 <__aeabi_fcmpun+0x20>
 8001140:	e7f4      	b.n	800112c <__aeabi_fcmpun+0x14>
 8001142:	46c0      	nop			; (mov r8, r8)

08001144 <__aeabi_f2iz>:
 8001144:	0241      	lsls	r1, r0, #9
 8001146:	0042      	lsls	r2, r0, #1
 8001148:	0fc3      	lsrs	r3, r0, #31
 800114a:	0a49      	lsrs	r1, r1, #9
 800114c:	2000      	movs	r0, #0
 800114e:	0e12      	lsrs	r2, r2, #24
 8001150:	2a7e      	cmp	r2, #126	; 0x7e
 8001152:	dd03      	ble.n	800115c <__aeabi_f2iz+0x18>
 8001154:	2a9d      	cmp	r2, #157	; 0x9d
 8001156:	dd02      	ble.n	800115e <__aeabi_f2iz+0x1a>
 8001158:	4a09      	ldr	r2, [pc, #36]	; (8001180 <__aeabi_f2iz+0x3c>)
 800115a:	1898      	adds	r0, r3, r2
 800115c:	4770      	bx	lr
 800115e:	2080      	movs	r0, #128	; 0x80
 8001160:	0400      	lsls	r0, r0, #16
 8001162:	4301      	orrs	r1, r0
 8001164:	2a95      	cmp	r2, #149	; 0x95
 8001166:	dc07      	bgt.n	8001178 <__aeabi_f2iz+0x34>
 8001168:	2096      	movs	r0, #150	; 0x96
 800116a:	1a82      	subs	r2, r0, r2
 800116c:	40d1      	lsrs	r1, r2
 800116e:	4248      	negs	r0, r1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1f3      	bne.n	800115c <__aeabi_f2iz+0x18>
 8001174:	0008      	movs	r0, r1
 8001176:	e7f1      	b.n	800115c <__aeabi_f2iz+0x18>
 8001178:	3a96      	subs	r2, #150	; 0x96
 800117a:	4091      	lsls	r1, r2
 800117c:	e7f7      	b.n	800116e <__aeabi_f2iz+0x2a>
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	7fffffff 	.word	0x7fffffff

08001184 <__aeabi_i2f>:
 8001184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001186:	2800      	cmp	r0, #0
 8001188:	d013      	beq.n	80011b2 <__aeabi_i2f+0x2e>
 800118a:	17c3      	asrs	r3, r0, #31
 800118c:	18c6      	adds	r6, r0, r3
 800118e:	405e      	eors	r6, r3
 8001190:	0fc4      	lsrs	r4, r0, #31
 8001192:	0030      	movs	r0, r6
 8001194:	f000 f886 	bl	80012a4 <__clzsi2>
 8001198:	239e      	movs	r3, #158	; 0x9e
 800119a:	0005      	movs	r5, r0
 800119c:	1a1b      	subs	r3, r3, r0
 800119e:	2b96      	cmp	r3, #150	; 0x96
 80011a0:	dc0f      	bgt.n	80011c2 <__aeabi_i2f+0x3e>
 80011a2:	2808      	cmp	r0, #8
 80011a4:	dd01      	ble.n	80011aa <__aeabi_i2f+0x26>
 80011a6:	3d08      	subs	r5, #8
 80011a8:	40ae      	lsls	r6, r5
 80011aa:	0276      	lsls	r6, r6, #9
 80011ac:	0a76      	lsrs	r6, r6, #9
 80011ae:	b2d8      	uxtb	r0, r3
 80011b0:	e002      	b.n	80011b8 <__aeabi_i2f+0x34>
 80011b2:	2400      	movs	r4, #0
 80011b4:	2000      	movs	r0, #0
 80011b6:	2600      	movs	r6, #0
 80011b8:	05c0      	lsls	r0, r0, #23
 80011ba:	4330      	orrs	r0, r6
 80011bc:	07e4      	lsls	r4, r4, #31
 80011be:	4320      	orrs	r0, r4
 80011c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011c2:	2b99      	cmp	r3, #153	; 0x99
 80011c4:	dd0c      	ble.n	80011e0 <__aeabi_i2f+0x5c>
 80011c6:	2205      	movs	r2, #5
 80011c8:	0031      	movs	r1, r6
 80011ca:	1a12      	subs	r2, r2, r0
 80011cc:	40d1      	lsrs	r1, r2
 80011ce:	000a      	movs	r2, r1
 80011d0:	0001      	movs	r1, r0
 80011d2:	0030      	movs	r0, r6
 80011d4:	311b      	adds	r1, #27
 80011d6:	4088      	lsls	r0, r1
 80011d8:	1e41      	subs	r1, r0, #1
 80011da:	4188      	sbcs	r0, r1
 80011dc:	4302      	orrs	r2, r0
 80011de:	0016      	movs	r6, r2
 80011e0:	2d05      	cmp	r5, #5
 80011e2:	dc12      	bgt.n	800120a <__aeabi_i2f+0x86>
 80011e4:	0031      	movs	r1, r6
 80011e6:	4f0d      	ldr	r7, [pc, #52]	; (800121c <__aeabi_i2f+0x98>)
 80011e8:	4039      	ands	r1, r7
 80011ea:	0772      	lsls	r2, r6, #29
 80011ec:	d009      	beq.n	8001202 <__aeabi_i2f+0x7e>
 80011ee:	200f      	movs	r0, #15
 80011f0:	4030      	ands	r0, r6
 80011f2:	2804      	cmp	r0, #4
 80011f4:	d005      	beq.n	8001202 <__aeabi_i2f+0x7e>
 80011f6:	3104      	adds	r1, #4
 80011f8:	014a      	lsls	r2, r1, #5
 80011fa:	d502      	bpl.n	8001202 <__aeabi_i2f+0x7e>
 80011fc:	239f      	movs	r3, #159	; 0x9f
 80011fe:	4039      	ands	r1, r7
 8001200:	1b5b      	subs	r3, r3, r5
 8001202:	0189      	lsls	r1, r1, #6
 8001204:	0a4e      	lsrs	r6, r1, #9
 8001206:	b2d8      	uxtb	r0, r3
 8001208:	e7d6      	b.n	80011b8 <__aeabi_i2f+0x34>
 800120a:	1f6a      	subs	r2, r5, #5
 800120c:	4096      	lsls	r6, r2
 800120e:	0031      	movs	r1, r6
 8001210:	4f02      	ldr	r7, [pc, #8]	; (800121c <__aeabi_i2f+0x98>)
 8001212:	4039      	ands	r1, r7
 8001214:	0772      	lsls	r2, r6, #29
 8001216:	d0f4      	beq.n	8001202 <__aeabi_i2f+0x7e>
 8001218:	e7e9      	b.n	80011ee <__aeabi_i2f+0x6a>
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	fbffffff 	.word	0xfbffffff

08001220 <__aeabi_ui2f>:
 8001220:	b570      	push	{r4, r5, r6, lr}
 8001222:	1e05      	subs	r5, r0, #0
 8001224:	d00e      	beq.n	8001244 <__aeabi_ui2f+0x24>
 8001226:	f000 f83d 	bl	80012a4 <__clzsi2>
 800122a:	239e      	movs	r3, #158	; 0x9e
 800122c:	0004      	movs	r4, r0
 800122e:	1a1b      	subs	r3, r3, r0
 8001230:	2b96      	cmp	r3, #150	; 0x96
 8001232:	dc0c      	bgt.n	800124e <__aeabi_ui2f+0x2e>
 8001234:	2808      	cmp	r0, #8
 8001236:	dd01      	ble.n	800123c <__aeabi_ui2f+0x1c>
 8001238:	3c08      	subs	r4, #8
 800123a:	40a5      	lsls	r5, r4
 800123c:	026d      	lsls	r5, r5, #9
 800123e:	0a6d      	lsrs	r5, r5, #9
 8001240:	b2d8      	uxtb	r0, r3
 8001242:	e001      	b.n	8001248 <__aeabi_ui2f+0x28>
 8001244:	2000      	movs	r0, #0
 8001246:	2500      	movs	r5, #0
 8001248:	05c0      	lsls	r0, r0, #23
 800124a:	4328      	orrs	r0, r5
 800124c:	bd70      	pop	{r4, r5, r6, pc}
 800124e:	2b99      	cmp	r3, #153	; 0x99
 8001250:	dd09      	ble.n	8001266 <__aeabi_ui2f+0x46>
 8001252:	0002      	movs	r2, r0
 8001254:	0029      	movs	r1, r5
 8001256:	321b      	adds	r2, #27
 8001258:	4091      	lsls	r1, r2
 800125a:	1e4a      	subs	r2, r1, #1
 800125c:	4191      	sbcs	r1, r2
 800125e:	2205      	movs	r2, #5
 8001260:	1a12      	subs	r2, r2, r0
 8001262:	40d5      	lsrs	r5, r2
 8001264:	430d      	orrs	r5, r1
 8001266:	2c05      	cmp	r4, #5
 8001268:	dc12      	bgt.n	8001290 <__aeabi_ui2f+0x70>
 800126a:	0029      	movs	r1, r5
 800126c:	4e0c      	ldr	r6, [pc, #48]	; (80012a0 <__aeabi_ui2f+0x80>)
 800126e:	4031      	ands	r1, r6
 8001270:	076a      	lsls	r2, r5, #29
 8001272:	d009      	beq.n	8001288 <__aeabi_ui2f+0x68>
 8001274:	200f      	movs	r0, #15
 8001276:	4028      	ands	r0, r5
 8001278:	2804      	cmp	r0, #4
 800127a:	d005      	beq.n	8001288 <__aeabi_ui2f+0x68>
 800127c:	3104      	adds	r1, #4
 800127e:	014a      	lsls	r2, r1, #5
 8001280:	d502      	bpl.n	8001288 <__aeabi_ui2f+0x68>
 8001282:	239f      	movs	r3, #159	; 0x9f
 8001284:	4031      	ands	r1, r6
 8001286:	1b1b      	subs	r3, r3, r4
 8001288:	0189      	lsls	r1, r1, #6
 800128a:	0a4d      	lsrs	r5, r1, #9
 800128c:	b2d8      	uxtb	r0, r3
 800128e:	e7db      	b.n	8001248 <__aeabi_ui2f+0x28>
 8001290:	1f62      	subs	r2, r4, #5
 8001292:	4095      	lsls	r5, r2
 8001294:	0029      	movs	r1, r5
 8001296:	4e02      	ldr	r6, [pc, #8]	; (80012a0 <__aeabi_ui2f+0x80>)
 8001298:	4031      	ands	r1, r6
 800129a:	076a      	lsls	r2, r5, #29
 800129c:	d0f4      	beq.n	8001288 <__aeabi_ui2f+0x68>
 800129e:	e7e9      	b.n	8001274 <__aeabi_ui2f+0x54>
 80012a0:	fbffffff 	.word	0xfbffffff

080012a4 <__clzsi2>:
 80012a4:	211c      	movs	r1, #28
 80012a6:	2301      	movs	r3, #1
 80012a8:	041b      	lsls	r3, r3, #16
 80012aa:	4298      	cmp	r0, r3
 80012ac:	d301      	bcc.n	80012b2 <__clzsi2+0xe>
 80012ae:	0c00      	lsrs	r0, r0, #16
 80012b0:	3910      	subs	r1, #16
 80012b2:	0a1b      	lsrs	r3, r3, #8
 80012b4:	4298      	cmp	r0, r3
 80012b6:	d301      	bcc.n	80012bc <__clzsi2+0x18>
 80012b8:	0a00      	lsrs	r0, r0, #8
 80012ba:	3908      	subs	r1, #8
 80012bc:	091b      	lsrs	r3, r3, #4
 80012be:	4298      	cmp	r0, r3
 80012c0:	d301      	bcc.n	80012c6 <__clzsi2+0x22>
 80012c2:	0900      	lsrs	r0, r0, #4
 80012c4:	3904      	subs	r1, #4
 80012c6:	a202      	add	r2, pc, #8	; (adr r2, 80012d0 <__clzsi2+0x2c>)
 80012c8:	5c10      	ldrb	r0, [r2, r0]
 80012ca:	1840      	adds	r0, r0, r1
 80012cc:	4770      	bx	lr
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	02020304 	.word	0x02020304
 80012d4:	01010101 	.word	0x01010101
	...

080012e0 <ad8363_get_dbm>:
 *      Author: sigmadev
 */

#include "ad8363.h"

uint8_t ad8363_get_dbm(AD8363_t *ad,uint16_t value) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	000a      	movs	r2, r1
 80012ea:	1cbb      	adds	r3, r7, #2
 80012ec:	801a      	strh	r2, [r3, #0]

	float m = (float) (AD8363_DBM_MAX - AD8363_DBM_MIN)
			/ (float) (ad->max - ad->min);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	001a      	movs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	885b      	ldrh	r3, [r3, #2]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	0018      	movs	r0, r3
 80012fc:	f7ff ff42 	bl	8001184 <__aeabi_i2f>
 8001300:	1c03      	adds	r3, r0, #0
	float m = (float) (AD8363_DBM_MAX - AD8363_DBM_MIN)
 8001302:	1c19      	adds	r1, r3, #0
 8001304:	481f      	ldr	r0, [pc, #124]	; (8001384 <ad8363_get_dbm+0xa4>)
 8001306:	f7ff fa6b 	bl	80007e0 <__aeabi_fdiv>
 800130a:	1c03      	adds	r3, r0, #0
 800130c:	60fb      	str	r3, [r7, #12]
	float b = AD8363_DBM_MAX -ad->max * m;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	0018      	movs	r0, r3
 8001314:	f7ff ff36 	bl	8001184 <__aeabi_i2f>
 8001318:	1c03      	adds	r3, r0, #0
 800131a:	68f9      	ldr	r1, [r7, #12]
 800131c:	1c18      	adds	r0, r3, #0
 800131e:	f7ff fc27 	bl	8000b70 <__aeabi_fmul>
 8001322:	1c03      	adds	r3, r0, #0
 8001324:	1c19      	adds	r1, r3, #0
 8001326:	2000      	movs	r0, #0
 8001328:	f7ff fd48 	bl	8000dbc <__aeabi_fsub>
 800132c:	1c03      	adds	r3, r0, #0
 800132e:	60bb      	str	r3, [r7, #8]

	if (value > ad->max) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	1cba      	adds	r2, r7, #2
 8001336:	8812      	ldrh	r2, [r2, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	d901      	bls.n	8001340 <ad8363_get_dbm+0x60>
		return AD8363_DBM_MAX;
 800133c:	2300      	movs	r3, #0
 800133e:	e01d      	b.n	800137c <ad8363_get_dbm+0x9c>
	} else if (value < ad->min) {
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	885b      	ldrh	r3, [r3, #2]
 8001344:	1cba      	adds	r2, r7, #2
 8001346:	8812      	ldrh	r2, [r2, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d201      	bcs.n	8001350 <ad8363_get_dbm+0x70>
		return AD8363_DBM_MIN;
 800134c:	23e2      	movs	r3, #226	; 0xe2
 800134e:	e015      	b.n	800137c <ad8363_get_dbm+0x9c>
	}
	return (int8_t) (m * (float) value + b);
 8001350:	1cbb      	adds	r3, r7, #2
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	0018      	movs	r0, r3
 8001356:	f7ff ff63 	bl	8001220 <__aeabi_ui2f>
 800135a:	1c03      	adds	r3, r0, #0
 800135c:	68f9      	ldr	r1, [r7, #12]
 800135e:	1c18      	adds	r0, r3, #0
 8001360:	f7ff fc06 	bl	8000b70 <__aeabi_fmul>
 8001364:	1c03      	adds	r3, r0, #0
 8001366:	68b9      	ldr	r1, [r7, #8]
 8001368:	1c18      	adds	r0, r3, #0
 800136a:	f7ff f89b 	bl	80004a4 <__aeabi_fadd>
 800136e:	1c03      	adds	r3, r0, #0
 8001370:	1c18      	adds	r0, r3, #0
 8001372:	f7ff fee7 	bl	8001144 <__aeabi_f2iz>
 8001376:	0003      	movs	r3, r0
 8001378:	b25b      	sxtb	r3, r3
 800137a:	b2db      	uxtb	r3, r3
}
 800137c:	0018      	movs	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	b004      	add	sp, #16
 8001382:	bd80      	pop	{r7, pc}
 8001384:	41f00000 	.word	0x41f00000

08001388 <bda4601_set_att>:
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE7_1);

}

void bda4601_set_att(uint8_t val, uint8_t times) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	0002      	movs	r2, r0
 8001390:	1dfb      	adds	r3, r7, #7
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	1dbb      	adds	r3, r7, #6
 8001396:	1c0a      	adds	r2, r1, #0
 8001398:	701a      	strb	r2, [r3, #0]

	if (val < MIN_DB_VALUE || val > MAX_DB_VALUE) {
 800139a:	1dfb      	adds	r3, r7, #7
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b1f      	cmp	r3, #31
 80013a0:	d902      	bls.n	80013a8 <bda4601_set_att+0x20>
		val = MIN_DB_VALUE;
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
	}
	val *= 2;
 80013a8:	1dfa      	adds	r2, r7, #7
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	18db      	adds	r3, r3, r3
 80013b0:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < times; i++) {
 80013b2:	230f      	movs	r3, #15
 80013b4:	18fb      	adds	r3, r7, r3
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
 80013ba:	e058      	b.n	800146e <bda4601_set_att+0xe6>
		uint8_t mask = 0b00100000;
 80013bc:	230e      	movs	r3, #14
 80013be:	18fb      	adds	r3, r7, r3
 80013c0:	2220      	movs	r2, #32
 80013c2:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < 6; j++) {
 80013c4:	230d      	movs	r3, #13
 80013c6:	18fb      	adds	r3, r7, r3
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
 80013cc:	e030      	b.n	8001430 <bda4601_set_att+0xa8>
			//Ciclo for de 6 vueltas para enviar los 6bits de configuración
			if (mask & val) {
 80013ce:	230e      	movs	r3, #14
 80013d0:	18fb      	adds	r3, r7, r3
 80013d2:	1dfa      	adds	r2, r7, #7
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	7812      	ldrb	r2, [r2, #0]
 80013d8:	4013      	ands	r3, r2
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d006      	beq.n	80013ee <bda4601_set_att+0x66>
				//Si el bit de la mascara en 1 coincide con el bit del valor, entonces
				SET_BIT(GPIOB->MODER, GPIO_MODER_MODE1_0);
 80013e0:	4b29      	ldr	r3, [pc, #164]	; (8001488 <bda4601_set_att+0x100>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b28      	ldr	r3, [pc, #160]	; (8001488 <bda4601_set_att+0x100>)
 80013e6:	2104      	movs	r1, #4
 80013e8:	430a      	orrs	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	e005      	b.n	80013fa <bda4601_set_att+0x72>
				//HAL_GPIO_WritePin(GPIOA, DATA_ATTENUATOR_Pin, GPIO_PIN_SET); //Pin data en alto
			} else {
				//	HAL_GPIO_WritePin(GPIOA, DATA_ATTENUATOR_Pin, GPIO_PIN_RESET); //Pin data en bajo
				CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE1_0);
 80013ee:	4b26      	ldr	r3, [pc, #152]	; (8001488 <bda4601_set_att+0x100>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b25      	ldr	r3, [pc, #148]	; (8001488 <bda4601_set_att+0x100>)
 80013f4:	2104      	movs	r1, #4
 80013f6:	438a      	bics	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]
			}

			SET_BIT(GPIOB->MODER, GPIO_MODER_MODE0_0);
 80013fa:	4b23      	ldr	r3, [pc, #140]	; (8001488 <bda4601_set_att+0x100>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <bda4601_set_att+0x100>)
 8001400:	2101      	movs	r1, #1
 8001402:	430a      	orrs	r2, r1
 8001404:	601a      	str	r2, [r3, #0]
			//HAL_GPIO_WritePin(GPIOA, CLK_ATTENUATOR_Pin, GPIO_PIN_SET); //Pin clock en alto
			HAL_Delay(1); //Delay de 1mS
 8001406:	2001      	movs	r0, #1
 8001408:	f002 fb2a 	bl	8003a60 <HAL_Delay>
			CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE0_0);
 800140c:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <bda4601_set_att+0x100>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <bda4601_set_att+0x100>)
 8001412:	2101      	movs	r1, #1
 8001414:	438a      	bics	r2, r1
 8001416:	601a      	str	r2, [r3, #0]
			//HAL_GPIO_WritePin(GPIOA, CLK_ATTENUATOR_Pin, GPIO_PIN_RESET); //Pin clock en bajo
			mask = mask >> 1; //Muevo la máscara una posición
 8001418:	220e      	movs	r2, #14
 800141a:	18bb      	adds	r3, r7, r2
 800141c:	18ba      	adds	r2, r7, r2
 800141e:	7812      	ldrb	r2, [r2, #0]
 8001420:	0852      	lsrs	r2, r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < 6; j++) {
 8001424:	210d      	movs	r1, #13
 8001426:	187b      	adds	r3, r7, r1
 8001428:	781a      	ldrb	r2, [r3, #0]
 800142a:	187b      	adds	r3, r7, r1
 800142c:	3201      	adds	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	230d      	movs	r3, #13
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b05      	cmp	r3, #5
 8001438:	d9c9      	bls.n	80013ce <bda4601_set_att+0x46>
		}
		SET_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
 800143a:	23a0      	movs	r3, #160	; 0xa0
 800143c:	05db      	lsls	r3, r3, #23
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	23a0      	movs	r3, #160	; 0xa0
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	2180      	movs	r1, #128	; 0x80
 8001446:	01c9      	lsls	r1, r1, #7
 8001448:	430a      	orrs	r2, r1
 800144a:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOA, LE_ATTENUATOR_Pin, GPIO_PIN_SET); //Pin LE en alto
		HAL_Delay(1);
 800144c:	2001      	movs	r0, #1
 800144e:	f002 fb07 	bl	8003a60 <HAL_Delay>
		CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
 8001452:	23a0      	movs	r3, #160	; 0xa0
 8001454:	05db      	lsls	r3, r3, #23
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	23a0      	movs	r3, #160	; 0xa0
 800145a:	05db      	lsls	r3, r3, #23
 800145c:	490b      	ldr	r1, [pc, #44]	; (800148c <bda4601_set_att+0x104>)
 800145e:	400a      	ands	r2, r1
 8001460:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < times; i++) {
 8001462:	210f      	movs	r1, #15
 8001464:	187b      	adds	r3, r7, r1
 8001466:	781a      	ldrb	r2, [r3, #0]
 8001468:	187b      	adds	r3, r7, r1
 800146a:	3201      	adds	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	230f      	movs	r3, #15
 8001470:	18fa      	adds	r2, r7, r3
 8001472:	1dbb      	adds	r3, r7, #6
 8001474:	7812      	ldrb	r2, [r2, #0]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d39f      	bcc.n	80013bc <bda4601_set_att+0x34>
		//HAL_GPIO_WritePin(GPIOA, LE_ATTENUATOR_Pin, GPIO_PIN_RESET); //Pin LE en bajo
	}
}
 800147c:	46c0      	nop			; (mov r8, r8)
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	b004      	add	sp, #16
 8001484:	bd80      	pop	{r7, pc}
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	50000400 	.word	0x50000400
 800148c:	ffffbfff 	.word	0xffffbfff

08001490 <bda4601_set_initial_att>:

void bda4601_set_initial_att(uint8_t value, uint16_t period_millis) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	0002      	movs	r2, r0
 8001498:	1dfb      	adds	r3, r7, #7
 800149a:	701a      	strb	r2, [r3, #0]
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	1c0a      	adds	r2, r1, #0
 80014a0:	801a      	strh	r2, [r3, #0]
	uint8_t t_step = 500;
 80014a2:	210f      	movs	r1, #15
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	22f4      	movs	r2, #244	; 0xf4
 80014a8:	701a      	strb	r2, [r3, #0]
	uint8_t times = period_millis / t_step;
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	881a      	ldrh	r2, [r3, #0]
 80014ae:	187b      	adds	r3, r7, r1
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	0019      	movs	r1, r3
 80014b4:	0010      	movs	r0, r2
 80014b6:	f7fe feb7 	bl	8000228 <__divsi3>
 80014ba:	0003      	movs	r3, r0
 80014bc:	001a      	movs	r2, r3
 80014be:	210e      	movs	r1, #14
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	701a      	strb	r2, [r3, #0]
	int att_step = value / times;
 80014c4:	1dfa      	adds	r2, r7, #7
 80014c6:	187b      	adds	r3, r7, r1
 80014c8:	7812      	ldrb	r2, [r2, #0]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	0019      	movs	r1, r3
 80014ce:	0010      	movs	r0, r2
 80014d0:	f7fe fe20 	bl	8000114 <__udivsi3>
 80014d4:	0003      	movs	r3, r0
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	60bb      	str	r3, [r7, #8]
	int att = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]

	for (int i = 0; i <= times; i++) {
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	e015      	b.n	8001510 <bda4601_set_initial_att+0x80>
		bda4601_set_att(att, 2);
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2102      	movs	r1, #2
 80014ea:	0018      	movs	r0, r3
 80014ec:	f7ff ff4c 	bl	8001388 <bda4601_set_att>
		att += att_step;
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	18d3      	adds	r3, r2, r3
 80014f6:	617b      	str	r3, [r7, #20]
		if (att >= MAX_DB_VALUE) {
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	2b1e      	cmp	r3, #30
 80014fc:	dc0f      	bgt.n	800151e <bda4601_set_initial_att+0x8e>
			return;
		}
		HAL_Delay(t_step);
 80014fe:	230f      	movs	r3, #15
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	0018      	movs	r0, r3
 8001506:	f002 faab 	bl	8003a60 <HAL_Delay>
	for (int i = 0; i <= times; i++) {
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	3301      	adds	r3, #1
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	230e      	movs	r3, #14
 8001512:	18fb      	adds	r3, r7, r3
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	429a      	cmp	r2, r3
 800151a:	dde3      	ble.n	80014e4 <bda4601_set_initial_att+0x54>
 800151c:	e000      	b.n	8001520 <bda4601_set_initial_att+0x90>
			return;
 800151e:	46c0      	nop			; (mov r8, r8)
	}

}
 8001520:	46bd      	mov	sp, r7
 8001522:	b006      	add	sp, #24
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <i2c1_init>:
 *      Author: sigmadev
 */

#include "i2c1.h"

void i2c1_init() {
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0

	/* SCL PB8  as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE8_0);
 800152c:	4b53      	ldr	r3, [pc, #332]	; (800167c <i2c1_init+0x154>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b52      	ldr	r3, [pc, #328]	; (800167c <i2c1_init+0x154>)
 8001532:	4953      	ldr	r1, [pc, #332]	; (8001680 <i2c1_init+0x158>)
 8001534:	400a      	ands	r2, r1
 8001536:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE8_1);
 8001538:	4b50      	ldr	r3, [pc, #320]	; (800167c <i2c1_init+0x154>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b4f      	ldr	r3, [pc, #316]	; (800167c <i2c1_init+0x154>)
 800153e:	2180      	movs	r1, #128	; 0x80
 8001540:	0289      	lsls	r1, r1, #10
 8001542:	430a      	orrs	r2, r1
 8001544:	601a      	str	r2, [r3, #0]
	/* SDC PB9 as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE9_0);
 8001546:	4b4d      	ldr	r3, [pc, #308]	; (800167c <i2c1_init+0x154>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4b4c      	ldr	r3, [pc, #304]	; (800167c <i2c1_init+0x154>)
 800154c:	494d      	ldr	r1, [pc, #308]	; (8001684 <i2c1_init+0x15c>)
 800154e:	400a      	ands	r2, r1
 8001550:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE9_1);
 8001552:	4b4a      	ldr	r3, [pc, #296]	; (800167c <i2c1_init+0x154>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	4b49      	ldr	r3, [pc, #292]	; (800167c <i2c1_init+0x154>)
 8001558:	2180      	movs	r1, #128	; 0x80
 800155a:	0309      	lsls	r1, r1, #12
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
	/* SCL PB8 as open-drain */
	SET_BIT(GPIOB->OTYPER, GPIO_OTYPER_OT8);
 8001560:	4b46      	ldr	r3, [pc, #280]	; (800167c <i2c1_init+0x154>)
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	4b45      	ldr	r3, [pc, #276]	; (800167c <i2c1_init+0x154>)
 8001566:	2180      	movs	r1, #128	; 0x80
 8001568:	0049      	lsls	r1, r1, #1
 800156a:	430a      	orrs	r2, r1
 800156c:	605a      	str	r2, [r3, #4]
	/* SDC PB9 as open-drain */
	SET_BIT(GPIOB->OTYPER, GPIO_OTYPER_OT9);
 800156e:	4b43      	ldr	r3, [pc, #268]	; (800167c <i2c1_init+0x154>)
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	4b42      	ldr	r3, [pc, #264]	; (800167c <i2c1_init+0x154>)
 8001574:	2180      	movs	r1, #128	; 0x80
 8001576:	0089      	lsls	r1, r1, #2
 8001578:	430a      	orrs	r2, r1
 800157a:	605a      	str	r2, [r3, #4]
	/* SCL PB8 High Speed output */
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED8_0);
 800157c:	4b3f      	ldr	r3, [pc, #252]	; (800167c <i2c1_init+0x154>)
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	4b3e      	ldr	r3, [pc, #248]	; (800167c <i2c1_init+0x154>)
 8001582:	2180      	movs	r1, #128	; 0x80
 8001584:	0249      	lsls	r1, r1, #9
 8001586:	430a      	orrs	r2, r1
 8001588:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED8_1);
 800158a:	4b3c      	ldr	r3, [pc, #240]	; (800167c <i2c1_init+0x154>)
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	4b3b      	ldr	r3, [pc, #236]	; (800167c <i2c1_init+0x154>)
 8001590:	2180      	movs	r1, #128	; 0x80
 8001592:	0289      	lsls	r1, r1, #10
 8001594:	430a      	orrs	r2, r1
 8001596:	609a      	str	r2, [r3, #8]
	/* SDC PB9  High Speed output */
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED9_0);
 8001598:	4b38      	ldr	r3, [pc, #224]	; (800167c <i2c1_init+0x154>)
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	4b37      	ldr	r3, [pc, #220]	; (800167c <i2c1_init+0x154>)
 800159e:	2180      	movs	r1, #128	; 0x80
 80015a0:	02c9      	lsls	r1, r1, #11
 80015a2:	430a      	orrs	r2, r1
 80015a4:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED9_1);
 80015a6:	4b35      	ldr	r3, [pc, #212]	; (800167c <i2c1_init+0x154>)
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	4b34      	ldr	r3, [pc, #208]	; (800167c <i2c1_init+0x154>)
 80015ac:	2180      	movs	r1, #128	; 0x80
 80015ae:	0309      	lsls	r1, r1, #12
 80015b0:	430a      	orrs	r2, r1
 80015b2:	609a      	str	r2, [r3, #8]
	/* SCL PB8 as pull-up */
	CLEAR_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD8_0);
 80015b4:	4b31      	ldr	r3, [pc, #196]	; (800167c <i2c1_init+0x154>)
 80015b6:	68da      	ldr	r2, [r3, #12]
 80015b8:	4b30      	ldr	r3, [pc, #192]	; (800167c <i2c1_init+0x154>)
 80015ba:	4931      	ldr	r1, [pc, #196]	; (8001680 <i2c1_init+0x158>)
 80015bc:	400a      	ands	r2, r1
 80015be:	60da      	str	r2, [r3, #12]
	SET_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD8_1);
 80015c0:	4b2e      	ldr	r3, [pc, #184]	; (800167c <i2c1_init+0x154>)
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	4b2d      	ldr	r3, [pc, #180]	; (800167c <i2c1_init+0x154>)
 80015c6:	2180      	movs	r1, #128	; 0x80
 80015c8:	0289      	lsls	r1, r1, #10
 80015ca:	430a      	orrs	r2, r1
 80015cc:	60da      	str	r2, [r3, #12]
	/* SDC PB9 as pull-up */
	CLEAR_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD9_0);
 80015ce:	4b2b      	ldr	r3, [pc, #172]	; (800167c <i2c1_init+0x154>)
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	4b2a      	ldr	r3, [pc, #168]	; (800167c <i2c1_init+0x154>)
 80015d4:	492b      	ldr	r1, [pc, #172]	; (8001684 <i2c1_init+0x15c>)
 80015d6:	400a      	ands	r2, r1
 80015d8:	60da      	str	r2, [r3, #12]
	SET_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD9_1);
 80015da:	4b28      	ldr	r3, [pc, #160]	; (800167c <i2c1_init+0x154>)
 80015dc:	68da      	ldr	r2, [r3, #12]
 80015de:	4b27      	ldr	r3, [pc, #156]	; (800167c <i2c1_init+0x154>)
 80015e0:	2180      	movs	r1, #128	; 0x80
 80015e2:	0309      	lsls	r1, r1, #12
 80015e4:	430a      	orrs	r2, r1
 80015e6:	60da      	str	r2, [r3, #12]
	/*  PB8 as i2c SCL */
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_0);
 80015e8:	4b24      	ldr	r3, [pc, #144]	; (800167c <i2c1_init+0x154>)
 80015ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015ec:	4b23      	ldr	r3, [pc, #140]	; (800167c <i2c1_init+0x154>)
 80015ee:	2101      	movs	r1, #1
 80015f0:	438a      	bics	r2, r1
 80015f2:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_1);
 80015f4:	4b21      	ldr	r3, [pc, #132]	; (800167c <i2c1_init+0x154>)
 80015f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015f8:	4b20      	ldr	r3, [pc, #128]	; (800167c <i2c1_init+0x154>)
 80015fa:	2102      	movs	r1, #2
 80015fc:	430a      	orrs	r2, r1
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_2);
 8001600:	4b1e      	ldr	r3, [pc, #120]	; (800167c <i2c1_init+0x154>)
 8001602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001604:	4b1d      	ldr	r3, [pc, #116]	; (800167c <i2c1_init+0x154>)
 8001606:	2104      	movs	r1, #4
 8001608:	430a      	orrs	r2, r1
 800160a:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_3);
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <i2c1_init+0x154>)
 800160e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001610:	4b1a      	ldr	r3, [pc, #104]	; (800167c <i2c1_init+0x154>)
 8001612:	2108      	movs	r1, #8
 8001614:	438a      	bics	r2, r1
 8001616:	625a      	str	r2, [r3, #36]	; 0x24
	/*  PB9 as i2c SDL */
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_0);
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <i2c1_init+0x154>)
 800161a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <i2c1_init+0x154>)
 800161e:	2110      	movs	r1, #16
 8001620:	438a      	bics	r2, r1
 8001622:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_1);
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <i2c1_init+0x154>)
 8001626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <i2c1_init+0x154>)
 800162a:	2120      	movs	r1, #32
 800162c:	430a      	orrs	r2, r1
 800162e:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_2);
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <i2c1_init+0x154>)
 8001632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <i2c1_init+0x154>)
 8001636:	2140      	movs	r1, #64	; 0x40
 8001638:	430a      	orrs	r2, r1
 800163a:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_3);
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <i2c1_init+0x154>)
 800163e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001640:	4b0e      	ldr	r3, [pc, #56]	; (800167c <i2c1_init+0x154>)
 8001642:	2180      	movs	r1, #128	; 0x80
 8001644:	438a      	bics	r2, r1
 8001646:	625a      	str	r2, [r3, #36]	; 0x24

	/* select normal speed */
	SET_BIT(RCC->APBENR1, RCC_APBENR1_I2C1EN);
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <i2c1_init+0x160>)
 800164a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <i2c1_init+0x160>)
 800164e:	2180      	movs	r1, #128	; 0x80
 8001650:	0389      	lsls	r1, r1, #14
 8001652:	430a      	orrs	r2, r1
 8001654:	63da      	str	r2, [r3, #60]	; 0x3c

	/* i2c disable */
	CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 8001656:	4b0d      	ldr	r3, [pc, #52]	; (800168c <i2c1_init+0x164>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <i2c1_init+0x164>)
 800165c:	2101      	movs	r1, #1
 800165e:	438a      	bics	r2, r1
 8001660:	601a      	str	r2, [r3, #0]

	I2C1->TIMINGR = 0X10707DBCU;
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <i2c1_init+0x164>)
 8001664:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <i2c1_init+0x168>)
 8001666:	611a      	str	r2, [r3, #16]
	/*i2c Rx interrupt enable */
//SET_BIT(I2C1->CR1, I2C_CR1_RXIE);
//SET_BIT(I2C1->CR1, I2C_CR1_TXIE);

	/* i2c enable */
	SET_BIT(I2C1->CR1, I2C_CR1_PE);
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <i2c1_init+0x164>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <i2c1_init+0x164>)
 800166e:	2101      	movs	r1, #1
 8001670:	430a      	orrs	r2, r1
 8001672:	601a      	str	r2, [r3, #0]
}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	50000400 	.word	0x50000400
 8001680:	fffeffff 	.word	0xfffeffff
 8001684:	fffbffff 	.word	0xfffbffff
 8001688:	40021000 	.word	0x40021000
 800168c:	40005400 	.word	0x40005400
 8001690:	10707dbc 	.word	0x10707dbc

08001694 <i2c1_buffReceive>:
//	while (!(READ_BIT(I2C1->ISR, I2C_ISR_TC))) {
//	}
	return data;
}

void i2c1_buffReceive(char saddr, uint8_t *rcv, uint8_t N) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6039      	str	r1, [r7, #0]
 800169c:	0011      	movs	r1, r2
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	1c02      	adds	r2, r0, #0
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	1dbb      	adds	r3, r7, #6
 80016a6:	1c0a      	adds	r2, r1, #0
 80016a8:	701a      	strb	r2, [r3, #0]
	uint32_t counter = HAL_GetTick();
 80016aa:	f002 f9cf 	bl	8003a4c <HAL_GetTick>
 80016ae:	0003      	movs	r3, r0
 80016b0:	60fb      	str	r3, [r7, #12]
	bool timeout = false;
 80016b2:	2317      	movs	r3, #23
 80016b4:	18fb      	adds	r3, r7, r3
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
	i2c1_start(saddr, READ, N);
 80016ba:	1dbb      	adds	r3, r7, #6
 80016bc:	781a      	ldrb	r2, [r3, #0]
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2101      	movs	r1, #1
 80016c4:	0018      	movs	r0, r3
 80016c6:	f000 f885 	bl	80017d4 <i2c1_start>

	for (int i = 0; i < N; i++) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	e02a      	b.n	8001726 <i2c1_buffReceive+0x92>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
			if (HAL_GetTick() - counter > 500)
 80016d0:	f002 f9bc 	bl	8003a4c <HAL_GetTick>
 80016d4:	0002      	movs	r2, r0
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1ad2      	subs	r2, r2, r3
 80016da:	2017      	movs	r0, #23
 80016dc:	183b      	adds	r3, r7, r0
 80016de:	1839      	adds	r1, r7, r0
 80016e0:	7809      	ldrb	r1, [r1, #0]
 80016e2:	7019      	strb	r1, [r3, #0]
 80016e4:	23fa      	movs	r3, #250	; 0xfa
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d902      	bls.n	80016f2 <i2c1_buffReceive+0x5e>
				timeout = true;
 80016ec:	183b      	adds	r3, r7, r0
 80016ee:	2201      	movs	r2, #1
 80016f0:	701a      	strb	r2, [r3, #0]
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <i2c1_buffReceive+0xa8>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	2204      	movs	r2, #4
 80016f8:	4013      	ands	r3, r2
 80016fa:	425a      	negs	r2, r3
 80016fc:	4153      	adcs	r3, r2
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	0019      	movs	r1, r3
 8001702:	2317      	movs	r3, #23
 8001704:	18fb      	adds	r3, r7, r3
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2201      	movs	r2, #1
 800170a:	4053      	eors	r3, r2
 800170c:	b2db      	uxtb	r3, r3
 800170e:	400b      	ands	r3, r1
 8001710:	d1de      	bne.n	80016d0 <i2c1_buffReceive+0x3c>
		}
		rcv[i] = I2C1->RXDR;
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <i2c1_buffReceive+0xa8>)
 8001714:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	18d3      	adds	r3, r2, r3
 800171c:	b2ca      	uxtb	r2, r1
 800171e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N; i++) {
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	3301      	adds	r3, #1
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	1dbb      	adds	r3, r7, #6
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	dbe0      	blt.n	80016f2 <i2c1_buffReceive+0x5e>
	}
}
 8001730:	46c0      	nop			; (mov r8, r8)
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	b006      	add	sp, #24
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	40005400 	.word	0x40005400

08001740 <i2c1_byte_tx>:

void i2c1_byte_tx(uint8_t saddr, uint8_t *data, uint8_t N) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6039      	str	r1, [r7, #0]
 8001748:	0011      	movs	r1, r2
 800174a:	1dfb      	adds	r3, r7, #7
 800174c:	1c02      	adds	r2, r0, #0
 800174e:	701a      	strb	r2, [r3, #0]
 8001750:	1dbb      	adds	r3, r7, #6
 8001752:	1c0a      	adds	r2, r1, #0
 8001754:	701a      	strb	r2, [r3, #0]
	i2c1_start(saddr, WRITE, N);
 8001756:	1dbb      	adds	r3, r7, #6
 8001758:	781a      	ldrb	r2, [r3, #0]
 800175a:	1dfb      	adds	r3, r7, #7
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2100      	movs	r1, #0
 8001760:	0018      	movs	r0, r3
 8001762:	f000 f837 	bl	80017d4 <i2c1_start>
	uint32_t counter = HAL_GetTick();
 8001766:	f002 f971 	bl	8003a4c <HAL_GetTick>
 800176a:	0003      	movs	r3, r0
 800176c:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < N; i++) {
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	e016      	b.n	80017a2 <i2c1_byte_tx+0x62>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXE)) {

			if (HAL_GetTick() - counter > 500)
 8001774:	f002 f96a 	bl	8003a4c <HAL_GetTick>
 8001778:	0002      	movs	r2, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1ad2      	subs	r2, r2, r3
 800177e:	23fa      	movs	r3, #250	; 0xfa
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	429a      	cmp	r2, r3
 8001784:	d81f      	bhi.n	80017c6 <i2c1_byte_tx+0x86>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXE)) {
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <i2c1_byte_tx+0x90>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	2201      	movs	r2, #1
 800178c:	4013      	ands	r3, r2
 800178e:	d0f1      	beq.n	8001774 <i2c1_byte_tx+0x34>
				return;
		}
		I2C1->TXDR = data[i];
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	18d3      	adds	r3, r2, r3
 8001796:	781a      	ldrb	r2, [r3, #0]
 8001798:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <i2c1_byte_tx+0x90>)
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
	for (int i = 0; i < N; i++) {
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	3301      	adds	r3, #1
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	1dbb      	adds	r3, r7, #6
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	dbec      	blt.n	8001786 <i2c1_byte_tx+0x46>
	}

	while (!READ_BIT(I2C1->ISR, I2C_ISR_STOPF)) {
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <i2c1_byte_tx+0x90>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2220      	movs	r2, #32
 80017b4:	4013      	ands	r3, r2
 80017b6:	d0fa      	beq.n	80017ae <i2c1_byte_tx+0x6e>
	}
	SET_BIT(I2C1->ICR, I2C_ICR_STOPCF);
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <i2c1_byte_tx+0x90>)
 80017ba:	69da      	ldr	r2, [r3, #28]
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <i2c1_byte_tx+0x90>)
 80017be:	2120      	movs	r1, #32
 80017c0:	430a      	orrs	r2, r1
 80017c2:	61da      	str	r2, [r3, #28]
 80017c4:	e000      	b.n	80017c8 <i2c1_byte_tx+0x88>
				return;
 80017c6:	46c0      	nop			; (mov r8, r8)

}
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b004      	add	sp, #16
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	40005400 	.word	0x40005400

080017d4 <i2c1_start>:
	SET_BIT(I2C1->ISR, I2C_ICR_STOPCF);

}


void i2c1_start(char saddr, uint8_t transfer_request, uint8_t N) {
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	0004      	movs	r4, r0
 80017dc:	0008      	movs	r0, r1
 80017de:	0011      	movs	r1, r2
 80017e0:	1dfb      	adds	r3, r7, #7
 80017e2:	1c22      	adds	r2, r4, #0
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	1dbb      	adds	r3, r7, #6
 80017e8:	1c02      	adds	r2, r0, #0
 80017ea:	701a      	strb	r2, [r3, #0]
 80017ec:	1d7b      	adds	r3, r7, #5
 80017ee:	1c0a      	adds	r2, r1, #0
 80017f0:	701a      	strb	r2, [r3, #0]
	/*master 7 bit addressing mode */
	CLEAR_BIT(I2C1->CR2, I2C_CR2_ADD10);
 80017f2:	4b21      	ldr	r3, [pc, #132]	; (8001878 <i2c1_start+0xa4>)
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <i2c1_start+0xa4>)
 80017f8:	4920      	ldr	r1, [pc, #128]	; (800187c <i2c1_start+0xa8>)
 80017fa:	400a      	ands	r2, r1
 80017fc:	605a      	str	r2, [r3, #4]
	/* set Slave address */
	MODIFY_REG(I2C1->CR2, I2C_CR2_SADD, saddr << I2C_CR2_SADD_Pos);
 80017fe:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <i2c1_start+0xa4>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	0a9b      	lsrs	r3, r3, #10
 8001804:	0299      	lsls	r1, r3, #10
 8001806:	1dfb      	adds	r3, r7, #7
 8001808:	781a      	ldrb	r2, [r3, #0]
 800180a:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <i2c1_start+0xa4>)
 800180c:	430a      	orrs	r2, r1
 800180e:	605a      	str	r2, [r3, #4]
	/* read 1 byte */
	MODIFY_REG(I2C1->CR2, I2C_CR2_NBYTES, N << I2C_CR2_NBYTES_Pos);
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <i2c1_start+0xa4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4a1a      	ldr	r2, [pc, #104]	; (8001880 <i2c1_start+0xac>)
 8001816:	401a      	ands	r2, r3
 8001818:	1d7b      	adds	r3, r7, #5
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	041b      	lsls	r3, r3, #16
 800181e:	0019      	movs	r1, r3
 8001820:	4b15      	ldr	r3, [pc, #84]	; (8001878 <i2c1_start+0xa4>)
 8001822:	430a      	orrs	r2, r1
 8001824:	605a      	str	r2, [r3, #4]
	/* stops when NBytes are transferred */
	SET_BIT(I2C1->CR2, I2C_CR2_AUTOEND);
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <i2c1_start+0xa4>)
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <i2c1_start+0xa4>)
 800182c:	2180      	movs	r1, #128	; 0x80
 800182e:	0489      	lsls	r1, r1, #18
 8001830:	430a      	orrs	r2, r1
 8001832:	605a      	str	r2, [r3, #4]
	/* set START condition  automatically changes to master */


	if (transfer_request == 1) {
 8001834:	1dbb      	adds	r3, r7, #6
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d107      	bne.n	800184c <i2c1_start+0x78>
		/* request a read transfer */
		SET_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 800183c:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <i2c1_start+0xa4>)
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <i2c1_start+0xa4>)
 8001842:	2180      	movs	r1, #128	; 0x80
 8001844:	00c9      	lsls	r1, r1, #3
 8001846:	430a      	orrs	r2, r1
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	e009      	b.n	8001860 <i2c1_start+0x8c>
	} else if (transfer_request == 0) {
 800184c:	1dbb      	adds	r3, r7, #6
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d105      	bne.n	8001860 <i2c1_start+0x8c>
		/* request a write transfer */
		CLEAR_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <i2c1_start+0xa4>)
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	4b07      	ldr	r3, [pc, #28]	; (8001878 <i2c1_start+0xa4>)
 800185a:	490a      	ldr	r1, [pc, #40]	; (8001884 <i2c1_start+0xb0>)
 800185c:	400a      	ands	r2, r1
 800185e:	605a      	str	r2, [r3, #4]
	}

	SET_BIT(I2C1->CR2, I2C_CR2_START);
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <i2c1_start+0xa4>)
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <i2c1_start+0xa4>)
 8001866:	2180      	movs	r1, #128	; 0x80
 8001868:	0189      	lsls	r1, r1, #6
 800186a:	430a      	orrs	r2, r1
 800186c:	605a      	str	r2, [r3, #4]

}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	46bd      	mov	sp, r7
 8001872:	b003      	add	sp, #12
 8001874:	bd90      	pop	{r4, r7, pc}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	40005400 	.word	0x40005400
 800187c:	fffff7ff 	.word	0xfffff7ff
 8001880:	ff00ffff 	.word	0xff00ffff
 8001884:	fffffbff 	.word	0xfffffbff

08001888 <led_init>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void led_init(void){
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0

	/*CURRENT LOW LED PA12  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE12_0);
 800188c:	23a0      	movs	r3, #160	; 0xa0
 800188e:	05db      	lsls	r3, r3, #23
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	23a0      	movs	r3, #160	; 0xa0
 8001894:	05db      	lsls	r3, r3, #23
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	0449      	lsls	r1, r1, #17
 800189a:	430a      	orrs	r2, r1
 800189c:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE12_1);
 800189e:	23a0      	movs	r3, #160	; 0xa0
 80018a0:	05db      	lsls	r3, r3, #23
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	23a0      	movs	r3, #160	; 0xa0
 80018a6:	05db      	lsls	r3, r3, #23
 80018a8:	492b      	ldr	r1, [pc, #172]	; (8001958 <led_init+0xd0>)
 80018aa:	400a      	ands	r2, r1
 80018ac:	601a      	str	r2, [r3, #0]

	/*CURRENT NORMAL LED PA11  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE11_0);
 80018ae:	23a0      	movs	r3, #160	; 0xa0
 80018b0:	05db      	lsls	r3, r3, #23
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	23a0      	movs	r3, #160	; 0xa0
 80018b6:	05db      	lsls	r3, r3, #23
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	03c9      	lsls	r1, r1, #15
 80018bc:	430a      	orrs	r2, r1
 80018be:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE11_1);
 80018c0:	23a0      	movs	r3, #160	; 0xa0
 80018c2:	05db      	lsls	r3, r3, #23
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	23a0      	movs	r3, #160	; 0xa0
 80018c8:	05db      	lsls	r3, r3, #23
 80018ca:	4924      	ldr	r1, [pc, #144]	; (800195c <led_init+0xd4>)
 80018cc:	400a      	ands	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]

	/*CURRENT HIGH  LED PA10  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE10_0);
 80018d0:	23a0      	movs	r3, #160	; 0xa0
 80018d2:	05db      	lsls	r3, r3, #23
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	23a0      	movs	r3, #160	; 0xa0
 80018d8:	05db      	lsls	r3, r3, #23
 80018da:	2180      	movs	r1, #128	; 0x80
 80018dc:	0349      	lsls	r1, r1, #13
 80018de:	430a      	orrs	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE10_1);
 80018e2:	23a0      	movs	r3, #160	; 0xa0
 80018e4:	05db      	lsls	r3, r3, #23
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	23a0      	movs	r3, #160	; 0xa0
 80018ea:	05db      	lsls	r3, r3, #23
 80018ec:	491c      	ldr	r1, [pc, #112]	; (8001960 <led_init+0xd8>)
 80018ee:	400a      	ands	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]

	/*SYS_RP LED PC6  as output */
	SET_BIT(GPIOC->MODER, GPIO_MODER_MODE6_0);
 80018f2:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <led_init+0xdc>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <led_init+0xdc>)
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	0149      	lsls	r1, r1, #5
 80018fc:	430a      	orrs	r2, r1
 80018fe:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOC->MODER, GPIO_MODER_MODE6_1);
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <led_init+0xdc>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b17      	ldr	r3, [pc, #92]	; (8001964 <led_init+0xdc>)
 8001906:	4918      	ldr	r1, [pc, #96]	; (8001968 <led_init+0xe0>)
 8001908:	400a      	ands	r2, r1
 800190a:	601a      	str	r2, [r3, #0]

	/* TEMPERATURE OK  LED PA9  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE9_0);
 800190c:	23a0      	movs	r3, #160	; 0xa0
 800190e:	05db      	lsls	r3, r3, #23
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	23a0      	movs	r3, #160	; 0xa0
 8001914:	05db      	lsls	r3, r3, #23
 8001916:	2180      	movs	r1, #128	; 0x80
 8001918:	02c9      	lsls	r1, r1, #11
 800191a:	430a      	orrs	r2, r1
 800191c:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE9_1);
 800191e:	23a0      	movs	r3, #160	; 0xa0
 8001920:	05db      	lsls	r3, r3, #23
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	23a0      	movs	r3, #160	; 0xa0
 8001926:	05db      	lsls	r3, r3, #23
 8001928:	4910      	ldr	r1, [pc, #64]	; (800196c <led_init+0xe4>)
 800192a:	400a      	ands	r2, r1
 800192c:	601a      	str	r2, [r3, #0]

	/* TEMPERATURE HIGH LED PA8  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE8_0);
 800192e:	23a0      	movs	r3, #160	; 0xa0
 8001930:	05db      	lsls	r3, r3, #23
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	23a0      	movs	r3, #160	; 0xa0
 8001936:	05db      	lsls	r3, r3, #23
 8001938:	2180      	movs	r1, #128	; 0x80
 800193a:	0249      	lsls	r1, r1, #9
 800193c:	430a      	orrs	r2, r1
 800193e:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE8_1);
 8001940:	23a0      	movs	r3, #160	; 0xa0
 8001942:	05db      	lsls	r3, r3, #23
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	23a0      	movs	r3, #160	; 0xa0
 8001948:	05db      	lsls	r3, r3, #23
 800194a:	4909      	ldr	r1, [pc, #36]	; (8001970 <led_init+0xe8>)
 800194c:	400a      	ands	r2, r1
 800194e:	601a      	str	r2, [r3, #0]

}
 8001950:	46c0      	nop			; (mov r8, r8)
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	fdffffff 	.word	0xfdffffff
 800195c:	ff7fffff 	.word	0xff7fffff
 8001960:	ffdfffff 	.word	0xffdfffff
 8001964:	50000800 	.word	0x50000800
 8001968:	ffffdfff 	.word	0xffffdfff
 800196c:	fff7ffff 	.word	0xfff7ffff
 8001970:	fffdffff 	.word	0xfffdffff

08001974 <led_enable_kalive>:

void led_enable_kalive(uint32_t counter){
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - counter > LED_KA_STATE_TIMEOUT)
 800197c:	f002 f866 	bl	8003a4c <HAL_GetTick>
 8001980:	0002      	movs	r2, r0
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	1ad2      	subs	r2, r2, r3
 8001986:	23fa      	movs	r3, #250	; 0xfa
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	429a      	cmp	r2, r3
 800198c:	d904      	bls.n	8001998 <led_enable_kalive+0x24>
		counter = HAL_GetTick();
 800198e:	f002 f85d 	bl	8003a4c <HAL_GetTick>
 8001992:	0003      	movs	r3, r0
 8001994:	607b      	str	r3, [r7, #4]
		if (HAL_GetTick() - counter > LED_KA_ON_TIMEOUT)
			sys_rp_led_off();
		else
			sys_rp_led_on();
	}
}
 8001996:	e013      	b.n	80019c0 <led_enable_kalive+0x4c>
		if (HAL_GetTick() - counter > LED_KA_ON_TIMEOUT)
 8001998:	f002 f858 	bl	8003a4c <HAL_GetTick>
 800199c:	0002      	movs	r2, r0
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b32      	cmp	r3, #50	; 0x32
 80019a4:	d906      	bls.n	80019b4 <led_enable_kalive+0x40>
			sys_rp_led_off();
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <led_enable_kalive+0x54>)
 80019a8:	695a      	ldr	r2, [r3, #20]
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <led_enable_kalive+0x54>)
 80019ac:	2140      	movs	r1, #64	; 0x40
 80019ae:	438a      	bics	r2, r1
 80019b0:	615a      	str	r2, [r3, #20]
}
 80019b2:	e005      	b.n	80019c0 <led_enable_kalive+0x4c>
			sys_rp_led_on();
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <led_enable_kalive+0x54>)
 80019b6:	695a      	ldr	r2, [r3, #20]
 80019b8:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <led_enable_kalive+0x54>)
 80019ba:	2140      	movs	r1, #64	; 0x40
 80019bc:	430a      	orrs	r2, r1
 80019be:	615a      	str	r2, [r3, #20]
}
 80019c0:	46c0      	nop			; (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b002      	add	sp, #8
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	50000800 	.word	0x50000800

080019cc <led_reset>:
void led_reset(LED_t *l){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
l->ch_counter = 0;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
l->cl_counter = 0;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	605a      	str	r2, [r3, #4]
l->cn_counter = 0;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
l->ka_counter = 0;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
l->sysrp_counter = 0;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
l->th_counter = 0;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
l->tok_counter = 0;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	615a      	str	r2, [r3, #20]
}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b002      	add	sp, #8
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <lm75_init>:
#include "lm75.h"

void lm75_init(void ) {
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
	uint8_t cmd[2];
	cmd[0] = LM75_Conf;
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	2201      	movs	r2, #1
 8001a10:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x0;
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2200      	movs	r2, #0
 8001a16:	705a      	strb	r2, [r3, #1]
	i2c1_byte_tx(LM75_ADDR<<1, cmd, 2);
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	209e      	movs	r0, #158	; 0x9e
 8001a20:	f7ff fe8e 	bl	8001740 <i2c1_byte_tx>
}
 8001a24:	46c0      	nop			; (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b002      	add	sp, #8
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <lm75_read>:

float lm75_read(void) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
	uint8_t cmd[2];
	float result = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
	cmd[0] = LM75_Temp;
 8001a36:	003b      	movs	r3, r7
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]

	i2c1_byte_tx( LM75_ADDR<<1, cmd, 1); // Send command string
 8001a3c:	003b      	movs	r3, r7
 8001a3e:	2201      	movs	r2, #1
 8001a40:	0019      	movs	r1, r3
 8001a42:	209e      	movs	r0, #158	; 0x9e
 8001a44:	f7ff fe7c 	bl	8001740 <i2c1_byte_tx>
	i2c1_buffReceive(LM75_ADDR<<1 | 1, cmd, 2); // Send command string
 8001a48:	003b      	movs	r3, r7
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	0019      	movs	r1, r3
 8001a4e:	209f      	movs	r0, #159	; 0x9f
 8001a50:	f7ff fe20 	bl	8001694 <i2c1_buffReceive>
	result = (float) ((cmd[0] << 8) | cmd[1]) / 256.0f;
 8001a54:	003b      	movs	r3, r7
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	003a      	movs	r2, r7
 8001a5c:	7852      	ldrb	r2, [r2, #1]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	0018      	movs	r0, r3
 8001a62:	f7ff fb8f 	bl	8001184 <__aeabi_i2f>
 8001a66:	1c03      	adds	r3, r0, #0
 8001a68:	2187      	movs	r1, #135	; 0x87
 8001a6a:	05c9      	lsls	r1, r1, #23
 8001a6c:	1c18      	adds	r0, r3, #0
 8001a6e:	f7fe feb7 	bl	80007e0 <__aeabi_fdiv>
 8001a72:	1c03      	adds	r3, r0, #0
 8001a74:	607b      	str	r3, [r7, #4]
	return result;
 8001a76:	687b      	ldr	r3, [r7, #4]
}
 8001a78:	1c18      	adds	r0, r3, #0
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b002      	add	sp, #8
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <m24c64_read_N>:

	i2c1_byte_tx(CHIP_ADDR, buff, 2);
	i2c1_buffReceive(CHIP_ADDR, data, 32);
}

void m24c64_read_N(uint8_t page, uint8_t *data, uint8_t offset, uint8_t size) {
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	0004      	movs	r4, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	0010      	movs	r0, r2
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	1dfb      	adds	r3, r7, #7
 8001a90:	1c22      	adds	r2, r4, #0
 8001a92:	701a      	strb	r2, [r3, #0]
 8001a94:	1dbb      	adds	r3, r7, #6
 8001a96:	1c02      	adds	r2, r0, #0
 8001a98:	701a      	strb	r2, [r3, #0]
 8001a9a:	1d7b      	adds	r3, r7, #5
 8001a9c:	1c0a      	adds	r2, r1, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
	uint8_t buff[2] = { 0 };
 8001aa0:	210c      	movs	r1, #12
 8001aa2:	187b      	adds	r3, r7, r1
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	801a      	strh	r2, [r3, #0]
	uint16_t MemAddress = page << PADDRPOSITION | offset;
 8001aa8:	1dfb      	adds	r3, r7, #7
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	015b      	lsls	r3, r3, #5
 8001aae:	b21a      	sxth	r2, r3
 8001ab0:	1dbb      	adds	r3, r7, #6
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	b21a      	sxth	r2, r3
 8001aba:	200e      	movs	r0, #14
 8001abc:	183b      	adds	r3, r7, r0
 8001abe:	801a      	strh	r2, [r3, #0]

	buff[0] = MemAddress >> 8;
 8001ac0:	183b      	adds	r3, r7, r0
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	0a1b      	lsrs	r3, r3, #8
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	187b      	adds	r3, r7, r1
 8001acc:	701a      	strb	r2, [r3, #0]
	buff[1] = MemAddress & 0xff;
 8001ace:	183b      	adds	r3, r7, r0
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	705a      	strb	r2, [r3, #1]

	i2c1_byte_tx(CHIP_ADDR, buff, 2);
 8001ad8:	187b      	adds	r3, r7, r1
 8001ada:	2202      	movs	r2, #2
 8001adc:	0019      	movs	r1, r3
 8001ade:	20a0      	movs	r0, #160	; 0xa0
 8001ae0:	f7ff fe2e 	bl	8001740 <i2c1_byte_tx>
	i2c1_buffReceive(CHIP_ADDR, data, size);
 8001ae4:	1d7b      	adds	r3, r7, #5
 8001ae6:	781a      	ldrb	r2, [r3, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	0019      	movs	r1, r3
 8001aec:	20a0      	movs	r0, #160	; 0xa0
 8001aee:	f7ff fdd1 	bl	8001694 <i2c1_buffReceive>
}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b005      	add	sp, #20
 8001af8:	bd90      	pop	{r4, r7, pc}

08001afa <m24c64_write_N>:

void m24c64_write_N(uint8_t page, uint8_t *data, uint8_t offset, uint8_t size) {
 8001afa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001afc:	b097      	sub	sp, #92	; 0x5c
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	63b9      	str	r1, [r7, #56]	; 0x38
 8001b02:	0011      	movs	r1, r2
 8001b04:	001e      	movs	r6, r3
 8001b06:	233f      	movs	r3, #63	; 0x3f
 8001b08:	18fa      	adds	r2, r7, r3
 8001b0a:	1c03      	adds	r3, r0, #0
 8001b0c:	7013      	strb	r3, [r2, #0]
 8001b0e:	233e      	movs	r3, #62	; 0x3e
 8001b10:	18fa      	adds	r2, r7, r3
 8001b12:	1c0b      	adds	r3, r1, #0
 8001b14:	7013      	strb	r3, [r2, #0]
 8001b16:	233d      	movs	r3, #61	; 0x3d
 8001b18:	18fa      	adds	r2, r7, r3
 8001b1a:	1c33      	adds	r3, r6, #0
 8001b1c:	7013      	strb	r3, [r2, #0]
 8001b1e:	466b      	mov	r3, sp
 8001b20:	001e      	movs	r6, r3
	uint8_t buff[size + 2];
 8001b22:	233d      	movs	r3, #61	; 0x3d
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	1c9a      	adds	r2, r3, #2
 8001b2a:	1e53      	subs	r3, r2, #1
 8001b2c:	657b      	str	r3, [r7, #84]	; 0x54
 8001b2e:	0013      	movs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	69b8      	ldr	r0, [r7, #24]
 8001b38:	69f9      	ldr	r1, [r7, #28]
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	0f5b      	lsrs	r3, r3, #29
 8001b3e:	469c      	mov	ip, r3
 8001b40:	000b      	movs	r3, r1
 8001b42:	00dd      	lsls	r5, r3, #3
 8001b44:	4663      	mov	r3, ip
 8001b46:	431d      	orrs	r5, r3
 8001b48:	0003      	movs	r3, r0
 8001b4a:	00dc      	lsls	r4, r3, #3
 8001b4c:	0013      	movs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	6938      	ldr	r0, [r7, #16]
 8001b56:	6979      	ldr	r1, [r7, #20]
 8001b58:	0003      	movs	r3, r0
 8001b5a:	0f5b      	lsrs	r3, r3, #29
 8001b5c:	000c      	movs	r4, r1
 8001b5e:	00e4      	lsls	r4, r4, #3
 8001b60:	637c      	str	r4, [r7, #52]	; 0x34
 8001b62:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8001b64:	431c      	orrs	r4, r3
 8001b66:	637c      	str	r4, [r7, #52]	; 0x34
 8001b68:	0003      	movs	r3, r0
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b6e:	0013      	movs	r3, r2
 8001b70:	3307      	adds	r3, #7
 8001b72:	08db      	lsrs	r3, r3, #3
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	466a      	mov	r2, sp
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	469d      	mov	sp, r3
 8001b7c:	466b      	mov	r3, sp
 8001b7e:	3300      	adds	r3, #0
 8001b80:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t read[size];
 8001b82:	233d      	movs	r3, #61	; 0x3d
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	001a      	movs	r2, r3
 8001b8a:	3a01      	subs	r2, #1
 8001b8c:	64ba      	str	r2, [r7, #72]	; 0x48
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	2200      	movs	r2, #0
 8001b92:	60fa      	str	r2, [r7, #12]
 8001b94:	68b8      	ldr	r0, [r7, #8]
 8001b96:	68f9      	ldr	r1, [r7, #12]
 8001b98:	0002      	movs	r2, r0
 8001b9a:	0f52      	lsrs	r2, r2, #29
 8001b9c:	000c      	movs	r4, r1
 8001b9e:	00e4      	lsls	r4, r4, #3
 8001ba0:	62fc      	str	r4, [r7, #44]	; 0x2c
 8001ba2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8001ba4:	4314      	orrs	r4, r2
 8001ba6:	62fc      	str	r4, [r7, #44]	; 0x2c
 8001ba8:	0002      	movs	r2, r0
 8001baa:	00d2      	lsls	r2, r2, #3
 8001bac:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	6838      	ldr	r0, [r7, #0]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	0002      	movs	r2, r0
 8001bba:	0f52      	lsrs	r2, r2, #29
 8001bbc:	000c      	movs	r4, r1
 8001bbe:	00e4      	lsls	r4, r4, #3
 8001bc0:	627c      	str	r4, [r7, #36]	; 0x24
 8001bc2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001bc4:	4314      	orrs	r4, r2
 8001bc6:	627c      	str	r4, [r7, #36]	; 0x24
 8001bc8:	0002      	movs	r2, r0
 8001bca:	00d2      	lsls	r2, r2, #3
 8001bcc:	623a      	str	r2, [r7, #32]
 8001bce:	3307      	adds	r3, #7
 8001bd0:	08db      	lsrs	r3, r3, #3
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	466a      	mov	r2, sp
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	469d      	mov	sp, r3
 8001bda:	466b      	mov	r3, sp
 8001bdc:	3300      	adds	r3, #0
 8001bde:	647b      	str	r3, [r7, #68]	; 0x44

	m24c64_read_N(page, read, offset, size);
 8001be0:	233d      	movs	r3, #61	; 0x3d
 8001be2:	18fb      	adds	r3, r7, r3
 8001be4:	781c      	ldrb	r4, [r3, #0]
 8001be6:	233e      	movs	r3, #62	; 0x3e
 8001be8:	18fb      	adds	r3, r7, r3
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001bee:	233f      	movs	r3, #63	; 0x3f
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	7818      	ldrb	r0, [r3, #0]
 8001bf4:	0023      	movs	r3, r4
 8001bf6:	f7ff ff43 	bl	8001a80 <m24c64_read_N>

//	HAL_Delay(5);
	if (strncmp((const char*) data, (const char*) read, (size_t) size)) {
 8001bfa:	233d      	movs	r3, #61	; 0x3d
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c04:	0018      	movs	r0, r3
 8001c06:	f004 fb99 	bl	800633c <strncmp>
 8001c0a:	1e03      	subs	r3, r0, #0
 8001c0c:	d037      	beq.n	8001c7e <m24c64_write_N+0x184>
		buff[0] = (page << PADDRPOSITION | offset) >> 8;
 8001c0e:	233f      	movs	r3, #63	; 0x3f
 8001c10:	18fb      	adds	r3, r7, r3
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	015a      	lsls	r2, r3, #5
 8001c16:	233e      	movs	r3, #62	; 0x3e
 8001c18:	18fb      	adds	r3, r7, r3
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	121b      	asrs	r3, r3, #8
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c24:	701a      	strb	r2, [r3, #0]
		buff[1] = (page << PADDRPOSITION | offset) & 0xff;
 8001c26:	233f      	movs	r3, #63	; 0x3f
 8001c28:	18fb      	adds	r3, r7, r3
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	015b      	lsls	r3, r3, #5
 8001c2e:	b25a      	sxtb	r2, r3
 8001c30:	233e      	movs	r3, #62	; 0x3e
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	b25b      	sxtb	r3, r3
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	b25b      	sxtb	r3, r3
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c40:	705a      	strb	r2, [r3, #1]
		for (int i = 0; i < size; i++) {
 8001c42:	2300      	movs	r3, #0
 8001c44:	653b      	str	r3, [r7, #80]	; 0x50
 8001c46:	e00a      	b.n	8001c5e <m24c64_write_N+0x164>
			buff[i + 2] = data[i];
 8001c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c4c:	18d2      	adds	r2, r2, r3
 8001c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c50:	3302      	adds	r3, #2
 8001c52:	7811      	ldrb	r1, [r2, #0]
 8001c54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c56:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < size; i++) {
 8001c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	653b      	str	r3, [r7, #80]	; 0x50
 8001c5e:	233d      	movs	r3, #61	; 0x3d
 8001c60:	18fb      	adds	r3, r7, r3
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001c66:	429a      	cmp	r2, r3
 8001c68:	dbee      	blt.n	8001c48 <m24c64_write_N+0x14e>
		}
		i2c1_byte_tx(CHIP_ADDR, buff, size + 2);
 8001c6a:	233d      	movs	r3, #61	; 0x3d
 8001c6c:	18fb      	adds	r3, r7, r3
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	3302      	adds	r3, #2
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c76:	0019      	movs	r1, r3
 8001c78:	20a0      	movs	r0, #160	; 0xa0
 8001c7a:	f7ff fd61 	bl	8001740 <i2c1_byte_tx>
	}
	HAL_Delay(6);
 8001c7e:	2006      	movs	r0, #6
 8001c80:	f001 feee 	bl	8003a60 <HAL_Delay>
 8001c84:	46b5      	mov	sp, r6
}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b017      	add	sp, #92	; 0x5c
 8001c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c8e <m24c64_init_16uvalue>:

void m24c64_init_16uvalue(M24C64_ADDR_t addr, uint16_t value) {
 8001c8e:	b590      	push	{r4, r7, lr}
 8001c90:	b085      	sub	sp, #20
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	0002      	movs	r2, r0
 8001c96:	1dfb      	adds	r3, r7, #7
 8001c98:	701a      	strb	r2, [r3, #0]
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	1c0a      	adds	r2, r1, #0
 8001c9e:	801a      	strh	r2, [r3, #0]
	uint8_t buff[2];
	m24c64_read_N(BASE_ADDR, buff, addr, 1);
 8001ca0:	1dfb      	adds	r3, r7, #7
 8001ca2:	781a      	ldrb	r2, [r3, #0]
 8001ca4:	240c      	movs	r4, #12
 8001ca6:	1939      	adds	r1, r7, r4
 8001ca8:	2301      	movs	r3, #1
 8001caa:	2003      	movs	r0, #3
 8001cac:	f7ff fee8 	bl	8001a80 <m24c64_read_N>
	if (!(buff[0] == IS_READY)) {
 8001cb0:	0021      	movs	r1, r4
 8001cb2:	187b      	adds	r3, r7, r1
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2baa      	cmp	r3, #170	; 0xaa
 8001cb8:	d014      	beq.n	8001ce4 <m24c64_init_16uvalue+0x56>
		buff[0] = value >> 8;
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	0a1b      	lsrs	r3, r3, #8
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	187b      	adds	r3, r7, r1
 8001cc6:	701a      	strb	r2, [r3, #0]
		buff[1] = value & 0xff;
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	187b      	adds	r3, r7, r1
 8001cd0:	705a      	strb	r2, [r3, #1]
		m24c64_write_N(BASE_ADDR, buff, addr + 1, 2);
 8001cd2:	1dfb      	adds	r3, r7, #7
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	1879      	adds	r1, r7, r1
 8001cdc:	2302      	movs	r3, #2
 8001cde:	2003      	movs	r0, #3
 8001ce0:	f7ff ff0b 	bl	8001afa <m24c64_write_N>
	}
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b005      	add	sp, #20
 8001cea:	bd90      	pop	{r4, r7, pc}

08001cec <m24c64_store_16uvalue>:

void m24c64_store_16uvalue(M24C64_ADDR_t addr, uint16_t value) {
 8001cec:	b590      	push	{r4, r7, lr}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	1dfb      	adds	r3, r7, #7
 8001cf6:	701a      	strb	r2, [r3, #0]
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	1c0a      	adds	r2, r1, #0
 8001cfc:	801a      	strh	r2, [r3, #0]
	uint8_t buff[2];
	buff[0] = value >> 8;
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	0a1b      	lsrs	r3, r3, #8
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	210c      	movs	r1, #12
 8001d0a:	187b      	adds	r3, r7, r1
 8001d0c:	701a      	strb	r2, [r3, #0]
	buff[1] = value & 0xff;
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	187b      	adds	r3, r7, r1
 8001d16:	705a      	strb	r2, [r3, #1]
	m24c64_write_N(BASE_ADDR, buff, addr + 1, 2);
 8001d18:	1dfb      	adds	r3, r7, #7
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	000c      	movs	r4, r1
 8001d22:	1879      	adds	r1, r7, r1
 8001d24:	2302      	movs	r3, #2
 8001d26:	2003      	movs	r0, #3
 8001d28:	f7ff fee7 	bl	8001afa <m24c64_write_N>
	buff[0] = addr;
 8001d2c:	0021      	movs	r1, r4
 8001d2e:	187b      	adds	r3, r7, r1
 8001d30:	1dfa      	adds	r2, r7, #7
 8001d32:	7812      	ldrb	r2, [r2, #0]
 8001d34:	701a      	strb	r2, [r3, #0]
	m24c64_write_N(BASE_ADDR, buff, addr, 1);
 8001d36:	1dfb      	adds	r3, r7, #7
 8001d38:	781a      	ldrb	r2, [r3, #0]
 8001d3a:	1879      	adds	r1, r7, r1
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	2003      	movs	r0, #3
 8001d40:	f7ff fedb 	bl	8001afa <m24c64_write_N>
}
 8001d44:	46c0      	nop			; (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b005      	add	sp, #20
 8001d4a:	bd90      	pop	{r4, r7, pc}

08001d4c <print_parameters>:
/* USER CODE BEGIN PFP */

uint8_t get_db_gain(uint16_t adc_gain);
uint8_t get_dbm_pout(uint16_t pout_adc);

void print_parameters(UART1_t *u, Module_t m) {
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d50:	b087      	sub	sp, #28
 8001d52:	af04      	add	r7, sp, #16
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	2004      	movs	r0, #4
 8001d58:	2420      	movs	r4, #32
 8001d5a:	1900      	adds	r0, r0, r4
 8001d5c:	19c0      	adds	r0, r0, r7
 8001d5e:	6001      	str	r1, [r0, #0]
 8001d60:	6042      	str	r2, [r0, #4]
 8001d62:	6083      	str	r3, [r0, #8]
	sprintf((char*) u->tx_buffer,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6858      	ldr	r0, [r3, #4]
			"Pout %d[dBm] Att %u[dB] Gain %u[dB] Pin %d[dBm] Curent %d[mA] Voltage %u[V]\r\n",
			m.pout, m.att, m.gain, m.pin, m.current, (uint8_t) m.voltage);
 8001d68:	2304      	movs	r3, #4
 8001d6a:	0021      	movs	r1, r4
 8001d6c:	185b      	adds	r3, r3, r1
 8001d6e:	19db      	adds	r3, r3, r7
 8001d70:	789b      	ldrb	r3, [r3, #2]
 8001d72:	b25b      	sxtb	r3, r3
	sprintf((char*) u->tx_buffer,
 8001d74:	001e      	movs	r6, r3
			m.pout, m.att, m.gain, m.pin, m.current, (uint8_t) m.voltage);
 8001d76:	2304      	movs	r3, #4
 8001d78:	185b      	adds	r3, r3, r1
 8001d7a:	19db      	adds	r3, r3, r7
 8001d7c:	781b      	ldrb	r3, [r3, #0]
	sprintf((char*) u->tx_buffer,
 8001d7e:	469c      	mov	ip, r3
			m.pout, m.att, m.gain, m.pin, m.current, (uint8_t) m.voltage);
 8001d80:	2304      	movs	r3, #4
 8001d82:	185b      	adds	r3, r3, r1
 8001d84:	19db      	adds	r3, r3, r7
 8001d86:	785b      	ldrb	r3, [r3, #1]
	sprintf((char*) u->tx_buffer,
 8001d88:	001a      	movs	r2, r3
			m.pout, m.att, m.gain, m.pin, m.current, (uint8_t) m.voltage);
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	185b      	adds	r3, r3, r1
 8001d8e:	19db      	adds	r3, r3, r7
 8001d90:	795b      	ldrb	r3, [r3, #5]
 8001d92:	b25b      	sxtb	r3, r3
	sprintf((char*) u->tx_buffer,
 8001d94:	001c      	movs	r4, r3
			m.pout, m.att, m.gain, m.pin, m.current, (uint8_t) m.voltage);
 8001d96:	2304      	movs	r3, #4
 8001d98:	185b      	adds	r3, r3, r1
 8001d9a:	19db      	adds	r3, r3, r7
 8001d9c:	799b      	ldrb	r3, [r3, #6]
	sprintf((char*) u->tx_buffer,
 8001d9e:	001d      	movs	r5, r3
			m.pout, m.att, m.gain, m.pin, m.current, (uint8_t) m.voltage);
 8001da0:	2304      	movs	r3, #4
 8001da2:	185b      	adds	r3, r3, r1
 8001da4:	19db      	adds	r3, r3, r7
 8001da6:	791b      	ldrb	r3, [r3, #4]
	sprintf((char*) u->tx_buffer,
 8001da8:	490c      	ldr	r1, [pc, #48]	; (8001ddc <print_parameters+0x90>)
 8001daa:	9303      	str	r3, [sp, #12]
 8001dac:	9502      	str	r5, [sp, #8]
 8001dae:	9401      	str	r4, [sp, #4]
 8001db0:	9200      	str	r2, [sp, #0]
 8001db2:	4663      	mov	r3, ip
 8001db4:	0032      	movs	r2, r6
 8001db6:	f004 faa1 	bl	80062fc <siprintf>
	uart1_send_frame((char*) u->tx_buffer, TX_BUFFLEN);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2164      	movs	r1, #100	; 0x64
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f001 fcf5 	bl	80037b0 <uart1_send_frame>
	uart1_clean_buffer(u);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f001 fd12 	bl	80037f2 <uart1_clean_buffer>
}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b003      	add	sp, #12
 8001dd4:	bcf0      	pop	{r4, r5, r6, r7}
 8001dd6:	bc08      	pop	{r3}
 8001dd8:	b004      	add	sp, #16
 8001dda:	4718      	bx	r3
 8001ddc:	08006b08 	.word	0x08006b08

08001de0 <print_adc>:
void print_adc(UART1_t *u, uint16_t *adc) {
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af02      	add	r7, sp, #8
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
	sprintf((char*) u->tx_buffer,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6858      	ldr	r0, [r3, #4]
			"Pout %d  \t Gain %u \t Curent %u \t Voltage %u\r\n", adc[POUT_i],
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	3302      	adds	r3, #2
 8001df2:	881b      	ldrh	r3, [r3, #0]
	sprintf((char*) u->tx_buffer,
 8001df4:	001c      	movs	r4, r3
			adc[GAIN_i], adc[CURRENT_i], adc[VOLTAGE_i]);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	881b      	ldrh	r3, [r3, #0]
	sprintf((char*) u->tx_buffer,
 8001dfa:	001d      	movs	r5, r3
			adc[GAIN_i], adc[CURRENT_i], adc[VOLTAGE_i]);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	3306      	adds	r3, #6
 8001e00:	881b      	ldrh	r3, [r3, #0]
	sprintf((char*) u->tx_buffer,
 8001e02:	001a      	movs	r2, r3
			adc[GAIN_i], adc[CURRENT_i], adc[VOLTAGE_i]);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	3304      	adds	r3, #4
 8001e08:	881b      	ldrh	r3, [r3, #0]
	sprintf((char*) u->tx_buffer,
 8001e0a:	490a      	ldr	r1, [pc, #40]	; (8001e34 <print_adc+0x54>)
 8001e0c:	9301      	str	r3, [sp, #4]
 8001e0e:	9200      	str	r2, [sp, #0]
 8001e10:	002b      	movs	r3, r5
 8001e12:	0022      	movs	r2, r4
 8001e14:	f004 fa72 	bl	80062fc <siprintf>
	uart1_send_frame((char*) u->tx_buffer, TX_BUFFLEN);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2164      	movs	r1, #100	; 0x64
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f001 fcc6 	bl	80037b0 <uart1_send_frame>
	uart1_clean_buffer(u);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	0018      	movs	r0, r3
 8001e28:	f001 fce3 	bl	80037f2 <uart1_clean_buffer>
}
 8001e2c:	46c0      	nop			; (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b002      	add	sp, #8
 8001e32:	bdb0      	pop	{r4, r5, r7, pc}
 8001e34:	08006b58 	.word	0x08006b58

08001e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e38:	b5b0      	push	{r4, r5, r7, lr}
 8001e3a:	b096      	sub	sp, #88	; 0x58
 8001e3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e3e:	f001 fd89 	bl	8003954 <HAL_Init>

  /* USER CODE BEGIN Init */

	/* enable clock access ro GPIOA and GPIOB */
	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOAEN);
 8001e42:	4bed      	ldr	r3, [pc, #948]	; (80021f8 <main+0x3c0>)
 8001e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e46:	4bec      	ldr	r3, [pc, #944]	; (80021f8 <main+0x3c0>)
 8001e48:	2101      	movs	r1, #1
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	635a      	str	r2, [r3, #52]	; 0x34
	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN);
 8001e4e:	4bea      	ldr	r3, [pc, #936]	; (80021f8 <main+0x3c0>)
 8001e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e52:	4be9      	ldr	r3, [pc, #932]	; (80021f8 <main+0x3c0>)
 8001e54:	2102      	movs	r1, #2
 8001e56:	430a      	orrs	r2, r1
 8001e58:	635a      	str	r2, [r3, #52]	; 0x34

	/* PBA15 as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE15_0);
 8001e5a:	23a0      	movs	r3, #160	; 0xa0
 8001e5c:	05db      	lsls	r3, r3, #23
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	23a0      	movs	r3, #160	; 0xa0
 8001e62:	05db      	lsls	r3, r3, #23
 8001e64:	2180      	movs	r1, #128	; 0x80
 8001e66:	05c9      	lsls	r1, r1, #23
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE15_1);
 8001e6c:	23a0      	movs	r3, #160	; 0xa0
 8001e6e:	05db      	lsls	r3, r3, #23
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	23a0      	movs	r3, #160	; 0xa0
 8001e74:	05db      	lsls	r3, r3, #23
 8001e76:	0052      	lsls	r2, r2, #1
 8001e78:	0852      	lsrs	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e7c:	f000 fb14 	bl	80024a8 <SystemClock_Config>
	MAX4003_t vswr;
	LED_t led;
	uint8_t rcv_buff[2];
	uint8_t send_buff[2];

	module_init(&pa, POWER_AMPLIFIER, ID8);
 8001e80:	243c      	movs	r4, #60	; 0x3c
 8001e82:	193b      	adds	r3, r7, r4
 8001e84:	2208      	movs	r2, #8
 8001e86:	2109      	movs	r1, #9
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f000 ff79 	bl	8002d80 <module_init>
	led_init();
 8001e8e:	f7ff fcfb 	bl	8001888 <led_init>
	led_reset(&led);
 8001e92:	2308      	movs	r3, #8
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	0018      	movs	r0, r3
 8001e98:	f7ff fd98 	bl	80019cc <led_reset>
	i2c1_init();
 8001e9c:	f7ff fb44 	bl	8001528 <i2c1_init>
	uart1_init(HS16_CLK, BAUD_RATE, &uart1);
 8001ea0:	4ad6      	ldr	r2, [pc, #856]	; (80021fc <main+0x3c4>)
 8001ea2:	23e1      	movs	r3, #225	; 0xe1
 8001ea4:	025b      	lsls	r3, r3, #9
 8001ea6:	48d6      	ldr	r0, [pc, #856]	; (8002200 <main+0x3c8>)
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	f001 fb6f 	bl	800358c <uart1_init>
	lm75_init();
 8001eae:	f7ff fdaa 	bl	8001a06 <lm75_init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eb2:	f000 fc4d 	bl	8002750 <MX_GPIO_Init>
  MX_DMA_Init();
 8001eb6:	f000 fc2d 	bl	8002714 <MX_DMA_Init>
  MX_ADC1_Init();
 8001eba:	f000 fb53 	bl	8002564 <MX_ADC1_Init>
//  MX_IWDG_Init();
  /* USER CODE BEGIN 2 */


// Calibrate The ADC On Power-Up For Better Accuracy
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001ebe:	4bd1      	ldr	r3, [pc, #836]	; (8002204 <main+0x3cc>)
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f002 fd59 	bl	8004978 <HAL_ADCEx_Calibration_Start>
	uart1_send_str("PA init\n\r");
 8001ec6:	4bd0      	ldr	r3, [pc, #832]	; (8002208 <main+0x3d0>)
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f001 fc43 	bl	8003754 <uart1_send_str>
//	uint8_t addrs[5] = { 0 };  // 0x50 0x60 0x4f
//	i2c1_scanner(addrs);
	send_buff[0] = 30;
 8001ece:	003b      	movs	r3, r7
 8001ed0:	221e      	movs	r2, #30
 8001ed2:	701a      	strb	r2, [r3, #0]

	m24c64_read_N(BASE_ADDR, &(pa.att), ATT_VALUE_ADDR, 1);
 8001ed4:	1939      	adds	r1, r7, r4
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	2003      	movs	r0, #3
 8001edc:	f7ff fdd0 	bl	8001a80 <m24c64_read_N>

	if (pa.att > 0 && pa.att < 30)
 8001ee0:	193b      	adds	r3, r7, r4
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00b      	beq.n	8001f00 <main+0xc8>
 8001ee8:	193b      	adds	r3, r7, r4
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b1d      	cmp	r3, #29
 8001eee:	d807      	bhi.n	8001f00 <main+0xc8>
		bda4601_set_initial_att(pa.att, STARTING_MILLIS);
 8001ef0:	193b      	adds	r3, r7, r4
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4ac5      	ldr	r2, [pc, #788]	; (800220c <main+0x3d4>)
 8001ef6:	0011      	movs	r1, r2
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f7ff fac9 	bl	8001490 <bda4601_set_initial_att>
 8001efe:	e003      	b.n	8001f08 <main+0xd0>
	else
		bda4601_set_att(0, 3);
 8001f00:	2103      	movs	r1, #3
 8001f02:	2000      	movs	r0, #0
 8001f04:	f7ff fa40 	bl	8001388 <bda4601_set_att>

	m24c64_init_16uvalue(POUT_MAX_READY_ADDR, AD8363_ADC_MAX);
 8001f08:	4bc1      	ldr	r3, [pc, #772]	; (8002210 <main+0x3d8>)
 8001f0a:	0019      	movs	r1, r3
 8001f0c:	2004      	movs	r0, #4
 8001f0e:	f7ff febe 	bl	8001c8e <m24c64_init_16uvalue>
	m24c64_init_16uvalue(POUT_MIN_READY_ADDR, AD8363_ADC_MIN);
 8001f12:	23f4      	movs	r3, #244	; 0xf4
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	0019      	movs	r1, r3
 8001f18:	2007      	movs	r0, #7
 8001f1a:	f7ff feb8 	bl	8001c8e <m24c64_init_16uvalue>
	m24c64_init_16uvalue(PIN_MAX_READY_ADDR, MAX4003_ADC_MAX);
 8001f1e:	4bbd      	ldr	r3, [pc, #756]	; (8002214 <main+0x3dc>)
 8001f20:	0019      	movs	r1, r3
 8001f22:	200a      	movs	r0, #10
 8001f24:	f7ff feb3 	bl	8001c8e <m24c64_init_16uvalue>
	m24c64_init_16uvalue(PIN_MIN_READY_ADDR, MAX4003_ADC_MIN);
 8001f28:	23f4      	movs	r3, #244	; 0xf4
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	0019      	movs	r1, r3
 8001f2e:	200d      	movs	r0, #13
 8001f30:	f7ff fead 	bl	8001c8e <m24c64_init_16uvalue>
	m24c64_init_16uvalue(VSWR_MAX_READY_ADDR, MAX4003_ADC_MAX);
 8001f34:	4bb7      	ldr	r3, [pc, #732]	; (8002214 <main+0x3dc>)
 8001f36:	0019      	movs	r1, r3
 8001f38:	2010      	movs	r0, #16
 8001f3a:	f7ff fea8 	bl	8001c8e <m24c64_init_16uvalue>
	m24c64_init_16uvalue(VSWR_MIN_READY_ADDR, MAX4003_ADC_MIN);
 8001f3e:	23f4      	movs	r3, #244	; 0xf4
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	0019      	movs	r1, r3
 8001f44:	2013      	movs	r0, #19
 8001f46:	f7ff fea2 	bl	8001c8e <m24c64_init_16uvalue>

	m24c64_read_N(BASE_ADDR, rcv_buff, POUT_ADC_MIN_ADDR_0, 2);
 8001f4a:	1d39      	adds	r1, r7, #4
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	2208      	movs	r2, #8
 8001f50:	2003      	movs	r0, #3
 8001f52:	f7ff fd95 	bl	8001a80 <m24c64_read_N>
	pout.min = (rcv_buff[0] << 8) | (rcv_buff[1] & 0xff);
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	021b      	lsls	r3, r3, #8
 8001f5c:	b21a      	sxth	r2, r3
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	785b      	ldrb	r3, [r3, #1]
 8001f62:	b21b      	sxth	r3, r3
 8001f64:	4313      	orrs	r3, r2
 8001f66:	b21b      	sxth	r3, r3
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	242c      	movs	r4, #44	; 0x2c
 8001f6c:	193b      	adds	r3, r7, r4
 8001f6e:	805a      	strh	r2, [r3, #2]
	m24c64_read_N(BASE_ADDR, rcv_buff, POUT_ADC_MAX_ADDR_0, 2);
 8001f70:	1d39      	adds	r1, r7, #4
 8001f72:	2302      	movs	r3, #2
 8001f74:	2205      	movs	r2, #5
 8001f76:	2003      	movs	r0, #3
 8001f78:	f7ff fd82 	bl	8001a80 <m24c64_read_N>
	pout.max = (rcv_buff[0] << 8) | (rcv_buff[1] & 0xff);
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	021b      	lsls	r3, r3, #8
 8001f82:	b21a      	sxth	r2, r3
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	785b      	ldrb	r3, [r3, #1]
 8001f88:	b21b      	sxth	r3, r3
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	b21b      	sxth	r3, r3
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	193b      	adds	r3, r7, r4
 8001f92:	801a      	strh	r2, [r3, #0]
	m24c64_read_N(BASE_ADDR, rcv_buff, PIN_ADC_MIN_ADDR_0, 2);
 8001f94:	1d39      	adds	r1, r7, #4
 8001f96:	2302      	movs	r3, #2
 8001f98:	220e      	movs	r2, #14
 8001f9a:	2003      	movs	r0, #3
 8001f9c:	f7ff fd70 	bl	8001a80 <m24c64_read_N>
	pin.min = (rcv_buff[0] << 8) | (rcv_buff[1] & 0xff);
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	b21a      	sxth	r2, r3
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	785b      	ldrb	r3, [r3, #1]
 8001fac:	b21b      	sxth	r3, r3
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	b21b      	sxth	r3, r3
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	2428      	movs	r4, #40	; 0x28
 8001fb6:	193b      	adds	r3, r7, r4
 8001fb8:	805a      	strh	r2, [r3, #2]
	m24c64_read_N(BASE_ADDR, rcv_buff, PIN_ADC_MAX_ADDR_0, 2);
 8001fba:	1d39      	adds	r1, r7, #4
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	220b      	movs	r2, #11
 8001fc0:	2003      	movs	r0, #3
 8001fc2:	f7ff fd5d 	bl	8001a80 <m24c64_read_N>
	pin.max = (rcv_buff[0] << 8) | (rcv_buff[1] & 0xff);
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	021b      	lsls	r3, r3, #8
 8001fcc:	b21a      	sxth	r2, r3
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	785b      	ldrb	r3, [r3, #1]
 8001fd2:	b21b      	sxth	r3, r3
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	193b      	adds	r3, r7, r4
 8001fdc:	801a      	strh	r2, [r3, #0]
	m24c64_read_N(BASE_ADDR, rcv_buff, VSWR_ADC_MIN_ADDR_0, 2);
 8001fde:	1d39      	adds	r1, r7, #4
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	2214      	movs	r2, #20
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	f7ff fd4b 	bl	8001a80 <m24c64_read_N>
	vswr.min = (rcv_buff[0] << 8) | (rcv_buff[1] & 0xff);
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	b21a      	sxth	r2, r3
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	785b      	ldrb	r3, [r3, #1]
 8001ff6:	b21b      	sxth	r3, r3
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	b21b      	sxth	r3, r3
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	2424      	movs	r4, #36	; 0x24
 8002000:	193b      	adds	r3, r7, r4
 8002002:	805a      	strh	r2, [r3, #2]
	m24c64_read_N(BASE_ADDR, rcv_buff, VSWR_ADC_MAX_ADDR_0, 2);
 8002004:	1d39      	adds	r1, r7, #4
 8002006:	2302      	movs	r3, #2
 8002008:	2211      	movs	r2, #17
 800200a:	2003      	movs	r0, #3
 800200c:	f7ff fd38 	bl	8001a80 <m24c64_read_N>
	vswr.max = (rcv_buff[0] << 8) | (rcv_buff[1] & 0xff);
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	b21a      	sxth	r2, r3
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	785b      	ldrb	r3, [r3, #1]
 800201c:	b21b      	sxth	r3, r3
 800201e:	4313      	orrs	r3, r2
 8002020:	b21b      	sxth	r3, r3
 8002022:	b29a      	uxth	r2, r3
 8002024:	193b      	adds	r3, r7, r4
 8002026:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, 4);
 8002028:	497b      	ldr	r1, [pc, #492]	; (8002218 <main+0x3e0>)
 800202a:	4b76      	ldr	r3, [pc, #472]	; (8002204 <main+0x3cc>)
 800202c:	2204      	movs	r2, #4
 800202e:	0018      	movs	r0, r3
 8002030:	f002 f83a 	bl	80040a8 <HAL_ADC_Start_DMA>
	led.ka_counter = HAL_GetTick();
 8002034:	f001 fd0a 	bl	8003a4c <HAL_GetTick>
 8002038:	0002      	movs	r2, r0
 800203a:	2308      	movs	r3, #8
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	601a      	str	r2, [r3, #0]
	uart1.timeout = HAL_GetTick();
 8002040:	f001 fd04 	bl	8003a4c <HAL_GetTick>
 8002044:	0002      	movs	r2, r0
 8002046:	4b6d      	ldr	r3, [pc, #436]	; (80021fc <main+0x3c4>)
 8002048:	60da      	str	r2, [r3, #12]

	while (1) {

		/* USER CODE BEGIN 3 */
		rs485.status = rs485_check_frame(&rs485, &uart1);
 800204a:	4a6c      	ldr	r2, [pc, #432]	; (80021fc <main+0x3c4>)
 800204c:	2430      	movs	r4, #48	; 0x30
 800204e:	193b      	adds	r3, r7, r4
 8002050:	0011      	movs	r1, r2
 8002052:	0018      	movs	r0, r3
 8002054:	f000 fefe 	bl	8002e54 <rs485_check_frame>
 8002058:	0003      	movs	r3, r0
 800205a:	001a      	movs	r2, r3
 800205c:	193b      	adds	r3, r7, r4
 800205e:	721a      	strb	r2, [r3, #8]
		switch (rs485.status) {
 8002060:	193b      	adds	r3, r7, r4
 8002062:	7a1b      	ldrb	r3, [r3, #8]
 8002064:	2b06      	cmp	r3, #6
 8002066:	d81b      	bhi.n	80020a0 <main+0x268>
 8002068:	009a      	lsls	r2, r3, #2
 800206a:	4b6c      	ldr	r3, [pc, #432]	; (800221c <main+0x3e4>)
 800206c:	18d3      	adds	r3, r2, r3
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	469f      	mov	pc, r3
		case DATA_OK:
			rs485.cmd = uart1.rx_buffer[3];
 8002072:	4b62      	ldr	r3, [pc, #392]	; (80021fc <main+0x3c4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	3303      	adds	r3, #3
 8002078:	781a      	ldrb	r2, [r3, #0]
 800207a:	2330      	movs	r3, #48	; 0x30
 800207c:	18fb      	adds	r3, r7, r3
 800207e:	701a      	strb	r2, [r3, #0]
			break;
 8002080:	e029      	b.n	80020d6 <main+0x29e>
		case NOT_VALID_FRAME:
			// TODO
			uart1_clean_buffer(&uart1);
 8002082:	4b5e      	ldr	r3, [pc, #376]	; (80021fc <main+0x3c4>)
 8002084:	0018      	movs	r0, r3
 8002086:	f001 fbb4 	bl	80037f2 <uart1_clean_buffer>
			break;
 800208a:	e024      	b.n	80020d6 <main+0x29e>
		case WRONG_MODULE_ID:
			// TODO
			uart1_clean_buffer(&uart1);
 800208c:	4b5b      	ldr	r3, [pc, #364]	; (80021fc <main+0x3c4>)
 800208e:	0018      	movs	r0, r3
 8002090:	f001 fbaf 	bl	80037f2 <uart1_clean_buffer>
			break;
 8002094:	e01f      	b.n	80020d6 <main+0x29e>
		case CRC_ERROR:
			// TODO add crc
			uart1_clean_buffer(&uart1);
 8002096:	4b59      	ldr	r3, [pc, #356]	; (80021fc <main+0x3c4>)
 8002098:	0018      	movs	r0, r3
 800209a:	f001 fbaa 	bl	80037f2 <uart1_clean_buffer>
			break;
 800209e:	e01a      	b.n	80020d6 <main+0x29e>
			break;
		case NO_DATA:

			break;
		default:
			rs485.cmd = NO_DATA;
 80020a0:	2330      	movs	r3, #48	; 0x30
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	2205      	movs	r2, #5
 80020a6:	701a      	strb	r2, [r3, #0]
			if (uart1.rx_buffer[0] != '\0')
 80020a8:	4b54      	ldr	r3, [pc, #336]	; (80021fc <main+0x3c4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d010      	beq.n	80020d4 <main+0x29c>
				if (HAL_GetTick() - uart1.timeout > SECONDS(1))
 80020b2:	f001 fccb 	bl	8003a4c <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	4b50      	ldr	r3, [pc, #320]	; (80021fc <main+0x3c4>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	1ad2      	subs	r2, r2, r3
 80020be:	23fa      	movs	r3, #250	; 0xfa
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d906      	bls.n	80020d4 <main+0x29c>
					uart1_clean_buffer(&uart1);
 80020c6:	4b4d      	ldr	r3, [pc, #308]	; (80021fc <main+0x3c4>)
 80020c8:	0018      	movs	r0, r3
 80020ca:	f001 fb92 	bl	80037f2 <uart1_clean_buffer>
			break;
 80020ce:	e001      	b.n	80020d4 <main+0x29c>
			break;
 80020d0:	46c0      	nop			; (mov r8, r8)
 80020d2:	e000      	b.n	80020d6 <main+0x29e>
			break;
 80020d4:	46c0      	nop			; (mov r8, r8)
		}

		switch (rs485.cmd) {
 80020d6:	2330      	movs	r3, #48	; 0x30
 80020d8:	18fb      	adds	r3, r7, r3
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	3b11      	subs	r3, #17
 80020de:	2b15      	cmp	r3, #21
 80020e0:	d900      	bls.n	80020e4 <main+0x2ac>
 80020e2:	e1c1      	b.n	8002468 <main+0x630>
 80020e4:	009a      	lsls	r2, r3, #2
 80020e6:	4b4e      	ldr	r3, [pc, #312]	; (8002220 <main+0x3e8>)
 80020e8:	18d3      	adds	r3, r2, r3
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	469f      	mov	pc, r3
		case QUERY_PARAMETER_LTEL:
			pa.pr = max4003_get_dbm(&vswr, adc_media[VSWR_i]);
 80020ee:	4b4d      	ldr	r3, [pc, #308]	; (8002224 <main+0x3ec>)
 80020f0:	891a      	ldrh	r2, [r3, #8]
 80020f2:	2324      	movs	r3, #36	; 0x24
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	0011      	movs	r1, r2
 80020f8:	0018      	movs	r0, r3
 80020fa:	f000 fded 	bl	8002cd8 <max4003_get_dbm>
 80020fe:	0003      	movs	r3, r0
 8002100:	b25a      	sxtb	r2, r3
 8002102:	243c      	movs	r4, #60	; 0x3c
 8002104:	193b      	adds	r3, r7, r4
 8002106:	70da      	strb	r2, [r3, #3]
			pa.pout = ad8363_get_dbm(&pout, adc_media[POUT_i]);
 8002108:	4b46      	ldr	r3, [pc, #280]	; (8002224 <main+0x3ec>)
 800210a:	885a      	ldrh	r2, [r3, #2]
 800210c:	232c      	movs	r3, #44	; 0x2c
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	0011      	movs	r1, r2
 8002112:	0018      	movs	r0, r3
 8002114:	f7ff f8e4 	bl	80012e0 <ad8363_get_dbm>
 8002118:	0003      	movs	r3, r0
 800211a:	b25a      	sxtb	r2, r3
 800211c:	193b      	adds	r3, r7, r4
 800211e:	709a      	strb	r2, [r3, #2]
			pa.current = ADC_CURRENT_FACTOR * adc_media[CURRENT_i] / 4096.0f;
 8002120:	4b40      	ldr	r3, [pc, #256]	; (8002224 <main+0x3ec>)
 8002122:	88db      	ldrh	r3, [r3, #6]
 8002124:	0018      	movs	r0, r3
 8002126:	f7ff f82d 	bl	8001184 <__aeabi_i2f>
 800212a:	1c03      	adds	r3, r0, #0
 800212c:	4a3e      	ldr	r2, [pc, #248]	; (8002228 <main+0x3f0>)
 800212e:	1c11      	adds	r1, r2, #0
 8002130:	1c18      	adds	r0, r3, #0
 8002132:	f7fe fd1d 	bl	8000b70 <__aeabi_fmul>
 8002136:	1c03      	adds	r3, r0, #0
 8002138:	218b      	movs	r1, #139	; 0x8b
 800213a:	05c9      	lsls	r1, r1, #23
 800213c:	1c18      	adds	r0, r3, #0
 800213e:	f7fe fb4f 	bl	80007e0 <__aeabi_fdiv>
 8002142:	1c03      	adds	r3, r0, #0
 8002144:	1c18      	adds	r0, r3, #0
 8002146:	f7fe f995 	bl	8000474 <__aeabi_f2uiz>
 800214a:	0003      	movs	r3, r0
 800214c:	b2da      	uxtb	r2, r3
 800214e:	193b      	adds	r3, r7, r4
 8002150:	719a      	strb	r2, [r3, #6]
			pa.gain = get_db_gain(adc_media[GAIN_i]);
 8002152:	4b34      	ldr	r3, [pc, #208]	; (8002224 <main+0x3ec>)
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	0018      	movs	r0, r3
 8002158:	f000 fbbe 	bl	80028d8 <get_db_gain>
 800215c:	0003      	movs	r3, r0
 800215e:	001a      	movs	r2, r3
 8002160:	193b      	adds	r3, r7, r4
 8002162:	705a      	strb	r2, [r3, #1]
			pa.vswr = module_vswr_calc(pa.pout, pa.pr);
 8002164:	193b      	adds	r3, r7, r4
 8002166:	2202      	movs	r2, #2
 8002168:	569a      	ldrsb	r2, [r3, r2]
 800216a:	193b      	adds	r3, r7, r4
 800216c:	78db      	ldrb	r3, [r3, #3]
 800216e:	b25b      	sxtb	r3, r3
 8002170:	0019      	movs	r1, r3
 8002172:	0010      	movs	r0, r2
 8002174:	f000 fe2e 	bl	8002dd4 <module_vswr_calc>
 8002178:	1c02      	adds	r2, r0, #0
 800217a:	193b      	adds	r3, r7, r4
 800217c:	60da      	str	r2, [r3, #12]
			pa.pin = max4003_get_dbm(&pin, adc_media[PIN_i]);
 800217e:	4b29      	ldr	r3, [pc, #164]	; (8002224 <main+0x3ec>)
 8002180:	895a      	ldrh	r2, [r3, #10]
 8002182:	2328      	movs	r3, #40	; 0x28
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	0011      	movs	r1, r2
 8002188:	0018      	movs	r0, r3
 800218a:	f000 fda5 	bl	8002cd8 <max4003_get_dbm>
 800218e:	0003      	movs	r3, r0
 8002190:	b25a      	sxtb	r2, r3
 8002192:	193b      	adds	r3, r7, r4
 8002194:	715a      	strb	r2, [r3, #5]
			pa.voltage = ADC_VOLTAGE_FACTOR * adc_media[VOLTAGE_i]/ 4096.0f;
 8002196:	4b23      	ldr	r3, [pc, #140]	; (8002224 <main+0x3ec>)
 8002198:	889b      	ldrh	r3, [r3, #4]
 800219a:	0018      	movs	r0, r3
 800219c:	f7fe fff2 	bl	8001184 <__aeabi_i2f>
 80021a0:	1c03      	adds	r3, r0, #0
 80021a2:	4a22      	ldr	r2, [pc, #136]	; (800222c <main+0x3f4>)
 80021a4:	1c11      	adds	r1, r2, #0
 80021a6:	1c18      	adds	r0, r3, #0
 80021a8:	f7fe fce2 	bl	8000b70 <__aeabi_fmul>
 80021ac:	1c03      	adds	r3, r0, #0
 80021ae:	218b      	movs	r1, #139	; 0x8b
 80021b0:	05c9      	lsls	r1, r1, #23
 80021b2:	1c18      	adds	r0, r3, #0
 80021b4:	f7fe fb14 	bl	80007e0 <__aeabi_fdiv>
 80021b8:	1c03      	adds	r3, r0, #0
 80021ba:	1c18      	adds	r0, r3, #0
 80021bc:	f7fe f95a 	bl	8000474 <__aeabi_f2uiz>
 80021c0:	0003      	movs	r3, r0
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	193b      	adds	r3, r7, r4
 80021c6:	711a      	strb	r2, [r3, #4]
			rs485.len = 14;
 80021c8:	2430      	movs	r4, #48	; 0x30
 80021ca:	193b      	adds	r3, r7, r4
 80021cc:	220e      	movs	r2, #14
 80021ce:	705a      	strb	r2, [r3, #1]
			rs485.frame = (uint8_t*) malloc(14);
 80021d0:	200e      	movs	r0, #14
 80021d2:	f003 ff83 	bl	80060dc <malloc>
 80021d6:	0003      	movs	r3, r0
 80021d8:	001a      	movs	r2, r3
 80021da:	193b      	adds	r3, r7, r4
 80021dc:	605a      	str	r2, [r3, #4]
			uart1_send_frame((char*) rs485.frame, 14);
 80021de:	193b      	adds	r3, r7, r4
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	210e      	movs	r1, #14
 80021e4:	0018      	movs	r0, r3
 80021e6:	f001 fae3 	bl	80037b0 <uart1_send_frame>
			free(rs485.frame);
 80021ea:	193b      	adds	r3, r7, r4
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	0018      	movs	r0, r3
 80021f0:	f003 ff7e 	bl	80060f0 <free>
			break;
 80021f4:	e13d      	b.n	8002472 <main+0x63a>
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	40021000 	.word	0x40021000
 80021fc:	20000264 	.word	0x20000264
 8002200:	00f42400 	.word	0x00f42400
 8002204:	2000008c 	.word	0x2000008c
 8002208:	08006b88 	.word	0x08006b88
 800220c:	00001388 	.word	0x00001388
 8002210:	0000075b 	.word	0x0000075b
 8002214:	0000075c 	.word	0x0000075c
 8002218:	2000014c 	.word	0x2000014c
 800221c:	08006ce4 	.word	0x08006ce4
 8002220:	08006d00 	.word	0x08006d00
 8002224:	20000248 	.word	0x20000248
 8002228:	43951746 	.word	0x43951746
 800222c:	3bf2a006 	.word	0x3bf2a006
		case SET_ATT_LTEL:
			pa.att = uart1.rx_buffer[6];
 8002230:	4b93      	ldr	r3, [pc, #588]	; (8002480 <main+0x648>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	799a      	ldrb	r2, [r3, #6]
 8002236:	243c      	movs	r4, #60	; 0x3c
 8002238:	193b      	adds	r3, r7, r4
 800223a:	701a      	strb	r2, [r3, #0]
			bda4601_set_att(pa.att, 3);
 800223c:	193b      	adds	r3, r7, r4
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2103      	movs	r1, #3
 8002242:	0018      	movs	r0, r3
 8002244:	f7ff f8a0 	bl	8001388 <bda4601_set_att>
			send_buff[0] = pa.att;
 8002248:	193b      	adds	r3, r7, r4
 800224a:	781a      	ldrb	r2, [r3, #0]
 800224c:	003b      	movs	r3, r7
 800224e:	701a      	strb	r2, [r3, #0]
			m24c64_write_N(BASE_ADDR, send_buff, ATT_VALUE_ADDR, 1);
 8002250:	0039      	movs	r1, r7
 8002252:	2301      	movs	r3, #1
 8002254:	2203      	movs	r2, #3
 8002256:	2003      	movs	r0, #3
 8002258:	f7ff fc4f 	bl	8001afa <m24c64_write_N>
			sprintf((char*) uart1.tx_buffer, "Attenuation %u\r\n", pa.att);
 800225c:	4b88      	ldr	r3, [pc, #544]	; (8002480 <main+0x648>)
 800225e:	6858      	ldr	r0, [r3, #4]
 8002260:	193b      	adds	r3, r7, r4
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	001a      	movs	r2, r3
 8002266:	4b87      	ldr	r3, [pc, #540]	; (8002484 <main+0x64c>)
 8002268:	0019      	movs	r1, r3
 800226a:	f004 f847 	bl	80062fc <siprintf>
			uart1_send_frame((char*) uart1.tx_buffer, TX_BUFFLEN);
 800226e:	4b84      	ldr	r3, [pc, #528]	; (8002480 <main+0x648>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2164      	movs	r1, #100	; 0x64
 8002274:	0018      	movs	r0, r3
 8002276:	f001 fa9b 	bl	80037b0 <uart1_send_frame>
			break;
 800227a:	e0fa      	b.n	8002472 <main+0x63a>
		case SET_POUT_MAX:
			pout.max = adc_media[POUT_i];
 800227c:	4b82      	ldr	r3, [pc, #520]	; (8002488 <main+0x650>)
 800227e:	885a      	ldrh	r2, [r3, #2]
 8002280:	212c      	movs	r1, #44	; 0x2c
 8002282:	187b      	adds	r3, r7, r1
 8002284:	801a      	strh	r2, [r3, #0]
			m24c64_store_16uvalue(POUT_MAX_READY_ADDR, pout.max);
 8002286:	187b      	adds	r3, r7, r1
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	0019      	movs	r1, r3
 800228c:	2004      	movs	r0, #4
 800228e:	f7ff fd2d 	bl	8001cec <m24c64_store_16uvalue>
			uart1_send_str("Saved Pout max value\n\r");
 8002292:	4b7e      	ldr	r3, [pc, #504]	; (800248c <main+0x654>)
 8002294:	0018      	movs	r0, r3
 8002296:	f001 fa5d 	bl	8003754 <uart1_send_str>
			break;
 800229a:	e0ea      	b.n	8002472 <main+0x63a>
		case SET_POUT_MIN:
			pout.min = adc_media[POUT_i];
 800229c:	4b7a      	ldr	r3, [pc, #488]	; (8002488 <main+0x650>)
 800229e:	885a      	ldrh	r2, [r3, #2]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	187b      	adds	r3, r7, r1
 80022a4:	805a      	strh	r2, [r3, #2]
			m24c64_store_16uvalue(POUT_MIN_READY_ADDR, pout.min);
 80022a6:	187b      	adds	r3, r7, r1
 80022a8:	885b      	ldrh	r3, [r3, #2]
 80022aa:	0019      	movs	r1, r3
 80022ac:	2007      	movs	r0, #7
 80022ae:	f7ff fd1d 	bl	8001cec <m24c64_store_16uvalue>
			uart1_send_str("Saved Pout min value\n\r");
 80022b2:	4b77      	ldr	r3, [pc, #476]	; (8002490 <main+0x658>)
 80022b4:	0018      	movs	r0, r3
 80022b6:	f001 fa4d 	bl	8003754 <uart1_send_str>
			break;
 80022ba:	e0da      	b.n	8002472 <main+0x63a>
		case SET_PIN_MAX:
			pin.max = adc_media[PIN_i];
 80022bc:	4b72      	ldr	r3, [pc, #456]	; (8002488 <main+0x650>)
 80022be:	895a      	ldrh	r2, [r3, #10]
 80022c0:	2128      	movs	r1, #40	; 0x28
 80022c2:	187b      	adds	r3, r7, r1
 80022c4:	801a      	strh	r2, [r3, #0]
			m24c64_store_16uvalue(PIN_MAX_READY_ADDR, pin.max);
 80022c6:	187b      	adds	r3, r7, r1
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	0019      	movs	r1, r3
 80022cc:	200a      	movs	r0, #10
 80022ce:	f7ff fd0d 	bl	8001cec <m24c64_store_16uvalue>
			uart1_send_str("Saved Pin max value\n\r");
 80022d2:	4b70      	ldr	r3, [pc, #448]	; (8002494 <main+0x65c>)
 80022d4:	0018      	movs	r0, r3
 80022d6:	f001 fa3d 	bl	8003754 <uart1_send_str>
			break;
 80022da:	e0ca      	b.n	8002472 <main+0x63a>
		case SET_PIN_MIN:
			pin.min = adc_media[PIN_i];
 80022dc:	4b6a      	ldr	r3, [pc, #424]	; (8002488 <main+0x650>)
 80022de:	895a      	ldrh	r2, [r3, #10]
 80022e0:	2128      	movs	r1, #40	; 0x28
 80022e2:	187b      	adds	r3, r7, r1
 80022e4:	805a      	strh	r2, [r3, #2]
			m24c64_store_16uvalue(PIN_MAX_READY_ADDR, pin.min);
 80022e6:	187b      	adds	r3, r7, r1
 80022e8:	885b      	ldrh	r3, [r3, #2]
 80022ea:	0019      	movs	r1, r3
 80022ec:	200a      	movs	r0, #10
 80022ee:	f7ff fcfd 	bl	8001cec <m24c64_store_16uvalue>
			uart1_send_str("Saved Pin min value\n\r");
 80022f2:	4b69      	ldr	r3, [pc, #420]	; (8002498 <main+0x660>)
 80022f4:	0018      	movs	r0, r3
 80022f6:	f001 fa2d 	bl	8003754 <uart1_send_str>
			break;
 80022fa:	e0ba      	b.n	8002472 <main+0x63a>
		case SET_VSWR_MAX:
			vswr.max = adc_media[VSWR_i];
 80022fc:	4b62      	ldr	r3, [pc, #392]	; (8002488 <main+0x650>)
 80022fe:	891a      	ldrh	r2, [r3, #8]
 8002300:	2124      	movs	r1, #36	; 0x24
 8002302:	187b      	adds	r3, r7, r1
 8002304:	801a      	strh	r2, [r3, #0]
			m24c64_store_16uvalue(VSWR_MIN_READY_ADDR, vswr.max);
 8002306:	187b      	adds	r3, r7, r1
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	0019      	movs	r1, r3
 800230c:	2013      	movs	r0, #19
 800230e:	f7ff fced 	bl	8001cec <m24c64_store_16uvalue>
			uart1_send_str("Saved VSWR max value\n\r");
 8002312:	4b62      	ldr	r3, [pc, #392]	; (800249c <main+0x664>)
 8002314:	0018      	movs	r0, r3
 8002316:	f001 fa1d 	bl	8003754 <uart1_send_str>
			break;
 800231a:	e0aa      	b.n	8002472 <main+0x63a>
		case SET_VSWR_MIN:
			vswr.min = adc_media[VSWR_i];
 800231c:	4b5a      	ldr	r3, [pc, #360]	; (8002488 <main+0x650>)
 800231e:	891a      	ldrh	r2, [r3, #8]
 8002320:	2124      	movs	r1, #36	; 0x24
 8002322:	187b      	adds	r3, r7, r1
 8002324:	805a      	strh	r2, [r3, #2]
			m24c64_store_16uvalue(VSWR_MAX_READY_ADDR, vswr.min);
 8002326:	187b      	adds	r3, r7, r1
 8002328:	885b      	ldrh	r3, [r3, #2]
 800232a:	0019      	movs	r1, r3
 800232c:	2010      	movs	r0, #16
 800232e:	f7ff fcdd 	bl	8001cec <m24c64_store_16uvalue>
			uart1_send_str("Saved Pout min value\n\r");
 8002332:	4b57      	ldr	r3, [pc, #348]	; (8002490 <main+0x658>)
 8002334:	0018      	movs	r0, r3
 8002336:	f001 fa0d 	bl	8003754 <uart1_send_str>
			break;
 800233a:	e09a      	b.n	8002472 <main+0x63a>
		case QUERY_PARAMETER_STR:
			print_parameters(&uart1, pa);
 800233c:	233c      	movs	r3, #60	; 0x3c
 800233e:	18fb      	adds	r3, r7, r3
 8002340:	484f      	ldr	r0, [pc, #316]	; (8002480 <main+0x648>)
 8002342:	466a      	mov	r2, sp
 8002344:	0011      	movs	r1, r2
 8002346:	001a      	movs	r2, r3
 8002348:	320c      	adds	r2, #12
 800234a:	ca30      	ldmia	r2!, {r4, r5}
 800234c:	c130      	stmia	r1!, {r4, r5}
 800234e:	6819      	ldr	r1, [r3, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f7ff fcfa 	bl	8001d4c <print_parameters>
			break;
 8002358:	e08b      	b.n	8002472 <main+0x63a>
		case QUERY_ADC:
			print_adc(&uart1, adc_media);
 800235a:	4a4b      	ldr	r2, [pc, #300]	; (8002488 <main+0x650>)
 800235c:	4b48      	ldr	r3, [pc, #288]	; (8002480 <main+0x648>)
 800235e:	0011      	movs	r1, r2
 8002360:	0018      	movs	r0, r3
 8002362:	f7ff fd3d 	bl	8001de0 <print_adc>
			break;
 8002366:	e084      	b.n	8002472 <main+0x63a>
		case QUERY_PARAMETER_SIGMA:
			pa.temperature = lm75_read();
 8002368:	f7ff fb60 	bl	8001a2c <lm75_read>
 800236c:	1c02      	adds	r2, r0, #0
 800236e:	243c      	movs	r4, #60	; 0x3c
 8002370:	193b      	adds	r3, r7, r4
 8002372:	609a      	str	r2, [r3, #8]
			pa.pr = max4003_get_dbm(&vswr, adc_media[VSWR_i]);
 8002374:	4b44      	ldr	r3, [pc, #272]	; (8002488 <main+0x650>)
 8002376:	891a      	ldrh	r2, [r3, #8]
 8002378:	2324      	movs	r3, #36	; 0x24
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	0011      	movs	r1, r2
 800237e:	0018      	movs	r0, r3
 8002380:	f000 fcaa 	bl	8002cd8 <max4003_get_dbm>
 8002384:	0003      	movs	r3, r0
 8002386:	b25a      	sxtb	r2, r3
 8002388:	193b      	adds	r3, r7, r4
 800238a:	70da      	strb	r2, [r3, #3]
			pa.pout = ad8363_get_dbm(&pout, adc_media[POUT_i]);
 800238c:	4b3e      	ldr	r3, [pc, #248]	; (8002488 <main+0x650>)
 800238e:	885a      	ldrh	r2, [r3, #2]
 8002390:	232c      	movs	r3, #44	; 0x2c
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	0011      	movs	r1, r2
 8002396:	0018      	movs	r0, r3
 8002398:	f7fe ffa2 	bl	80012e0 <ad8363_get_dbm>
 800239c:	0003      	movs	r3, r0
 800239e:	b25a      	sxtb	r2, r3
 80023a0:	193b      	adds	r3, r7, r4
 80023a2:	709a      	strb	r2, [r3, #2]
			pa.current = ADC_CURRENT_FACTOR * adc_media[CURRENT_i] / 4096.0f;
 80023a4:	4b38      	ldr	r3, [pc, #224]	; (8002488 <main+0x650>)
 80023a6:	88db      	ldrh	r3, [r3, #6]
 80023a8:	0018      	movs	r0, r3
 80023aa:	f7fe feeb 	bl	8001184 <__aeabi_i2f>
 80023ae:	1c03      	adds	r3, r0, #0
 80023b0:	4a3b      	ldr	r2, [pc, #236]	; (80024a0 <main+0x668>)
 80023b2:	1c11      	adds	r1, r2, #0
 80023b4:	1c18      	adds	r0, r3, #0
 80023b6:	f7fe fbdb 	bl	8000b70 <__aeabi_fmul>
 80023ba:	1c03      	adds	r3, r0, #0
 80023bc:	218b      	movs	r1, #139	; 0x8b
 80023be:	05c9      	lsls	r1, r1, #23
 80023c0:	1c18      	adds	r0, r3, #0
 80023c2:	f7fe fa0d 	bl	80007e0 <__aeabi_fdiv>
 80023c6:	1c03      	adds	r3, r0, #0
 80023c8:	1c18      	adds	r0, r3, #0
 80023ca:	f7fe f853 	bl	8000474 <__aeabi_f2uiz>
 80023ce:	0003      	movs	r3, r0
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	193b      	adds	r3, r7, r4
 80023d4:	719a      	strb	r2, [r3, #6]
			pa.gain = get_db_gain(adc_media[GAIN_i]);
 80023d6:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <main+0x650>)
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	0018      	movs	r0, r3
 80023dc:	f000 fa7c 	bl	80028d8 <get_db_gain>
 80023e0:	0003      	movs	r3, r0
 80023e2:	001a      	movs	r2, r3
 80023e4:	193b      	adds	r3, r7, r4
 80023e6:	705a      	strb	r2, [r3, #1]
			pa.vswr = module_vswr_calc(pa.pout, pa.pr);
 80023e8:	193b      	adds	r3, r7, r4
 80023ea:	2202      	movs	r2, #2
 80023ec:	569a      	ldrsb	r2, [r3, r2]
 80023ee:	193b      	adds	r3, r7, r4
 80023f0:	78db      	ldrb	r3, [r3, #3]
 80023f2:	b25b      	sxtb	r3, r3
 80023f4:	0019      	movs	r1, r3
 80023f6:	0010      	movs	r0, r2
 80023f8:	f000 fcec 	bl	8002dd4 <module_vswr_calc>
 80023fc:	1c02      	adds	r2, r0, #0
 80023fe:	193b      	adds	r3, r7, r4
 8002400:	60da      	str	r2, [r3, #12]
			pa.pin = max4003_get_dbm(&pin, adc_media[PIN_i]);
 8002402:	4b21      	ldr	r3, [pc, #132]	; (8002488 <main+0x650>)
 8002404:	895a      	ldrh	r2, [r3, #10]
 8002406:	2328      	movs	r3, #40	; 0x28
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	0011      	movs	r1, r2
 800240c:	0018      	movs	r0, r3
 800240e:	f000 fc63 	bl	8002cd8 <max4003_get_dbm>
 8002412:	0003      	movs	r3, r0
 8002414:	b25a      	sxtb	r2, r3
 8002416:	193b      	adds	r3, r7, r4
 8002418:	715a      	strb	r2, [r3, #5]
			pa.voltage = ADC_VOLTAGE_FACTOR * adc_media[VOLTAGE_i]/ 4096.0f;
 800241a:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <main+0x650>)
 800241c:	889b      	ldrh	r3, [r3, #4]
 800241e:	0018      	movs	r0, r3
 8002420:	f7fe feb0 	bl	8001184 <__aeabi_i2f>
 8002424:	1c03      	adds	r3, r0, #0
 8002426:	4a1f      	ldr	r2, [pc, #124]	; (80024a4 <main+0x66c>)
 8002428:	1c11      	adds	r1, r2, #0
 800242a:	1c18      	adds	r0, r3, #0
 800242c:	f7fe fba0 	bl	8000b70 <__aeabi_fmul>
 8002430:	1c03      	adds	r3, r0, #0
 8002432:	218b      	movs	r1, #139	; 0x8b
 8002434:	05c9      	lsls	r1, r1, #23
 8002436:	1c18      	adds	r0, r3, #0
 8002438:	f7fe f9d2 	bl	80007e0 <__aeabi_fdiv>
 800243c:	1c03      	adds	r3, r0, #0
 800243e:	1c18      	adds	r0, r3, #0
 8002440:	f7fe f818 	bl	8000474 <__aeabi_f2uiz>
 8002444:	0003      	movs	r3, r0
 8002446:	b2da      	uxtb	r2, r3
 8002448:	193b      	adds	r3, r7, r4
 800244a:	711a      	strb	r2, [r3, #4]

			rs485_set_query_frame(&rs485, &pa);
 800244c:	193a      	adds	r2, r7, r4
 800244e:	2430      	movs	r4, #48	; 0x30
 8002450:	193b      	adds	r3, r7, r4
 8002452:	0011      	movs	r1, r2
 8002454:	0018      	movs	r0, r3
 8002456:	f000 fd41 	bl	8002edc <rs485_set_query_frame>
			uart1_send_frame((char*) rs485.frame, 14);
 800245a:	193b      	adds	r3, r7, r4
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	210e      	movs	r1, #14
 8002460:	0018      	movs	r0, r3
 8002462:	f001 f9a5 	bl	80037b0 <uart1_send_frame>
			break;
 8002466:	e004      	b.n	8002472 <main+0x63a>
		//	pout.media = adc_media[POUT_i];
		//	current.media = adc_media[CURRENT_i];
		//	gain.media = adc_media[GAIN_i];
		//	pin.media = adc_media[PIN_i];
		//	voltage.media = adc_media[VOLTAGE_i];
			rs485.cmd = NONE;
 8002468:	2330      	movs	r3, #48	; 0x30
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]

			break;
 8002470:	46c0      	nop			; (mov r8, r8)
		}
		led_enable_kalive(led.sysrp_counter);
 8002472:	2308      	movs	r3, #8
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	0018      	movs	r0, r3
 800247a:	f7ff fa7b 	bl	8001974 <led_enable_kalive>
		rs485.status = rs485_check_frame(&rs485, &uart1);
 800247e:	e5e4      	b.n	800204a <main+0x212>
 8002480:	20000264 	.word	0x20000264
 8002484:	08006b94 	.word	0x08006b94
 8002488:	20000248 	.word	0x20000248
 800248c:	08006ba8 	.word	0x08006ba8
 8002490:	08006bc0 	.word	0x08006bc0
 8002494:	08006bd8 	.word	0x08006bd8
 8002498:	08006bf0 	.word	0x08006bf0
 800249c:	08006c08 	.word	0x08006c08
 80024a0:	43951746 	.word	0x43951746
 80024a4:	3bf2a006 	.word	0x3bf2a006

080024a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024a8:	b590      	push	{r4, r7, lr}
 80024aa:	b093      	sub	sp, #76	; 0x4c
 80024ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ae:	2414      	movs	r4, #20
 80024b0:	193b      	adds	r3, r7, r4
 80024b2:	0018      	movs	r0, r3
 80024b4:	2334      	movs	r3, #52	; 0x34
 80024b6:	001a      	movs	r2, r3
 80024b8:	2100      	movs	r1, #0
 80024ba:	f003 fe23 	bl	8006104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024be:	1d3b      	adds	r3, r7, #4
 80024c0:	0018      	movs	r0, r3
 80024c2:	2310      	movs	r3, #16
 80024c4:	001a      	movs	r2, r3
 80024c6:	2100      	movs	r1, #0
 80024c8:	f003 fe1c 	bl	8006104 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	0018      	movs	r0, r3
 80024d2:	f002 ffd9 	bl	8005488 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80024d6:	193b      	adds	r3, r7, r4
 80024d8:	220a      	movs	r2, #10
 80024da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024dc:	193b      	adds	r3, r7, r4
 80024de:	2280      	movs	r2, #128	; 0x80
 80024e0:	0052      	lsls	r2, r2, #1
 80024e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80024e4:	0021      	movs	r1, r4
 80024e6:	187b      	adds	r3, r7, r1
 80024e8:	2200      	movs	r2, #0
 80024ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024ec:	187b      	adds	r3, r7, r1
 80024ee:	2240      	movs	r2, #64	; 0x40
 80024f0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80024f2:	187b      	adds	r3, r7, r1
 80024f4:	2201      	movs	r2, #1
 80024f6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	2202      	movs	r2, #2
 80024fc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	2202      	movs	r2, #2
 8002502:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002504:	187b      	adds	r3, r7, r1
 8002506:	2210      	movs	r2, #16
 8002508:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 800250a:	187b      	adds	r3, r7, r1
 800250c:	2210      	movs	r2, #16
 800250e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002510:	187b      	adds	r3, r7, r1
 8002512:	2280      	movs	r2, #128	; 0x80
 8002514:	0292      	lsls	r2, r2, #10
 8002516:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002518:	187b      	adds	r3, r7, r1
 800251a:	2280      	movs	r2, #128	; 0x80
 800251c:	0592      	lsls	r2, r2, #22
 800251e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002520:	187b      	adds	r3, r7, r1
 8002522:	0018      	movs	r0, r3
 8002524:	f002 fff0 	bl	8005508 <HAL_RCC_OscConfig>
 8002528:	1e03      	subs	r3, r0, #0
 800252a:	d001      	beq.n	8002530 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800252c:	f000 fbce 	bl	8002ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	2207      	movs	r2, #7
 8002534:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	2202      	movs	r2, #2
 800253a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800253c:	1d3b      	adds	r3, r7, #4
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	2200      	movs	r2, #0
 8002546:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	2102      	movs	r1, #2
 800254c:	0018      	movs	r0, r3
 800254e:	f003 faeb 	bl	8005b28 <HAL_RCC_ClockConfig>
 8002552:	1e03      	subs	r3, r0, #0
 8002554:	d001      	beq.n	800255a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002556:	f000 fbb9 	bl	8002ccc <Error_Handler>
  }
}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	46bd      	mov	sp, r7
 800255e:	b013      	add	sp, #76	; 0x4c
 8002560:	bd90      	pop	{r4, r7, pc}
	...

08002564 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	0018      	movs	r0, r3
 800256e:	230c      	movs	r3, #12
 8002570:	001a      	movs	r2, r3
 8002572:	2100      	movs	r1, #0
 8002574:	f003 fdc6 	bl	8006104 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002578:	4b5e      	ldr	r3, [pc, #376]	; (80026f4 <MX_ADC1_Init+0x190>)
 800257a:	4a5f      	ldr	r2, [pc, #380]	; (80026f8 <MX_ADC1_Init+0x194>)
 800257c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800257e:	4b5d      	ldr	r3, [pc, #372]	; (80026f4 <MX_ADC1_Init+0x190>)
 8002580:	2280      	movs	r2, #128	; 0x80
 8002582:	05d2      	lsls	r2, r2, #23
 8002584:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002586:	4b5b      	ldr	r3, [pc, #364]	; (80026f4 <MX_ADC1_Init+0x190>)
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800258c:	4b59      	ldr	r3, [pc, #356]	; (80026f4 <MX_ADC1_Init+0x190>)
 800258e:	2200      	movs	r2, #0
 8002590:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002592:	4b58      	ldr	r3, [pc, #352]	; (80026f4 <MX_ADC1_Init+0x190>)
 8002594:	2280      	movs	r2, #128	; 0x80
 8002596:	0392      	lsls	r2, r2, #14
 8002598:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800259a:	4b56      	ldr	r3, [pc, #344]	; (80026f4 <MX_ADC1_Init+0x190>)
 800259c:	2204      	movs	r2, #4
 800259e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80025a0:	4b54      	ldr	r3, [pc, #336]	; (80026f4 <MX_ADC1_Init+0x190>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80025a6:	4b53      	ldr	r3, [pc, #332]	; (80026f4 <MX_ADC1_Init+0x190>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80025ac:	4b51      	ldr	r3, [pc, #324]	; (80026f4 <MX_ADC1_Init+0x190>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 7;
 80025b2:	4b50      	ldr	r3, [pc, #320]	; (80026f4 <MX_ADC1_Init+0x190>)
 80025b4:	2207      	movs	r2, #7
 80025b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025b8:	4b4e      	ldr	r3, [pc, #312]	; (80026f4 <MX_ADC1_Init+0x190>)
 80025ba:	2220      	movs	r2, #32
 80025bc:	2100      	movs	r1, #0
 80025be:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025c0:	4b4c      	ldr	r3, [pc, #304]	; (80026f4 <MX_ADC1_Init+0x190>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025c6:	4b4b      	ldr	r3, [pc, #300]	; (80026f4 <MX_ADC1_Init+0x190>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80025cc:	4b49      	ldr	r3, [pc, #292]	; (80026f4 <MX_ADC1_Init+0x190>)
 80025ce:	222c      	movs	r2, #44	; 0x2c
 80025d0:	2100      	movs	r1, #0
 80025d2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80025d4:	4b47      	ldr	r3, [pc, #284]	; (80026f4 <MX_ADC1_Init+0x190>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80025da:	4b46      	ldr	r3, [pc, #280]	; (80026f4 <MX_ADC1_Init+0x190>)
 80025dc:	2200      	movs	r2, #0
 80025de:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80025e0:	4b44      	ldr	r3, [pc, #272]	; (80026f4 <MX_ADC1_Init+0x190>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80025e6:	4b43      	ldr	r3, [pc, #268]	; (80026f4 <MX_ADC1_Init+0x190>)
 80025e8:	223c      	movs	r2, #60	; 0x3c
 80025ea:	2100      	movs	r1, #0
 80025ec:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80025ee:	4b41      	ldr	r3, [pc, #260]	; (80026f4 <MX_ADC1_Init+0x190>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025f4:	4b3f      	ldr	r3, [pc, #252]	; (80026f4 <MX_ADC1_Init+0x190>)
 80025f6:	0018      	movs	r0, r3
 80025f8:	f001 fbae 	bl	8003d58 <HAL_ADC_Init>
 80025fc:	1e03      	subs	r3, r0, #0
 80025fe:	d001      	beq.n	8002604 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8002600:	f000 fb64 	bl	8002ccc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	2201      	movs	r2, #1
 8002608:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	2200      	movs	r2, #0
 800260e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002616:	1d3a      	adds	r2, r7, #4
 8002618:	4b36      	ldr	r3, [pc, #216]	; (80026f4 <MX_ADC1_Init+0x190>)
 800261a:	0011      	movs	r1, r2
 800261c:	0018      	movs	r0, r3
 800261e:	f001 fde1 	bl	80041e4 <HAL_ADC_ConfigChannel>
 8002622:	1e03      	subs	r3, r0, #0
 8002624:	d001      	beq.n	800262a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8002626:	f000 fb51 	bl	8002ccc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	4a33      	ldr	r2, [pc, #204]	; (80026fc <MX_ADC1_Init+0x198>)
 800262e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002630:	1d3b      	adds	r3, r7, #4
 8002632:	2204      	movs	r2, #4
 8002634:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002636:	1d3a      	adds	r2, r7, #4
 8002638:	4b2e      	ldr	r3, [pc, #184]	; (80026f4 <MX_ADC1_Init+0x190>)
 800263a:	0011      	movs	r1, r2
 800263c:	0018      	movs	r0, r3
 800263e:	f001 fdd1 	bl	80041e4 <HAL_ADC_ConfigChannel>
 8002642:	1e03      	subs	r3, r0, #0
 8002644:	d001      	beq.n	800264a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8002646:	f000 fb41 	bl	8002ccc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	4a2c      	ldr	r2, [pc, #176]	; (8002700 <MX_ADC1_Init+0x19c>)
 800264e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002650:	1d3b      	adds	r3, r7, #4
 8002652:	2208      	movs	r2, #8
 8002654:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002656:	1d3a      	adds	r2, r7, #4
 8002658:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <MX_ADC1_Init+0x190>)
 800265a:	0011      	movs	r1, r2
 800265c:	0018      	movs	r0, r3
 800265e:	f001 fdc1 	bl	80041e4 <HAL_ADC_ConfigChannel>
 8002662:	1e03      	subs	r3, r0, #0
 8002664:	d001      	beq.n	800266a <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8002666:	f000 fb31 	bl	8002ccc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800266a:	1d3b      	adds	r3, r7, #4
 800266c:	4a25      	ldr	r2, [pc, #148]	; (8002704 <MX_ADC1_Init+0x1a0>)
 800266e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	220c      	movs	r2, #12
 8002674:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002676:	1d3a      	adds	r2, r7, #4
 8002678:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <MX_ADC1_Init+0x190>)
 800267a:	0011      	movs	r1, r2
 800267c:	0018      	movs	r0, r3
 800267e:	f001 fdb1 	bl	80041e4 <HAL_ADC_ConfigChannel>
 8002682:	1e03      	subs	r3, r0, #0
 8002684:	d001      	beq.n	800268a <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8002686:	f000 fb21 	bl	8002ccc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	4a1e      	ldr	r2, [pc, #120]	; (8002708 <MX_ADC1_Init+0x1a4>)
 800268e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	2210      	movs	r2, #16
 8002694:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002696:	1d3a      	adds	r2, r7, #4
 8002698:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <MX_ADC1_Init+0x190>)
 800269a:	0011      	movs	r1, r2
 800269c:	0018      	movs	r0, r3
 800269e:	f001 fda1 	bl	80041e4 <HAL_ADC_ConfigChannel>
 80026a2:	1e03      	subs	r3, r0, #0
 80026a4:	d001      	beq.n	80026aa <MX_ADC1_Init+0x146>
  {
    Error_Handler();
 80026a6:	f000 fb11 	bl	8002ccc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80026aa:	1d3b      	adds	r3, r7, #4
 80026ac:	4a17      	ldr	r2, [pc, #92]	; (800270c <MX_ADC1_Init+0x1a8>)
 80026ae:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	2214      	movs	r2, #20
 80026b4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026b6:	1d3a      	adds	r2, r7, #4
 80026b8:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <MX_ADC1_Init+0x190>)
 80026ba:	0011      	movs	r1, r2
 80026bc:	0018      	movs	r0, r3
 80026be:	f001 fd91 	bl	80041e4 <HAL_ADC_ConfigChannel>
 80026c2:	1e03      	subs	r3, r0, #0
 80026c4:	d001      	beq.n	80026ca <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 80026c6:	f000 fb01 	bl	8002ccc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	4a10      	ldr	r2, [pc, #64]	; (8002710 <MX_ADC1_Init+0x1ac>)
 80026ce:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	2218      	movs	r2, #24
 80026d4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026d6:	1d3a      	adds	r2, r7, #4
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <MX_ADC1_Init+0x190>)
 80026da:	0011      	movs	r1, r2
 80026dc:	0018      	movs	r0, r3
 80026de:	f001 fd81 	bl	80041e4 <HAL_ADC_ConfigChannel>
 80026e2:	1e03      	subs	r3, r0, #0
 80026e4:	d001      	beq.n	80026ea <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 80026e6:	f000 faf1 	bl	8002ccc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b004      	add	sp, #16
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	2000008c 	.word	0x2000008c
 80026f8:	40012400 	.word	0x40012400
 80026fc:	04000002 	.word	0x04000002
 8002700:	08000004 	.word	0x08000004
 8002704:	10000010 	.word	0x10000010
 8002708:	14000020 	.word	0x14000020
 800270c:	18000040 	.word	0x18000040
 8002710:	b0001000 	.word	0xb0001000

08002714 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800271a:	4b0c      	ldr	r3, [pc, #48]	; (800274c <MX_DMA_Init+0x38>)
 800271c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <MX_DMA_Init+0x38>)
 8002720:	2101      	movs	r1, #1
 8002722:	430a      	orrs	r2, r1
 8002724:	639a      	str	r2, [r3, #56]	; 0x38
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <MX_DMA_Init+0x38>)
 8002728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272a:	2201      	movs	r2, #1
 800272c:	4013      	ands	r3, r2
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002732:	2200      	movs	r2, #0
 8002734:	2100      	movs	r1, #0
 8002736:	2009      	movs	r0, #9
 8002738:	f002 faa0 	bl	8004c7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800273c:	2009      	movs	r0, #9
 800273e:	f002 fab2 	bl	8004ca6 <HAL_NVIC_EnableIRQ>

}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	46bd      	mov	sp, r7
 8002746:	b002      	add	sp, #8
 8002748:	bd80      	pop	{r7, pc}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	40021000 	.word	0x40021000

08002750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002756:	240c      	movs	r4, #12
 8002758:	193b      	adds	r3, r7, r4
 800275a:	0018      	movs	r0, r3
 800275c:	2314      	movs	r3, #20
 800275e:	001a      	movs	r2, r3
 8002760:	2100      	movs	r1, #0
 8002762:	f003 fccf 	bl	8006104 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002766:	4b58      	ldr	r3, [pc, #352]	; (80028c8 <MX_GPIO_Init+0x178>)
 8002768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800276a:	4b57      	ldr	r3, [pc, #348]	; (80028c8 <MX_GPIO_Init+0x178>)
 800276c:	2102      	movs	r1, #2
 800276e:	430a      	orrs	r2, r1
 8002770:	635a      	str	r2, [r3, #52]	; 0x34
 8002772:	4b55      	ldr	r3, [pc, #340]	; (80028c8 <MX_GPIO_Init+0x178>)
 8002774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002776:	2202      	movs	r2, #2
 8002778:	4013      	ands	r3, r2
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800277e:	4b52      	ldr	r3, [pc, #328]	; (80028c8 <MX_GPIO_Init+0x178>)
 8002780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002782:	4b51      	ldr	r3, [pc, #324]	; (80028c8 <MX_GPIO_Init+0x178>)
 8002784:	2104      	movs	r1, #4
 8002786:	430a      	orrs	r2, r1
 8002788:	635a      	str	r2, [r3, #52]	; 0x34
 800278a:	4b4f      	ldr	r3, [pc, #316]	; (80028c8 <MX_GPIO_Init+0x178>)
 800278c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278e:	2204      	movs	r2, #4
 8002790:	4013      	ands	r3, r2
 8002792:	607b      	str	r3, [r7, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002796:	4b4c      	ldr	r3, [pc, #304]	; (80028c8 <MX_GPIO_Init+0x178>)
 8002798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800279a:	4b4b      	ldr	r3, [pc, #300]	; (80028c8 <MX_GPIO_Init+0x178>)
 800279c:	2101      	movs	r1, #1
 800279e:	430a      	orrs	r2, r1
 80027a0:	635a      	str	r2, [r3, #52]	; 0x34
 80027a2:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <MX_GPIO_Init+0x178>)
 80027a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a6:	2201      	movs	r2, #1
 80027a8:	4013      	ands	r3, r2
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA_HAB_Pin|LE_ATT_Pin|TEMP_HIGH_Pin|TEMP_OK_Pin
 80027ae:	4947      	ldr	r1, [pc, #284]	; (80028cc <MX_GPIO_Init+0x17c>)
 80027b0:	23a0      	movs	r3, #160	; 0xa0
 80027b2:	05db      	lsls	r3, r3, #23
 80027b4:	2200      	movs	r2, #0
 80027b6:	0018      	movs	r0, r3
 80027b8:	f002 fe48 	bl	800544c <HAL_GPIO_WritePin>
                          |CURR_H_Pin|CURR_N_Pin|CURR_L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_ATT_Pin|DATA_ATT_Pin|DE_485_Pin, GPIO_PIN_RESET);
 80027bc:	4b44      	ldr	r3, [pc, #272]	; (80028d0 <MX_GPIO_Init+0x180>)
 80027be:	2200      	movs	r2, #0
 80027c0:	2123      	movs	r1, #35	; 0x23
 80027c2:	0018      	movs	r0, r3
 80027c4:	f002 fe42 	bl	800544c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80027c8:	4b42      	ldr	r3, [pc, #264]	; (80028d4 <MX_GPIO_Init+0x184>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	2140      	movs	r1, #64	; 0x40
 80027ce:	0018      	movs	r0, r3
 80027d0:	f002 fe3c 	bl	800544c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80027d4:	193b      	adds	r3, r7, r4
 80027d6:	22c0      	movs	r2, #192	; 0xc0
 80027d8:	0092      	lsls	r2, r2, #2
 80027da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027dc:	193b      	adds	r3, r7, r4
 80027de:	2212      	movs	r2, #18
 80027e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	193b      	adds	r3, r7, r4
 80027e4:	2200      	movs	r2, #0
 80027e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e8:	193b      	adds	r3, r7, r4
 80027ea:	2200      	movs	r2, #0
 80027ec:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80027ee:	193b      	adds	r3, r7, r4
 80027f0:	2206      	movs	r2, #6
 80027f2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f4:	193b      	adds	r3, r7, r4
 80027f6:	4a36      	ldr	r2, [pc, #216]	; (80028d0 <MX_GPIO_Init+0x180>)
 80027f8:	0019      	movs	r1, r3
 80027fa:	0010      	movs	r0, r2
 80027fc:	f002 fcc2 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_INT_Pin */
  GPIO_InitStruct.Pin = TEMP_INT_Pin;
 8002800:	0021      	movs	r1, r4
 8002802:	187b      	adds	r3, r7, r1
 8002804:	2280      	movs	r2, #128	; 0x80
 8002806:	01d2      	lsls	r2, r2, #7
 8002808:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800280a:	000c      	movs	r4, r1
 800280c:	193b      	adds	r3, r7, r4
 800280e:	2200      	movs	r2, #0
 8002810:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	193b      	adds	r3, r7, r4
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TEMP_INT_GPIO_Port, &GPIO_InitStruct);
 8002818:	193b      	adds	r3, r7, r4
 800281a:	4a2e      	ldr	r2, [pc, #184]	; (80028d4 <MX_GPIO_Init+0x184>)
 800281c:	0019      	movs	r1, r3
 800281e:	0010      	movs	r0, r2
 8002820:	f002 fcb0 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA_HAB_Pin LE_ATT_Pin TEMP_HIGH_Pin TEMP_OK_Pin
                           CURR_H_Pin CURR_N_Pin CURR_L_Pin */
  GPIO_InitStruct.Pin = PA_HAB_Pin|LE_ATT_Pin|TEMP_HIGH_Pin|TEMP_OK_Pin
 8002824:	193b      	adds	r3, r7, r4
 8002826:	4a29      	ldr	r2, [pc, #164]	; (80028cc <MX_GPIO_Init+0x17c>)
 8002828:	601a      	str	r2, [r3, #0]
                          |CURR_H_Pin|CURR_N_Pin|CURR_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800282a:	193b      	adds	r3, r7, r4
 800282c:	2201      	movs	r2, #1
 800282e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	193b      	adds	r3, r7, r4
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002836:	193b      	adds	r3, r7, r4
 8002838:	2200      	movs	r2, #0
 800283a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283c:	193a      	adds	r2, r7, r4
 800283e:	23a0      	movs	r3, #160	; 0xa0
 8002840:	05db      	lsls	r3, r3, #23
 8002842:	0011      	movs	r1, r2
 8002844:	0018      	movs	r0, r3
 8002846:	f002 fc9d 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_ATT_Pin DATA_ATT_Pin DE_485_Pin */
  GPIO_InitStruct.Pin = CLK_ATT_Pin|DATA_ATT_Pin|DE_485_Pin;
 800284a:	193b      	adds	r3, r7, r4
 800284c:	2223      	movs	r2, #35	; 0x23
 800284e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002850:	193b      	adds	r3, r7, r4
 8002852:	2201      	movs	r2, #1
 8002854:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	193b      	adds	r3, r7, r4
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285c:	193b      	adds	r3, r7, r4
 800285e:	2200      	movs	r2, #0
 8002860:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002862:	193b      	adds	r3, r7, r4
 8002864:	4a1a      	ldr	r2, [pc, #104]	; (80028d0 <MX_GPIO_Init+0x180>)
 8002866:	0019      	movs	r1, r3
 8002868:	0010      	movs	r0, r2
 800286a:	f002 fc8b 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800286e:	193b      	adds	r3, r7, r4
 8002870:	2240      	movs	r2, #64	; 0x40
 8002872:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002874:	193b      	adds	r3, r7, r4
 8002876:	2201      	movs	r2, #1
 8002878:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	193b      	adds	r3, r7, r4
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002880:	193b      	adds	r3, r7, r4
 8002882:	2200      	movs	r2, #0
 8002884:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002886:	193b      	adds	r3, r7, r4
 8002888:	4a12      	ldr	r2, [pc, #72]	; (80028d4 <MX_GPIO_Init+0x184>)
 800288a:	0019      	movs	r1, r3
 800288c:	0010      	movs	r0, r2
 800288e:	f002 fc79 	bl	8005184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002892:	0021      	movs	r1, r4
 8002894:	187b      	adds	r3, r7, r1
 8002896:	22c0      	movs	r2, #192	; 0xc0
 8002898:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	187b      	adds	r3, r7, r1
 800289c:	2202      	movs	r2, #2
 800289e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	187b      	adds	r3, r7, r1
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a6:	187b      	adds	r3, r7, r1
 80028a8:	2200      	movs	r2, #0
 80028aa:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80028ac:	187b      	adds	r3, r7, r1
 80028ae:	2200      	movs	r2, #0
 80028b0:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b2:	187b      	adds	r3, r7, r1
 80028b4:	4a06      	ldr	r2, [pc, #24]	; (80028d0 <MX_GPIO_Init+0x180>)
 80028b6:	0019      	movs	r1, r3
 80028b8:	0010      	movs	r0, r2
 80028ba:	f002 fc63 	bl	8005184 <HAL_GPIO_Init>

}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b009      	add	sp, #36	; 0x24
 80028c4:	bd90      	pop	{r4, r7, pc}
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	40021000 	.word	0x40021000
 80028cc:	00001f88 	.word	0x00001f88
 80028d0:	50000400 	.word	0x50000400
 80028d4:	50000800 	.word	0x50000800

080028d8 <get_db_gain>:

/* USER CODE BEGIN 4 */

uint8_t get_db_gain(uint16_t adc_gain) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	0002      	movs	r2, r0
 80028e0:	1dbb      	adds	r3, r7, #6
 80028e2:	801a      	strh	r2, [r3, #0]

	if (adc_gain >= 3781)
 80028e4:	1dbb      	adds	r3, r7, #6
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	4a9e      	ldr	r2, [pc, #632]	; (8002b64 <get_db_gain+0x28c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <get_db_gain+0x1a>
		return 45;
 80028ee:	232d      	movs	r3, #45	; 0x2d
 80028f0:	e133      	b.n	8002b5a <get_db_gain+0x282>
	else if (adc_gain < 3781 && adc_gain >= 1515)
 80028f2:	1dbb      	adds	r3, r7, #6
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	4a9b      	ldr	r2, [pc, #620]	; (8002b64 <get_db_gain+0x28c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d81a      	bhi.n	8002932 <get_db_gain+0x5a>
 80028fc:	1dbb      	adds	r3, r7, #6
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	4a99      	ldr	r2, [pc, #612]	; (8002b68 <get_db_gain+0x290>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d915      	bls.n	8002932 <get_db_gain+0x5a>
		return 0.0022f * adc_gain + 36.6571f;
 8002906:	1dbb      	adds	r3, r7, #6
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	0018      	movs	r0, r3
 800290c:	f7fe fc3a 	bl	8001184 <__aeabi_i2f>
 8002910:	1c03      	adds	r3, r0, #0
 8002912:	4996      	ldr	r1, [pc, #600]	; (8002b6c <get_db_gain+0x294>)
 8002914:	1c18      	adds	r0, r3, #0
 8002916:	f7fe f92b 	bl	8000b70 <__aeabi_fmul>
 800291a:	1c03      	adds	r3, r0, #0
 800291c:	4994      	ldr	r1, [pc, #592]	; (8002b70 <get_db_gain+0x298>)
 800291e:	1c18      	adds	r0, r3, #0
 8002920:	f7fd fdc0 	bl	80004a4 <__aeabi_fadd>
 8002924:	1c03      	adds	r3, r0, #0
 8002926:	1c18      	adds	r0, r3, #0
 8002928:	f7fd fda4 	bl	8000474 <__aeabi_f2uiz>
 800292c:	0003      	movs	r3, r0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	e113      	b.n	8002b5a <get_db_gain+0x282>
	else if (adc_gain < 1515 && adc_gain >= 1188)
 8002932:	1dbb      	adds	r3, r7, #6
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	4a8c      	ldr	r2, [pc, #560]	; (8002b68 <get_db_gain+0x290>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d81a      	bhi.n	8002972 <get_db_gain+0x9a>
 800293c:	1dbb      	adds	r3, r7, #6
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	4a8c      	ldr	r2, [pc, #560]	; (8002b74 <get_db_gain+0x29c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d915      	bls.n	8002972 <get_db_gain+0x9a>
		return (0.0153f * adc_gain + 16.8349f);
 8002946:	1dbb      	adds	r3, r7, #6
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	0018      	movs	r0, r3
 800294c:	f7fe fc1a 	bl	8001184 <__aeabi_i2f>
 8002950:	1c03      	adds	r3, r0, #0
 8002952:	4989      	ldr	r1, [pc, #548]	; (8002b78 <get_db_gain+0x2a0>)
 8002954:	1c18      	adds	r0, r3, #0
 8002956:	f7fe f90b 	bl	8000b70 <__aeabi_fmul>
 800295a:	1c03      	adds	r3, r0, #0
 800295c:	4987      	ldr	r1, [pc, #540]	; (8002b7c <get_db_gain+0x2a4>)
 800295e:	1c18      	adds	r0, r3, #0
 8002960:	f7fd fda0 	bl	80004a4 <__aeabi_fadd>
 8002964:	1c03      	adds	r3, r0, #0
 8002966:	1c18      	adds	r0, r3, #0
 8002968:	f7fd fd84 	bl	8000474 <__aeabi_f2uiz>
 800296c:	0003      	movs	r3, r0
 800296e:	b2db      	uxtb	r3, r3
 8002970:	e0f3      	b.n	8002b5a <get_db_gain+0x282>
	else if (adc_gain < 1188 && adc_gain >= 1005)
 8002972:	1dbb      	adds	r3, r7, #6
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	4a7f      	ldr	r2, [pc, #508]	; (8002b74 <get_db_gain+0x29c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d81b      	bhi.n	80029b4 <get_db_gain+0xdc>
 800297c:	1dbb      	adds	r3, r7, #6
 800297e:	881a      	ldrh	r2, [r3, #0]
 8002980:	23fb      	movs	r3, #251	; 0xfb
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	429a      	cmp	r2, r3
 8002986:	d915      	bls.n	80029b4 <get_db_gain+0xdc>
		return (0.0273f * adc_gain + 2.540f);
 8002988:	1dbb      	adds	r3, r7, #6
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	0018      	movs	r0, r3
 800298e:	f7fe fbf9 	bl	8001184 <__aeabi_i2f>
 8002992:	1c03      	adds	r3, r0, #0
 8002994:	497a      	ldr	r1, [pc, #488]	; (8002b80 <get_db_gain+0x2a8>)
 8002996:	1c18      	adds	r0, r3, #0
 8002998:	f7fe f8ea 	bl	8000b70 <__aeabi_fmul>
 800299c:	1c03      	adds	r3, r0, #0
 800299e:	4979      	ldr	r1, [pc, #484]	; (8002b84 <get_db_gain+0x2ac>)
 80029a0:	1c18      	adds	r0, r3, #0
 80029a2:	f7fd fd7f 	bl	80004a4 <__aeabi_fadd>
 80029a6:	1c03      	adds	r3, r0, #0
 80029a8:	1c18      	adds	r0, r3, #0
 80029aa:	f7fd fd63 	bl	8000474 <__aeabi_f2uiz>
 80029ae:	0003      	movs	r3, r0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	e0d2      	b.n	8002b5a <get_db_gain+0x282>
	else if (adc_gain < 1005 && adc_gain >= 897)
 80029b4:	1dbb      	adds	r3, r7, #6
 80029b6:	881a      	ldrh	r2, [r3, #0]
 80029b8:	23fb      	movs	r3, #251	; 0xfb
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	429a      	cmp	r2, r3
 80029be:	d81b      	bhi.n	80029f8 <get_db_gain+0x120>
 80029c0:	1dbb      	adds	r3, r7, #6
 80029c2:	881a      	ldrh	r2, [r3, #0]
 80029c4:	23e0      	movs	r3, #224	; 0xe0
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d915      	bls.n	80029f8 <get_db_gain+0x120>
		return (0.0463f * adc_gain - 16.5278f);
 80029cc:	1dbb      	adds	r3, r7, #6
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7fe fbd7 	bl	8001184 <__aeabi_i2f>
 80029d6:	1c03      	adds	r3, r0, #0
 80029d8:	496b      	ldr	r1, [pc, #428]	; (8002b88 <get_db_gain+0x2b0>)
 80029da:	1c18      	adds	r0, r3, #0
 80029dc:	f7fe f8c8 	bl	8000b70 <__aeabi_fmul>
 80029e0:	1c03      	adds	r3, r0, #0
 80029e2:	496a      	ldr	r1, [pc, #424]	; (8002b8c <get_db_gain+0x2b4>)
 80029e4:	1c18      	adds	r0, r3, #0
 80029e6:	f7fe f9e9 	bl	8000dbc <__aeabi_fsub>
 80029ea:	1c03      	adds	r3, r0, #0
 80029ec:	1c18      	adds	r0, r3, #0
 80029ee:	f7fd fd41 	bl	8000474 <__aeabi_f2uiz>
 80029f2:	0003      	movs	r3, r0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	e0b0      	b.n	8002b5a <get_db_gain+0x282>
	else if (adc_gain < 897 && adc_gain >= 825)
 80029f8:	1dbb      	adds	r3, r7, #6
 80029fa:	881a      	ldrh	r2, [r3, #0]
 80029fc:	23e0      	movs	r3, #224	; 0xe0
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d81b      	bhi.n	8002a3c <get_db_gain+0x164>
 8002a04:	1dbb      	adds	r3, r7, #6
 8002a06:	881a      	ldrh	r2, [r3, #0]
 8002a08:	23ce      	movs	r3, #206	; 0xce
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d915      	bls.n	8002a3c <get_db_gain+0x164>
		return (0.0694f * adc_gain - 37.2917f);
 8002a10:	1dbb      	adds	r3, r7, #6
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	0018      	movs	r0, r3
 8002a16:	f7fe fbb5 	bl	8001184 <__aeabi_i2f>
 8002a1a:	1c03      	adds	r3, r0, #0
 8002a1c:	495c      	ldr	r1, [pc, #368]	; (8002b90 <get_db_gain+0x2b8>)
 8002a1e:	1c18      	adds	r0, r3, #0
 8002a20:	f7fe f8a6 	bl	8000b70 <__aeabi_fmul>
 8002a24:	1c03      	adds	r3, r0, #0
 8002a26:	495b      	ldr	r1, [pc, #364]	; (8002b94 <get_db_gain+0x2bc>)
 8002a28:	1c18      	adds	r0, r3, #0
 8002a2a:	f7fe f9c7 	bl	8000dbc <__aeabi_fsub>
 8002a2e:	1c03      	adds	r3, r0, #0
 8002a30:	1c18      	adds	r0, r3, #0
 8002a32:	f7fd fd1f 	bl	8000474 <__aeabi_f2uiz>
 8002a36:	0003      	movs	r3, r0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	e08e      	b.n	8002b5a <get_db_gain+0x282>
	else if (adc_gain < 825 && adc_gain >= 776)
 8002a3c:	1dbb      	adds	r3, r7, #6
 8002a3e:	881a      	ldrh	r2, [r3, #0]
 8002a40:	23ce      	movs	r3, #206	; 0xce
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d81b      	bhi.n	8002a80 <get_db_gain+0x1a8>
 8002a48:	1dbb      	adds	r3, r7, #6
 8002a4a:	881a      	ldrh	r2, [r3, #0]
 8002a4c:	23c2      	movs	r3, #194	; 0xc2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d315      	bcc.n	8002a80 <get_db_gain+0x1a8>
		return (0.1020f * adc_gain - 64.1837f);
 8002a54:	1dbb      	adds	r3, r7, #6
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f7fe fb93 	bl	8001184 <__aeabi_i2f>
 8002a5e:	1c03      	adds	r3, r0, #0
 8002a60:	494d      	ldr	r1, [pc, #308]	; (8002b98 <get_db_gain+0x2c0>)
 8002a62:	1c18      	adds	r0, r3, #0
 8002a64:	f7fe f884 	bl	8000b70 <__aeabi_fmul>
 8002a68:	1c03      	adds	r3, r0, #0
 8002a6a:	494c      	ldr	r1, [pc, #304]	; (8002b9c <get_db_gain+0x2c4>)
 8002a6c:	1c18      	adds	r0, r3, #0
 8002a6e:	f7fe f9a5 	bl	8000dbc <__aeabi_fsub>
 8002a72:	1c03      	adds	r3, r0, #0
 8002a74:	1c18      	adds	r0, r3, #0
 8002a76:	f7fd fcfd 	bl	8000474 <__aeabi_f2uiz>
 8002a7a:	0003      	movs	r3, r0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	e06c      	b.n	8002b5a <get_db_gain+0x282>
	else if (adc_gain < 776 && adc_gain >= 746)
 8002a80:	1dbb      	adds	r3, r7, #6
 8002a82:	881a      	ldrh	r2, [r3, #0]
 8002a84:	23c2      	movs	r3, #194	; 0xc2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d21a      	bcs.n	8002ac2 <get_db_gain+0x1ea>
 8002a8c:	1dbb      	adds	r3, r7, #6
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	4a43      	ldr	r2, [pc, #268]	; (8002ba0 <get_db_gain+0x2c8>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d915      	bls.n	8002ac2 <get_db_gain+0x1ea>
		return (0.1667f * adc_gain - 114.333f);
 8002a96:	1dbb      	adds	r3, r7, #6
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f7fe fb72 	bl	8001184 <__aeabi_i2f>
 8002aa0:	1c03      	adds	r3, r0, #0
 8002aa2:	4940      	ldr	r1, [pc, #256]	; (8002ba4 <get_db_gain+0x2cc>)
 8002aa4:	1c18      	adds	r0, r3, #0
 8002aa6:	f7fe f863 	bl	8000b70 <__aeabi_fmul>
 8002aaa:	1c03      	adds	r3, r0, #0
 8002aac:	493e      	ldr	r1, [pc, #248]	; (8002ba8 <get_db_gain+0x2d0>)
 8002aae:	1c18      	adds	r0, r3, #0
 8002ab0:	f7fe f984 	bl	8000dbc <__aeabi_fsub>
 8002ab4:	1c03      	adds	r3, r0, #0
 8002ab6:	1c18      	adds	r0, r3, #0
 8002ab8:	f7fd fcdc 	bl	8000474 <__aeabi_f2uiz>
 8002abc:	0003      	movs	r3, r0
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	e04b      	b.n	8002b5a <get_db_gain+0x282>
	else if (adc_gain < 746 && adc_gain >= 733)
 8002ac2:	1dbb      	adds	r3, r7, #6
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	4a36      	ldr	r2, [pc, #216]	; (8002ba0 <get_db_gain+0x2c8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d81b      	bhi.n	8002b04 <get_db_gain+0x22c>
 8002acc:	1dbb      	adds	r3, r7, #6
 8002ace:	881a      	ldrh	r2, [r3, #0]
 8002ad0:	23b7      	movs	r3, #183	; 0xb7
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d915      	bls.n	8002b04 <get_db_gain+0x22c>
		return (0.3846f * adc_gain - 276.9231f);
 8002ad8:	1dbb      	adds	r3, r7, #6
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	0018      	movs	r0, r3
 8002ade:	f7fe fb51 	bl	8001184 <__aeabi_i2f>
 8002ae2:	1c03      	adds	r3, r0, #0
 8002ae4:	4931      	ldr	r1, [pc, #196]	; (8002bac <get_db_gain+0x2d4>)
 8002ae6:	1c18      	adds	r0, r3, #0
 8002ae8:	f7fe f842 	bl	8000b70 <__aeabi_fmul>
 8002aec:	1c03      	adds	r3, r0, #0
 8002aee:	4930      	ldr	r1, [pc, #192]	; (8002bb0 <get_db_gain+0x2d8>)
 8002af0:	1c18      	adds	r0, r3, #0
 8002af2:	f7fe f963 	bl	8000dbc <__aeabi_fsub>
 8002af6:	1c03      	adds	r3, r0, #0
 8002af8:	1c18      	adds	r0, r3, #0
 8002afa:	f7fd fcbb 	bl	8000474 <__aeabi_f2uiz>
 8002afe:	0003      	movs	r3, r0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	e02a      	b.n	8002b5a <get_db_gain+0x282>
	else if (adc_gain < 733 && adc_gain >= 725)
 8002b04:	1dbb      	adds	r3, r7, #6
 8002b06:	881a      	ldrh	r2, [r3, #0]
 8002b08:	23b7      	movs	r3, #183	; 0xb7
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d81b      	bhi.n	8002b48 <get_db_gain+0x270>
 8002b10:	1dbb      	adds	r3, r7, #6
 8002b12:	881a      	ldrh	r2, [r3, #0]
 8002b14:	23b5      	movs	r3, #181	; 0xb5
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d915      	bls.n	8002b48 <get_db_gain+0x270>
		return (0.625f * adc_gain - 453.125f);
 8002b1c:	1dbb      	adds	r3, r7, #6
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	0018      	movs	r0, r3
 8002b22:	f7fe fb2f 	bl	8001184 <__aeabi_i2f>
 8002b26:	1c03      	adds	r3, r0, #0
 8002b28:	4922      	ldr	r1, [pc, #136]	; (8002bb4 <get_db_gain+0x2dc>)
 8002b2a:	1c18      	adds	r0, r3, #0
 8002b2c:	f7fe f820 	bl	8000b70 <__aeabi_fmul>
 8002b30:	1c03      	adds	r3, r0, #0
 8002b32:	4921      	ldr	r1, [pc, #132]	; (8002bb8 <get_db_gain+0x2e0>)
 8002b34:	1c18      	adds	r0, r3, #0
 8002b36:	f7fe f941 	bl	8000dbc <__aeabi_fsub>
 8002b3a:	1c03      	adds	r3, r0, #0
 8002b3c:	1c18      	adds	r0, r3, #0
 8002b3e:	f7fd fc99 	bl	8000474 <__aeabi_f2uiz>
 8002b42:	0003      	movs	r3, r0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	e008      	b.n	8002b5a <get_db_gain+0x282>
	else if (adc_gain < 725)
 8002b48:	1dbb      	adds	r3, r7, #6
 8002b4a:	881a      	ldrh	r2, [r3, #0]
 8002b4c:	23b5      	movs	r3, #181	; 0xb5
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d801      	bhi.n	8002b58 <get_db_gain+0x280>
		return 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	e000      	b.n	8002b5a <get_db_gain+0x282>
	return 0;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b002      	add	sp, #8
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	00000ec4 	.word	0x00000ec4
 8002b68:	000005ea 	.word	0x000005ea
 8002b6c:	3b102de0 	.word	0x3b102de0
 8002b70:	4212a0df 	.word	0x4212a0df
 8002b74:	000004a3 	.word	0x000004a3
 8002b78:	3c7aacda 	.word	0x3c7aacda
 8002b7c:	4186ade0 	.word	0x4186ade0
 8002b80:	3cdfa440 	.word	0x3cdfa440
 8002b84:	40228f5c 	.word	0x40228f5c
 8002b88:	3d3da512 	.word	0x3d3da512
 8002b8c:	418438ef 	.word	0x418438ef
 8002b90:	3d8e2196 	.word	0x3d8e2196
 8002b94:	42152ab3 	.word	0x42152ab3
 8002b98:	3dd0e560 	.word	0x3dd0e560
 8002b9c:	42805e0e 	.word	0x42805e0e
 8002ba0:	000002e9 	.word	0x000002e9
 8002ba4:	3e2ab368 	.word	0x3e2ab368
 8002ba8:	42e4aa7f 	.word	0x42e4aa7f
 8002bac:	3ec4ea4b 	.word	0x3ec4ea4b
 8002bb0:	438a7628 	.word	0x438a7628
 8002bb4:	3f200000 	.word	0x3f200000
 8002bb8:	43e29000 	.word	0x43e29000

08002bbc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < ADC_CHANNEL_NUM; i++) {
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	e04e      	b.n	8002c68 <HAL_ADC_ConvCpltCallback+0xac>
		sum[i] -= adc_values[i][adc_counter];
 8002bca:	4b34      	ldr	r3, [pc, #208]	; (8002c9c <HAL_ADC_ConvCpltCallback+0xe0>)
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	0052      	lsls	r2, r2, #1
 8002bd0:	5ad1      	ldrh	r1, [r2, r3]
 8002bd2:	4b33      	ldr	r3, [pc, #204]	; (8002ca0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	001c      	movs	r4, r3
 8002bd8:	4832      	ldr	r0, [pc, #200]	; (8002ca4 <HAL_ADC_ConvCpltCallback+0xe8>)
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	0013      	movs	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	189b      	adds	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	191b      	adds	r3, r3, r4
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	5a1b      	ldrh	r3, [r3, r0]
 8002bea:	1acb      	subs	r3, r1, r3
 8002bec:	b299      	uxth	r1, r3
 8002bee:	4b2b      	ldr	r3, [pc, #172]	; (8002c9c <HAL_ADC_ConvCpltCallback+0xe0>)
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	0052      	lsls	r2, r2, #1
 8002bf4:	52d1      	strh	r1, [r2, r3]
		adc_values[i][adc_counter] = adcResultsDMA[i];
 8002bf6:	4b2a      	ldr	r3, [pc, #168]	; (8002ca0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	001c      	movs	r4, r3
 8002bfc:	4b2a      	ldr	r3, [pc, #168]	; (8002ca8 <HAL_ADC_ConvCpltCallback+0xec>)
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	0052      	lsls	r2, r2, #1
 8002c02:	5ad3      	ldrh	r3, [r2, r3]
 8002c04:	b298      	uxth	r0, r3
 8002c06:	4927      	ldr	r1, [pc, #156]	; (8002ca4 <HAL_ADC_ConvCpltCallback+0xe8>)
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	0013      	movs	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	189b      	adds	r3, r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	191b      	adds	r3, r3, r4
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	1c02      	adds	r2, r0, #0
 8002c18:	525a      	strh	r2, [r3, r1]
		sum[i] += adc_values[i][adc_counter];
 8002c1a:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <HAL_ADC_ConvCpltCallback+0xe0>)
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	0052      	lsls	r2, r2, #1
 8002c20:	5ad1      	ldrh	r1, [r2, r3]
 8002c22:	4b1f      	ldr	r3, [pc, #124]	; (8002ca0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	001c      	movs	r4, r3
 8002c28:	481e      	ldr	r0, [pc, #120]	; (8002ca4 <HAL_ADC_ConvCpltCallback+0xe8>)
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	0013      	movs	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	189b      	adds	r3, r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	191b      	adds	r3, r3, r4
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	5a1b      	ldrh	r3, [r3, r0]
 8002c3a:	18cb      	adds	r3, r1, r3
 8002c3c:	b299      	uxth	r1, r3
 8002c3e:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <HAL_ADC_ConvCpltCallback+0xe0>)
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	0052      	lsls	r2, r2, #1
 8002c44:	52d1      	strh	r1, [r2, r3]
		adc_media[i] = sum[i] / MEDIA_NUM;
 8002c46:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <HAL_ADC_ConvCpltCallback+0xe0>)
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	0052      	lsls	r2, r2, #1
 8002c4c:	5ad3      	ldrh	r3, [r2, r3]
 8002c4e:	2114      	movs	r1, #20
 8002c50:	0018      	movs	r0, r3
 8002c52:	f7fd fa5f 	bl	8000114 <__udivsi3>
 8002c56:	0003      	movs	r3, r0
 8002c58:	b299      	uxth	r1, r3
 8002c5a:	4b14      	ldr	r3, [pc, #80]	; (8002cac <HAL_ADC_ConvCpltCallback+0xf0>)
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	0052      	lsls	r2, r2, #1
 8002c60:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < ADC_CHANNEL_NUM; i++) {
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	3301      	adds	r3, #1
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b05      	cmp	r3, #5
 8002c6c:	ddad      	ble.n	8002bca <HAL_ADC_ConvCpltCallback+0xe>
	}
	adc_counter++;
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	3301      	adds	r3, #1
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8002c78:	701a      	strb	r2, [r3, #0]

	if (adc_counter >= MEDIA_NUM)
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b13      	cmp	r3, #19
 8002c80:	d902      	bls.n	8002c88 <HAL_ADC_ConvCpltCallback+0xcc>
		adc_counter = 0;
 8002c82:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, ADC_CHANNEL_NUM);
 8002c88:	4907      	ldr	r1, [pc, #28]	; (8002ca8 <HAL_ADC_ConvCpltCallback+0xec>)
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <HAL_ADC_ConvCpltCallback+0xf4>)
 8002c8c:	2206      	movs	r2, #6
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f001 fa0a 	bl	80040a8 <HAL_ADC_Start_DMA>
}
 8002c94:	46c0      	nop			; (mov r8, r8)
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b005      	add	sp, #20
 8002c9a:	bd90      	pop	{r4, r7, pc}
 8002c9c:	20000254 	.word	0x20000254
 8002ca0:	20000260 	.word	0x20000260
 8002ca4:	20000158 	.word	0x20000158
 8002ca8:	2000014c 	.word	0x2000014c
 8002cac:	20000248 	.word	0x20000248
 8002cb0:	2000008c 	.word	0x2000008c

08002cb4 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
	uart1_read_to_frame(&uart1);
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <USART1_IRQHandler+0x14>)
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f000 fd2a 	bl	8003714 <uart1_read_to_frame>
}
 8002cc0:	46c0      	nop			; (mov r8, r8)
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	20000264 	.word	0x20000264

08002ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cd0:	b672      	cpsid	i
}
 8002cd2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002cd4:	e7fe      	b.n	8002cd4 <Error_Handler+0x8>
	...

08002cd8 <max4003_get_dbm>:
 *  Created on: Sep 29, 2022
 *      Author: sigmadev
 */
#include "max4003.h"

uint8_t max4003_get_dbm( MAX4003_t *mx,uint16_t value) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	000a      	movs	r2, r1
 8002ce2:	1cbb      	adds	r3, r7, #2
 8002ce4:	801a      	strh	r2, [r3, #0]
	float m;
	float b;
	 m = (float) ( MAX4003_DBM_MAX -  MAX4003_DBM_MIN)
			/ (float) (mx->max - mx->min);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	001a      	movs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	885b      	ldrh	r3, [r3, #2]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f7fe fa46 	bl	8001184 <__aeabi_i2f>
 8002cf8:	1c03      	adds	r3, r0, #0
	 m = (float) ( MAX4003_DBM_MAX -  MAX4003_DBM_MIN)
 8002cfa:	1c19      	adds	r1, r3, #0
 8002cfc:	481f      	ldr	r0, [pc, #124]	; (8002d7c <max4003_get_dbm+0xa4>)
 8002cfe:	f7fd fd6f 	bl	80007e0 <__aeabi_fdiv>
 8002d02:	1c03      	adds	r3, r0, #0
 8002d04:	60fb      	str	r3, [r7, #12]
	 b =  MAX4003_DBM_MAX -mx->max * m;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f7fe fa3a 	bl	8001184 <__aeabi_i2f>
 8002d10:	1c03      	adds	r3, r0, #0
 8002d12:	68f9      	ldr	r1, [r7, #12]
 8002d14:	1c18      	adds	r0, r3, #0
 8002d16:	f7fd ff2b 	bl	8000b70 <__aeabi_fmul>
 8002d1a:	1c03      	adds	r3, r0, #0
 8002d1c:	1c19      	adds	r1, r3, #0
 8002d1e:	2000      	movs	r0, #0
 8002d20:	f7fe f84c 	bl	8000dbc <__aeabi_fsub>
 8002d24:	1c03      	adds	r3, r0, #0
 8002d26:	60bb      	str	r3, [r7, #8]

	if (value > mx->max) {
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	1cba      	adds	r2, r7, #2
 8002d2e:	8812      	ldrh	r2, [r2, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d901      	bls.n	8002d38 <max4003_get_dbm+0x60>
		return  MAX4003_DBM_MAX;
 8002d34:	2300      	movs	r3, #0
 8002d36:	e01d      	b.n	8002d74 <max4003_get_dbm+0x9c>
	} else if (value < mx->min) {
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	885b      	ldrh	r3, [r3, #2]
 8002d3c:	1cba      	adds	r2, r7, #2
 8002d3e:	8812      	ldrh	r2, [r2, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d201      	bcs.n	8002d48 <max4003_get_dbm+0x70>
		return  MAX4003_DBM_MIN;
 8002d44:	23e2      	movs	r3, #226	; 0xe2
 8002d46:	e015      	b.n	8002d74 <max4003_get_dbm+0x9c>
	}
	return (int8_t) (m * (float) value + b);
 8002d48:	1cbb      	adds	r3, r7, #2
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f7fe fa67 	bl	8001220 <__aeabi_ui2f>
 8002d52:	1c03      	adds	r3, r0, #0
 8002d54:	68f9      	ldr	r1, [r7, #12]
 8002d56:	1c18      	adds	r0, r3, #0
 8002d58:	f7fd ff0a 	bl	8000b70 <__aeabi_fmul>
 8002d5c:	1c03      	adds	r3, r0, #0
 8002d5e:	68b9      	ldr	r1, [r7, #8]
 8002d60:	1c18      	adds	r0, r3, #0
 8002d62:	f7fd fb9f 	bl	80004a4 <__aeabi_fadd>
 8002d66:	1c03      	adds	r3, r0, #0
 8002d68:	1c18      	adds	r0, r3, #0
 8002d6a:	f7fe f9eb 	bl	8001144 <__aeabi_f2iz>
 8002d6e:	0003      	movs	r3, r0
 8002d70:	b25b      	sxtb	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
}
 8002d74:	0018      	movs	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b004      	add	sp, #16
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	41f00000 	.word	0x41f00000

08002d80 <module_init>:
 *      Author: sigmadev
 */

#include <module.h>

void  module_init(Module_t* module ,Function_t funcion, Id_t id){
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	0008      	movs	r0, r1
 8002d8a:	0011      	movs	r1, r2
 8002d8c:	1cfb      	adds	r3, r7, #3
 8002d8e:	1c02      	adds	r2, r0, #0
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	1cbb      	adds	r3, r7, #2
 8002d94:	1c0a      	adds	r2, r1, #0
 8002d96:	701a      	strb	r2, [r3, #0]
module->function = funcion;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	1cfa      	adds	r2, r7, #3
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	745a      	strb	r2, [r3, #17]
module->id = id;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	1cba      	adds	r2, r7, #2
 8002da4:	7812      	ldrb	r2, [r2, #0]
 8002da6:	741a      	strb	r2, [r3, #16]
module->att = 0;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]
module->gain =   0;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	705a      	strb	r2, [r3, #1]
module->pin = 0;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	715a      	strb	r2, [r3, #5]
module->pout = 0;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	709a      	strb	r2, [r3, #2]
module->temperature = 0;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	609a      	str	r2, [r3, #8]
module->state = true;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	71da      	strb	r2, [r3, #7]
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <module_vswr_calc>:

float module_vswr_calc(int8_t pf, int8_t pr){
 8002dd4:	b590      	push	{r4, r7, lr}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	0002      	movs	r2, r0
 8002ddc:	1dfb      	adds	r3, r7, #7
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	1dbb      	adds	r3, r7, #6
 8002de2:	1c0a      	adds	r2, r1, #0
 8002de4:	701a      	strb	r2, [r3, #0]
	float den;
	float num;
	float factor;
	float result;

	factor = (float) pf/ (float) pr;
 8002de6:	1dfb      	adds	r3, r7, #7
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b25b      	sxtb	r3, r3
 8002dec:	0018      	movs	r0, r3
 8002dee:	f7fe f9c9 	bl	8001184 <__aeabi_i2f>
 8002df2:	1c04      	adds	r4, r0, #0
 8002df4:	1dbb      	adds	r3, r7, #6
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	b25b      	sxtb	r3, r3
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f7fe f9c2 	bl	8001184 <__aeabi_i2f>
 8002e00:	1c03      	adds	r3, r0, #0
 8002e02:	1c19      	adds	r1, r3, #0
 8002e04:	1c20      	adds	r0, r4, #0
 8002e06:	f7fd fceb 	bl	80007e0 <__aeabi_fdiv>
 8002e0a:	1c03      	adds	r3, r0, #0
 8002e0c:	617b      	str	r3, [r7, #20]
	den  = 1.0f + sqrtf(factor);
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	1c18      	adds	r0, r3, #0
 8002e12:	f003 fdf9 	bl	8006a08 <sqrtf>
 8002e16:	1c03      	adds	r3, r0, #0
 8002e18:	21fe      	movs	r1, #254	; 0xfe
 8002e1a:	0589      	lsls	r1, r1, #22
 8002e1c:	1c18      	adds	r0, r3, #0
 8002e1e:	f7fd fb41 	bl	80004a4 <__aeabi_fadd>
 8002e22:	1c03      	adds	r3, r0, #0
 8002e24:	613b      	str	r3, [r7, #16]
	num = 1.0f - sqrtf(factor);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	1c18      	adds	r0, r3, #0
 8002e2a:	f003 fded 	bl	8006a08 <sqrtf>
 8002e2e:	1c03      	adds	r3, r0, #0
 8002e30:	1c19      	adds	r1, r3, #0
 8002e32:	20fe      	movs	r0, #254	; 0xfe
 8002e34:	0580      	lsls	r0, r0, #22
 8002e36:	f7fd ffc1 	bl	8000dbc <__aeabi_fsub>
 8002e3a:	1c03      	adds	r3, r0, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
	result = den / num;
 8002e3e:	68f9      	ldr	r1, [r7, #12]
 8002e40:	6938      	ldr	r0, [r7, #16]
 8002e42:	f7fd fccd 	bl	80007e0 <__aeabi_fdiv>
 8002e46:	1c03      	adds	r3, r0, #0
 8002e48:	60bb      	str	r3, [r7, #8]
	return result;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
}
 8002e4c:	1c18      	adds	r0, r3, #0
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b007      	add	sp, #28
 8002e52:	bd90      	pop	{r4, r7, pc}

08002e54 <rs485_check_frame>:
 *  Created on: Sep 28, 2022
 *      Author: sigmadev
 */
#include "rs485.h"

Rs485_status_t rs485_check_frame(RS485_t *r, UART1_t *u) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]

	if (u->rx_count > (3 + 1 + 2)){
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	7a1b      	ldrb	r3, [r3, #8]
 8002e62:	2b06      	cmp	r3, #6
 8002e64:	d933      	bls.n	8002ece <rs485_check_frame+0x7a>
		u->timeout = HAL_GetTick();
 8002e66:	f000 fdf1 	bl	8003a4c <HAL_GetTick>
 8002e6a:	0002      	movs	r2, r0
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	60da      	str	r2, [r3, #12]
		if (u->rx_buffer[0] == LTEL_START_MARK){
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	227e      	movs	r2, #126	; 0x7e
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d126      	bne.n	8002eca <rs485_check_frame+0x76>
			if (u->rx_buffer[1] == POWER_AMPLIFIER){
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3301      	adds	r3, #1
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b09      	cmp	r3, #9
 8002e86:	d11e      	bne.n	8002ec6 <rs485_check_frame+0x72>
				if (u->rx_buffer[2] == ID8){
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d116      	bne.n	8002ec2 <rs485_check_frame+0x6e>
					for (int i = 3; i < u->rx_count; i++)
 8002e94:	2303      	movs	r3, #3
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	e00c      	b.n	8002eb4 <rs485_check_frame+0x60>
						if (u->rx_buffer[i] == LTEL_END_MARK)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	18d3      	adds	r3, r2, r3
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	227f      	movs	r2, #127	; 0x7f
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d101      	bne.n	8002eae <rs485_check_frame+0x5a>
							return DATA_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e012      	b.n	8002ed4 <rs485_check_frame+0x80>
					for (int i = 3; i < u->rx_count; i++)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	7a1b      	ldrb	r3, [r3, #8]
 8002eb8:	001a      	movs	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	dbec      	blt.n	8002e9a <rs485_check_frame+0x46>
 8002ec0:	e007      	b.n	8002ed2 <rs485_check_frame+0x7e>
				} else
					return WRONG_MODULE_ID;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e006      	b.n	8002ed4 <rs485_check_frame+0x80>
			} else
				return NO_VALID_MODULE;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e004      	b.n	8002ed4 <rs485_check_frame+0x80>
		}else
			return NOT_VALID_FRAME;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e002      	b.n	8002ed4 <rs485_check_frame+0x80>
	} else
		return WAITING;
 8002ece:	2306      	movs	r3, #6
 8002ed0:	e000      	b.n	8002ed4 <rs485_check_frame+0x80>
	return NO_DATA;
 8002ed2:	2305      	movs	r3, #5
}
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b004      	add	sp, #16
 8002eda:	bd80      	pop	{r7, pc}

08002edc <rs485_set_query_frame>:

void rs485_set_query_frame(RS485_t *r, Module_t *module) {
 8002edc:	b590      	push	{r4, r7, lr}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]

	uint8_t crc_frame[2];
	uint16_t crc;
	r->frame[0] = LTEL_START_MARK;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	227e      	movs	r2, #126	; 0x7e
 8002eec:	701a      	strb	r2, [r3, #0]
	r->frame[1] = module->function;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	7c52      	ldrb	r2, [r2, #17]
 8002ef8:	701a      	strb	r2, [r3, #0]
	r->frame[2] = module->id;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	3302      	adds	r3, #2
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	7c12      	ldrb	r2, [r2, #16]
 8002f04:	701a      	strb	r2, [r3, #0]
	r->frame[3] = r->cmd;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	3303      	adds	r3, #3
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	7812      	ldrb	r2, [r2, #0]
 8002f10:	701a      	strb	r2, [r3, #0]

	if (module->function == LOW_NOISE_AMPLIFIER) {
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	7c5b      	ldrb	r3, [r3, #17]
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d000      	beq.n	8002f1c <rs485_set_query_frame+0x40>
 8002f1a:	e084      	b.n	8003026 <rs485_set_query_frame+0x14a>
		switch (r->cmd) {
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b11      	cmp	r3, #17
 8002f22:	d002      	beq.n	8002f2a <rs485_set_query_frame+0x4e>
 8002f24:	2b12      	cmp	r3, #18
 8002f26:	d02a      	beq.n	8002f7e <rs485_set_query_frame+0xa2>
 8002f28:	e056      	b.n	8002fd8 <rs485_set_query_frame+0xfc>
		case QUERY_PARAMETER_LTEL:
			r->frame[4] = 0x00;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	3304      	adds	r3, #4
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]
			r->frame[5] = 0x05;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	3305      	adds	r3, #5
 8002f3a:	2205      	movs	r2, #5
 8002f3c:	701a      	strb	r2, [r3, #0]
			r->frame[6] = 0x00;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	3306      	adds	r3, #6
 8002f44:	2200      	movs	r2, #0
 8002f46:	701a      	strb	r2, [r3, #0]
			r->frame[7] = module->att;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	3307      	adds	r3, #7
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	7812      	ldrb	r2, [r2, #0]
 8002f52:	701a      	strb	r2, [r3, #0]
			r->frame[8] = module->gain;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	3308      	adds	r3, #8
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	7852      	ldrb	r2, [r2, #1]
 8002f5e:	701a      	strb	r2, [r3, #0]
			r->frame[9] = module->pout;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2202      	movs	r2, #2
 8002f64:	569a      	ldrsb	r2, [r3, r2]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	3309      	adds	r3, #9
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	701a      	strb	r2, [r3, #0]
			r->frame[10] = module->voltage;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	330a      	adds	r3, #10
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	7912      	ldrb	r2, [r2, #4]
 8002f7a:	701a      	strb	r2, [r3, #0]
			break;
 8002f7c:	e030      	b.n	8002fe0 <rs485_set_query_frame+0x104>
		case QUERY_PARAMETER_SIGMA:
			r->frame[4] = 0x06;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	3304      	adds	r3, #4
 8002f84:	2206      	movs	r2, #6
 8002f86:	701a      	strb	r2, [r3, #0]
			r->frame[5] = module->pout;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	569a      	ldrsb	r2, [r3, r2]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	3305      	adds	r3, #5
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	701a      	strb	r2, [r3, #0]
			r->frame[6] = module->att;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	3306      	adds	r3, #6
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	7812      	ldrb	r2, [r2, #0]
 8002fa2:	701a      	strb	r2, [r3, #0]
			r->frame[7] = module->gain;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	3307      	adds	r3, #7
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	7852      	ldrb	r2, [r2, #1]
 8002fae:	701a      	strb	r2, [r3, #0]
			r->frame[8] = module->current;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	3308      	adds	r3, #8
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	7992      	ldrb	r2, [r2, #6]
 8002fba:	701a      	strb	r2, [r3, #0]
			r->frame[9] = module->voltage;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	3309      	adds	r3, #9
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	7912      	ldrb	r2, [r2, #4]
 8002fc6:	701a      	strb	r2, [r3, #0]
			r->frame[10] = module->pin;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2205      	movs	r2, #5
 8002fcc:	569a      	ldrsb	r2, [r3, r2]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	330a      	adds	r3, #10
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	701a      	strb	r2, [r3, #0]
		default:
			r->frame[0] = 0;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
		}
		crc = crc_get(&(r->frame[1]), 10);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	210a      	movs	r1, #10
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f000 fc27 	bl	800383c <crc_get>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	200a      	movs	r0, #10
 8002ff4:	183b      	adds	r3, r7, r0
 8002ff6:	801a      	strh	r2, [r3, #0]
		memcpy(crc_frame, &crc, 2);
 8002ff8:	210c      	movs	r1, #12
 8002ffa:	187b      	adds	r3, r7, r1
 8002ffc:	183a      	adds	r2, r7, r0
 8002ffe:	8812      	ldrh	r2, [r2, #0]
 8003000:	801a      	strh	r2, [r3, #0]
		r->frame[11] = crc_frame[0];
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	330b      	adds	r3, #11
 8003008:	187a      	adds	r2, r7, r1
 800300a:	7812      	ldrb	r2, [r2, #0]
 800300c:	701a      	strb	r2, [r3, #0]
		r->frame[12] = crc_frame[1];
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	330c      	adds	r3, #12
 8003014:	187a      	adds	r2, r7, r1
 8003016:	7852      	ldrb	r2, [r2, #1]
 8003018:	701a      	strb	r2, [r3, #0]
		r->frame[13] = LTEL_END_MARK;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	330d      	adds	r3, #13
 8003020:	227f      	movs	r2, #127	; 0x7f
 8003022:	701a      	strb	r2, [r3, #0]
		memcpy(crc_frame, &crc, 2);
		r->frame[13+1] = crc_frame[0];
		r->frame[13+2] = crc_frame[1];
		r->frame[13+3] = LTEL_END_MARK;
	}
}
 8003024:	e0c4      	b.n	80031b0 <rs485_set_query_frame+0x2d4>
	} else if (module->function == POWER_AMPLIFIER) {
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	7c5b      	ldrb	r3, [r3, #17]
 800302a:	2b09      	cmp	r3, #9
 800302c:	d000      	beq.n	8003030 <rs485_set_query_frame+0x154>
 800302e:	e0bf      	b.n	80031b0 <rs485_set_query_frame+0x2d4>
		switch (r->cmd) {
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b11      	cmp	r3, #17
 8003036:	d002      	beq.n	800303e <rs485_set_query_frame+0x162>
 8003038:	2b12      	cmp	r3, #18
 800303a:	d04a      	beq.n	80030d2 <rs485_set_query_frame+0x1f6>
 800303c:	e092      	b.n	8003164 <rs485_set_query_frame+0x288>
			r->frame[4] = 0x00;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	3304      	adds	r3, #4
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
			r->frame[5] = 0x08;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	3305      	adds	r3, #5
 800304e:	2208      	movs	r2, #8
 8003050:	701a      	strb	r2, [r3, #0]
			r->frame[6] = module->state;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	79da      	ldrb	r2, [r3, #7]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	3306      	adds	r3, #6
 800305c:	701a      	strb	r2, [r3, #0]
			r->frame[7] = 0x00;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	3307      	adds	r3, #7
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]
			r->frame[8] = module->temperature;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	3308      	adds	r3, #8
 8003072:	001c      	movs	r4, r3
 8003074:	1c10      	adds	r0, r2, #0
 8003076:	f7fd f9fd 	bl	8000474 <__aeabi_f2uiz>
 800307a:	0003      	movs	r3, r0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	7023      	strb	r3, [r4, #0]
			r->frame[9] = module->gain;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	3309      	adds	r3, #9
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	7852      	ldrb	r2, [r2, #1]
 800308a:	701a      	strb	r2, [r3, #0]
			r->frame[10] = module->vswr;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	330a      	adds	r3, #10
 8003096:	001c      	movs	r4, r3
 8003098:	1c10      	adds	r0, r2, #0
 800309a:	f7fd f9eb 	bl	8000474 <__aeabi_f2uiz>
 800309e:	0003      	movs	r3, r0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	7023      	strb	r3, [r4, #0]
			r->frame[11] = module->att;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	330b      	adds	r3, #11
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	7812      	ldrb	r2, [r2, #0]
 80030ae:	701a      	strb	r2, [r3, #0]
			r->frame[12] = module->pout;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2202      	movs	r2, #2
 80030b4:	569a      	ldrsb	r2, [r3, r2]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	330c      	adds	r3, #12
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	701a      	strb	r2, [r3, #0]
			r->frame[13] = module->pin;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2205      	movs	r2, #5
 80030c4:	569a      	ldrsb	r2, [r3, r2]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	330d      	adds	r3, #13
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	701a      	strb	r2, [r3, #0]
			break;
 80030d0:	e04c      	b.n	800316c <rs485_set_query_frame+0x290>
			r->frame[4] = 0x00;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	3304      	adds	r3, #4
 80030d8:	2200      	movs	r2, #0
 80030da:	701a      	strb	r2, [r3, #0]
			r->frame[5] = 0x08;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	3305      	adds	r3, #5
 80030e2:	2208      	movs	r2, #8
 80030e4:	701a      	strb	r2, [r3, #0]
			r->frame[6] = module->state;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	79da      	ldrb	r2, [r3, #7]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	3306      	adds	r3, #6
 80030f0:	701a      	strb	r2, [r3, #0]
			r->frame[7] = 0x00;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	3307      	adds	r3, #7
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
			r->frame[8] = module->temperature;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	3308      	adds	r3, #8
 8003106:	001c      	movs	r4, r3
 8003108:	1c10      	adds	r0, r2, #0
 800310a:	f7fd f9b3 	bl	8000474 <__aeabi_f2uiz>
 800310e:	0003      	movs	r3, r0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	7023      	strb	r3, [r4, #0]
			r->frame[9] = module->gain;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	3309      	adds	r3, #9
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	7852      	ldrb	r2, [r2, #1]
 800311e:	701a      	strb	r2, [r3, #0]
			r->frame[10] = module->vswr;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	330a      	adds	r3, #10
 800312a:	001c      	movs	r4, r3
 800312c:	1c10      	adds	r0, r2, #0
 800312e:	f7fd f9a1 	bl	8000474 <__aeabi_f2uiz>
 8003132:	0003      	movs	r3, r0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	7023      	strb	r3, [r4, #0]
			r->frame[11] = module->att;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	330b      	adds	r3, #11
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	7812      	ldrb	r2, [r2, #0]
 8003142:	701a      	strb	r2, [r3, #0]
			r->frame[12] = module->pout;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2202      	movs	r2, #2
 8003148:	569a      	ldrsb	r2, [r3, r2]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	330c      	adds	r3, #12
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	701a      	strb	r2, [r3, #0]
			r->frame[13] = module->pin;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2205      	movs	r2, #5
 8003158:	569a      	ldrsb	r2, [r3, r2]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	330d      	adds	r3, #13
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	701a      	strb	r2, [r3, #0]
			r->frame[0] = 0;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
		crc = crc_get(&(r->frame[1]), 10);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	3301      	adds	r3, #1
 8003172:	210a      	movs	r1, #10
 8003174:	0018      	movs	r0, r3
 8003176:	f000 fb61 	bl	800383c <crc_get>
 800317a:	0003      	movs	r3, r0
 800317c:	b29a      	uxth	r2, r3
 800317e:	200a      	movs	r0, #10
 8003180:	183b      	adds	r3, r7, r0
 8003182:	801a      	strh	r2, [r3, #0]
		memcpy(crc_frame, &crc, 2);
 8003184:	210c      	movs	r1, #12
 8003186:	187b      	adds	r3, r7, r1
 8003188:	183a      	adds	r2, r7, r0
 800318a:	8812      	ldrh	r2, [r2, #0]
 800318c:	801a      	strh	r2, [r3, #0]
		r->frame[13+1] = crc_frame[0];
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	330e      	adds	r3, #14
 8003194:	187a      	adds	r2, r7, r1
 8003196:	7812      	ldrb	r2, [r2, #0]
 8003198:	701a      	strb	r2, [r3, #0]
		r->frame[13+2] = crc_frame[1];
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	330f      	adds	r3, #15
 80031a0:	187a      	adds	r2, r7, r1
 80031a2:	7852      	ldrb	r2, [r2, #1]
 80031a4:	701a      	strb	r2, [r3, #0]
		r->frame[13+3] = LTEL_END_MARK;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	3310      	adds	r3, #16
 80031ac:	227f      	movs	r2, #127	; 0x7f
 80031ae:	701a      	strb	r2, [r3, #0]
}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b005      	add	sp, #20
 80031b6:	bd90      	pop	{r4, r7, pc}

080031b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031be:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <HAL_MspInit+0x44>)
 80031c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031c2:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <HAL_MspInit+0x44>)
 80031c4:	2101      	movs	r1, #1
 80031c6:	430a      	orrs	r2, r1
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40
 80031ca:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <HAL_MspInit+0x44>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	2201      	movs	r2, #1
 80031d0:	4013      	ands	r3, r2
 80031d2:	607b      	str	r3, [r7, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031d6:	4b09      	ldr	r3, [pc, #36]	; (80031fc <HAL_MspInit+0x44>)
 80031d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031da:	4b08      	ldr	r3, [pc, #32]	; (80031fc <HAL_MspInit+0x44>)
 80031dc:	2180      	movs	r1, #128	; 0x80
 80031de:	0549      	lsls	r1, r1, #21
 80031e0:	430a      	orrs	r2, r1
 80031e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <HAL_MspInit+0x44>)
 80031e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	055b      	lsls	r3, r3, #21
 80031ec:	4013      	ands	r3, r2
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b002      	add	sp, #8
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	40021000 	.word	0x40021000

08003200 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003200:	b590      	push	{r4, r7, lr}
 8003202:	b091      	sub	sp, #68	; 0x44
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003208:	232c      	movs	r3, #44	; 0x2c
 800320a:	18fb      	adds	r3, r7, r3
 800320c:	0018      	movs	r0, r3
 800320e:	2314      	movs	r3, #20
 8003210:	001a      	movs	r2, r3
 8003212:	2100      	movs	r1, #0
 8003214:	f002 ff76 	bl	8006104 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003218:	2414      	movs	r4, #20
 800321a:	193b      	adds	r3, r7, r4
 800321c:	0018      	movs	r0, r3
 800321e:	2318      	movs	r3, #24
 8003220:	001a      	movs	r2, r3
 8003222:	2100      	movs	r1, #0
 8003224:	f002 ff6e 	bl	8006104 <memset>
  if(hadc->Instance==ADC1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a43      	ldr	r2, [pc, #268]	; (800333c <HAL_ADC_MspInit+0x13c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d000      	beq.n	8003234 <HAL_ADC_MspInit+0x34>
 8003232:	e07f      	b.n	8003334 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003234:	193b      	adds	r3, r7, r4
 8003236:	2280      	movs	r2, #128	; 0x80
 8003238:	01d2      	lsls	r2, r2, #7
 800323a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800323c:	193b      	adds	r3, r7, r4
 800323e:	2200      	movs	r2, #0
 8003240:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003242:	193b      	adds	r3, r7, r4
 8003244:	0018      	movs	r0, r3
 8003246:	f002 fdf9 	bl	8005e3c <HAL_RCCEx_PeriphCLKConfig>
 800324a:	1e03      	subs	r3, r0, #0
 800324c:	d001      	beq.n	8003252 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800324e:	f7ff fd3d 	bl	8002ccc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003252:	4b3b      	ldr	r3, [pc, #236]	; (8003340 <HAL_ADC_MspInit+0x140>)
 8003254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003256:	4b3a      	ldr	r3, [pc, #232]	; (8003340 <HAL_ADC_MspInit+0x140>)
 8003258:	2180      	movs	r1, #128	; 0x80
 800325a:	0349      	lsls	r1, r1, #13
 800325c:	430a      	orrs	r2, r1
 800325e:	641a      	str	r2, [r3, #64]	; 0x40
 8003260:	4b37      	ldr	r3, [pc, #220]	; (8003340 <HAL_ADC_MspInit+0x140>)
 8003262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	035b      	lsls	r3, r3, #13
 8003268:	4013      	ands	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800326e:	4b34      	ldr	r3, [pc, #208]	; (8003340 <HAL_ADC_MspInit+0x140>)
 8003270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003272:	4b33      	ldr	r3, [pc, #204]	; (8003340 <HAL_ADC_MspInit+0x140>)
 8003274:	2101      	movs	r1, #1
 8003276:	430a      	orrs	r2, r1
 8003278:	635a      	str	r2, [r3, #52]	; 0x34
 800327a:	4b31      	ldr	r3, [pc, #196]	; (8003340 <HAL_ADC_MspInit+0x140>)
 800327c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327e:	2201      	movs	r2, #1
 8003280:	4013      	ands	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003286:	4b2e      	ldr	r3, [pc, #184]	; (8003340 <HAL_ADC_MspInit+0x140>)
 8003288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800328a:	4b2d      	ldr	r3, [pc, #180]	; (8003340 <HAL_ADC_MspInit+0x140>)
 800328c:	2102      	movs	r1, #2
 800328e:	430a      	orrs	r2, r1
 8003290:	635a      	str	r2, [r3, #52]	; 0x34
 8003292:	4b2b      	ldr	r3, [pc, #172]	; (8003340 <HAL_ADC_MspInit+0x140>)
 8003294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003296:	2202      	movs	r2, #2
 8003298:	4013      	ands	r3, r2
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = AGC_LEVEL_Pin|CURR_Pin|V_IN_SAMPLE_Pin|SWR_Pin
 800329e:	242c      	movs	r4, #44	; 0x2c
 80032a0:	193b      	adds	r3, r7, r4
 80032a2:	2277      	movs	r2, #119	; 0x77
 80032a4:	601a      	str	r2, [r3, #0]
                          |P_OUT_Pin|P_IN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032a6:	193b      	adds	r3, r7, r4
 80032a8:	2203      	movs	r2, #3
 80032aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ac:	193b      	adds	r3, r7, r4
 80032ae:	2200      	movs	r2, #0
 80032b0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b2:	193a      	adds	r2, r7, r4
 80032b4:	23a0      	movs	r3, #160	; 0xa0
 80032b6:	05db      	lsls	r3, r3, #23
 80032b8:	0011      	movs	r1, r2
 80032ba:	0018      	movs	r0, r3
 80032bc:	f001 ff62 	bl	8005184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = T_SN_IN_Pin;
 80032c0:	193b      	adds	r3, r7, r4
 80032c2:	2204      	movs	r2, #4
 80032c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032c6:	193b      	adds	r3, r7, r4
 80032c8:	2203      	movs	r2, #3
 80032ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032cc:	193b      	adds	r3, r7, r4
 80032ce:	2200      	movs	r2, #0
 80032d0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(T_SN_IN_GPIO_Port, &GPIO_InitStruct);
 80032d2:	193b      	adds	r3, r7, r4
 80032d4:	4a1b      	ldr	r2, [pc, #108]	; (8003344 <HAL_ADC_MspInit+0x144>)
 80032d6:	0019      	movs	r1, r3
 80032d8:	0010      	movs	r0, r2
 80032da:	f001 ff53 	bl	8005184 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80032de:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <HAL_ADC_MspInit+0x148>)
 80032e0:	4a1a      	ldr	r2, [pc, #104]	; (800334c <HAL_ADC_MspInit+0x14c>)
 80032e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80032e4:	4b18      	ldr	r3, [pc, #96]	; (8003348 <HAL_ADC_MspInit+0x148>)
 80032e6:	2205      	movs	r2, #5
 80032e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032ea:	4b17      	ldr	r3, [pc, #92]	; (8003348 <HAL_ADC_MspInit+0x148>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80032f0:	4b15      	ldr	r3, [pc, #84]	; (8003348 <HAL_ADC_MspInit+0x148>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80032f6:	4b14      	ldr	r3, [pc, #80]	; (8003348 <HAL_ADC_MspInit+0x148>)
 80032f8:	2280      	movs	r2, #128	; 0x80
 80032fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80032fc:	4b12      	ldr	r3, [pc, #72]	; (8003348 <HAL_ADC_MspInit+0x148>)
 80032fe:	2280      	movs	r2, #128	; 0x80
 8003300:	0052      	lsls	r2, r2, #1
 8003302:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003304:	4b10      	ldr	r3, [pc, #64]	; (8003348 <HAL_ADC_MspInit+0x148>)
 8003306:	2280      	movs	r2, #128	; 0x80
 8003308:	00d2      	lsls	r2, r2, #3
 800330a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800330c:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <HAL_ADC_MspInit+0x148>)
 800330e:	2200      	movs	r2, #0
 8003310:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003312:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <HAL_ADC_MspInit+0x148>)
 8003314:	2200      	movs	r2, #0
 8003316:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_ADC_MspInit+0x148>)
 800331a:	0018      	movs	r0, r3
 800331c:	f001 fce0 	bl	8004ce0 <HAL_DMA_Init>
 8003320:	1e03      	subs	r3, r0, #0
 8003322:	d001      	beq.n	8003328 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8003324:	f7ff fcd2 	bl	8002ccc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a07      	ldr	r2, [pc, #28]	; (8003348 <HAL_ADC_MspInit+0x148>)
 800332c:	651a      	str	r2, [r3, #80]	; 0x50
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_ADC_MspInit+0x148>)
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003334:	46c0      	nop			; (mov r8, r8)
 8003336:	46bd      	mov	sp, r7
 8003338:	b011      	add	sp, #68	; 0x44
 800333a:	bd90      	pop	{r4, r7, pc}
 800333c:	40012400 	.word	0x40012400
 8003340:	40021000 	.word	0x40021000
 8003344:	50000400 	.word	0x50000400
 8003348:	200000f0 	.word	0x200000f0
 800334c:	40020008 	.word	0x40020008

08003350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003354:	e7fe      	b.n	8003354 <NMI_Handler+0x4>

08003356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800335a:	e7fe      	b.n	800335a <HardFault_Handler+0x4>

0800335c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003360:	46c0      	nop			; (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003374:	f000 fb58 	bl	8003a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003378:	46c0      	nop			; (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003384:	4b03      	ldr	r3, [pc, #12]	; (8003394 <DMA1_Channel1_IRQHandler+0x14>)
 8003386:	0018      	movs	r0, r3
 8003388:	f001 fdba 	bl	8004f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	200000f0 	.word	0x200000f0

08003398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033a0:	4a14      	ldr	r2, [pc, #80]	; (80033f4 <_sbrk+0x5c>)
 80033a2:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <_sbrk+0x60>)
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033ac:	4b13      	ldr	r3, [pc, #76]	; (80033fc <_sbrk+0x64>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d102      	bne.n	80033ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033b4:	4b11      	ldr	r3, [pc, #68]	; (80033fc <_sbrk+0x64>)
 80033b6:	4a12      	ldr	r2, [pc, #72]	; (8003400 <_sbrk+0x68>)
 80033b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033ba:	4b10      	ldr	r3, [pc, #64]	; (80033fc <_sbrk+0x64>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	18d3      	adds	r3, r2, r3
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d207      	bcs.n	80033d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033c8:	f002 fe5e 	bl	8006088 <__errno>
 80033cc:	0003      	movs	r3, r0
 80033ce:	220c      	movs	r2, #12
 80033d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033d2:	2301      	movs	r3, #1
 80033d4:	425b      	negs	r3, r3
 80033d6:	e009      	b.n	80033ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033d8:	4b08      	ldr	r3, [pc, #32]	; (80033fc <_sbrk+0x64>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033de:	4b07      	ldr	r3, [pc, #28]	; (80033fc <_sbrk+0x64>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	18d2      	adds	r2, r2, r3
 80033e6:	4b05      	ldr	r3, [pc, #20]	; (80033fc <_sbrk+0x64>)
 80033e8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80033ea:	68fb      	ldr	r3, [r7, #12]
}
 80033ec:	0018      	movs	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b006      	add	sp, #24
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20002000 	.word	0x20002000
 80033f8:	00000400 	.word	0x00000400
 80033fc:	20000274 	.word	0x20000274
 8003400:	20000290 	.word	0x20000290

08003404 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003408:	46c0      	nop			; (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	0002      	movs	r2, r0
 8003418:	1dfb      	adds	r3, r7, #7
 800341a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800341c:	1dfb      	adds	r3, r7, #7
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b7f      	cmp	r3, #127	; 0x7f
 8003422:	d809      	bhi.n	8003438 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003424:	1dfb      	adds	r3, r7, #7
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	001a      	movs	r2, r3
 800342a:	231f      	movs	r3, #31
 800342c:	401a      	ands	r2, r3
 800342e:	4b04      	ldr	r3, [pc, #16]	; (8003440 <__NVIC_EnableIRQ+0x30>)
 8003430:	2101      	movs	r1, #1
 8003432:	4091      	lsls	r1, r2
 8003434:	000a      	movs	r2, r1
 8003436:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003438:	46c0      	nop			; (mov r8, r8)
 800343a:	46bd      	mov	sp, r7
 800343c:	b002      	add	sp, #8
 800343e:	bd80      	pop	{r7, pc}
 8003440:	e000e100 	.word	0xe000e100

08003444 <uart1_gpio_init>:
 *      Author: sigmadev
 */

#include <uart1.h>

void uart1_gpio_init() {
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
	/**USART1 GPIO Configuration
	 PB6     ------> USART1_TX
	 PB7     ------> USART1_RX
	 */

	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE6_0);
 8003448:	4b47      	ldr	r3, [pc, #284]	; (8003568 <uart1_gpio_init+0x124>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	4b46      	ldr	r3, [pc, #280]	; (8003568 <uart1_gpio_init+0x124>)
 800344e:	4947      	ldr	r1, [pc, #284]	; (800356c <uart1_gpio_init+0x128>)
 8003450:	400a      	ands	r2, r1
 8003452:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE6_1);
 8003454:	4b44      	ldr	r3, [pc, #272]	; (8003568 <uart1_gpio_init+0x124>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4b43      	ldr	r3, [pc, #268]	; (8003568 <uart1_gpio_init+0x124>)
 800345a:	2180      	movs	r1, #128	; 0x80
 800345c:	0189      	lsls	r1, r1, #6
 800345e:	430a      	orrs	r2, r1
 8003460:	601a      	str	r2, [r3, #0]


	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE6_0);
 8003462:	4b41      	ldr	r3, [pc, #260]	; (8003568 <uart1_gpio_init+0x124>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	4b40      	ldr	r3, [pc, #256]	; (8003568 <uart1_gpio_init+0x124>)
 8003468:	4940      	ldr	r1, [pc, #256]	; (800356c <uart1_gpio_init+0x128>)
 800346a:	400a      	ands	r2, r1
 800346c:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE6_1);
 800346e:	4b3e      	ldr	r3, [pc, #248]	; (8003568 <uart1_gpio_init+0x124>)
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	4b3d      	ldr	r3, [pc, #244]	; (8003568 <uart1_gpio_init+0x124>)
 8003474:	2180      	movs	r1, #128	; 0x80
 8003476:	0189      	lsls	r1, r1, #6
 8003478:	430a      	orrs	r2, r1
 800347a:	601a      	str	r2, [r3, #0]

	CLEAR_BIT(GPIOB->MODER, GPIO_OTYPER_OT6);
 800347c:	4b3a      	ldr	r3, [pc, #232]	; (8003568 <uart1_gpio_init+0x124>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4b39      	ldr	r3, [pc, #228]	; (8003568 <uart1_gpio_init+0x124>)
 8003482:	2140      	movs	r1, #64	; 0x40
 8003484:	438a      	bics	r2, r1
 8003486:	601a      	str	r2, [r3, #0]

	CLEAR_BIT(GPIOB->MODER, GPIO_OTYPER_OT7);
 8003488:	4b37      	ldr	r3, [pc, #220]	; (8003568 <uart1_gpio_init+0x124>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	4b36      	ldr	r3, [pc, #216]	; (8003568 <uart1_gpio_init+0x124>)
 800348e:	2180      	movs	r1, #128	; 0x80
 8003490:	438a      	bics	r2, r1
 8003492:	601a      	str	r2, [r3, #0]

	CLEAR_BIT(GPIOB->MODER, GPIO_PUPDR_PUPD6_0);
 8003494:	4b34      	ldr	r3, [pc, #208]	; (8003568 <uart1_gpio_init+0x124>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	4b33      	ldr	r3, [pc, #204]	; (8003568 <uart1_gpio_init+0x124>)
 800349a:	4934      	ldr	r1, [pc, #208]	; (800356c <uart1_gpio_init+0x128>)
 800349c:	400a      	ands	r2, r1
 800349e:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_PUPDR_PUPD6_1);
 80034a0:	4b31      	ldr	r3, [pc, #196]	; (8003568 <uart1_gpio_init+0x124>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4b30      	ldr	r3, [pc, #192]	; (8003568 <uart1_gpio_init+0x124>)
 80034a6:	2180      	movs	r1, #128	; 0x80
 80034a8:	0189      	lsls	r1, r1, #6
 80034aa:	430a      	orrs	r2, r1
 80034ac:	601a      	str	r2, [r3, #0]

	CLEAR_BIT(GPIOB->MODER, GPIO_PUPDR_PUPD7_0);
 80034ae:	4b2e      	ldr	r3, [pc, #184]	; (8003568 <uart1_gpio_init+0x124>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	4b2d      	ldr	r3, [pc, #180]	; (8003568 <uart1_gpio_init+0x124>)
 80034b4:	492e      	ldr	r1, [pc, #184]	; (8003570 <uart1_gpio_init+0x12c>)
 80034b6:	400a      	ands	r2, r1
 80034b8:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_PUPDR_PUPD7_1);
 80034ba:	4b2b      	ldr	r3, [pc, #172]	; (8003568 <uart1_gpio_init+0x124>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4b2a      	ldr	r3, [pc, #168]	; (8003568 <uart1_gpio_init+0x124>)
 80034c0:	2180      	movs	r1, #128	; 0x80
 80034c2:	0209      	lsls	r1, r1, #8
 80034c4:	430a      	orrs	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]


	CLEAR_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED6_0);
 80034c8:	4b27      	ldr	r3, [pc, #156]	; (8003568 <uart1_gpio_init+0x124>)
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	4b26      	ldr	r3, [pc, #152]	; (8003568 <uart1_gpio_init+0x124>)
 80034ce:	4927      	ldr	r1, [pc, #156]	; (800356c <uart1_gpio_init+0x128>)
 80034d0:	400a      	ands	r2, r1
 80034d2:	609a      	str	r2, [r3, #8]
	CLEAR_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED6_1);
 80034d4:	4b24      	ldr	r3, [pc, #144]	; (8003568 <uart1_gpio_init+0x124>)
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	4b23      	ldr	r3, [pc, #140]	; (8003568 <uart1_gpio_init+0x124>)
 80034da:	4926      	ldr	r1, [pc, #152]	; (8003574 <uart1_gpio_init+0x130>)
 80034dc:	400a      	ands	r2, r1
 80034de:	609a      	str	r2, [r3, #8]

	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED7_0);
 80034e0:	4b21      	ldr	r3, [pc, #132]	; (8003568 <uart1_gpio_init+0x124>)
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	4b20      	ldr	r3, [pc, #128]	; (8003568 <uart1_gpio_init+0x124>)
 80034e6:	2180      	movs	r1, #128	; 0x80
 80034e8:	01c9      	lsls	r1, r1, #7
 80034ea:	430a      	orrs	r2, r1
 80034ec:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED7_1);
 80034ee:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <uart1_gpio_init+0x124>)
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <uart1_gpio_init+0x124>)
 80034f4:	2180      	movs	r1, #128	; 0x80
 80034f6:	0209      	lsls	r1, r1, #8
 80034f8:	430a      	orrs	r2, r1
 80034fa:	609a      	str	r2, [r3, #8]


	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6_0);
 80034fc:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <uart1_gpio_init+0x124>)
 80034fe:	6a1a      	ldr	r2, [r3, #32]
 8003500:	4b19      	ldr	r3, [pc, #100]	; (8003568 <uart1_gpio_init+0x124>)
 8003502:	2180      	movs	r1, #128	; 0x80
 8003504:	0449      	lsls	r1, r1, #17
 8003506:	430a      	orrs	r2, r1
 8003508:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6_1);
 800350a:	4b17      	ldr	r3, [pc, #92]	; (8003568 <uart1_gpio_init+0x124>)
 800350c:	6a1a      	ldr	r2, [r3, #32]
 800350e:	4b16      	ldr	r3, [pc, #88]	; (8003568 <uart1_gpio_init+0x124>)
 8003510:	4919      	ldr	r1, [pc, #100]	; (8003578 <uart1_gpio_init+0x134>)
 8003512:	400a      	ands	r2, r1
 8003514:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6_2);
 8003516:	4b14      	ldr	r3, [pc, #80]	; (8003568 <uart1_gpio_init+0x124>)
 8003518:	6a1a      	ldr	r2, [r3, #32]
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <uart1_gpio_init+0x124>)
 800351c:	4917      	ldr	r1, [pc, #92]	; (800357c <uart1_gpio_init+0x138>)
 800351e:	400a      	ands	r2, r1
 8003520:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6_3);
 8003522:	4b11      	ldr	r3, [pc, #68]	; (8003568 <uart1_gpio_init+0x124>)
 8003524:	6a1a      	ldr	r2, [r3, #32]
 8003526:	4b10      	ldr	r3, [pc, #64]	; (8003568 <uart1_gpio_init+0x124>)
 8003528:	4915      	ldr	r1, [pc, #84]	; (8003580 <uart1_gpio_init+0x13c>)
 800352a:	400a      	ands	r2, r1
 800352c:	621a      	str	r2, [r3, #32]

	SET_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7_0);
 800352e:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <uart1_gpio_init+0x124>)
 8003530:	6a1a      	ldr	r2, [r3, #32]
 8003532:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <uart1_gpio_init+0x124>)
 8003534:	2180      	movs	r1, #128	; 0x80
 8003536:	0549      	lsls	r1, r1, #21
 8003538:	430a      	orrs	r2, r1
 800353a:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7_1);
 800353c:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <uart1_gpio_init+0x124>)
 800353e:	6a1a      	ldr	r2, [r3, #32]
 8003540:	4b09      	ldr	r3, [pc, #36]	; (8003568 <uart1_gpio_init+0x124>)
 8003542:	4910      	ldr	r1, [pc, #64]	; (8003584 <uart1_gpio_init+0x140>)
 8003544:	400a      	ands	r2, r1
 8003546:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7_2);
 8003548:	4b07      	ldr	r3, [pc, #28]	; (8003568 <uart1_gpio_init+0x124>)
 800354a:	6a1a      	ldr	r2, [r3, #32]
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <uart1_gpio_init+0x124>)
 800354e:	490e      	ldr	r1, [pc, #56]	; (8003588 <uart1_gpio_init+0x144>)
 8003550:	400a      	ands	r2, r1
 8003552:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7_3);
 8003554:	4b04      	ldr	r3, [pc, #16]	; (8003568 <uart1_gpio_init+0x124>)
 8003556:	6a1a      	ldr	r2, [r3, #32]
 8003558:	4b03      	ldr	r3, [pc, #12]	; (8003568 <uart1_gpio_init+0x124>)
 800355a:	0052      	lsls	r2, r2, #1
 800355c:	0852      	lsrs	r2, r2, #1
 800355e:	621a      	str	r2, [r3, #32]
}
 8003560:	46c0      	nop			; (mov r8, r8)
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	50000400 	.word	0x50000400
 800356c:	ffffefff 	.word	0xffffefff
 8003570:	ffffbfff 	.word	0xffffbfff
 8003574:	ffffdfff 	.word	0xffffdfff
 8003578:	fdffffff 	.word	0xfdffffff
 800357c:	fbffffff 	.word	0xfbffffff
 8003580:	f7ffffff 	.word	0xf7ffffff
 8003584:	dfffffff 	.word	0xdfffffff
 8003588:	bfffffff 	.word	0xbfffffff

0800358c <uart1_init>:

void uart1_init(uint32_t pclk, uint32_t baud_rate, UART1_t *u) {
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
	uint32_t br_value = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]

	uart1_gpio_init();
 800359c:	f7ff ff52 	bl	8003444 <uart1_gpio_init>

	/*enable clock access to USART1 */
	SET_BIT(RCC->APBENR2, RCC_APBENR2_USART1EN);
 80035a0:	4b29      	ldr	r3, [pc, #164]	; (8003648 <uart1_init+0xbc>)
 80035a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035a4:	4b28      	ldr	r3, [pc, #160]	; (8003648 <uart1_init+0xbc>)
 80035a6:	2180      	movs	r1, #128	; 0x80
 80035a8:	01c9      	lsls	r1, r1, #7
 80035aa:	430a      	orrs	r2, r1
 80035ac:	641a      	str	r2, [r3, #64]	; 0x40
	if (pclk == 16000000) {
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4a26      	ldr	r2, [pc, #152]	; (800364c <uart1_init+0xc0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d10b      	bne.n	80035ce <uart1_init+0x42>
		/*set HSI 16 CLK */
		CLEAR_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_0);
 80035b6:	4b24      	ldr	r3, [pc, #144]	; (8003648 <uart1_init+0xbc>)
 80035b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035ba:	4b23      	ldr	r3, [pc, #140]	; (8003648 <uart1_init+0xbc>)
 80035bc:	2101      	movs	r1, #1
 80035be:	438a      	bics	r2, r1
 80035c0:	655a      	str	r2, [r3, #84]	; 0x54
		SET_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_1);
 80035c2:	4b21      	ldr	r3, [pc, #132]	; (8003648 <uart1_init+0xbc>)
 80035c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035c6:	4b20      	ldr	r3, [pc, #128]	; (8003648 <uart1_init+0xbc>)
 80035c8:	2102      	movs	r1, #2
 80035ca:	430a      	orrs	r2, r1
 80035cc:	655a      	str	r2, [r3, #84]	; 0x54
	}
	//MODIFY_REG(USART1->PRESC,USART_PRESC_PRESCALER,0x0010);
	/* set baud rate */
	br_value = (pclk) / baud_rate;
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f7fc fd9f 	bl	8000114 <__udivsi3>
 80035d6:	0003      	movs	r3, r0
 80035d8:	617b      	str	r3, [r7, #20]
	USART1->BRR = (uint16_t) br_value;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	b29a      	uxth	r2, r3
 80035de:	4b1c      	ldr	r3, [pc, #112]	; (8003650 <uart1_init+0xc4>)
 80035e0:	60da      	str	r2, [r3, #12]
	/* transmitter enable*/
	USART1->CR1 = USART_CR1_TE | USART_CR1_RE;
 80035e2:	4b1b      	ldr	r3, [pc, #108]	; (8003650 <uart1_init+0xc4>)
 80035e4:	220c      	movs	r2, #12
 80035e6:	601a      	str	r2, [r3, #0]

	u->rx_buffer = (uint8_t*) malloc(RX_BUFFLEN);
 80035e8:	2019      	movs	r0, #25
 80035ea:	f002 fd77 	bl	80060dc <malloc>
 80035ee:	0003      	movs	r3, r0
 80035f0:	001a      	movs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	601a      	str	r2, [r3, #0]
	u->tx_buffer = (uint8_t*) malloc(TX_BUFFLEN);
 80035f6:	2064      	movs	r0, #100	; 0x64
 80035f8:	f002 fd70 	bl	80060dc <malloc>
 80035fc:	0003      	movs	r3, r0
 80035fe:	001a      	movs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	605a      	str	r2, [r3, #4]
	u->rx_count = 0;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	721a      	strb	r2, [r3, #8]

	uart1_clean_buffer(u);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	0018      	movs	r0, r3
 800360e:	f000 f8f0 	bl	80037f2 <uart1_clean_buffer>

	/* enable FIFO */
	SET_BIT(USART1->CR2, USART_CR1_FIFOEN);
 8003612:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <uart1_init+0xc4>)
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	4b0e      	ldr	r3, [pc, #56]	; (8003650 <uart1_init+0xc4>)
 8003618:	2180      	movs	r1, #128	; 0x80
 800361a:	0589      	lsls	r1, r1, #22
 800361c:	430a      	orrs	r2, r1
 800361e:	605a      	str	r2, [r3, #4]
	//SET_BIT(USART1->CR2, USART_CR2_RTOEN);
	/**/
	//MODIFY_REG(USART1->RTOR,USART_RTOR_RTO,100);
	/*set length */
	/* Enable interrupt */
	SET_BIT(USART1->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003620:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <uart1_init+0xc4>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <uart1_init+0xc4>)
 8003626:	2120      	movs	r1, #32
 8003628:	430a      	orrs	r2, r1
 800362a:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART1_IRQn);
 800362c:	201b      	movs	r0, #27
 800362e:	f7ff feef 	bl	8003410 <__NVIC_EnableIRQ>
	//uart1_dma_init();
//
	SET_BIT(USART1->CR1, USART_CR1_UE);
 8003632:	4b07      	ldr	r3, [pc, #28]	; (8003650 <uart1_init+0xc4>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <uart1_init+0xc4>)
 8003638:	2101      	movs	r1, #1
 800363a:	430a      	orrs	r2, r1
 800363c:	601a      	str	r2, [r3, #0]
}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	46bd      	mov	sp, r7
 8003642:	b006      	add	sp, #24
 8003644:	bd80      	pop	{r7, pc}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	40021000 	.word	0x40021000
 800364c:	00f42400 	.word	0x00f42400
 8003650:	40013800 	.word	0x40013800

08003654 <uart1_write>:
	/* set the destination buffer */
	/*set the source buffer */

}

void uart1_write(char ch) {
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	0002      	movs	r2, r0
 800365c:	1dfb      	adds	r3, r7, #7
 800365e:	701a      	strb	r2, [r3, #0]
	SET_BIT(GPIOA->ODR, GPIO_ODR_OD15);
 8003660:	23a0      	movs	r3, #160	; 0xa0
 8003662:	05db      	lsls	r3, r3, #23
 8003664:	695a      	ldr	r2, [r3, #20]
 8003666:	23a0      	movs	r3, #160	; 0xa0
 8003668:	05db      	lsls	r3, r3, #23
 800366a:	2180      	movs	r1, #128	; 0x80
 800366c:	0209      	lsls	r1, r1, #8
 800366e:	430a      	orrs	r2, r1
 8003670:	615a      	str	r2, [r3, #20]

	while (!READ_BIT(USART1->ISR, USART_ISR_TXE_TXFNF))
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <uart1_write+0x58>)
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	2280      	movs	r2, #128	; 0x80
 800367a:	4013      	ands	r3, r2
 800367c:	d0fa      	beq.n	8003674 <uart1_write+0x20>
		;
	USART1->TDR = (uint8_t) (ch & 0xFFU);
 800367e:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <uart1_write+0x58>)
 8003680:	1dfa      	adds	r2, r7, #7
 8003682:	7812      	ldrb	r2, [r2, #0]
 8003684:	629a      	str	r2, [r3, #40]	; 0x28

	while (!READ_BIT(USART1->ISR, USART_ISR_TC))
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	4b08      	ldr	r3, [pc, #32]	; (80036ac <uart1_write+0x58>)
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	2240      	movs	r2, #64	; 0x40
 800368e:	4013      	ands	r3, r2
 8003690:	d0fa      	beq.n	8003688 <uart1_write+0x34>
		;

	CLEAR_BIT(GPIOA->ODR, GPIO_ODR_OD15);
 8003692:	23a0      	movs	r3, #160	; 0xa0
 8003694:	05db      	lsls	r3, r3, #23
 8003696:	695a      	ldr	r2, [r3, #20]
 8003698:	23a0      	movs	r3, #160	; 0xa0
 800369a:	05db      	lsls	r3, r3, #23
 800369c:	4904      	ldr	r1, [pc, #16]	; (80036b0 <uart1_write+0x5c>)
 800369e:	400a      	ands	r2, r1
 80036a0:	615a      	str	r2, [r3, #20]
}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b002      	add	sp, #8
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	40013800 	.word	0x40013800
 80036b0:	ffff7fff 	.word	0xffff7fff

080036b4 <uart1_1byte_read>:
		}
		data[0] = USART1->RDR;
	}
}

uint8_t uart1_1byte_read(void) {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
	bool override = READ_BIT(USART1->ISR, USART_ISR_ORE);
 80036ba:	4b15      	ldr	r3, [pc, #84]	; (8003710 <uart1_1byte_read+0x5c>)
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	2208      	movs	r2, #8
 80036c0:	401a      	ands	r2, r3
 80036c2:	1dfb      	adds	r3, r7, #7
 80036c4:	1e51      	subs	r1, r2, #1
 80036c6:	418a      	sbcs	r2, r1
 80036c8:	701a      	strb	r2, [r3, #0]
	bool data_present = READ_BIT(USART1->ISR, USART_ISR_RXNE_RXFNE);
 80036ca:	4b11      	ldr	r3, [pc, #68]	; (8003710 <uart1_1byte_read+0x5c>)
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	2220      	movs	r2, #32
 80036d0:	401a      	ands	r2, r3
 80036d2:	1dbb      	adds	r3, r7, #6
 80036d4:	1e51      	subs	r1, r2, #1
 80036d6:	418a      	sbcs	r2, r1
 80036d8:	701a      	strb	r2, [r3, #0]
//	bool busy = READ_BIT(USART1->ISR, USART_ISR_BUSY);
	if ((data_present || override)) {
 80036da:	1dbb      	adds	r3, r7, #6
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d103      	bne.n	80036ea <uart1_1byte_read+0x36>
 80036e2:	1dfb      	adds	r3, r7, #7
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00d      	beq.n	8003706 <uart1_1byte_read+0x52>
		if (override)
 80036ea:	1dfb      	adds	r3, r7, #7
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <uart1_1byte_read+0x4a>
			SET_BIT(USART1->ICR, USART_ICR_ORECF);
 80036f2:	4b07      	ldr	r3, [pc, #28]	; (8003710 <uart1_1byte_read+0x5c>)
 80036f4:	6a1a      	ldr	r2, [r3, #32]
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <uart1_1byte_read+0x5c>)
 80036f8:	2108      	movs	r1, #8
 80036fa:	430a      	orrs	r2, r1
 80036fc:	621a      	str	r2, [r3, #32]
		return USART1->RDR;
 80036fe:	4b04      	ldr	r3, [pc, #16]	; (8003710 <uart1_1byte_read+0x5c>)
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	b2db      	uxtb	r3, r3
 8003704:	e000      	b.n	8003708 <uart1_1byte_read+0x54>
	} else
		return '\0';
 8003706:	2300      	movs	r3, #0
}
 8003708:	0018      	movs	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	b002      	add	sp, #8
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40013800 	.word	0x40013800

08003714 <uart1_read_to_frame>:

void  uart1_read_to_frame(UART1_t *u) {
 8003714:	b590      	push	{r4, r7, lr}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	if (u->rx_count >= RX_BUFFLEN) {
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	7a1b      	ldrb	r3, [r3, #8]
 8003720:	2b18      	cmp	r3, #24
 8003722:	d906      	bls.n	8003732 <uart1_read_to_frame+0x1e>
		uart1_clean_buffer(u);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	0018      	movs	r0, r3
 8003728:	f000 f863 	bl	80037f2 <uart1_clean_buffer>
		u->rx_count = 0;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	721a      	strb	r2, [r3, #8]
	}
	u->rx_buffer[u->rx_count++] = uart1_1byte_read();
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	7a1b      	ldrb	r3, [r3, #8]
 800373a:	1c59      	adds	r1, r3, #1
 800373c:	b2c8      	uxtb	r0, r1
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	7208      	strb	r0, [r1, #8]
 8003742:	18d4      	adds	r4, r2, r3
 8003744:	f7ff ffb6 	bl	80036b4 <uart1_1byte_read>
 8003748:	0003      	movs	r3, r0
 800374a:	7023      	strb	r3, [r4, #0]
}
 800374c:	46c0      	nop			; (mov r8, r8)
 800374e:	46bd      	mov	sp, r7
 8003750:	b003      	add	sp, #12
 8003752:	bd90      	pop	{r4, r7, pc}

08003754 <uart1_send_str>:

void uart1_send_str(char *str) {
 8003754:	b590      	push	{r4, r7, lr}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; str[i] != '\0'; i++){
 800375c:	230f      	movs	r3, #15
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	701a      	strb	r2, [r3, #0]
 8003764:	e015      	b.n	8003792 <uart1_send_str+0x3e>
		uart1_write(str[i]);
 8003766:	240f      	movs	r4, #15
 8003768:	193b      	adds	r3, r7, r4
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	0018      	movs	r0, r3
 8003774:	f7ff ff6e 	bl	8003654 <uart1_write>
		str[i] = "\0";
 8003778:	490c      	ldr	r1, [pc, #48]	; (80037ac <uart1_send_str+0x58>)
 800377a:	0020      	movs	r0, r4
 800377c:	183b      	adds	r3, r7, r0
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	18d3      	adds	r3, r2, r3
 8003784:	b2ca      	uxtb	r2, r1
 8003786:	701a      	strb	r2, [r3, #0]
	for (i = 0; str[i] != '\0'; i++){
 8003788:	183b      	adds	r3, r7, r0
 800378a:	781a      	ldrb	r2, [r3, #0]
 800378c:	183b      	adds	r3, r7, r0
 800378e:	3201      	adds	r2, #1
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	230f      	movs	r3, #15
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	18d3      	adds	r3, r2, r3
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1e1      	bne.n	8003766 <uart1_send_str+0x12>
	}
}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	46c0      	nop			; (mov r8, r8)
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b005      	add	sp, #20
 80037aa:	bd90      	pop	{r4, r7, pc}
 80037ac:	08006c20 	.word	0x08006c20

080037b0 <uart1_send_frame>:

void uart1_send_frame(char *str, uint8_t len) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	000a      	movs	r2, r1
 80037ba:	1cfb      	adds	r3, r7, #3
 80037bc:	701a      	strb	r2, [r3, #0]

	if (len > 0) {
 80037be:	1cfb      	adds	r3, r7, #3
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d011      	beq.n	80037ea <uart1_send_frame+0x3a>
		for (int i = 0; i < len; i++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	e009      	b.n	80037e0 <uart1_send_frame+0x30>
			uart1_write(str[i]);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	18d3      	adds	r3, r2, r3
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	0018      	movs	r0, r3
 80037d6:	f7ff ff3d 	bl	8003654 <uart1_write>
		for (int i = 0; i < len; i++)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	3301      	adds	r3, #1
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	1cfb      	adds	r3, r7, #3
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	dbf0      	blt.n	80037cc <uart1_send_frame+0x1c>
	}
}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b004      	add	sp, #16
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <uart1_clean_buffer>:

void uart1_clean_buffer(UART1_t *u) {
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
	u->rx_count = 0;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	721a      	strb	r2, [r3, #8]
	if (TX_BUFFLEN > RX_BUFFLEN) {
		for (int i = 0; i < TX_BUFFLEN; i++) {
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	e011      	b.n	800382a <uart1_clean_buffer+0x38>
			if (i < RX_BUFFLEN)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b18      	cmp	r3, #24
 800380a:	dc05      	bgt.n	8003818 <uart1_clean_buffer+0x26>
				u->rx_buffer[i] = 0x00;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	18d3      	adds	r3, r2, r3
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]
			u->tx_buffer[i] = 0x00;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	18d3      	adds	r3, r2, r3
 8003820:	2200      	movs	r2, #0
 8003822:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < TX_BUFFLEN; i++) {
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	3301      	adds	r3, #1
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b63      	cmp	r3, #99	; 0x63
 800382e:	ddea      	ble.n	8003806 <uart1_clean_buffer+0x14>
			if (i < TX_BUFFLEN)
				u->tx_buffer[i] = 0x00;
			u->rx_buffer[i] = 0x00;
		}
	}
}
 8003830:	46c0      	nop			; (mov r8, r8)
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	46bd      	mov	sp, r7
 8003836:	b004      	add	sp, #16
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <crc_get>:
#include "utils.h"

uint16_t crc_get(uint8_t* buffer, uint8_t buff_len) {
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	000a      	movs	r2, r1
 8003846:	1cfb      	adds	r3, r7, #3
 8003848:	701a      	strb	r2, [r3, #0]
	uint8_t b;
	uint8_t i;
	uint16_t generator = 0x1021; //divisor is 16bit
 800384a:	230a      	movs	r3, #10
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	4a2b      	ldr	r2, [pc, #172]	; (80038fc <crc_get+0xc0>)
 8003850:	801a      	strh	r2, [r3, #0]
	uint16_t crc = 0;			 // CRC value is 16bit
 8003852:	230c      	movs	r3, #12
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	2200      	movs	r2, #0
 8003858:	801a      	strh	r2, [r3, #0]

	for (b = 0; b < buff_len; b++) {
 800385a:	230f      	movs	r3, #15
 800385c:	18fb      	adds	r3, r7, r3
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]
 8003862:	e03d      	b.n	80038e0 <crc_get+0xa4>
		crc ^= ((uint16_t) (buffer[b] << 8)); // move byte into MSB of 16bit CRC
 8003864:	230f      	movs	r3, #15
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	18d3      	adds	r3, r2, r3
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	b29b      	uxth	r3, r3
 8003872:	021b      	lsls	r3, r3, #8
 8003874:	b299      	uxth	r1, r3
 8003876:	220c      	movs	r2, #12
 8003878:	18bb      	adds	r3, r7, r2
 800387a:	18ba      	adds	r2, r7, r2
 800387c:	8812      	ldrh	r2, [r2, #0]
 800387e:	404a      	eors	r2, r1
 8003880:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 8; i++) {
 8003882:	230e      	movs	r3, #14
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	2200      	movs	r2, #0
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	e01e      	b.n	80038ca <crc_get+0x8e>
			if ((crc & 0x8000) != 0) // test for MSB = bit 15
 800388c:	210c      	movs	r1, #12
 800388e:	187b      	adds	r3, r7, r1
 8003890:	2200      	movs	r2, #0
 8003892:	5e9b      	ldrsh	r3, [r3, r2]
 8003894:	2b00      	cmp	r3, #0
 8003896:	da0c      	bge.n	80038b2 <crc_get+0x76>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 8003898:	187b      	adds	r3, r7, r1
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	b21a      	sxth	r2, r3
 80038a0:	230a      	movs	r3, #10
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	2000      	movs	r0, #0
 80038a6:	5e1b      	ldrsh	r3, [r3, r0]
 80038a8:	4053      	eors	r3, r2
 80038aa:	b21a      	sxth	r2, r3
 80038ac:	187b      	adds	r3, r7, r1
 80038ae:	801a      	strh	r2, [r3, #0]
 80038b0:	e005      	b.n	80038be <crc_get+0x82>
			else
				crc <<= 1;
 80038b2:	230c      	movs	r3, #12
 80038b4:	18fa      	adds	r2, r7, r3
 80038b6:	18fb      	adds	r3, r7, r3
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	18db      	adds	r3, r3, r3
 80038bc:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
 80038be:	210e      	movs	r1, #14
 80038c0:	187b      	adds	r3, r7, r1
 80038c2:	781a      	ldrb	r2, [r3, #0]
 80038c4:	187b      	adds	r3, r7, r1
 80038c6:	3201      	adds	r2, #1
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	230e      	movs	r3, #14
 80038cc:	18fb      	adds	r3, r7, r3
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b07      	cmp	r3, #7
 80038d2:	d9db      	bls.n	800388c <crc_get+0x50>
	for (b = 0; b < buff_len; b++) {
 80038d4:	210f      	movs	r1, #15
 80038d6:	187b      	adds	r3, r7, r1
 80038d8:	781a      	ldrb	r2, [r3, #0]
 80038da:	187b      	adds	r3, r7, r1
 80038dc:	3201      	adds	r2, #1
 80038de:	701a      	strb	r2, [r3, #0]
 80038e0:	230f      	movs	r3, #15
 80038e2:	18fa      	adds	r2, r7, r3
 80038e4:	1cfb      	adds	r3, r7, #3
 80038e6:	7812      	ldrb	r2, [r2, #0]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d3ba      	bcc.n	8003864 <crc_get+0x28>
		}
	}
	return crc;
 80038ee:	230c      	movs	r3, #12
 80038f0:	18fb      	adds	r3, r7, r3
 80038f2:	881b      	ldrh	r3, [r3, #0]
}
 80038f4:	0018      	movs	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b004      	add	sp, #16
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	00001021 	.word	0x00001021

08003900 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003900:	480d      	ldr	r0, [pc, #52]	; (8003938 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003902:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003904:	f7ff fd7e 	bl	8003404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003908:	480c      	ldr	r0, [pc, #48]	; (800393c <LoopForever+0x6>)
  ldr r1, =_edata
 800390a:	490d      	ldr	r1, [pc, #52]	; (8003940 <LoopForever+0xa>)
  ldr r2, =_sidata
 800390c:	4a0d      	ldr	r2, [pc, #52]	; (8003944 <LoopForever+0xe>)
  movs r3, #0
 800390e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003910:	e002      	b.n	8003918 <LoopCopyDataInit>

08003912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003916:	3304      	adds	r3, #4

08003918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800391a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800391c:	d3f9      	bcc.n	8003912 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800391e:	4a0a      	ldr	r2, [pc, #40]	; (8003948 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003920:	4c0a      	ldr	r4, [pc, #40]	; (800394c <LoopForever+0x16>)
  movs r3, #0
 8003922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003924:	e001      	b.n	800392a <LoopFillZerobss>

08003926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003928:	3204      	adds	r2, #4

0800392a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800392a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800392c:	d3fb      	bcc.n	8003926 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800392e:	f002 fbb1 	bl	8006094 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003932:	f7fe fa81 	bl	8001e38 <main>

08003936 <LoopForever>:

LoopForever:
  b LoopForever
 8003936:	e7fe      	b.n	8003936 <LoopForever>
  ldr   r0, =_estack
 8003938:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800393c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003940:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003944:	08006dd4 	.word	0x08006dd4
  ldr r2, =_sbss
 8003948:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800394c:	2000028c 	.word	0x2000028c

08003950 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003950:	e7fe      	b.n	8003950 <ADC1_IRQHandler>
	...

08003954 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800395a:	1dfb      	adds	r3, r7, #7
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <HAL_Init+0x3c>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <HAL_Init+0x3c>)
 8003966:	2180      	movs	r1, #128	; 0x80
 8003968:	0049      	lsls	r1, r1, #1
 800396a:	430a      	orrs	r2, r1
 800396c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800396e:	2003      	movs	r0, #3
 8003970:	f000 f810 	bl	8003994 <HAL_InitTick>
 8003974:	1e03      	subs	r3, r0, #0
 8003976:	d003      	beq.n	8003980 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003978:	1dfb      	adds	r3, r7, #7
 800397a:	2201      	movs	r2, #1
 800397c:	701a      	strb	r2, [r3, #0]
 800397e:	e001      	b.n	8003984 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003980:	f7ff fc1a 	bl	80031b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003984:	1dfb      	adds	r3, r7, #7
 8003986:	781b      	ldrb	r3, [r3, #0]
}
 8003988:	0018      	movs	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	b002      	add	sp, #8
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40022000 	.word	0x40022000

08003994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003994:	b590      	push	{r4, r7, lr}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800399c:	230f      	movs	r3, #15
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80039a4:	4b1d      	ldr	r3, [pc, #116]	; (8003a1c <HAL_InitTick+0x88>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d02b      	beq.n	8003a04 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80039ac:	4b1c      	ldr	r3, [pc, #112]	; (8003a20 <HAL_InitTick+0x8c>)
 80039ae:	681c      	ldr	r4, [r3, #0]
 80039b0:	4b1a      	ldr	r3, [pc, #104]	; (8003a1c <HAL_InitTick+0x88>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	0019      	movs	r1, r3
 80039b6:	23fa      	movs	r3, #250	; 0xfa
 80039b8:	0098      	lsls	r0, r3, #2
 80039ba:	f7fc fbab 	bl	8000114 <__udivsi3>
 80039be:	0003      	movs	r3, r0
 80039c0:	0019      	movs	r1, r3
 80039c2:	0020      	movs	r0, r4
 80039c4:	f7fc fba6 	bl	8000114 <__udivsi3>
 80039c8:	0003      	movs	r3, r0
 80039ca:	0018      	movs	r0, r3
 80039cc:	f001 f97b 	bl	8004cc6 <HAL_SYSTICK_Config>
 80039d0:	1e03      	subs	r3, r0, #0
 80039d2:	d112      	bne.n	80039fa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d80a      	bhi.n	80039f0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	2301      	movs	r3, #1
 80039de:	425b      	negs	r3, r3
 80039e0:	2200      	movs	r2, #0
 80039e2:	0018      	movs	r0, r3
 80039e4:	f001 f94a 	bl	8004c7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80039e8:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <HAL_InitTick+0x90>)
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	e00d      	b.n	8003a0c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80039f0:	230f      	movs	r3, #15
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
 80039f8:	e008      	b.n	8003a0c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80039fa:	230f      	movs	r3, #15
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	2201      	movs	r2, #1
 8003a00:	701a      	strb	r2, [r3, #0]
 8003a02:	e003      	b.n	8003a0c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a04:	230f      	movs	r3, #15
 8003a06:	18fb      	adds	r3, r7, r3
 8003a08:	2201      	movs	r2, #1
 8003a0a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003a0c:	230f      	movs	r3, #15
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	781b      	ldrb	r3, [r3, #0]
}
 8003a12:	0018      	movs	r0, r3
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b005      	add	sp, #20
 8003a18:	bd90      	pop	{r4, r7, pc}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	20000008 	.word	0x20000008
 8003a20:	20000000 	.word	0x20000000
 8003a24:	20000004 	.word	0x20000004

08003a28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a2c:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <HAL_IncTick+0x1c>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	001a      	movs	r2, r3
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_IncTick+0x20>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	18d2      	adds	r2, r2, r3
 8003a38:	4b03      	ldr	r3, [pc, #12]	; (8003a48 <HAL_IncTick+0x20>)
 8003a3a:	601a      	str	r2, [r3, #0]
}
 8003a3c:	46c0      	nop			; (mov r8, r8)
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	20000008 	.word	0x20000008
 8003a48:	20000278 	.word	0x20000278

08003a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a50:	4b02      	ldr	r3, [pc, #8]	; (8003a5c <HAL_GetTick+0x10>)
 8003a52:	681b      	ldr	r3, [r3, #0]
}
 8003a54:	0018      	movs	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	20000278 	.word	0x20000278

08003a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a68:	f7ff fff0 	bl	8003a4c <HAL_GetTick>
 8003a6c:	0003      	movs	r3, r0
 8003a6e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	3301      	adds	r3, #1
 8003a78:	d005      	beq.n	8003a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <HAL_Delay+0x44>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	001a      	movs	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	189b      	adds	r3, r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	f7ff ffe0 	bl	8003a4c <HAL_GetTick>
 8003a8c:	0002      	movs	r2, r0
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d8f7      	bhi.n	8003a88 <HAL_Delay+0x28>
  {
  }
}
 8003a98:	46c0      	nop			; (mov r8, r8)
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	b004      	add	sp, #16
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	20000008 	.word	0x20000008

08003aa8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a05      	ldr	r2, [pc, #20]	; (8003acc <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003ab8:	401a      	ands	r2, r3
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	601a      	str	r2, [r3, #0]
}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	b002      	add	sp, #8
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	fe3fffff 	.word	0xfe3fffff

08003ad0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	23e0      	movs	r3, #224	; 0xe0
 8003ade:	045b      	lsls	r3, r3, #17
 8003ae0:	4013      	ands	r3, r2
}
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	b002      	add	sp, #8
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b084      	sub	sp, #16
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	2104      	movs	r1, #4
 8003afe:	400a      	ands	r2, r1
 8003b00:	2107      	movs	r1, #7
 8003b02:	4091      	lsls	r1, r2
 8003b04:	000a      	movs	r2, r1
 8003b06:	43d2      	mvns	r2, r2
 8003b08:	401a      	ands	r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2104      	movs	r1, #4
 8003b0e:	400b      	ands	r3, r1
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4099      	lsls	r1, r3
 8003b14:	000b      	movs	r3, r1
 8003b16:	431a      	orrs	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003b1c:	46c0      	nop			; (mov r8, r8)
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b004      	add	sp, #16
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	2104      	movs	r1, #4
 8003b36:	400a      	ands	r2, r1
 8003b38:	2107      	movs	r1, #7
 8003b3a:	4091      	lsls	r1, r2
 8003b3c:	000a      	movs	r2, r1
 8003b3e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2104      	movs	r1, #4
 8003b44:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003b46:	40da      	lsrs	r2, r3
 8003b48:	0013      	movs	r3, r2
}
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b002      	add	sp, #8
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	23c0      	movs	r3, #192	; 0xc0
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	4013      	ands	r3, r2
 8003b64:	d101      	bne.n	8003b6a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b002      	add	sp, #8
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	211f      	movs	r1, #31
 8003b88:	400a      	ands	r2, r1
 8003b8a:	210f      	movs	r1, #15
 8003b8c:	4091      	lsls	r1, r2
 8003b8e:	000a      	movs	r2, r1
 8003b90:	43d2      	mvns	r2, r2
 8003b92:	401a      	ands	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	0e9b      	lsrs	r3, r3, #26
 8003b98:	210f      	movs	r1, #15
 8003b9a:	4019      	ands	r1, r3
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	201f      	movs	r0, #31
 8003ba0:	4003      	ands	r3, r0
 8003ba2:	4099      	lsls	r1, r3
 8003ba4:	000b      	movs	r3, r1
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003bac:	46c0      	nop			; (mov r8, r8)
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b004      	add	sp, #16
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	035b      	lsls	r3, r3, #13
 8003bc6:	0b5b      	lsrs	r3, r3, #13
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b002      	add	sp, #8
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	0352      	lsls	r2, r2, #13
 8003be8:	0b52      	lsrs	r2, r2, #13
 8003bea:	43d2      	mvns	r2, r2
 8003bec:	401a      	ands	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	b002      	add	sp, #8
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	0212      	lsls	r2, r2, #8
 8003c10:	43d2      	mvns	r2, r2
 8003c12:	401a      	ands	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	021b      	lsls	r3, r3, #8
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	400b      	ands	r3, r1
 8003c1c:	4904      	ldr	r1, [pc, #16]	; (8003c30 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003c1e:	400b      	ands	r3, r1
 8003c20:	431a      	orrs	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b004      	add	sp, #16
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	07ffff00 	.word	0x07ffff00

08003c34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	4a05      	ldr	r2, [pc, #20]	; (8003c58 <LL_ADC_EnableInternalRegulator+0x24>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	2280      	movs	r2, #128	; 0x80
 8003c46:	0552      	lsls	r2, r2, #21
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	46bd      	mov	sp, r7
 8003c52:	b002      	add	sp, #8
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	6fffffe8 	.word	0x6fffffe8

08003c5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	2380      	movs	r3, #128	; 0x80
 8003c6a:	055b      	lsls	r3, r3, #21
 8003c6c:	401a      	ands	r2, r3
 8003c6e:	2380      	movs	r3, #128	; 0x80
 8003c70:	055b      	lsls	r3, r3, #21
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d101      	bne.n	8003c7a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b002      	add	sp, #8
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	4a04      	ldr	r2, [pc, #16]	; (8003ca4 <LL_ADC_Enable+0x20>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	2201      	movs	r2, #1
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003c9c:	46c0      	nop			; (mov r8, r8)
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b002      	add	sp, #8
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	7fffffe8 	.word	0x7fffffe8

08003ca8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	4a04      	ldr	r2, [pc, #16]	; (8003cc8 <LL_ADC_Disable+0x20>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2202      	movs	r2, #2
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b002      	add	sp, #8
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	7fffffe8 	.word	0x7fffffe8

08003ccc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <LL_ADC_IsEnabled+0x18>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <LL_ADC_IsEnabled+0x1a>
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b002      	add	sp, #8
 8003cec:	bd80      	pop	{r7, pc}

08003cee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d101      	bne.n	8003d06 <LL_ADC_IsDisableOngoing+0x18>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <LL_ADC_IsDisableOngoing+0x1a>
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	0018      	movs	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b002      	add	sp, #8
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	4a04      	ldr	r2, [pc, #16]	; (8003d30 <LL_ADC_REG_StartConversion+0x20>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2204      	movs	r2, #4
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003d28:	46c0      	nop			; (mov r8, r8)
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b002      	add	sp, #8
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	7fffffe8 	.word	0x7fffffe8

08003d34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2204      	movs	r2, #4
 8003d42:	4013      	ands	r3, r2
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d101      	bne.n	8003d4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	0018      	movs	r0, r3
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b002      	add	sp, #8
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d60:	231f      	movs	r3, #31
 8003d62:	18fb      	adds	r3, r7, r3
 8003d64:	2200      	movs	r2, #0
 8003d66:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e17f      	b.n	800407e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10a      	bne.n	8003d9c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f7ff fa39 	bl	8003200 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2254      	movs	r2, #84	; 0x54
 8003d98:	2100      	movs	r1, #0
 8003d9a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	0018      	movs	r0, r3
 8003da2:	f7ff ff5b 	bl	8003c5c <LL_ADC_IsInternalRegulatorEnabled>
 8003da6:	1e03      	subs	r3, r0, #0
 8003da8:	d115      	bne.n	8003dd6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	0018      	movs	r0, r3
 8003db0:	f7ff ff40 	bl	8003c34 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003db4:	4bb4      	ldr	r3, [pc, #720]	; (8004088 <HAL_ADC_Init+0x330>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	49b4      	ldr	r1, [pc, #720]	; (800408c <HAL_ADC_Init+0x334>)
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f7fc f9aa 	bl	8000114 <__udivsi3>
 8003dc0:	0003      	movs	r3, r0
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003dc8:	e002      	b.n	8003dd0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f9      	bne.n	8003dca <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f7ff ff3e 	bl	8003c5c <LL_ADC_IsInternalRegulatorEnabled>
 8003de0:	1e03      	subs	r3, r0, #0
 8003de2:	d10f      	bne.n	8003e04 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de8:	2210      	movs	r2, #16
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df4:	2201      	movs	r2, #1
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003dfc:	231f      	movs	r3, #31
 8003dfe:	18fb      	adds	r3, r7, r3
 8003e00:	2201      	movs	r2, #1
 8003e02:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f7ff ff93 	bl	8003d34 <LL_ADC_REG_IsConversionOngoing>
 8003e0e:	0003      	movs	r3, r0
 8003e10:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e16:	2210      	movs	r2, #16
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d000      	beq.n	8003e1e <HAL_ADC_Init+0xc6>
 8003e1c:	e122      	b.n	8004064 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d000      	beq.n	8003e26 <HAL_ADC_Init+0xce>
 8003e24:	e11e      	b.n	8004064 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2a:	4a99      	ldr	r2, [pc, #612]	; (8004090 <HAL_ADC_Init+0x338>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	2202      	movs	r2, #2
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f7ff ff46 	bl	8003ccc <LL_ADC_IsEnabled>
 8003e40:	1e03      	subs	r3, r0, #0
 8003e42:	d000      	beq.n	8003e46 <HAL_ADC_Init+0xee>
 8003e44:	e0ad      	b.n	8003fa2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	7e1b      	ldrb	r3, [r3, #24]
 8003e4e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003e50:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	7e5b      	ldrb	r3, [r3, #25]
 8003e56:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003e58:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	7e9b      	ldrb	r3, [r3, #26]
 8003e5e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003e60:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <HAL_ADC_Init+0x118>
 8003e6a:	2380      	movs	r3, #128	; 0x80
 8003e6c:	015b      	lsls	r3, r3, #5
 8003e6e:	e000      	b.n	8003e72 <HAL_ADC_Init+0x11a>
 8003e70:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003e72:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003e78:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	da04      	bge.n	8003e8c <HAL_ADC_Init+0x134>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	085b      	lsrs	r3, r3, #1
 8003e8a:	e001      	b.n	8003e90 <HAL_ADC_Init+0x138>
 8003e8c:	2380      	movs	r3, #128	; 0x80
 8003e8e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8003e90:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	212c      	movs	r1, #44	; 0x2c
 8003e96:	5c5b      	ldrb	r3, [r3, r1]
 8003e98:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003e9a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	5c9b      	ldrb	r3, [r3, r2]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d115      	bne.n	8003ed8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	7e9b      	ldrb	r3, [r3, #26]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d105      	bne.n	8003ec0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	2280      	movs	r2, #128	; 0x80
 8003eb8:	0252      	lsls	r2, r2, #9
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	e00b      	b.n	8003ed8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ee4:	23e0      	movs	r3, #224	; 0xe0
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4a65      	ldr	r2, [pc, #404]	; (8004094 <HAL_ADC_Init+0x33c>)
 8003efe:	4013      	ands	r3, r2
 8003f00:	0019      	movs	r1, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	0f9b      	lsrs	r3, r3, #30
 8003f12:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	223c      	movs	r2, #60	; 0x3c
 8003f24:	5c9b      	ldrb	r3, [r3, r2]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d111      	bne.n	8003f4e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	0f9b      	lsrs	r3, r3, #30
 8003f30:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f36:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003f3c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003f42:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	2201      	movs	r2, #1
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	4a50      	ldr	r2, [pc, #320]	; (8004098 <HAL_ADC_Init+0x340>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	0019      	movs	r1, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	23c0      	movs	r3, #192	; 0xc0
 8003f6a:	061b      	lsls	r3, r3, #24
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d018      	beq.n	8003fa2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003f74:	2380      	movs	r3, #128	; 0x80
 8003f76:	05db      	lsls	r3, r3, #23
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d012      	beq.n	8003fa2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003f80:	2380      	movs	r3, #128	; 0x80
 8003f82:	061b      	lsls	r3, r3, #24
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d00c      	beq.n	8003fa2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003f88:	4b44      	ldr	r3, [pc, #272]	; (800409c <HAL_ADC_Init+0x344>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a44      	ldr	r2, [pc, #272]	; (80040a0 <HAL_ADC_Init+0x348>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	0019      	movs	r1, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	23f0      	movs	r3, #240	; 0xf0
 8003f98:	039b      	lsls	r3, r3, #14
 8003f9a:	401a      	ands	r2, r3
 8003f9c:	4b3f      	ldr	r3, [pc, #252]	; (800409c <HAL_ADC_Init+0x344>)
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003faa:	001a      	movs	r2, r3
 8003fac:	2100      	movs	r1, #0
 8003fae:	f7ff fd9c 	bl	8003aea <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	493a      	ldr	r1, [pc, #232]	; (80040a4 <HAL_ADC_Init+0x34c>)
 8003fbc:	001a      	movs	r2, r3
 8003fbe:	f7ff fd94 	bl	8003aea <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2110      	movs	r1, #16
 8003fd6:	4249      	negs	r1, r1
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	629a      	str	r2, [r3, #40]	; 0x28
 8003fdc:	e018      	b.n	8004010 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	2380      	movs	r3, #128	; 0x80
 8003fe4:	039b      	lsls	r3, r3, #14
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d112      	bne.n	8004010 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	221c      	movs	r2, #28
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	4252      	negs	r2, r2
 8004000:	409a      	lsls	r2, r3
 8004002:	0011      	movs	r1, r2
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2100      	movs	r1, #0
 8004016:	0018      	movs	r0, r3
 8004018:	f7ff fd84 	bl	8003b24 <LL_ADC_GetSamplingTimeCommonChannels>
 800401c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004022:	429a      	cmp	r2, r3
 8004024:	d10b      	bne.n	800403e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004030:	2203      	movs	r2, #3
 8004032:	4393      	bics	r3, r2
 8004034:	2201      	movs	r2, #1
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800403c:	e01c      	b.n	8004078 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004042:	2212      	movs	r2, #18
 8004044:	4393      	bics	r3, r2
 8004046:	2210      	movs	r2, #16
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004052:	2201      	movs	r2, #1
 8004054:	431a      	orrs	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800405a:	231f      	movs	r3, #31
 800405c:	18fb      	adds	r3, r7, r3
 800405e:	2201      	movs	r2, #1
 8004060:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004062:	e009      	b.n	8004078 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004068:	2210      	movs	r2, #16
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004070:	231f      	movs	r3, #31
 8004072:	18fb      	adds	r3, r7, r3
 8004074:	2201      	movs	r2, #1
 8004076:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004078:	231f      	movs	r3, #31
 800407a:	18fb      	adds	r3, r7, r3
 800407c:	781b      	ldrb	r3, [r3, #0]
}
 800407e:	0018      	movs	r0, r3
 8004080:	46bd      	mov	sp, r7
 8004082:	b008      	add	sp, #32
 8004084:	bd80      	pop	{r7, pc}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	20000000 	.word	0x20000000
 800408c:	00030d40 	.word	0x00030d40
 8004090:	fffffefd 	.word	0xfffffefd
 8004094:	fffe0201 	.word	0xfffe0201
 8004098:	1ffffc02 	.word	0x1ffffc02
 800409c:	40012708 	.word	0x40012708
 80040a0:	ffc3ffff 	.word	0xffc3ffff
 80040a4:	07ffff04 	.word	0x07ffff04

080040a8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80040a8:	b5b0      	push	{r4, r5, r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	0018      	movs	r0, r3
 80040ba:	f7ff fe3b 	bl	8003d34 <LL_ADC_REG_IsConversionOngoing>
 80040be:	1e03      	subs	r3, r0, #0
 80040c0:	d16c      	bne.n	800419c <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2254      	movs	r2, #84	; 0x54
 80040c6:	5c9b      	ldrb	r3, [r3, r2]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_ADC_Start_DMA+0x28>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e06c      	b.n	80041aa <HAL_ADC_Start_DMA+0x102>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2254      	movs	r2, #84	; 0x54
 80040d4:	2101      	movs	r1, #1
 80040d6:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	4013      	ands	r3, r2
 80040e2:	d113      	bne.n	800410c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	0018      	movs	r0, r3
 80040ea:	f7ff fdef 	bl	8003ccc <LL_ADC_IsEnabled>
 80040ee:	1e03      	subs	r3, r0, #0
 80040f0:	d004      	beq.n	80040fc <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	0018      	movs	r0, r3
 80040f8:	f7ff fdd6 	bl	8003ca8 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2101      	movs	r1, #1
 8004108:	430a      	orrs	r2, r1
 800410a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800410c:	2517      	movs	r5, #23
 800410e:	197c      	adds	r4, r7, r5
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	0018      	movs	r0, r3
 8004114:	f000 fa3e 	bl	8004594 <ADC_Enable>
 8004118:	0003      	movs	r3, r0
 800411a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800411c:	002c      	movs	r4, r5
 800411e:	193b      	adds	r3, r7, r4
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d13e      	bne.n	80041a4 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412a:	4a22      	ldr	r2, [pc, #136]	; (80041b4 <HAL_ADC_Start_DMA+0x10c>)
 800412c:	4013      	ands	r3, r2
 800412e:	2280      	movs	r2, #128	; 0x80
 8004130:	0052      	lsls	r2, r2, #1
 8004132:	431a      	orrs	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004142:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <HAL_ADC_Start_DMA+0x110>)
 8004144:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800414a:	4a1c      	ldr	r2, [pc, #112]	; (80041bc <HAL_ADC_Start_DMA+0x114>)
 800414c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004152:	4a1b      	ldr	r2, [pc, #108]	; (80041c0 <HAL_ADC_Start_DMA+0x118>)
 8004154:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	221c      	movs	r2, #28
 800415c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2254      	movs	r2, #84	; 0x54
 8004162:	2100      	movs	r1, #0
 8004164:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2110      	movs	r1, #16
 8004172:	430a      	orrs	r2, r1
 8004174:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3340      	adds	r3, #64	; 0x40
 8004180:	0019      	movs	r1, r3
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	193c      	adds	r4, r7, r4
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f000 fe34 	bl	8004df4 <HAL_DMA_Start_IT>
 800418c:	0003      	movs	r3, r0
 800418e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	0018      	movs	r0, r3
 8004196:	f7ff fdbb 	bl	8003d10 <LL_ADC_REG_StartConversion>
 800419a:	e003      	b.n	80041a4 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800419c:	2317      	movs	r3, #23
 800419e:	18fb      	adds	r3, r7, r3
 80041a0:	2202      	movs	r2, #2
 80041a2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80041a4:	2317      	movs	r3, #23
 80041a6:	18fb      	adds	r3, r7, r3
 80041a8:	781b      	ldrb	r3, [r3, #0]
}
 80041aa:	0018      	movs	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	b006      	add	sp, #24
 80041b0:	bdb0      	pop	{r4, r5, r7, pc}
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	fffff0fe 	.word	0xfffff0fe
 80041b8:	0800475d 	.word	0x0800475d
 80041bc:	08004825 	.word	0x08004825
 80041c0:	08004843 	.word	0x08004843

080041c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80041cc:	46c0      	nop			; (mov r8, r8)
 80041ce:	46bd      	mov	sp, r7
 80041d0:	b002      	add	sp, #8
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80041dc:	46c0      	nop			; (mov r8, r8)
 80041de:	46bd      	mov	sp, r7
 80041e0:	b002      	add	sp, #8
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041ee:	2317      	movs	r3, #23
 80041f0:	18fb      	adds	r3, r7, r3
 80041f2:	2200      	movs	r2, #0
 80041f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2254      	movs	r2, #84	; 0x54
 80041fe:	5c9b      	ldrb	r3, [r3, r2]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x24>
 8004204:	2302      	movs	r3, #2
 8004206:	e1c0      	b.n	800458a <HAL_ADC_ConfigChannel+0x3a6>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2254      	movs	r2, #84	; 0x54
 800420c:	2101      	movs	r1, #1
 800420e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	0018      	movs	r0, r3
 8004216:	f7ff fd8d 	bl	8003d34 <LL_ADC_REG_IsConversionOngoing>
 800421a:	1e03      	subs	r3, r0, #0
 800421c:	d000      	beq.n	8004220 <HAL_ADC_ConfigChannel+0x3c>
 800421e:	e1a3      	b.n	8004568 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b02      	cmp	r3, #2
 8004226:	d100      	bne.n	800422a <HAL_ADC_ConfigChannel+0x46>
 8004228:	e143      	b.n	80044b2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	2380      	movs	r3, #128	; 0x80
 8004230:	061b      	lsls	r3, r3, #24
 8004232:	429a      	cmp	r2, r3
 8004234:	d004      	beq.n	8004240 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800423a:	4ac1      	ldr	r2, [pc, #772]	; (8004540 <HAL_ADC_ConfigChannel+0x35c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d108      	bne.n	8004252 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	0019      	movs	r1, r3
 800424a:	0010      	movs	r0, r2
 800424c:	f7ff fcb2 	bl	8003bb4 <LL_ADC_REG_SetSequencerChAdd>
 8004250:	e0c9      	b.n	80043e6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	211f      	movs	r1, #31
 800425c:	400b      	ands	r3, r1
 800425e:	210f      	movs	r1, #15
 8004260:	4099      	lsls	r1, r3
 8004262:	000b      	movs	r3, r1
 8004264:	43db      	mvns	r3, r3
 8004266:	4013      	ands	r3, r2
 8004268:	0019      	movs	r1, r3
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	035b      	lsls	r3, r3, #13
 8004270:	0b5b      	lsrs	r3, r3, #13
 8004272:	d105      	bne.n	8004280 <HAL_ADC_ConfigChannel+0x9c>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	0e9b      	lsrs	r3, r3, #26
 800427a:	221f      	movs	r2, #31
 800427c:	4013      	ands	r3, r2
 800427e:	e098      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x1ce>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2201      	movs	r2, #1
 8004286:	4013      	ands	r3, r2
 8004288:	d000      	beq.n	800428c <HAL_ADC_ConfigChannel+0xa8>
 800428a:	e091      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x1cc>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2202      	movs	r2, #2
 8004292:	4013      	ands	r3, r2
 8004294:	d000      	beq.n	8004298 <HAL_ADC_ConfigChannel+0xb4>
 8004296:	e089      	b.n	80043ac <HAL_ADC_ConfigChannel+0x1c8>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2204      	movs	r2, #4
 800429e:	4013      	ands	r3, r2
 80042a0:	d000      	beq.n	80042a4 <HAL_ADC_ConfigChannel+0xc0>
 80042a2:	e081      	b.n	80043a8 <HAL_ADC_ConfigChannel+0x1c4>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2208      	movs	r2, #8
 80042aa:	4013      	ands	r3, r2
 80042ac:	d000      	beq.n	80042b0 <HAL_ADC_ConfigChannel+0xcc>
 80042ae:	e079      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x1c0>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2210      	movs	r2, #16
 80042b6:	4013      	ands	r3, r2
 80042b8:	d000      	beq.n	80042bc <HAL_ADC_ConfigChannel+0xd8>
 80042ba:	e071      	b.n	80043a0 <HAL_ADC_ConfigChannel+0x1bc>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2220      	movs	r2, #32
 80042c2:	4013      	ands	r3, r2
 80042c4:	d000      	beq.n	80042c8 <HAL_ADC_ConfigChannel+0xe4>
 80042c6:	e069      	b.n	800439c <HAL_ADC_ConfigChannel+0x1b8>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2240      	movs	r2, #64	; 0x40
 80042ce:	4013      	ands	r3, r2
 80042d0:	d000      	beq.n	80042d4 <HAL_ADC_ConfigChannel+0xf0>
 80042d2:	e061      	b.n	8004398 <HAL_ADC_ConfigChannel+0x1b4>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2280      	movs	r2, #128	; 0x80
 80042da:	4013      	ands	r3, r2
 80042dc:	d000      	beq.n	80042e0 <HAL_ADC_ConfigChannel+0xfc>
 80042de:	e059      	b.n	8004394 <HAL_ADC_ConfigChannel+0x1b0>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	4013      	ands	r3, r2
 80042ea:	d151      	bne.n	8004390 <HAL_ADC_ConfigChannel+0x1ac>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	2380      	movs	r3, #128	; 0x80
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4013      	ands	r3, r2
 80042f6:	d149      	bne.n	800438c <HAL_ADC_ConfigChannel+0x1a8>
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	2380      	movs	r3, #128	; 0x80
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4013      	ands	r3, r2
 8004302:	d141      	bne.n	8004388 <HAL_ADC_ConfigChannel+0x1a4>
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	2380      	movs	r3, #128	; 0x80
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	4013      	ands	r3, r2
 800430e:	d139      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x1a0>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	015b      	lsls	r3, r3, #5
 8004318:	4013      	ands	r3, r2
 800431a:	d131      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x19c>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	019b      	lsls	r3, r3, #6
 8004324:	4013      	ands	r3, r2
 8004326:	d129      	bne.n	800437c <HAL_ADC_ConfigChannel+0x198>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	2380      	movs	r3, #128	; 0x80
 800432e:	01db      	lsls	r3, r3, #7
 8004330:	4013      	ands	r3, r2
 8004332:	d121      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x194>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	2380      	movs	r3, #128	; 0x80
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	4013      	ands	r3, r2
 800433e:	d119      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x190>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	2380      	movs	r3, #128	; 0x80
 8004346:	025b      	lsls	r3, r3, #9
 8004348:	4013      	ands	r3, r2
 800434a:	d111      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x18c>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	2380      	movs	r3, #128	; 0x80
 8004352:	029b      	lsls	r3, r3, #10
 8004354:	4013      	ands	r3, r2
 8004356:	d109      	bne.n	800436c <HAL_ADC_ConfigChannel+0x188>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	2380      	movs	r3, #128	; 0x80
 800435e:	02db      	lsls	r3, r3, #11
 8004360:	4013      	ands	r3, r2
 8004362:	d001      	beq.n	8004368 <HAL_ADC_ConfigChannel+0x184>
 8004364:	2312      	movs	r3, #18
 8004366:	e024      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x1ce>
 8004368:	2300      	movs	r3, #0
 800436a:	e022      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x1ce>
 800436c:	2311      	movs	r3, #17
 800436e:	e020      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x1ce>
 8004370:	2310      	movs	r3, #16
 8004372:	e01e      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x1ce>
 8004374:	230f      	movs	r3, #15
 8004376:	e01c      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x1ce>
 8004378:	230e      	movs	r3, #14
 800437a:	e01a      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x1ce>
 800437c:	230d      	movs	r3, #13
 800437e:	e018      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x1ce>
 8004380:	230c      	movs	r3, #12
 8004382:	e016      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x1ce>
 8004384:	230b      	movs	r3, #11
 8004386:	e014      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x1ce>
 8004388:	230a      	movs	r3, #10
 800438a:	e012      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x1ce>
 800438c:	2309      	movs	r3, #9
 800438e:	e010      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x1ce>
 8004390:	2308      	movs	r3, #8
 8004392:	e00e      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x1ce>
 8004394:	2307      	movs	r3, #7
 8004396:	e00c      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x1ce>
 8004398:	2306      	movs	r3, #6
 800439a:	e00a      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x1ce>
 800439c:	2305      	movs	r3, #5
 800439e:	e008      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x1ce>
 80043a0:	2304      	movs	r3, #4
 80043a2:	e006      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x1ce>
 80043a4:	2303      	movs	r3, #3
 80043a6:	e004      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x1ce>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e002      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x1ce>
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x1ce>
 80043b0:	2300      	movs	r3, #0
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	6852      	ldr	r2, [r2, #4]
 80043b6:	201f      	movs	r0, #31
 80043b8:	4002      	ands	r2, r0
 80043ba:	4093      	lsls	r3, r2
 80043bc:	000a      	movs	r2, r1
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	089b      	lsrs	r3, r3, #2
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d808      	bhi.n	80043e6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6859      	ldr	r1, [r3, #4]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	001a      	movs	r2, r3
 80043e2:	f7ff fbc7 	bl	8003b74 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6819      	ldr	r1, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	001a      	movs	r2, r3
 80043f4:	f7ff fc02 	bl	8003bfc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	db00      	blt.n	8004402 <HAL_ADC_ConfigChannel+0x21e>
 8004400:	e0bc      	b.n	800457c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004402:	4b50      	ldr	r3, [pc, #320]	; (8004544 <HAL_ADC_ConfigChannel+0x360>)
 8004404:	0018      	movs	r0, r3
 8004406:	f7ff fb63 	bl	8003ad0 <LL_ADC_GetCommonPathInternalCh>
 800440a:	0003      	movs	r3, r0
 800440c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a4d      	ldr	r2, [pc, #308]	; (8004548 <HAL_ADC_ConfigChannel+0x364>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d122      	bne.n	800445e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	2380      	movs	r3, #128	; 0x80
 800441c:	041b      	lsls	r3, r3, #16
 800441e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004420:	d11d      	bne.n	800445e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2280      	movs	r2, #128	; 0x80
 8004426:	0412      	lsls	r2, r2, #16
 8004428:	4313      	orrs	r3, r2
 800442a:	4a46      	ldr	r2, [pc, #280]	; (8004544 <HAL_ADC_ConfigChannel+0x360>)
 800442c:	0019      	movs	r1, r3
 800442e:	0010      	movs	r0, r2
 8004430:	f7ff fb3a 	bl	8003aa8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004434:	4b45      	ldr	r3, [pc, #276]	; (800454c <HAL_ADC_ConfigChannel+0x368>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4945      	ldr	r1, [pc, #276]	; (8004550 <HAL_ADC_ConfigChannel+0x36c>)
 800443a:	0018      	movs	r0, r3
 800443c:	f7fb fe6a 	bl	8000114 <__udivsi3>
 8004440:	0003      	movs	r3, r0
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	0013      	movs	r3, r2
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	189b      	adds	r3, r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800444e:	e002      	b.n	8004456 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	3b01      	subs	r3, #1
 8004454:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1f9      	bne.n	8004450 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800445c:	e08e      	b.n	800457c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a3c      	ldr	r2, [pc, #240]	; (8004554 <HAL_ADC_ConfigChannel+0x370>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d10e      	bne.n	8004486 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	2380      	movs	r3, #128	; 0x80
 800446c:	045b      	lsls	r3, r3, #17
 800446e:	4013      	ands	r3, r2
 8004470:	d109      	bne.n	8004486 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2280      	movs	r2, #128	; 0x80
 8004476:	0452      	lsls	r2, r2, #17
 8004478:	4313      	orrs	r3, r2
 800447a:	4a32      	ldr	r2, [pc, #200]	; (8004544 <HAL_ADC_ConfigChannel+0x360>)
 800447c:	0019      	movs	r1, r3
 800447e:	0010      	movs	r0, r2
 8004480:	f7ff fb12 	bl	8003aa8 <LL_ADC_SetCommonPathInternalCh>
 8004484:	e07a      	b.n	800457c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a33      	ldr	r2, [pc, #204]	; (8004558 <HAL_ADC_ConfigChannel+0x374>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d000      	beq.n	8004492 <HAL_ADC_ConfigChannel+0x2ae>
 8004490:	e074      	b.n	800457c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	2380      	movs	r3, #128	; 0x80
 8004496:	03db      	lsls	r3, r3, #15
 8004498:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800449a:	d000      	beq.n	800449e <HAL_ADC_ConfigChannel+0x2ba>
 800449c:	e06e      	b.n	800457c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	2280      	movs	r2, #128	; 0x80
 80044a2:	03d2      	lsls	r2, r2, #15
 80044a4:	4313      	orrs	r3, r2
 80044a6:	4a27      	ldr	r2, [pc, #156]	; (8004544 <HAL_ADC_ConfigChannel+0x360>)
 80044a8:	0019      	movs	r1, r3
 80044aa:	0010      	movs	r0, r2
 80044ac:	f7ff fafc 	bl	8003aa8 <LL_ADC_SetCommonPathInternalCh>
 80044b0:	e064      	b.n	800457c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	2380      	movs	r3, #128	; 0x80
 80044b8:	061b      	lsls	r3, r3, #24
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d004      	beq.n	80044c8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80044c2:	4a1f      	ldr	r2, [pc, #124]	; (8004540 <HAL_ADC_ConfigChannel+0x35c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d107      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	0019      	movs	r1, r3
 80044d2:	0010      	movs	r0, r2
 80044d4:	f7ff fb7f 	bl	8003bd6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	da4d      	bge.n	800457c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044e0:	4b18      	ldr	r3, [pc, #96]	; (8004544 <HAL_ADC_ConfigChannel+0x360>)
 80044e2:	0018      	movs	r0, r3
 80044e4:	f7ff faf4 	bl	8003ad0 <LL_ADC_GetCommonPathInternalCh>
 80044e8:	0003      	movs	r3, r0
 80044ea:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a15      	ldr	r2, [pc, #84]	; (8004548 <HAL_ADC_ConfigChannel+0x364>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d108      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4a18      	ldr	r2, [pc, #96]	; (800455c <HAL_ADC_ConfigChannel+0x378>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	4a11      	ldr	r2, [pc, #68]	; (8004544 <HAL_ADC_ConfigChannel+0x360>)
 80044fe:	0019      	movs	r1, r3
 8004500:	0010      	movs	r0, r2
 8004502:	f7ff fad1 	bl	8003aa8 <LL_ADC_SetCommonPathInternalCh>
 8004506:	e039      	b.n	800457c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a11      	ldr	r2, [pc, #68]	; (8004554 <HAL_ADC_ConfigChannel+0x370>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d108      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4a12      	ldr	r2, [pc, #72]	; (8004560 <HAL_ADC_ConfigChannel+0x37c>)
 8004516:	4013      	ands	r3, r2
 8004518:	4a0a      	ldr	r2, [pc, #40]	; (8004544 <HAL_ADC_ConfigChannel+0x360>)
 800451a:	0019      	movs	r1, r3
 800451c:	0010      	movs	r0, r2
 800451e:	f7ff fac3 	bl	8003aa8 <LL_ADC_SetCommonPathInternalCh>
 8004522:	e02b      	b.n	800457c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a0b      	ldr	r2, [pc, #44]	; (8004558 <HAL_ADC_ConfigChannel+0x374>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d126      	bne.n	800457c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	4a0c      	ldr	r2, [pc, #48]	; (8004564 <HAL_ADC_ConfigChannel+0x380>)
 8004532:	4013      	ands	r3, r2
 8004534:	4a03      	ldr	r2, [pc, #12]	; (8004544 <HAL_ADC_ConfigChannel+0x360>)
 8004536:	0019      	movs	r1, r3
 8004538:	0010      	movs	r0, r2
 800453a:	f7ff fab5 	bl	8003aa8 <LL_ADC_SetCommonPathInternalCh>
 800453e:	e01d      	b.n	800457c <HAL_ADC_ConfigChannel+0x398>
 8004540:	80000004 	.word	0x80000004
 8004544:	40012708 	.word	0x40012708
 8004548:	b0001000 	.word	0xb0001000
 800454c:	20000000 	.word	0x20000000
 8004550:	00030d40 	.word	0x00030d40
 8004554:	b8004000 	.word	0xb8004000
 8004558:	b4002000 	.word	0xb4002000
 800455c:	ff7fffff 	.word	0xff7fffff
 8004560:	feffffff 	.word	0xfeffffff
 8004564:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456c:	2220      	movs	r2, #32
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004574:	2317      	movs	r3, #23
 8004576:	18fb      	adds	r3, r7, r3
 8004578:	2201      	movs	r2, #1
 800457a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2254      	movs	r2, #84	; 0x54
 8004580:	2100      	movs	r1, #0
 8004582:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004584:	2317      	movs	r3, #23
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	781b      	ldrb	r3, [r3, #0]
}
 800458a:	0018      	movs	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	b006      	add	sp, #24
 8004590:	bd80      	pop	{r7, pc}
 8004592:	46c0      	nop			; (mov r8, r8)

08004594 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800459c:	2300      	movs	r3, #0
 800459e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	0018      	movs	r0, r3
 80045a6:	f7ff fb91 	bl	8003ccc <LL_ADC_IsEnabled>
 80045aa:	1e03      	subs	r3, r0, #0
 80045ac:	d000      	beq.n	80045b0 <ADC_Enable+0x1c>
 80045ae:	e069      	b.n	8004684 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	4a36      	ldr	r2, [pc, #216]	; (8004690 <ADC_Enable+0xfc>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	d00d      	beq.n	80045d8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c0:	2210      	movs	r2, #16
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045cc:	2201      	movs	r2, #1
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e056      	b.n	8004686 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	0018      	movs	r0, r3
 80045de:	f7ff fb51 	bl	8003c84 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80045e2:	4b2c      	ldr	r3, [pc, #176]	; (8004694 <ADC_Enable+0x100>)
 80045e4:	0018      	movs	r0, r3
 80045e6:	f7ff fa73 	bl	8003ad0 <LL_ADC_GetCommonPathInternalCh>
 80045ea:	0002      	movs	r2, r0
 80045ec:	2380      	movs	r3, #128	; 0x80
 80045ee:	041b      	lsls	r3, r3, #16
 80045f0:	4013      	ands	r3, r2
 80045f2:	d00f      	beq.n	8004614 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045f4:	4b28      	ldr	r3, [pc, #160]	; (8004698 <ADC_Enable+0x104>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4928      	ldr	r1, [pc, #160]	; (800469c <ADC_Enable+0x108>)
 80045fa:	0018      	movs	r0, r3
 80045fc:	f7fb fd8a 	bl	8000114 <__udivsi3>
 8004600:	0003      	movs	r3, r0
 8004602:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004604:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004606:	e002      	b.n	800460e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	3b01      	subs	r3, #1
 800460c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f9      	bne.n	8004608 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	7e5b      	ldrb	r3, [r3, #25]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d033      	beq.n	8004684 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800461c:	f7ff fa16 	bl	8003a4c <HAL_GetTick>
 8004620:	0003      	movs	r3, r0
 8004622:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004624:	e027      	b.n	8004676 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	0018      	movs	r0, r3
 800462c:	f7ff fb4e 	bl	8003ccc <LL_ADC_IsEnabled>
 8004630:	1e03      	subs	r3, r0, #0
 8004632:	d104      	bne.n	800463e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	0018      	movs	r0, r3
 800463a:	f7ff fb23 	bl	8003c84 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800463e:	f7ff fa05 	bl	8003a4c <HAL_GetTick>
 8004642:	0002      	movs	r2, r0
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d914      	bls.n	8004676 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2201      	movs	r2, #1
 8004654:	4013      	ands	r3, r2
 8004656:	2b01      	cmp	r3, #1
 8004658:	d00d      	beq.n	8004676 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465e:	2210      	movs	r2, #16
 8004660:	431a      	orrs	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466a:	2201      	movs	r2, #1
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e007      	b.n	8004686 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2201      	movs	r2, #1
 800467e:	4013      	ands	r3, r2
 8004680:	2b01      	cmp	r3, #1
 8004682:	d1d0      	bne.n	8004626 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	0018      	movs	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	b004      	add	sp, #16
 800468c:	bd80      	pop	{r7, pc}
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	80000017 	.word	0x80000017
 8004694:	40012708 	.word	0x40012708
 8004698:	20000000 	.word	0x20000000
 800469c:	00030d40 	.word	0x00030d40

080046a0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	0018      	movs	r0, r3
 80046ae:	f7ff fb1e 	bl	8003cee <LL_ADC_IsDisableOngoing>
 80046b2:	0003      	movs	r3, r0
 80046b4:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	0018      	movs	r0, r3
 80046bc:	f7ff fb06 	bl	8003ccc <LL_ADC_IsEnabled>
 80046c0:	1e03      	subs	r3, r0, #0
 80046c2:	d046      	beq.n	8004752 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d143      	bne.n	8004752 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2205      	movs	r2, #5
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d10d      	bne.n	80046f4 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	0018      	movs	r0, r3
 80046de:	f7ff fae3 	bl	8003ca8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2203      	movs	r2, #3
 80046e8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046ea:	f7ff f9af 	bl	8003a4c <HAL_GetTick>
 80046ee:	0003      	movs	r3, r0
 80046f0:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046f2:	e028      	b.n	8004746 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f8:	2210      	movs	r2, #16
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004704:	2201      	movs	r2, #1
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e021      	b.n	8004754 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004710:	f7ff f99c 	bl	8003a4c <HAL_GetTick>
 8004714:	0002      	movs	r2, r0
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d913      	bls.n	8004746 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2201      	movs	r2, #1
 8004726:	4013      	ands	r3, r2
 8004728:	d00d      	beq.n	8004746 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472e:	2210      	movs	r2, #16
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473a:	2201      	movs	r2, #1
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e006      	b.n	8004754 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	2201      	movs	r2, #1
 800474e:	4013      	ands	r3, r2
 8004750:	d1de      	bne.n	8004710 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	0018      	movs	r0, r3
 8004756:	46bd      	mov	sp, r7
 8004758:	b004      	add	sp, #16
 800475a:	bd80      	pop	{r7, pc}

0800475c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004768:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476e:	2250      	movs	r2, #80	; 0x50
 8004770:	4013      	ands	r3, r2
 8004772:	d141      	bne.n	80047f8 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004778:	2280      	movs	r2, #128	; 0x80
 800477a:	0092      	lsls	r2, r2, #2
 800477c:	431a      	orrs	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	0018      	movs	r0, r3
 8004788:	f7ff f9e3 	bl	8003b52 <LL_ADC_REG_IsTriggerSourceSWStart>
 800478c:	1e03      	subs	r3, r0, #0
 800478e:	d02e      	beq.n	80047ee <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	7e9b      	ldrb	r3, [r3, #26]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d12a      	bne.n	80047ee <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2208      	movs	r2, #8
 80047a0:	4013      	ands	r3, r2
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d123      	bne.n	80047ee <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	0018      	movs	r0, r3
 80047ac:	f7ff fac2 	bl	8003d34 <LL_ADC_REG_IsConversionOngoing>
 80047b0:	1e03      	subs	r3, r0, #0
 80047b2:	d110      	bne.n	80047d6 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	210c      	movs	r1, #12
 80047c0:	438a      	bics	r2, r1
 80047c2:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c8:	4a15      	ldr	r2, [pc, #84]	; (8004820 <ADC_DMAConvCplt+0xc4>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	2201      	movs	r2, #1
 80047ce:	431a      	orrs	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	659a      	str	r2, [r3, #88]	; 0x58
 80047d4:	e00b      	b.n	80047ee <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047da:	2220      	movs	r2, #32
 80047dc:	431a      	orrs	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e6:	2201      	movs	r2, #1
 80047e8:	431a      	orrs	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	0018      	movs	r0, r3
 80047f2:	f7fe f9e3 	bl	8002bbc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80047f6:	e00f      	b.n	8004818 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fc:	2210      	movs	r2, #16
 80047fe:	4013      	ands	r3, r2
 8004800:	d004      	beq.n	800480c <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	0018      	movs	r0, r3
 8004806:	f7ff fce5 	bl	80041d4 <HAL_ADC_ErrorCallback>
}
 800480a:	e005      	b.n	8004818 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	0010      	movs	r0, r2
 8004816:	4798      	blx	r3
}
 8004818:	46c0      	nop			; (mov r8, r8)
 800481a:	46bd      	mov	sp, r7
 800481c:	b004      	add	sp, #16
 800481e:	bd80      	pop	{r7, pc}
 8004820:	fffffefe 	.word	0xfffffefe

08004824 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	0018      	movs	r0, r3
 8004836:	f7ff fcc5 	bl	80041c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	46bd      	mov	sp, r7
 800483e:	b004      	add	sp, #16
 8004840:	bd80      	pop	{r7, pc}

08004842 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b084      	sub	sp, #16
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004854:	2240      	movs	r2, #64	; 0x40
 8004856:	431a      	orrs	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004860:	2204      	movs	r2, #4
 8004862:	431a      	orrs	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	0018      	movs	r0, r3
 800486c:	f7ff fcb2 	bl	80041d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004870:	46c0      	nop			; (mov r8, r8)
 8004872:	46bd      	mov	sp, r7
 8004874:	b004      	add	sp, #16
 8004876:	bd80      	pop	{r7, pc}

08004878 <LL_ADC_SetCalibrationFactor>:
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	22b4      	movs	r2, #180	; 0xb4
 8004886:	589b      	ldr	r3, [r3, r2]
 8004888:	227f      	movs	r2, #127	; 0x7f
 800488a:	4393      	bics	r3, r2
 800488c:	001a      	movs	r2, r3
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	431a      	orrs	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	21b4      	movs	r1, #180	; 0xb4
 8004896:	505a      	str	r2, [r3, r1]
}
 8004898:	46c0      	nop			; (mov r8, r8)
 800489a:	46bd      	mov	sp, r7
 800489c:	b002      	add	sp, #8
 800489e:	bd80      	pop	{r7, pc}

080048a0 <LL_ADC_GetCalibrationFactor>:
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	22b4      	movs	r2, #180	; 0xb4
 80048ac:	589b      	ldr	r3, [r3, r2]
 80048ae:	227f      	movs	r2, #127	; 0x7f
 80048b0:	4013      	ands	r3, r2
}
 80048b2:	0018      	movs	r0, r3
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b002      	add	sp, #8
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <LL_ADC_Enable>:
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	4a04      	ldr	r2, [pc, #16]	; (80048dc <LL_ADC_Enable+0x20>)
 80048ca:	4013      	ands	r3, r2
 80048cc:	2201      	movs	r2, #1
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	609a      	str	r2, [r3, #8]
}
 80048d4:	46c0      	nop			; (mov r8, r8)
 80048d6:	46bd      	mov	sp, r7
 80048d8:	b002      	add	sp, #8
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	7fffffe8 	.word	0x7fffffe8

080048e0 <LL_ADC_Disable>:
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	4a04      	ldr	r2, [pc, #16]	; (8004900 <LL_ADC_Disable+0x20>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	2202      	movs	r2, #2
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	609a      	str	r2, [r3, #8]
}
 80048f8:	46c0      	nop			; (mov r8, r8)
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b002      	add	sp, #8
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	7fffffe8 	.word	0x7fffffe8

08004904 <LL_ADC_IsEnabled>:
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	2201      	movs	r2, #1
 8004912:	4013      	ands	r3, r2
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <LL_ADC_IsEnabled+0x18>
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <LL_ADC_IsEnabled+0x1a>
 800491c:	2300      	movs	r3, #0
}
 800491e:	0018      	movs	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	b002      	add	sp, #8
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <LL_ADC_StartCalibration>:
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	4a05      	ldr	r2, [pc, #20]	; (800494c <LL_ADC_StartCalibration+0x24>)
 8004936:	4013      	ands	r3, r2
 8004938:	2280      	movs	r2, #128	; 0x80
 800493a:	0612      	lsls	r2, r2, #24
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	609a      	str	r2, [r3, #8]
}
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	46bd      	mov	sp, r7
 8004946:	b002      	add	sp, #8
 8004948:	bd80      	pop	{r7, pc}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	7fffffe8 	.word	0x7fffffe8

08004950 <LL_ADC_IsCalibrationOnGoing>:
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	0fdb      	lsrs	r3, r3, #31
 800495e:	07da      	lsls	r2, r3, #31
 8004960:	2380      	movs	r3, #128	; 0x80
 8004962:	061b      	lsls	r3, r3, #24
 8004964:	429a      	cmp	r2, r3
 8004966:	d101      	bne.n	800496c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <LL_ADC_IsCalibrationOnGoing+0x1e>
 800496c:	2300      	movs	r3, #0
}
 800496e:	0018      	movs	r0, r3
 8004970:	46bd      	mov	sp, r7
 8004972:	b002      	add	sp, #8
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004978:	b590      	push	{r4, r7, lr}
 800497a:	b089      	sub	sp, #36	; 0x24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004980:	2300      	movs	r3, #0
 8004982:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004984:	2300      	movs	r3, #0
 8004986:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2254      	movs	r2, #84	; 0x54
 800498c:	5c9b      	ldrb	r3, [r3, r2]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d101      	bne.n	8004996 <HAL_ADCEx_Calibration_Start+0x1e>
 8004992:	2302      	movs	r3, #2
 8004994:	e0ba      	b.n	8004b0c <HAL_ADCEx_Calibration_Start+0x194>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2254      	movs	r2, #84	; 0x54
 800499a:	2101      	movs	r1, #1
 800499c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800499e:	2317      	movs	r3, #23
 80049a0:	18fc      	adds	r4, r7, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	0018      	movs	r0, r3
 80049a6:	f7ff fe7b 	bl	80046a0 <ADC_Disable>
 80049aa:	0003      	movs	r3, r0
 80049ac:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	0018      	movs	r0, r3
 80049b4:	f7ff ffa6 	bl	8004904 <LL_ADC_IsEnabled>
 80049b8:	1e03      	subs	r3, r0, #0
 80049ba:	d000      	beq.n	80049be <HAL_ADCEx_Calibration_Start+0x46>
 80049bc:	e099      	b.n	8004af2 <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c2:	4a54      	ldr	r2, [pc, #336]	; (8004b14 <HAL_ADCEx_Calibration_Start+0x19c>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	2202      	movs	r2, #2
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4a50      	ldr	r2, [pc, #320]	; (8004b18 <HAL_ADCEx_Calibration_Start+0x1a0>)
 80049d6:	4013      	ands	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	494d      	ldr	r1, [pc, #308]	; (8004b1c <HAL_ADCEx_Calibration_Start+0x1a4>)
 80049e6:	400a      	ands	r2, r1
 80049e8:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80049ea:	2300      	movs	r3, #0
 80049ec:	61fb      	str	r3, [r7, #28]
 80049ee:	e02d      	b.n	8004a4c <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	0018      	movs	r0, r3
 80049f6:	f7ff ff97 	bl	8004928 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80049fa:	e014      	b.n	8004a26 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	3301      	adds	r3, #1
 8004a00:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	4a46      	ldr	r2, [pc, #280]	; (8004b20 <HAL_ADCEx_Calibration_Start+0x1a8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d90d      	bls.n	8004a26 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0e:	2212      	movs	r2, #18
 8004a10:	4393      	bics	r3, r2
 8004a12:	2210      	movs	r2, #16
 8004a14:	431a      	orrs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2254      	movs	r2, #84	; 0x54
 8004a1e:	2100      	movs	r1, #0
 8004a20:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e072      	b.n	8004b0c <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f7ff ff90 	bl	8004950 <LL_ADC_IsCalibrationOnGoing>
 8004a30:	1e03      	subs	r3, r0, #0
 8004a32:	d1e3      	bne.n	80049fc <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f7ff ff31 	bl	80048a0 <LL_ADC_GetCalibrationFactor>
 8004a3e:	0002      	movs	r2, r0
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	189b      	adds	r3, r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	61fb      	str	r3, [r7, #28]
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	2b07      	cmp	r3, #7
 8004a50:	d9ce      	bls.n	80049f0 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004a52:	69f9      	ldr	r1, [r7, #28]
 8004a54:	69b8      	ldr	r0, [r7, #24]
 8004a56:	f7fb fb5d 	bl	8000114 <__udivsi3>
 8004a5a:	0003      	movs	r3, r0
 8004a5c:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	0018      	movs	r0, r3
 8004a64:	f7ff ff2a 	bl	80048bc <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	0011      	movs	r1, r2
 8004a70:	0018      	movs	r0, r3
 8004a72:	f7ff ff01 	bl	8004878 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f7ff ff30 	bl	80048e0 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004a80:	f7fe ffe4 	bl	8003a4c <HAL_GetTick>
 8004a84:	0003      	movs	r3, r0
 8004a86:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004a88:	e01b      	b.n	8004ac2 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004a8a:	f7fe ffdf 	bl	8003a4c <HAL_GetTick>
 8004a8e:	0002      	movs	r2, r0
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d914      	bls.n	8004ac2 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	f7ff ff31 	bl	8004904 <LL_ADC_IsEnabled>
 8004aa2:	1e03      	subs	r3, r0, #0
 8004aa4:	d00d      	beq.n	8004ac2 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aaa:	2210      	movs	r2, #16
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e024      	b.n	8004b0c <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	f7ff ff1c 	bl	8004904 <LL_ADC_IsEnabled>
 8004acc:	1e03      	subs	r3, r0, #0
 8004ace:	d1dc      	bne.n	8004a8a <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68d9      	ldr	r1, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae4:	2203      	movs	r2, #3
 8004ae6:	4393      	bics	r3, r2
 8004ae8:	2201      	movs	r2, #1
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	659a      	str	r2, [r3, #88]	; 0x58
 8004af0:	e005      	b.n	8004afe <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af6:	2210      	movs	r2, #16
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2254      	movs	r2, #84	; 0x54
 8004b02:	2100      	movs	r1, #0
 8004b04:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004b06:	2317      	movs	r3, #23
 8004b08:	18fb      	adds	r3, r7, r3
 8004b0a:	781b      	ldrb	r3, [r3, #0]
}
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	b009      	add	sp, #36	; 0x24
 8004b12:	bd90      	pop	{r4, r7, pc}
 8004b14:	fffffefd 	.word	0xfffffefd
 8004b18:	00008003 	.word	0x00008003
 8004b1c:	ffff7ffc 	.word	0xffff7ffc
 8004b20:	0002f1ff 	.word	0x0002f1ff

08004b24 <__NVIC_EnableIRQ>:
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	0002      	movs	r2, r0
 8004b2c:	1dfb      	adds	r3, r7, #7
 8004b2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004b30:	1dfb      	adds	r3, r7, #7
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b7f      	cmp	r3, #127	; 0x7f
 8004b36:	d809      	bhi.n	8004b4c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b38:	1dfb      	adds	r3, r7, #7
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	001a      	movs	r2, r3
 8004b3e:	231f      	movs	r3, #31
 8004b40:	401a      	ands	r2, r3
 8004b42:	4b04      	ldr	r3, [pc, #16]	; (8004b54 <__NVIC_EnableIRQ+0x30>)
 8004b44:	2101      	movs	r1, #1
 8004b46:	4091      	lsls	r1, r2
 8004b48:	000a      	movs	r2, r1
 8004b4a:	601a      	str	r2, [r3, #0]
}
 8004b4c:	46c0      	nop			; (mov r8, r8)
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	b002      	add	sp, #8
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	e000e100 	.word	0xe000e100

08004b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b58:	b590      	push	{r4, r7, lr}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	0002      	movs	r2, r0
 8004b60:	6039      	str	r1, [r7, #0]
 8004b62:	1dfb      	adds	r3, r7, #7
 8004b64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004b66:	1dfb      	adds	r3, r7, #7
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	2b7f      	cmp	r3, #127	; 0x7f
 8004b6c:	d828      	bhi.n	8004bc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b6e:	4a2f      	ldr	r2, [pc, #188]	; (8004c2c <__NVIC_SetPriority+0xd4>)
 8004b70:	1dfb      	adds	r3, r7, #7
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	b25b      	sxtb	r3, r3
 8004b76:	089b      	lsrs	r3, r3, #2
 8004b78:	33c0      	adds	r3, #192	; 0xc0
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	589b      	ldr	r3, [r3, r2]
 8004b7e:	1dfa      	adds	r2, r7, #7
 8004b80:	7812      	ldrb	r2, [r2, #0]
 8004b82:	0011      	movs	r1, r2
 8004b84:	2203      	movs	r2, #3
 8004b86:	400a      	ands	r2, r1
 8004b88:	00d2      	lsls	r2, r2, #3
 8004b8a:	21ff      	movs	r1, #255	; 0xff
 8004b8c:	4091      	lsls	r1, r2
 8004b8e:	000a      	movs	r2, r1
 8004b90:	43d2      	mvns	r2, r2
 8004b92:	401a      	ands	r2, r3
 8004b94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	019b      	lsls	r3, r3, #6
 8004b9a:	22ff      	movs	r2, #255	; 0xff
 8004b9c:	401a      	ands	r2, r3
 8004b9e:	1dfb      	adds	r3, r7, #7
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	4003      	ands	r3, r0
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004bac:	481f      	ldr	r0, [pc, #124]	; (8004c2c <__NVIC_SetPriority+0xd4>)
 8004bae:	1dfb      	adds	r3, r7, #7
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	b25b      	sxtb	r3, r3
 8004bb4:	089b      	lsrs	r3, r3, #2
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	33c0      	adds	r3, #192	; 0xc0
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004bbe:	e031      	b.n	8004c24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004bc0:	4a1b      	ldr	r2, [pc, #108]	; (8004c30 <__NVIC_SetPriority+0xd8>)
 8004bc2:	1dfb      	adds	r3, r7, #7
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	0019      	movs	r1, r3
 8004bc8:	230f      	movs	r3, #15
 8004bca:	400b      	ands	r3, r1
 8004bcc:	3b08      	subs	r3, #8
 8004bce:	089b      	lsrs	r3, r3, #2
 8004bd0:	3306      	adds	r3, #6
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	18d3      	adds	r3, r2, r3
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	1dfa      	adds	r2, r7, #7
 8004bdc:	7812      	ldrb	r2, [r2, #0]
 8004bde:	0011      	movs	r1, r2
 8004be0:	2203      	movs	r2, #3
 8004be2:	400a      	ands	r2, r1
 8004be4:	00d2      	lsls	r2, r2, #3
 8004be6:	21ff      	movs	r1, #255	; 0xff
 8004be8:	4091      	lsls	r1, r2
 8004bea:	000a      	movs	r2, r1
 8004bec:	43d2      	mvns	r2, r2
 8004bee:	401a      	ands	r2, r3
 8004bf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	019b      	lsls	r3, r3, #6
 8004bf6:	22ff      	movs	r2, #255	; 0xff
 8004bf8:	401a      	ands	r2, r3
 8004bfa:	1dfb      	adds	r3, r7, #7
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	0018      	movs	r0, r3
 8004c00:	2303      	movs	r3, #3
 8004c02:	4003      	ands	r3, r0
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c08:	4809      	ldr	r0, [pc, #36]	; (8004c30 <__NVIC_SetPriority+0xd8>)
 8004c0a:	1dfb      	adds	r3, r7, #7
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	001c      	movs	r4, r3
 8004c10:	230f      	movs	r3, #15
 8004c12:	4023      	ands	r3, r4
 8004c14:	3b08      	subs	r3, #8
 8004c16:	089b      	lsrs	r3, r3, #2
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	3306      	adds	r3, #6
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	18c3      	adds	r3, r0, r3
 8004c20:	3304      	adds	r3, #4
 8004c22:	601a      	str	r2, [r3, #0]
}
 8004c24:	46c0      	nop			; (mov r8, r8)
 8004c26:	46bd      	mov	sp, r7
 8004c28:	b003      	add	sp, #12
 8004c2a:	bd90      	pop	{r4, r7, pc}
 8004c2c:	e000e100 	.word	0xe000e100
 8004c30:	e000ed00 	.word	0xe000ed00

08004c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	1e5a      	subs	r2, r3, #1
 8004c40:	2380      	movs	r3, #128	; 0x80
 8004c42:	045b      	lsls	r3, r3, #17
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d301      	bcc.n	8004c4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e010      	b.n	8004c6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c4c:	4b0a      	ldr	r3, [pc, #40]	; (8004c78 <SysTick_Config+0x44>)
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	3a01      	subs	r2, #1
 8004c52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c54:	2301      	movs	r3, #1
 8004c56:	425b      	negs	r3, r3
 8004c58:	2103      	movs	r1, #3
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	f7ff ff7c 	bl	8004b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <SysTick_Config+0x44>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c66:	4b04      	ldr	r3, [pc, #16]	; (8004c78 <SysTick_Config+0x44>)
 8004c68:	2207      	movs	r2, #7
 8004c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	0018      	movs	r0, r3
 8004c70:	46bd      	mov	sp, r7
 8004c72:	b002      	add	sp, #8
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	46c0      	nop			; (mov r8, r8)
 8004c78:	e000e010 	.word	0xe000e010

08004c7c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
 8004c86:	210f      	movs	r1, #15
 8004c88:	187b      	adds	r3, r7, r1
 8004c8a:	1c02      	adds	r2, r0, #0
 8004c8c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	187b      	adds	r3, r7, r1
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	b25b      	sxtb	r3, r3
 8004c96:	0011      	movs	r1, r2
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f7ff ff5d 	bl	8004b58 <__NVIC_SetPriority>
}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	b004      	add	sp, #16
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b082      	sub	sp, #8
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	0002      	movs	r2, r0
 8004cae:	1dfb      	adds	r3, r7, #7
 8004cb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cb2:	1dfb      	adds	r3, r7, #7
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	b25b      	sxtb	r3, r3
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f7ff ff33 	bl	8004b24 <__NVIC_EnableIRQ>
}
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	b002      	add	sp, #8
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b082      	sub	sp, #8
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f7ff ffaf 	bl	8004c34 <SysTick_Config>
 8004cd6:	0003      	movs	r3, r0
}
 8004cd8:	0018      	movs	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	b002      	add	sp, #8
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e077      	b.n	8004de2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a3d      	ldr	r2, [pc, #244]	; (8004dec <HAL_DMA_Init+0x10c>)
 8004cf8:	4694      	mov	ip, r2
 8004cfa:	4463      	add	r3, ip
 8004cfc:	2114      	movs	r1, #20
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f7fb fa08 	bl	8000114 <__udivsi3>
 8004d04:	0003      	movs	r3, r0
 8004d06:	009a      	lsls	r2, r3, #2
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2225      	movs	r2, #37	; 0x25
 8004d10:	2102      	movs	r1, #2
 8004d12:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4934      	ldr	r1, [pc, #208]	; (8004df0 <HAL_DMA_Init+0x110>)
 8004d20:	400a      	ands	r2, r1
 8004d22:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6819      	ldr	r1, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689a      	ldr	r2, [r3, #8]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	431a      	orrs	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	f000 f9c1 	bl	80050e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	2380      	movs	r3, #128	; 0x80
 8004d68:	01db      	lsls	r3, r3, #7
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d102      	bne.n	8004d74 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7c:	213f      	movs	r1, #63	; 0x3f
 8004d7e:	400a      	ands	r2, r1
 8004d80:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004d8a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d011      	beq.n	8004db8 <HAL_DMA_Init+0xd8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d80d      	bhi.n	8004db8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	0018      	movs	r0, r3
 8004da0:	f000 f9cc 	bl	800513c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004db4:	605a      	str	r2, [r3, #4]
 8004db6:	e008      	b.n	8004dca <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2225      	movs	r2, #37	; 0x25
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2224      	movs	r2, #36	; 0x24
 8004ddc:	2100      	movs	r1, #0
 8004dde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	0018      	movs	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b002      	add	sp, #8
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	bffdfff8 	.word	0xbffdfff8
 8004df0:	ffff800f 	.word	0xffff800f

08004df4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e02:	2317      	movs	r3, #23
 8004e04:	18fb      	adds	r3, r7, r3
 8004e06:	2200      	movs	r2, #0
 8004e08:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2224      	movs	r2, #36	; 0x24
 8004e0e:	5c9b      	ldrb	r3, [r3, r2]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d101      	bne.n	8004e18 <HAL_DMA_Start_IT+0x24>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e06f      	b.n	8004ef8 <HAL_DMA_Start_IT+0x104>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2224      	movs	r2, #36	; 0x24
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2225      	movs	r2, #37	; 0x25
 8004e24:	5c9b      	ldrb	r3, [r3, r2]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d157      	bne.n	8004edc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2225      	movs	r2, #37	; 0x25
 8004e30:	2102      	movs	r1, #2
 8004e32:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2101      	movs	r1, #1
 8004e46:	438a      	bics	r2, r1
 8004e48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	68b9      	ldr	r1, [r7, #8]
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 f907 	bl	8005064 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d008      	beq.n	8004e70 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	210e      	movs	r1, #14
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	e00f      	b.n	8004e90 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2104      	movs	r1, #4
 8004e7c:	438a      	bics	r2, r1
 8004e7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	210a      	movs	r1, #10
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	2380      	movs	r3, #128	; 0x80
 8004e98:	025b      	lsls	r3, r3, #9
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d008      	beq.n	8004eb0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea8:	2180      	movs	r1, #128	; 0x80
 8004eaa:	0049      	lsls	r1, r1, #1
 8004eac:	430a      	orrs	r2, r1
 8004eae:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d008      	beq.n	8004eca <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec2:	2180      	movs	r1, #128	; 0x80
 8004ec4:	0049      	lsls	r1, r1, #1
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	e00a      	b.n	8004ef2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2280      	movs	r2, #128	; 0x80
 8004ee0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2224      	movs	r2, #36	; 0x24
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8004eea:	2317      	movs	r3, #23
 8004eec:	18fb      	adds	r3, r7, r3
 8004eee:	2201      	movs	r2, #1
 8004ef0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004ef2:	2317      	movs	r3, #23
 8004ef4:	18fb      	adds	r3, r7, r3
 8004ef6:	781b      	ldrb	r3, [r3, #0]
}
 8004ef8:	0018      	movs	r0, r3
 8004efa:	46bd      	mov	sp, r7
 8004efc:	b006      	add	sp, #24
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8004f08:	4b55      	ldr	r3, [pc, #340]	; (8005060 <HAL_DMA_IRQHandler+0x160>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	221c      	movs	r2, #28
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	2204      	movs	r2, #4
 8004f20:	409a      	lsls	r2, r3
 8004f22:	0013      	movs	r3, r2
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4013      	ands	r3, r2
 8004f28:	d027      	beq.n	8004f7a <HAL_DMA_IRQHandler+0x7a>
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2204      	movs	r2, #4
 8004f2e:	4013      	ands	r3, r2
 8004f30:	d023      	beq.n	8004f7a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	d107      	bne.n	8004f4e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2104      	movs	r1, #4
 8004f4a:	438a      	bics	r2, r1
 8004f4c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004f4e:	4b44      	ldr	r3, [pc, #272]	; (8005060 <HAL_DMA_IRQHandler+0x160>)
 8004f50:	6859      	ldr	r1, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	221c      	movs	r2, #28
 8004f58:	4013      	ands	r3, r2
 8004f5a:	2204      	movs	r2, #4
 8004f5c:	409a      	lsls	r2, r3
 8004f5e:	4b40      	ldr	r3, [pc, #256]	; (8005060 <HAL_DMA_IRQHandler+0x160>)
 8004f60:	430a      	orrs	r2, r1
 8004f62:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d100      	bne.n	8004f6e <HAL_DMA_IRQHandler+0x6e>
 8004f6c:	e073      	b.n	8005056 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	0010      	movs	r0, r2
 8004f76:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004f78:	e06d      	b.n	8005056 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	221c      	movs	r2, #28
 8004f80:	4013      	ands	r3, r2
 8004f82:	2202      	movs	r2, #2
 8004f84:	409a      	lsls	r2, r3
 8004f86:	0013      	movs	r3, r2
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	d02e      	beq.n	8004fec <HAL_DMA_IRQHandler+0xec>
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2202      	movs	r2, #2
 8004f92:	4013      	ands	r3, r2
 8004f94:	d02a      	beq.n	8004fec <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	d10b      	bne.n	8004fba <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	210a      	movs	r1, #10
 8004fae:	438a      	bics	r2, r1
 8004fb0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2225      	movs	r2, #37	; 0x25
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004fba:	4b29      	ldr	r3, [pc, #164]	; (8005060 <HAL_DMA_IRQHandler+0x160>)
 8004fbc:	6859      	ldr	r1, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	221c      	movs	r2, #28
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	409a      	lsls	r2, r3
 8004fca:	4b25      	ldr	r3, [pc, #148]	; (8005060 <HAL_DMA_IRQHandler+0x160>)
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2224      	movs	r2, #36	; 0x24
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d03a      	beq.n	8005056 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	0010      	movs	r0, r2
 8004fe8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004fea:	e034      	b.n	8005056 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	221c      	movs	r2, #28
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	2208      	movs	r2, #8
 8004ff6:	409a      	lsls	r2, r3
 8004ff8:	0013      	movs	r3, r2
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	d02b      	beq.n	8005058 <HAL_DMA_IRQHandler+0x158>
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2208      	movs	r2, #8
 8005004:	4013      	ands	r3, r2
 8005006:	d027      	beq.n	8005058 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	210e      	movs	r1, #14
 8005014:	438a      	bics	r2, r1
 8005016:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005018:	4b11      	ldr	r3, [pc, #68]	; (8005060 <HAL_DMA_IRQHandler+0x160>)
 800501a:	6859      	ldr	r1, [r3, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	221c      	movs	r2, #28
 8005022:	4013      	ands	r3, r2
 8005024:	2201      	movs	r2, #1
 8005026:	409a      	lsls	r2, r3
 8005028:	4b0d      	ldr	r3, [pc, #52]	; (8005060 <HAL_DMA_IRQHandler+0x160>)
 800502a:	430a      	orrs	r2, r1
 800502c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2225      	movs	r2, #37	; 0x25
 8005038:	2101      	movs	r1, #1
 800503a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2224      	movs	r2, #36	; 0x24
 8005040:	2100      	movs	r1, #0
 8005042:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005048:	2b00      	cmp	r3, #0
 800504a:	d005      	beq.n	8005058 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	0010      	movs	r0, r2
 8005054:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005056:	46c0      	nop			; (mov r8, r8)
 8005058:	46c0      	nop			; (mov r8, r8)
}
 800505a:	46bd      	mov	sp, r7
 800505c:	b004      	add	sp, #16
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40020000 	.word	0x40020000

08005064 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800507a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005080:	2b00      	cmp	r3, #0
 8005082:	d004      	beq.n	800508e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800508c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800508e:	4b14      	ldr	r3, [pc, #80]	; (80050e0 <DMA_SetConfig+0x7c>)
 8005090:	6859      	ldr	r1, [r3, #4]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	221c      	movs	r2, #28
 8005098:	4013      	ands	r3, r2
 800509a:	2201      	movs	r2, #1
 800509c:	409a      	lsls	r2, r3
 800509e:	4b10      	ldr	r3, [pc, #64]	; (80050e0 <DMA_SetConfig+0x7c>)
 80050a0:	430a      	orrs	r2, r1
 80050a2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	2b10      	cmp	r3, #16
 80050b2:	d108      	bne.n	80050c6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80050c4:	e007      	b.n	80050d6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	60da      	str	r2, [r3, #12]
}
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	46bd      	mov	sp, r7
 80050da:	b004      	add	sp, #16
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	40020000 	.word	0x40020000

080050e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f0:	089b      	lsrs	r3, r3, #2
 80050f2:	4a10      	ldr	r2, [pc, #64]	; (8005134 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80050f4:	4694      	mov	ip, r2
 80050f6:	4463      	add	r3, ip
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	001a      	movs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	001a      	movs	r2, r3
 8005106:	23ff      	movs	r3, #255	; 0xff
 8005108:	4013      	ands	r3, r2
 800510a:	3b08      	subs	r3, #8
 800510c:	2114      	movs	r1, #20
 800510e:	0018      	movs	r0, r3
 8005110:	f7fb f800 	bl	8000114 <__udivsi3>
 8005114:	0003      	movs	r3, r0
 8005116:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a07      	ldr	r2, [pc, #28]	; (8005138 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800511c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	221f      	movs	r2, #31
 8005122:	4013      	ands	r3, r2
 8005124:	2201      	movs	r2, #1
 8005126:	409a      	lsls	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800512c:	46c0      	nop			; (mov r8, r8)
 800512e:	46bd      	mov	sp, r7
 8005130:	b004      	add	sp, #16
 8005132:	bd80      	pop	{r7, pc}
 8005134:	10008200 	.word	0x10008200
 8005138:	40020880 	.word	0x40020880

0800513c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	223f      	movs	r2, #63	; 0x3f
 800514a:	4013      	ands	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4a0a      	ldr	r2, [pc, #40]	; (800517c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005152:	4694      	mov	ip, r2
 8005154:	4463      	add	r3, ip
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	001a      	movs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a07      	ldr	r2, [pc, #28]	; (8005180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005162:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	3b01      	subs	r3, #1
 8005168:	2203      	movs	r2, #3
 800516a:	4013      	ands	r3, r2
 800516c:	2201      	movs	r2, #1
 800516e:	409a      	lsls	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	659a      	str	r2, [r3, #88]	; 0x58
}
 8005174:	46c0      	nop			; (mov r8, r8)
 8005176:	46bd      	mov	sp, r7
 8005178:	b004      	add	sp, #16
 800517a:	bd80      	pop	{r7, pc}
 800517c:	1000823f 	.word	0x1000823f
 8005180:	40020940 	.word	0x40020940

08005184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800518e:	2300      	movs	r3, #0
 8005190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005192:	e147      	b.n	8005424 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2101      	movs	r1, #1
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	4091      	lsls	r1, r2
 800519e:	000a      	movs	r2, r1
 80051a0:	4013      	ands	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d100      	bne.n	80051ac <HAL_GPIO_Init+0x28>
 80051aa:	e138      	b.n	800541e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2203      	movs	r2, #3
 80051b2:	4013      	ands	r3, r2
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d005      	beq.n	80051c4 <HAL_GPIO_Init+0x40>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2203      	movs	r2, #3
 80051be:	4013      	ands	r3, r2
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d130      	bne.n	8005226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	2203      	movs	r2, #3
 80051d0:	409a      	lsls	r2, r3
 80051d2:	0013      	movs	r3, r2
 80051d4:	43da      	mvns	r2, r3
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	4013      	ands	r3, r2
 80051da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	409a      	lsls	r2, r3
 80051e6:	0013      	movs	r3, r2
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80051fa:	2201      	movs	r2, #1
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	409a      	lsls	r2, r3
 8005200:	0013      	movs	r3, r2
 8005202:	43da      	mvns	r2, r3
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	4013      	ands	r3, r2
 8005208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	091b      	lsrs	r3, r3, #4
 8005210:	2201      	movs	r2, #1
 8005212:	401a      	ands	r2, r3
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	409a      	lsls	r2, r3
 8005218:	0013      	movs	r3, r2
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2203      	movs	r2, #3
 800522c:	4013      	ands	r3, r2
 800522e:	2b03      	cmp	r3, #3
 8005230:	d017      	beq.n	8005262 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	2203      	movs	r2, #3
 800523e:	409a      	lsls	r2, r3
 8005240:	0013      	movs	r3, r2
 8005242:	43da      	mvns	r2, r3
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	4013      	ands	r3, r2
 8005248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	409a      	lsls	r2, r3
 8005254:	0013      	movs	r3, r2
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2203      	movs	r2, #3
 8005268:	4013      	ands	r3, r2
 800526a:	2b02      	cmp	r3, #2
 800526c:	d123      	bne.n	80052b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	08da      	lsrs	r2, r3, #3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3208      	adds	r2, #8
 8005276:	0092      	lsls	r2, r2, #2
 8005278:	58d3      	ldr	r3, [r2, r3]
 800527a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2207      	movs	r2, #7
 8005280:	4013      	ands	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	220f      	movs	r2, #15
 8005286:	409a      	lsls	r2, r3
 8005288:	0013      	movs	r3, r2
 800528a:	43da      	mvns	r2, r3
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	4013      	ands	r3, r2
 8005290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	691a      	ldr	r2, [r3, #16]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2107      	movs	r1, #7
 800529a:	400b      	ands	r3, r1
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	409a      	lsls	r2, r3
 80052a0:	0013      	movs	r3, r2
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	08da      	lsrs	r2, r3, #3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3208      	adds	r2, #8
 80052b0:	0092      	lsls	r2, r2, #2
 80052b2:	6939      	ldr	r1, [r7, #16]
 80052b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	2203      	movs	r2, #3
 80052c2:	409a      	lsls	r2, r3
 80052c4:	0013      	movs	r3, r2
 80052c6:	43da      	mvns	r2, r3
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	4013      	ands	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	2203      	movs	r2, #3
 80052d4:	401a      	ands	r2, r3
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	409a      	lsls	r2, r3
 80052dc:	0013      	movs	r3, r2
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	23c0      	movs	r3, #192	; 0xc0
 80052f0:	029b      	lsls	r3, r3, #10
 80052f2:	4013      	ands	r3, r2
 80052f4:	d100      	bne.n	80052f8 <HAL_GPIO_Init+0x174>
 80052f6:	e092      	b.n	800541e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80052f8:	4a50      	ldr	r2, [pc, #320]	; (800543c <HAL_GPIO_Init+0x2b8>)
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	089b      	lsrs	r3, r3, #2
 80052fe:	3318      	adds	r3, #24
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	589b      	ldr	r3, [r3, r2]
 8005304:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2203      	movs	r2, #3
 800530a:	4013      	ands	r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	220f      	movs	r2, #15
 8005310:	409a      	lsls	r2, r3
 8005312:	0013      	movs	r3, r2
 8005314:	43da      	mvns	r2, r3
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	4013      	ands	r3, r2
 800531a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	23a0      	movs	r3, #160	; 0xa0
 8005320:	05db      	lsls	r3, r3, #23
 8005322:	429a      	cmp	r2, r3
 8005324:	d013      	beq.n	800534e <HAL_GPIO_Init+0x1ca>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a45      	ldr	r2, [pc, #276]	; (8005440 <HAL_GPIO_Init+0x2bc>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00d      	beq.n	800534a <HAL_GPIO_Init+0x1c6>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a44      	ldr	r2, [pc, #272]	; (8005444 <HAL_GPIO_Init+0x2c0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d007      	beq.n	8005346 <HAL_GPIO_Init+0x1c2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a43      	ldr	r2, [pc, #268]	; (8005448 <HAL_GPIO_Init+0x2c4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d101      	bne.n	8005342 <HAL_GPIO_Init+0x1be>
 800533e:	2303      	movs	r3, #3
 8005340:	e006      	b.n	8005350 <HAL_GPIO_Init+0x1cc>
 8005342:	2305      	movs	r3, #5
 8005344:	e004      	b.n	8005350 <HAL_GPIO_Init+0x1cc>
 8005346:	2302      	movs	r3, #2
 8005348:	e002      	b.n	8005350 <HAL_GPIO_Init+0x1cc>
 800534a:	2301      	movs	r3, #1
 800534c:	e000      	b.n	8005350 <HAL_GPIO_Init+0x1cc>
 800534e:	2300      	movs	r3, #0
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	2103      	movs	r1, #3
 8005354:	400a      	ands	r2, r1
 8005356:	00d2      	lsls	r2, r2, #3
 8005358:	4093      	lsls	r3, r2
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005360:	4936      	ldr	r1, [pc, #216]	; (800543c <HAL_GPIO_Init+0x2b8>)
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	089b      	lsrs	r3, r3, #2
 8005366:	3318      	adds	r3, #24
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800536e:	4b33      	ldr	r3, [pc, #204]	; (800543c <HAL_GPIO_Init+0x2b8>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	43da      	mvns	r2, r3
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	4013      	ands	r3, r2
 800537c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	2380      	movs	r3, #128	; 0x80
 8005384:	035b      	lsls	r3, r3, #13
 8005386:	4013      	ands	r3, r2
 8005388:	d003      	beq.n	8005392 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005392:	4b2a      	ldr	r3, [pc, #168]	; (800543c <HAL_GPIO_Init+0x2b8>)
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005398:	4b28      	ldr	r3, [pc, #160]	; (800543c <HAL_GPIO_Init+0x2b8>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	43da      	mvns	r2, r3
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4013      	ands	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	2380      	movs	r3, #128	; 0x80
 80053ae:	039b      	lsls	r3, r3, #14
 80053b0:	4013      	ands	r3, r2
 80053b2:	d003      	beq.n	80053bc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80053bc:	4b1f      	ldr	r3, [pc, #124]	; (800543c <HAL_GPIO_Init+0x2b8>)
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80053c2:	4a1e      	ldr	r2, [pc, #120]	; (800543c <HAL_GPIO_Init+0x2b8>)
 80053c4:	2384      	movs	r3, #132	; 0x84
 80053c6:	58d3      	ldr	r3, [r2, r3]
 80053c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	43da      	mvns	r2, r3
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	4013      	ands	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	2380      	movs	r3, #128	; 0x80
 80053da:	029b      	lsls	r3, r3, #10
 80053dc:	4013      	ands	r3, r2
 80053de:	d003      	beq.n	80053e8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80053e8:	4914      	ldr	r1, [pc, #80]	; (800543c <HAL_GPIO_Init+0x2b8>)
 80053ea:	2284      	movs	r2, #132	; 0x84
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80053f0:	4a12      	ldr	r2, [pc, #72]	; (800543c <HAL_GPIO_Init+0x2b8>)
 80053f2:	2380      	movs	r3, #128	; 0x80
 80053f4:	58d3      	ldr	r3, [r2, r3]
 80053f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	43da      	mvns	r2, r3
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	4013      	ands	r3, r2
 8005400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	2380      	movs	r3, #128	; 0x80
 8005408:	025b      	lsls	r3, r3, #9
 800540a:	4013      	ands	r3, r2
 800540c:	d003      	beq.n	8005416 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005416:	4909      	ldr	r1, [pc, #36]	; (800543c <HAL_GPIO_Init+0x2b8>)
 8005418:	2280      	movs	r2, #128	; 0x80
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	3301      	adds	r3, #1
 8005422:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	40da      	lsrs	r2, r3
 800542c:	1e13      	subs	r3, r2, #0
 800542e:	d000      	beq.n	8005432 <HAL_GPIO_Init+0x2ae>
 8005430:	e6b0      	b.n	8005194 <HAL_GPIO_Init+0x10>
  }
}
 8005432:	46c0      	nop			; (mov r8, r8)
 8005434:	46c0      	nop			; (mov r8, r8)
 8005436:	46bd      	mov	sp, r7
 8005438:	b006      	add	sp, #24
 800543a:	bd80      	pop	{r7, pc}
 800543c:	40021800 	.word	0x40021800
 8005440:	50000400 	.word	0x50000400
 8005444:	50000800 	.word	0x50000800
 8005448:	50000c00 	.word	0x50000c00

0800544c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	0008      	movs	r0, r1
 8005456:	0011      	movs	r1, r2
 8005458:	1cbb      	adds	r3, r7, #2
 800545a:	1c02      	adds	r2, r0, #0
 800545c:	801a      	strh	r2, [r3, #0]
 800545e:	1c7b      	adds	r3, r7, #1
 8005460:	1c0a      	adds	r2, r1, #0
 8005462:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005464:	1c7b      	adds	r3, r7, #1
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d004      	beq.n	8005476 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800546c:	1cbb      	adds	r3, r7, #2
 800546e:	881a      	ldrh	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005474:	e003      	b.n	800547e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005476:	1cbb      	adds	r3, r7, #2
 8005478:	881a      	ldrh	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800547e:	46c0      	nop			; (mov r8, r8)
 8005480:	46bd      	mov	sp, r7
 8005482:	b002      	add	sp, #8
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005490:	4b19      	ldr	r3, [pc, #100]	; (80054f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a19      	ldr	r2, [pc, #100]	; (80054fc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005496:	4013      	ands	r3, r2
 8005498:	0019      	movs	r1, r3
 800549a:	4b17      	ldr	r3, [pc, #92]	; (80054f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	430a      	orrs	r2, r1
 80054a0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	2380      	movs	r3, #128	; 0x80
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d11f      	bne.n	80054ec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80054ac:	4b14      	ldr	r3, [pc, #80]	; (8005500 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	0013      	movs	r3, r2
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	189b      	adds	r3, r3, r2
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	4912      	ldr	r1, [pc, #72]	; (8005504 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80054ba:	0018      	movs	r0, r3
 80054bc:	f7fa fe2a 	bl	8000114 <__udivsi3>
 80054c0:	0003      	movs	r3, r0
 80054c2:	3301      	adds	r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054c6:	e008      	b.n	80054da <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	e001      	b.n	80054da <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e009      	b.n	80054ee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054da:	4b07      	ldr	r3, [pc, #28]	; (80054f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80054dc:	695a      	ldr	r2, [r3, #20]
 80054de:	2380      	movs	r3, #128	; 0x80
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	401a      	ands	r2, r3
 80054e4:	2380      	movs	r3, #128	; 0x80
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d0ed      	beq.n	80054c8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	0018      	movs	r0, r3
 80054f0:	46bd      	mov	sp, r7
 80054f2:	b004      	add	sp, #16
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	40007000 	.word	0x40007000
 80054fc:	fffff9ff 	.word	0xfffff9ff
 8005500:	20000000 	.word	0x20000000
 8005504:	000f4240 	.word	0x000f4240

08005508 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e2f3      	b.n	8005b02 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2201      	movs	r2, #1
 8005520:	4013      	ands	r3, r2
 8005522:	d100      	bne.n	8005526 <HAL_RCC_OscConfig+0x1e>
 8005524:	e07c      	b.n	8005620 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005526:	4bc3      	ldr	r3, [pc, #780]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	2238      	movs	r2, #56	; 0x38
 800552c:	4013      	ands	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005530:	4bc0      	ldr	r3, [pc, #768]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	2203      	movs	r2, #3
 8005536:	4013      	ands	r3, r2
 8005538:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	2b10      	cmp	r3, #16
 800553e:	d102      	bne.n	8005546 <HAL_RCC_OscConfig+0x3e>
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2b03      	cmp	r3, #3
 8005544:	d002      	beq.n	800554c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	2b08      	cmp	r3, #8
 800554a:	d10b      	bne.n	8005564 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800554c:	4bb9      	ldr	r3, [pc, #740]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	2380      	movs	r3, #128	; 0x80
 8005552:	029b      	lsls	r3, r3, #10
 8005554:	4013      	ands	r3, r2
 8005556:	d062      	beq.n	800561e <HAL_RCC_OscConfig+0x116>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d15e      	bne.n	800561e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e2ce      	b.n	8005b02 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	2380      	movs	r3, #128	; 0x80
 800556a:	025b      	lsls	r3, r3, #9
 800556c:	429a      	cmp	r2, r3
 800556e:	d107      	bne.n	8005580 <HAL_RCC_OscConfig+0x78>
 8005570:	4bb0      	ldr	r3, [pc, #704]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	4baf      	ldr	r3, [pc, #700]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 8005576:	2180      	movs	r1, #128	; 0x80
 8005578:	0249      	lsls	r1, r1, #9
 800557a:	430a      	orrs	r2, r1
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	e020      	b.n	80055c2 <HAL_RCC_OscConfig+0xba>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	23a0      	movs	r3, #160	; 0xa0
 8005586:	02db      	lsls	r3, r3, #11
 8005588:	429a      	cmp	r2, r3
 800558a:	d10e      	bne.n	80055aa <HAL_RCC_OscConfig+0xa2>
 800558c:	4ba9      	ldr	r3, [pc, #676]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	4ba8      	ldr	r3, [pc, #672]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 8005592:	2180      	movs	r1, #128	; 0x80
 8005594:	02c9      	lsls	r1, r1, #11
 8005596:	430a      	orrs	r2, r1
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	4ba6      	ldr	r3, [pc, #664]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	4ba5      	ldr	r3, [pc, #660]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 80055a0:	2180      	movs	r1, #128	; 0x80
 80055a2:	0249      	lsls	r1, r1, #9
 80055a4:	430a      	orrs	r2, r1
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	e00b      	b.n	80055c2 <HAL_RCC_OscConfig+0xba>
 80055aa:	4ba2      	ldr	r3, [pc, #648]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	4ba1      	ldr	r3, [pc, #644]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 80055b0:	49a1      	ldr	r1, [pc, #644]	; (8005838 <HAL_RCC_OscConfig+0x330>)
 80055b2:	400a      	ands	r2, r1
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	4b9f      	ldr	r3, [pc, #636]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	4b9e      	ldr	r3, [pc, #632]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 80055bc:	499f      	ldr	r1, [pc, #636]	; (800583c <HAL_RCC_OscConfig+0x334>)
 80055be:	400a      	ands	r2, r1
 80055c0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d014      	beq.n	80055f4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ca:	f7fe fa3f 	bl	8003a4c <HAL_GetTick>
 80055ce:	0003      	movs	r3, r0
 80055d0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055d4:	f7fe fa3a 	bl	8003a4c <HAL_GetTick>
 80055d8:	0002      	movs	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b64      	cmp	r3, #100	; 0x64
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e28d      	b.n	8005b02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055e6:	4b93      	ldr	r3, [pc, #588]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	2380      	movs	r3, #128	; 0x80
 80055ec:	029b      	lsls	r3, r3, #10
 80055ee:	4013      	ands	r3, r2
 80055f0:	d0f0      	beq.n	80055d4 <HAL_RCC_OscConfig+0xcc>
 80055f2:	e015      	b.n	8005620 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fe fa2a 	bl	8003a4c <HAL_GetTick>
 80055f8:	0003      	movs	r3, r0
 80055fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055fc:	e008      	b.n	8005610 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055fe:	f7fe fa25 	bl	8003a4c <HAL_GetTick>
 8005602:	0002      	movs	r2, r0
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b64      	cmp	r3, #100	; 0x64
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e278      	b.n	8005b02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005610:	4b88      	ldr	r3, [pc, #544]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	2380      	movs	r3, #128	; 0x80
 8005616:	029b      	lsls	r3, r3, #10
 8005618:	4013      	ands	r3, r2
 800561a:	d1f0      	bne.n	80055fe <HAL_RCC_OscConfig+0xf6>
 800561c:	e000      	b.n	8005620 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800561e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2202      	movs	r2, #2
 8005626:	4013      	ands	r3, r2
 8005628:	d100      	bne.n	800562c <HAL_RCC_OscConfig+0x124>
 800562a:	e099      	b.n	8005760 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800562c:	4b81      	ldr	r3, [pc, #516]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	2238      	movs	r2, #56	; 0x38
 8005632:	4013      	ands	r3, r2
 8005634:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005636:	4b7f      	ldr	r3, [pc, #508]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	2203      	movs	r2, #3
 800563c:	4013      	ands	r3, r2
 800563e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	2b10      	cmp	r3, #16
 8005644:	d102      	bne.n	800564c <HAL_RCC_OscConfig+0x144>
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b02      	cmp	r3, #2
 800564a:	d002      	beq.n	8005652 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d135      	bne.n	80056be <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005652:	4b78      	ldr	r3, [pc, #480]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	2380      	movs	r3, #128	; 0x80
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	4013      	ands	r3, r2
 800565c:	d005      	beq.n	800566a <HAL_RCC_OscConfig+0x162>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e24b      	b.n	8005b02 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800566a:	4b72      	ldr	r3, [pc, #456]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	4a74      	ldr	r2, [pc, #464]	; (8005840 <HAL_RCC_OscConfig+0x338>)
 8005670:	4013      	ands	r3, r2
 8005672:	0019      	movs	r1, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	021a      	lsls	r2, r3, #8
 800567a:	4b6e      	ldr	r3, [pc, #440]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 800567c:	430a      	orrs	r2, r1
 800567e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d112      	bne.n	80056ac <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005686:	4b6b      	ldr	r3, [pc, #428]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a6e      	ldr	r2, [pc, #440]	; (8005844 <HAL_RCC_OscConfig+0x33c>)
 800568c:	4013      	ands	r3, r2
 800568e:	0019      	movs	r1, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	4b67      	ldr	r3, [pc, #412]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 8005696:	430a      	orrs	r2, r1
 8005698:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800569a:	4b66      	ldr	r3, [pc, #408]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	0adb      	lsrs	r3, r3, #11
 80056a0:	2207      	movs	r2, #7
 80056a2:	4013      	ands	r3, r2
 80056a4:	4a68      	ldr	r2, [pc, #416]	; (8005848 <HAL_RCC_OscConfig+0x340>)
 80056a6:	40da      	lsrs	r2, r3
 80056a8:	4b68      	ldr	r3, [pc, #416]	; (800584c <HAL_RCC_OscConfig+0x344>)
 80056aa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80056ac:	4b68      	ldr	r3, [pc, #416]	; (8005850 <HAL_RCC_OscConfig+0x348>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	0018      	movs	r0, r3
 80056b2:	f7fe f96f 	bl	8003994 <HAL_InitTick>
 80056b6:	1e03      	subs	r3, r0, #0
 80056b8:	d051      	beq.n	800575e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e221      	b.n	8005b02 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d030      	beq.n	8005728 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80056c6:	4b5b      	ldr	r3, [pc, #364]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a5e      	ldr	r2, [pc, #376]	; (8005844 <HAL_RCC_OscConfig+0x33c>)
 80056cc:	4013      	ands	r3, r2
 80056ce:	0019      	movs	r1, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	4b57      	ldr	r3, [pc, #348]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 80056d6:	430a      	orrs	r2, r1
 80056d8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80056da:	4b56      	ldr	r3, [pc, #344]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	4b55      	ldr	r3, [pc, #340]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 80056e0:	2180      	movs	r1, #128	; 0x80
 80056e2:	0049      	lsls	r1, r1, #1
 80056e4:	430a      	orrs	r2, r1
 80056e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e8:	f7fe f9b0 	bl	8003a4c <HAL_GetTick>
 80056ec:	0003      	movs	r3, r0
 80056ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056f0:	e008      	b.n	8005704 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056f2:	f7fe f9ab 	bl	8003a4c <HAL_GetTick>
 80056f6:	0002      	movs	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e1fe      	b.n	8005b02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005704:	4b4b      	ldr	r3, [pc, #300]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	2380      	movs	r3, #128	; 0x80
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	4013      	ands	r3, r2
 800570e:	d0f0      	beq.n	80056f2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005710:	4b48      	ldr	r3, [pc, #288]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	4a4a      	ldr	r2, [pc, #296]	; (8005840 <HAL_RCC_OscConfig+0x338>)
 8005716:	4013      	ands	r3, r2
 8005718:	0019      	movs	r1, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	021a      	lsls	r2, r3, #8
 8005720:	4b44      	ldr	r3, [pc, #272]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 8005722:	430a      	orrs	r2, r1
 8005724:	605a      	str	r2, [r3, #4]
 8005726:	e01b      	b.n	8005760 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005728:	4b42      	ldr	r3, [pc, #264]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	4b41      	ldr	r3, [pc, #260]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 800572e:	4949      	ldr	r1, [pc, #292]	; (8005854 <HAL_RCC_OscConfig+0x34c>)
 8005730:	400a      	ands	r2, r1
 8005732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005734:	f7fe f98a 	bl	8003a4c <HAL_GetTick>
 8005738:	0003      	movs	r3, r0
 800573a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800573c:	e008      	b.n	8005750 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800573e:	f7fe f985 	bl	8003a4c <HAL_GetTick>
 8005742:	0002      	movs	r2, r0
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d901      	bls.n	8005750 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e1d8      	b.n	8005b02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005750:	4b38      	ldr	r3, [pc, #224]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	2380      	movs	r3, #128	; 0x80
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	4013      	ands	r3, r2
 800575a:	d1f0      	bne.n	800573e <HAL_RCC_OscConfig+0x236>
 800575c:	e000      	b.n	8005760 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800575e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2208      	movs	r2, #8
 8005766:	4013      	ands	r3, r2
 8005768:	d047      	beq.n	80057fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800576a:	4b32      	ldr	r3, [pc, #200]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2238      	movs	r2, #56	; 0x38
 8005770:	4013      	ands	r3, r2
 8005772:	2b18      	cmp	r3, #24
 8005774:	d10a      	bne.n	800578c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005776:	4b2f      	ldr	r3, [pc, #188]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 8005778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800577a:	2202      	movs	r2, #2
 800577c:	4013      	ands	r3, r2
 800577e:	d03c      	beq.n	80057fa <HAL_RCC_OscConfig+0x2f2>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d138      	bne.n	80057fa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e1ba      	b.n	8005b02 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d019      	beq.n	80057c8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005794:	4b27      	ldr	r3, [pc, #156]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 8005796:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005798:	4b26      	ldr	r3, [pc, #152]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 800579a:	2101      	movs	r1, #1
 800579c:	430a      	orrs	r2, r1
 800579e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a0:	f7fe f954 	bl	8003a4c <HAL_GetTick>
 80057a4:	0003      	movs	r3, r0
 80057a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057aa:	f7fe f94f 	bl	8003a4c <HAL_GetTick>
 80057ae:	0002      	movs	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e1a2      	b.n	8005b02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057bc:	4b1d      	ldr	r3, [pc, #116]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 80057be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c0:	2202      	movs	r2, #2
 80057c2:	4013      	ands	r3, r2
 80057c4:	d0f1      	beq.n	80057aa <HAL_RCC_OscConfig+0x2a2>
 80057c6:	e018      	b.n	80057fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80057c8:	4b1a      	ldr	r3, [pc, #104]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 80057ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80057cc:	4b19      	ldr	r3, [pc, #100]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 80057ce:	2101      	movs	r1, #1
 80057d0:	438a      	bics	r2, r1
 80057d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d4:	f7fe f93a 	bl	8003a4c <HAL_GetTick>
 80057d8:	0003      	movs	r3, r0
 80057da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057dc:	e008      	b.n	80057f0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057de:	f7fe f935 	bl	8003a4c <HAL_GetTick>
 80057e2:	0002      	movs	r2, r0
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e188      	b.n	8005b02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057f0:	4b10      	ldr	r3, [pc, #64]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 80057f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f4:	2202      	movs	r2, #2
 80057f6:	4013      	ands	r3, r2
 80057f8:	d1f1      	bne.n	80057de <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2204      	movs	r2, #4
 8005800:	4013      	ands	r3, r2
 8005802:	d100      	bne.n	8005806 <HAL_RCC_OscConfig+0x2fe>
 8005804:	e0c6      	b.n	8005994 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005806:	231f      	movs	r3, #31
 8005808:	18fb      	adds	r3, r7, r3
 800580a:	2200      	movs	r2, #0
 800580c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800580e:	4b09      	ldr	r3, [pc, #36]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	2238      	movs	r2, #56	; 0x38
 8005814:	4013      	ands	r3, r2
 8005816:	2b20      	cmp	r3, #32
 8005818:	d11e      	bne.n	8005858 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800581a:	4b06      	ldr	r3, [pc, #24]	; (8005834 <HAL_RCC_OscConfig+0x32c>)
 800581c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800581e:	2202      	movs	r2, #2
 8005820:	4013      	ands	r3, r2
 8005822:	d100      	bne.n	8005826 <HAL_RCC_OscConfig+0x31e>
 8005824:	e0b6      	b.n	8005994 <HAL_RCC_OscConfig+0x48c>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d000      	beq.n	8005830 <HAL_RCC_OscConfig+0x328>
 800582e:	e0b1      	b.n	8005994 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e166      	b.n	8005b02 <HAL_RCC_OscConfig+0x5fa>
 8005834:	40021000 	.word	0x40021000
 8005838:	fffeffff 	.word	0xfffeffff
 800583c:	fffbffff 	.word	0xfffbffff
 8005840:	ffff80ff 	.word	0xffff80ff
 8005844:	ffffc7ff 	.word	0xffffc7ff
 8005848:	00f42400 	.word	0x00f42400
 800584c:	20000000 	.word	0x20000000
 8005850:	20000004 	.word	0x20000004
 8005854:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005858:	4bac      	ldr	r3, [pc, #688]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 800585a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800585c:	2380      	movs	r3, #128	; 0x80
 800585e:	055b      	lsls	r3, r3, #21
 8005860:	4013      	ands	r3, r2
 8005862:	d101      	bne.n	8005868 <HAL_RCC_OscConfig+0x360>
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <HAL_RCC_OscConfig+0x362>
 8005868:	2300      	movs	r3, #0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d011      	beq.n	8005892 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800586e:	4ba7      	ldr	r3, [pc, #668]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 8005870:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005872:	4ba6      	ldr	r3, [pc, #664]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 8005874:	2180      	movs	r1, #128	; 0x80
 8005876:	0549      	lsls	r1, r1, #21
 8005878:	430a      	orrs	r2, r1
 800587a:	63da      	str	r2, [r3, #60]	; 0x3c
 800587c:	4ba3      	ldr	r3, [pc, #652]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 800587e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005880:	2380      	movs	r3, #128	; 0x80
 8005882:	055b      	lsls	r3, r3, #21
 8005884:	4013      	ands	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800588a:	231f      	movs	r3, #31
 800588c:	18fb      	adds	r3, r7, r3
 800588e:	2201      	movs	r2, #1
 8005890:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005892:	4b9f      	ldr	r3, [pc, #636]	; (8005b10 <HAL_RCC_OscConfig+0x608>)
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	2380      	movs	r3, #128	; 0x80
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	4013      	ands	r3, r2
 800589c:	d11a      	bne.n	80058d4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800589e:	4b9c      	ldr	r3, [pc, #624]	; (8005b10 <HAL_RCC_OscConfig+0x608>)
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	4b9b      	ldr	r3, [pc, #620]	; (8005b10 <HAL_RCC_OscConfig+0x608>)
 80058a4:	2180      	movs	r1, #128	; 0x80
 80058a6:	0049      	lsls	r1, r1, #1
 80058a8:	430a      	orrs	r2, r1
 80058aa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80058ac:	f7fe f8ce 	bl	8003a4c <HAL_GetTick>
 80058b0:	0003      	movs	r3, r0
 80058b2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058b4:	e008      	b.n	80058c8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058b6:	f7fe f8c9 	bl	8003a4c <HAL_GetTick>
 80058ba:	0002      	movs	r2, r0
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e11c      	b.n	8005b02 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058c8:	4b91      	ldr	r3, [pc, #580]	; (8005b10 <HAL_RCC_OscConfig+0x608>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	2380      	movs	r3, #128	; 0x80
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	4013      	ands	r3, r2
 80058d2:	d0f0      	beq.n	80058b6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d106      	bne.n	80058ea <HAL_RCC_OscConfig+0x3e2>
 80058dc:	4b8b      	ldr	r3, [pc, #556]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 80058de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058e0:	4b8a      	ldr	r3, [pc, #552]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 80058e2:	2101      	movs	r1, #1
 80058e4:	430a      	orrs	r2, r1
 80058e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80058e8:	e01c      	b.n	8005924 <HAL_RCC_OscConfig+0x41c>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	2b05      	cmp	r3, #5
 80058f0:	d10c      	bne.n	800590c <HAL_RCC_OscConfig+0x404>
 80058f2:	4b86      	ldr	r3, [pc, #536]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 80058f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058f6:	4b85      	ldr	r3, [pc, #532]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 80058f8:	2104      	movs	r1, #4
 80058fa:	430a      	orrs	r2, r1
 80058fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80058fe:	4b83      	ldr	r3, [pc, #524]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 8005900:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005902:	4b82      	ldr	r3, [pc, #520]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 8005904:	2101      	movs	r1, #1
 8005906:	430a      	orrs	r2, r1
 8005908:	65da      	str	r2, [r3, #92]	; 0x5c
 800590a:	e00b      	b.n	8005924 <HAL_RCC_OscConfig+0x41c>
 800590c:	4b7f      	ldr	r3, [pc, #508]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 800590e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005910:	4b7e      	ldr	r3, [pc, #504]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 8005912:	2101      	movs	r1, #1
 8005914:	438a      	bics	r2, r1
 8005916:	65da      	str	r2, [r3, #92]	; 0x5c
 8005918:	4b7c      	ldr	r3, [pc, #496]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 800591a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800591c:	4b7b      	ldr	r3, [pc, #492]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 800591e:	2104      	movs	r1, #4
 8005920:	438a      	bics	r2, r1
 8005922:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d014      	beq.n	8005956 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592c:	f7fe f88e 	bl	8003a4c <HAL_GetTick>
 8005930:	0003      	movs	r3, r0
 8005932:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005934:	e009      	b.n	800594a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005936:	f7fe f889 	bl	8003a4c <HAL_GetTick>
 800593a:	0002      	movs	r2, r0
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	4a74      	ldr	r2, [pc, #464]	; (8005b14 <HAL_RCC_OscConfig+0x60c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e0db      	b.n	8005b02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800594a:	4b70      	ldr	r3, [pc, #448]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 800594c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800594e:	2202      	movs	r2, #2
 8005950:	4013      	ands	r3, r2
 8005952:	d0f0      	beq.n	8005936 <HAL_RCC_OscConfig+0x42e>
 8005954:	e013      	b.n	800597e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005956:	f7fe f879 	bl	8003a4c <HAL_GetTick>
 800595a:	0003      	movs	r3, r0
 800595c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800595e:	e009      	b.n	8005974 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005960:	f7fe f874 	bl	8003a4c <HAL_GetTick>
 8005964:	0002      	movs	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	4a6a      	ldr	r2, [pc, #424]	; (8005b14 <HAL_RCC_OscConfig+0x60c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d901      	bls.n	8005974 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e0c6      	b.n	8005b02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005974:	4b65      	ldr	r3, [pc, #404]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 8005976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005978:	2202      	movs	r2, #2
 800597a:	4013      	ands	r3, r2
 800597c:	d1f0      	bne.n	8005960 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800597e:	231f      	movs	r3, #31
 8005980:	18fb      	adds	r3, r7, r3
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d105      	bne.n	8005994 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005988:	4b60      	ldr	r3, [pc, #384]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 800598a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800598c:	4b5f      	ldr	r3, [pc, #380]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 800598e:	4962      	ldr	r1, [pc, #392]	; (8005b18 <HAL_RCC_OscConfig+0x610>)
 8005990:	400a      	ands	r2, r1
 8005992:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d100      	bne.n	800599e <HAL_RCC_OscConfig+0x496>
 800599c:	e0b0      	b.n	8005b00 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800599e:	4b5b      	ldr	r3, [pc, #364]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	2238      	movs	r2, #56	; 0x38
 80059a4:	4013      	ands	r3, r2
 80059a6:	2b10      	cmp	r3, #16
 80059a8:	d100      	bne.n	80059ac <HAL_RCC_OscConfig+0x4a4>
 80059aa:	e078      	b.n	8005a9e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d153      	bne.n	8005a5c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059b4:	4b55      	ldr	r3, [pc, #340]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	4b54      	ldr	r3, [pc, #336]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 80059ba:	4958      	ldr	r1, [pc, #352]	; (8005b1c <HAL_RCC_OscConfig+0x614>)
 80059bc:	400a      	ands	r2, r1
 80059be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c0:	f7fe f844 	bl	8003a4c <HAL_GetTick>
 80059c4:	0003      	movs	r3, r0
 80059c6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ca:	f7fe f83f 	bl	8003a4c <HAL_GetTick>
 80059ce:	0002      	movs	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e092      	b.n	8005b02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059dc:	4b4b      	ldr	r3, [pc, #300]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	2380      	movs	r3, #128	; 0x80
 80059e2:	049b      	lsls	r3, r3, #18
 80059e4:	4013      	ands	r3, r2
 80059e6:	d1f0      	bne.n	80059ca <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059e8:	4b48      	ldr	r3, [pc, #288]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	4a4c      	ldr	r2, [pc, #304]	; (8005b20 <HAL_RCC_OscConfig+0x618>)
 80059ee:	4013      	ands	r3, r2
 80059f0:	0019      	movs	r1, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1a      	ldr	r2, [r3, #32]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a00:	021b      	lsls	r3, r3, #8
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	4b3e      	ldr	r3, [pc, #248]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 8005a12:	430a      	orrs	r2, r1
 8005a14:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a16:	4b3d      	ldr	r3, [pc, #244]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	4b3c      	ldr	r3, [pc, #240]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 8005a1c:	2180      	movs	r1, #128	; 0x80
 8005a1e:	0449      	lsls	r1, r1, #17
 8005a20:	430a      	orrs	r2, r1
 8005a22:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005a24:	4b39      	ldr	r3, [pc, #228]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	4b38      	ldr	r3, [pc, #224]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 8005a2a:	2180      	movs	r1, #128	; 0x80
 8005a2c:	0549      	lsls	r1, r1, #21
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a32:	f7fe f80b 	bl	8003a4c <HAL_GetTick>
 8005a36:	0003      	movs	r3, r0
 8005a38:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a3c:	f7fe f806 	bl	8003a4c <HAL_GetTick>
 8005a40:	0002      	movs	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e059      	b.n	8005b02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a4e:	4b2f      	ldr	r3, [pc, #188]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	2380      	movs	r3, #128	; 0x80
 8005a54:	049b      	lsls	r3, r3, #18
 8005a56:	4013      	ands	r3, r2
 8005a58:	d0f0      	beq.n	8005a3c <HAL_RCC_OscConfig+0x534>
 8005a5a:	e051      	b.n	8005b00 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a5c:	4b2b      	ldr	r3, [pc, #172]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	4b2a      	ldr	r3, [pc, #168]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 8005a62:	492e      	ldr	r1, [pc, #184]	; (8005b1c <HAL_RCC_OscConfig+0x614>)
 8005a64:	400a      	ands	r2, r1
 8005a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a68:	f7fd fff0 	bl	8003a4c <HAL_GetTick>
 8005a6c:	0003      	movs	r3, r0
 8005a6e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a70:	e008      	b.n	8005a84 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a72:	f7fd ffeb 	bl	8003a4c <HAL_GetTick>
 8005a76:	0002      	movs	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e03e      	b.n	8005b02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a84:	4b21      	ldr	r3, [pc, #132]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	2380      	movs	r3, #128	; 0x80
 8005a8a:	049b      	lsls	r3, r3, #18
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d1f0      	bne.n	8005a72 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8005a90:	4b1e      	ldr	r3, [pc, #120]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	4b1d      	ldr	r3, [pc, #116]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 8005a96:	4923      	ldr	r1, [pc, #140]	; (8005b24 <HAL_RCC_OscConfig+0x61c>)
 8005a98:	400a      	ands	r2, r1
 8005a9a:	60da      	str	r2, [r3, #12]
 8005a9c:	e030      	b.n	8005b00 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e02b      	b.n	8005b02 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005aaa:	4b18      	ldr	r3, [pc, #96]	; (8005b0c <HAL_RCC_OscConfig+0x604>)
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	2203      	movs	r2, #3
 8005ab4:	401a      	ands	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d11e      	bne.n	8005afc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2270      	movs	r2, #112	; 0x70
 8005ac2:	401a      	ands	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d117      	bne.n	8005afc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	23fe      	movs	r3, #254	; 0xfe
 8005ad0:	01db      	lsls	r3, r3, #7
 8005ad2:	401a      	ands	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d10e      	bne.n	8005afc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	23f8      	movs	r3, #248	; 0xf8
 8005ae2:	039b      	lsls	r3, r3, #14
 8005ae4:	401a      	ands	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d106      	bne.n	8005afc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	0f5b      	lsrs	r3, r3, #29
 8005af2:	075a      	lsls	r2, r3, #29
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d001      	beq.n	8005b00 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e000      	b.n	8005b02 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	0018      	movs	r0, r3
 8005b04:	46bd      	mov	sp, r7
 8005b06:	b008      	add	sp, #32
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	46c0      	nop			; (mov r8, r8)
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	40007000 	.word	0x40007000
 8005b14:	00001388 	.word	0x00001388
 8005b18:	efffffff 	.word	0xefffffff
 8005b1c:	feffffff 	.word	0xfeffffff
 8005b20:	1fc1808c 	.word	0x1fc1808c
 8005b24:	effefffc 	.word	0xeffefffc

08005b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e0e9      	b.n	8005d10 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b3c:	4b76      	ldr	r3, [pc, #472]	; (8005d18 <HAL_RCC_ClockConfig+0x1f0>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2207      	movs	r2, #7
 8005b42:	4013      	ands	r3, r2
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d91e      	bls.n	8005b88 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4a:	4b73      	ldr	r3, [pc, #460]	; (8005d18 <HAL_RCC_ClockConfig+0x1f0>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2207      	movs	r2, #7
 8005b50:	4393      	bics	r3, r2
 8005b52:	0019      	movs	r1, r3
 8005b54:	4b70      	ldr	r3, [pc, #448]	; (8005d18 <HAL_RCC_ClockConfig+0x1f0>)
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b5c:	f7fd ff76 	bl	8003a4c <HAL_GetTick>
 8005b60:	0003      	movs	r3, r0
 8005b62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b64:	e009      	b.n	8005b7a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b66:	f7fd ff71 	bl	8003a4c <HAL_GetTick>
 8005b6a:	0002      	movs	r2, r0
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	4a6a      	ldr	r2, [pc, #424]	; (8005d1c <HAL_RCC_ClockConfig+0x1f4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e0ca      	b.n	8005d10 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b7a:	4b67      	ldr	r3, [pc, #412]	; (8005d18 <HAL_RCC_ClockConfig+0x1f0>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2207      	movs	r2, #7
 8005b80:	4013      	ands	r3, r2
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d1ee      	bne.n	8005b66 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	4013      	ands	r3, r2
 8005b90:	d015      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2204      	movs	r2, #4
 8005b98:	4013      	ands	r3, r2
 8005b9a:	d006      	beq.n	8005baa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005b9c:	4b60      	ldr	r3, [pc, #384]	; (8005d20 <HAL_RCC_ClockConfig+0x1f8>)
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	4b5f      	ldr	r3, [pc, #380]	; (8005d20 <HAL_RCC_ClockConfig+0x1f8>)
 8005ba2:	21e0      	movs	r1, #224	; 0xe0
 8005ba4:	01c9      	lsls	r1, r1, #7
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005baa:	4b5d      	ldr	r3, [pc, #372]	; (8005d20 <HAL_RCC_ClockConfig+0x1f8>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	4a5d      	ldr	r2, [pc, #372]	; (8005d24 <HAL_RCC_ClockConfig+0x1fc>)
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	0019      	movs	r1, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	4b59      	ldr	r3, [pc, #356]	; (8005d20 <HAL_RCC_ClockConfig+0x1f8>)
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	d057      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d107      	bne.n	8005be0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bd0:	4b53      	ldr	r3, [pc, #332]	; (8005d20 <HAL_RCC_ClockConfig+0x1f8>)
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	2380      	movs	r3, #128	; 0x80
 8005bd6:	029b      	lsls	r3, r3, #10
 8005bd8:	4013      	ands	r3, r2
 8005bda:	d12b      	bne.n	8005c34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e097      	b.n	8005d10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d107      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005be8:	4b4d      	ldr	r3, [pc, #308]	; (8005d20 <HAL_RCC_ClockConfig+0x1f8>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	2380      	movs	r3, #128	; 0x80
 8005bee:	049b      	lsls	r3, r3, #18
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	d11f      	bne.n	8005c34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e08b      	b.n	8005d10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d107      	bne.n	8005c10 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c00:	4b47      	ldr	r3, [pc, #284]	; (8005d20 <HAL_RCC_ClockConfig+0x1f8>)
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	2380      	movs	r3, #128	; 0x80
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	4013      	ands	r3, r2
 8005c0a:	d113      	bne.n	8005c34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e07f      	b.n	8005d10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	2b03      	cmp	r3, #3
 8005c16:	d106      	bne.n	8005c26 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c18:	4b41      	ldr	r3, [pc, #260]	; (8005d20 <HAL_RCC_ClockConfig+0x1f8>)
 8005c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	4013      	ands	r3, r2
 8005c20:	d108      	bne.n	8005c34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e074      	b.n	8005d10 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c26:	4b3e      	ldr	r3, [pc, #248]	; (8005d20 <HAL_RCC_ClockConfig+0x1f8>)
 8005c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	d101      	bne.n	8005c34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e06d      	b.n	8005d10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c34:	4b3a      	ldr	r3, [pc, #232]	; (8005d20 <HAL_RCC_ClockConfig+0x1f8>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	2207      	movs	r2, #7
 8005c3a:	4393      	bics	r3, r2
 8005c3c:	0019      	movs	r1, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	4b37      	ldr	r3, [pc, #220]	; (8005d20 <HAL_RCC_ClockConfig+0x1f8>)
 8005c44:	430a      	orrs	r2, r1
 8005c46:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c48:	f7fd ff00 	bl	8003a4c <HAL_GetTick>
 8005c4c:	0003      	movs	r3, r0
 8005c4e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c50:	e009      	b.n	8005c66 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c52:	f7fd fefb 	bl	8003a4c <HAL_GetTick>
 8005c56:	0002      	movs	r2, r0
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	4a2f      	ldr	r2, [pc, #188]	; (8005d1c <HAL_RCC_ClockConfig+0x1f4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e054      	b.n	8005d10 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c66:	4b2e      	ldr	r3, [pc, #184]	; (8005d20 <HAL_RCC_ClockConfig+0x1f8>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	2238      	movs	r2, #56	; 0x38
 8005c6c:	401a      	ands	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d1ec      	bne.n	8005c52 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c78:	4b27      	ldr	r3, [pc, #156]	; (8005d18 <HAL_RCC_ClockConfig+0x1f0>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2207      	movs	r2, #7
 8005c7e:	4013      	ands	r3, r2
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d21e      	bcs.n	8005cc4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c86:	4b24      	ldr	r3, [pc, #144]	; (8005d18 <HAL_RCC_ClockConfig+0x1f0>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2207      	movs	r2, #7
 8005c8c:	4393      	bics	r3, r2
 8005c8e:	0019      	movs	r1, r3
 8005c90:	4b21      	ldr	r3, [pc, #132]	; (8005d18 <HAL_RCC_ClockConfig+0x1f0>)
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c98:	f7fd fed8 	bl	8003a4c <HAL_GetTick>
 8005c9c:	0003      	movs	r3, r0
 8005c9e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005ca0:	e009      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca2:	f7fd fed3 	bl	8003a4c <HAL_GetTick>
 8005ca6:	0002      	movs	r2, r0
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	4a1b      	ldr	r2, [pc, #108]	; (8005d1c <HAL_RCC_ClockConfig+0x1f4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e02c      	b.n	8005d10 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005cb6:	4b18      	ldr	r3, [pc, #96]	; (8005d18 <HAL_RCC_ClockConfig+0x1f0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2207      	movs	r2, #7
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d1ee      	bne.n	8005ca2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2204      	movs	r2, #4
 8005cca:	4013      	ands	r3, r2
 8005ccc:	d009      	beq.n	8005ce2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005cce:	4b14      	ldr	r3, [pc, #80]	; (8005d20 <HAL_RCC_ClockConfig+0x1f8>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	4a15      	ldr	r2, [pc, #84]	; (8005d28 <HAL_RCC_ClockConfig+0x200>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	0019      	movs	r1, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	4b10      	ldr	r3, [pc, #64]	; (8005d20 <HAL_RCC_ClockConfig+0x1f8>)
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005ce2:	f000 f829 	bl	8005d38 <HAL_RCC_GetSysClockFreq>
 8005ce6:	0001      	movs	r1, r0
 8005ce8:	4b0d      	ldr	r3, [pc, #52]	; (8005d20 <HAL_RCC_ClockConfig+0x1f8>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	0a1b      	lsrs	r3, r3, #8
 8005cee:	220f      	movs	r2, #15
 8005cf0:	401a      	ands	r2, r3
 8005cf2:	4b0e      	ldr	r3, [pc, #56]	; (8005d2c <HAL_RCC_ClockConfig+0x204>)
 8005cf4:	0092      	lsls	r2, r2, #2
 8005cf6:	58d3      	ldr	r3, [r2, r3]
 8005cf8:	221f      	movs	r2, #31
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	000a      	movs	r2, r1
 8005cfe:	40da      	lsrs	r2, r3
 8005d00:	4b0b      	ldr	r3, [pc, #44]	; (8005d30 <HAL_RCC_ClockConfig+0x208>)
 8005d02:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005d04:	4b0b      	ldr	r3, [pc, #44]	; (8005d34 <HAL_RCC_ClockConfig+0x20c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f7fd fe43 	bl	8003994 <HAL_InitTick>
 8005d0e:	0003      	movs	r3, r0
}
 8005d10:	0018      	movs	r0, r3
 8005d12:	46bd      	mov	sp, r7
 8005d14:	b004      	add	sp, #16
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40022000 	.word	0x40022000
 8005d1c:	00001388 	.word	0x00001388
 8005d20:	40021000 	.word	0x40021000
 8005d24:	fffff0ff 	.word	0xfffff0ff
 8005d28:	ffff8fff 	.word	0xffff8fff
 8005d2c:	08006d58 	.word	0x08006d58
 8005d30:	20000000 	.word	0x20000000
 8005d34:	20000004 	.word	0x20000004

08005d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d3e:	4b3c      	ldr	r3, [pc, #240]	; (8005e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	2238      	movs	r2, #56	; 0x38
 8005d44:	4013      	ands	r3, r2
 8005d46:	d10f      	bne.n	8005d68 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005d48:	4b39      	ldr	r3, [pc, #228]	; (8005e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	0adb      	lsrs	r3, r3, #11
 8005d4e:	2207      	movs	r2, #7
 8005d50:	4013      	ands	r3, r2
 8005d52:	2201      	movs	r2, #1
 8005d54:	409a      	lsls	r2, r3
 8005d56:	0013      	movs	r3, r2
 8005d58:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005d5a:	6839      	ldr	r1, [r7, #0]
 8005d5c:	4835      	ldr	r0, [pc, #212]	; (8005e34 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005d5e:	f7fa f9d9 	bl	8000114 <__udivsi3>
 8005d62:	0003      	movs	r3, r0
 8005d64:	613b      	str	r3, [r7, #16]
 8005d66:	e05d      	b.n	8005e24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d68:	4b31      	ldr	r3, [pc, #196]	; (8005e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	2238      	movs	r2, #56	; 0x38
 8005d6e:	4013      	ands	r3, r2
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d102      	bne.n	8005d7a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d74:	4b30      	ldr	r3, [pc, #192]	; (8005e38 <HAL_RCC_GetSysClockFreq+0x100>)
 8005d76:	613b      	str	r3, [r7, #16]
 8005d78:	e054      	b.n	8005e24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d7a:	4b2d      	ldr	r3, [pc, #180]	; (8005e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	2238      	movs	r2, #56	; 0x38
 8005d80:	4013      	ands	r3, r2
 8005d82:	2b10      	cmp	r3, #16
 8005d84:	d138      	bne.n	8005df8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005d86:	4b2a      	ldr	r3, [pc, #168]	; (8005e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	2203      	movs	r2, #3
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d90:	4b27      	ldr	r3, [pc, #156]	; (8005e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	091b      	lsrs	r3, r3, #4
 8005d96:	2207      	movs	r2, #7
 8005d98:	4013      	ands	r3, r2
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	d10d      	bne.n	8005dc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005da4:	68b9      	ldr	r1, [r7, #8]
 8005da6:	4824      	ldr	r0, [pc, #144]	; (8005e38 <HAL_RCC_GetSysClockFreq+0x100>)
 8005da8:	f7fa f9b4 	bl	8000114 <__udivsi3>
 8005dac:	0003      	movs	r3, r0
 8005dae:	0019      	movs	r1, r3
 8005db0:	4b1f      	ldr	r3, [pc, #124]	; (8005e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	0a1b      	lsrs	r3, r3, #8
 8005db6:	227f      	movs	r2, #127	; 0x7f
 8005db8:	4013      	ands	r3, r2
 8005dba:	434b      	muls	r3, r1
 8005dbc:	617b      	str	r3, [r7, #20]
        break;
 8005dbe:	e00d      	b.n	8005ddc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005dc0:	68b9      	ldr	r1, [r7, #8]
 8005dc2:	481c      	ldr	r0, [pc, #112]	; (8005e34 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005dc4:	f7fa f9a6 	bl	8000114 <__udivsi3>
 8005dc8:	0003      	movs	r3, r0
 8005dca:	0019      	movs	r1, r3
 8005dcc:	4b18      	ldr	r3, [pc, #96]	; (8005e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	0a1b      	lsrs	r3, r3, #8
 8005dd2:	227f      	movs	r2, #127	; 0x7f
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	434b      	muls	r3, r1
 8005dd8:	617b      	str	r3, [r7, #20]
        break;
 8005dda:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005ddc:	4b14      	ldr	r3, [pc, #80]	; (8005e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	0f5b      	lsrs	r3, r3, #29
 8005de2:	2207      	movs	r2, #7
 8005de4:	4013      	ands	r3, r2
 8005de6:	3301      	adds	r3, #1
 8005de8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	6978      	ldr	r0, [r7, #20]
 8005dee:	f7fa f991 	bl	8000114 <__udivsi3>
 8005df2:	0003      	movs	r3, r0
 8005df4:	613b      	str	r3, [r7, #16]
 8005df6:	e015      	b.n	8005e24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005df8:	4b0d      	ldr	r3, [pc, #52]	; (8005e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	2238      	movs	r2, #56	; 0x38
 8005dfe:	4013      	ands	r3, r2
 8005e00:	2b20      	cmp	r3, #32
 8005e02:	d103      	bne.n	8005e0c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005e04:	2380      	movs	r3, #128	; 0x80
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	e00b      	b.n	8005e24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005e0c:	4b08      	ldr	r3, [pc, #32]	; (8005e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	2238      	movs	r2, #56	; 0x38
 8005e12:	4013      	ands	r3, r2
 8005e14:	2b18      	cmp	r3, #24
 8005e16:	d103      	bne.n	8005e20 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005e18:	23fa      	movs	r3, #250	; 0xfa
 8005e1a:	01db      	lsls	r3, r3, #7
 8005e1c:	613b      	str	r3, [r7, #16]
 8005e1e:	e001      	b.n	8005e24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005e24:	693b      	ldr	r3, [r7, #16]
}
 8005e26:	0018      	movs	r0, r3
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	b006      	add	sp, #24
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	40021000 	.word	0x40021000
 8005e34:	00f42400 	.word	0x00f42400
 8005e38:	007a1200 	.word	0x007a1200

08005e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005e44:	2313      	movs	r3, #19
 8005e46:	18fb      	adds	r3, r7, r3
 8005e48:	2200      	movs	r2, #0
 8005e4a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e4c:	2312      	movs	r3, #18
 8005e4e:	18fb      	adds	r3, r7, r3
 8005e50:	2200      	movs	r2, #0
 8005e52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	2380      	movs	r3, #128	; 0x80
 8005e5a:	029b      	lsls	r3, r3, #10
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	d100      	bne.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005e60:	e0a3      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e62:	2011      	movs	r0, #17
 8005e64:	183b      	adds	r3, r7, r0
 8005e66:	2200      	movs	r2, #0
 8005e68:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e6a:	4b7f      	ldr	r3, [pc, #508]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e6e:	2380      	movs	r3, #128	; 0x80
 8005e70:	055b      	lsls	r3, r3, #21
 8005e72:	4013      	ands	r3, r2
 8005e74:	d110      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e76:	4b7c      	ldr	r3, [pc, #496]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e7a:	4b7b      	ldr	r3, [pc, #492]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e7c:	2180      	movs	r1, #128	; 0x80
 8005e7e:	0549      	lsls	r1, r1, #21
 8005e80:	430a      	orrs	r2, r1
 8005e82:	63da      	str	r2, [r3, #60]	; 0x3c
 8005e84:	4b78      	ldr	r3, [pc, #480]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005e86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e88:	2380      	movs	r3, #128	; 0x80
 8005e8a:	055b      	lsls	r3, r3, #21
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	60bb      	str	r3, [r7, #8]
 8005e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e92:	183b      	adds	r3, r7, r0
 8005e94:	2201      	movs	r2, #1
 8005e96:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e98:	4b74      	ldr	r3, [pc, #464]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	4b73      	ldr	r3, [pc, #460]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005e9e:	2180      	movs	r1, #128	; 0x80
 8005ea0:	0049      	lsls	r1, r1, #1
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ea6:	f7fd fdd1 	bl	8003a4c <HAL_GetTick>
 8005eaa:	0003      	movs	r3, r0
 8005eac:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eae:	e00b      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eb0:	f7fd fdcc 	bl	8003a4c <HAL_GetTick>
 8005eb4:	0002      	movs	r2, r0
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d904      	bls.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005ebe:	2313      	movs	r3, #19
 8005ec0:	18fb      	adds	r3, r7, r3
 8005ec2:	2203      	movs	r2, #3
 8005ec4:	701a      	strb	r2, [r3, #0]
        break;
 8005ec6:	e005      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ec8:	4b68      	ldr	r3, [pc, #416]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	2380      	movs	r3, #128	; 0x80
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	d0ed      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005ed4:	2313      	movs	r3, #19
 8005ed6:	18fb      	adds	r3, r7, r3
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d154      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ede:	4b62      	ldr	r3, [pc, #392]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ee0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ee2:	23c0      	movs	r3, #192	; 0xc0
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d019      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d014      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005efa:	4b5b      	ldr	r3, [pc, #364]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005efe:	4a5c      	ldr	r2, [pc, #368]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f04:	4b58      	ldr	r3, [pc, #352]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005f06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f08:	4b57      	ldr	r3, [pc, #348]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005f0a:	2180      	movs	r1, #128	; 0x80
 8005f0c:	0249      	lsls	r1, r1, #9
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f12:	4b55      	ldr	r3, [pc, #340]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005f14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f16:	4b54      	ldr	r3, [pc, #336]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005f18:	4956      	ldr	r1, [pc, #344]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8005f1a:	400a      	ands	r2, r1
 8005f1c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f1e:	4b52      	ldr	r3, [pc, #328]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	2201      	movs	r2, #1
 8005f28:	4013      	ands	r3, r2
 8005f2a:	d016      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2c:	f7fd fd8e 	bl	8003a4c <HAL_GetTick>
 8005f30:	0003      	movs	r3, r0
 8005f32:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f34:	e00c      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f36:	f7fd fd89 	bl	8003a4c <HAL_GetTick>
 8005f3a:	0002      	movs	r2, r0
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	4a4d      	ldr	r2, [pc, #308]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d904      	bls.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005f46:	2313      	movs	r3, #19
 8005f48:	18fb      	adds	r3, r7, r3
 8005f4a:	2203      	movs	r2, #3
 8005f4c:	701a      	strb	r2, [r3, #0]
            break;
 8005f4e:	e004      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f50:	4b45      	ldr	r3, [pc, #276]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f54:	2202      	movs	r2, #2
 8005f56:	4013      	ands	r3, r2
 8005f58:	d0ed      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005f5a:	2313      	movs	r3, #19
 8005f5c:	18fb      	adds	r3, r7, r3
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10a      	bne.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f64:	4b40      	ldr	r3, [pc, #256]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f68:	4a41      	ldr	r2, [pc, #260]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	0019      	movs	r1, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	695a      	ldr	r2, [r3, #20]
 8005f72:	4b3d      	ldr	r3, [pc, #244]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005f74:	430a      	orrs	r2, r1
 8005f76:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f78:	e00c      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f7a:	2312      	movs	r3, #18
 8005f7c:	18fb      	adds	r3, r7, r3
 8005f7e:	2213      	movs	r2, #19
 8005f80:	18ba      	adds	r2, r7, r2
 8005f82:	7812      	ldrb	r2, [r2, #0]
 8005f84:	701a      	strb	r2, [r3, #0]
 8005f86:	e005      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f88:	2312      	movs	r3, #18
 8005f8a:	18fb      	adds	r3, r7, r3
 8005f8c:	2213      	movs	r2, #19
 8005f8e:	18ba      	adds	r2, r7, r2
 8005f90:	7812      	ldrb	r2, [r2, #0]
 8005f92:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f94:	2311      	movs	r3, #17
 8005f96:	18fb      	adds	r3, r7, r3
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d105      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f9e:	4b32      	ldr	r3, [pc, #200]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005fa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fa2:	4b31      	ldr	r3, [pc, #196]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005fa4:	4935      	ldr	r1, [pc, #212]	; (800607c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005fa6:	400a      	ands	r2, r1
 8005fa8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	d009      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fb4:	4b2c      	ldr	r3, [pc, #176]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb8:	2203      	movs	r2, #3
 8005fba:	4393      	bics	r3, r2
 8005fbc:	0019      	movs	r1, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	4b29      	ldr	r3, [pc, #164]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	4013      	ands	r3, r2
 8005fd0:	d009      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fd2:	4b25      	ldr	r3, [pc, #148]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd6:	4a2a      	ldr	r2, [pc, #168]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005fd8:	4013      	ands	r3, r2
 8005fda:	0019      	movs	r1, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	4b21      	ldr	r3, [pc, #132]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	2380      	movs	r3, #128	; 0x80
 8005fec:	01db      	lsls	r3, r3, #7
 8005fee:	4013      	ands	r3, r2
 8005ff0:	d015      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ff2:	4b1d      	ldr	r3, [pc, #116]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	0899      	lsrs	r1, r3, #2
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691a      	ldr	r2, [r3, #16]
 8005ffe:	4b1a      	ldr	r3, [pc, #104]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006000:	430a      	orrs	r2, r1
 8006002:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691a      	ldr	r2, [r3, #16]
 8006008:	2380      	movs	r3, #128	; 0x80
 800600a:	05db      	lsls	r3, r3, #23
 800600c:	429a      	cmp	r2, r3
 800600e:	d106      	bne.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006010:	4b15      	ldr	r3, [pc, #84]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	4b14      	ldr	r3, [pc, #80]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006016:	2180      	movs	r1, #128	; 0x80
 8006018:	0249      	lsls	r1, r1, #9
 800601a:	430a      	orrs	r2, r1
 800601c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	2380      	movs	r3, #128	; 0x80
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	4013      	ands	r3, r2
 8006028:	d016      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800602a:	4b0f      	ldr	r3, [pc, #60]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800602c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602e:	4a15      	ldr	r2, [pc, #84]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006030:	4013      	ands	r3, r2
 8006032:	0019      	movs	r1, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68da      	ldr	r2, [r3, #12]
 8006038:	4b0b      	ldr	r3, [pc, #44]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800603a:	430a      	orrs	r2, r1
 800603c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	2380      	movs	r3, #128	; 0x80
 8006044:	01db      	lsls	r3, r3, #7
 8006046:	429a      	cmp	r2, r3
 8006048:	d106      	bne.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800604a:	4b07      	ldr	r3, [pc, #28]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	4b06      	ldr	r3, [pc, #24]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006050:	2180      	movs	r1, #128	; 0x80
 8006052:	0249      	lsls	r1, r1, #9
 8006054:	430a      	orrs	r2, r1
 8006056:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006058:	2312      	movs	r3, #18
 800605a:	18fb      	adds	r3, r7, r3
 800605c:	781b      	ldrb	r3, [r3, #0]
}
 800605e:	0018      	movs	r0, r3
 8006060:	46bd      	mov	sp, r7
 8006062:	b006      	add	sp, #24
 8006064:	bd80      	pop	{r7, pc}
 8006066:	46c0      	nop			; (mov r8, r8)
 8006068:	40021000 	.word	0x40021000
 800606c:	40007000 	.word	0x40007000
 8006070:	fffffcff 	.word	0xfffffcff
 8006074:	fffeffff 	.word	0xfffeffff
 8006078:	00001388 	.word	0x00001388
 800607c:	efffffff 	.word	0xefffffff
 8006080:	ffffcfff 	.word	0xffffcfff
 8006084:	ffff3fff 	.word	0xffff3fff

08006088 <__errno>:
 8006088:	4b01      	ldr	r3, [pc, #4]	; (8006090 <__errno+0x8>)
 800608a:	6818      	ldr	r0, [r3, #0]
 800608c:	4770      	bx	lr
 800608e:	46c0      	nop			; (mov r8, r8)
 8006090:	2000000c 	.word	0x2000000c

08006094 <__libc_init_array>:
 8006094:	b570      	push	{r4, r5, r6, lr}
 8006096:	2600      	movs	r6, #0
 8006098:	4d0c      	ldr	r5, [pc, #48]	; (80060cc <__libc_init_array+0x38>)
 800609a:	4c0d      	ldr	r4, [pc, #52]	; (80060d0 <__libc_init_array+0x3c>)
 800609c:	1b64      	subs	r4, r4, r5
 800609e:	10a4      	asrs	r4, r4, #2
 80060a0:	42a6      	cmp	r6, r4
 80060a2:	d109      	bne.n	80060b8 <__libc_init_array+0x24>
 80060a4:	2600      	movs	r6, #0
 80060a6:	f000 fd23 	bl	8006af0 <_init>
 80060aa:	4d0a      	ldr	r5, [pc, #40]	; (80060d4 <__libc_init_array+0x40>)
 80060ac:	4c0a      	ldr	r4, [pc, #40]	; (80060d8 <__libc_init_array+0x44>)
 80060ae:	1b64      	subs	r4, r4, r5
 80060b0:	10a4      	asrs	r4, r4, #2
 80060b2:	42a6      	cmp	r6, r4
 80060b4:	d105      	bne.n	80060c2 <__libc_init_array+0x2e>
 80060b6:	bd70      	pop	{r4, r5, r6, pc}
 80060b8:	00b3      	lsls	r3, r6, #2
 80060ba:	58eb      	ldr	r3, [r5, r3]
 80060bc:	4798      	blx	r3
 80060be:	3601      	adds	r6, #1
 80060c0:	e7ee      	b.n	80060a0 <__libc_init_array+0xc>
 80060c2:	00b3      	lsls	r3, r6, #2
 80060c4:	58eb      	ldr	r3, [r5, r3]
 80060c6:	4798      	blx	r3
 80060c8:	3601      	adds	r6, #1
 80060ca:	e7f2      	b.n	80060b2 <__libc_init_array+0x1e>
 80060cc:	08006dcc 	.word	0x08006dcc
 80060d0:	08006dcc 	.word	0x08006dcc
 80060d4:	08006dcc 	.word	0x08006dcc
 80060d8:	08006dd0 	.word	0x08006dd0

080060dc <malloc>:
 80060dc:	b510      	push	{r4, lr}
 80060de:	4b03      	ldr	r3, [pc, #12]	; (80060ec <malloc+0x10>)
 80060e0:	0001      	movs	r1, r0
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	f000 f882 	bl	80061ec <_malloc_r>
 80060e8:	bd10      	pop	{r4, pc}
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	2000000c 	.word	0x2000000c

080060f0 <free>:
 80060f0:	b510      	push	{r4, lr}
 80060f2:	4b03      	ldr	r3, [pc, #12]	; (8006100 <free+0x10>)
 80060f4:	0001      	movs	r1, r0
 80060f6:	6818      	ldr	r0, [r3, #0]
 80060f8:	f000 f80c 	bl	8006114 <_free_r>
 80060fc:	bd10      	pop	{r4, pc}
 80060fe:	46c0      	nop			; (mov r8, r8)
 8006100:	2000000c 	.word	0x2000000c

08006104 <memset>:
 8006104:	0003      	movs	r3, r0
 8006106:	1882      	adds	r2, r0, r2
 8006108:	4293      	cmp	r3, r2
 800610a:	d100      	bne.n	800610e <memset+0xa>
 800610c:	4770      	bx	lr
 800610e:	7019      	strb	r1, [r3, #0]
 8006110:	3301      	adds	r3, #1
 8006112:	e7f9      	b.n	8006108 <memset+0x4>

08006114 <_free_r>:
 8006114:	b570      	push	{r4, r5, r6, lr}
 8006116:	0005      	movs	r5, r0
 8006118:	2900      	cmp	r1, #0
 800611a:	d010      	beq.n	800613e <_free_r+0x2a>
 800611c:	1f0c      	subs	r4, r1, #4
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	da00      	bge.n	8006126 <_free_r+0x12>
 8006124:	18e4      	adds	r4, r4, r3
 8006126:	0028      	movs	r0, r5
 8006128:	f000 f91a 	bl	8006360 <__malloc_lock>
 800612c:	4a1d      	ldr	r2, [pc, #116]	; (80061a4 <_free_r+0x90>)
 800612e:	6813      	ldr	r3, [r2, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d105      	bne.n	8006140 <_free_r+0x2c>
 8006134:	6063      	str	r3, [r4, #4]
 8006136:	6014      	str	r4, [r2, #0]
 8006138:	0028      	movs	r0, r5
 800613a:	f000 f919 	bl	8006370 <__malloc_unlock>
 800613e:	bd70      	pop	{r4, r5, r6, pc}
 8006140:	42a3      	cmp	r3, r4
 8006142:	d908      	bls.n	8006156 <_free_r+0x42>
 8006144:	6821      	ldr	r1, [r4, #0]
 8006146:	1860      	adds	r0, r4, r1
 8006148:	4283      	cmp	r3, r0
 800614a:	d1f3      	bne.n	8006134 <_free_r+0x20>
 800614c:	6818      	ldr	r0, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	1841      	adds	r1, r0, r1
 8006152:	6021      	str	r1, [r4, #0]
 8006154:	e7ee      	b.n	8006134 <_free_r+0x20>
 8006156:	001a      	movs	r2, r3
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <_free_r+0x4e>
 800615e:	42a3      	cmp	r3, r4
 8006160:	d9f9      	bls.n	8006156 <_free_r+0x42>
 8006162:	6811      	ldr	r1, [r2, #0]
 8006164:	1850      	adds	r0, r2, r1
 8006166:	42a0      	cmp	r0, r4
 8006168:	d10b      	bne.n	8006182 <_free_r+0x6e>
 800616a:	6820      	ldr	r0, [r4, #0]
 800616c:	1809      	adds	r1, r1, r0
 800616e:	1850      	adds	r0, r2, r1
 8006170:	6011      	str	r1, [r2, #0]
 8006172:	4283      	cmp	r3, r0
 8006174:	d1e0      	bne.n	8006138 <_free_r+0x24>
 8006176:	6818      	ldr	r0, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	1841      	adds	r1, r0, r1
 800617c:	6011      	str	r1, [r2, #0]
 800617e:	6053      	str	r3, [r2, #4]
 8006180:	e7da      	b.n	8006138 <_free_r+0x24>
 8006182:	42a0      	cmp	r0, r4
 8006184:	d902      	bls.n	800618c <_free_r+0x78>
 8006186:	230c      	movs	r3, #12
 8006188:	602b      	str	r3, [r5, #0]
 800618a:	e7d5      	b.n	8006138 <_free_r+0x24>
 800618c:	6821      	ldr	r1, [r4, #0]
 800618e:	1860      	adds	r0, r4, r1
 8006190:	4283      	cmp	r3, r0
 8006192:	d103      	bne.n	800619c <_free_r+0x88>
 8006194:	6818      	ldr	r0, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	1841      	adds	r1, r0, r1
 800619a:	6021      	str	r1, [r4, #0]
 800619c:	6063      	str	r3, [r4, #4]
 800619e:	6054      	str	r4, [r2, #4]
 80061a0:	e7ca      	b.n	8006138 <_free_r+0x24>
 80061a2:	46c0      	nop			; (mov r8, r8)
 80061a4:	2000027c 	.word	0x2000027c

080061a8 <sbrk_aligned>:
 80061a8:	b570      	push	{r4, r5, r6, lr}
 80061aa:	4e0f      	ldr	r6, [pc, #60]	; (80061e8 <sbrk_aligned+0x40>)
 80061ac:	000d      	movs	r5, r1
 80061ae:	6831      	ldr	r1, [r6, #0]
 80061b0:	0004      	movs	r4, r0
 80061b2:	2900      	cmp	r1, #0
 80061b4:	d102      	bne.n	80061bc <sbrk_aligned+0x14>
 80061b6:	f000 f88f 	bl	80062d8 <_sbrk_r>
 80061ba:	6030      	str	r0, [r6, #0]
 80061bc:	0029      	movs	r1, r5
 80061be:	0020      	movs	r0, r4
 80061c0:	f000 f88a 	bl	80062d8 <_sbrk_r>
 80061c4:	1c43      	adds	r3, r0, #1
 80061c6:	d00a      	beq.n	80061de <sbrk_aligned+0x36>
 80061c8:	2303      	movs	r3, #3
 80061ca:	1cc5      	adds	r5, r0, #3
 80061cc:	439d      	bics	r5, r3
 80061ce:	42a8      	cmp	r0, r5
 80061d0:	d007      	beq.n	80061e2 <sbrk_aligned+0x3a>
 80061d2:	1a29      	subs	r1, r5, r0
 80061d4:	0020      	movs	r0, r4
 80061d6:	f000 f87f 	bl	80062d8 <_sbrk_r>
 80061da:	1c43      	adds	r3, r0, #1
 80061dc:	d101      	bne.n	80061e2 <sbrk_aligned+0x3a>
 80061de:	2501      	movs	r5, #1
 80061e0:	426d      	negs	r5, r5
 80061e2:	0028      	movs	r0, r5
 80061e4:	bd70      	pop	{r4, r5, r6, pc}
 80061e6:	46c0      	nop			; (mov r8, r8)
 80061e8:	20000280 	.word	0x20000280

080061ec <_malloc_r>:
 80061ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061ee:	2203      	movs	r2, #3
 80061f0:	1ccb      	adds	r3, r1, #3
 80061f2:	4393      	bics	r3, r2
 80061f4:	3308      	adds	r3, #8
 80061f6:	0006      	movs	r6, r0
 80061f8:	001f      	movs	r7, r3
 80061fa:	2b0c      	cmp	r3, #12
 80061fc:	d232      	bcs.n	8006264 <_malloc_r+0x78>
 80061fe:	270c      	movs	r7, #12
 8006200:	42b9      	cmp	r1, r7
 8006202:	d831      	bhi.n	8006268 <_malloc_r+0x7c>
 8006204:	0030      	movs	r0, r6
 8006206:	f000 f8ab 	bl	8006360 <__malloc_lock>
 800620a:	4d32      	ldr	r5, [pc, #200]	; (80062d4 <_malloc_r+0xe8>)
 800620c:	682b      	ldr	r3, [r5, #0]
 800620e:	001c      	movs	r4, r3
 8006210:	2c00      	cmp	r4, #0
 8006212:	d12e      	bne.n	8006272 <_malloc_r+0x86>
 8006214:	0039      	movs	r1, r7
 8006216:	0030      	movs	r0, r6
 8006218:	f7ff ffc6 	bl	80061a8 <sbrk_aligned>
 800621c:	0004      	movs	r4, r0
 800621e:	1c43      	adds	r3, r0, #1
 8006220:	d11e      	bne.n	8006260 <_malloc_r+0x74>
 8006222:	682c      	ldr	r4, [r5, #0]
 8006224:	0025      	movs	r5, r4
 8006226:	2d00      	cmp	r5, #0
 8006228:	d14a      	bne.n	80062c0 <_malloc_r+0xd4>
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	0029      	movs	r1, r5
 800622e:	18e3      	adds	r3, r4, r3
 8006230:	0030      	movs	r0, r6
 8006232:	9301      	str	r3, [sp, #4]
 8006234:	f000 f850 	bl	80062d8 <_sbrk_r>
 8006238:	9b01      	ldr	r3, [sp, #4]
 800623a:	4283      	cmp	r3, r0
 800623c:	d143      	bne.n	80062c6 <_malloc_r+0xda>
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	3703      	adds	r7, #3
 8006242:	1aff      	subs	r7, r7, r3
 8006244:	2303      	movs	r3, #3
 8006246:	439f      	bics	r7, r3
 8006248:	3708      	adds	r7, #8
 800624a:	2f0c      	cmp	r7, #12
 800624c:	d200      	bcs.n	8006250 <_malloc_r+0x64>
 800624e:	270c      	movs	r7, #12
 8006250:	0039      	movs	r1, r7
 8006252:	0030      	movs	r0, r6
 8006254:	f7ff ffa8 	bl	80061a8 <sbrk_aligned>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d034      	beq.n	80062c6 <_malloc_r+0xda>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	19df      	adds	r7, r3, r7
 8006260:	6027      	str	r7, [r4, #0]
 8006262:	e013      	b.n	800628c <_malloc_r+0xa0>
 8006264:	2b00      	cmp	r3, #0
 8006266:	dacb      	bge.n	8006200 <_malloc_r+0x14>
 8006268:	230c      	movs	r3, #12
 800626a:	2500      	movs	r5, #0
 800626c:	6033      	str	r3, [r6, #0]
 800626e:	0028      	movs	r0, r5
 8006270:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006272:	6822      	ldr	r2, [r4, #0]
 8006274:	1bd1      	subs	r1, r2, r7
 8006276:	d420      	bmi.n	80062ba <_malloc_r+0xce>
 8006278:	290b      	cmp	r1, #11
 800627a:	d917      	bls.n	80062ac <_malloc_r+0xc0>
 800627c:	19e2      	adds	r2, r4, r7
 800627e:	6027      	str	r7, [r4, #0]
 8006280:	42a3      	cmp	r3, r4
 8006282:	d111      	bne.n	80062a8 <_malloc_r+0xbc>
 8006284:	602a      	str	r2, [r5, #0]
 8006286:	6863      	ldr	r3, [r4, #4]
 8006288:	6011      	str	r1, [r2, #0]
 800628a:	6053      	str	r3, [r2, #4]
 800628c:	0030      	movs	r0, r6
 800628e:	0025      	movs	r5, r4
 8006290:	f000 f86e 	bl	8006370 <__malloc_unlock>
 8006294:	2207      	movs	r2, #7
 8006296:	350b      	adds	r5, #11
 8006298:	1d23      	adds	r3, r4, #4
 800629a:	4395      	bics	r5, r2
 800629c:	1aea      	subs	r2, r5, r3
 800629e:	429d      	cmp	r5, r3
 80062a0:	d0e5      	beq.n	800626e <_malloc_r+0x82>
 80062a2:	1b5b      	subs	r3, r3, r5
 80062a4:	50a3      	str	r3, [r4, r2]
 80062a6:	e7e2      	b.n	800626e <_malloc_r+0x82>
 80062a8:	605a      	str	r2, [r3, #4]
 80062aa:	e7ec      	b.n	8006286 <_malloc_r+0x9a>
 80062ac:	6862      	ldr	r2, [r4, #4]
 80062ae:	42a3      	cmp	r3, r4
 80062b0:	d101      	bne.n	80062b6 <_malloc_r+0xca>
 80062b2:	602a      	str	r2, [r5, #0]
 80062b4:	e7ea      	b.n	800628c <_malloc_r+0xa0>
 80062b6:	605a      	str	r2, [r3, #4]
 80062b8:	e7e8      	b.n	800628c <_malloc_r+0xa0>
 80062ba:	0023      	movs	r3, r4
 80062bc:	6864      	ldr	r4, [r4, #4]
 80062be:	e7a7      	b.n	8006210 <_malloc_r+0x24>
 80062c0:	002c      	movs	r4, r5
 80062c2:	686d      	ldr	r5, [r5, #4]
 80062c4:	e7af      	b.n	8006226 <_malloc_r+0x3a>
 80062c6:	230c      	movs	r3, #12
 80062c8:	0030      	movs	r0, r6
 80062ca:	6033      	str	r3, [r6, #0]
 80062cc:	f000 f850 	bl	8006370 <__malloc_unlock>
 80062d0:	e7cd      	b.n	800626e <_malloc_r+0x82>
 80062d2:	46c0      	nop			; (mov r8, r8)
 80062d4:	2000027c 	.word	0x2000027c

080062d8 <_sbrk_r>:
 80062d8:	2300      	movs	r3, #0
 80062da:	b570      	push	{r4, r5, r6, lr}
 80062dc:	4d06      	ldr	r5, [pc, #24]	; (80062f8 <_sbrk_r+0x20>)
 80062de:	0004      	movs	r4, r0
 80062e0:	0008      	movs	r0, r1
 80062e2:	602b      	str	r3, [r5, #0]
 80062e4:	f7fd f858 	bl	8003398 <_sbrk>
 80062e8:	1c43      	adds	r3, r0, #1
 80062ea:	d103      	bne.n	80062f4 <_sbrk_r+0x1c>
 80062ec:	682b      	ldr	r3, [r5, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d000      	beq.n	80062f4 <_sbrk_r+0x1c>
 80062f2:	6023      	str	r3, [r4, #0]
 80062f4:	bd70      	pop	{r4, r5, r6, pc}
 80062f6:	46c0      	nop			; (mov r8, r8)
 80062f8:	20000284 	.word	0x20000284

080062fc <siprintf>:
 80062fc:	b40e      	push	{r1, r2, r3}
 80062fe:	b500      	push	{lr}
 8006300:	490b      	ldr	r1, [pc, #44]	; (8006330 <siprintf+0x34>)
 8006302:	b09c      	sub	sp, #112	; 0x70
 8006304:	ab1d      	add	r3, sp, #116	; 0x74
 8006306:	9002      	str	r0, [sp, #8]
 8006308:	9006      	str	r0, [sp, #24]
 800630a:	9107      	str	r1, [sp, #28]
 800630c:	9104      	str	r1, [sp, #16]
 800630e:	4809      	ldr	r0, [pc, #36]	; (8006334 <siprintf+0x38>)
 8006310:	4909      	ldr	r1, [pc, #36]	; (8006338 <siprintf+0x3c>)
 8006312:	cb04      	ldmia	r3!, {r2}
 8006314:	9105      	str	r1, [sp, #20]
 8006316:	6800      	ldr	r0, [r0, #0]
 8006318:	a902      	add	r1, sp, #8
 800631a:	9301      	str	r3, [sp, #4]
 800631c:	f000 f892 	bl	8006444 <_svfiprintf_r>
 8006320:	2300      	movs	r3, #0
 8006322:	9a02      	ldr	r2, [sp, #8]
 8006324:	7013      	strb	r3, [r2, #0]
 8006326:	b01c      	add	sp, #112	; 0x70
 8006328:	bc08      	pop	{r3}
 800632a:	b003      	add	sp, #12
 800632c:	4718      	bx	r3
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	7fffffff 	.word	0x7fffffff
 8006334:	2000000c 	.word	0x2000000c
 8006338:	ffff0208 	.word	0xffff0208

0800633c <strncmp>:
 800633c:	b530      	push	{r4, r5, lr}
 800633e:	0005      	movs	r5, r0
 8006340:	1e10      	subs	r0, r2, #0
 8006342:	d008      	beq.n	8006356 <strncmp+0x1a>
 8006344:	2400      	movs	r4, #0
 8006346:	3a01      	subs	r2, #1
 8006348:	5d2b      	ldrb	r3, [r5, r4]
 800634a:	5d08      	ldrb	r0, [r1, r4]
 800634c:	4283      	cmp	r3, r0
 800634e:	d101      	bne.n	8006354 <strncmp+0x18>
 8006350:	4294      	cmp	r4, r2
 8006352:	d101      	bne.n	8006358 <strncmp+0x1c>
 8006354:	1a18      	subs	r0, r3, r0
 8006356:	bd30      	pop	{r4, r5, pc}
 8006358:	3401      	adds	r4, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1f4      	bne.n	8006348 <strncmp+0xc>
 800635e:	e7f9      	b.n	8006354 <strncmp+0x18>

08006360 <__malloc_lock>:
 8006360:	b510      	push	{r4, lr}
 8006362:	4802      	ldr	r0, [pc, #8]	; (800636c <__malloc_lock+0xc>)
 8006364:	f000 faf0 	bl	8006948 <__retarget_lock_acquire_recursive>
 8006368:	bd10      	pop	{r4, pc}
 800636a:	46c0      	nop			; (mov r8, r8)
 800636c:	20000288 	.word	0x20000288

08006370 <__malloc_unlock>:
 8006370:	b510      	push	{r4, lr}
 8006372:	4802      	ldr	r0, [pc, #8]	; (800637c <__malloc_unlock+0xc>)
 8006374:	f000 fae9 	bl	800694a <__retarget_lock_release_recursive>
 8006378:	bd10      	pop	{r4, pc}
 800637a:	46c0      	nop			; (mov r8, r8)
 800637c:	20000288 	.word	0x20000288

08006380 <__ssputs_r>:
 8006380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006382:	688e      	ldr	r6, [r1, #8]
 8006384:	b085      	sub	sp, #20
 8006386:	0007      	movs	r7, r0
 8006388:	000c      	movs	r4, r1
 800638a:	9203      	str	r2, [sp, #12]
 800638c:	9301      	str	r3, [sp, #4]
 800638e:	429e      	cmp	r6, r3
 8006390:	d83c      	bhi.n	800640c <__ssputs_r+0x8c>
 8006392:	2390      	movs	r3, #144	; 0x90
 8006394:	898a      	ldrh	r2, [r1, #12]
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	421a      	tst	r2, r3
 800639a:	d034      	beq.n	8006406 <__ssputs_r+0x86>
 800639c:	6909      	ldr	r1, [r1, #16]
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	6960      	ldr	r0, [r4, #20]
 80063a2:	1a5b      	subs	r3, r3, r1
 80063a4:	9302      	str	r3, [sp, #8]
 80063a6:	2303      	movs	r3, #3
 80063a8:	4343      	muls	r3, r0
 80063aa:	0fdd      	lsrs	r5, r3, #31
 80063ac:	18ed      	adds	r5, r5, r3
 80063ae:	9b01      	ldr	r3, [sp, #4]
 80063b0:	9802      	ldr	r0, [sp, #8]
 80063b2:	3301      	adds	r3, #1
 80063b4:	181b      	adds	r3, r3, r0
 80063b6:	106d      	asrs	r5, r5, #1
 80063b8:	42ab      	cmp	r3, r5
 80063ba:	d900      	bls.n	80063be <__ssputs_r+0x3e>
 80063bc:	001d      	movs	r5, r3
 80063be:	0553      	lsls	r3, r2, #21
 80063c0:	d532      	bpl.n	8006428 <__ssputs_r+0xa8>
 80063c2:	0029      	movs	r1, r5
 80063c4:	0038      	movs	r0, r7
 80063c6:	f7ff ff11 	bl	80061ec <_malloc_r>
 80063ca:	1e06      	subs	r6, r0, #0
 80063cc:	d109      	bne.n	80063e2 <__ssputs_r+0x62>
 80063ce:	230c      	movs	r3, #12
 80063d0:	603b      	str	r3, [r7, #0]
 80063d2:	2340      	movs	r3, #64	; 0x40
 80063d4:	2001      	movs	r0, #1
 80063d6:	89a2      	ldrh	r2, [r4, #12]
 80063d8:	4240      	negs	r0, r0
 80063da:	4313      	orrs	r3, r2
 80063dc:	81a3      	strh	r3, [r4, #12]
 80063de:	b005      	add	sp, #20
 80063e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e2:	9a02      	ldr	r2, [sp, #8]
 80063e4:	6921      	ldr	r1, [r4, #16]
 80063e6:	f000 fabc 	bl	8006962 <memcpy>
 80063ea:	89a3      	ldrh	r3, [r4, #12]
 80063ec:	4a14      	ldr	r2, [pc, #80]	; (8006440 <__ssputs_r+0xc0>)
 80063ee:	401a      	ands	r2, r3
 80063f0:	2380      	movs	r3, #128	; 0x80
 80063f2:	4313      	orrs	r3, r2
 80063f4:	81a3      	strh	r3, [r4, #12]
 80063f6:	9b02      	ldr	r3, [sp, #8]
 80063f8:	6126      	str	r6, [r4, #16]
 80063fa:	18f6      	adds	r6, r6, r3
 80063fc:	6026      	str	r6, [r4, #0]
 80063fe:	6165      	str	r5, [r4, #20]
 8006400:	9e01      	ldr	r6, [sp, #4]
 8006402:	1aed      	subs	r5, r5, r3
 8006404:	60a5      	str	r5, [r4, #8]
 8006406:	9b01      	ldr	r3, [sp, #4]
 8006408:	429e      	cmp	r6, r3
 800640a:	d900      	bls.n	800640e <__ssputs_r+0x8e>
 800640c:	9e01      	ldr	r6, [sp, #4]
 800640e:	0032      	movs	r2, r6
 8006410:	9903      	ldr	r1, [sp, #12]
 8006412:	6820      	ldr	r0, [r4, #0]
 8006414:	f000 faae 	bl	8006974 <memmove>
 8006418:	68a3      	ldr	r3, [r4, #8]
 800641a:	2000      	movs	r0, #0
 800641c:	1b9b      	subs	r3, r3, r6
 800641e:	60a3      	str	r3, [r4, #8]
 8006420:	6823      	ldr	r3, [r4, #0]
 8006422:	199e      	adds	r6, r3, r6
 8006424:	6026      	str	r6, [r4, #0]
 8006426:	e7da      	b.n	80063de <__ssputs_r+0x5e>
 8006428:	002a      	movs	r2, r5
 800642a:	0038      	movs	r0, r7
 800642c:	f000 fab5 	bl	800699a <_realloc_r>
 8006430:	1e06      	subs	r6, r0, #0
 8006432:	d1e0      	bne.n	80063f6 <__ssputs_r+0x76>
 8006434:	0038      	movs	r0, r7
 8006436:	6921      	ldr	r1, [r4, #16]
 8006438:	f7ff fe6c 	bl	8006114 <_free_r>
 800643c:	e7c7      	b.n	80063ce <__ssputs_r+0x4e>
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	fffffb7f 	.word	0xfffffb7f

08006444 <_svfiprintf_r>:
 8006444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006446:	b0a1      	sub	sp, #132	; 0x84
 8006448:	9003      	str	r0, [sp, #12]
 800644a:	001d      	movs	r5, r3
 800644c:	898b      	ldrh	r3, [r1, #12]
 800644e:	000f      	movs	r7, r1
 8006450:	0016      	movs	r6, r2
 8006452:	061b      	lsls	r3, r3, #24
 8006454:	d511      	bpl.n	800647a <_svfiprintf_r+0x36>
 8006456:	690b      	ldr	r3, [r1, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10e      	bne.n	800647a <_svfiprintf_r+0x36>
 800645c:	2140      	movs	r1, #64	; 0x40
 800645e:	f7ff fec5 	bl	80061ec <_malloc_r>
 8006462:	6038      	str	r0, [r7, #0]
 8006464:	6138      	str	r0, [r7, #16]
 8006466:	2800      	cmp	r0, #0
 8006468:	d105      	bne.n	8006476 <_svfiprintf_r+0x32>
 800646a:	230c      	movs	r3, #12
 800646c:	9a03      	ldr	r2, [sp, #12]
 800646e:	3801      	subs	r0, #1
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	b021      	add	sp, #132	; 0x84
 8006474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006476:	2340      	movs	r3, #64	; 0x40
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	2300      	movs	r3, #0
 800647c:	ac08      	add	r4, sp, #32
 800647e:	6163      	str	r3, [r4, #20]
 8006480:	3320      	adds	r3, #32
 8006482:	7663      	strb	r3, [r4, #25]
 8006484:	3310      	adds	r3, #16
 8006486:	76a3      	strb	r3, [r4, #26]
 8006488:	9507      	str	r5, [sp, #28]
 800648a:	0035      	movs	r5, r6
 800648c:	782b      	ldrb	r3, [r5, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <_svfiprintf_r+0x52>
 8006492:	2b25      	cmp	r3, #37	; 0x25
 8006494:	d147      	bne.n	8006526 <_svfiprintf_r+0xe2>
 8006496:	1bab      	subs	r3, r5, r6
 8006498:	9305      	str	r3, [sp, #20]
 800649a:	42b5      	cmp	r5, r6
 800649c:	d00c      	beq.n	80064b8 <_svfiprintf_r+0x74>
 800649e:	0032      	movs	r2, r6
 80064a0:	0039      	movs	r1, r7
 80064a2:	9803      	ldr	r0, [sp, #12]
 80064a4:	f7ff ff6c 	bl	8006380 <__ssputs_r>
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	d100      	bne.n	80064ae <_svfiprintf_r+0x6a>
 80064ac:	e0ae      	b.n	800660c <_svfiprintf_r+0x1c8>
 80064ae:	6962      	ldr	r2, [r4, #20]
 80064b0:	9b05      	ldr	r3, [sp, #20]
 80064b2:	4694      	mov	ip, r2
 80064b4:	4463      	add	r3, ip
 80064b6:	6163      	str	r3, [r4, #20]
 80064b8:	782b      	ldrb	r3, [r5, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d100      	bne.n	80064c0 <_svfiprintf_r+0x7c>
 80064be:	e0a5      	b.n	800660c <_svfiprintf_r+0x1c8>
 80064c0:	2201      	movs	r2, #1
 80064c2:	2300      	movs	r3, #0
 80064c4:	4252      	negs	r2, r2
 80064c6:	6062      	str	r2, [r4, #4]
 80064c8:	a904      	add	r1, sp, #16
 80064ca:	3254      	adds	r2, #84	; 0x54
 80064cc:	1852      	adds	r2, r2, r1
 80064ce:	1c6e      	adds	r6, r5, #1
 80064d0:	6023      	str	r3, [r4, #0]
 80064d2:	60e3      	str	r3, [r4, #12]
 80064d4:	60a3      	str	r3, [r4, #8]
 80064d6:	7013      	strb	r3, [r2, #0]
 80064d8:	65a3      	str	r3, [r4, #88]	; 0x58
 80064da:	2205      	movs	r2, #5
 80064dc:	7831      	ldrb	r1, [r6, #0]
 80064de:	4854      	ldr	r0, [pc, #336]	; (8006630 <_svfiprintf_r+0x1ec>)
 80064e0:	f000 fa34 	bl	800694c <memchr>
 80064e4:	1c75      	adds	r5, r6, #1
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d11f      	bne.n	800652a <_svfiprintf_r+0xe6>
 80064ea:	6822      	ldr	r2, [r4, #0]
 80064ec:	06d3      	lsls	r3, r2, #27
 80064ee:	d504      	bpl.n	80064fa <_svfiprintf_r+0xb6>
 80064f0:	2353      	movs	r3, #83	; 0x53
 80064f2:	a904      	add	r1, sp, #16
 80064f4:	185b      	adds	r3, r3, r1
 80064f6:	2120      	movs	r1, #32
 80064f8:	7019      	strb	r1, [r3, #0]
 80064fa:	0713      	lsls	r3, r2, #28
 80064fc:	d504      	bpl.n	8006508 <_svfiprintf_r+0xc4>
 80064fe:	2353      	movs	r3, #83	; 0x53
 8006500:	a904      	add	r1, sp, #16
 8006502:	185b      	adds	r3, r3, r1
 8006504:	212b      	movs	r1, #43	; 0x2b
 8006506:	7019      	strb	r1, [r3, #0]
 8006508:	7833      	ldrb	r3, [r6, #0]
 800650a:	2b2a      	cmp	r3, #42	; 0x2a
 800650c:	d016      	beq.n	800653c <_svfiprintf_r+0xf8>
 800650e:	0035      	movs	r5, r6
 8006510:	2100      	movs	r1, #0
 8006512:	200a      	movs	r0, #10
 8006514:	68e3      	ldr	r3, [r4, #12]
 8006516:	782a      	ldrb	r2, [r5, #0]
 8006518:	1c6e      	adds	r6, r5, #1
 800651a:	3a30      	subs	r2, #48	; 0x30
 800651c:	2a09      	cmp	r2, #9
 800651e:	d94e      	bls.n	80065be <_svfiprintf_r+0x17a>
 8006520:	2900      	cmp	r1, #0
 8006522:	d111      	bne.n	8006548 <_svfiprintf_r+0x104>
 8006524:	e017      	b.n	8006556 <_svfiprintf_r+0x112>
 8006526:	3501      	adds	r5, #1
 8006528:	e7b0      	b.n	800648c <_svfiprintf_r+0x48>
 800652a:	4b41      	ldr	r3, [pc, #260]	; (8006630 <_svfiprintf_r+0x1ec>)
 800652c:	6822      	ldr	r2, [r4, #0]
 800652e:	1ac0      	subs	r0, r0, r3
 8006530:	2301      	movs	r3, #1
 8006532:	4083      	lsls	r3, r0
 8006534:	4313      	orrs	r3, r2
 8006536:	002e      	movs	r6, r5
 8006538:	6023      	str	r3, [r4, #0]
 800653a:	e7ce      	b.n	80064da <_svfiprintf_r+0x96>
 800653c:	9b07      	ldr	r3, [sp, #28]
 800653e:	1d19      	adds	r1, r3, #4
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	9107      	str	r1, [sp, #28]
 8006544:	2b00      	cmp	r3, #0
 8006546:	db01      	blt.n	800654c <_svfiprintf_r+0x108>
 8006548:	930b      	str	r3, [sp, #44]	; 0x2c
 800654a:	e004      	b.n	8006556 <_svfiprintf_r+0x112>
 800654c:	425b      	negs	r3, r3
 800654e:	60e3      	str	r3, [r4, #12]
 8006550:	2302      	movs	r3, #2
 8006552:	4313      	orrs	r3, r2
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	782b      	ldrb	r3, [r5, #0]
 8006558:	2b2e      	cmp	r3, #46	; 0x2e
 800655a:	d10a      	bne.n	8006572 <_svfiprintf_r+0x12e>
 800655c:	786b      	ldrb	r3, [r5, #1]
 800655e:	2b2a      	cmp	r3, #42	; 0x2a
 8006560:	d135      	bne.n	80065ce <_svfiprintf_r+0x18a>
 8006562:	9b07      	ldr	r3, [sp, #28]
 8006564:	3502      	adds	r5, #2
 8006566:	1d1a      	adds	r2, r3, #4
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	9207      	str	r2, [sp, #28]
 800656c:	2b00      	cmp	r3, #0
 800656e:	db2b      	blt.n	80065c8 <_svfiprintf_r+0x184>
 8006570:	9309      	str	r3, [sp, #36]	; 0x24
 8006572:	4e30      	ldr	r6, [pc, #192]	; (8006634 <_svfiprintf_r+0x1f0>)
 8006574:	2203      	movs	r2, #3
 8006576:	0030      	movs	r0, r6
 8006578:	7829      	ldrb	r1, [r5, #0]
 800657a:	f000 f9e7 	bl	800694c <memchr>
 800657e:	2800      	cmp	r0, #0
 8006580:	d006      	beq.n	8006590 <_svfiprintf_r+0x14c>
 8006582:	2340      	movs	r3, #64	; 0x40
 8006584:	1b80      	subs	r0, r0, r6
 8006586:	4083      	lsls	r3, r0
 8006588:	6822      	ldr	r2, [r4, #0]
 800658a:	3501      	adds	r5, #1
 800658c:	4313      	orrs	r3, r2
 800658e:	6023      	str	r3, [r4, #0]
 8006590:	7829      	ldrb	r1, [r5, #0]
 8006592:	2206      	movs	r2, #6
 8006594:	4828      	ldr	r0, [pc, #160]	; (8006638 <_svfiprintf_r+0x1f4>)
 8006596:	1c6e      	adds	r6, r5, #1
 8006598:	7621      	strb	r1, [r4, #24]
 800659a:	f000 f9d7 	bl	800694c <memchr>
 800659e:	2800      	cmp	r0, #0
 80065a0:	d03c      	beq.n	800661c <_svfiprintf_r+0x1d8>
 80065a2:	4b26      	ldr	r3, [pc, #152]	; (800663c <_svfiprintf_r+0x1f8>)
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d125      	bne.n	80065f4 <_svfiprintf_r+0x1b0>
 80065a8:	2207      	movs	r2, #7
 80065aa:	9b07      	ldr	r3, [sp, #28]
 80065ac:	3307      	adds	r3, #7
 80065ae:	4393      	bics	r3, r2
 80065b0:	3308      	adds	r3, #8
 80065b2:	9307      	str	r3, [sp, #28]
 80065b4:	6963      	ldr	r3, [r4, #20]
 80065b6:	9a04      	ldr	r2, [sp, #16]
 80065b8:	189b      	adds	r3, r3, r2
 80065ba:	6163      	str	r3, [r4, #20]
 80065bc:	e765      	b.n	800648a <_svfiprintf_r+0x46>
 80065be:	4343      	muls	r3, r0
 80065c0:	0035      	movs	r5, r6
 80065c2:	2101      	movs	r1, #1
 80065c4:	189b      	adds	r3, r3, r2
 80065c6:	e7a6      	b.n	8006516 <_svfiprintf_r+0xd2>
 80065c8:	2301      	movs	r3, #1
 80065ca:	425b      	negs	r3, r3
 80065cc:	e7d0      	b.n	8006570 <_svfiprintf_r+0x12c>
 80065ce:	2300      	movs	r3, #0
 80065d0:	200a      	movs	r0, #10
 80065d2:	001a      	movs	r2, r3
 80065d4:	3501      	adds	r5, #1
 80065d6:	6063      	str	r3, [r4, #4]
 80065d8:	7829      	ldrb	r1, [r5, #0]
 80065da:	1c6e      	adds	r6, r5, #1
 80065dc:	3930      	subs	r1, #48	; 0x30
 80065de:	2909      	cmp	r1, #9
 80065e0:	d903      	bls.n	80065ea <_svfiprintf_r+0x1a6>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0c5      	beq.n	8006572 <_svfiprintf_r+0x12e>
 80065e6:	9209      	str	r2, [sp, #36]	; 0x24
 80065e8:	e7c3      	b.n	8006572 <_svfiprintf_r+0x12e>
 80065ea:	4342      	muls	r2, r0
 80065ec:	0035      	movs	r5, r6
 80065ee:	2301      	movs	r3, #1
 80065f0:	1852      	adds	r2, r2, r1
 80065f2:	e7f1      	b.n	80065d8 <_svfiprintf_r+0x194>
 80065f4:	ab07      	add	r3, sp, #28
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	003a      	movs	r2, r7
 80065fa:	0021      	movs	r1, r4
 80065fc:	4b10      	ldr	r3, [pc, #64]	; (8006640 <_svfiprintf_r+0x1fc>)
 80065fe:	9803      	ldr	r0, [sp, #12]
 8006600:	e000      	b.n	8006604 <_svfiprintf_r+0x1c0>
 8006602:	bf00      	nop
 8006604:	9004      	str	r0, [sp, #16]
 8006606:	9b04      	ldr	r3, [sp, #16]
 8006608:	3301      	adds	r3, #1
 800660a:	d1d3      	bne.n	80065b4 <_svfiprintf_r+0x170>
 800660c:	89bb      	ldrh	r3, [r7, #12]
 800660e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006610:	065b      	lsls	r3, r3, #25
 8006612:	d400      	bmi.n	8006616 <_svfiprintf_r+0x1d2>
 8006614:	e72d      	b.n	8006472 <_svfiprintf_r+0x2e>
 8006616:	2001      	movs	r0, #1
 8006618:	4240      	negs	r0, r0
 800661a:	e72a      	b.n	8006472 <_svfiprintf_r+0x2e>
 800661c:	ab07      	add	r3, sp, #28
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	003a      	movs	r2, r7
 8006622:	0021      	movs	r1, r4
 8006624:	4b06      	ldr	r3, [pc, #24]	; (8006640 <_svfiprintf_r+0x1fc>)
 8006626:	9803      	ldr	r0, [sp, #12]
 8006628:	f000 f87c 	bl	8006724 <_printf_i>
 800662c:	e7ea      	b.n	8006604 <_svfiprintf_r+0x1c0>
 800662e:	46c0      	nop			; (mov r8, r8)
 8006630:	08006d98 	.word	0x08006d98
 8006634:	08006d9e 	.word	0x08006d9e
 8006638:	08006da2 	.word	0x08006da2
 800663c:	00000000 	.word	0x00000000
 8006640:	08006381 	.word	0x08006381

08006644 <_printf_common>:
 8006644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006646:	0015      	movs	r5, r2
 8006648:	9301      	str	r3, [sp, #4]
 800664a:	688a      	ldr	r2, [r1, #8]
 800664c:	690b      	ldr	r3, [r1, #16]
 800664e:	000c      	movs	r4, r1
 8006650:	9000      	str	r0, [sp, #0]
 8006652:	4293      	cmp	r3, r2
 8006654:	da00      	bge.n	8006658 <_printf_common+0x14>
 8006656:	0013      	movs	r3, r2
 8006658:	0022      	movs	r2, r4
 800665a:	602b      	str	r3, [r5, #0]
 800665c:	3243      	adds	r2, #67	; 0x43
 800665e:	7812      	ldrb	r2, [r2, #0]
 8006660:	2a00      	cmp	r2, #0
 8006662:	d001      	beq.n	8006668 <_printf_common+0x24>
 8006664:	3301      	adds	r3, #1
 8006666:	602b      	str	r3, [r5, #0]
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	069b      	lsls	r3, r3, #26
 800666c:	d502      	bpl.n	8006674 <_printf_common+0x30>
 800666e:	682b      	ldr	r3, [r5, #0]
 8006670:	3302      	adds	r3, #2
 8006672:	602b      	str	r3, [r5, #0]
 8006674:	6822      	ldr	r2, [r4, #0]
 8006676:	2306      	movs	r3, #6
 8006678:	0017      	movs	r7, r2
 800667a:	401f      	ands	r7, r3
 800667c:	421a      	tst	r2, r3
 800667e:	d027      	beq.n	80066d0 <_printf_common+0x8c>
 8006680:	0023      	movs	r3, r4
 8006682:	3343      	adds	r3, #67	; 0x43
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	1e5a      	subs	r2, r3, #1
 8006688:	4193      	sbcs	r3, r2
 800668a:	6822      	ldr	r2, [r4, #0]
 800668c:	0692      	lsls	r2, r2, #26
 800668e:	d430      	bmi.n	80066f2 <_printf_common+0xae>
 8006690:	0022      	movs	r2, r4
 8006692:	9901      	ldr	r1, [sp, #4]
 8006694:	9800      	ldr	r0, [sp, #0]
 8006696:	9e08      	ldr	r6, [sp, #32]
 8006698:	3243      	adds	r2, #67	; 0x43
 800669a:	47b0      	blx	r6
 800669c:	1c43      	adds	r3, r0, #1
 800669e:	d025      	beq.n	80066ec <_printf_common+0xa8>
 80066a0:	2306      	movs	r3, #6
 80066a2:	6820      	ldr	r0, [r4, #0]
 80066a4:	682a      	ldr	r2, [r5, #0]
 80066a6:	68e1      	ldr	r1, [r4, #12]
 80066a8:	2500      	movs	r5, #0
 80066aa:	4003      	ands	r3, r0
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	d103      	bne.n	80066b8 <_printf_common+0x74>
 80066b0:	1a8d      	subs	r5, r1, r2
 80066b2:	43eb      	mvns	r3, r5
 80066b4:	17db      	asrs	r3, r3, #31
 80066b6:	401d      	ands	r5, r3
 80066b8:	68a3      	ldr	r3, [r4, #8]
 80066ba:	6922      	ldr	r2, [r4, #16]
 80066bc:	4293      	cmp	r3, r2
 80066be:	dd01      	ble.n	80066c4 <_printf_common+0x80>
 80066c0:	1a9b      	subs	r3, r3, r2
 80066c2:	18ed      	adds	r5, r5, r3
 80066c4:	2700      	movs	r7, #0
 80066c6:	42bd      	cmp	r5, r7
 80066c8:	d120      	bne.n	800670c <_printf_common+0xc8>
 80066ca:	2000      	movs	r0, #0
 80066cc:	e010      	b.n	80066f0 <_printf_common+0xac>
 80066ce:	3701      	adds	r7, #1
 80066d0:	68e3      	ldr	r3, [r4, #12]
 80066d2:	682a      	ldr	r2, [r5, #0]
 80066d4:	1a9b      	subs	r3, r3, r2
 80066d6:	42bb      	cmp	r3, r7
 80066d8:	ddd2      	ble.n	8006680 <_printf_common+0x3c>
 80066da:	0022      	movs	r2, r4
 80066dc:	2301      	movs	r3, #1
 80066de:	9901      	ldr	r1, [sp, #4]
 80066e0:	9800      	ldr	r0, [sp, #0]
 80066e2:	9e08      	ldr	r6, [sp, #32]
 80066e4:	3219      	adds	r2, #25
 80066e6:	47b0      	blx	r6
 80066e8:	1c43      	adds	r3, r0, #1
 80066ea:	d1f0      	bne.n	80066ce <_printf_common+0x8a>
 80066ec:	2001      	movs	r0, #1
 80066ee:	4240      	negs	r0, r0
 80066f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066f2:	2030      	movs	r0, #48	; 0x30
 80066f4:	18e1      	adds	r1, r4, r3
 80066f6:	3143      	adds	r1, #67	; 0x43
 80066f8:	7008      	strb	r0, [r1, #0]
 80066fa:	0021      	movs	r1, r4
 80066fc:	1c5a      	adds	r2, r3, #1
 80066fe:	3145      	adds	r1, #69	; 0x45
 8006700:	7809      	ldrb	r1, [r1, #0]
 8006702:	18a2      	adds	r2, r4, r2
 8006704:	3243      	adds	r2, #67	; 0x43
 8006706:	3302      	adds	r3, #2
 8006708:	7011      	strb	r1, [r2, #0]
 800670a:	e7c1      	b.n	8006690 <_printf_common+0x4c>
 800670c:	0022      	movs	r2, r4
 800670e:	2301      	movs	r3, #1
 8006710:	9901      	ldr	r1, [sp, #4]
 8006712:	9800      	ldr	r0, [sp, #0]
 8006714:	9e08      	ldr	r6, [sp, #32]
 8006716:	321a      	adds	r2, #26
 8006718:	47b0      	blx	r6
 800671a:	1c43      	adds	r3, r0, #1
 800671c:	d0e6      	beq.n	80066ec <_printf_common+0xa8>
 800671e:	3701      	adds	r7, #1
 8006720:	e7d1      	b.n	80066c6 <_printf_common+0x82>
	...

08006724 <_printf_i>:
 8006724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006726:	b08b      	sub	sp, #44	; 0x2c
 8006728:	9206      	str	r2, [sp, #24]
 800672a:	000a      	movs	r2, r1
 800672c:	3243      	adds	r2, #67	; 0x43
 800672e:	9307      	str	r3, [sp, #28]
 8006730:	9005      	str	r0, [sp, #20]
 8006732:	9204      	str	r2, [sp, #16]
 8006734:	7e0a      	ldrb	r2, [r1, #24]
 8006736:	000c      	movs	r4, r1
 8006738:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800673a:	2a78      	cmp	r2, #120	; 0x78
 800673c:	d807      	bhi.n	800674e <_printf_i+0x2a>
 800673e:	2a62      	cmp	r2, #98	; 0x62
 8006740:	d809      	bhi.n	8006756 <_printf_i+0x32>
 8006742:	2a00      	cmp	r2, #0
 8006744:	d100      	bne.n	8006748 <_printf_i+0x24>
 8006746:	e0c1      	b.n	80068cc <_printf_i+0x1a8>
 8006748:	2a58      	cmp	r2, #88	; 0x58
 800674a:	d100      	bne.n	800674e <_printf_i+0x2a>
 800674c:	e08c      	b.n	8006868 <_printf_i+0x144>
 800674e:	0026      	movs	r6, r4
 8006750:	3642      	adds	r6, #66	; 0x42
 8006752:	7032      	strb	r2, [r6, #0]
 8006754:	e022      	b.n	800679c <_printf_i+0x78>
 8006756:	0010      	movs	r0, r2
 8006758:	3863      	subs	r0, #99	; 0x63
 800675a:	2815      	cmp	r0, #21
 800675c:	d8f7      	bhi.n	800674e <_printf_i+0x2a>
 800675e:	f7f9 fccf 	bl	8000100 <__gnu_thumb1_case_shi>
 8006762:	0016      	.short	0x0016
 8006764:	fff6001f 	.word	0xfff6001f
 8006768:	fff6fff6 	.word	0xfff6fff6
 800676c:	001ffff6 	.word	0x001ffff6
 8006770:	fff6fff6 	.word	0xfff6fff6
 8006774:	fff6fff6 	.word	0xfff6fff6
 8006778:	003600a8 	.word	0x003600a8
 800677c:	fff6009a 	.word	0xfff6009a
 8006780:	00b9fff6 	.word	0x00b9fff6
 8006784:	0036fff6 	.word	0x0036fff6
 8006788:	fff6fff6 	.word	0xfff6fff6
 800678c:	009e      	.short	0x009e
 800678e:	0026      	movs	r6, r4
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	3642      	adds	r6, #66	; 0x42
 8006794:	1d11      	adds	r1, r2, #4
 8006796:	6019      	str	r1, [r3, #0]
 8006798:	6813      	ldr	r3, [r2, #0]
 800679a:	7033      	strb	r3, [r6, #0]
 800679c:	2301      	movs	r3, #1
 800679e:	e0a7      	b.n	80068f0 <_printf_i+0x1cc>
 80067a0:	6808      	ldr	r0, [r1, #0]
 80067a2:	6819      	ldr	r1, [r3, #0]
 80067a4:	1d0a      	adds	r2, r1, #4
 80067a6:	0605      	lsls	r5, r0, #24
 80067a8:	d50b      	bpl.n	80067c2 <_printf_i+0x9e>
 80067aa:	680d      	ldr	r5, [r1, #0]
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	2d00      	cmp	r5, #0
 80067b0:	da03      	bge.n	80067ba <_printf_i+0x96>
 80067b2:	232d      	movs	r3, #45	; 0x2d
 80067b4:	9a04      	ldr	r2, [sp, #16]
 80067b6:	426d      	negs	r5, r5
 80067b8:	7013      	strb	r3, [r2, #0]
 80067ba:	4b61      	ldr	r3, [pc, #388]	; (8006940 <_printf_i+0x21c>)
 80067bc:	270a      	movs	r7, #10
 80067be:	9303      	str	r3, [sp, #12]
 80067c0:	e01b      	b.n	80067fa <_printf_i+0xd6>
 80067c2:	680d      	ldr	r5, [r1, #0]
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	0641      	lsls	r1, r0, #25
 80067c8:	d5f1      	bpl.n	80067ae <_printf_i+0x8a>
 80067ca:	b22d      	sxth	r5, r5
 80067cc:	e7ef      	b.n	80067ae <_printf_i+0x8a>
 80067ce:	680d      	ldr	r5, [r1, #0]
 80067d0:	6819      	ldr	r1, [r3, #0]
 80067d2:	1d08      	adds	r0, r1, #4
 80067d4:	6018      	str	r0, [r3, #0]
 80067d6:	062e      	lsls	r6, r5, #24
 80067d8:	d501      	bpl.n	80067de <_printf_i+0xba>
 80067da:	680d      	ldr	r5, [r1, #0]
 80067dc:	e003      	b.n	80067e6 <_printf_i+0xc2>
 80067de:	066d      	lsls	r5, r5, #25
 80067e0:	d5fb      	bpl.n	80067da <_printf_i+0xb6>
 80067e2:	680d      	ldr	r5, [r1, #0]
 80067e4:	b2ad      	uxth	r5, r5
 80067e6:	4b56      	ldr	r3, [pc, #344]	; (8006940 <_printf_i+0x21c>)
 80067e8:	2708      	movs	r7, #8
 80067ea:	9303      	str	r3, [sp, #12]
 80067ec:	2a6f      	cmp	r2, #111	; 0x6f
 80067ee:	d000      	beq.n	80067f2 <_printf_i+0xce>
 80067f0:	3702      	adds	r7, #2
 80067f2:	0023      	movs	r3, r4
 80067f4:	2200      	movs	r2, #0
 80067f6:	3343      	adds	r3, #67	; 0x43
 80067f8:	701a      	strb	r2, [r3, #0]
 80067fa:	6863      	ldr	r3, [r4, #4]
 80067fc:	60a3      	str	r3, [r4, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	db03      	blt.n	800680a <_printf_i+0xe6>
 8006802:	2204      	movs	r2, #4
 8006804:	6821      	ldr	r1, [r4, #0]
 8006806:	4391      	bics	r1, r2
 8006808:	6021      	str	r1, [r4, #0]
 800680a:	2d00      	cmp	r5, #0
 800680c:	d102      	bne.n	8006814 <_printf_i+0xf0>
 800680e:	9e04      	ldr	r6, [sp, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00c      	beq.n	800682e <_printf_i+0x10a>
 8006814:	9e04      	ldr	r6, [sp, #16]
 8006816:	0028      	movs	r0, r5
 8006818:	0039      	movs	r1, r7
 800681a:	f7f9 fd01 	bl	8000220 <__aeabi_uidivmod>
 800681e:	9b03      	ldr	r3, [sp, #12]
 8006820:	3e01      	subs	r6, #1
 8006822:	5c5b      	ldrb	r3, [r3, r1]
 8006824:	7033      	strb	r3, [r6, #0]
 8006826:	002b      	movs	r3, r5
 8006828:	0005      	movs	r5, r0
 800682a:	429f      	cmp	r7, r3
 800682c:	d9f3      	bls.n	8006816 <_printf_i+0xf2>
 800682e:	2f08      	cmp	r7, #8
 8006830:	d109      	bne.n	8006846 <_printf_i+0x122>
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	07db      	lsls	r3, r3, #31
 8006836:	d506      	bpl.n	8006846 <_printf_i+0x122>
 8006838:	6863      	ldr	r3, [r4, #4]
 800683a:	6922      	ldr	r2, [r4, #16]
 800683c:	4293      	cmp	r3, r2
 800683e:	dc02      	bgt.n	8006846 <_printf_i+0x122>
 8006840:	2330      	movs	r3, #48	; 0x30
 8006842:	3e01      	subs	r6, #1
 8006844:	7033      	strb	r3, [r6, #0]
 8006846:	9b04      	ldr	r3, [sp, #16]
 8006848:	1b9b      	subs	r3, r3, r6
 800684a:	6123      	str	r3, [r4, #16]
 800684c:	9b07      	ldr	r3, [sp, #28]
 800684e:	0021      	movs	r1, r4
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	9805      	ldr	r0, [sp, #20]
 8006854:	9b06      	ldr	r3, [sp, #24]
 8006856:	aa09      	add	r2, sp, #36	; 0x24
 8006858:	f7ff fef4 	bl	8006644 <_printf_common>
 800685c:	1c43      	adds	r3, r0, #1
 800685e:	d14c      	bne.n	80068fa <_printf_i+0x1d6>
 8006860:	2001      	movs	r0, #1
 8006862:	4240      	negs	r0, r0
 8006864:	b00b      	add	sp, #44	; 0x2c
 8006866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006868:	3145      	adds	r1, #69	; 0x45
 800686a:	700a      	strb	r2, [r1, #0]
 800686c:	4a34      	ldr	r2, [pc, #208]	; (8006940 <_printf_i+0x21c>)
 800686e:	9203      	str	r2, [sp, #12]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	6821      	ldr	r1, [r4, #0]
 8006874:	ca20      	ldmia	r2!, {r5}
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	0608      	lsls	r0, r1, #24
 800687a:	d516      	bpl.n	80068aa <_printf_i+0x186>
 800687c:	07cb      	lsls	r3, r1, #31
 800687e:	d502      	bpl.n	8006886 <_printf_i+0x162>
 8006880:	2320      	movs	r3, #32
 8006882:	4319      	orrs	r1, r3
 8006884:	6021      	str	r1, [r4, #0]
 8006886:	2710      	movs	r7, #16
 8006888:	2d00      	cmp	r5, #0
 800688a:	d1b2      	bne.n	80067f2 <_printf_i+0xce>
 800688c:	2320      	movs	r3, #32
 800688e:	6822      	ldr	r2, [r4, #0]
 8006890:	439a      	bics	r2, r3
 8006892:	6022      	str	r2, [r4, #0]
 8006894:	e7ad      	b.n	80067f2 <_printf_i+0xce>
 8006896:	2220      	movs	r2, #32
 8006898:	6809      	ldr	r1, [r1, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	6022      	str	r2, [r4, #0]
 800689e:	0022      	movs	r2, r4
 80068a0:	2178      	movs	r1, #120	; 0x78
 80068a2:	3245      	adds	r2, #69	; 0x45
 80068a4:	7011      	strb	r1, [r2, #0]
 80068a6:	4a27      	ldr	r2, [pc, #156]	; (8006944 <_printf_i+0x220>)
 80068a8:	e7e1      	b.n	800686e <_printf_i+0x14a>
 80068aa:	0648      	lsls	r0, r1, #25
 80068ac:	d5e6      	bpl.n	800687c <_printf_i+0x158>
 80068ae:	b2ad      	uxth	r5, r5
 80068b0:	e7e4      	b.n	800687c <_printf_i+0x158>
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	680d      	ldr	r5, [r1, #0]
 80068b6:	1d10      	adds	r0, r2, #4
 80068b8:	6949      	ldr	r1, [r1, #20]
 80068ba:	6018      	str	r0, [r3, #0]
 80068bc:	6813      	ldr	r3, [r2, #0]
 80068be:	062e      	lsls	r6, r5, #24
 80068c0:	d501      	bpl.n	80068c6 <_printf_i+0x1a2>
 80068c2:	6019      	str	r1, [r3, #0]
 80068c4:	e002      	b.n	80068cc <_printf_i+0x1a8>
 80068c6:	066d      	lsls	r5, r5, #25
 80068c8:	d5fb      	bpl.n	80068c2 <_printf_i+0x19e>
 80068ca:	8019      	strh	r1, [r3, #0]
 80068cc:	2300      	movs	r3, #0
 80068ce:	9e04      	ldr	r6, [sp, #16]
 80068d0:	6123      	str	r3, [r4, #16]
 80068d2:	e7bb      	b.n	800684c <_printf_i+0x128>
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	1d11      	adds	r1, r2, #4
 80068d8:	6019      	str	r1, [r3, #0]
 80068da:	6816      	ldr	r6, [r2, #0]
 80068dc:	2100      	movs	r1, #0
 80068de:	0030      	movs	r0, r6
 80068e0:	6862      	ldr	r2, [r4, #4]
 80068e2:	f000 f833 	bl	800694c <memchr>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	d001      	beq.n	80068ee <_printf_i+0x1ca>
 80068ea:	1b80      	subs	r0, r0, r6
 80068ec:	6060      	str	r0, [r4, #4]
 80068ee:	6863      	ldr	r3, [r4, #4]
 80068f0:	6123      	str	r3, [r4, #16]
 80068f2:	2300      	movs	r3, #0
 80068f4:	9a04      	ldr	r2, [sp, #16]
 80068f6:	7013      	strb	r3, [r2, #0]
 80068f8:	e7a8      	b.n	800684c <_printf_i+0x128>
 80068fa:	6923      	ldr	r3, [r4, #16]
 80068fc:	0032      	movs	r2, r6
 80068fe:	9906      	ldr	r1, [sp, #24]
 8006900:	9805      	ldr	r0, [sp, #20]
 8006902:	9d07      	ldr	r5, [sp, #28]
 8006904:	47a8      	blx	r5
 8006906:	1c43      	adds	r3, r0, #1
 8006908:	d0aa      	beq.n	8006860 <_printf_i+0x13c>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	079b      	lsls	r3, r3, #30
 800690e:	d415      	bmi.n	800693c <_printf_i+0x218>
 8006910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006912:	68e0      	ldr	r0, [r4, #12]
 8006914:	4298      	cmp	r0, r3
 8006916:	daa5      	bge.n	8006864 <_printf_i+0x140>
 8006918:	0018      	movs	r0, r3
 800691a:	e7a3      	b.n	8006864 <_printf_i+0x140>
 800691c:	0022      	movs	r2, r4
 800691e:	2301      	movs	r3, #1
 8006920:	9906      	ldr	r1, [sp, #24]
 8006922:	9805      	ldr	r0, [sp, #20]
 8006924:	9e07      	ldr	r6, [sp, #28]
 8006926:	3219      	adds	r2, #25
 8006928:	47b0      	blx	r6
 800692a:	1c43      	adds	r3, r0, #1
 800692c:	d098      	beq.n	8006860 <_printf_i+0x13c>
 800692e:	3501      	adds	r5, #1
 8006930:	68e3      	ldr	r3, [r4, #12]
 8006932:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006934:	1a9b      	subs	r3, r3, r2
 8006936:	42ab      	cmp	r3, r5
 8006938:	dcf0      	bgt.n	800691c <_printf_i+0x1f8>
 800693a:	e7e9      	b.n	8006910 <_printf_i+0x1ec>
 800693c:	2500      	movs	r5, #0
 800693e:	e7f7      	b.n	8006930 <_printf_i+0x20c>
 8006940:	08006da9 	.word	0x08006da9
 8006944:	08006dba 	.word	0x08006dba

08006948 <__retarget_lock_acquire_recursive>:
 8006948:	4770      	bx	lr

0800694a <__retarget_lock_release_recursive>:
 800694a:	4770      	bx	lr

0800694c <memchr>:
 800694c:	b2c9      	uxtb	r1, r1
 800694e:	1882      	adds	r2, r0, r2
 8006950:	4290      	cmp	r0, r2
 8006952:	d101      	bne.n	8006958 <memchr+0xc>
 8006954:	2000      	movs	r0, #0
 8006956:	4770      	bx	lr
 8006958:	7803      	ldrb	r3, [r0, #0]
 800695a:	428b      	cmp	r3, r1
 800695c:	d0fb      	beq.n	8006956 <memchr+0xa>
 800695e:	3001      	adds	r0, #1
 8006960:	e7f6      	b.n	8006950 <memchr+0x4>

08006962 <memcpy>:
 8006962:	2300      	movs	r3, #0
 8006964:	b510      	push	{r4, lr}
 8006966:	429a      	cmp	r2, r3
 8006968:	d100      	bne.n	800696c <memcpy+0xa>
 800696a:	bd10      	pop	{r4, pc}
 800696c:	5ccc      	ldrb	r4, [r1, r3]
 800696e:	54c4      	strb	r4, [r0, r3]
 8006970:	3301      	adds	r3, #1
 8006972:	e7f8      	b.n	8006966 <memcpy+0x4>

08006974 <memmove>:
 8006974:	b510      	push	{r4, lr}
 8006976:	4288      	cmp	r0, r1
 8006978:	d902      	bls.n	8006980 <memmove+0xc>
 800697a:	188b      	adds	r3, r1, r2
 800697c:	4298      	cmp	r0, r3
 800697e:	d303      	bcc.n	8006988 <memmove+0x14>
 8006980:	2300      	movs	r3, #0
 8006982:	e007      	b.n	8006994 <memmove+0x20>
 8006984:	5c8b      	ldrb	r3, [r1, r2]
 8006986:	5483      	strb	r3, [r0, r2]
 8006988:	3a01      	subs	r2, #1
 800698a:	d2fb      	bcs.n	8006984 <memmove+0x10>
 800698c:	bd10      	pop	{r4, pc}
 800698e:	5ccc      	ldrb	r4, [r1, r3]
 8006990:	54c4      	strb	r4, [r0, r3]
 8006992:	3301      	adds	r3, #1
 8006994:	429a      	cmp	r2, r3
 8006996:	d1fa      	bne.n	800698e <memmove+0x1a>
 8006998:	e7f8      	b.n	800698c <memmove+0x18>

0800699a <_realloc_r>:
 800699a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800699c:	0007      	movs	r7, r0
 800699e:	000e      	movs	r6, r1
 80069a0:	0014      	movs	r4, r2
 80069a2:	2900      	cmp	r1, #0
 80069a4:	d105      	bne.n	80069b2 <_realloc_r+0x18>
 80069a6:	0011      	movs	r1, r2
 80069a8:	f7ff fc20 	bl	80061ec <_malloc_r>
 80069ac:	0005      	movs	r5, r0
 80069ae:	0028      	movs	r0, r5
 80069b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80069b2:	2a00      	cmp	r2, #0
 80069b4:	d103      	bne.n	80069be <_realloc_r+0x24>
 80069b6:	f7ff fbad 	bl	8006114 <_free_r>
 80069ba:	0025      	movs	r5, r4
 80069bc:	e7f7      	b.n	80069ae <_realloc_r+0x14>
 80069be:	f000 f81b 	bl	80069f8 <_malloc_usable_size_r>
 80069c2:	9001      	str	r0, [sp, #4]
 80069c4:	4284      	cmp	r4, r0
 80069c6:	d803      	bhi.n	80069d0 <_realloc_r+0x36>
 80069c8:	0035      	movs	r5, r6
 80069ca:	0843      	lsrs	r3, r0, #1
 80069cc:	42a3      	cmp	r3, r4
 80069ce:	d3ee      	bcc.n	80069ae <_realloc_r+0x14>
 80069d0:	0021      	movs	r1, r4
 80069d2:	0038      	movs	r0, r7
 80069d4:	f7ff fc0a 	bl	80061ec <_malloc_r>
 80069d8:	1e05      	subs	r5, r0, #0
 80069da:	d0e8      	beq.n	80069ae <_realloc_r+0x14>
 80069dc:	9b01      	ldr	r3, [sp, #4]
 80069de:	0022      	movs	r2, r4
 80069e0:	429c      	cmp	r4, r3
 80069e2:	d900      	bls.n	80069e6 <_realloc_r+0x4c>
 80069e4:	001a      	movs	r2, r3
 80069e6:	0031      	movs	r1, r6
 80069e8:	0028      	movs	r0, r5
 80069ea:	f7ff ffba 	bl	8006962 <memcpy>
 80069ee:	0031      	movs	r1, r6
 80069f0:	0038      	movs	r0, r7
 80069f2:	f7ff fb8f 	bl	8006114 <_free_r>
 80069f6:	e7da      	b.n	80069ae <_realloc_r+0x14>

080069f8 <_malloc_usable_size_r>:
 80069f8:	1f0b      	subs	r3, r1, #4
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	1f18      	subs	r0, r3, #4
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	da01      	bge.n	8006a06 <_malloc_usable_size_r+0xe>
 8006a02:	580b      	ldr	r3, [r1, r0]
 8006a04:	18c0      	adds	r0, r0, r3
 8006a06:	4770      	bx	lr

08006a08 <sqrtf>:
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	1c05      	adds	r5, r0, #0
 8006a0c:	f000 f818 	bl	8006a40 <__ieee754_sqrtf>
 8006a10:	1c29      	adds	r1, r5, #0
 8006a12:	1c04      	adds	r4, r0, #0
 8006a14:	1c28      	adds	r0, r5, #0
 8006a16:	f7fa fb7f 	bl	8001118 <__aeabi_fcmpun>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d10e      	bne.n	8006a3c <sqrtf+0x34>
 8006a1e:	2100      	movs	r1, #0
 8006a20:	1c28      	adds	r0, r5, #0
 8006a22:	f7f9 fcff 	bl	8000424 <__aeabi_fcmplt>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d008      	beq.n	8006a3c <sqrtf+0x34>
 8006a2a:	f7ff fb2d 	bl	8006088 <__errno>
 8006a2e:	2321      	movs	r3, #33	; 0x21
 8006a30:	2100      	movs	r1, #0
 8006a32:	6003      	str	r3, [r0, #0]
 8006a34:	1c08      	adds	r0, r1, #0
 8006a36:	f7f9 fed3 	bl	80007e0 <__aeabi_fdiv>
 8006a3a:	1c04      	adds	r4, r0, #0
 8006a3c:	1c20      	adds	r0, r4, #0
 8006a3e:	bd70      	pop	{r4, r5, r6, pc}

08006a40 <__ieee754_sqrtf>:
 8006a40:	0042      	lsls	r2, r0, #1
 8006a42:	0003      	movs	r3, r0
 8006a44:	b570      	push	{r4, r5, r6, lr}
 8006a46:	1c04      	adds	r4, r0, #0
 8006a48:	20ff      	movs	r0, #255	; 0xff
 8006a4a:	0852      	lsrs	r2, r2, #1
 8006a4c:	05c0      	lsls	r0, r0, #23
 8006a4e:	4282      	cmp	r2, r0
 8006a50:	d30a      	bcc.n	8006a68 <__ieee754_sqrtf+0x28>
 8006a52:	1c21      	adds	r1, r4, #0
 8006a54:	1c20      	adds	r0, r4, #0
 8006a56:	f7fa f88b 	bl	8000b70 <__aeabi_fmul>
 8006a5a:	1c01      	adds	r1, r0, #0
 8006a5c:	1c20      	adds	r0, r4, #0
 8006a5e:	f7f9 fd21 	bl	80004a4 <__aeabi_fadd>
 8006a62:	1c04      	adds	r4, r0, #0
 8006a64:	1c20      	adds	r0, r4, #0
 8006a66:	bd70      	pop	{r4, r5, r6, pc}
 8006a68:	2a00      	cmp	r2, #0
 8006a6a:	d0fb      	beq.n	8006a64 <__ieee754_sqrtf+0x24>
 8006a6c:	2c00      	cmp	r4, #0
 8006a6e:	da07      	bge.n	8006a80 <__ieee754_sqrtf+0x40>
 8006a70:	1c21      	adds	r1, r4, #0
 8006a72:	1c20      	adds	r0, r4, #0
 8006a74:	f7fa f9a2 	bl	8000dbc <__aeabi_fsub>
 8006a78:	1c01      	adds	r1, r0, #0
 8006a7a:	f7f9 feb1 	bl	80007e0 <__aeabi_fdiv>
 8006a7e:	e7f0      	b.n	8006a62 <__ieee754_sqrtf+0x22>
 8006a80:	0022      	movs	r2, r4
 8006a82:	15e1      	asrs	r1, r4, #23
 8006a84:	4002      	ands	r2, r0
 8006a86:	4204      	tst	r4, r0
 8006a88:	d02e      	beq.n	8006ae8 <__ieee754_sqrtf+0xa8>
 8006a8a:	2280      	movs	r2, #128	; 0x80
 8006a8c:	000c      	movs	r4, r1
 8006a8e:	025b      	lsls	r3, r3, #9
 8006a90:	0a5b      	lsrs	r3, r3, #9
 8006a92:	0412      	lsls	r2, r2, #16
 8006a94:	3c7f      	subs	r4, #127	; 0x7f
 8006a96:	4313      	orrs	r3, r2
 8006a98:	07ca      	lsls	r2, r1, #31
 8006a9a:	d400      	bmi.n	8006a9e <__ieee754_sqrtf+0x5e>
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2180      	movs	r1, #128	; 0x80
 8006aa2:	2019      	movs	r0, #25
 8006aa4:	0016      	movs	r6, r2
 8006aa6:	1064      	asrs	r4, r4, #1
 8006aa8:	005b      	lsls	r3, r3, #1
 8006aaa:	0449      	lsls	r1, r1, #17
 8006aac:	1875      	adds	r5, r6, r1
 8006aae:	429d      	cmp	r5, r3
 8006ab0:	dc02      	bgt.n	8006ab8 <__ieee754_sqrtf+0x78>
 8006ab2:	186e      	adds	r6, r5, r1
 8006ab4:	1b5b      	subs	r3, r3, r5
 8006ab6:	1852      	adds	r2, r2, r1
 8006ab8:	3801      	subs	r0, #1
 8006aba:	005b      	lsls	r3, r3, #1
 8006abc:	0849      	lsrs	r1, r1, #1
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d1f4      	bne.n	8006aac <__ieee754_sqrtf+0x6c>
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <__ieee754_sqrtf+0x8c>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	3201      	adds	r2, #1
 8006aca:	439a      	bics	r2, r3
 8006acc:	23fc      	movs	r3, #252	; 0xfc
 8006ace:	1052      	asrs	r2, r2, #1
 8006ad0:	059b      	lsls	r3, r3, #22
 8006ad2:	18d2      	adds	r2, r2, r3
 8006ad4:	05e4      	lsls	r4, r4, #23
 8006ad6:	18a4      	adds	r4, r4, r2
 8006ad8:	e7c4      	b.n	8006a64 <__ieee754_sqrtf+0x24>
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	3201      	adds	r2, #1
 8006ade:	4203      	tst	r3, r0
 8006ae0:	d0fb      	beq.n	8006ada <__ieee754_sqrtf+0x9a>
 8006ae2:	3a01      	subs	r2, #1
 8006ae4:	1a89      	subs	r1, r1, r2
 8006ae6:	e7d0      	b.n	8006a8a <__ieee754_sqrtf+0x4a>
 8006ae8:	2080      	movs	r0, #128	; 0x80
 8006aea:	0400      	lsls	r0, r0, #16
 8006aec:	e7f7      	b.n	8006ade <__ieee754_sqrtf+0x9e>
	...

08006af0 <_init>:
 8006af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af2:	46c0      	nop			; (mov r8, r8)
 8006af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af6:	bc08      	pop	{r3}
 8006af8:	469e      	mov	lr, r3
 8006afa:	4770      	bx	lr

08006afc <_fini>:
 8006afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afe:	46c0      	nop			; (mov r8, r8)
 8006b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b02:	bc08      	pop	{r3}
 8006b04:	469e      	mov	lr, r3
 8006b06:	4770      	bx	lr

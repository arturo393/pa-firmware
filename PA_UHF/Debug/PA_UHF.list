
PA_UHF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006298  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08006350  08006350  00016350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006658  08006658  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006658  08006658  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006658  08006658  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006658  08006658  00016658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800665c  0800665c  0001665c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000070  080066d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  080066d0  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a957  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a90  00000000  00000000  0002a9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002d480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002dec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017723  00000000  00000000  0002e790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fdc2  00000000  00000000  00045eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008615a  00000000  00000000  00055c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbdcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000274c  00000000  00000000  000dbe20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006338 	.word	0x08006338

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08006338 	.word	0x08006338

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cfrcmple>:
 8000400:	4684      	mov	ip, r0
 8000402:	0008      	movs	r0, r1
 8000404:	4661      	mov	r1, ip
 8000406:	e7ff      	b.n	8000408 <__aeabi_cfcmpeq>

08000408 <__aeabi_cfcmpeq>:
 8000408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800040a:	f000 fb6d 	bl	8000ae8 <__lesf2>
 800040e:	2800      	cmp	r0, #0
 8000410:	d401      	bmi.n	8000416 <__aeabi_cfcmpeq+0xe>
 8000412:	2100      	movs	r1, #0
 8000414:	42c8      	cmn	r0, r1
 8000416:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000418 <__aeabi_fcmpeq>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 faf9 	bl	8000a10 <__eqsf2>
 800041e:	4240      	negs	r0, r0
 8000420:	3001      	adds	r0, #1
 8000422:	bd10      	pop	{r4, pc}

08000424 <__aeabi_fcmplt>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 fb5f 	bl	8000ae8 <__lesf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	db01      	blt.n	8000432 <__aeabi_fcmplt+0xe>
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	2001      	movs	r0, #1
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_fcmple>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fb55 	bl	8000ae8 <__lesf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	dd01      	ble.n	8000446 <__aeabi_fcmple+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_fcmpgt>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fb05 	bl	8000a5c <__gesf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	dc01      	bgt.n	800045a <__aeabi_fcmpgt+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__aeabi_fcmpge>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 fafb 	bl	8000a5c <__gesf2>
 8000466:	2800      	cmp	r0, #0
 8000468:	da01      	bge.n	800046e <__aeabi_fcmpge+0xe>
 800046a:	2000      	movs	r0, #0
 800046c:	bd10      	pop	{r4, pc}
 800046e:	2001      	movs	r0, #1
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__aeabi_f2uiz>:
 8000474:	219e      	movs	r1, #158	; 0x9e
 8000476:	b510      	push	{r4, lr}
 8000478:	05c9      	lsls	r1, r1, #23
 800047a:	1c04      	adds	r4, r0, #0
 800047c:	f7ff fff0 	bl	8000460 <__aeabi_fcmpge>
 8000480:	2800      	cmp	r0, #0
 8000482:	d103      	bne.n	800048c <__aeabi_f2uiz+0x18>
 8000484:	1c20      	adds	r0, r4, #0
 8000486:	f000 fe5d 	bl	8001144 <__aeabi_f2iz>
 800048a:	bd10      	pop	{r4, pc}
 800048c:	219e      	movs	r1, #158	; 0x9e
 800048e:	1c20      	adds	r0, r4, #0
 8000490:	05c9      	lsls	r1, r1, #23
 8000492:	f000 fc93 	bl	8000dbc <__aeabi_fsub>
 8000496:	f000 fe55 	bl	8001144 <__aeabi_f2iz>
 800049a:	2380      	movs	r3, #128	; 0x80
 800049c:	061b      	lsls	r3, r3, #24
 800049e:	469c      	mov	ip, r3
 80004a0:	4460      	add	r0, ip
 80004a2:	e7f2      	b.n	800048a <__aeabi_f2uiz+0x16>

080004a4 <__aeabi_fadd>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	46c6      	mov	lr, r8
 80004a8:	0243      	lsls	r3, r0, #9
 80004aa:	0a5b      	lsrs	r3, r3, #9
 80004ac:	024e      	lsls	r6, r1, #9
 80004ae:	0045      	lsls	r5, r0, #1
 80004b0:	004f      	lsls	r7, r1, #1
 80004b2:	00da      	lsls	r2, r3, #3
 80004b4:	0fc4      	lsrs	r4, r0, #31
 80004b6:	469c      	mov	ip, r3
 80004b8:	0a70      	lsrs	r0, r6, #9
 80004ba:	4690      	mov	r8, r2
 80004bc:	b500      	push	{lr}
 80004be:	0e2d      	lsrs	r5, r5, #24
 80004c0:	0e3f      	lsrs	r7, r7, #24
 80004c2:	0fc9      	lsrs	r1, r1, #31
 80004c4:	09b6      	lsrs	r6, r6, #6
 80004c6:	428c      	cmp	r4, r1
 80004c8:	d04b      	beq.n	8000562 <__aeabi_fadd+0xbe>
 80004ca:	1bea      	subs	r2, r5, r7
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	dd36      	ble.n	800053e <__aeabi_fadd+0x9a>
 80004d0:	2f00      	cmp	r7, #0
 80004d2:	d061      	beq.n	8000598 <__aeabi_fadd+0xf4>
 80004d4:	2dff      	cmp	r5, #255	; 0xff
 80004d6:	d100      	bne.n	80004da <__aeabi_fadd+0x36>
 80004d8:	e0ad      	b.n	8000636 <__aeabi_fadd+0x192>
 80004da:	2380      	movs	r3, #128	; 0x80
 80004dc:	04db      	lsls	r3, r3, #19
 80004de:	431e      	orrs	r6, r3
 80004e0:	2a1b      	cmp	r2, #27
 80004e2:	dc00      	bgt.n	80004e6 <__aeabi_fadd+0x42>
 80004e4:	e0d3      	b.n	800068e <__aeabi_fadd+0x1ea>
 80004e6:	2001      	movs	r0, #1
 80004e8:	4643      	mov	r3, r8
 80004ea:	1a18      	subs	r0, r3, r0
 80004ec:	0143      	lsls	r3, r0, #5
 80004ee:	d400      	bmi.n	80004f2 <__aeabi_fadd+0x4e>
 80004f0:	e08c      	b.n	800060c <__aeabi_fadd+0x168>
 80004f2:	0180      	lsls	r0, r0, #6
 80004f4:	0987      	lsrs	r7, r0, #6
 80004f6:	0038      	movs	r0, r7
 80004f8:	f000 fed4 	bl	80012a4 <__clzsi2>
 80004fc:	3805      	subs	r0, #5
 80004fe:	4087      	lsls	r7, r0
 8000500:	4285      	cmp	r5, r0
 8000502:	dc00      	bgt.n	8000506 <__aeabi_fadd+0x62>
 8000504:	e0b6      	b.n	8000674 <__aeabi_fadd+0x1d0>
 8000506:	1a2d      	subs	r5, r5, r0
 8000508:	48b3      	ldr	r0, [pc, #716]	; (80007d8 <__aeabi_fadd+0x334>)
 800050a:	4038      	ands	r0, r7
 800050c:	0743      	lsls	r3, r0, #29
 800050e:	d004      	beq.n	800051a <__aeabi_fadd+0x76>
 8000510:	230f      	movs	r3, #15
 8000512:	4003      	ands	r3, r0
 8000514:	2b04      	cmp	r3, #4
 8000516:	d000      	beq.n	800051a <__aeabi_fadd+0x76>
 8000518:	3004      	adds	r0, #4
 800051a:	0143      	lsls	r3, r0, #5
 800051c:	d400      	bmi.n	8000520 <__aeabi_fadd+0x7c>
 800051e:	e078      	b.n	8000612 <__aeabi_fadd+0x16e>
 8000520:	1c6a      	adds	r2, r5, #1
 8000522:	2dfe      	cmp	r5, #254	; 0xfe
 8000524:	d065      	beq.n	80005f2 <__aeabi_fadd+0x14e>
 8000526:	0180      	lsls	r0, r0, #6
 8000528:	0a43      	lsrs	r3, r0, #9
 800052a:	469c      	mov	ip, r3
 800052c:	b2d2      	uxtb	r2, r2
 800052e:	4663      	mov	r3, ip
 8000530:	05d0      	lsls	r0, r2, #23
 8000532:	4318      	orrs	r0, r3
 8000534:	07e4      	lsls	r4, r4, #31
 8000536:	4320      	orrs	r0, r4
 8000538:	bc80      	pop	{r7}
 800053a:	46b8      	mov	r8, r7
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	2a00      	cmp	r2, #0
 8000540:	d035      	beq.n	80005ae <__aeabi_fadd+0x10a>
 8000542:	1b7a      	subs	r2, r7, r5
 8000544:	2d00      	cmp	r5, #0
 8000546:	d000      	beq.n	800054a <__aeabi_fadd+0xa6>
 8000548:	e0af      	b.n	80006aa <__aeabi_fadd+0x206>
 800054a:	4643      	mov	r3, r8
 800054c:	2b00      	cmp	r3, #0
 800054e:	d100      	bne.n	8000552 <__aeabi_fadd+0xae>
 8000550:	e0a7      	b.n	80006a2 <__aeabi_fadd+0x1fe>
 8000552:	1e53      	subs	r3, r2, #1
 8000554:	2a01      	cmp	r2, #1
 8000556:	d100      	bne.n	800055a <__aeabi_fadd+0xb6>
 8000558:	e12f      	b.n	80007ba <__aeabi_fadd+0x316>
 800055a:	2aff      	cmp	r2, #255	; 0xff
 800055c:	d069      	beq.n	8000632 <__aeabi_fadd+0x18e>
 800055e:	001a      	movs	r2, r3
 8000560:	e0aa      	b.n	80006b8 <__aeabi_fadd+0x214>
 8000562:	1be9      	subs	r1, r5, r7
 8000564:	2900      	cmp	r1, #0
 8000566:	dd70      	ble.n	800064a <__aeabi_fadd+0x1a6>
 8000568:	2f00      	cmp	r7, #0
 800056a:	d037      	beq.n	80005dc <__aeabi_fadd+0x138>
 800056c:	2dff      	cmp	r5, #255	; 0xff
 800056e:	d062      	beq.n	8000636 <__aeabi_fadd+0x192>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	04db      	lsls	r3, r3, #19
 8000574:	431e      	orrs	r6, r3
 8000576:	291b      	cmp	r1, #27
 8000578:	dc00      	bgt.n	800057c <__aeabi_fadd+0xd8>
 800057a:	e0b0      	b.n	80006de <__aeabi_fadd+0x23a>
 800057c:	2001      	movs	r0, #1
 800057e:	4440      	add	r0, r8
 8000580:	0143      	lsls	r3, r0, #5
 8000582:	d543      	bpl.n	800060c <__aeabi_fadd+0x168>
 8000584:	3501      	adds	r5, #1
 8000586:	2dff      	cmp	r5, #255	; 0xff
 8000588:	d033      	beq.n	80005f2 <__aeabi_fadd+0x14e>
 800058a:	2301      	movs	r3, #1
 800058c:	4a93      	ldr	r2, [pc, #588]	; (80007dc <__aeabi_fadd+0x338>)
 800058e:	4003      	ands	r3, r0
 8000590:	0840      	lsrs	r0, r0, #1
 8000592:	4010      	ands	r0, r2
 8000594:	4318      	orrs	r0, r3
 8000596:	e7b9      	b.n	800050c <__aeabi_fadd+0x68>
 8000598:	2e00      	cmp	r6, #0
 800059a:	d100      	bne.n	800059e <__aeabi_fadd+0xfa>
 800059c:	e083      	b.n	80006a6 <__aeabi_fadd+0x202>
 800059e:	1e51      	subs	r1, r2, #1
 80005a0:	2a01      	cmp	r2, #1
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fadd+0x102>
 80005a4:	e0d8      	b.n	8000758 <__aeabi_fadd+0x2b4>
 80005a6:	2aff      	cmp	r2, #255	; 0xff
 80005a8:	d045      	beq.n	8000636 <__aeabi_fadd+0x192>
 80005aa:	000a      	movs	r2, r1
 80005ac:	e798      	b.n	80004e0 <__aeabi_fadd+0x3c>
 80005ae:	27fe      	movs	r7, #254	; 0xfe
 80005b0:	1c6a      	adds	r2, r5, #1
 80005b2:	4217      	tst	r7, r2
 80005b4:	d000      	beq.n	80005b8 <__aeabi_fadd+0x114>
 80005b6:	e086      	b.n	80006c6 <__aeabi_fadd+0x222>
 80005b8:	2d00      	cmp	r5, #0
 80005ba:	d000      	beq.n	80005be <__aeabi_fadd+0x11a>
 80005bc:	e0b7      	b.n	800072e <__aeabi_fadd+0x28a>
 80005be:	4643      	mov	r3, r8
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d100      	bne.n	80005c6 <__aeabi_fadd+0x122>
 80005c4:	e0f3      	b.n	80007ae <__aeabi_fadd+0x30a>
 80005c6:	2200      	movs	r2, #0
 80005c8:	2e00      	cmp	r6, #0
 80005ca:	d0b0      	beq.n	800052e <__aeabi_fadd+0x8a>
 80005cc:	1b98      	subs	r0, r3, r6
 80005ce:	0143      	lsls	r3, r0, #5
 80005d0:	d400      	bmi.n	80005d4 <__aeabi_fadd+0x130>
 80005d2:	e0fa      	b.n	80007ca <__aeabi_fadd+0x326>
 80005d4:	4643      	mov	r3, r8
 80005d6:	000c      	movs	r4, r1
 80005d8:	1af0      	subs	r0, r6, r3
 80005da:	e797      	b.n	800050c <__aeabi_fadd+0x68>
 80005dc:	2e00      	cmp	r6, #0
 80005de:	d100      	bne.n	80005e2 <__aeabi_fadd+0x13e>
 80005e0:	e0c8      	b.n	8000774 <__aeabi_fadd+0x2d0>
 80005e2:	1e4a      	subs	r2, r1, #1
 80005e4:	2901      	cmp	r1, #1
 80005e6:	d100      	bne.n	80005ea <__aeabi_fadd+0x146>
 80005e8:	e0ae      	b.n	8000748 <__aeabi_fadd+0x2a4>
 80005ea:	29ff      	cmp	r1, #255	; 0xff
 80005ec:	d023      	beq.n	8000636 <__aeabi_fadd+0x192>
 80005ee:	0011      	movs	r1, r2
 80005f0:	e7c1      	b.n	8000576 <__aeabi_fadd+0xd2>
 80005f2:	2300      	movs	r3, #0
 80005f4:	22ff      	movs	r2, #255	; 0xff
 80005f6:	469c      	mov	ip, r3
 80005f8:	e799      	b.n	800052e <__aeabi_fadd+0x8a>
 80005fa:	21fe      	movs	r1, #254	; 0xfe
 80005fc:	1c6a      	adds	r2, r5, #1
 80005fe:	4211      	tst	r1, r2
 8000600:	d077      	beq.n	80006f2 <__aeabi_fadd+0x24e>
 8000602:	2aff      	cmp	r2, #255	; 0xff
 8000604:	d0f5      	beq.n	80005f2 <__aeabi_fadd+0x14e>
 8000606:	0015      	movs	r5, r2
 8000608:	4446      	add	r6, r8
 800060a:	0870      	lsrs	r0, r6, #1
 800060c:	0743      	lsls	r3, r0, #29
 800060e:	d000      	beq.n	8000612 <__aeabi_fadd+0x16e>
 8000610:	e77e      	b.n	8000510 <__aeabi_fadd+0x6c>
 8000612:	08c3      	lsrs	r3, r0, #3
 8000614:	2dff      	cmp	r5, #255	; 0xff
 8000616:	d00e      	beq.n	8000636 <__aeabi_fadd+0x192>
 8000618:	025b      	lsls	r3, r3, #9
 800061a:	0a5b      	lsrs	r3, r3, #9
 800061c:	469c      	mov	ip, r3
 800061e:	b2ea      	uxtb	r2, r5
 8000620:	e785      	b.n	800052e <__aeabi_fadd+0x8a>
 8000622:	2e00      	cmp	r6, #0
 8000624:	d007      	beq.n	8000636 <__aeabi_fadd+0x192>
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	03d2      	lsls	r2, r2, #15
 800062a:	4213      	tst	r3, r2
 800062c:	d003      	beq.n	8000636 <__aeabi_fadd+0x192>
 800062e:	4210      	tst	r0, r2
 8000630:	d101      	bne.n	8000636 <__aeabi_fadd+0x192>
 8000632:	000c      	movs	r4, r1
 8000634:	0003      	movs	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d0db      	beq.n	80005f2 <__aeabi_fadd+0x14e>
 800063a:	2080      	movs	r0, #128	; 0x80
 800063c:	03c0      	lsls	r0, r0, #15
 800063e:	4318      	orrs	r0, r3
 8000640:	0240      	lsls	r0, r0, #9
 8000642:	0a43      	lsrs	r3, r0, #9
 8000644:	469c      	mov	ip, r3
 8000646:	22ff      	movs	r2, #255	; 0xff
 8000648:	e771      	b.n	800052e <__aeabi_fadd+0x8a>
 800064a:	2900      	cmp	r1, #0
 800064c:	d0d5      	beq.n	80005fa <__aeabi_fadd+0x156>
 800064e:	1b7a      	subs	r2, r7, r5
 8000650:	2d00      	cmp	r5, #0
 8000652:	d160      	bne.n	8000716 <__aeabi_fadd+0x272>
 8000654:	4643      	mov	r3, r8
 8000656:	2b00      	cmp	r3, #0
 8000658:	d024      	beq.n	80006a4 <__aeabi_fadd+0x200>
 800065a:	1e53      	subs	r3, r2, #1
 800065c:	2a01      	cmp	r2, #1
 800065e:	d073      	beq.n	8000748 <__aeabi_fadd+0x2a4>
 8000660:	2aff      	cmp	r2, #255	; 0xff
 8000662:	d0e7      	beq.n	8000634 <__aeabi_fadd+0x190>
 8000664:	001a      	movs	r2, r3
 8000666:	2a1b      	cmp	r2, #27
 8000668:	dc00      	bgt.n	800066c <__aeabi_fadd+0x1c8>
 800066a:	e085      	b.n	8000778 <__aeabi_fadd+0x2d4>
 800066c:	2001      	movs	r0, #1
 800066e:	003d      	movs	r5, r7
 8000670:	1980      	adds	r0, r0, r6
 8000672:	e785      	b.n	8000580 <__aeabi_fadd+0xdc>
 8000674:	2320      	movs	r3, #32
 8000676:	003a      	movs	r2, r7
 8000678:	1b45      	subs	r5, r0, r5
 800067a:	0038      	movs	r0, r7
 800067c:	3501      	adds	r5, #1
 800067e:	40ea      	lsrs	r2, r5
 8000680:	1b5d      	subs	r5, r3, r5
 8000682:	40a8      	lsls	r0, r5
 8000684:	1e43      	subs	r3, r0, #1
 8000686:	4198      	sbcs	r0, r3
 8000688:	2500      	movs	r5, #0
 800068a:	4310      	orrs	r0, r2
 800068c:	e73e      	b.n	800050c <__aeabi_fadd+0x68>
 800068e:	2320      	movs	r3, #32
 8000690:	0030      	movs	r0, r6
 8000692:	1a9b      	subs	r3, r3, r2
 8000694:	0031      	movs	r1, r6
 8000696:	4098      	lsls	r0, r3
 8000698:	40d1      	lsrs	r1, r2
 800069a:	1e43      	subs	r3, r0, #1
 800069c:	4198      	sbcs	r0, r3
 800069e:	4308      	orrs	r0, r1
 80006a0:	e722      	b.n	80004e8 <__aeabi_fadd+0x44>
 80006a2:	000c      	movs	r4, r1
 80006a4:	0003      	movs	r3, r0
 80006a6:	0015      	movs	r5, r2
 80006a8:	e7b4      	b.n	8000614 <__aeabi_fadd+0x170>
 80006aa:	2fff      	cmp	r7, #255	; 0xff
 80006ac:	d0c1      	beq.n	8000632 <__aeabi_fadd+0x18e>
 80006ae:	2380      	movs	r3, #128	; 0x80
 80006b0:	4640      	mov	r0, r8
 80006b2:	04db      	lsls	r3, r3, #19
 80006b4:	4318      	orrs	r0, r3
 80006b6:	4680      	mov	r8, r0
 80006b8:	2a1b      	cmp	r2, #27
 80006ba:	dd51      	ble.n	8000760 <__aeabi_fadd+0x2bc>
 80006bc:	2001      	movs	r0, #1
 80006be:	000c      	movs	r4, r1
 80006c0:	003d      	movs	r5, r7
 80006c2:	1a30      	subs	r0, r6, r0
 80006c4:	e712      	b.n	80004ec <__aeabi_fadd+0x48>
 80006c6:	4643      	mov	r3, r8
 80006c8:	1b9f      	subs	r7, r3, r6
 80006ca:	017b      	lsls	r3, r7, #5
 80006cc:	d42b      	bmi.n	8000726 <__aeabi_fadd+0x282>
 80006ce:	2f00      	cmp	r7, #0
 80006d0:	d000      	beq.n	80006d4 <__aeabi_fadd+0x230>
 80006d2:	e710      	b.n	80004f6 <__aeabi_fadd+0x52>
 80006d4:	2300      	movs	r3, #0
 80006d6:	2400      	movs	r4, #0
 80006d8:	2200      	movs	r2, #0
 80006da:	469c      	mov	ip, r3
 80006dc:	e727      	b.n	800052e <__aeabi_fadd+0x8a>
 80006de:	2320      	movs	r3, #32
 80006e0:	0032      	movs	r2, r6
 80006e2:	0030      	movs	r0, r6
 80006e4:	40ca      	lsrs	r2, r1
 80006e6:	1a59      	subs	r1, r3, r1
 80006e8:	4088      	lsls	r0, r1
 80006ea:	1e43      	subs	r3, r0, #1
 80006ec:	4198      	sbcs	r0, r3
 80006ee:	4310      	orrs	r0, r2
 80006f0:	e745      	b.n	800057e <__aeabi_fadd+0xda>
 80006f2:	2d00      	cmp	r5, #0
 80006f4:	d14a      	bne.n	800078c <__aeabi_fadd+0x2e8>
 80006f6:	4643      	mov	r3, r8
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d063      	beq.n	80007c4 <__aeabi_fadd+0x320>
 80006fc:	2200      	movs	r2, #0
 80006fe:	2e00      	cmp	r6, #0
 8000700:	d100      	bne.n	8000704 <__aeabi_fadd+0x260>
 8000702:	e714      	b.n	800052e <__aeabi_fadd+0x8a>
 8000704:	0030      	movs	r0, r6
 8000706:	4440      	add	r0, r8
 8000708:	0143      	lsls	r3, r0, #5
 800070a:	d400      	bmi.n	800070e <__aeabi_fadd+0x26a>
 800070c:	e77e      	b.n	800060c <__aeabi_fadd+0x168>
 800070e:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <__aeabi_fadd+0x334>)
 8000710:	3501      	adds	r5, #1
 8000712:	4018      	ands	r0, r3
 8000714:	e77a      	b.n	800060c <__aeabi_fadd+0x168>
 8000716:	2fff      	cmp	r7, #255	; 0xff
 8000718:	d08c      	beq.n	8000634 <__aeabi_fadd+0x190>
 800071a:	2380      	movs	r3, #128	; 0x80
 800071c:	4641      	mov	r1, r8
 800071e:	04db      	lsls	r3, r3, #19
 8000720:	4319      	orrs	r1, r3
 8000722:	4688      	mov	r8, r1
 8000724:	e79f      	b.n	8000666 <__aeabi_fadd+0x1c2>
 8000726:	4643      	mov	r3, r8
 8000728:	000c      	movs	r4, r1
 800072a:	1af7      	subs	r7, r6, r3
 800072c:	e6e3      	b.n	80004f6 <__aeabi_fadd+0x52>
 800072e:	4642      	mov	r2, r8
 8000730:	2a00      	cmp	r2, #0
 8000732:	d000      	beq.n	8000736 <__aeabi_fadd+0x292>
 8000734:	e775      	b.n	8000622 <__aeabi_fadd+0x17e>
 8000736:	2e00      	cmp	r6, #0
 8000738:	d000      	beq.n	800073c <__aeabi_fadd+0x298>
 800073a:	e77a      	b.n	8000632 <__aeabi_fadd+0x18e>
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	03db      	lsls	r3, r3, #15
 8000740:	2400      	movs	r4, #0
 8000742:	469c      	mov	ip, r3
 8000744:	22ff      	movs	r2, #255	; 0xff
 8000746:	e6f2      	b.n	800052e <__aeabi_fadd+0x8a>
 8000748:	0030      	movs	r0, r6
 800074a:	4440      	add	r0, r8
 800074c:	2501      	movs	r5, #1
 800074e:	0143      	lsls	r3, r0, #5
 8000750:	d400      	bmi.n	8000754 <__aeabi_fadd+0x2b0>
 8000752:	e75b      	b.n	800060c <__aeabi_fadd+0x168>
 8000754:	2502      	movs	r5, #2
 8000756:	e718      	b.n	800058a <__aeabi_fadd+0xe6>
 8000758:	4643      	mov	r3, r8
 800075a:	2501      	movs	r5, #1
 800075c:	1b98      	subs	r0, r3, r6
 800075e:	e6c5      	b.n	80004ec <__aeabi_fadd+0x48>
 8000760:	2320      	movs	r3, #32
 8000762:	4644      	mov	r4, r8
 8000764:	4640      	mov	r0, r8
 8000766:	40d4      	lsrs	r4, r2
 8000768:	1a9a      	subs	r2, r3, r2
 800076a:	4090      	lsls	r0, r2
 800076c:	1e43      	subs	r3, r0, #1
 800076e:	4198      	sbcs	r0, r3
 8000770:	4320      	orrs	r0, r4
 8000772:	e7a4      	b.n	80006be <__aeabi_fadd+0x21a>
 8000774:	000d      	movs	r5, r1
 8000776:	e74d      	b.n	8000614 <__aeabi_fadd+0x170>
 8000778:	2320      	movs	r3, #32
 800077a:	4641      	mov	r1, r8
 800077c:	4640      	mov	r0, r8
 800077e:	40d1      	lsrs	r1, r2
 8000780:	1a9a      	subs	r2, r3, r2
 8000782:	4090      	lsls	r0, r2
 8000784:	1e43      	subs	r3, r0, #1
 8000786:	4198      	sbcs	r0, r3
 8000788:	4308      	orrs	r0, r1
 800078a:	e770      	b.n	800066e <__aeabi_fadd+0x1ca>
 800078c:	4642      	mov	r2, r8
 800078e:	2a00      	cmp	r2, #0
 8000790:	d100      	bne.n	8000794 <__aeabi_fadd+0x2f0>
 8000792:	e74f      	b.n	8000634 <__aeabi_fadd+0x190>
 8000794:	2e00      	cmp	r6, #0
 8000796:	d100      	bne.n	800079a <__aeabi_fadd+0x2f6>
 8000798:	e74d      	b.n	8000636 <__aeabi_fadd+0x192>
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	03d2      	lsls	r2, r2, #15
 800079e:	4213      	tst	r3, r2
 80007a0:	d100      	bne.n	80007a4 <__aeabi_fadd+0x300>
 80007a2:	e748      	b.n	8000636 <__aeabi_fadd+0x192>
 80007a4:	4210      	tst	r0, r2
 80007a6:	d000      	beq.n	80007aa <__aeabi_fadd+0x306>
 80007a8:	e745      	b.n	8000636 <__aeabi_fadd+0x192>
 80007aa:	0003      	movs	r3, r0
 80007ac:	e743      	b.n	8000636 <__aeabi_fadd+0x192>
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d090      	beq.n	80006d4 <__aeabi_fadd+0x230>
 80007b2:	000c      	movs	r4, r1
 80007b4:	4684      	mov	ip, r0
 80007b6:	2200      	movs	r2, #0
 80007b8:	e6b9      	b.n	800052e <__aeabi_fadd+0x8a>
 80007ba:	4643      	mov	r3, r8
 80007bc:	000c      	movs	r4, r1
 80007be:	1af0      	subs	r0, r6, r3
 80007c0:	3501      	adds	r5, #1
 80007c2:	e693      	b.n	80004ec <__aeabi_fadd+0x48>
 80007c4:	4684      	mov	ip, r0
 80007c6:	2200      	movs	r2, #0
 80007c8:	e6b1      	b.n	800052e <__aeabi_fadd+0x8a>
 80007ca:	2800      	cmp	r0, #0
 80007cc:	d000      	beq.n	80007d0 <__aeabi_fadd+0x32c>
 80007ce:	e71d      	b.n	800060c <__aeabi_fadd+0x168>
 80007d0:	2300      	movs	r3, #0
 80007d2:	2400      	movs	r4, #0
 80007d4:	469c      	mov	ip, r3
 80007d6:	e6aa      	b.n	800052e <__aeabi_fadd+0x8a>
 80007d8:	fbffffff 	.word	0xfbffffff
 80007dc:	7dffffff 	.word	0x7dffffff

080007e0 <__aeabi_fdiv>:
 80007e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e2:	464f      	mov	r7, r9
 80007e4:	4646      	mov	r6, r8
 80007e6:	46d6      	mov	lr, sl
 80007e8:	0245      	lsls	r5, r0, #9
 80007ea:	b5c0      	push	{r6, r7, lr}
 80007ec:	0047      	lsls	r7, r0, #1
 80007ee:	1c0c      	adds	r4, r1, #0
 80007f0:	0a6d      	lsrs	r5, r5, #9
 80007f2:	0e3f      	lsrs	r7, r7, #24
 80007f4:	0fc6      	lsrs	r6, r0, #31
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	d100      	bne.n	80007fc <__aeabi_fdiv+0x1c>
 80007fa:	e070      	b.n	80008de <__aeabi_fdiv+0xfe>
 80007fc:	2fff      	cmp	r7, #255	; 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fdiv+0x22>
 8000800:	e075      	b.n	80008ee <__aeabi_fdiv+0x10e>
 8000802:	00eb      	lsls	r3, r5, #3
 8000804:	2580      	movs	r5, #128	; 0x80
 8000806:	04ed      	lsls	r5, r5, #19
 8000808:	431d      	orrs	r5, r3
 800080a:	2300      	movs	r3, #0
 800080c:	4699      	mov	r9, r3
 800080e:	469a      	mov	sl, r3
 8000810:	3f7f      	subs	r7, #127	; 0x7f
 8000812:	0260      	lsls	r0, r4, #9
 8000814:	0a43      	lsrs	r3, r0, #9
 8000816:	4698      	mov	r8, r3
 8000818:	0063      	lsls	r3, r4, #1
 800081a:	0e1b      	lsrs	r3, r3, #24
 800081c:	0fe4      	lsrs	r4, r4, #31
 800081e:	2b00      	cmp	r3, #0
 8000820:	d04e      	beq.n	80008c0 <__aeabi_fdiv+0xe0>
 8000822:	2bff      	cmp	r3, #255	; 0xff
 8000824:	d046      	beq.n	80008b4 <__aeabi_fdiv+0xd4>
 8000826:	4642      	mov	r2, r8
 8000828:	00d0      	lsls	r0, r2, #3
 800082a:	2280      	movs	r2, #128	; 0x80
 800082c:	04d2      	lsls	r2, r2, #19
 800082e:	4302      	orrs	r2, r0
 8000830:	4690      	mov	r8, r2
 8000832:	2200      	movs	r2, #0
 8000834:	3b7f      	subs	r3, #127	; 0x7f
 8000836:	0031      	movs	r1, r6
 8000838:	1aff      	subs	r7, r7, r3
 800083a:	464b      	mov	r3, r9
 800083c:	4061      	eors	r1, r4
 800083e:	b2c9      	uxtb	r1, r1
 8000840:	4313      	orrs	r3, r2
 8000842:	2b0f      	cmp	r3, #15
 8000844:	d900      	bls.n	8000848 <__aeabi_fdiv+0x68>
 8000846:	e0b5      	b.n	80009b4 <__aeabi_fdiv+0x1d4>
 8000848:	486e      	ldr	r0, [pc, #440]	; (8000a04 <__aeabi_fdiv+0x224>)
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	58c3      	ldr	r3, [r0, r3]
 800084e:	469f      	mov	pc, r3
 8000850:	2300      	movs	r3, #0
 8000852:	4698      	mov	r8, r3
 8000854:	0026      	movs	r6, r4
 8000856:	4645      	mov	r5, r8
 8000858:	4692      	mov	sl, r2
 800085a:	4653      	mov	r3, sl
 800085c:	2b02      	cmp	r3, #2
 800085e:	d100      	bne.n	8000862 <__aeabi_fdiv+0x82>
 8000860:	e089      	b.n	8000976 <__aeabi_fdiv+0x196>
 8000862:	2b03      	cmp	r3, #3
 8000864:	d100      	bne.n	8000868 <__aeabi_fdiv+0x88>
 8000866:	e09e      	b.n	80009a6 <__aeabi_fdiv+0x1c6>
 8000868:	2b01      	cmp	r3, #1
 800086a:	d018      	beq.n	800089e <__aeabi_fdiv+0xbe>
 800086c:	003b      	movs	r3, r7
 800086e:	337f      	adds	r3, #127	; 0x7f
 8000870:	2b00      	cmp	r3, #0
 8000872:	dd69      	ble.n	8000948 <__aeabi_fdiv+0x168>
 8000874:	076a      	lsls	r2, r5, #29
 8000876:	d004      	beq.n	8000882 <__aeabi_fdiv+0xa2>
 8000878:	220f      	movs	r2, #15
 800087a:	402a      	ands	r2, r5
 800087c:	2a04      	cmp	r2, #4
 800087e:	d000      	beq.n	8000882 <__aeabi_fdiv+0xa2>
 8000880:	3504      	adds	r5, #4
 8000882:	012a      	lsls	r2, r5, #4
 8000884:	d503      	bpl.n	800088e <__aeabi_fdiv+0xae>
 8000886:	4b60      	ldr	r3, [pc, #384]	; (8000a08 <__aeabi_fdiv+0x228>)
 8000888:	401d      	ands	r5, r3
 800088a:	003b      	movs	r3, r7
 800088c:	3380      	adds	r3, #128	; 0x80
 800088e:	2bfe      	cmp	r3, #254	; 0xfe
 8000890:	dd00      	ble.n	8000894 <__aeabi_fdiv+0xb4>
 8000892:	e070      	b.n	8000976 <__aeabi_fdiv+0x196>
 8000894:	01ad      	lsls	r5, r5, #6
 8000896:	0a6d      	lsrs	r5, r5, #9
 8000898:	b2d8      	uxtb	r0, r3
 800089a:	e002      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 800089c:	000e      	movs	r6, r1
 800089e:	2000      	movs	r0, #0
 80008a0:	2500      	movs	r5, #0
 80008a2:	05c0      	lsls	r0, r0, #23
 80008a4:	4328      	orrs	r0, r5
 80008a6:	07f6      	lsls	r6, r6, #31
 80008a8:	4330      	orrs	r0, r6
 80008aa:	bce0      	pop	{r5, r6, r7}
 80008ac:	46ba      	mov	sl, r7
 80008ae:	46b1      	mov	r9, r6
 80008b0:	46a8      	mov	r8, r5
 80008b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008b4:	4643      	mov	r3, r8
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d13f      	bne.n	800093a <__aeabi_fdiv+0x15a>
 80008ba:	2202      	movs	r2, #2
 80008bc:	3fff      	subs	r7, #255	; 0xff
 80008be:	e003      	b.n	80008c8 <__aeabi_fdiv+0xe8>
 80008c0:	4643      	mov	r3, r8
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d12d      	bne.n	8000922 <__aeabi_fdiv+0x142>
 80008c6:	2201      	movs	r2, #1
 80008c8:	0031      	movs	r1, r6
 80008ca:	464b      	mov	r3, r9
 80008cc:	4061      	eors	r1, r4
 80008ce:	b2c9      	uxtb	r1, r1
 80008d0:	4313      	orrs	r3, r2
 80008d2:	2b0f      	cmp	r3, #15
 80008d4:	d834      	bhi.n	8000940 <__aeabi_fdiv+0x160>
 80008d6:	484d      	ldr	r0, [pc, #308]	; (8000a0c <__aeabi_fdiv+0x22c>)
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	58c3      	ldr	r3, [r0, r3]
 80008dc:	469f      	mov	pc, r3
 80008de:	2d00      	cmp	r5, #0
 80008e0:	d113      	bne.n	800090a <__aeabi_fdiv+0x12a>
 80008e2:	2304      	movs	r3, #4
 80008e4:	4699      	mov	r9, r3
 80008e6:	3b03      	subs	r3, #3
 80008e8:	2700      	movs	r7, #0
 80008ea:	469a      	mov	sl, r3
 80008ec:	e791      	b.n	8000812 <__aeabi_fdiv+0x32>
 80008ee:	2d00      	cmp	r5, #0
 80008f0:	d105      	bne.n	80008fe <__aeabi_fdiv+0x11e>
 80008f2:	2308      	movs	r3, #8
 80008f4:	4699      	mov	r9, r3
 80008f6:	3b06      	subs	r3, #6
 80008f8:	27ff      	movs	r7, #255	; 0xff
 80008fa:	469a      	mov	sl, r3
 80008fc:	e789      	b.n	8000812 <__aeabi_fdiv+0x32>
 80008fe:	230c      	movs	r3, #12
 8000900:	4699      	mov	r9, r3
 8000902:	3b09      	subs	r3, #9
 8000904:	27ff      	movs	r7, #255	; 0xff
 8000906:	469a      	mov	sl, r3
 8000908:	e783      	b.n	8000812 <__aeabi_fdiv+0x32>
 800090a:	0028      	movs	r0, r5
 800090c:	f000 fcca 	bl	80012a4 <__clzsi2>
 8000910:	2776      	movs	r7, #118	; 0x76
 8000912:	1f43      	subs	r3, r0, #5
 8000914:	409d      	lsls	r5, r3
 8000916:	2300      	movs	r3, #0
 8000918:	427f      	negs	r7, r7
 800091a:	4699      	mov	r9, r3
 800091c:	469a      	mov	sl, r3
 800091e:	1a3f      	subs	r7, r7, r0
 8000920:	e777      	b.n	8000812 <__aeabi_fdiv+0x32>
 8000922:	4640      	mov	r0, r8
 8000924:	f000 fcbe 	bl	80012a4 <__clzsi2>
 8000928:	4642      	mov	r2, r8
 800092a:	1f43      	subs	r3, r0, #5
 800092c:	409a      	lsls	r2, r3
 800092e:	2376      	movs	r3, #118	; 0x76
 8000930:	425b      	negs	r3, r3
 8000932:	4690      	mov	r8, r2
 8000934:	1a1b      	subs	r3, r3, r0
 8000936:	2200      	movs	r2, #0
 8000938:	e77d      	b.n	8000836 <__aeabi_fdiv+0x56>
 800093a:	23ff      	movs	r3, #255	; 0xff
 800093c:	2203      	movs	r2, #3
 800093e:	e77a      	b.n	8000836 <__aeabi_fdiv+0x56>
 8000940:	000e      	movs	r6, r1
 8000942:	20ff      	movs	r0, #255	; 0xff
 8000944:	2500      	movs	r5, #0
 8000946:	e7ac      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 8000948:	2001      	movs	r0, #1
 800094a:	1ac0      	subs	r0, r0, r3
 800094c:	281b      	cmp	r0, #27
 800094e:	dca6      	bgt.n	800089e <__aeabi_fdiv+0xbe>
 8000950:	379e      	adds	r7, #158	; 0x9e
 8000952:	002a      	movs	r2, r5
 8000954:	40bd      	lsls	r5, r7
 8000956:	40c2      	lsrs	r2, r0
 8000958:	1e6b      	subs	r3, r5, #1
 800095a:	419d      	sbcs	r5, r3
 800095c:	4315      	orrs	r5, r2
 800095e:	076b      	lsls	r3, r5, #29
 8000960:	d004      	beq.n	800096c <__aeabi_fdiv+0x18c>
 8000962:	230f      	movs	r3, #15
 8000964:	402b      	ands	r3, r5
 8000966:	2b04      	cmp	r3, #4
 8000968:	d000      	beq.n	800096c <__aeabi_fdiv+0x18c>
 800096a:	3504      	adds	r5, #4
 800096c:	016b      	lsls	r3, r5, #5
 800096e:	d544      	bpl.n	80009fa <__aeabi_fdiv+0x21a>
 8000970:	2001      	movs	r0, #1
 8000972:	2500      	movs	r5, #0
 8000974:	e795      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 8000976:	20ff      	movs	r0, #255	; 0xff
 8000978:	2500      	movs	r5, #0
 800097a:	e792      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 800097c:	2580      	movs	r5, #128	; 0x80
 800097e:	2600      	movs	r6, #0
 8000980:	20ff      	movs	r0, #255	; 0xff
 8000982:	03ed      	lsls	r5, r5, #15
 8000984:	e78d      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 8000986:	2300      	movs	r3, #0
 8000988:	4698      	mov	r8, r3
 800098a:	2080      	movs	r0, #128	; 0x80
 800098c:	03c0      	lsls	r0, r0, #15
 800098e:	4205      	tst	r5, r0
 8000990:	d009      	beq.n	80009a6 <__aeabi_fdiv+0x1c6>
 8000992:	4643      	mov	r3, r8
 8000994:	4203      	tst	r3, r0
 8000996:	d106      	bne.n	80009a6 <__aeabi_fdiv+0x1c6>
 8000998:	4645      	mov	r5, r8
 800099a:	4305      	orrs	r5, r0
 800099c:	026d      	lsls	r5, r5, #9
 800099e:	0026      	movs	r6, r4
 80009a0:	20ff      	movs	r0, #255	; 0xff
 80009a2:	0a6d      	lsrs	r5, r5, #9
 80009a4:	e77d      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 80009a6:	2080      	movs	r0, #128	; 0x80
 80009a8:	03c0      	lsls	r0, r0, #15
 80009aa:	4305      	orrs	r5, r0
 80009ac:	026d      	lsls	r5, r5, #9
 80009ae:	20ff      	movs	r0, #255	; 0xff
 80009b0:	0a6d      	lsrs	r5, r5, #9
 80009b2:	e776      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 80009b4:	4642      	mov	r2, r8
 80009b6:	016b      	lsls	r3, r5, #5
 80009b8:	0150      	lsls	r0, r2, #5
 80009ba:	4283      	cmp	r3, r0
 80009bc:	d219      	bcs.n	80009f2 <__aeabi_fdiv+0x212>
 80009be:	221b      	movs	r2, #27
 80009c0:	2500      	movs	r5, #0
 80009c2:	3f01      	subs	r7, #1
 80009c4:	2601      	movs	r6, #1
 80009c6:	001c      	movs	r4, r3
 80009c8:	006d      	lsls	r5, r5, #1
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	2c00      	cmp	r4, #0
 80009ce:	db01      	blt.n	80009d4 <__aeabi_fdiv+0x1f4>
 80009d0:	4298      	cmp	r0, r3
 80009d2:	d801      	bhi.n	80009d8 <__aeabi_fdiv+0x1f8>
 80009d4:	1a1b      	subs	r3, r3, r0
 80009d6:	4335      	orrs	r5, r6
 80009d8:	3a01      	subs	r2, #1
 80009da:	2a00      	cmp	r2, #0
 80009dc:	d1f3      	bne.n	80009c6 <__aeabi_fdiv+0x1e6>
 80009de:	1e5a      	subs	r2, r3, #1
 80009e0:	4193      	sbcs	r3, r2
 80009e2:	431d      	orrs	r5, r3
 80009e4:	003b      	movs	r3, r7
 80009e6:	337f      	adds	r3, #127	; 0x7f
 80009e8:	000e      	movs	r6, r1
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	dd00      	ble.n	80009f0 <__aeabi_fdiv+0x210>
 80009ee:	e741      	b.n	8000874 <__aeabi_fdiv+0x94>
 80009f0:	e7aa      	b.n	8000948 <__aeabi_fdiv+0x168>
 80009f2:	221a      	movs	r2, #26
 80009f4:	2501      	movs	r5, #1
 80009f6:	1a1b      	subs	r3, r3, r0
 80009f8:	e7e4      	b.n	80009c4 <__aeabi_fdiv+0x1e4>
 80009fa:	01ad      	lsls	r5, r5, #6
 80009fc:	2000      	movs	r0, #0
 80009fe:	0a6d      	lsrs	r5, r5, #9
 8000a00:	e74f      	b.n	80008a2 <__aeabi_fdiv+0xc2>
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	080064a8 	.word	0x080064a8
 8000a08:	f7ffffff 	.word	0xf7ffffff
 8000a0c:	080064e8 	.word	0x080064e8

08000a10 <__eqsf2>:
 8000a10:	b570      	push	{r4, r5, r6, lr}
 8000a12:	0042      	lsls	r2, r0, #1
 8000a14:	0245      	lsls	r5, r0, #9
 8000a16:	024e      	lsls	r6, r1, #9
 8000a18:	004c      	lsls	r4, r1, #1
 8000a1a:	0fc3      	lsrs	r3, r0, #31
 8000a1c:	0a6d      	lsrs	r5, r5, #9
 8000a1e:	2001      	movs	r0, #1
 8000a20:	0e12      	lsrs	r2, r2, #24
 8000a22:	0a76      	lsrs	r6, r6, #9
 8000a24:	0e24      	lsrs	r4, r4, #24
 8000a26:	0fc9      	lsrs	r1, r1, #31
 8000a28:	2aff      	cmp	r2, #255	; 0xff
 8000a2a:	d006      	beq.n	8000a3a <__eqsf2+0x2a>
 8000a2c:	2cff      	cmp	r4, #255	; 0xff
 8000a2e:	d003      	beq.n	8000a38 <__eqsf2+0x28>
 8000a30:	42a2      	cmp	r2, r4
 8000a32:	d101      	bne.n	8000a38 <__eqsf2+0x28>
 8000a34:	42b5      	cmp	r5, r6
 8000a36:	d006      	beq.n	8000a46 <__eqsf2+0x36>
 8000a38:	bd70      	pop	{r4, r5, r6, pc}
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d1fc      	bne.n	8000a38 <__eqsf2+0x28>
 8000a3e:	2cff      	cmp	r4, #255	; 0xff
 8000a40:	d1fa      	bne.n	8000a38 <__eqsf2+0x28>
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	d1f8      	bne.n	8000a38 <__eqsf2+0x28>
 8000a46:	428b      	cmp	r3, r1
 8000a48:	d006      	beq.n	8000a58 <__eqsf2+0x48>
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	d1f3      	bne.n	8000a38 <__eqsf2+0x28>
 8000a50:	0028      	movs	r0, r5
 8000a52:	1e43      	subs	r3, r0, #1
 8000a54:	4198      	sbcs	r0, r3
 8000a56:	e7ef      	b.n	8000a38 <__eqsf2+0x28>
 8000a58:	2000      	movs	r0, #0
 8000a5a:	e7ed      	b.n	8000a38 <__eqsf2+0x28>

08000a5c <__gesf2>:
 8000a5c:	b570      	push	{r4, r5, r6, lr}
 8000a5e:	0042      	lsls	r2, r0, #1
 8000a60:	0245      	lsls	r5, r0, #9
 8000a62:	024e      	lsls	r6, r1, #9
 8000a64:	004c      	lsls	r4, r1, #1
 8000a66:	0fc3      	lsrs	r3, r0, #31
 8000a68:	0a6d      	lsrs	r5, r5, #9
 8000a6a:	0e12      	lsrs	r2, r2, #24
 8000a6c:	0a76      	lsrs	r6, r6, #9
 8000a6e:	0e24      	lsrs	r4, r4, #24
 8000a70:	0fc8      	lsrs	r0, r1, #31
 8000a72:	2aff      	cmp	r2, #255	; 0xff
 8000a74:	d01b      	beq.n	8000aae <__gesf2+0x52>
 8000a76:	2cff      	cmp	r4, #255	; 0xff
 8000a78:	d00e      	beq.n	8000a98 <__gesf2+0x3c>
 8000a7a:	2a00      	cmp	r2, #0
 8000a7c:	d11b      	bne.n	8000ab6 <__gesf2+0x5a>
 8000a7e:	2c00      	cmp	r4, #0
 8000a80:	d101      	bne.n	8000a86 <__gesf2+0x2a>
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d01c      	beq.n	8000ac0 <__gesf2+0x64>
 8000a86:	2d00      	cmp	r5, #0
 8000a88:	d00c      	beq.n	8000aa4 <__gesf2+0x48>
 8000a8a:	4283      	cmp	r3, r0
 8000a8c:	d01c      	beq.n	8000ac8 <__gesf2+0x6c>
 8000a8e:	2102      	movs	r1, #2
 8000a90:	1e58      	subs	r0, r3, #1
 8000a92:	4008      	ands	r0, r1
 8000a94:	3801      	subs	r0, #1
 8000a96:	bd70      	pop	{r4, r5, r6, pc}
 8000a98:	2e00      	cmp	r6, #0
 8000a9a:	d122      	bne.n	8000ae2 <__gesf2+0x86>
 8000a9c:	2a00      	cmp	r2, #0
 8000a9e:	d1f4      	bne.n	8000a8a <__gesf2+0x2e>
 8000aa0:	2d00      	cmp	r5, #0
 8000aa2:	d1f2      	bne.n	8000a8a <__gesf2+0x2e>
 8000aa4:	2800      	cmp	r0, #0
 8000aa6:	d1f6      	bne.n	8000a96 <__gesf2+0x3a>
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	4240      	negs	r0, r0
 8000aac:	e7f3      	b.n	8000a96 <__gesf2+0x3a>
 8000aae:	2d00      	cmp	r5, #0
 8000ab0:	d117      	bne.n	8000ae2 <__gesf2+0x86>
 8000ab2:	2cff      	cmp	r4, #255	; 0xff
 8000ab4:	d0f0      	beq.n	8000a98 <__gesf2+0x3c>
 8000ab6:	2c00      	cmp	r4, #0
 8000ab8:	d1e7      	bne.n	8000a8a <__gesf2+0x2e>
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	d1e5      	bne.n	8000a8a <__gesf2+0x2e>
 8000abe:	e7e6      	b.n	8000a8e <__gesf2+0x32>
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d0e7      	beq.n	8000a96 <__gesf2+0x3a>
 8000ac6:	e7e2      	b.n	8000a8e <__gesf2+0x32>
 8000ac8:	42a2      	cmp	r2, r4
 8000aca:	dc05      	bgt.n	8000ad8 <__gesf2+0x7c>
 8000acc:	dbea      	blt.n	8000aa4 <__gesf2+0x48>
 8000ace:	42b5      	cmp	r5, r6
 8000ad0:	d802      	bhi.n	8000ad8 <__gesf2+0x7c>
 8000ad2:	d3e7      	bcc.n	8000aa4 <__gesf2+0x48>
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	e7de      	b.n	8000a96 <__gesf2+0x3a>
 8000ad8:	4243      	negs	r3, r0
 8000ada:	4158      	adcs	r0, r3
 8000adc:	0040      	lsls	r0, r0, #1
 8000ade:	3801      	subs	r0, #1
 8000ae0:	e7d9      	b.n	8000a96 <__gesf2+0x3a>
 8000ae2:	2002      	movs	r0, #2
 8000ae4:	4240      	negs	r0, r0
 8000ae6:	e7d6      	b.n	8000a96 <__gesf2+0x3a>

08000ae8 <__lesf2>:
 8000ae8:	b570      	push	{r4, r5, r6, lr}
 8000aea:	0042      	lsls	r2, r0, #1
 8000aec:	0245      	lsls	r5, r0, #9
 8000aee:	024e      	lsls	r6, r1, #9
 8000af0:	004c      	lsls	r4, r1, #1
 8000af2:	0fc3      	lsrs	r3, r0, #31
 8000af4:	0a6d      	lsrs	r5, r5, #9
 8000af6:	0e12      	lsrs	r2, r2, #24
 8000af8:	0a76      	lsrs	r6, r6, #9
 8000afa:	0e24      	lsrs	r4, r4, #24
 8000afc:	0fc8      	lsrs	r0, r1, #31
 8000afe:	2aff      	cmp	r2, #255	; 0xff
 8000b00:	d00b      	beq.n	8000b1a <__lesf2+0x32>
 8000b02:	2cff      	cmp	r4, #255	; 0xff
 8000b04:	d00d      	beq.n	8000b22 <__lesf2+0x3a>
 8000b06:	2a00      	cmp	r2, #0
 8000b08:	d11f      	bne.n	8000b4a <__lesf2+0x62>
 8000b0a:	2c00      	cmp	r4, #0
 8000b0c:	d116      	bne.n	8000b3c <__lesf2+0x54>
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d114      	bne.n	8000b3c <__lesf2+0x54>
 8000b12:	2000      	movs	r0, #0
 8000b14:	2d00      	cmp	r5, #0
 8000b16:	d010      	beq.n	8000b3a <__lesf2+0x52>
 8000b18:	e009      	b.n	8000b2e <__lesf2+0x46>
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d10c      	bne.n	8000b38 <__lesf2+0x50>
 8000b1e:	2cff      	cmp	r4, #255	; 0xff
 8000b20:	d113      	bne.n	8000b4a <__lesf2+0x62>
 8000b22:	2e00      	cmp	r6, #0
 8000b24:	d108      	bne.n	8000b38 <__lesf2+0x50>
 8000b26:	2a00      	cmp	r2, #0
 8000b28:	d008      	beq.n	8000b3c <__lesf2+0x54>
 8000b2a:	4283      	cmp	r3, r0
 8000b2c:	d012      	beq.n	8000b54 <__lesf2+0x6c>
 8000b2e:	2102      	movs	r1, #2
 8000b30:	1e58      	subs	r0, r3, #1
 8000b32:	4008      	ands	r0, r1
 8000b34:	3801      	subs	r0, #1
 8000b36:	e000      	b.n	8000b3a <__lesf2+0x52>
 8000b38:	2002      	movs	r0, #2
 8000b3a:	bd70      	pop	{r4, r5, r6, pc}
 8000b3c:	2d00      	cmp	r5, #0
 8000b3e:	d1f4      	bne.n	8000b2a <__lesf2+0x42>
 8000b40:	2800      	cmp	r0, #0
 8000b42:	d1fa      	bne.n	8000b3a <__lesf2+0x52>
 8000b44:	2001      	movs	r0, #1
 8000b46:	4240      	negs	r0, r0
 8000b48:	e7f7      	b.n	8000b3a <__lesf2+0x52>
 8000b4a:	2c00      	cmp	r4, #0
 8000b4c:	d1ed      	bne.n	8000b2a <__lesf2+0x42>
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d1eb      	bne.n	8000b2a <__lesf2+0x42>
 8000b52:	e7ec      	b.n	8000b2e <__lesf2+0x46>
 8000b54:	42a2      	cmp	r2, r4
 8000b56:	dc05      	bgt.n	8000b64 <__lesf2+0x7c>
 8000b58:	dbf2      	blt.n	8000b40 <__lesf2+0x58>
 8000b5a:	42b5      	cmp	r5, r6
 8000b5c:	d802      	bhi.n	8000b64 <__lesf2+0x7c>
 8000b5e:	d3ef      	bcc.n	8000b40 <__lesf2+0x58>
 8000b60:	2000      	movs	r0, #0
 8000b62:	e7ea      	b.n	8000b3a <__lesf2+0x52>
 8000b64:	4243      	negs	r3, r0
 8000b66:	4158      	adcs	r0, r3
 8000b68:	0040      	lsls	r0, r0, #1
 8000b6a:	3801      	subs	r0, #1
 8000b6c:	e7e5      	b.n	8000b3a <__lesf2+0x52>
 8000b6e:	46c0      	nop			; (mov r8, r8)

08000b70 <__aeabi_fmul>:
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	464f      	mov	r7, r9
 8000b74:	4646      	mov	r6, r8
 8000b76:	46d6      	mov	lr, sl
 8000b78:	0244      	lsls	r4, r0, #9
 8000b7a:	0045      	lsls	r5, r0, #1
 8000b7c:	b5c0      	push	{r6, r7, lr}
 8000b7e:	0a64      	lsrs	r4, r4, #9
 8000b80:	1c0f      	adds	r7, r1, #0
 8000b82:	0e2d      	lsrs	r5, r5, #24
 8000b84:	0fc6      	lsrs	r6, r0, #31
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	d100      	bne.n	8000b8c <__aeabi_fmul+0x1c>
 8000b8a:	e08d      	b.n	8000ca8 <__aeabi_fmul+0x138>
 8000b8c:	2dff      	cmp	r5, #255	; 0xff
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_fmul+0x22>
 8000b90:	e092      	b.n	8000cb8 <__aeabi_fmul+0x148>
 8000b92:	2300      	movs	r3, #0
 8000b94:	2080      	movs	r0, #128	; 0x80
 8000b96:	4699      	mov	r9, r3
 8000b98:	469a      	mov	sl, r3
 8000b9a:	00e4      	lsls	r4, r4, #3
 8000b9c:	04c0      	lsls	r0, r0, #19
 8000b9e:	4304      	orrs	r4, r0
 8000ba0:	3d7f      	subs	r5, #127	; 0x7f
 8000ba2:	0278      	lsls	r0, r7, #9
 8000ba4:	0a43      	lsrs	r3, r0, #9
 8000ba6:	4698      	mov	r8, r3
 8000ba8:	007b      	lsls	r3, r7, #1
 8000baa:	0e1b      	lsrs	r3, r3, #24
 8000bac:	0fff      	lsrs	r7, r7, #31
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_fmul+0x44>
 8000bb2:	e070      	b.n	8000c96 <__aeabi_fmul+0x126>
 8000bb4:	2bff      	cmp	r3, #255	; 0xff
 8000bb6:	d100      	bne.n	8000bba <__aeabi_fmul+0x4a>
 8000bb8:	e086      	b.n	8000cc8 <__aeabi_fmul+0x158>
 8000bba:	4642      	mov	r2, r8
 8000bbc:	00d0      	lsls	r0, r2, #3
 8000bbe:	2280      	movs	r2, #128	; 0x80
 8000bc0:	3b7f      	subs	r3, #127	; 0x7f
 8000bc2:	18ed      	adds	r5, r5, r3
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	04d2      	lsls	r2, r2, #19
 8000bc8:	4302      	orrs	r2, r0
 8000bca:	4690      	mov	r8, r2
 8000bcc:	469c      	mov	ip, r3
 8000bce:	0031      	movs	r1, r6
 8000bd0:	464b      	mov	r3, r9
 8000bd2:	4079      	eors	r1, r7
 8000bd4:	1c68      	adds	r0, r5, #1
 8000bd6:	2b0f      	cmp	r3, #15
 8000bd8:	d81c      	bhi.n	8000c14 <__aeabi_fmul+0xa4>
 8000bda:	4a76      	ldr	r2, [pc, #472]	; (8000db4 <__aeabi_fmul+0x244>)
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	58d3      	ldr	r3, [r2, r3]
 8000be0:	469f      	mov	pc, r3
 8000be2:	0039      	movs	r1, r7
 8000be4:	4644      	mov	r4, r8
 8000be6:	46e2      	mov	sl, ip
 8000be8:	4653      	mov	r3, sl
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d00f      	beq.n	8000c0e <__aeabi_fmul+0x9e>
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fmul+0x84>
 8000bf2:	e0d7      	b.n	8000da4 <__aeabi_fmul+0x234>
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d137      	bne.n	8000c68 <__aeabi_fmul+0xf8>
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	2400      	movs	r4, #0
 8000bfc:	05c0      	lsls	r0, r0, #23
 8000bfe:	4320      	orrs	r0, r4
 8000c00:	07c9      	lsls	r1, r1, #31
 8000c02:	4308      	orrs	r0, r1
 8000c04:	bce0      	pop	{r5, r6, r7}
 8000c06:	46ba      	mov	sl, r7
 8000c08:	46b1      	mov	r9, r6
 8000c0a:	46a8      	mov	r8, r5
 8000c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c0e:	20ff      	movs	r0, #255	; 0xff
 8000c10:	2400      	movs	r4, #0
 8000c12:	e7f3      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000c14:	0c26      	lsrs	r6, r4, #16
 8000c16:	0424      	lsls	r4, r4, #16
 8000c18:	0c22      	lsrs	r2, r4, #16
 8000c1a:	4644      	mov	r4, r8
 8000c1c:	0424      	lsls	r4, r4, #16
 8000c1e:	0c24      	lsrs	r4, r4, #16
 8000c20:	4643      	mov	r3, r8
 8000c22:	0027      	movs	r7, r4
 8000c24:	0c1b      	lsrs	r3, r3, #16
 8000c26:	4357      	muls	r7, r2
 8000c28:	4374      	muls	r4, r6
 8000c2a:	435a      	muls	r2, r3
 8000c2c:	435e      	muls	r6, r3
 8000c2e:	1912      	adds	r2, r2, r4
 8000c30:	0c3b      	lsrs	r3, r7, #16
 8000c32:	189b      	adds	r3, r3, r2
 8000c34:	429c      	cmp	r4, r3
 8000c36:	d903      	bls.n	8000c40 <__aeabi_fmul+0xd0>
 8000c38:	2280      	movs	r2, #128	; 0x80
 8000c3a:	0252      	lsls	r2, r2, #9
 8000c3c:	4694      	mov	ip, r2
 8000c3e:	4466      	add	r6, ip
 8000c40:	043f      	lsls	r7, r7, #16
 8000c42:	041a      	lsls	r2, r3, #16
 8000c44:	0c3f      	lsrs	r7, r7, #16
 8000c46:	19d2      	adds	r2, r2, r7
 8000c48:	0194      	lsls	r4, r2, #6
 8000c4a:	1e67      	subs	r7, r4, #1
 8000c4c:	41bc      	sbcs	r4, r7
 8000c4e:	0c1b      	lsrs	r3, r3, #16
 8000c50:	0e92      	lsrs	r2, r2, #26
 8000c52:	199b      	adds	r3, r3, r6
 8000c54:	4314      	orrs	r4, r2
 8000c56:	019b      	lsls	r3, r3, #6
 8000c58:	431c      	orrs	r4, r3
 8000c5a:	011b      	lsls	r3, r3, #4
 8000c5c:	d400      	bmi.n	8000c60 <__aeabi_fmul+0xf0>
 8000c5e:	e09b      	b.n	8000d98 <__aeabi_fmul+0x228>
 8000c60:	2301      	movs	r3, #1
 8000c62:	0862      	lsrs	r2, r4, #1
 8000c64:	401c      	ands	r4, r3
 8000c66:	4314      	orrs	r4, r2
 8000c68:	0002      	movs	r2, r0
 8000c6a:	327f      	adds	r2, #127	; 0x7f
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	dd64      	ble.n	8000d3a <__aeabi_fmul+0x1ca>
 8000c70:	0763      	lsls	r3, r4, #29
 8000c72:	d004      	beq.n	8000c7e <__aeabi_fmul+0x10e>
 8000c74:	230f      	movs	r3, #15
 8000c76:	4023      	ands	r3, r4
 8000c78:	2b04      	cmp	r3, #4
 8000c7a:	d000      	beq.n	8000c7e <__aeabi_fmul+0x10e>
 8000c7c:	3404      	adds	r4, #4
 8000c7e:	0123      	lsls	r3, r4, #4
 8000c80:	d503      	bpl.n	8000c8a <__aeabi_fmul+0x11a>
 8000c82:	0002      	movs	r2, r0
 8000c84:	4b4c      	ldr	r3, [pc, #304]	; (8000db8 <__aeabi_fmul+0x248>)
 8000c86:	3280      	adds	r2, #128	; 0x80
 8000c88:	401c      	ands	r4, r3
 8000c8a:	2afe      	cmp	r2, #254	; 0xfe
 8000c8c:	dcbf      	bgt.n	8000c0e <__aeabi_fmul+0x9e>
 8000c8e:	01a4      	lsls	r4, r4, #6
 8000c90:	0a64      	lsrs	r4, r4, #9
 8000c92:	b2d0      	uxtb	r0, r2
 8000c94:	e7b2      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000c96:	4643      	mov	r3, r8
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d13d      	bne.n	8000d18 <__aeabi_fmul+0x1a8>
 8000c9c:	464a      	mov	r2, r9
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	4691      	mov	r9, r2
 8000ca4:	469c      	mov	ip, r3
 8000ca6:	e792      	b.n	8000bce <__aeabi_fmul+0x5e>
 8000ca8:	2c00      	cmp	r4, #0
 8000caa:	d129      	bne.n	8000d00 <__aeabi_fmul+0x190>
 8000cac:	2304      	movs	r3, #4
 8000cae:	4699      	mov	r9, r3
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	2500      	movs	r5, #0
 8000cb4:	469a      	mov	sl, r3
 8000cb6:	e774      	b.n	8000ba2 <__aeabi_fmul+0x32>
 8000cb8:	2c00      	cmp	r4, #0
 8000cba:	d11b      	bne.n	8000cf4 <__aeabi_fmul+0x184>
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	4699      	mov	r9, r3
 8000cc0:	3b06      	subs	r3, #6
 8000cc2:	25ff      	movs	r5, #255	; 0xff
 8000cc4:	469a      	mov	sl, r3
 8000cc6:	e76c      	b.n	8000ba2 <__aeabi_fmul+0x32>
 8000cc8:	4643      	mov	r3, r8
 8000cca:	35ff      	adds	r5, #255	; 0xff
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d10b      	bne.n	8000ce8 <__aeabi_fmul+0x178>
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	464a      	mov	r2, r9
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	4691      	mov	r9, r2
 8000cd8:	469c      	mov	ip, r3
 8000cda:	e778      	b.n	8000bce <__aeabi_fmul+0x5e>
 8000cdc:	4653      	mov	r3, sl
 8000cde:	0031      	movs	r1, r6
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d000      	beq.n	8000ce6 <__aeabi_fmul+0x176>
 8000ce4:	e783      	b.n	8000bee <__aeabi_fmul+0x7e>
 8000ce6:	e792      	b.n	8000c0e <__aeabi_fmul+0x9e>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	464a      	mov	r2, r9
 8000cec:	431a      	orrs	r2, r3
 8000cee:	4691      	mov	r9, r2
 8000cf0:	469c      	mov	ip, r3
 8000cf2:	e76c      	b.n	8000bce <__aeabi_fmul+0x5e>
 8000cf4:	230c      	movs	r3, #12
 8000cf6:	4699      	mov	r9, r3
 8000cf8:	3b09      	subs	r3, #9
 8000cfa:	25ff      	movs	r5, #255	; 0xff
 8000cfc:	469a      	mov	sl, r3
 8000cfe:	e750      	b.n	8000ba2 <__aeabi_fmul+0x32>
 8000d00:	0020      	movs	r0, r4
 8000d02:	f000 facf 	bl	80012a4 <__clzsi2>
 8000d06:	2576      	movs	r5, #118	; 0x76
 8000d08:	1f43      	subs	r3, r0, #5
 8000d0a:	409c      	lsls	r4, r3
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	426d      	negs	r5, r5
 8000d10:	4699      	mov	r9, r3
 8000d12:	469a      	mov	sl, r3
 8000d14:	1a2d      	subs	r5, r5, r0
 8000d16:	e744      	b.n	8000ba2 <__aeabi_fmul+0x32>
 8000d18:	4640      	mov	r0, r8
 8000d1a:	f000 fac3 	bl	80012a4 <__clzsi2>
 8000d1e:	4642      	mov	r2, r8
 8000d20:	1f43      	subs	r3, r0, #5
 8000d22:	409a      	lsls	r2, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	1a2d      	subs	r5, r5, r0
 8000d28:	4690      	mov	r8, r2
 8000d2a:	469c      	mov	ip, r3
 8000d2c:	3d76      	subs	r5, #118	; 0x76
 8000d2e:	e74e      	b.n	8000bce <__aeabi_fmul+0x5e>
 8000d30:	2480      	movs	r4, #128	; 0x80
 8000d32:	2100      	movs	r1, #0
 8000d34:	20ff      	movs	r0, #255	; 0xff
 8000d36:	03e4      	lsls	r4, r4, #15
 8000d38:	e760      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	1a9b      	subs	r3, r3, r2
 8000d3e:	2b1b      	cmp	r3, #27
 8000d40:	dd00      	ble.n	8000d44 <__aeabi_fmul+0x1d4>
 8000d42:	e759      	b.n	8000bf8 <__aeabi_fmul+0x88>
 8000d44:	0022      	movs	r2, r4
 8000d46:	309e      	adds	r0, #158	; 0x9e
 8000d48:	40da      	lsrs	r2, r3
 8000d4a:	4084      	lsls	r4, r0
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	1e62      	subs	r2, r4, #1
 8000d50:	4194      	sbcs	r4, r2
 8000d52:	431c      	orrs	r4, r3
 8000d54:	0763      	lsls	r3, r4, #29
 8000d56:	d004      	beq.n	8000d62 <__aeabi_fmul+0x1f2>
 8000d58:	230f      	movs	r3, #15
 8000d5a:	4023      	ands	r3, r4
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	d000      	beq.n	8000d62 <__aeabi_fmul+0x1f2>
 8000d60:	3404      	adds	r4, #4
 8000d62:	0163      	lsls	r3, r4, #5
 8000d64:	d51a      	bpl.n	8000d9c <__aeabi_fmul+0x22c>
 8000d66:	2001      	movs	r0, #1
 8000d68:	2400      	movs	r4, #0
 8000d6a:	e747      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000d6c:	2080      	movs	r0, #128	; 0x80
 8000d6e:	03c0      	lsls	r0, r0, #15
 8000d70:	4204      	tst	r4, r0
 8000d72:	d009      	beq.n	8000d88 <__aeabi_fmul+0x218>
 8000d74:	4643      	mov	r3, r8
 8000d76:	4203      	tst	r3, r0
 8000d78:	d106      	bne.n	8000d88 <__aeabi_fmul+0x218>
 8000d7a:	4644      	mov	r4, r8
 8000d7c:	4304      	orrs	r4, r0
 8000d7e:	0264      	lsls	r4, r4, #9
 8000d80:	0039      	movs	r1, r7
 8000d82:	20ff      	movs	r0, #255	; 0xff
 8000d84:	0a64      	lsrs	r4, r4, #9
 8000d86:	e739      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000d88:	2080      	movs	r0, #128	; 0x80
 8000d8a:	03c0      	lsls	r0, r0, #15
 8000d8c:	4304      	orrs	r4, r0
 8000d8e:	0264      	lsls	r4, r4, #9
 8000d90:	0031      	movs	r1, r6
 8000d92:	20ff      	movs	r0, #255	; 0xff
 8000d94:	0a64      	lsrs	r4, r4, #9
 8000d96:	e731      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000d98:	0028      	movs	r0, r5
 8000d9a:	e765      	b.n	8000c68 <__aeabi_fmul+0xf8>
 8000d9c:	01a4      	lsls	r4, r4, #6
 8000d9e:	2000      	movs	r0, #0
 8000da0:	0a64      	lsrs	r4, r4, #9
 8000da2:	e72b      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000da4:	2080      	movs	r0, #128	; 0x80
 8000da6:	03c0      	lsls	r0, r0, #15
 8000da8:	4304      	orrs	r4, r0
 8000daa:	0264      	lsls	r4, r4, #9
 8000dac:	20ff      	movs	r0, #255	; 0xff
 8000dae:	0a64      	lsrs	r4, r4, #9
 8000db0:	e724      	b.n	8000bfc <__aeabi_fmul+0x8c>
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	08006528 	.word	0x08006528
 8000db8:	f7ffffff 	.word	0xf7ffffff

08000dbc <__aeabi_fsub>:
 8000dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dbe:	46ce      	mov	lr, r9
 8000dc0:	4647      	mov	r7, r8
 8000dc2:	0243      	lsls	r3, r0, #9
 8000dc4:	0a5b      	lsrs	r3, r3, #9
 8000dc6:	024e      	lsls	r6, r1, #9
 8000dc8:	00da      	lsls	r2, r3, #3
 8000dca:	4694      	mov	ip, r2
 8000dcc:	0a72      	lsrs	r2, r6, #9
 8000dce:	4691      	mov	r9, r2
 8000dd0:	0045      	lsls	r5, r0, #1
 8000dd2:	004a      	lsls	r2, r1, #1
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	0e2d      	lsrs	r5, r5, #24
 8000dd8:	001f      	movs	r7, r3
 8000dda:	0fc4      	lsrs	r4, r0, #31
 8000ddc:	0e12      	lsrs	r2, r2, #24
 8000dde:	0fc9      	lsrs	r1, r1, #31
 8000de0:	09b6      	lsrs	r6, r6, #6
 8000de2:	2aff      	cmp	r2, #255	; 0xff
 8000de4:	d05b      	beq.n	8000e9e <__aeabi_fsub+0xe2>
 8000de6:	2001      	movs	r0, #1
 8000de8:	4041      	eors	r1, r0
 8000dea:	428c      	cmp	r4, r1
 8000dec:	d039      	beq.n	8000e62 <__aeabi_fsub+0xa6>
 8000dee:	1aa8      	subs	r0, r5, r2
 8000df0:	2800      	cmp	r0, #0
 8000df2:	dd5a      	ble.n	8000eaa <__aeabi_fsub+0xee>
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	d06a      	beq.n	8000ece <__aeabi_fsub+0x112>
 8000df8:	2dff      	cmp	r5, #255	; 0xff
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_fsub+0x42>
 8000dfc:	e0d9      	b.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000dfe:	2280      	movs	r2, #128	; 0x80
 8000e00:	04d2      	lsls	r2, r2, #19
 8000e02:	4316      	orrs	r6, r2
 8000e04:	281b      	cmp	r0, #27
 8000e06:	dc00      	bgt.n	8000e0a <__aeabi_fsub+0x4e>
 8000e08:	e0e9      	b.n	8000fde <__aeabi_fsub+0x222>
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	4663      	mov	r3, ip
 8000e0e:	1a18      	subs	r0, r3, r0
 8000e10:	0143      	lsls	r3, r0, #5
 8000e12:	d400      	bmi.n	8000e16 <__aeabi_fsub+0x5a>
 8000e14:	e0b4      	b.n	8000f80 <__aeabi_fsub+0x1c4>
 8000e16:	0180      	lsls	r0, r0, #6
 8000e18:	0987      	lsrs	r7, r0, #6
 8000e1a:	0038      	movs	r0, r7
 8000e1c:	f000 fa42 	bl	80012a4 <__clzsi2>
 8000e20:	3805      	subs	r0, #5
 8000e22:	4087      	lsls	r7, r0
 8000e24:	4285      	cmp	r5, r0
 8000e26:	dc00      	bgt.n	8000e2a <__aeabi_fsub+0x6e>
 8000e28:	e0cc      	b.n	8000fc4 <__aeabi_fsub+0x208>
 8000e2a:	1a2d      	subs	r5, r5, r0
 8000e2c:	48b5      	ldr	r0, [pc, #724]	; (8001104 <__aeabi_fsub+0x348>)
 8000e2e:	4038      	ands	r0, r7
 8000e30:	0743      	lsls	r3, r0, #29
 8000e32:	d004      	beq.n	8000e3e <__aeabi_fsub+0x82>
 8000e34:	230f      	movs	r3, #15
 8000e36:	4003      	ands	r3, r0
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	d000      	beq.n	8000e3e <__aeabi_fsub+0x82>
 8000e3c:	3004      	adds	r0, #4
 8000e3e:	0143      	lsls	r3, r0, #5
 8000e40:	d400      	bmi.n	8000e44 <__aeabi_fsub+0x88>
 8000e42:	e0a0      	b.n	8000f86 <__aeabi_fsub+0x1ca>
 8000e44:	1c6a      	adds	r2, r5, #1
 8000e46:	2dfe      	cmp	r5, #254	; 0xfe
 8000e48:	d100      	bne.n	8000e4c <__aeabi_fsub+0x90>
 8000e4a:	e08d      	b.n	8000f68 <__aeabi_fsub+0x1ac>
 8000e4c:	0180      	lsls	r0, r0, #6
 8000e4e:	0a47      	lsrs	r7, r0, #9
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	05d0      	lsls	r0, r2, #23
 8000e54:	4338      	orrs	r0, r7
 8000e56:	07e4      	lsls	r4, r4, #31
 8000e58:	4320      	orrs	r0, r4
 8000e5a:	bcc0      	pop	{r6, r7}
 8000e5c:	46b9      	mov	r9, r7
 8000e5e:	46b0      	mov	r8, r6
 8000e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e62:	1aa8      	subs	r0, r5, r2
 8000e64:	4680      	mov	r8, r0
 8000e66:	2800      	cmp	r0, #0
 8000e68:	dd45      	ble.n	8000ef6 <__aeabi_fsub+0x13a>
 8000e6a:	2a00      	cmp	r2, #0
 8000e6c:	d070      	beq.n	8000f50 <__aeabi_fsub+0x194>
 8000e6e:	2dff      	cmp	r5, #255	; 0xff
 8000e70:	d100      	bne.n	8000e74 <__aeabi_fsub+0xb8>
 8000e72:	e09e      	b.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	04db      	lsls	r3, r3, #19
 8000e78:	431e      	orrs	r6, r3
 8000e7a:	4643      	mov	r3, r8
 8000e7c:	2b1b      	cmp	r3, #27
 8000e7e:	dc00      	bgt.n	8000e82 <__aeabi_fsub+0xc6>
 8000e80:	e0d2      	b.n	8001028 <__aeabi_fsub+0x26c>
 8000e82:	2001      	movs	r0, #1
 8000e84:	4460      	add	r0, ip
 8000e86:	0143      	lsls	r3, r0, #5
 8000e88:	d57a      	bpl.n	8000f80 <__aeabi_fsub+0x1c4>
 8000e8a:	3501      	adds	r5, #1
 8000e8c:	2dff      	cmp	r5, #255	; 0xff
 8000e8e:	d06b      	beq.n	8000f68 <__aeabi_fsub+0x1ac>
 8000e90:	2301      	movs	r3, #1
 8000e92:	4a9d      	ldr	r2, [pc, #628]	; (8001108 <__aeabi_fsub+0x34c>)
 8000e94:	4003      	ands	r3, r0
 8000e96:	0840      	lsrs	r0, r0, #1
 8000e98:	4010      	ands	r0, r2
 8000e9a:	4318      	orrs	r0, r3
 8000e9c:	e7c8      	b.n	8000e30 <__aeabi_fsub+0x74>
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d020      	beq.n	8000ee4 <__aeabi_fsub+0x128>
 8000ea2:	428c      	cmp	r4, r1
 8000ea4:	d023      	beq.n	8000eee <__aeabi_fsub+0x132>
 8000ea6:	0028      	movs	r0, r5
 8000ea8:	38ff      	subs	r0, #255	; 0xff
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	d039      	beq.n	8000f22 <__aeabi_fsub+0x166>
 8000eae:	1b57      	subs	r7, r2, r5
 8000eb0:	2d00      	cmp	r5, #0
 8000eb2:	d000      	beq.n	8000eb6 <__aeabi_fsub+0xfa>
 8000eb4:	e09d      	b.n	8000ff2 <__aeabi_fsub+0x236>
 8000eb6:	4663      	mov	r3, ip
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d100      	bne.n	8000ebe <__aeabi_fsub+0x102>
 8000ebc:	e0db      	b.n	8001076 <__aeabi_fsub+0x2ba>
 8000ebe:	1e7b      	subs	r3, r7, #1
 8000ec0:	2f01      	cmp	r7, #1
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_fsub+0x10a>
 8000ec4:	e10d      	b.n	80010e2 <__aeabi_fsub+0x326>
 8000ec6:	2fff      	cmp	r7, #255	; 0xff
 8000ec8:	d071      	beq.n	8000fae <__aeabi_fsub+0x1f2>
 8000eca:	001f      	movs	r7, r3
 8000ecc:	e098      	b.n	8001000 <__aeabi_fsub+0x244>
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_fsub+0x118>
 8000ed2:	e0a7      	b.n	8001024 <__aeabi_fsub+0x268>
 8000ed4:	1e42      	subs	r2, r0, #1
 8000ed6:	2801      	cmp	r0, #1
 8000ed8:	d100      	bne.n	8000edc <__aeabi_fsub+0x120>
 8000eda:	e0e6      	b.n	80010aa <__aeabi_fsub+0x2ee>
 8000edc:	28ff      	cmp	r0, #255	; 0xff
 8000ede:	d068      	beq.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000ee0:	0010      	movs	r0, r2
 8000ee2:	e78f      	b.n	8000e04 <__aeabi_fsub+0x48>
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	4041      	eors	r1, r0
 8000ee8:	42a1      	cmp	r1, r4
 8000eea:	d000      	beq.n	8000eee <__aeabi_fsub+0x132>
 8000eec:	e77f      	b.n	8000dee <__aeabi_fsub+0x32>
 8000eee:	20ff      	movs	r0, #255	; 0xff
 8000ef0:	4240      	negs	r0, r0
 8000ef2:	4680      	mov	r8, r0
 8000ef4:	44a8      	add	r8, r5
 8000ef6:	4640      	mov	r0, r8
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	d038      	beq.n	8000f6e <__aeabi_fsub+0x1b2>
 8000efc:	1b51      	subs	r1, r2, r5
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	d100      	bne.n	8000f04 <__aeabi_fsub+0x148>
 8000f02:	e0ae      	b.n	8001062 <__aeabi_fsub+0x2a6>
 8000f04:	2aff      	cmp	r2, #255	; 0xff
 8000f06:	d100      	bne.n	8000f0a <__aeabi_fsub+0x14e>
 8000f08:	e0df      	b.n	80010ca <__aeabi_fsub+0x30e>
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	4660      	mov	r0, ip
 8000f0e:	04db      	lsls	r3, r3, #19
 8000f10:	4318      	orrs	r0, r3
 8000f12:	4684      	mov	ip, r0
 8000f14:	291b      	cmp	r1, #27
 8000f16:	dc00      	bgt.n	8000f1a <__aeabi_fsub+0x15e>
 8000f18:	e0d9      	b.n	80010ce <__aeabi_fsub+0x312>
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	0015      	movs	r5, r2
 8000f1e:	1980      	adds	r0, r0, r6
 8000f20:	e7b1      	b.n	8000e86 <__aeabi_fsub+0xca>
 8000f22:	20fe      	movs	r0, #254	; 0xfe
 8000f24:	1c6a      	adds	r2, r5, #1
 8000f26:	4210      	tst	r0, r2
 8000f28:	d171      	bne.n	800100e <__aeabi_fsub+0x252>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d000      	beq.n	8000f30 <__aeabi_fsub+0x174>
 8000f2e:	e0a6      	b.n	800107e <__aeabi_fsub+0x2c2>
 8000f30:	4663      	mov	r3, ip
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d100      	bne.n	8000f38 <__aeabi_fsub+0x17c>
 8000f36:	e0d9      	b.n	80010ec <__aeabi_fsub+0x330>
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2e00      	cmp	r6, #0
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_fsub+0x184>
 8000f3e:	e788      	b.n	8000e52 <__aeabi_fsub+0x96>
 8000f40:	1b98      	subs	r0, r3, r6
 8000f42:	0143      	lsls	r3, r0, #5
 8000f44:	d400      	bmi.n	8000f48 <__aeabi_fsub+0x18c>
 8000f46:	e0e1      	b.n	800110c <__aeabi_fsub+0x350>
 8000f48:	4663      	mov	r3, ip
 8000f4a:	000c      	movs	r4, r1
 8000f4c:	1af0      	subs	r0, r6, r3
 8000f4e:	e76f      	b.n	8000e30 <__aeabi_fsub+0x74>
 8000f50:	2e00      	cmp	r6, #0
 8000f52:	d100      	bne.n	8000f56 <__aeabi_fsub+0x19a>
 8000f54:	e0b7      	b.n	80010c6 <__aeabi_fsub+0x30a>
 8000f56:	0002      	movs	r2, r0
 8000f58:	3a01      	subs	r2, #1
 8000f5a:	2801      	cmp	r0, #1
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_fsub+0x1a4>
 8000f5e:	e09c      	b.n	800109a <__aeabi_fsub+0x2de>
 8000f60:	28ff      	cmp	r0, #255	; 0xff
 8000f62:	d026      	beq.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000f64:	4690      	mov	r8, r2
 8000f66:	e788      	b.n	8000e7a <__aeabi_fsub+0xbe>
 8000f68:	22ff      	movs	r2, #255	; 0xff
 8000f6a:	2700      	movs	r7, #0
 8000f6c:	e771      	b.n	8000e52 <__aeabi_fsub+0x96>
 8000f6e:	20fe      	movs	r0, #254	; 0xfe
 8000f70:	1c6a      	adds	r2, r5, #1
 8000f72:	4210      	tst	r0, r2
 8000f74:	d064      	beq.n	8001040 <__aeabi_fsub+0x284>
 8000f76:	2aff      	cmp	r2, #255	; 0xff
 8000f78:	d0f6      	beq.n	8000f68 <__aeabi_fsub+0x1ac>
 8000f7a:	0015      	movs	r5, r2
 8000f7c:	4466      	add	r6, ip
 8000f7e:	0870      	lsrs	r0, r6, #1
 8000f80:	0743      	lsls	r3, r0, #29
 8000f82:	d000      	beq.n	8000f86 <__aeabi_fsub+0x1ca>
 8000f84:	e756      	b.n	8000e34 <__aeabi_fsub+0x78>
 8000f86:	08c3      	lsrs	r3, r0, #3
 8000f88:	2dff      	cmp	r5, #255	; 0xff
 8000f8a:	d012      	beq.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000f8c:	025b      	lsls	r3, r3, #9
 8000f8e:	0a5f      	lsrs	r7, r3, #9
 8000f90:	b2ea      	uxtb	r2, r5
 8000f92:	e75e      	b.n	8000e52 <__aeabi_fsub+0x96>
 8000f94:	4662      	mov	r2, ip
 8000f96:	2a00      	cmp	r2, #0
 8000f98:	d100      	bne.n	8000f9c <__aeabi_fsub+0x1e0>
 8000f9a:	e096      	b.n	80010ca <__aeabi_fsub+0x30e>
 8000f9c:	2e00      	cmp	r6, #0
 8000f9e:	d008      	beq.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	03d2      	lsls	r2, r2, #15
 8000fa4:	4213      	tst	r3, r2
 8000fa6:	d004      	beq.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000fa8:	4648      	mov	r0, r9
 8000faa:	4210      	tst	r0, r2
 8000fac:	d101      	bne.n	8000fb2 <__aeabi_fsub+0x1f6>
 8000fae:	000c      	movs	r4, r1
 8000fb0:	464b      	mov	r3, r9
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0d8      	beq.n	8000f68 <__aeabi_fsub+0x1ac>
 8000fb6:	2780      	movs	r7, #128	; 0x80
 8000fb8:	03ff      	lsls	r7, r7, #15
 8000fba:	431f      	orrs	r7, r3
 8000fbc:	027f      	lsls	r7, r7, #9
 8000fbe:	22ff      	movs	r2, #255	; 0xff
 8000fc0:	0a7f      	lsrs	r7, r7, #9
 8000fc2:	e746      	b.n	8000e52 <__aeabi_fsub+0x96>
 8000fc4:	2320      	movs	r3, #32
 8000fc6:	003a      	movs	r2, r7
 8000fc8:	1b45      	subs	r5, r0, r5
 8000fca:	0038      	movs	r0, r7
 8000fcc:	3501      	adds	r5, #1
 8000fce:	40ea      	lsrs	r2, r5
 8000fd0:	1b5d      	subs	r5, r3, r5
 8000fd2:	40a8      	lsls	r0, r5
 8000fd4:	1e43      	subs	r3, r0, #1
 8000fd6:	4198      	sbcs	r0, r3
 8000fd8:	2500      	movs	r5, #0
 8000fda:	4310      	orrs	r0, r2
 8000fdc:	e728      	b.n	8000e30 <__aeabi_fsub+0x74>
 8000fde:	2320      	movs	r3, #32
 8000fe0:	1a1b      	subs	r3, r3, r0
 8000fe2:	0032      	movs	r2, r6
 8000fe4:	409e      	lsls	r6, r3
 8000fe6:	40c2      	lsrs	r2, r0
 8000fe8:	0030      	movs	r0, r6
 8000fea:	1e43      	subs	r3, r0, #1
 8000fec:	4198      	sbcs	r0, r3
 8000fee:	4310      	orrs	r0, r2
 8000ff0:	e70c      	b.n	8000e0c <__aeabi_fsub+0x50>
 8000ff2:	2aff      	cmp	r2, #255	; 0xff
 8000ff4:	d0db      	beq.n	8000fae <__aeabi_fsub+0x1f2>
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	04db      	lsls	r3, r3, #19
 8000ffc:	4318      	orrs	r0, r3
 8000ffe:	4684      	mov	ip, r0
 8001000:	2f1b      	cmp	r7, #27
 8001002:	dd56      	ble.n	80010b2 <__aeabi_fsub+0x2f6>
 8001004:	2001      	movs	r0, #1
 8001006:	000c      	movs	r4, r1
 8001008:	0015      	movs	r5, r2
 800100a:	1a30      	subs	r0, r6, r0
 800100c:	e700      	b.n	8000e10 <__aeabi_fsub+0x54>
 800100e:	4663      	mov	r3, ip
 8001010:	1b9f      	subs	r7, r3, r6
 8001012:	017b      	lsls	r3, r7, #5
 8001014:	d43d      	bmi.n	8001092 <__aeabi_fsub+0x2d6>
 8001016:	2f00      	cmp	r7, #0
 8001018:	d000      	beq.n	800101c <__aeabi_fsub+0x260>
 800101a:	e6fe      	b.n	8000e1a <__aeabi_fsub+0x5e>
 800101c:	2400      	movs	r4, #0
 800101e:	2200      	movs	r2, #0
 8001020:	2700      	movs	r7, #0
 8001022:	e716      	b.n	8000e52 <__aeabi_fsub+0x96>
 8001024:	0005      	movs	r5, r0
 8001026:	e7af      	b.n	8000f88 <__aeabi_fsub+0x1cc>
 8001028:	0032      	movs	r2, r6
 800102a:	4643      	mov	r3, r8
 800102c:	4641      	mov	r1, r8
 800102e:	40da      	lsrs	r2, r3
 8001030:	2320      	movs	r3, #32
 8001032:	1a5b      	subs	r3, r3, r1
 8001034:	409e      	lsls	r6, r3
 8001036:	0030      	movs	r0, r6
 8001038:	1e43      	subs	r3, r0, #1
 800103a:	4198      	sbcs	r0, r3
 800103c:	4310      	orrs	r0, r2
 800103e:	e721      	b.n	8000e84 <__aeabi_fsub+0xc8>
 8001040:	2d00      	cmp	r5, #0
 8001042:	d1a7      	bne.n	8000f94 <__aeabi_fsub+0x1d8>
 8001044:	4663      	mov	r3, ip
 8001046:	2b00      	cmp	r3, #0
 8001048:	d059      	beq.n	80010fe <__aeabi_fsub+0x342>
 800104a:	2200      	movs	r2, #0
 800104c:	2e00      	cmp	r6, #0
 800104e:	d100      	bne.n	8001052 <__aeabi_fsub+0x296>
 8001050:	e6ff      	b.n	8000e52 <__aeabi_fsub+0x96>
 8001052:	0030      	movs	r0, r6
 8001054:	4460      	add	r0, ip
 8001056:	0143      	lsls	r3, r0, #5
 8001058:	d592      	bpl.n	8000f80 <__aeabi_fsub+0x1c4>
 800105a:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <__aeabi_fsub+0x348>)
 800105c:	3501      	adds	r5, #1
 800105e:	4018      	ands	r0, r3
 8001060:	e78e      	b.n	8000f80 <__aeabi_fsub+0x1c4>
 8001062:	4663      	mov	r3, ip
 8001064:	2b00      	cmp	r3, #0
 8001066:	d047      	beq.n	80010f8 <__aeabi_fsub+0x33c>
 8001068:	1e4b      	subs	r3, r1, #1
 800106a:	2901      	cmp	r1, #1
 800106c:	d015      	beq.n	800109a <__aeabi_fsub+0x2de>
 800106e:	29ff      	cmp	r1, #255	; 0xff
 8001070:	d02b      	beq.n	80010ca <__aeabi_fsub+0x30e>
 8001072:	0019      	movs	r1, r3
 8001074:	e74e      	b.n	8000f14 <__aeabi_fsub+0x158>
 8001076:	000c      	movs	r4, r1
 8001078:	464b      	mov	r3, r9
 800107a:	003d      	movs	r5, r7
 800107c:	e784      	b.n	8000f88 <__aeabi_fsub+0x1cc>
 800107e:	4662      	mov	r2, ip
 8001080:	2a00      	cmp	r2, #0
 8001082:	d18b      	bne.n	8000f9c <__aeabi_fsub+0x1e0>
 8001084:	2e00      	cmp	r6, #0
 8001086:	d192      	bne.n	8000fae <__aeabi_fsub+0x1f2>
 8001088:	2780      	movs	r7, #128	; 0x80
 800108a:	2400      	movs	r4, #0
 800108c:	22ff      	movs	r2, #255	; 0xff
 800108e:	03ff      	lsls	r7, r7, #15
 8001090:	e6df      	b.n	8000e52 <__aeabi_fsub+0x96>
 8001092:	4663      	mov	r3, ip
 8001094:	000c      	movs	r4, r1
 8001096:	1af7      	subs	r7, r6, r3
 8001098:	e6bf      	b.n	8000e1a <__aeabi_fsub+0x5e>
 800109a:	0030      	movs	r0, r6
 800109c:	4460      	add	r0, ip
 800109e:	2501      	movs	r5, #1
 80010a0:	0143      	lsls	r3, r0, #5
 80010a2:	d400      	bmi.n	80010a6 <__aeabi_fsub+0x2ea>
 80010a4:	e76c      	b.n	8000f80 <__aeabi_fsub+0x1c4>
 80010a6:	2502      	movs	r5, #2
 80010a8:	e6f2      	b.n	8000e90 <__aeabi_fsub+0xd4>
 80010aa:	4663      	mov	r3, ip
 80010ac:	2501      	movs	r5, #1
 80010ae:	1b98      	subs	r0, r3, r6
 80010b0:	e6ae      	b.n	8000e10 <__aeabi_fsub+0x54>
 80010b2:	2320      	movs	r3, #32
 80010b4:	4664      	mov	r4, ip
 80010b6:	4660      	mov	r0, ip
 80010b8:	40fc      	lsrs	r4, r7
 80010ba:	1bdf      	subs	r7, r3, r7
 80010bc:	40b8      	lsls	r0, r7
 80010be:	1e43      	subs	r3, r0, #1
 80010c0:	4198      	sbcs	r0, r3
 80010c2:	4320      	orrs	r0, r4
 80010c4:	e79f      	b.n	8001006 <__aeabi_fsub+0x24a>
 80010c6:	0005      	movs	r5, r0
 80010c8:	e75e      	b.n	8000f88 <__aeabi_fsub+0x1cc>
 80010ca:	464b      	mov	r3, r9
 80010cc:	e771      	b.n	8000fb2 <__aeabi_fsub+0x1f6>
 80010ce:	2320      	movs	r3, #32
 80010d0:	4665      	mov	r5, ip
 80010d2:	4660      	mov	r0, ip
 80010d4:	40cd      	lsrs	r5, r1
 80010d6:	1a59      	subs	r1, r3, r1
 80010d8:	4088      	lsls	r0, r1
 80010da:	1e43      	subs	r3, r0, #1
 80010dc:	4198      	sbcs	r0, r3
 80010de:	4328      	orrs	r0, r5
 80010e0:	e71c      	b.n	8000f1c <__aeabi_fsub+0x160>
 80010e2:	4663      	mov	r3, ip
 80010e4:	000c      	movs	r4, r1
 80010e6:	2501      	movs	r5, #1
 80010e8:	1af0      	subs	r0, r6, r3
 80010ea:	e691      	b.n	8000e10 <__aeabi_fsub+0x54>
 80010ec:	2e00      	cmp	r6, #0
 80010ee:	d095      	beq.n	800101c <__aeabi_fsub+0x260>
 80010f0:	000c      	movs	r4, r1
 80010f2:	464f      	mov	r7, r9
 80010f4:	2200      	movs	r2, #0
 80010f6:	e6ac      	b.n	8000e52 <__aeabi_fsub+0x96>
 80010f8:	464b      	mov	r3, r9
 80010fa:	000d      	movs	r5, r1
 80010fc:	e744      	b.n	8000f88 <__aeabi_fsub+0x1cc>
 80010fe:	464f      	mov	r7, r9
 8001100:	2200      	movs	r2, #0
 8001102:	e6a6      	b.n	8000e52 <__aeabi_fsub+0x96>
 8001104:	fbffffff 	.word	0xfbffffff
 8001108:	7dffffff 	.word	0x7dffffff
 800110c:	2800      	cmp	r0, #0
 800110e:	d000      	beq.n	8001112 <__aeabi_fsub+0x356>
 8001110:	e736      	b.n	8000f80 <__aeabi_fsub+0x1c4>
 8001112:	2400      	movs	r4, #0
 8001114:	2700      	movs	r7, #0
 8001116:	e69c      	b.n	8000e52 <__aeabi_fsub+0x96>

08001118 <__aeabi_fcmpun>:
 8001118:	0243      	lsls	r3, r0, #9
 800111a:	024a      	lsls	r2, r1, #9
 800111c:	0040      	lsls	r0, r0, #1
 800111e:	0049      	lsls	r1, r1, #1
 8001120:	0a5b      	lsrs	r3, r3, #9
 8001122:	0a52      	lsrs	r2, r2, #9
 8001124:	0e09      	lsrs	r1, r1, #24
 8001126:	0e00      	lsrs	r0, r0, #24
 8001128:	28ff      	cmp	r0, #255	; 0xff
 800112a:	d006      	beq.n	800113a <__aeabi_fcmpun+0x22>
 800112c:	2000      	movs	r0, #0
 800112e:	29ff      	cmp	r1, #255	; 0xff
 8001130:	d102      	bne.n	8001138 <__aeabi_fcmpun+0x20>
 8001132:	1e53      	subs	r3, r2, #1
 8001134:	419a      	sbcs	r2, r3
 8001136:	0010      	movs	r0, r2
 8001138:	4770      	bx	lr
 800113a:	38fe      	subs	r0, #254	; 0xfe
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1fb      	bne.n	8001138 <__aeabi_fcmpun+0x20>
 8001140:	e7f4      	b.n	800112c <__aeabi_fcmpun+0x14>
 8001142:	46c0      	nop			; (mov r8, r8)

08001144 <__aeabi_f2iz>:
 8001144:	0241      	lsls	r1, r0, #9
 8001146:	0042      	lsls	r2, r0, #1
 8001148:	0fc3      	lsrs	r3, r0, #31
 800114a:	0a49      	lsrs	r1, r1, #9
 800114c:	2000      	movs	r0, #0
 800114e:	0e12      	lsrs	r2, r2, #24
 8001150:	2a7e      	cmp	r2, #126	; 0x7e
 8001152:	dd03      	ble.n	800115c <__aeabi_f2iz+0x18>
 8001154:	2a9d      	cmp	r2, #157	; 0x9d
 8001156:	dd02      	ble.n	800115e <__aeabi_f2iz+0x1a>
 8001158:	4a09      	ldr	r2, [pc, #36]	; (8001180 <__aeabi_f2iz+0x3c>)
 800115a:	1898      	adds	r0, r3, r2
 800115c:	4770      	bx	lr
 800115e:	2080      	movs	r0, #128	; 0x80
 8001160:	0400      	lsls	r0, r0, #16
 8001162:	4301      	orrs	r1, r0
 8001164:	2a95      	cmp	r2, #149	; 0x95
 8001166:	dc07      	bgt.n	8001178 <__aeabi_f2iz+0x34>
 8001168:	2096      	movs	r0, #150	; 0x96
 800116a:	1a82      	subs	r2, r0, r2
 800116c:	40d1      	lsrs	r1, r2
 800116e:	4248      	negs	r0, r1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1f3      	bne.n	800115c <__aeabi_f2iz+0x18>
 8001174:	0008      	movs	r0, r1
 8001176:	e7f1      	b.n	800115c <__aeabi_f2iz+0x18>
 8001178:	3a96      	subs	r2, #150	; 0x96
 800117a:	4091      	lsls	r1, r2
 800117c:	e7f7      	b.n	800116e <__aeabi_f2iz+0x2a>
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	7fffffff 	.word	0x7fffffff

08001184 <__aeabi_i2f>:
 8001184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001186:	2800      	cmp	r0, #0
 8001188:	d013      	beq.n	80011b2 <__aeabi_i2f+0x2e>
 800118a:	17c3      	asrs	r3, r0, #31
 800118c:	18c6      	adds	r6, r0, r3
 800118e:	405e      	eors	r6, r3
 8001190:	0fc4      	lsrs	r4, r0, #31
 8001192:	0030      	movs	r0, r6
 8001194:	f000 f886 	bl	80012a4 <__clzsi2>
 8001198:	239e      	movs	r3, #158	; 0x9e
 800119a:	0005      	movs	r5, r0
 800119c:	1a1b      	subs	r3, r3, r0
 800119e:	2b96      	cmp	r3, #150	; 0x96
 80011a0:	dc0f      	bgt.n	80011c2 <__aeabi_i2f+0x3e>
 80011a2:	2808      	cmp	r0, #8
 80011a4:	dd01      	ble.n	80011aa <__aeabi_i2f+0x26>
 80011a6:	3d08      	subs	r5, #8
 80011a8:	40ae      	lsls	r6, r5
 80011aa:	0276      	lsls	r6, r6, #9
 80011ac:	0a76      	lsrs	r6, r6, #9
 80011ae:	b2d8      	uxtb	r0, r3
 80011b0:	e002      	b.n	80011b8 <__aeabi_i2f+0x34>
 80011b2:	2400      	movs	r4, #0
 80011b4:	2000      	movs	r0, #0
 80011b6:	2600      	movs	r6, #0
 80011b8:	05c0      	lsls	r0, r0, #23
 80011ba:	4330      	orrs	r0, r6
 80011bc:	07e4      	lsls	r4, r4, #31
 80011be:	4320      	orrs	r0, r4
 80011c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011c2:	2b99      	cmp	r3, #153	; 0x99
 80011c4:	dd0c      	ble.n	80011e0 <__aeabi_i2f+0x5c>
 80011c6:	2205      	movs	r2, #5
 80011c8:	0031      	movs	r1, r6
 80011ca:	1a12      	subs	r2, r2, r0
 80011cc:	40d1      	lsrs	r1, r2
 80011ce:	000a      	movs	r2, r1
 80011d0:	0001      	movs	r1, r0
 80011d2:	0030      	movs	r0, r6
 80011d4:	311b      	adds	r1, #27
 80011d6:	4088      	lsls	r0, r1
 80011d8:	1e41      	subs	r1, r0, #1
 80011da:	4188      	sbcs	r0, r1
 80011dc:	4302      	orrs	r2, r0
 80011de:	0016      	movs	r6, r2
 80011e0:	2d05      	cmp	r5, #5
 80011e2:	dc12      	bgt.n	800120a <__aeabi_i2f+0x86>
 80011e4:	0031      	movs	r1, r6
 80011e6:	4f0d      	ldr	r7, [pc, #52]	; (800121c <__aeabi_i2f+0x98>)
 80011e8:	4039      	ands	r1, r7
 80011ea:	0772      	lsls	r2, r6, #29
 80011ec:	d009      	beq.n	8001202 <__aeabi_i2f+0x7e>
 80011ee:	200f      	movs	r0, #15
 80011f0:	4030      	ands	r0, r6
 80011f2:	2804      	cmp	r0, #4
 80011f4:	d005      	beq.n	8001202 <__aeabi_i2f+0x7e>
 80011f6:	3104      	adds	r1, #4
 80011f8:	014a      	lsls	r2, r1, #5
 80011fa:	d502      	bpl.n	8001202 <__aeabi_i2f+0x7e>
 80011fc:	239f      	movs	r3, #159	; 0x9f
 80011fe:	4039      	ands	r1, r7
 8001200:	1b5b      	subs	r3, r3, r5
 8001202:	0189      	lsls	r1, r1, #6
 8001204:	0a4e      	lsrs	r6, r1, #9
 8001206:	b2d8      	uxtb	r0, r3
 8001208:	e7d6      	b.n	80011b8 <__aeabi_i2f+0x34>
 800120a:	1f6a      	subs	r2, r5, #5
 800120c:	4096      	lsls	r6, r2
 800120e:	0031      	movs	r1, r6
 8001210:	4f02      	ldr	r7, [pc, #8]	; (800121c <__aeabi_i2f+0x98>)
 8001212:	4039      	ands	r1, r7
 8001214:	0772      	lsls	r2, r6, #29
 8001216:	d0f4      	beq.n	8001202 <__aeabi_i2f+0x7e>
 8001218:	e7e9      	b.n	80011ee <__aeabi_i2f+0x6a>
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	fbffffff 	.word	0xfbffffff

08001220 <__aeabi_ui2f>:
 8001220:	b570      	push	{r4, r5, r6, lr}
 8001222:	1e05      	subs	r5, r0, #0
 8001224:	d00e      	beq.n	8001244 <__aeabi_ui2f+0x24>
 8001226:	f000 f83d 	bl	80012a4 <__clzsi2>
 800122a:	239e      	movs	r3, #158	; 0x9e
 800122c:	0004      	movs	r4, r0
 800122e:	1a1b      	subs	r3, r3, r0
 8001230:	2b96      	cmp	r3, #150	; 0x96
 8001232:	dc0c      	bgt.n	800124e <__aeabi_ui2f+0x2e>
 8001234:	2808      	cmp	r0, #8
 8001236:	dd01      	ble.n	800123c <__aeabi_ui2f+0x1c>
 8001238:	3c08      	subs	r4, #8
 800123a:	40a5      	lsls	r5, r4
 800123c:	026d      	lsls	r5, r5, #9
 800123e:	0a6d      	lsrs	r5, r5, #9
 8001240:	b2d8      	uxtb	r0, r3
 8001242:	e001      	b.n	8001248 <__aeabi_ui2f+0x28>
 8001244:	2000      	movs	r0, #0
 8001246:	2500      	movs	r5, #0
 8001248:	05c0      	lsls	r0, r0, #23
 800124a:	4328      	orrs	r0, r5
 800124c:	bd70      	pop	{r4, r5, r6, pc}
 800124e:	2b99      	cmp	r3, #153	; 0x99
 8001250:	dd09      	ble.n	8001266 <__aeabi_ui2f+0x46>
 8001252:	0002      	movs	r2, r0
 8001254:	0029      	movs	r1, r5
 8001256:	321b      	adds	r2, #27
 8001258:	4091      	lsls	r1, r2
 800125a:	1e4a      	subs	r2, r1, #1
 800125c:	4191      	sbcs	r1, r2
 800125e:	2205      	movs	r2, #5
 8001260:	1a12      	subs	r2, r2, r0
 8001262:	40d5      	lsrs	r5, r2
 8001264:	430d      	orrs	r5, r1
 8001266:	2c05      	cmp	r4, #5
 8001268:	dc12      	bgt.n	8001290 <__aeabi_ui2f+0x70>
 800126a:	0029      	movs	r1, r5
 800126c:	4e0c      	ldr	r6, [pc, #48]	; (80012a0 <__aeabi_ui2f+0x80>)
 800126e:	4031      	ands	r1, r6
 8001270:	076a      	lsls	r2, r5, #29
 8001272:	d009      	beq.n	8001288 <__aeabi_ui2f+0x68>
 8001274:	200f      	movs	r0, #15
 8001276:	4028      	ands	r0, r5
 8001278:	2804      	cmp	r0, #4
 800127a:	d005      	beq.n	8001288 <__aeabi_ui2f+0x68>
 800127c:	3104      	adds	r1, #4
 800127e:	014a      	lsls	r2, r1, #5
 8001280:	d502      	bpl.n	8001288 <__aeabi_ui2f+0x68>
 8001282:	239f      	movs	r3, #159	; 0x9f
 8001284:	4031      	ands	r1, r6
 8001286:	1b1b      	subs	r3, r3, r4
 8001288:	0189      	lsls	r1, r1, #6
 800128a:	0a4d      	lsrs	r5, r1, #9
 800128c:	b2d8      	uxtb	r0, r3
 800128e:	e7db      	b.n	8001248 <__aeabi_ui2f+0x28>
 8001290:	1f62      	subs	r2, r4, #5
 8001292:	4095      	lsls	r5, r2
 8001294:	0029      	movs	r1, r5
 8001296:	4e02      	ldr	r6, [pc, #8]	; (80012a0 <__aeabi_ui2f+0x80>)
 8001298:	4031      	ands	r1, r6
 800129a:	076a      	lsls	r2, r5, #29
 800129c:	d0f4      	beq.n	8001288 <__aeabi_ui2f+0x68>
 800129e:	e7e9      	b.n	8001274 <__aeabi_ui2f+0x54>
 80012a0:	fbffffff 	.word	0xfbffffff

080012a4 <__clzsi2>:
 80012a4:	211c      	movs	r1, #28
 80012a6:	2301      	movs	r3, #1
 80012a8:	041b      	lsls	r3, r3, #16
 80012aa:	4298      	cmp	r0, r3
 80012ac:	d301      	bcc.n	80012b2 <__clzsi2+0xe>
 80012ae:	0c00      	lsrs	r0, r0, #16
 80012b0:	3910      	subs	r1, #16
 80012b2:	0a1b      	lsrs	r3, r3, #8
 80012b4:	4298      	cmp	r0, r3
 80012b6:	d301      	bcc.n	80012bc <__clzsi2+0x18>
 80012b8:	0a00      	lsrs	r0, r0, #8
 80012ba:	3908      	subs	r1, #8
 80012bc:	091b      	lsrs	r3, r3, #4
 80012be:	4298      	cmp	r0, r3
 80012c0:	d301      	bcc.n	80012c6 <__clzsi2+0x22>
 80012c2:	0900      	lsrs	r0, r0, #4
 80012c4:	3904      	subs	r1, #4
 80012c6:	a202      	add	r2, pc, #8	; (adr r2, 80012d0 <__clzsi2+0x2c>)
 80012c8:	5c10      	ldrb	r0, [r2, r0]
 80012ca:	1840      	adds	r0, r0, r1
 80012cc:	4770      	bx	lr
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	02020304 	.word	0x02020304
 80012d4:	01010101 	.word	0x01010101
	...

080012e0 <ad8363_get_dbm>:
 *      Author: sigmadev
 */

#include "ad8363.h"

uint8_t ad8363_get_dbm(AD8363_t *ad,uint16_t value) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	000a      	movs	r2, r1
 80012ea:	1cbb      	adds	r3, r7, #2
 80012ec:	801a      	strh	r2, [r3, #0]

	float m = (float) (AD8363_DBM_MAX - AD8363_DBM_MIN)
			/ (float) (ad->max - ad->min);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	001a      	movs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	885b      	ldrh	r3, [r3, #2]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	0018      	movs	r0, r3
 80012fc:	f7ff ff42 	bl	8001184 <__aeabi_i2f>
 8001300:	1c03      	adds	r3, r0, #0
	float m = (float) (AD8363_DBM_MAX - AD8363_DBM_MIN)
 8001302:	1c19      	adds	r1, r3, #0
 8001304:	481f      	ldr	r0, [pc, #124]	; (8001384 <ad8363_get_dbm+0xa4>)
 8001306:	f7ff fa6b 	bl	80007e0 <__aeabi_fdiv>
 800130a:	1c03      	adds	r3, r0, #0
 800130c:	60fb      	str	r3, [r7, #12]
	float b = AD8363_DBM_MAX -ad->max * m;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	0018      	movs	r0, r3
 8001314:	f7ff ff36 	bl	8001184 <__aeabi_i2f>
 8001318:	1c03      	adds	r3, r0, #0
 800131a:	68f9      	ldr	r1, [r7, #12]
 800131c:	1c18      	adds	r0, r3, #0
 800131e:	f7ff fc27 	bl	8000b70 <__aeabi_fmul>
 8001322:	1c03      	adds	r3, r0, #0
 8001324:	1c19      	adds	r1, r3, #0
 8001326:	2000      	movs	r0, #0
 8001328:	f7ff fd48 	bl	8000dbc <__aeabi_fsub>
 800132c:	1c03      	adds	r3, r0, #0
 800132e:	60bb      	str	r3, [r7, #8]

	if (value > ad->max) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	1cba      	adds	r2, r7, #2
 8001336:	8812      	ldrh	r2, [r2, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	d901      	bls.n	8001340 <ad8363_get_dbm+0x60>
		return AD8363_DBM_MAX;
 800133c:	2300      	movs	r3, #0
 800133e:	e01d      	b.n	800137c <ad8363_get_dbm+0x9c>
	} else if (value < ad->min) {
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	885b      	ldrh	r3, [r3, #2]
 8001344:	1cba      	adds	r2, r7, #2
 8001346:	8812      	ldrh	r2, [r2, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d201      	bcs.n	8001350 <ad8363_get_dbm+0x70>
		return AD8363_DBM_MIN;
 800134c:	23e2      	movs	r3, #226	; 0xe2
 800134e:	e015      	b.n	800137c <ad8363_get_dbm+0x9c>
	}
	return (int8_t) (m * (float) value + b);
 8001350:	1cbb      	adds	r3, r7, #2
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	0018      	movs	r0, r3
 8001356:	f7ff ff63 	bl	8001220 <__aeabi_ui2f>
 800135a:	1c03      	adds	r3, r0, #0
 800135c:	68f9      	ldr	r1, [r7, #12]
 800135e:	1c18      	adds	r0, r3, #0
 8001360:	f7ff fc06 	bl	8000b70 <__aeabi_fmul>
 8001364:	1c03      	adds	r3, r0, #0
 8001366:	68b9      	ldr	r1, [r7, #8]
 8001368:	1c18      	adds	r0, r3, #0
 800136a:	f7ff f89b 	bl	80004a4 <__aeabi_fadd>
 800136e:	1c03      	adds	r3, r0, #0
 8001370:	1c18      	adds	r0, r3, #0
 8001372:	f7ff fee7 	bl	8001144 <__aeabi_f2iz>
 8001376:	0003      	movs	r3, r0
 8001378:	b25b      	sxtb	r3, r3
 800137a:	b2db      	uxtb	r3, r3
}
 800137c:	0018      	movs	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	b004      	add	sp, #16
 8001382:	bd80      	pop	{r7, pc}
 8001384:	41f00000 	.word	0x41f00000

08001388 <bda4601_set_att>:
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE7_1);

}

void bda4601_set_att(uint8_t val, uint8_t times) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	0002      	movs	r2, r0
 8001390:	1dfb      	adds	r3, r7, #7
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	1dbb      	adds	r3, r7, #6
 8001396:	1c0a      	adds	r2, r1, #0
 8001398:	701a      	strb	r2, [r3, #0]

	if (val < MIN_DB_VALUE || val > MAX_DB_VALUE) {
 800139a:	1dfb      	adds	r3, r7, #7
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b1f      	cmp	r3, #31
 80013a0:	d902      	bls.n	80013a8 <bda4601_set_att+0x20>
		val = MIN_DB_VALUE;
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
	}
	val *= 2;
 80013a8:	1dfa      	adds	r2, r7, #7
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	18db      	adds	r3, r3, r3
 80013b0:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < times; i++) {
 80013b2:	230f      	movs	r3, #15
 80013b4:	18fb      	adds	r3, r7, r3
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
 80013ba:	e058      	b.n	800146e <bda4601_set_att+0xe6>
		uint8_t mask = 0b00100000;
 80013bc:	230e      	movs	r3, #14
 80013be:	18fb      	adds	r3, r7, r3
 80013c0:	2220      	movs	r2, #32
 80013c2:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < 6; j++) {
 80013c4:	230d      	movs	r3, #13
 80013c6:	18fb      	adds	r3, r7, r3
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
 80013cc:	e030      	b.n	8001430 <bda4601_set_att+0xa8>
			//Ciclo for de 6 vueltas para enviar los 6bits de configuración
			if (mask & val) {
 80013ce:	230e      	movs	r3, #14
 80013d0:	18fb      	adds	r3, r7, r3
 80013d2:	1dfa      	adds	r2, r7, #7
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	7812      	ldrb	r2, [r2, #0]
 80013d8:	4013      	ands	r3, r2
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d006      	beq.n	80013ee <bda4601_set_att+0x66>
				//Si el bit de la mascara en 1 coincide con el bit del valor, entonces
				SET_BIT(GPIOB->MODER, GPIO_MODER_MODE1_0);
 80013e0:	4b29      	ldr	r3, [pc, #164]	; (8001488 <bda4601_set_att+0x100>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b28      	ldr	r3, [pc, #160]	; (8001488 <bda4601_set_att+0x100>)
 80013e6:	2104      	movs	r1, #4
 80013e8:	430a      	orrs	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	e005      	b.n	80013fa <bda4601_set_att+0x72>
				//HAL_GPIO_WritePin(GPIOA, DATA_ATTENUATOR_Pin, GPIO_PIN_SET); //Pin data en alto
			} else {
				//	HAL_GPIO_WritePin(GPIOA, DATA_ATTENUATOR_Pin, GPIO_PIN_RESET); //Pin data en bajo
				CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE1_0);
 80013ee:	4b26      	ldr	r3, [pc, #152]	; (8001488 <bda4601_set_att+0x100>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b25      	ldr	r3, [pc, #148]	; (8001488 <bda4601_set_att+0x100>)
 80013f4:	2104      	movs	r1, #4
 80013f6:	438a      	bics	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]
			}

			SET_BIT(GPIOB->MODER, GPIO_MODER_MODE0_0);
 80013fa:	4b23      	ldr	r3, [pc, #140]	; (8001488 <bda4601_set_att+0x100>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <bda4601_set_att+0x100>)
 8001400:	2101      	movs	r1, #1
 8001402:	430a      	orrs	r2, r1
 8001404:	601a      	str	r2, [r3, #0]
			//HAL_GPIO_WritePin(GPIOA, CLK_ATTENUATOR_Pin, GPIO_PIN_SET); //Pin clock en alto
			HAL_Delay(1); //Delay de 1mS
 8001406:	2001      	movs	r0, #1
 8001408:	f002 fb82 	bl	8003b10 <HAL_Delay>
			CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE0_0);
 800140c:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <bda4601_set_att+0x100>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <bda4601_set_att+0x100>)
 8001412:	2101      	movs	r1, #1
 8001414:	438a      	bics	r2, r1
 8001416:	601a      	str	r2, [r3, #0]
			//HAL_GPIO_WritePin(GPIOA, CLK_ATTENUATOR_Pin, GPIO_PIN_RESET); //Pin clock en bajo
			mask = mask >> 1; //Muevo la máscara una posición
 8001418:	220e      	movs	r2, #14
 800141a:	18bb      	adds	r3, r7, r2
 800141c:	18ba      	adds	r2, r7, r2
 800141e:	7812      	ldrb	r2, [r2, #0]
 8001420:	0852      	lsrs	r2, r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < 6; j++) {
 8001424:	210d      	movs	r1, #13
 8001426:	187b      	adds	r3, r7, r1
 8001428:	781a      	ldrb	r2, [r3, #0]
 800142a:	187b      	adds	r3, r7, r1
 800142c:	3201      	adds	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	230d      	movs	r3, #13
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b05      	cmp	r3, #5
 8001438:	d9c9      	bls.n	80013ce <bda4601_set_att+0x46>
		}
		SET_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
 800143a:	23a0      	movs	r3, #160	; 0xa0
 800143c:	05db      	lsls	r3, r3, #23
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	23a0      	movs	r3, #160	; 0xa0
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	2180      	movs	r1, #128	; 0x80
 8001446:	01c9      	lsls	r1, r1, #7
 8001448:	430a      	orrs	r2, r1
 800144a:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOA, LE_ATTENUATOR_Pin, GPIO_PIN_SET); //Pin LE en alto
		HAL_Delay(1);
 800144c:	2001      	movs	r0, #1
 800144e:	f002 fb5f 	bl	8003b10 <HAL_Delay>
		CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
 8001452:	23a0      	movs	r3, #160	; 0xa0
 8001454:	05db      	lsls	r3, r3, #23
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	23a0      	movs	r3, #160	; 0xa0
 800145a:	05db      	lsls	r3, r3, #23
 800145c:	490b      	ldr	r1, [pc, #44]	; (800148c <bda4601_set_att+0x104>)
 800145e:	400a      	ands	r2, r1
 8001460:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < times; i++) {
 8001462:	210f      	movs	r1, #15
 8001464:	187b      	adds	r3, r7, r1
 8001466:	781a      	ldrb	r2, [r3, #0]
 8001468:	187b      	adds	r3, r7, r1
 800146a:	3201      	adds	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	230f      	movs	r3, #15
 8001470:	18fa      	adds	r2, r7, r3
 8001472:	1dbb      	adds	r3, r7, #6
 8001474:	7812      	ldrb	r2, [r2, #0]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d39f      	bcc.n	80013bc <bda4601_set_att+0x34>
		//HAL_GPIO_WritePin(GPIOA, LE_ATTENUATOR_Pin, GPIO_PIN_RESET); //Pin LE en bajo
	}
}
 800147c:	46c0      	nop			; (mov r8, r8)
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	b004      	add	sp, #16
 8001484:	bd80      	pop	{r7, pc}
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	50000400 	.word	0x50000400
 800148c:	ffffbfff 	.word	0xffffbfff

08001490 <bda4601_set_initial_att>:

void bda4601_set_initial_att(uint8_t value, uint16_t period_millis) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	0002      	movs	r2, r0
 8001498:	1dfb      	adds	r3, r7, #7
 800149a:	701a      	strb	r2, [r3, #0]
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	1c0a      	adds	r2, r1, #0
 80014a0:	801a      	strh	r2, [r3, #0]
	uint8_t t_step = 500;
 80014a2:	210f      	movs	r1, #15
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	22f4      	movs	r2, #244	; 0xf4
 80014a8:	701a      	strb	r2, [r3, #0]
	uint8_t times = period_millis / t_step;
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	881a      	ldrh	r2, [r3, #0]
 80014ae:	187b      	adds	r3, r7, r1
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	0019      	movs	r1, r3
 80014b4:	0010      	movs	r0, r2
 80014b6:	f7fe feb7 	bl	8000228 <__divsi3>
 80014ba:	0003      	movs	r3, r0
 80014bc:	001a      	movs	r2, r3
 80014be:	210e      	movs	r1, #14
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	701a      	strb	r2, [r3, #0]
	int att_step = value / times;
 80014c4:	1dfa      	adds	r2, r7, #7
 80014c6:	187b      	adds	r3, r7, r1
 80014c8:	7812      	ldrb	r2, [r2, #0]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	0019      	movs	r1, r3
 80014ce:	0010      	movs	r0, r2
 80014d0:	f7fe fe20 	bl	8000114 <__udivsi3>
 80014d4:	0003      	movs	r3, r0
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	60bb      	str	r3, [r7, #8]
	int att = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]

	for (int i = 0; i <= times; i++) {
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	e015      	b.n	8001510 <bda4601_set_initial_att+0x80>
		bda4601_set_att(att, 2);
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2102      	movs	r1, #2
 80014ea:	0018      	movs	r0, r3
 80014ec:	f7ff ff4c 	bl	8001388 <bda4601_set_att>
		att += att_step;
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	18d3      	adds	r3, r2, r3
 80014f6:	617b      	str	r3, [r7, #20]
		if (att >= MAX_DB_VALUE) {
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	2b1e      	cmp	r3, #30
 80014fc:	dc0f      	bgt.n	800151e <bda4601_set_initial_att+0x8e>
			return;
		}
		HAL_Delay(t_step);
 80014fe:	230f      	movs	r3, #15
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	0018      	movs	r0, r3
 8001506:	f002 fb03 	bl	8003b10 <HAL_Delay>
	for (int i = 0; i <= times; i++) {
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	3301      	adds	r3, #1
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	230e      	movs	r3, #14
 8001512:	18fb      	adds	r3, r7, r3
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	429a      	cmp	r2, r3
 800151a:	dde3      	ble.n	80014e4 <bda4601_set_initial_att+0x54>
 800151c:	e000      	b.n	8001520 <bda4601_set_initial_att+0x90>
			return;
 800151e:	46c0      	nop			; (mov r8, r8)
	}

}
 8001520:	46bd      	mov	sp, r7
 8001522:	b006      	add	sp, #24
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <i2c1_init>:
 *      Author: sigmadev
 */

#include "i2c1.h"

void i2c1_init() {
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0

	/* SCL PB8  as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE8_0);
 800152c:	4b53      	ldr	r3, [pc, #332]	; (800167c <i2c1_init+0x154>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b52      	ldr	r3, [pc, #328]	; (800167c <i2c1_init+0x154>)
 8001532:	4953      	ldr	r1, [pc, #332]	; (8001680 <i2c1_init+0x158>)
 8001534:	400a      	ands	r2, r1
 8001536:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE8_1);
 8001538:	4b50      	ldr	r3, [pc, #320]	; (800167c <i2c1_init+0x154>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b4f      	ldr	r3, [pc, #316]	; (800167c <i2c1_init+0x154>)
 800153e:	2180      	movs	r1, #128	; 0x80
 8001540:	0289      	lsls	r1, r1, #10
 8001542:	430a      	orrs	r2, r1
 8001544:	601a      	str	r2, [r3, #0]
	/* SDC PB9 as alternate */
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE9_0);
 8001546:	4b4d      	ldr	r3, [pc, #308]	; (800167c <i2c1_init+0x154>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4b4c      	ldr	r3, [pc, #304]	; (800167c <i2c1_init+0x154>)
 800154c:	494d      	ldr	r1, [pc, #308]	; (8001684 <i2c1_init+0x15c>)
 800154e:	400a      	ands	r2, r1
 8001550:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE9_1);
 8001552:	4b4a      	ldr	r3, [pc, #296]	; (800167c <i2c1_init+0x154>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	4b49      	ldr	r3, [pc, #292]	; (800167c <i2c1_init+0x154>)
 8001558:	2180      	movs	r1, #128	; 0x80
 800155a:	0309      	lsls	r1, r1, #12
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
	/* SCL PB8 as open-drain */
	SET_BIT(GPIOB->OTYPER, GPIO_OTYPER_OT8);
 8001560:	4b46      	ldr	r3, [pc, #280]	; (800167c <i2c1_init+0x154>)
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	4b45      	ldr	r3, [pc, #276]	; (800167c <i2c1_init+0x154>)
 8001566:	2180      	movs	r1, #128	; 0x80
 8001568:	0049      	lsls	r1, r1, #1
 800156a:	430a      	orrs	r2, r1
 800156c:	605a      	str	r2, [r3, #4]
	/* SDC PB9 as open-drain */
	SET_BIT(GPIOB->OTYPER, GPIO_OTYPER_OT9);
 800156e:	4b43      	ldr	r3, [pc, #268]	; (800167c <i2c1_init+0x154>)
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	4b42      	ldr	r3, [pc, #264]	; (800167c <i2c1_init+0x154>)
 8001574:	2180      	movs	r1, #128	; 0x80
 8001576:	0089      	lsls	r1, r1, #2
 8001578:	430a      	orrs	r2, r1
 800157a:	605a      	str	r2, [r3, #4]
	/* SCL PB8 High Speed output */
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED8_0);
 800157c:	4b3f      	ldr	r3, [pc, #252]	; (800167c <i2c1_init+0x154>)
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	4b3e      	ldr	r3, [pc, #248]	; (800167c <i2c1_init+0x154>)
 8001582:	2180      	movs	r1, #128	; 0x80
 8001584:	0249      	lsls	r1, r1, #9
 8001586:	430a      	orrs	r2, r1
 8001588:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED8_1);
 800158a:	4b3c      	ldr	r3, [pc, #240]	; (800167c <i2c1_init+0x154>)
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	4b3b      	ldr	r3, [pc, #236]	; (800167c <i2c1_init+0x154>)
 8001590:	2180      	movs	r1, #128	; 0x80
 8001592:	0289      	lsls	r1, r1, #10
 8001594:	430a      	orrs	r2, r1
 8001596:	609a      	str	r2, [r3, #8]
	/* SDC PB9  High Speed output */
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED9_0);
 8001598:	4b38      	ldr	r3, [pc, #224]	; (800167c <i2c1_init+0x154>)
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	4b37      	ldr	r3, [pc, #220]	; (800167c <i2c1_init+0x154>)
 800159e:	2180      	movs	r1, #128	; 0x80
 80015a0:	02c9      	lsls	r1, r1, #11
 80015a2:	430a      	orrs	r2, r1
 80015a4:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEED9_1);
 80015a6:	4b35      	ldr	r3, [pc, #212]	; (800167c <i2c1_init+0x154>)
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	4b34      	ldr	r3, [pc, #208]	; (800167c <i2c1_init+0x154>)
 80015ac:	2180      	movs	r1, #128	; 0x80
 80015ae:	0309      	lsls	r1, r1, #12
 80015b0:	430a      	orrs	r2, r1
 80015b2:	609a      	str	r2, [r3, #8]
	/* SCL PB8 as pull-up */
	CLEAR_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD8_0);
 80015b4:	4b31      	ldr	r3, [pc, #196]	; (800167c <i2c1_init+0x154>)
 80015b6:	68da      	ldr	r2, [r3, #12]
 80015b8:	4b30      	ldr	r3, [pc, #192]	; (800167c <i2c1_init+0x154>)
 80015ba:	4931      	ldr	r1, [pc, #196]	; (8001680 <i2c1_init+0x158>)
 80015bc:	400a      	ands	r2, r1
 80015be:	60da      	str	r2, [r3, #12]
	SET_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD8_1);
 80015c0:	4b2e      	ldr	r3, [pc, #184]	; (800167c <i2c1_init+0x154>)
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	4b2d      	ldr	r3, [pc, #180]	; (800167c <i2c1_init+0x154>)
 80015c6:	2180      	movs	r1, #128	; 0x80
 80015c8:	0289      	lsls	r1, r1, #10
 80015ca:	430a      	orrs	r2, r1
 80015cc:	60da      	str	r2, [r3, #12]
	/* SDC PB9 as pull-up */
	CLEAR_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD9_0);
 80015ce:	4b2b      	ldr	r3, [pc, #172]	; (800167c <i2c1_init+0x154>)
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	4b2a      	ldr	r3, [pc, #168]	; (800167c <i2c1_init+0x154>)
 80015d4:	492b      	ldr	r1, [pc, #172]	; (8001684 <i2c1_init+0x15c>)
 80015d6:	400a      	ands	r2, r1
 80015d8:	60da      	str	r2, [r3, #12]
	SET_BIT(GPIOB->PUPDR, GPIO_PUPDR_PUPD9_1);
 80015da:	4b28      	ldr	r3, [pc, #160]	; (800167c <i2c1_init+0x154>)
 80015dc:	68da      	ldr	r2, [r3, #12]
 80015de:	4b27      	ldr	r3, [pc, #156]	; (800167c <i2c1_init+0x154>)
 80015e0:	2180      	movs	r1, #128	; 0x80
 80015e2:	0309      	lsls	r1, r1, #12
 80015e4:	430a      	orrs	r2, r1
 80015e6:	60da      	str	r2, [r3, #12]
	/*  PB8 as i2c SCL */
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_0);
 80015e8:	4b24      	ldr	r3, [pc, #144]	; (800167c <i2c1_init+0x154>)
 80015ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015ec:	4b23      	ldr	r3, [pc, #140]	; (800167c <i2c1_init+0x154>)
 80015ee:	2101      	movs	r1, #1
 80015f0:	438a      	bics	r2, r1
 80015f2:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_1);
 80015f4:	4b21      	ldr	r3, [pc, #132]	; (800167c <i2c1_init+0x154>)
 80015f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015f8:	4b20      	ldr	r3, [pc, #128]	; (800167c <i2c1_init+0x154>)
 80015fa:	2102      	movs	r1, #2
 80015fc:	430a      	orrs	r2, r1
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_2);
 8001600:	4b1e      	ldr	r3, [pc, #120]	; (800167c <i2c1_init+0x154>)
 8001602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001604:	4b1d      	ldr	r3, [pc, #116]	; (800167c <i2c1_init+0x154>)
 8001606:	2104      	movs	r1, #4
 8001608:	430a      	orrs	r2, r1
 800160a:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_3);
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <i2c1_init+0x154>)
 800160e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001610:	4b1a      	ldr	r3, [pc, #104]	; (800167c <i2c1_init+0x154>)
 8001612:	2108      	movs	r1, #8
 8001614:	438a      	bics	r2, r1
 8001616:	625a      	str	r2, [r3, #36]	; 0x24
	/*  PB9 as i2c SDL */
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_0);
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <i2c1_init+0x154>)
 800161a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <i2c1_init+0x154>)
 800161e:	2110      	movs	r1, #16
 8001620:	438a      	bics	r2, r1
 8001622:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_1);
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <i2c1_init+0x154>)
 8001626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <i2c1_init+0x154>)
 800162a:	2120      	movs	r1, #32
 800162c:	430a      	orrs	r2, r1
 800162e:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_2);
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <i2c1_init+0x154>)
 8001632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <i2c1_init+0x154>)
 8001636:	2140      	movs	r1, #64	; 0x40
 8001638:	430a      	orrs	r2, r1
 800163a:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOB->AFR[1], GPIO_AFRH_AFSEL9_3);
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <i2c1_init+0x154>)
 800163e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001640:	4b0e      	ldr	r3, [pc, #56]	; (800167c <i2c1_init+0x154>)
 8001642:	2180      	movs	r1, #128	; 0x80
 8001644:	438a      	bics	r2, r1
 8001646:	625a      	str	r2, [r3, #36]	; 0x24

	/* select normal speed */
	SET_BIT(RCC->APBENR1, RCC_APBENR1_I2C1EN);
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <i2c1_init+0x160>)
 800164a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <i2c1_init+0x160>)
 800164e:	2180      	movs	r1, #128	; 0x80
 8001650:	0389      	lsls	r1, r1, #14
 8001652:	430a      	orrs	r2, r1
 8001654:	63da      	str	r2, [r3, #60]	; 0x3c

	/* i2c disable */
	CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);
 8001656:	4b0d      	ldr	r3, [pc, #52]	; (800168c <i2c1_init+0x164>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <i2c1_init+0x164>)
 800165c:	2101      	movs	r1, #1
 800165e:	438a      	bics	r2, r1
 8001660:	601a      	str	r2, [r3, #0]

	I2C1->TIMINGR = 0X10707DBCU;
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <i2c1_init+0x164>)
 8001664:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <i2c1_init+0x168>)
 8001666:	611a      	str	r2, [r3, #16]
	/*i2c Rx interrupt enable */
//SET_BIT(I2C1->CR1, I2C_CR1_RXIE);
//SET_BIT(I2C1->CR1, I2C_CR1_TXIE);

	/* i2c enable */
	SET_BIT(I2C1->CR1, I2C_CR1_PE);
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <i2c1_init+0x164>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <i2c1_init+0x164>)
 800166e:	2101      	movs	r1, #1
 8001670:	430a      	orrs	r2, r1
 8001672:	601a      	str	r2, [r3, #0]
}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	50000400 	.word	0x50000400
 8001680:	fffeffff 	.word	0xfffeffff
 8001684:	fffbffff 	.word	0xfffbffff
 8001688:	40021000 	.word	0x40021000
 800168c:	40005400 	.word	0x40005400
 8001690:	10707dbc 	.word	0x10707dbc

08001694 <i2c1_buffReceive>:
//	while (!(READ_BIT(I2C1->ISR, I2C_ISR_TC))) {
//	}
	return data;
}

void i2c1_buffReceive(char saddr, uint8_t *rcv, uint8_t N) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6039      	str	r1, [r7, #0]
 800169c:	0011      	movs	r1, r2
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	1c02      	adds	r2, r0, #0
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	1dbb      	adds	r3, r7, #6
 80016a6:	1c0a      	adds	r2, r1, #0
 80016a8:	701a      	strb	r2, [r3, #0]
	uint32_t counter = HAL_GetTick();
 80016aa:	f002 fa27 	bl	8003afc <HAL_GetTick>
 80016ae:	0003      	movs	r3, r0
 80016b0:	60fb      	str	r3, [r7, #12]
	bool timeout = false;
 80016b2:	2317      	movs	r3, #23
 80016b4:	18fb      	adds	r3, r7, r3
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
	i2c1_start(saddr, READ, N);
 80016ba:	1dbb      	adds	r3, r7, #6
 80016bc:	781a      	ldrb	r2, [r3, #0]
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2101      	movs	r1, #1
 80016c4:	0018      	movs	r0, r3
 80016c6:	f000 f88f 	bl	80017e8 <i2c1_start>

	for (int i = 0; i < N; i++) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	e02a      	b.n	8001726 <i2c1_buffReceive+0x92>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
			if (HAL_GetTick() - counter > 500)
 80016d0:	f002 fa14 	bl	8003afc <HAL_GetTick>
 80016d4:	0002      	movs	r2, r0
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1ad2      	subs	r2, r2, r3
 80016da:	2017      	movs	r0, #23
 80016dc:	183b      	adds	r3, r7, r0
 80016de:	1839      	adds	r1, r7, r0
 80016e0:	7809      	ldrb	r1, [r1, #0]
 80016e2:	7019      	strb	r1, [r3, #0]
 80016e4:	23fa      	movs	r3, #250	; 0xfa
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d902      	bls.n	80016f2 <i2c1_buffReceive+0x5e>
				timeout = true;
 80016ec:	183b      	adds	r3, r7, r0
 80016ee:	2201      	movs	r2, #1
 80016f0:	701a      	strb	r2, [r3, #0]
		while (!READ_BIT(I2C1->ISR, I2C_ISR_RXNE) & !timeout) {
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <i2c1_buffReceive+0xa8>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	2204      	movs	r2, #4
 80016f8:	4013      	ands	r3, r2
 80016fa:	425a      	negs	r2, r3
 80016fc:	4153      	adcs	r3, r2
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	0019      	movs	r1, r3
 8001702:	2317      	movs	r3, #23
 8001704:	18fb      	adds	r3, r7, r3
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2201      	movs	r2, #1
 800170a:	4053      	eors	r3, r2
 800170c:	b2db      	uxtb	r3, r3
 800170e:	400b      	ands	r3, r1
 8001710:	d1de      	bne.n	80016d0 <i2c1_buffReceive+0x3c>
		}
		rcv[i] = I2C1->RXDR;
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <i2c1_buffReceive+0xa8>)
 8001714:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	18d3      	adds	r3, r2, r3
 800171c:	b2ca      	uxtb	r2, r1
 800171e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N; i++) {
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	3301      	adds	r3, #1
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	1dbb      	adds	r3, r7, #6
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	dbe0      	blt.n	80016f2 <i2c1_buffReceive+0x5e>
	}
}
 8001730:	46c0      	nop			; (mov r8, r8)
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	b006      	add	sp, #24
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	40005400 	.word	0x40005400

08001740 <i2c1_byte_tx>:

void i2c1_byte_tx(uint8_t saddr, uint8_t *data, uint8_t N) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6039      	str	r1, [r7, #0]
 8001748:	0011      	movs	r1, r2
 800174a:	1dfb      	adds	r3, r7, #7
 800174c:	1c02      	adds	r2, r0, #0
 800174e:	701a      	strb	r2, [r3, #0]
 8001750:	1dbb      	adds	r3, r7, #6
 8001752:	1c0a      	adds	r2, r1, #0
 8001754:	701a      	strb	r2, [r3, #0]
	i2c1_start(saddr, WRITE, N);
 8001756:	1dbb      	adds	r3, r7, #6
 8001758:	781a      	ldrb	r2, [r3, #0]
 800175a:	1dfb      	adds	r3, r7, #7
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2100      	movs	r1, #0
 8001760:	0018      	movs	r0, r3
 8001762:	f000 f841 	bl	80017e8 <i2c1_start>
	uint32_t counter = HAL_GetTick();
 8001766:	f002 f9c9 	bl	8003afc <HAL_GetTick>
 800176a:	0003      	movs	r3, r0
 800176c:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < N; i++) {
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	e016      	b.n	80017a2 <i2c1_byte_tx+0x62>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXE)) {

			if (HAL_GetTick() - counter > 500)
 8001774:	f002 f9c2 	bl	8003afc <HAL_GetTick>
 8001778:	0002      	movs	r2, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1ad2      	subs	r2, r2, r3
 800177e:	23fa      	movs	r3, #250	; 0xfa
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	429a      	cmp	r2, r3
 8001784:	d828      	bhi.n	80017d8 <i2c1_byte_tx+0x98>
		while (!READ_BIT(I2C1->ISR, I2C_ISR_TXE)) {
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <i2c1_byte_tx+0xa4>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	2201      	movs	r2, #1
 800178c:	4013      	ands	r3, r2
 800178e:	d0f1      	beq.n	8001774 <i2c1_byte_tx+0x34>
				return;
		}
		I2C1->TXDR = data[i];
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	18d3      	adds	r3, r2, r3
 8001796:	781a      	ldrb	r2, [r3, #0]
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <i2c1_byte_tx+0xa4>)
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
	for (int i = 0; i < N; i++) {
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	3301      	adds	r3, #1
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	1dbb      	adds	r3, r7, #6
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	dbec      	blt.n	8001786 <i2c1_byte_tx+0x46>
	}

	while (!READ_BIT(I2C1->ISR, I2C_ISR_STOPF)) {
 80017ac:	e008      	b.n	80017c0 <i2c1_byte_tx+0x80>
		if (HAL_GetTick() - counter > 500)
 80017ae:	f002 f9a5 	bl	8003afc <HAL_GetTick>
 80017b2:	0002      	movs	r2, r0
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	1ad2      	subs	r2, r2, r3
 80017b8:	23fa      	movs	r3, #250	; 0xfa
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	429a      	cmp	r2, r3
 80017be:	d80d      	bhi.n	80017dc <i2c1_byte_tx+0x9c>
	while (!READ_BIT(I2C1->ISR, I2C_ISR_STOPF)) {
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <i2c1_byte_tx+0xa4>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	2220      	movs	r2, #32
 80017c6:	4013      	ands	r3, r2
 80017c8:	d0f1      	beq.n	80017ae <i2c1_byte_tx+0x6e>
			return;

	}
	SET_BIT(I2C1->ICR, I2C_ICR_STOPCF);
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <i2c1_byte_tx+0xa4>)
 80017cc:	69da      	ldr	r2, [r3, #28]
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <i2c1_byte_tx+0xa4>)
 80017d0:	2120      	movs	r1, #32
 80017d2:	430a      	orrs	r2, r1
 80017d4:	61da      	str	r2, [r3, #28]
 80017d6:	e002      	b.n	80017de <i2c1_byte_tx+0x9e>
				return;
 80017d8:	46c0      	nop			; (mov r8, r8)
 80017da:	e000      	b.n	80017de <i2c1_byte_tx+0x9e>
			return;
 80017dc:	46c0      	nop			; (mov r8, r8)

}
 80017de:	46bd      	mov	sp, r7
 80017e0:	b004      	add	sp, #16
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40005400 	.word	0x40005400

080017e8 <i2c1_start>:
	SET_BIT(I2C1->ISR, I2C_ICR_STOPCF);

}


void i2c1_start(char saddr, uint8_t transfer_request, uint8_t N) {
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	0004      	movs	r4, r0
 80017f0:	0008      	movs	r0, r1
 80017f2:	0011      	movs	r1, r2
 80017f4:	1dfb      	adds	r3, r7, #7
 80017f6:	1c22      	adds	r2, r4, #0
 80017f8:	701a      	strb	r2, [r3, #0]
 80017fa:	1dbb      	adds	r3, r7, #6
 80017fc:	1c02      	adds	r2, r0, #0
 80017fe:	701a      	strb	r2, [r3, #0]
 8001800:	1d7b      	adds	r3, r7, #5
 8001802:	1c0a      	adds	r2, r1, #0
 8001804:	701a      	strb	r2, [r3, #0]
	/*master 7 bit addressing mode */
	CLEAR_BIT(I2C1->CR2, I2C_CR2_ADD10);
 8001806:	4b21      	ldr	r3, [pc, #132]	; (800188c <i2c1_start+0xa4>)
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	4b20      	ldr	r3, [pc, #128]	; (800188c <i2c1_start+0xa4>)
 800180c:	4920      	ldr	r1, [pc, #128]	; (8001890 <i2c1_start+0xa8>)
 800180e:	400a      	ands	r2, r1
 8001810:	605a      	str	r2, [r3, #4]
	/* set Slave address */
	MODIFY_REG(I2C1->CR2, I2C_CR2_SADD, saddr << I2C_CR2_SADD_Pos);
 8001812:	4b1e      	ldr	r3, [pc, #120]	; (800188c <i2c1_start+0xa4>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	0a9b      	lsrs	r3, r3, #10
 8001818:	0299      	lsls	r1, r3, #10
 800181a:	1dfb      	adds	r3, r7, #7
 800181c:	781a      	ldrb	r2, [r3, #0]
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <i2c1_start+0xa4>)
 8001820:	430a      	orrs	r2, r1
 8001822:	605a      	str	r2, [r3, #4]
	/* read 1 byte */
	MODIFY_REG(I2C1->CR2, I2C_CR2_NBYTES, N << I2C_CR2_NBYTES_Pos);
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <i2c1_start+0xa4>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	4a1a      	ldr	r2, [pc, #104]	; (8001894 <i2c1_start+0xac>)
 800182a:	401a      	ands	r2, r3
 800182c:	1d7b      	adds	r3, r7, #5
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	041b      	lsls	r3, r3, #16
 8001832:	0019      	movs	r1, r3
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <i2c1_start+0xa4>)
 8001836:	430a      	orrs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]
	/* stops when NBytes are transferred */
	SET_BIT(I2C1->CR2, I2C_CR2_AUTOEND);
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <i2c1_start+0xa4>)
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <i2c1_start+0xa4>)
 8001840:	2180      	movs	r1, #128	; 0x80
 8001842:	0489      	lsls	r1, r1, #18
 8001844:	430a      	orrs	r2, r1
 8001846:	605a      	str	r2, [r3, #4]
	/* set START condition  automatically changes to master */


	if (transfer_request == 1) {
 8001848:	1dbb      	adds	r3, r7, #6
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d107      	bne.n	8001860 <i2c1_start+0x78>
		/* request a read transfer */
		SET_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 8001850:	4b0e      	ldr	r3, [pc, #56]	; (800188c <i2c1_start+0xa4>)
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	4b0d      	ldr	r3, [pc, #52]	; (800188c <i2c1_start+0xa4>)
 8001856:	2180      	movs	r1, #128	; 0x80
 8001858:	00c9      	lsls	r1, r1, #3
 800185a:	430a      	orrs	r2, r1
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	e009      	b.n	8001874 <i2c1_start+0x8c>
	} else if (transfer_request == 0) {
 8001860:	1dbb      	adds	r3, r7, #6
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d105      	bne.n	8001874 <i2c1_start+0x8c>
		/* request a write transfer */
		CLEAR_BIT(I2C1->CR2, I2C_CR2_RD_WRN);
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <i2c1_start+0xa4>)
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	4b07      	ldr	r3, [pc, #28]	; (800188c <i2c1_start+0xa4>)
 800186e:	490a      	ldr	r1, [pc, #40]	; (8001898 <i2c1_start+0xb0>)
 8001870:	400a      	ands	r2, r1
 8001872:	605a      	str	r2, [r3, #4]
	}

	SET_BIT(I2C1->CR2, I2C_CR2_START);
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <i2c1_start+0xa4>)
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <i2c1_start+0xa4>)
 800187a:	2180      	movs	r1, #128	; 0x80
 800187c:	0189      	lsls	r1, r1, #6
 800187e:	430a      	orrs	r2, r1
 8001880:	605a      	str	r2, [r3, #4]

}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	46bd      	mov	sp, r7
 8001886:	b003      	add	sp, #12
 8001888:	bd90      	pop	{r4, r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	40005400 	.word	0x40005400
 8001890:	fffff7ff 	.word	0xfffff7ff
 8001894:	ff00ffff 	.word	0xff00ffff
 8001898:	fffffbff 	.word	0xfffffbff

0800189c <led_init>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void led_init(void) {
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0

	/*CURRENT LOW LED PA12  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE12_0);
 80018a0:	23a0      	movs	r3, #160	; 0xa0
 80018a2:	05db      	lsls	r3, r3, #23
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	23a0      	movs	r3, #160	; 0xa0
 80018a8:	05db      	lsls	r3, r3, #23
 80018aa:	2180      	movs	r1, #128	; 0x80
 80018ac:	0449      	lsls	r1, r1, #17
 80018ae:	430a      	orrs	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE12_1);
 80018b2:	23a0      	movs	r3, #160	; 0xa0
 80018b4:	05db      	lsls	r3, r3, #23
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	23a0      	movs	r3, #160	; 0xa0
 80018ba:	05db      	lsls	r3, r3, #23
 80018bc:	492b      	ldr	r1, [pc, #172]	; (800196c <led_init+0xd0>)
 80018be:	400a      	ands	r2, r1
 80018c0:	601a      	str	r2, [r3, #0]

	/*CURRENT NORMAL LED PA11  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE11_0);
 80018c2:	23a0      	movs	r3, #160	; 0xa0
 80018c4:	05db      	lsls	r3, r3, #23
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	23a0      	movs	r3, #160	; 0xa0
 80018ca:	05db      	lsls	r3, r3, #23
 80018cc:	2180      	movs	r1, #128	; 0x80
 80018ce:	03c9      	lsls	r1, r1, #15
 80018d0:	430a      	orrs	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE11_1);
 80018d4:	23a0      	movs	r3, #160	; 0xa0
 80018d6:	05db      	lsls	r3, r3, #23
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	23a0      	movs	r3, #160	; 0xa0
 80018dc:	05db      	lsls	r3, r3, #23
 80018de:	4924      	ldr	r1, [pc, #144]	; (8001970 <led_init+0xd4>)
 80018e0:	400a      	ands	r2, r1
 80018e2:	601a      	str	r2, [r3, #0]

	/*CURRENT HIGH  LED PA10  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE10_0);
 80018e4:	23a0      	movs	r3, #160	; 0xa0
 80018e6:	05db      	lsls	r3, r3, #23
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	23a0      	movs	r3, #160	; 0xa0
 80018ec:	05db      	lsls	r3, r3, #23
 80018ee:	2180      	movs	r1, #128	; 0x80
 80018f0:	0349      	lsls	r1, r1, #13
 80018f2:	430a      	orrs	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE10_1);
 80018f6:	23a0      	movs	r3, #160	; 0xa0
 80018f8:	05db      	lsls	r3, r3, #23
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	23a0      	movs	r3, #160	; 0xa0
 80018fe:	05db      	lsls	r3, r3, #23
 8001900:	491c      	ldr	r1, [pc, #112]	; (8001974 <led_init+0xd8>)
 8001902:	400a      	ands	r2, r1
 8001904:	601a      	str	r2, [r3, #0]

	/*SYS_RP LED PC6  as output */
	SET_BIT(GPIOC->MODER, GPIO_MODER_MODE6_0);
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <led_init+0xdc>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <led_init+0xdc>)
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	0149      	lsls	r1, r1, #5
 8001910:	430a      	orrs	r2, r1
 8001912:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOC->MODER, GPIO_MODER_MODE6_1);
 8001914:	4b18      	ldr	r3, [pc, #96]	; (8001978 <led_init+0xdc>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <led_init+0xdc>)
 800191a:	4918      	ldr	r1, [pc, #96]	; (800197c <led_init+0xe0>)
 800191c:	400a      	ands	r2, r1
 800191e:	601a      	str	r2, [r3, #0]

	/* TEMPERATURE OK  LED PA9  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE9_0);
 8001920:	23a0      	movs	r3, #160	; 0xa0
 8001922:	05db      	lsls	r3, r3, #23
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	23a0      	movs	r3, #160	; 0xa0
 8001928:	05db      	lsls	r3, r3, #23
 800192a:	2180      	movs	r1, #128	; 0x80
 800192c:	02c9      	lsls	r1, r1, #11
 800192e:	430a      	orrs	r2, r1
 8001930:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE9_1);
 8001932:	23a0      	movs	r3, #160	; 0xa0
 8001934:	05db      	lsls	r3, r3, #23
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	23a0      	movs	r3, #160	; 0xa0
 800193a:	05db      	lsls	r3, r3, #23
 800193c:	4910      	ldr	r1, [pc, #64]	; (8001980 <led_init+0xe4>)
 800193e:	400a      	ands	r2, r1
 8001940:	601a      	str	r2, [r3, #0]

	/* TEMPERATURE HIGH LED PA8  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE8_0);
 8001942:	23a0      	movs	r3, #160	; 0xa0
 8001944:	05db      	lsls	r3, r3, #23
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	23a0      	movs	r3, #160	; 0xa0
 800194a:	05db      	lsls	r3, r3, #23
 800194c:	2180      	movs	r1, #128	; 0x80
 800194e:	0249      	lsls	r1, r1, #9
 8001950:	430a      	orrs	r2, r1
 8001952:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE8_1);
 8001954:	23a0      	movs	r3, #160	; 0xa0
 8001956:	05db      	lsls	r3, r3, #23
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	23a0      	movs	r3, #160	; 0xa0
 800195c:	05db      	lsls	r3, r3, #23
 800195e:	4909      	ldr	r1, [pc, #36]	; (8001984 <led_init+0xe8>)
 8001960:	400a      	ands	r2, r1
 8001962:	601a      	str	r2, [r3, #0]

}
 8001964:	46c0      	nop			; (mov r8, r8)
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	fdffffff 	.word	0xfdffffff
 8001970:	ff7fffff 	.word	0xff7fffff
 8001974:	ffdfffff 	.word	0xffdfffff
 8001978:	50000800 	.word	0x50000800
 800197c:	ffffdfff 	.word	0xffffdfff
 8001980:	fff7ffff 	.word	0xfff7ffff
 8001984:	fffdffff 	.word	0xfffdffff

08001988 <led_enable_kalive>:
void led_off(void) {

}

void led_enable_kalive(LED_t *l) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() -  l->ka_counter > LED_KA_STATE_TIMEOUT)
 8001990:	f002 f8b4 	bl	8003afc <HAL_GetTick>
 8001994:	0002      	movs	r2, r0
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	1ad2      	subs	r2, r2, r3
 800199c:	23fa      	movs	r3, #250	; 0xfa
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d905      	bls.n	80019b0 <led_enable_kalive+0x28>
		l->ka_counter = HAL_GetTick();
 80019a4:	f002 f8aa 	bl	8003afc <HAL_GetTick>
 80019a8:	0002      	movs	r2, r0
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	601a      	str	r2, [r3, #0]
			sys_rp_led_on();
			current_low_led_on();
		}
	}

}
 80019ae:	e025      	b.n	80019fc <led_enable_kalive+0x74>
		if (HAL_GetTick() - l->ka_counter > LED_KA_ON_TIMEOUT) {
 80019b0:	f002 f8a4 	bl	8003afc <HAL_GetTick>
 80019b4:	0002      	movs	r2, r0
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b32      	cmp	r3, #50	; 0x32
 80019be:	d90e      	bls.n	80019de <led_enable_kalive+0x56>
			sys_rp_led_off();
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <led_enable_kalive+0x7c>)
 80019c2:	695a      	ldr	r2, [r3, #20]
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <led_enable_kalive+0x7c>)
 80019c6:	2140      	movs	r1, #64	; 0x40
 80019c8:	438a      	bics	r2, r1
 80019ca:	615a      	str	r2, [r3, #20]
			current_low_led_off();
 80019cc:	23a0      	movs	r3, #160	; 0xa0
 80019ce:	05db      	lsls	r3, r3, #23
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	23a0      	movs	r3, #160	; 0xa0
 80019d4:	05db      	lsls	r3, r3, #23
 80019d6:	490c      	ldr	r1, [pc, #48]	; (8001a08 <led_enable_kalive+0x80>)
 80019d8:	400a      	ands	r2, r1
 80019da:	615a      	str	r2, [r3, #20]
}
 80019dc:	e00e      	b.n	80019fc <led_enable_kalive+0x74>
			sys_rp_led_on();
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <led_enable_kalive+0x7c>)
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <led_enable_kalive+0x7c>)
 80019e4:	2140      	movs	r1, #64	; 0x40
 80019e6:	430a      	orrs	r2, r1
 80019e8:	615a      	str	r2, [r3, #20]
			current_low_led_on();
 80019ea:	23a0      	movs	r3, #160	; 0xa0
 80019ec:	05db      	lsls	r3, r3, #23
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	23a0      	movs	r3, #160	; 0xa0
 80019f2:	05db      	lsls	r3, r3, #23
 80019f4:	2180      	movs	r1, #128	; 0x80
 80019f6:	0149      	lsls	r1, r1, #5
 80019f8:	430a      	orrs	r2, r1
 80019fa:	615a      	str	r2, [r3, #20]
}
 80019fc:	46c0      	nop			; (mov r8, r8)
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b002      	add	sp, #8
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	50000800 	.word	0x50000800
 8001a08:	ffffefff 	.word	0xffffefff

08001a0c <led_reset>:
void led_reset(LED_t *l) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	l->ch_counter = 0;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
	l->cl_counter = 0;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	605a      	str	r2, [r3, #4]
	l->cn_counter = 0;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
	l->ka_counter = HAL_GetTick();
 8001a26:	f002 f869 	bl	8003afc <HAL_GetTick>
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	601a      	str	r2, [r3, #0]
	l->sysrp_counter = 0;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
	l->th_counter = 0;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
	l->tok_counter = 0;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	615a      	str	r2, [r3, #20]
	current_low_led_on();
 8001a42:	23a0      	movs	r3, #160	; 0xa0
 8001a44:	05db      	lsls	r3, r3, #23
 8001a46:	695a      	ldr	r2, [r3, #20]
 8001a48:	23a0      	movs	r3, #160	; 0xa0
 8001a4a:	05db      	lsls	r3, r3, #23
 8001a4c:	2180      	movs	r1, #128	; 0x80
 8001a4e:	0149      	lsls	r1, r1, #5
 8001a50:	430a      	orrs	r2, r1
 8001a52:	615a      	str	r2, [r3, #20]
	current_normal_on();
 8001a54:	23a0      	movs	r3, #160	; 0xa0
 8001a56:	05db      	lsls	r3, r3, #23
 8001a58:	695a      	ldr	r2, [r3, #20]
 8001a5a:	23a0      	movs	r3, #160	; 0xa0
 8001a5c:	05db      	lsls	r3, r3, #23
 8001a5e:	2180      	movs	r1, #128	; 0x80
 8001a60:	0109      	lsls	r1, r1, #4
 8001a62:	430a      	orrs	r2, r1
 8001a64:	615a      	str	r2, [r3, #20]
	current_high_led_on();
 8001a66:	23a0      	movs	r3, #160	; 0xa0
 8001a68:	05db      	lsls	r3, r3, #23
 8001a6a:	695a      	ldr	r2, [r3, #20]
 8001a6c:	23a0      	movs	r3, #160	; 0xa0
 8001a6e:	05db      	lsls	r3, r3, #23
 8001a70:	2180      	movs	r1, #128	; 0x80
 8001a72:	00c9      	lsls	r1, r1, #3
 8001a74:	430a      	orrs	r2, r1
 8001a76:	615a      	str	r2, [r3, #20]
	sys_rp_led_on();
 8001a78:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <led_reset+0xa4>)
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <led_reset+0xa4>)
 8001a7e:	2140      	movs	r1, #64	; 0x40
 8001a80:	430a      	orrs	r2, r1
 8001a82:	615a      	str	r2, [r3, #20]
	temperature_ok_led_on();
 8001a84:	23a0      	movs	r3, #160	; 0xa0
 8001a86:	05db      	lsls	r3, r3, #23
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	23a0      	movs	r3, #160	; 0xa0
 8001a8c:	05db      	lsls	r3, r3, #23
 8001a8e:	2180      	movs	r1, #128	; 0x80
 8001a90:	0089      	lsls	r1, r1, #2
 8001a92:	430a      	orrs	r2, r1
 8001a94:	615a      	str	r2, [r3, #20]
	temperature_high_led_on();
 8001a96:	23a0      	movs	r3, #160	; 0xa0
 8001a98:	05db      	lsls	r3, r3, #23
 8001a9a:	695a      	ldr	r2, [r3, #20]
 8001a9c:	23a0      	movs	r3, #160	; 0xa0
 8001a9e:	05db      	lsls	r3, r3, #23
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	0049      	lsls	r1, r1, #1
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	615a      	str	r2, [r3, #20]
}
 8001aa8:	46c0      	nop			; (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b002      	add	sp, #8
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	50000800 	.word	0x50000800

08001ab4 <lm75_init>:
#include "lm75.h"

void lm75_init(void ) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
	uint8_t cmd[2];
	cmd[0] = LM75_Conf;
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2201      	movs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x0;
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	705a      	strb	r2, [r3, #1]
	i2c1_byte_tx(LM75_ADDR<<1, cmd, 2);
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2202      	movs	r2, #2
 8001aca:	0019      	movs	r1, r3
 8001acc:	209e      	movs	r0, #158	; 0x9e
 8001ace:	f7ff fe37 	bl	8001740 <i2c1_byte_tx>
}
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	b002      	add	sp, #8
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <lm75_read>:

float lm75_read(void) {
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
	uint8_t cmd[2];
	float result = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	607b      	str	r3, [r7, #4]
	cmd[0] = LM75_Temp;
 8001ae4:	003b      	movs	r3, r7
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]

	i2c1_byte_tx( LM75_ADDR<<1, cmd, 1); // Send command string
 8001aea:	003b      	movs	r3, r7
 8001aec:	2201      	movs	r2, #1
 8001aee:	0019      	movs	r1, r3
 8001af0:	209e      	movs	r0, #158	; 0x9e
 8001af2:	f7ff fe25 	bl	8001740 <i2c1_byte_tx>
	i2c1_buffReceive(LM75_ADDR<<1 | 1, cmd, 2); // Send command string
 8001af6:	003b      	movs	r3, r7
 8001af8:	2202      	movs	r2, #2
 8001afa:	0019      	movs	r1, r3
 8001afc:	209f      	movs	r0, #159	; 0x9f
 8001afe:	f7ff fdc9 	bl	8001694 <i2c1_buffReceive>
	result = (float) ((cmd[0] << 8) | cmd[1]) / 256.0f;
 8001b02:	003b      	movs	r3, r7
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	003a      	movs	r2, r7
 8001b0a:	7852      	ldrb	r2, [r2, #1]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f7ff fb38 	bl	8001184 <__aeabi_i2f>
 8001b14:	1c03      	adds	r3, r0, #0
 8001b16:	2187      	movs	r1, #135	; 0x87
 8001b18:	05c9      	lsls	r1, r1, #23
 8001b1a:	1c18      	adds	r0, r3, #0
 8001b1c:	f7fe fe60 	bl	80007e0 <__aeabi_fdiv>
 8001b20:	1c03      	adds	r3, r0, #0
 8001b22:	607b      	str	r3, [r7, #4]
	return result;
 8001b24:	687b      	ldr	r3, [r7, #4]
}
 8001b26:	1c18      	adds	r0, r3, #0
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b002      	add	sp, #8
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <m24c64_read_N>:

	i2c1_byte_tx(CHIP_ADDR, buff, 2);
	i2c1_buffReceive(CHIP_ADDR, data, 32);
}

void m24c64_read_N(uint8_t page, uint8_t *data, uint8_t offset, uint8_t size) {
 8001b2e:	b590      	push	{r4, r7, lr}
 8001b30:	b085      	sub	sp, #20
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	0004      	movs	r4, r0
 8001b36:	6039      	str	r1, [r7, #0]
 8001b38:	0010      	movs	r0, r2
 8001b3a:	0019      	movs	r1, r3
 8001b3c:	1dfb      	adds	r3, r7, #7
 8001b3e:	1c22      	adds	r2, r4, #0
 8001b40:	701a      	strb	r2, [r3, #0]
 8001b42:	1dbb      	adds	r3, r7, #6
 8001b44:	1c02      	adds	r2, r0, #0
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	1d7b      	adds	r3, r7, #5
 8001b4a:	1c0a      	adds	r2, r1, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
	uint8_t buff[2] = { 0 };
 8001b4e:	210c      	movs	r1, #12
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	2200      	movs	r2, #0
 8001b54:	801a      	strh	r2, [r3, #0]
	uint16_t MemAddress = page << PADDRPOSITION | offset;
 8001b56:	1dfb      	adds	r3, r7, #7
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	015b      	lsls	r3, r3, #5
 8001b5c:	b21a      	sxth	r2, r3
 8001b5e:	1dbb      	adds	r3, r7, #6
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	b21b      	sxth	r3, r3
 8001b64:	4313      	orrs	r3, r2
 8001b66:	b21a      	sxth	r2, r3
 8001b68:	200e      	movs	r0, #14
 8001b6a:	183b      	adds	r3, r7, r0
 8001b6c:	801a      	strh	r2, [r3, #0]

	buff[0] = MemAddress >> 8;
 8001b6e:	183b      	adds	r3, r7, r0
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	0a1b      	lsrs	r3, r3, #8
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	187b      	adds	r3, r7, r1
 8001b7a:	701a      	strb	r2, [r3, #0]
	buff[1] = MemAddress & 0xff;
 8001b7c:	183b      	adds	r3, r7, r0
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	187b      	adds	r3, r7, r1
 8001b84:	705a      	strb	r2, [r3, #1]

	i2c1_byte_tx(CHIP_ADDR, buff, 2);
 8001b86:	187b      	adds	r3, r7, r1
 8001b88:	2202      	movs	r2, #2
 8001b8a:	0019      	movs	r1, r3
 8001b8c:	20a0      	movs	r0, #160	; 0xa0
 8001b8e:	f7ff fdd7 	bl	8001740 <i2c1_byte_tx>
	i2c1_buffReceive(CHIP_ADDR, data, size);
 8001b92:	1d7b      	adds	r3, r7, #5
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	0019      	movs	r1, r3
 8001b9a:	20a0      	movs	r0, #160	; 0xa0
 8001b9c:	f7ff fd7a 	bl	8001694 <i2c1_buffReceive>
}
 8001ba0:	46c0      	nop			; (mov r8, r8)
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b005      	add	sp, #20
 8001ba6:	bd90      	pop	{r4, r7, pc}

08001ba8 <m24c64_write_N>:

void m24c64_write_N(uint8_t page, uint8_t *data, uint8_t offset, uint8_t size) {
 8001ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001baa:	b097      	sub	sp, #92	; 0x5c
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	63b9      	str	r1, [r7, #56]	; 0x38
 8001bb0:	0011      	movs	r1, r2
 8001bb2:	001e      	movs	r6, r3
 8001bb4:	233f      	movs	r3, #63	; 0x3f
 8001bb6:	18fa      	adds	r2, r7, r3
 8001bb8:	1c03      	adds	r3, r0, #0
 8001bba:	7013      	strb	r3, [r2, #0]
 8001bbc:	233e      	movs	r3, #62	; 0x3e
 8001bbe:	18fa      	adds	r2, r7, r3
 8001bc0:	1c0b      	adds	r3, r1, #0
 8001bc2:	7013      	strb	r3, [r2, #0]
 8001bc4:	233d      	movs	r3, #61	; 0x3d
 8001bc6:	18fa      	adds	r2, r7, r3
 8001bc8:	1c33      	adds	r3, r6, #0
 8001bca:	7013      	strb	r3, [r2, #0]
 8001bcc:	466b      	mov	r3, sp
 8001bce:	001e      	movs	r6, r3
	uint8_t buff[size + 2];
 8001bd0:	233d      	movs	r3, #61	; 0x3d
 8001bd2:	18fb      	adds	r3, r7, r3
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	1c9a      	adds	r2, r3, #2
 8001bd8:	1e53      	subs	r3, r2, #1
 8001bda:	657b      	str	r3, [r7, #84]	; 0x54
 8001bdc:	0013      	movs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	69b8      	ldr	r0, [r7, #24]
 8001be6:	69f9      	ldr	r1, [r7, #28]
 8001be8:	0003      	movs	r3, r0
 8001bea:	0f5b      	lsrs	r3, r3, #29
 8001bec:	469c      	mov	ip, r3
 8001bee:	000b      	movs	r3, r1
 8001bf0:	00dd      	lsls	r5, r3, #3
 8001bf2:	4663      	mov	r3, ip
 8001bf4:	431d      	orrs	r5, r3
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	00dc      	lsls	r4, r3, #3
 8001bfa:	0013      	movs	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	6938      	ldr	r0, [r7, #16]
 8001c04:	6979      	ldr	r1, [r7, #20]
 8001c06:	0003      	movs	r3, r0
 8001c08:	0f5b      	lsrs	r3, r3, #29
 8001c0a:	000c      	movs	r4, r1
 8001c0c:	00e4      	lsls	r4, r4, #3
 8001c0e:	637c      	str	r4, [r7, #52]	; 0x34
 8001c10:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8001c12:	431c      	orrs	r4, r3
 8001c14:	637c      	str	r4, [r7, #52]	; 0x34
 8001c16:	0003      	movs	r3, r0
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	633b      	str	r3, [r7, #48]	; 0x30
 8001c1c:	0013      	movs	r3, r2
 8001c1e:	3307      	adds	r3, #7
 8001c20:	08db      	lsrs	r3, r3, #3
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	466a      	mov	r2, sp
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	469d      	mov	sp, r3
 8001c2a:	466b      	mov	r3, sp
 8001c2c:	3300      	adds	r3, #0
 8001c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t read[size];
 8001c30:	233d      	movs	r3, #61	; 0x3d
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	001a      	movs	r2, r3
 8001c38:	3a01      	subs	r2, #1
 8001c3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60fa      	str	r2, [r7, #12]
 8001c42:	68b8      	ldr	r0, [r7, #8]
 8001c44:	68f9      	ldr	r1, [r7, #12]
 8001c46:	0002      	movs	r2, r0
 8001c48:	0f52      	lsrs	r2, r2, #29
 8001c4a:	000c      	movs	r4, r1
 8001c4c:	00e4      	lsls	r4, r4, #3
 8001c4e:	62fc      	str	r4, [r7, #44]	; 0x2c
 8001c50:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8001c52:	4314      	orrs	r4, r2
 8001c54:	62fc      	str	r4, [r7, #44]	; 0x2c
 8001c56:	0002      	movs	r2, r0
 8001c58:	00d2      	lsls	r2, r2, #3
 8001c5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	6838      	ldr	r0, [r7, #0]
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	0002      	movs	r2, r0
 8001c68:	0f52      	lsrs	r2, r2, #29
 8001c6a:	000c      	movs	r4, r1
 8001c6c:	00e4      	lsls	r4, r4, #3
 8001c6e:	627c      	str	r4, [r7, #36]	; 0x24
 8001c70:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001c72:	4314      	orrs	r4, r2
 8001c74:	627c      	str	r4, [r7, #36]	; 0x24
 8001c76:	0002      	movs	r2, r0
 8001c78:	00d2      	lsls	r2, r2, #3
 8001c7a:	623a      	str	r2, [r7, #32]
 8001c7c:	3307      	adds	r3, #7
 8001c7e:	08db      	lsrs	r3, r3, #3
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	466a      	mov	r2, sp
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	469d      	mov	sp, r3
 8001c88:	466b      	mov	r3, sp
 8001c8a:	3300      	adds	r3, #0
 8001c8c:	647b      	str	r3, [r7, #68]	; 0x44

	m24c64_read_N(page, read, offset, size);
 8001c8e:	233d      	movs	r3, #61	; 0x3d
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	781c      	ldrb	r4, [r3, #0]
 8001c94:	233e      	movs	r3, #62	; 0x3e
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	781a      	ldrb	r2, [r3, #0]
 8001c9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c9c:	233f      	movs	r3, #63	; 0x3f
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	7818      	ldrb	r0, [r3, #0]
 8001ca2:	0023      	movs	r3, r4
 8001ca4:	f7ff ff43 	bl	8001b2e <m24c64_read_N>

//	HAL_Delay(5);
	if (strncmp((const char*) data, (const char*) read, (size_t) size)) {
 8001ca8:	233d      	movs	r3, #61	; 0x3d
 8001caa:	18fb      	adds	r3, r7, r3
 8001cac:	781a      	ldrb	r2, [r3, #0]
 8001cae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f003 ff66 	bl	8005b84 <strncmp>
 8001cb8:	1e03      	subs	r3, r0, #0
 8001cba:	d037      	beq.n	8001d2c <m24c64_write_N+0x184>
		buff[0] = (page << PADDRPOSITION | offset) >> 8;
 8001cbc:	233f      	movs	r3, #63	; 0x3f
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	015a      	lsls	r2, r3, #5
 8001cc4:	233e      	movs	r3, #62	; 0x3e
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	121b      	asrs	r3, r3, #8
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cd2:	701a      	strb	r2, [r3, #0]
		buff[1] = (page << PADDRPOSITION | offset) & 0xff;
 8001cd4:	233f      	movs	r3, #63	; 0x3f
 8001cd6:	18fb      	adds	r3, r7, r3
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	015b      	lsls	r3, r3, #5
 8001cdc:	b25a      	sxtb	r2, r3
 8001cde:	233e      	movs	r3, #62	; 0x3e
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	b25b      	sxtb	r3, r3
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	b25b      	sxtb	r3, r3
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cee:	705a      	strb	r2, [r3, #1]
		for (int i = 0; i < size; i++) {
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	653b      	str	r3, [r7, #80]	; 0x50
 8001cf4:	e00a      	b.n	8001d0c <m24c64_write_N+0x164>
			buff[i + 2] = data[i];
 8001cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cfa:	18d2      	adds	r2, r2, r3
 8001cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cfe:	3302      	adds	r3, #2
 8001d00:	7811      	ldrb	r1, [r2, #0]
 8001d02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d04:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < size; i++) {
 8001d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d08:	3301      	adds	r3, #1
 8001d0a:	653b      	str	r3, [r7, #80]	; 0x50
 8001d0c:	233d      	movs	r3, #61	; 0x3d
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d14:	429a      	cmp	r2, r3
 8001d16:	dbee      	blt.n	8001cf6 <m24c64_write_N+0x14e>
		}
		i2c1_byte_tx(CHIP_ADDR, buff, size + 2);
 8001d18:	233d      	movs	r3, #61	; 0x3d
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	3302      	adds	r3, #2
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d24:	0019      	movs	r1, r3
 8001d26:	20a0      	movs	r0, #160	; 0xa0
 8001d28:	f7ff fd0a 	bl	8001740 <i2c1_byte_tx>
	}
	HAL_Delay(6);
 8001d2c:	2006      	movs	r0, #6
 8001d2e:	f001 feef 	bl	8003b10 <HAL_Delay>
 8001d32:	46b5      	mov	sp, r6
}
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b017      	add	sp, #92	; 0x5c
 8001d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d3c <m24c64_init_16uvalue>:

void m24c64_init_16uvalue(M24C64_ADDR_t addr, uint16_t value) {
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	0002      	movs	r2, r0
 8001d44:	1dfb      	adds	r3, r7, #7
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	1c0a      	adds	r2, r1, #0
 8001d4c:	801a      	strh	r2, [r3, #0]
	uint8_t buff[2];
	m24c64_read_N(BASE_ADDR, buff, addr, 1);
 8001d4e:	1dfb      	adds	r3, r7, #7
 8001d50:	781a      	ldrb	r2, [r3, #0]
 8001d52:	240c      	movs	r4, #12
 8001d54:	1939      	adds	r1, r7, r4
 8001d56:	2301      	movs	r3, #1
 8001d58:	2003      	movs	r0, #3
 8001d5a:	f7ff fee8 	bl	8001b2e <m24c64_read_N>
	if (!(buff[0] == IS_READY)) {
 8001d5e:	0021      	movs	r1, r4
 8001d60:	187b      	adds	r3, r7, r1
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2baa      	cmp	r3, #170	; 0xaa
 8001d66:	d014      	beq.n	8001d92 <m24c64_init_16uvalue+0x56>
		buff[0] = value >> 8;
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	187b      	adds	r3, r7, r1
 8001d74:	701a      	strb	r2, [r3, #0]
		buff[1] = value & 0xff;
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	187b      	adds	r3, r7, r1
 8001d7e:	705a      	strb	r2, [r3, #1]
		m24c64_write_N(BASE_ADDR, buff, addr + 1, 2);
 8001d80:	1dfb      	adds	r3, r7, #7
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	3301      	adds	r3, #1
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	1879      	adds	r1, r7, r1
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	2003      	movs	r0, #3
 8001d8e:	f7ff ff0b 	bl	8001ba8 <m24c64_write_N>
	}
}
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b005      	add	sp, #20
 8001d98:	bd90      	pop	{r4, r7, pc}

08001d9a <m24c64_store_16uvalue>:

void m24c64_store_16uvalue(M24C64_ADDR_t addr, uint16_t value) {
 8001d9a:	b590      	push	{r4, r7, lr}
 8001d9c:	b085      	sub	sp, #20
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	0002      	movs	r2, r0
 8001da2:	1dfb      	adds	r3, r7, #7
 8001da4:	701a      	strb	r2, [r3, #0]
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	1c0a      	adds	r2, r1, #0
 8001daa:	801a      	strh	r2, [r3, #0]
	uint8_t buff[2];
	buff[0] = value >> 8;
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	210c      	movs	r1, #12
 8001db8:	187b      	adds	r3, r7, r1
 8001dba:	701a      	strb	r2, [r3, #0]
	buff[1] = value & 0xff;
 8001dbc:	1d3b      	adds	r3, r7, #4
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	187b      	adds	r3, r7, r1
 8001dc4:	705a      	strb	r2, [r3, #1]
	m24c64_write_N(BASE_ADDR, buff, addr + 1, 2);
 8001dc6:	1dfb      	adds	r3, r7, #7
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	000c      	movs	r4, r1
 8001dd0:	1879      	adds	r1, r7, r1
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	f7ff fee7 	bl	8001ba8 <m24c64_write_N>
	buff[0] = addr;
 8001dda:	0021      	movs	r1, r4
 8001ddc:	187b      	adds	r3, r7, r1
 8001dde:	1dfa      	adds	r2, r7, #7
 8001de0:	7812      	ldrb	r2, [r2, #0]
 8001de2:	701a      	strb	r2, [r3, #0]
	m24c64_write_N(BASE_ADDR, buff, addr, 1);
 8001de4:	1dfb      	adds	r3, r7, #7
 8001de6:	781a      	ldrb	r2, [r3, #0]
 8001de8:	1879      	adds	r1, r7, r1
 8001dea:	2301      	movs	r3, #1
 8001dec:	2003      	movs	r0, #3
 8001dee:	f7ff fedb 	bl	8001ba8 <m24c64_write_N>
}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b005      	add	sp, #20
 8001df8:	bd90      	pop	{r4, r7, pc}
	...

08001dfc <print_parameters>:
/* USER CODE BEGIN PFP */

uint8_t get_db_gain(uint16_t adc_gain);
uint8_t get_dbm_pout(uint16_t pout_adc);

void print_parameters(UART1_t *u, Module_t m) {
 8001dfc:	b084      	sub	sp, #16
 8001dfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e00:	b087      	sub	sp, #28
 8001e02:	af04      	add	r7, sp, #16
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	2004      	movs	r0, #4
 8001e08:	2420      	movs	r4, #32
 8001e0a:	1900      	adds	r0, r0, r4
 8001e0c:	19c0      	adds	r0, r0, r7
 8001e0e:	6001      	str	r1, [r0, #0]
 8001e10:	6042      	str	r2, [r0, #4]
 8001e12:	6083      	str	r3, [r0, #8]
	sprintf((char*) u->tx_buffer,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6858      	ldr	r0, [r3, #4]
			"Pout %d[dBm] Att %u[dB] Gain %u[dB] Pin %d[dBm] Curent %d[mA] Voltage %u[V]\r\n",
			m.pout, m.att, m.gain, m.pin, m.current, (uint8_t) m.voltage);
 8001e18:	2304      	movs	r3, #4
 8001e1a:	0021      	movs	r1, r4
 8001e1c:	185b      	adds	r3, r3, r1
 8001e1e:	19db      	adds	r3, r3, r7
 8001e20:	789b      	ldrb	r3, [r3, #2]
 8001e22:	b25b      	sxtb	r3, r3
	sprintf((char*) u->tx_buffer,
 8001e24:	001e      	movs	r6, r3
			m.pout, m.att, m.gain, m.pin, m.current, (uint8_t) m.voltage);
 8001e26:	2304      	movs	r3, #4
 8001e28:	185b      	adds	r3, r3, r1
 8001e2a:	19db      	adds	r3, r3, r7
 8001e2c:	781b      	ldrb	r3, [r3, #0]
	sprintf((char*) u->tx_buffer,
 8001e2e:	469c      	mov	ip, r3
			m.pout, m.att, m.gain, m.pin, m.current, (uint8_t) m.voltage);
 8001e30:	2304      	movs	r3, #4
 8001e32:	185b      	adds	r3, r3, r1
 8001e34:	19db      	adds	r3, r3, r7
 8001e36:	785b      	ldrb	r3, [r3, #1]
	sprintf((char*) u->tx_buffer,
 8001e38:	001a      	movs	r2, r3
			m.pout, m.att, m.gain, m.pin, m.current, (uint8_t) m.voltage);
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	185b      	adds	r3, r3, r1
 8001e3e:	19db      	adds	r3, r3, r7
 8001e40:	795b      	ldrb	r3, [r3, #5]
 8001e42:	b25b      	sxtb	r3, r3
	sprintf((char*) u->tx_buffer,
 8001e44:	001c      	movs	r4, r3
			m.pout, m.att, m.gain, m.pin, m.current, (uint8_t) m.voltage);
 8001e46:	2304      	movs	r3, #4
 8001e48:	185b      	adds	r3, r3, r1
 8001e4a:	19db      	adds	r3, r3, r7
 8001e4c:	799b      	ldrb	r3, [r3, #6]
	sprintf((char*) u->tx_buffer,
 8001e4e:	001d      	movs	r5, r3
			m.pout, m.att, m.gain, m.pin, m.current, (uint8_t) m.voltage);
 8001e50:	2304      	movs	r3, #4
 8001e52:	185b      	adds	r3, r3, r1
 8001e54:	19db      	adds	r3, r3, r7
 8001e56:	791b      	ldrb	r3, [r3, #4]
	sprintf((char*) u->tx_buffer,
 8001e58:	490c      	ldr	r1, [pc, #48]	; (8001e8c <print_parameters+0x90>)
 8001e5a:	9303      	str	r3, [sp, #12]
 8001e5c:	9502      	str	r5, [sp, #8]
 8001e5e:	9401      	str	r4, [sp, #4]
 8001e60:	9200      	str	r2, [sp, #0]
 8001e62:	4663      	mov	r3, ip
 8001e64:	0032      	movs	r2, r6
 8001e66:	f003 fe6d 	bl	8005b44 <siprintf>
	uart1_send_frame((char*) u->tx_buffer, TX_BUFFLEN);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2164      	movs	r1, #100	; 0x64
 8001e70:	0018      	movs	r0, r3
 8001e72:	f001 fcf1 	bl	8003858 <uart1_send_frame>
	uart1_clean_buffer(u);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f001 fd13 	bl	80038a4 <uart1_clean_buffer>
}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b003      	add	sp, #12
 8001e84:	bcf0      	pop	{r4, r5, r6, r7}
 8001e86:	bc08      	pop	{r3}
 8001e88:	b004      	add	sp, #16
 8001e8a:	4718      	bx	r3
 8001e8c:	08006350 	.word	0x08006350

08001e90 <print_adc>:
void print_adc(UART1_t *u, uint16_t *adc) {
 8001e90:	b5b0      	push	{r4, r5, r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
	sprintf((char*) u->tx_buffer,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6858      	ldr	r0, [r3, #4]
			"Pout %d  \t Gain %u \t Curent %u \t Voltage %u\r\n", adc[POUT_i],
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	3302      	adds	r3, #2
 8001ea2:	881b      	ldrh	r3, [r3, #0]
	sprintf((char*) u->tx_buffer,
 8001ea4:	001c      	movs	r4, r3
			adc[GAIN_i], adc[CURRENT_i], adc[VOLTAGE_i]);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	881b      	ldrh	r3, [r3, #0]
	sprintf((char*) u->tx_buffer,
 8001eaa:	001d      	movs	r5, r3
			adc[GAIN_i], adc[CURRENT_i], adc[VOLTAGE_i]);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	3306      	adds	r3, #6
 8001eb0:	881b      	ldrh	r3, [r3, #0]
	sprintf((char*) u->tx_buffer,
 8001eb2:	001a      	movs	r2, r3
			adc[GAIN_i], adc[CURRENT_i], adc[VOLTAGE_i]);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	881b      	ldrh	r3, [r3, #0]
	sprintf((char*) u->tx_buffer,
 8001eba:	490a      	ldr	r1, [pc, #40]	; (8001ee4 <print_adc+0x54>)
 8001ebc:	9301      	str	r3, [sp, #4]
 8001ebe:	9200      	str	r2, [sp, #0]
 8001ec0:	002b      	movs	r3, r5
 8001ec2:	0022      	movs	r2, r4
 8001ec4:	f003 fe3e 	bl	8005b44 <siprintf>
	uart1_send_frame((char*) u->tx_buffer, TX_BUFFLEN);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2164      	movs	r1, #100	; 0x64
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f001 fcc2 	bl	8003858 <uart1_send_frame>
	uart1_clean_buffer(u);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f001 fce4 	bl	80038a4 <uart1_clean_buffer>
}
 8001edc:	46c0      	nop			; (mov r8, r8)
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b002      	add	sp, #8
 8001ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee4:	080063a0 	.word	0x080063a0

08001ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ee8:	b5b0      	push	{r4, r5, r7, lr}
 8001eea:	b096      	sub	sp, #88	; 0x58
 8001eec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eee:	f001 fd89 	bl	8003a04 <HAL_Init>

  /* USER CODE BEGIN Init */

	/* enable clock access ro GPIOA and GPIOB */
	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOAEN);
 8001ef2:	4bc8      	ldr	r3, [pc, #800]	; (8002214 <main+0x32c>)
 8001ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ef6:	4bc7      	ldr	r3, [pc, #796]	; (8002214 <main+0x32c>)
 8001ef8:	2101      	movs	r1, #1
 8001efa:	430a      	orrs	r2, r1
 8001efc:	635a      	str	r2, [r3, #52]	; 0x34
	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN);
 8001efe:	4bc5      	ldr	r3, [pc, #788]	; (8002214 <main+0x32c>)
 8001f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f02:	4bc4      	ldr	r3, [pc, #784]	; (8002214 <main+0x32c>)
 8001f04:	2102      	movs	r1, #2
 8001f06:	430a      	orrs	r2, r1
 8001f08:	635a      	str	r2, [r3, #52]	; 0x34
    SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOCEN);
 8001f0a:	4bc2      	ldr	r3, [pc, #776]	; (8002214 <main+0x32c>)
 8001f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f0e:	4bc1      	ldr	r3, [pc, #772]	; (8002214 <main+0x32c>)
 8001f10:	2104      	movs	r1, #4
 8001f12:	430a      	orrs	r2, r1
 8001f14:	635a      	str	r2, [r3, #52]	; 0x34
	/* PA15 as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE15_0);
 8001f16:	23a0      	movs	r3, #160	; 0xa0
 8001f18:	05db      	lsls	r3, r3, #23
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	23a0      	movs	r3, #160	; 0xa0
 8001f1e:	05db      	lsls	r3, r3, #23
 8001f20:	2180      	movs	r1, #128	; 0x80
 8001f22:	05c9      	lsls	r1, r1, #23
 8001f24:	430a      	orrs	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE15_1);
 8001f28:	23a0      	movs	r3, #160	; 0xa0
 8001f2a:	05db      	lsls	r3, r3, #23
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	23a0      	movs	r3, #160	; 0xa0
 8001f30:	05db      	lsls	r3, r3, #23
 8001f32:	0052      	lsls	r2, r2, #1
 8001f34:	0852      	lsrs	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

	/* PB5 as output */
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE5_0);
 8001f38:	4bb7      	ldr	r3, [pc, #732]	; (8002218 <main+0x330>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4bb6      	ldr	r3, [pc, #728]	; (8002218 <main+0x330>)
 8001f3e:	2180      	movs	r1, #128	; 0x80
 8001f40:	00c9      	lsls	r1, r1, #3
 8001f42:	430a      	orrs	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE5_1);
 8001f46:	4bb4      	ldr	r3, [pc, #720]	; (8002218 <main+0x330>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4bb3      	ldr	r3, [pc, #716]	; (8002218 <main+0x330>)
 8001f4c:	49b3      	ldr	r1, [pc, #716]	; (800221c <main+0x334>)
 8001f4e:	400a      	ands	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f52:	f000 fb65 	bl	8002620 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f56:	f000 fcd7 	bl	8002908 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f5a:	f000 fcb7 	bl	80028cc <MX_DMA_Init>
  MX_ADC1_Init();
 8001f5e:	f000 fbbd 	bl	80026dc <MX_ADC1_Init>
  MX_IWDG_Init();
 8001f62:	f000 fc93 	bl	800288c <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

   module_init(&pa, POWER_AMPLIFIER, ID8);
 8001f66:	243c      	movs	r4, #60	; 0x3c
 8001f68:	193b      	adds	r3, r7, r4
 8001f6a:	2208      	movs	r2, #8
 8001f6c:	2109      	movs	r1, #9
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f000 ff66 	bl	8002e40 <module_init>
	led_init();
 8001f74:	f7ff fc92 	bl	800189c <led_init>
	led_reset(&led);
 8001f78:	2308      	movs	r3, #8
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f7ff fd45 	bl	8001a0c <led_reset>
	i2c1_init();
 8001f82:	f7ff fad1 	bl	8001528 <i2c1_init>
	uart1_init(HS16_CLK, BAUD_RATE, &uart1);
 8001f86:	4aa6      	ldr	r2, [pc, #664]	; (8002220 <main+0x338>)
 8001f88:	23e1      	movs	r3, #225	; 0xe1
 8001f8a:	025b      	lsls	r3, r3, #9
 8001f8c:	48a5      	ldr	r0, [pc, #660]	; (8002224 <main+0x33c>)
 8001f8e:	0019      	movs	r1, r3
 8001f90:	f001 fb68 	bl	8003664 <uart1_init>
	lm75_init();
 8001f94:	f7ff fd8e 	bl	8001ab4 <lm75_init>
	rs485_init(&rs485);
 8001f98:	2330      	movs	r3, #48	; 0x30
 8001f9a:	18fb      	adds	r3, r7, r3
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f000 ffb9 	bl	8002f14 <rs485_init>

// Calibrate The ADC On Power-Up For Better Accuracy
//	HAL_ADCEx_Calibration_Start(&hadc1);
	uart1_send_str("PA init\n\r");
 8001fa2:	4ba1      	ldr	r3, [pc, #644]	; (8002228 <main+0x340>)
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f001 fc33 	bl	8003810 <uart1_send_str>
//	uint8_t addrs[5] = { 0 };  // 0x50 0x60 0x4f
//	i2c1_scanner(addrs);


	m24c64_read_N(BASE_ADDR, &(pa.att), ATT_VALUE_ADDR, 1);
 8001faa:	1939      	adds	r1, r7, r4
 8001fac:	2301      	movs	r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	2003      	movs	r0, #3
 8001fb2:	f7ff fdbc 	bl	8001b2e <m24c64_read_N>

	if (pa.att > 0 && pa.att < 30)
 8001fb6:	193b      	adds	r3, r7, r4
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <main+0xee>
 8001fbe:	193b      	adds	r3, r7, r4
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b1d      	cmp	r3, #29
 8001fc4:	d807      	bhi.n	8001fd6 <main+0xee>
		bda4601_set_initial_att(pa.att, STARTING_MILLIS);
 8001fc6:	193b      	adds	r3, r7, r4
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	4a98      	ldr	r2, [pc, #608]	; (800222c <main+0x344>)
 8001fcc:	0011      	movs	r1, r2
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f7ff fa5e 	bl	8001490 <bda4601_set_initial_att>
 8001fd4:	e003      	b.n	8001fde <main+0xf6>
	else
		bda4601_set_att(0, 3);
 8001fd6:	2103      	movs	r1, #3
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7ff f9d5 	bl	8001388 <bda4601_set_att>

	m24c64_init_16uvalue(POUT_MAX_READY_ADDR, AD8363_ADC_MAX);
 8001fde:	4b94      	ldr	r3, [pc, #592]	; (8002230 <main+0x348>)
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	2004      	movs	r0, #4
 8001fe4:	f7ff feaa 	bl	8001d3c <m24c64_init_16uvalue>
	m24c64_init_16uvalue(POUT_MIN_READY_ADDR, AD8363_ADC_MIN);
 8001fe8:	23e8      	movs	r3, #232	; 0xe8
 8001fea:	33ff      	adds	r3, #255	; 0xff
 8001fec:	0019      	movs	r1, r3
 8001fee:	2007      	movs	r0, #7
 8001ff0:	f7ff fea4 	bl	8001d3c <m24c64_init_16uvalue>
	m24c64_init_16uvalue(PIN_MAX_READY_ADDR, MAX4003_ADC_MAX);
 8001ff4:	23ec      	movs	r3, #236	; 0xec
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	0019      	movs	r1, r3
 8001ffa:	200a      	movs	r0, #10
 8001ffc:	f7ff fe9e 	bl	8001d3c <m24c64_init_16uvalue>
	m24c64_init_16uvalue(PIN_MIN_READY_ADDR, MAX4003_ADC_MIN);
 8002000:	23e8      	movs	r3, #232	; 0xe8
 8002002:	33ff      	adds	r3, #255	; 0xff
 8002004:	0019      	movs	r1, r3
 8002006:	200d      	movs	r0, #13
 8002008:	f7ff fe98 	bl	8001d3c <m24c64_init_16uvalue>
	m24c64_init_16uvalue(VSWR_MAX_READY_ADDR, MAX4003_ADC_MAX);
 800200c:	23ec      	movs	r3, #236	; 0xec
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	0019      	movs	r1, r3
 8002012:	2010      	movs	r0, #16
 8002014:	f7ff fe92 	bl	8001d3c <m24c64_init_16uvalue>
	m24c64_init_16uvalue(VSWR_MIN_READY_ADDR, MAX4003_ADC_MIN);
 8002018:	23e8      	movs	r3, #232	; 0xe8
 800201a:	33ff      	adds	r3, #255	; 0xff
 800201c:	0019      	movs	r1, r3
 800201e:	2013      	movs	r0, #19
 8002020:	f7ff fe8c 	bl	8001d3c <m24c64_init_16uvalue>

	m24c64_read_N(BASE_ADDR, rcv_buff, POUT_ADC_MIN_ADDR_0, 2);
 8002024:	1d39      	adds	r1, r7, #4
 8002026:	2302      	movs	r3, #2
 8002028:	2208      	movs	r2, #8
 800202a:	2003      	movs	r0, #3
 800202c:	f7ff fd7f 	bl	8001b2e <m24c64_read_N>
	pout.min = (rcv_buff[0] << 8) | (rcv_buff[1] & 0xff);
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	021b      	lsls	r3, r3, #8
 8002036:	b21a      	sxth	r2, r3
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	785b      	ldrb	r3, [r3, #1]
 800203c:	b21b      	sxth	r3, r3
 800203e:	4313      	orrs	r3, r2
 8002040:	b21b      	sxth	r3, r3
 8002042:	b29a      	uxth	r2, r3
 8002044:	242c      	movs	r4, #44	; 0x2c
 8002046:	193b      	adds	r3, r7, r4
 8002048:	805a      	strh	r2, [r3, #2]
	m24c64_read_N(BASE_ADDR, rcv_buff, POUT_ADC_MAX_ADDR_0, 2);
 800204a:	1d39      	adds	r1, r7, #4
 800204c:	2302      	movs	r3, #2
 800204e:	2205      	movs	r2, #5
 8002050:	2003      	movs	r0, #3
 8002052:	f7ff fd6c 	bl	8001b2e <m24c64_read_N>
	pout.max = (rcv_buff[0] << 8) | (rcv_buff[1] & 0xff);
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	b21a      	sxth	r2, r3
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	785b      	ldrb	r3, [r3, #1]
 8002062:	b21b      	sxth	r3, r3
 8002064:	4313      	orrs	r3, r2
 8002066:	b21b      	sxth	r3, r3
 8002068:	b29a      	uxth	r2, r3
 800206a:	193b      	adds	r3, r7, r4
 800206c:	801a      	strh	r2, [r3, #0]
	m24c64_read_N(BASE_ADDR, rcv_buff, PIN_ADC_MIN_ADDR_0, 2);
 800206e:	1d39      	adds	r1, r7, #4
 8002070:	2302      	movs	r3, #2
 8002072:	220e      	movs	r2, #14
 8002074:	2003      	movs	r0, #3
 8002076:	f7ff fd5a 	bl	8001b2e <m24c64_read_N>
	pin.min = (rcv_buff[0] << 8) | (rcv_buff[1] & 0xff);
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	b21a      	sxth	r2, r3
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	785b      	ldrb	r3, [r3, #1]
 8002086:	b21b      	sxth	r3, r3
 8002088:	4313      	orrs	r3, r2
 800208a:	b21b      	sxth	r3, r3
 800208c:	b29a      	uxth	r2, r3
 800208e:	2428      	movs	r4, #40	; 0x28
 8002090:	193b      	adds	r3, r7, r4
 8002092:	805a      	strh	r2, [r3, #2]
	m24c64_read_N(BASE_ADDR, rcv_buff, PIN_ADC_MAX_ADDR_0, 2);
 8002094:	1d39      	adds	r1, r7, #4
 8002096:	2302      	movs	r3, #2
 8002098:	220b      	movs	r2, #11
 800209a:	2003      	movs	r0, #3
 800209c:	f7ff fd47 	bl	8001b2e <m24c64_read_N>
	pin.max = (rcv_buff[0] << 8) | (rcv_buff[1] & 0xff);
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	021b      	lsls	r3, r3, #8
 80020a6:	b21a      	sxth	r2, r3
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	785b      	ldrb	r3, [r3, #1]
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	4313      	orrs	r3, r2
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	193b      	adds	r3, r7, r4
 80020b6:	801a      	strh	r2, [r3, #0]
	m24c64_read_N(BASE_ADDR, rcv_buff, VSWR_ADC_MIN_ADDR_0, 2);
 80020b8:	1d39      	adds	r1, r7, #4
 80020ba:	2302      	movs	r3, #2
 80020bc:	2214      	movs	r2, #20
 80020be:	2003      	movs	r0, #3
 80020c0:	f7ff fd35 	bl	8001b2e <m24c64_read_N>
	vswr.min = (rcv_buff[0] << 8) | (rcv_buff[1] & 0xff);
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	b21a      	sxth	r2, r3
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	785b      	ldrb	r3, [r3, #1]
 80020d0:	b21b      	sxth	r3, r3
 80020d2:	4313      	orrs	r3, r2
 80020d4:	b21b      	sxth	r3, r3
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	2424      	movs	r4, #36	; 0x24
 80020da:	193b      	adds	r3, r7, r4
 80020dc:	805a      	strh	r2, [r3, #2]
	m24c64_read_N(BASE_ADDR, rcv_buff, VSWR_ADC_MAX_ADDR_0, 2);
 80020de:	1d39      	adds	r1, r7, #4
 80020e0:	2302      	movs	r3, #2
 80020e2:	2211      	movs	r2, #17
 80020e4:	2003      	movs	r0, #3
 80020e6:	f7ff fd22 	bl	8001b2e <m24c64_read_N>
	vswr.max = (rcv_buff[0] << 8) | (rcv_buff[1] & 0xff);
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	b21a      	sxth	r2, r3
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	785b      	ldrb	r3, [r3, #1]
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	4313      	orrs	r3, r2
 80020fa:	b21b      	sxth	r3, r3
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	193b      	adds	r3, r7, r4
 8002100:	801a      	strh	r2, [r3, #0]
	uart1_send_str("PA main end\n\r");
 8002102:	4b4c      	ldr	r3, [pc, #304]	; (8002234 <main+0x34c>)
 8002104:	0018      	movs	r0, r3
 8002106:	f001 fb83 	bl	8003810 <uart1_send_str>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, 4);
//	led.ka_counter = HAL_GetTick();
	uart1.timeout = HAL_GetTick();
 800210a:	f001 fcf7 	bl	8003afc <HAL_GetTick>
 800210e:	0002      	movs	r2, r0
 8002110:	4b43      	ldr	r3, [pc, #268]	; (8002220 <main+0x338>)
 8002112:	60da      	str	r2, [r3, #12]
	rs485.status  = WAITING;
 8002114:	2330      	movs	r3, #48	; 0x30
 8002116:	18fb      	adds	r3, r7, r3
 8002118:	2208      	movs	r2, #8
 800211a:	721a      	strb	r2, [r3, #8]
	while (1) {


		/* USER CODE BEGIN 3 */

		switch (rs485.status) {
 800211c:	2330      	movs	r3, #48	; 0x30
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	7a1b      	ldrb	r3, [r3, #8]
 8002122:	2b08      	cmp	r3, #8
 8002124:	d85f      	bhi.n	80021e6 <main+0x2fe>
 8002126:	009a      	lsls	r2, r3, #2
 8002128:	4b43      	ldr	r3, [pc, #268]	; (8002238 <main+0x350>)
 800212a:	18d3      	adds	r3, r2, r3
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	469f      	mov	pc, r3
		case DATA_OK:
			rs485.cmd = uart1.rx_buffer[3];
 8002130:	4b3b      	ldr	r3, [pc, #236]	; (8002220 <main+0x338>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	3303      	adds	r3, #3
 8002136:	781a      	ldrb	r2, [r3, #0]
 8002138:	2130      	movs	r1, #48	; 0x30
 800213a:	187b      	adds	r3, r7, r1
 800213c:	701a      	strb	r2, [r3, #0]
			rs485.status = WAITING;
 800213e:	187b      	adds	r3, r7, r1
 8002140:	2208      	movs	r2, #8
 8002142:	721a      	strb	r2, [r3, #8]
			break;
 8002144:	e059      	b.n	80021fa <main+0x312>
		case START_READING:
			rs485.status = WAITING;
 8002146:	2430      	movs	r4, #48	; 0x30
 8002148:	193b      	adds	r3, r7, r4
 800214a:	2208      	movs	r2, #8
 800214c:	721a      	strb	r2, [r3, #8]
			if(uart1_clean_by_timeout(&uart1,"START_READING"))
 800214e:	4a3b      	ldr	r2, [pc, #236]	; (800223c <main+0x354>)
 8002150:	4b33      	ldr	r3, [pc, #204]	; (8002220 <main+0x338>)
 8002152:	0011      	movs	r1, r2
 8002154:	0018      	movs	r0, r3
 8002156:	f001 f9f7 	bl	8003548 <uart1_clean_by_timeout>
 800215a:	1e03      	subs	r3, r0, #0
 800215c:	d04c      	beq.n	80021f8 <main+0x310>
				rs485.status = NO_DATA;
 800215e:	193b      	adds	r3, r7, r4
 8002160:	2207      	movs	r2, #7
 8002162:	721a      	strb	r2, [r3, #8]
			break;
 8002164:	e048      	b.n	80021f8 <main+0x310>
		case VALID_FRAME:
			 rs485.status = rs485_check_valid_module(&uart1);
 8002166:	4b2e      	ldr	r3, [pc, #184]	; (8002220 <main+0x338>)
 8002168:	0018      	movs	r0, r3
 800216a:	f000 ff08 	bl	8002f7e <rs485_check_valid_module>
 800216e:	0003      	movs	r3, r0
 8002170:	001a      	movs	r2, r3
 8002172:	2330      	movs	r3, #48	; 0x30
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	721a      	strb	r2, [r3, #8]
			break;
 8002178:	e03f      	b.n	80021fa <main+0x312>
		case NOT_VALID_FRAME:
			// TODO
			uart1_clean_buffer(&uart1);
 800217a:	4b29      	ldr	r3, [pc, #164]	; (8002220 <main+0x338>)
 800217c:	0018      	movs	r0, r3
 800217e:	f001 fb91 	bl	80038a4 <uart1_clean_buffer>
			rs485.status= NO_DATA;
 8002182:	2330      	movs	r3, #48	; 0x30
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	2207      	movs	r2, #7
 8002188:	721a      	strb	r2, [r3, #8]
			break;
 800218a:	e036      	b.n	80021fa <main+0x312>
		case WRONG_MODULE_ID:
			// TODO
			uart1_clean_buffer(&uart1);
 800218c:	4b24      	ldr	r3, [pc, #144]	; (8002220 <main+0x338>)
 800218e:	0018      	movs	r0, r3
 8002190:	f001 fb88 	bl	80038a4 <uart1_clean_buffer>
			rs485.status= NO_DATA;
 8002194:	2330      	movs	r3, #48	; 0x30
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	2207      	movs	r2, #7
 800219a:	721a      	strb	r2, [r3, #8]
			break;
 800219c:	e02d      	b.n	80021fa <main+0x312>
		case CRC_ERROR:
			// TODO add crc
			uart1_clean_buffer(&uart1);
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <main+0x338>)
 80021a0:	0018      	movs	r0, r3
 80021a2:	f001 fb7f 	bl	80038a4 <uart1_clean_buffer>
			break;
 80021a6:	e028      	b.n	80021fa <main+0x312>
		case WAITING:
			rs485.status = rs485_check_frame(&rs485, &uart1);
 80021a8:	4a1d      	ldr	r2, [pc, #116]	; (8002220 <main+0x338>)
 80021aa:	2430      	movs	r4, #48	; 0x30
 80021ac:	193b      	adds	r3, r7, r4
 80021ae:	0011      	movs	r1, r2
 80021b0:	0018      	movs	r0, r3
 80021b2:	f000 fec0 	bl	8002f36 <rs485_check_frame>
 80021b6:	0003      	movs	r3, r0
 80021b8:	001a      	movs	r2, r3
 80021ba:	193b      	adds	r3, r7, r4
 80021bc:	721a      	strb	r2, [r3, #8]
			uart1_clean_by_timeout(&uart1,"WAITING");
 80021be:	4a20      	ldr	r2, [pc, #128]	; (8002240 <main+0x358>)
 80021c0:	4b17      	ldr	r3, [pc, #92]	; (8002220 <main+0x338>)
 80021c2:	0011      	movs	r1, r2
 80021c4:	0018      	movs	r0, r3
 80021c6:	f001 f9bf 	bl	8003548 <uart1_clean_by_timeout>
			break;
 80021ca:	e016      	b.n	80021fa <main+0x312>
		case NO_DATA:
			uart1_send_str("NO_DATA\r\n");
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <main+0x35c>)
 80021ce:	0018      	movs	r0, r3
 80021d0:	f001 fb1e 	bl	8003810 <uart1_send_str>
			uart1_clean_buffer(&uart1);
 80021d4:	4b12      	ldr	r3, [pc, #72]	; (8002220 <main+0x338>)
 80021d6:	0018      	movs	r0, r3
 80021d8:	f001 fb64 	bl	80038a4 <uart1_clean_buffer>
			rs485.status = WAITING;
 80021dc:	2330      	movs	r3, #48	; 0x30
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	2208      	movs	r2, #8
 80021e2:	721a      	strb	r2, [r3, #8]
			break;
 80021e4:	e009      	b.n	80021fa <main+0x312>
		default:
			rs485.status= NO_DATA;
 80021e6:	2330      	movs	r3, #48	; 0x30
 80021e8:	18fb      	adds	r3, r7, r3
 80021ea:	2207      	movs	r2, #7
 80021ec:	721a      	strb	r2, [r3, #8]
			uart1_clean_buffer(&uart1);
 80021ee:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <main+0x338>)
 80021f0:	0018      	movs	r0, r3
 80021f2:	f001 fb57 	bl	80038a4 <uart1_clean_buffer>
			break;
 80021f6:	e000      	b.n	80021fa <main+0x312>
			break;
 80021f8:	46c0      	nop			; (mov r8, r8)
		}


		switch (rs485.cmd) {
 80021fa:	2330      	movs	r3, #48	; 0x30
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	3b11      	subs	r3, #17
 8002202:	2b15      	cmp	r3, #21
 8002204:	d900      	bls.n	8002208 <main+0x320>
 8002206:	e1eb      	b.n	80025e0 <main+0x6f8>
 8002208:	009a      	lsls	r2, r3, #2
 800220a:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <main+0x360>)
 800220c:	18d3      	adds	r3, r2, r3
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	469f      	mov	pc, r3
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	40021000 	.word	0x40021000
 8002218:	50000400 	.word	0x50000400
 800221c:	fffff7ff 	.word	0xfffff7ff
 8002220:	20000168 	.word	0x20000168
 8002224:	00f42400 	.word	0x00f42400
 8002228:	080063d0 	.word	0x080063d0
 800222c:	00001388 	.word	0x00001388
 8002230:	0000075a 	.word	0x0000075a
 8002234:	080063dc 	.word	0x080063dc
 8002238:	08006568 	.word	0x08006568
 800223c:	080063ec 	.word	0x080063ec
 8002240:	080063fc 	.word	0x080063fc
 8002244:	08006404 	.word	0x08006404
 8002248:	0800658c 	.word	0x0800658c
		case QUERY_PARAMETER_LTEL:
			pa.pr = max4003_get_dbm(&vswr, adc_media[VSWR_i]);
 800224c:	4bea      	ldr	r3, [pc, #936]	; (80025f8 <main+0x710>)
 800224e:	891a      	ldrh	r2, [r3, #8]
 8002250:	2324      	movs	r3, #36	; 0x24
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	0011      	movs	r1, r2
 8002256:	0018      	movs	r0, r3
 8002258:	f000 fd9e 	bl	8002d98 <max4003_get_dbm>
 800225c:	0003      	movs	r3, r0
 800225e:	b25a      	sxtb	r2, r3
 8002260:	243c      	movs	r4, #60	; 0x3c
 8002262:	193b      	adds	r3, r7, r4
 8002264:	70da      	strb	r2, [r3, #3]
			pa.pout = ad8363_get_dbm(&pout, adc_media[POUT_i]);
 8002266:	4be4      	ldr	r3, [pc, #912]	; (80025f8 <main+0x710>)
 8002268:	885a      	ldrh	r2, [r3, #2]
 800226a:	232c      	movs	r3, #44	; 0x2c
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	0011      	movs	r1, r2
 8002270:	0018      	movs	r0, r3
 8002272:	f7ff f835 	bl	80012e0 <ad8363_get_dbm>
 8002276:	0003      	movs	r3, r0
 8002278:	b25a      	sxtb	r2, r3
 800227a:	193b      	adds	r3, r7, r4
 800227c:	709a      	strb	r2, [r3, #2]
			pa.current = ADC_CURRENT_FACTOR * adc_media[CURRENT_i] / 4096.0f;
 800227e:	4bde      	ldr	r3, [pc, #888]	; (80025f8 <main+0x710>)
 8002280:	88db      	ldrh	r3, [r3, #6]
 8002282:	0018      	movs	r0, r3
 8002284:	f7fe ff7e 	bl	8001184 <__aeabi_i2f>
 8002288:	1c03      	adds	r3, r0, #0
 800228a:	4adc      	ldr	r2, [pc, #880]	; (80025fc <main+0x714>)
 800228c:	1c11      	adds	r1, r2, #0
 800228e:	1c18      	adds	r0, r3, #0
 8002290:	f7fe fc6e 	bl	8000b70 <__aeabi_fmul>
 8002294:	1c03      	adds	r3, r0, #0
 8002296:	218b      	movs	r1, #139	; 0x8b
 8002298:	05c9      	lsls	r1, r1, #23
 800229a:	1c18      	adds	r0, r3, #0
 800229c:	f7fe faa0 	bl	80007e0 <__aeabi_fdiv>
 80022a0:	1c03      	adds	r3, r0, #0
 80022a2:	1c18      	adds	r0, r3, #0
 80022a4:	f7fe f8e6 	bl	8000474 <__aeabi_f2uiz>
 80022a8:	0003      	movs	r3, r0
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	193b      	adds	r3, r7, r4
 80022ae:	719a      	strb	r2, [r3, #6]
			pa.gain = get_db_gain(adc_media[GAIN_i]);
 80022b0:	4bd1      	ldr	r3, [pc, #836]	; (80025f8 <main+0x710>)
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	0018      	movs	r0, r3
 80022b6:	f000 fbeb 	bl	8002a90 <get_db_gain>
 80022ba:	0003      	movs	r3, r0
 80022bc:	001a      	movs	r2, r3
 80022be:	193b      	adds	r3, r7, r4
 80022c0:	705a      	strb	r2, [r3, #1]
			pa.vswr = module_vswr_calc(pa.pout, pa.pr);
 80022c2:	193b      	adds	r3, r7, r4
 80022c4:	2202      	movs	r2, #2
 80022c6:	569a      	ldrsb	r2, [r3, r2]
 80022c8:	193b      	adds	r3, r7, r4
 80022ca:	78db      	ldrb	r3, [r3, #3]
 80022cc:	b25b      	sxtb	r3, r3
 80022ce:	0019      	movs	r1, r3
 80022d0:	0010      	movs	r0, r2
 80022d2:	f000 fddf 	bl	8002e94 <module_vswr_calc>
 80022d6:	1c02      	adds	r2, r0, #0
 80022d8:	193b      	adds	r3, r7, r4
 80022da:	60da      	str	r2, [r3, #12]
			pa.pin = max4003_get_dbm(&pin, adc_media[PIN_i]);
 80022dc:	4bc6      	ldr	r3, [pc, #792]	; (80025f8 <main+0x710>)
 80022de:	895a      	ldrh	r2, [r3, #10]
 80022e0:	2328      	movs	r3, #40	; 0x28
 80022e2:	18fb      	adds	r3, r7, r3
 80022e4:	0011      	movs	r1, r2
 80022e6:	0018      	movs	r0, r3
 80022e8:	f000 fd56 	bl	8002d98 <max4003_get_dbm>
 80022ec:	0003      	movs	r3, r0
 80022ee:	b25a      	sxtb	r2, r3
 80022f0:	193b      	adds	r3, r7, r4
 80022f2:	715a      	strb	r2, [r3, #5]
			pa.voltage = ADC_VOLTAGE_FACTOR * adc_media[VOLTAGE_i] / 4096.0f;
 80022f4:	4bc0      	ldr	r3, [pc, #768]	; (80025f8 <main+0x710>)
 80022f6:	889b      	ldrh	r3, [r3, #4]
 80022f8:	0018      	movs	r0, r3
 80022fa:	f7fe ff43 	bl	8001184 <__aeabi_i2f>
 80022fe:	1c03      	adds	r3, r0, #0
 8002300:	4abf      	ldr	r2, [pc, #764]	; (8002600 <main+0x718>)
 8002302:	1c11      	adds	r1, r2, #0
 8002304:	1c18      	adds	r0, r3, #0
 8002306:	f7fe fc33 	bl	8000b70 <__aeabi_fmul>
 800230a:	1c03      	adds	r3, r0, #0
 800230c:	218b      	movs	r1, #139	; 0x8b
 800230e:	05c9      	lsls	r1, r1, #23
 8002310:	1c18      	adds	r0, r3, #0
 8002312:	f7fe fa65 	bl	80007e0 <__aeabi_fdiv>
 8002316:	1c03      	adds	r3, r0, #0
 8002318:	1c18      	adds	r0, r3, #0
 800231a:	f7fe f8ab 	bl	8000474 <__aeabi_f2uiz>
 800231e:	0003      	movs	r3, r0
 8002320:	b2da      	uxtb	r2, r3
 8002322:	193b      	adds	r3, r7, r4
 8002324:	711a      	strb	r2, [r3, #4]
			rs485.len = 14;
 8002326:	2430      	movs	r4, #48	; 0x30
 8002328:	193b      	adds	r3, r7, r4
 800232a:	220e      	movs	r2, #14
 800232c:	705a      	strb	r2, [r3, #1]
			rs485.frame = (uint8_t*) malloc(14);
 800232e:	200e      	movs	r0, #14
 8002330:	f003 faf8 	bl	8005924 <malloc>
 8002334:	0003      	movs	r3, r0
 8002336:	001a      	movs	r2, r3
 8002338:	193b      	adds	r3, r7, r4
 800233a:	605a      	str	r2, [r3, #4]
			uart1_send_frame((char*) rs485.frame, 14);
 800233c:	193b      	adds	r3, r7, r4
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	210e      	movs	r1, #14
 8002342:	0018      	movs	r0, r3
 8002344:	f001 fa88 	bl	8003858 <uart1_send_frame>
			free(rs485.frame);
 8002348:	193b      	adds	r3, r7, r4
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	0018      	movs	r0, r3
 800234e:	f003 faf3 	bl	8005938 <free>
			rs485.cmd = NONE;
 8002352:	193b      	adds	r3, r7, r4
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
			break;
 8002358:	e147      	b.n	80025ea <main+0x702>
		case SET_ATT_LTEL:
			pa.att = uart1.rx_buffer[6];
 800235a:	4baa      	ldr	r3, [pc, #680]	; (8002604 <main+0x71c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	799a      	ldrb	r2, [r3, #6]
 8002360:	243c      	movs	r4, #60	; 0x3c
 8002362:	193b      	adds	r3, r7, r4
 8002364:	701a      	strb	r2, [r3, #0]
			bda4601_set_att(pa.att, 3);
 8002366:	193b      	adds	r3, r7, r4
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2103      	movs	r1, #3
 800236c:	0018      	movs	r0, r3
 800236e:	f7ff f80b 	bl	8001388 <bda4601_set_att>
			send_buff[0] = pa.att;
 8002372:	193b      	adds	r3, r7, r4
 8002374:	781a      	ldrb	r2, [r3, #0]
 8002376:	003b      	movs	r3, r7
 8002378:	701a      	strb	r2, [r3, #0]
			m24c64_write_N(BASE_ADDR, send_buff, ATT_VALUE_ADDR, 1);
 800237a:	0039      	movs	r1, r7
 800237c:	2301      	movs	r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	2003      	movs	r0, #3
 8002382:	f7ff fc11 	bl	8001ba8 <m24c64_write_N>
			sprintf((char*) uart1.tx_buffer, "Attenuation %u\r\n", pa.att);
 8002386:	4b9f      	ldr	r3, [pc, #636]	; (8002604 <main+0x71c>)
 8002388:	6858      	ldr	r0, [r3, #4]
 800238a:	193b      	adds	r3, r7, r4
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	001a      	movs	r2, r3
 8002390:	4b9d      	ldr	r3, [pc, #628]	; (8002608 <main+0x720>)
 8002392:	0019      	movs	r1, r3
 8002394:	f003 fbd6 	bl	8005b44 <siprintf>
			uart1_send_frame((char*) uart1.tx_buffer, TX_BUFFLEN);
 8002398:	4b9a      	ldr	r3, [pc, #616]	; (8002604 <main+0x71c>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2164      	movs	r1, #100	; 0x64
 800239e:	0018      	movs	r0, r3
 80023a0:	f001 fa5a 	bl	8003858 <uart1_send_frame>
			rs485.cmd = NONE;
 80023a4:	2330      	movs	r3, #48	; 0x30
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
			break;
 80023ac:	e11d      	b.n	80025ea <main+0x702>
		case SET_POUT_MAX:
			pout.max = adc_media[POUT_i];
 80023ae:	4b92      	ldr	r3, [pc, #584]	; (80025f8 <main+0x710>)
 80023b0:	885a      	ldrh	r2, [r3, #2]
 80023b2:	212c      	movs	r1, #44	; 0x2c
 80023b4:	187b      	adds	r3, r7, r1
 80023b6:	801a      	strh	r2, [r3, #0]
			m24c64_store_16uvalue(POUT_MAX_READY_ADDR, pout.max);
 80023b8:	187b      	adds	r3, r7, r1
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	0019      	movs	r1, r3
 80023be:	2004      	movs	r0, #4
 80023c0:	f7ff fceb 	bl	8001d9a <m24c64_store_16uvalue>
			uart1_send_str("Saved Pout max value\n\r");
 80023c4:	4b91      	ldr	r3, [pc, #580]	; (800260c <main+0x724>)
 80023c6:	0018      	movs	r0, r3
 80023c8:	f001 fa22 	bl	8003810 <uart1_send_str>
			rs485.cmd = NONE;
 80023cc:	2330      	movs	r3, #48	; 0x30
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]
			break;
 80023d4:	e109      	b.n	80025ea <main+0x702>
		case SET_POUT_MIN:
			pout.min = adc_media[POUT_i];
 80023d6:	4b88      	ldr	r3, [pc, #544]	; (80025f8 <main+0x710>)
 80023d8:	885a      	ldrh	r2, [r3, #2]
 80023da:	212c      	movs	r1, #44	; 0x2c
 80023dc:	187b      	adds	r3, r7, r1
 80023de:	805a      	strh	r2, [r3, #2]
			m24c64_store_16uvalue(POUT_MIN_READY_ADDR, pout.min);
 80023e0:	187b      	adds	r3, r7, r1
 80023e2:	885b      	ldrh	r3, [r3, #2]
 80023e4:	0019      	movs	r1, r3
 80023e6:	2007      	movs	r0, #7
 80023e8:	f7ff fcd7 	bl	8001d9a <m24c64_store_16uvalue>
			uart1_send_str("Saved Pout min value\n\r");
 80023ec:	4b88      	ldr	r3, [pc, #544]	; (8002610 <main+0x728>)
 80023ee:	0018      	movs	r0, r3
 80023f0:	f001 fa0e 	bl	8003810 <uart1_send_str>
			rs485.cmd = NONE;
 80023f4:	2330      	movs	r3, #48	; 0x30
 80023f6:	18fb      	adds	r3, r7, r3
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
			break;
 80023fc:	e0f5      	b.n	80025ea <main+0x702>
		case SET_PIN_MAX:
			pin.max = adc_media[PIN_i];
 80023fe:	4b7e      	ldr	r3, [pc, #504]	; (80025f8 <main+0x710>)
 8002400:	895a      	ldrh	r2, [r3, #10]
 8002402:	2128      	movs	r1, #40	; 0x28
 8002404:	187b      	adds	r3, r7, r1
 8002406:	801a      	strh	r2, [r3, #0]
			m24c64_store_16uvalue(PIN_MAX_READY_ADDR, pin.max);
 8002408:	187b      	adds	r3, r7, r1
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	0019      	movs	r1, r3
 800240e:	200a      	movs	r0, #10
 8002410:	f7ff fcc3 	bl	8001d9a <m24c64_store_16uvalue>
			uart1_send_str("Saved Pin max value\n\r");
 8002414:	4b7f      	ldr	r3, [pc, #508]	; (8002614 <main+0x72c>)
 8002416:	0018      	movs	r0, r3
 8002418:	f001 f9fa 	bl	8003810 <uart1_send_str>
			rs485.cmd = NONE;
 800241c:	2330      	movs	r3, #48	; 0x30
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
			break;
 8002424:	e0e1      	b.n	80025ea <main+0x702>
		case SET_PIN_MIN:
			pin.min = adc_media[PIN_i];
 8002426:	4b74      	ldr	r3, [pc, #464]	; (80025f8 <main+0x710>)
 8002428:	895a      	ldrh	r2, [r3, #10]
 800242a:	2128      	movs	r1, #40	; 0x28
 800242c:	187b      	adds	r3, r7, r1
 800242e:	805a      	strh	r2, [r3, #2]
			m24c64_store_16uvalue(PIN_MAX_READY_ADDR, pin.min);
 8002430:	187b      	adds	r3, r7, r1
 8002432:	885b      	ldrh	r3, [r3, #2]
 8002434:	0019      	movs	r1, r3
 8002436:	200a      	movs	r0, #10
 8002438:	f7ff fcaf 	bl	8001d9a <m24c64_store_16uvalue>
			uart1_send_str("Saved Pin min value\n\r");
 800243c:	4b76      	ldr	r3, [pc, #472]	; (8002618 <main+0x730>)
 800243e:	0018      	movs	r0, r3
 8002440:	f001 f9e6 	bl	8003810 <uart1_send_str>
			rs485.cmd = NONE;
 8002444:	2330      	movs	r3, #48	; 0x30
 8002446:	18fb      	adds	r3, r7, r3
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
			break;
 800244c:	e0cd      	b.n	80025ea <main+0x702>
		case SET_VSWR_MAX:
			vswr.max = adc_media[VSWR_i];
 800244e:	4b6a      	ldr	r3, [pc, #424]	; (80025f8 <main+0x710>)
 8002450:	891a      	ldrh	r2, [r3, #8]
 8002452:	2124      	movs	r1, #36	; 0x24
 8002454:	187b      	adds	r3, r7, r1
 8002456:	801a      	strh	r2, [r3, #0]
			m24c64_store_16uvalue(VSWR_MIN_READY_ADDR, vswr.max);
 8002458:	187b      	adds	r3, r7, r1
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	0019      	movs	r1, r3
 800245e:	2013      	movs	r0, #19
 8002460:	f7ff fc9b 	bl	8001d9a <m24c64_store_16uvalue>
			uart1_send_str("Saved VSWR max value\n\r");
 8002464:	4b6d      	ldr	r3, [pc, #436]	; (800261c <main+0x734>)
 8002466:	0018      	movs	r0, r3
 8002468:	f001 f9d2 	bl	8003810 <uart1_send_str>
			rs485.cmd = NONE;
 800246c:	2330      	movs	r3, #48	; 0x30
 800246e:	18fb      	adds	r3, r7, r3
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
			break;
 8002474:	e0b9      	b.n	80025ea <main+0x702>
		case SET_VSWR_MIN:
			vswr.min = adc_media[VSWR_i];
 8002476:	4b60      	ldr	r3, [pc, #384]	; (80025f8 <main+0x710>)
 8002478:	891a      	ldrh	r2, [r3, #8]
 800247a:	2124      	movs	r1, #36	; 0x24
 800247c:	187b      	adds	r3, r7, r1
 800247e:	805a      	strh	r2, [r3, #2]
			m24c64_store_16uvalue(VSWR_MAX_READY_ADDR, vswr.min);
 8002480:	187b      	adds	r3, r7, r1
 8002482:	885b      	ldrh	r3, [r3, #2]
 8002484:	0019      	movs	r1, r3
 8002486:	2010      	movs	r0, #16
 8002488:	f7ff fc87 	bl	8001d9a <m24c64_store_16uvalue>
			uart1_send_str("Saved Pout min value\n\r");
 800248c:	4b60      	ldr	r3, [pc, #384]	; (8002610 <main+0x728>)
 800248e:	0018      	movs	r0, r3
 8002490:	f001 f9be 	bl	8003810 <uart1_send_str>
			rs485.cmd = NONE;
 8002494:	2330      	movs	r3, #48	; 0x30
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
			break;
 800249c:	e0a5      	b.n	80025ea <main+0x702>
		case QUERY_PARAMETER_STR:
			print_parameters(&uart1, pa);
 800249e:	233c      	movs	r3, #60	; 0x3c
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	4858      	ldr	r0, [pc, #352]	; (8002604 <main+0x71c>)
 80024a4:	466a      	mov	r2, sp
 80024a6:	0011      	movs	r1, r2
 80024a8:	001a      	movs	r2, r3
 80024aa:	320c      	adds	r2, #12
 80024ac:	ca30      	ldmia	r2!, {r4, r5}
 80024ae:	c130      	stmia	r1!, {r4, r5}
 80024b0:	6819      	ldr	r1, [r3, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f7ff fca1 	bl	8001dfc <print_parameters>
			rs485.cmd = NONE;
 80024ba:	2330      	movs	r3, #48	; 0x30
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	2200      	movs	r2, #0
 80024c0:	701a      	strb	r2, [r3, #0]
			break;
 80024c2:	e092      	b.n	80025ea <main+0x702>
		case QUERY_ADC:
			print_adc(&uart1, adc_media);
 80024c4:	4a4c      	ldr	r2, [pc, #304]	; (80025f8 <main+0x710>)
 80024c6:	4b4f      	ldr	r3, [pc, #316]	; (8002604 <main+0x71c>)
 80024c8:	0011      	movs	r1, r2
 80024ca:	0018      	movs	r0, r3
 80024cc:	f7ff fce0 	bl	8001e90 <print_adc>
			rs485.cmd = NONE;
 80024d0:	2330      	movs	r3, #48	; 0x30
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
			break;
 80024d8:	e087      	b.n	80025ea <main+0x702>
		case QUERY_PARAMETER_SIGMA:
			pa.temperature = lm75_read();
 80024da:	f7ff fafe 	bl	8001ada <lm75_read>
 80024de:	1c02      	adds	r2, r0, #0
 80024e0:	243c      	movs	r4, #60	; 0x3c
 80024e2:	193b      	adds	r3, r7, r4
 80024e4:	609a      	str	r2, [r3, #8]
			pa.pr = max4003_get_dbm(&vswr, adc_media[VSWR_i]);
 80024e6:	4b44      	ldr	r3, [pc, #272]	; (80025f8 <main+0x710>)
 80024e8:	891a      	ldrh	r2, [r3, #8]
 80024ea:	2324      	movs	r3, #36	; 0x24
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	0011      	movs	r1, r2
 80024f0:	0018      	movs	r0, r3
 80024f2:	f000 fc51 	bl	8002d98 <max4003_get_dbm>
 80024f6:	0003      	movs	r3, r0
 80024f8:	b25a      	sxtb	r2, r3
 80024fa:	193b      	adds	r3, r7, r4
 80024fc:	70da      	strb	r2, [r3, #3]
			pa.pout = ad8363_get_dbm(&pout, adc_media[POUT_i]);
 80024fe:	4b3e      	ldr	r3, [pc, #248]	; (80025f8 <main+0x710>)
 8002500:	885a      	ldrh	r2, [r3, #2]
 8002502:	232c      	movs	r3, #44	; 0x2c
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	0011      	movs	r1, r2
 8002508:	0018      	movs	r0, r3
 800250a:	f7fe fee9 	bl	80012e0 <ad8363_get_dbm>
 800250e:	0003      	movs	r3, r0
 8002510:	b25a      	sxtb	r2, r3
 8002512:	193b      	adds	r3, r7, r4
 8002514:	709a      	strb	r2, [r3, #2]
			pa.current = ADC_CURRENT_FACTOR * adc_media[CURRENT_i] / 4096.0f;
 8002516:	4b38      	ldr	r3, [pc, #224]	; (80025f8 <main+0x710>)
 8002518:	88db      	ldrh	r3, [r3, #6]
 800251a:	0018      	movs	r0, r3
 800251c:	f7fe fe32 	bl	8001184 <__aeabi_i2f>
 8002520:	1c03      	adds	r3, r0, #0
 8002522:	4a36      	ldr	r2, [pc, #216]	; (80025fc <main+0x714>)
 8002524:	1c11      	adds	r1, r2, #0
 8002526:	1c18      	adds	r0, r3, #0
 8002528:	f7fe fb22 	bl	8000b70 <__aeabi_fmul>
 800252c:	1c03      	adds	r3, r0, #0
 800252e:	218b      	movs	r1, #139	; 0x8b
 8002530:	05c9      	lsls	r1, r1, #23
 8002532:	1c18      	adds	r0, r3, #0
 8002534:	f7fe f954 	bl	80007e0 <__aeabi_fdiv>
 8002538:	1c03      	adds	r3, r0, #0
 800253a:	1c18      	adds	r0, r3, #0
 800253c:	f7fd ff9a 	bl	8000474 <__aeabi_f2uiz>
 8002540:	0003      	movs	r3, r0
 8002542:	b2da      	uxtb	r2, r3
 8002544:	193b      	adds	r3, r7, r4
 8002546:	719a      	strb	r2, [r3, #6]
			pa.gain = get_db_gain(adc_media[GAIN_i]);
 8002548:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <main+0x710>)
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	0018      	movs	r0, r3
 800254e:	f000 fa9f 	bl	8002a90 <get_db_gain>
 8002552:	0003      	movs	r3, r0
 8002554:	001a      	movs	r2, r3
 8002556:	193b      	adds	r3, r7, r4
 8002558:	705a      	strb	r2, [r3, #1]
			pa.vswr = module_vswr_calc(pa.pout, pa.pr);
 800255a:	193b      	adds	r3, r7, r4
 800255c:	2202      	movs	r2, #2
 800255e:	569a      	ldrsb	r2, [r3, r2]
 8002560:	193b      	adds	r3, r7, r4
 8002562:	78db      	ldrb	r3, [r3, #3]
 8002564:	b25b      	sxtb	r3, r3
 8002566:	0019      	movs	r1, r3
 8002568:	0010      	movs	r0, r2
 800256a:	f000 fc93 	bl	8002e94 <module_vswr_calc>
 800256e:	1c02      	adds	r2, r0, #0
 8002570:	193b      	adds	r3, r7, r4
 8002572:	60da      	str	r2, [r3, #12]
			pa.pin = max4003_get_dbm(&pin, adc_media[PIN_i]);
 8002574:	4b20      	ldr	r3, [pc, #128]	; (80025f8 <main+0x710>)
 8002576:	895a      	ldrh	r2, [r3, #10]
 8002578:	2328      	movs	r3, #40	; 0x28
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	0011      	movs	r1, r2
 800257e:	0018      	movs	r0, r3
 8002580:	f000 fc0a 	bl	8002d98 <max4003_get_dbm>
 8002584:	0003      	movs	r3, r0
 8002586:	b25a      	sxtb	r2, r3
 8002588:	193b      	adds	r3, r7, r4
 800258a:	715a      	strb	r2, [r3, #5]
			pa.voltage = ADC_VOLTAGE_FACTOR * adc_media[VOLTAGE_i] / 4096.0f;
 800258c:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <main+0x710>)
 800258e:	889b      	ldrh	r3, [r3, #4]
 8002590:	0018      	movs	r0, r3
 8002592:	f7fe fdf7 	bl	8001184 <__aeabi_i2f>
 8002596:	1c03      	adds	r3, r0, #0
 8002598:	4a19      	ldr	r2, [pc, #100]	; (8002600 <main+0x718>)
 800259a:	1c11      	adds	r1, r2, #0
 800259c:	1c18      	adds	r0, r3, #0
 800259e:	f7fe fae7 	bl	8000b70 <__aeabi_fmul>
 80025a2:	1c03      	adds	r3, r0, #0
 80025a4:	218b      	movs	r1, #139	; 0x8b
 80025a6:	05c9      	lsls	r1, r1, #23
 80025a8:	1c18      	adds	r0, r3, #0
 80025aa:	f7fe f919 	bl	80007e0 <__aeabi_fdiv>
 80025ae:	1c03      	adds	r3, r0, #0
 80025b0:	1c18      	adds	r0, r3, #0
 80025b2:	f7fd ff5f 	bl	8000474 <__aeabi_f2uiz>
 80025b6:	0003      	movs	r3, r0
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	193b      	adds	r3, r7, r4
 80025bc:	711a      	strb	r2, [r3, #4]

			rs485_set_query_frame(&rs485, &pa);
 80025be:	193a      	adds	r2, r7, r4
 80025c0:	2430      	movs	r4, #48	; 0x30
 80025c2:	193b      	adds	r3, r7, r4
 80025c4:	0011      	movs	r1, r2
 80025c6:	0018      	movs	r0, r3
 80025c8:	f000 fd09 	bl	8002fde <rs485_set_query_frame>
			uart1_send_frame((char*) rs485.frame, 14);
 80025cc:	193b      	adds	r3, r7, r4
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	210e      	movs	r1, #14
 80025d2:	0018      	movs	r0, r3
 80025d4:	f001 f940 	bl	8003858 <uart1_send_frame>
			rs485.cmd = NONE;
 80025d8:	193b      	adds	r3, r7, r4
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]
			break;
 80025de:	e004      	b.n	80025ea <main+0x702>
			//	pout.media = adc_media[POUT_i];
			//	current.media = adc_media[CURRENT_i];
			//	gain.media = adc_media[GAIN_i];
			//	pin.media = adc_media[PIN_i];
			//	voltage.media = adc_media[VOLTAGE_i];
			rs485.cmd = NONE;
 80025e0:	2330      	movs	r3, #48	; 0x30
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]
			break;
 80025e8:	46c0      	nop			; (mov r8, r8)
		}

		led_enable_kalive(&led);
 80025ea:	2308      	movs	r3, #8
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	0018      	movs	r0, r3
 80025f0:	f7ff f9ca 	bl	8001988 <led_enable_kalive>
		switch (rs485.status) {
 80025f4:	e592      	b.n	800211c <main+0x234>
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	2000015c 	.word	0x2000015c
 80025fc:	43951746 	.word	0x43951746
 8002600:	3bf2a006 	.word	0x3bf2a006
 8002604:	20000168 	.word	0x20000168
 8002608:	08006410 	.word	0x08006410
 800260c:	08006424 	.word	0x08006424
 8002610:	0800643c 	.word	0x0800643c
 8002614:	08006454 	.word	0x08006454
 8002618:	0800646c 	.word	0x0800646c
 800261c:	08006484 	.word	0x08006484

08002620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b093      	sub	sp, #76	; 0x4c
 8002624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002626:	2414      	movs	r4, #20
 8002628:	193b      	adds	r3, r7, r4
 800262a:	0018      	movs	r0, r3
 800262c:	2334      	movs	r3, #52	; 0x34
 800262e:	001a      	movs	r2, r3
 8002630:	2100      	movs	r1, #0
 8002632:	f003 f98b 	bl	800594c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002636:	1d3b      	adds	r3, r7, #4
 8002638:	0018      	movs	r0, r3
 800263a:	2310      	movs	r3, #16
 800263c:	001a      	movs	r2, r3
 800263e:	2100      	movs	r1, #0
 8002640:	f003 f984 	bl	800594c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	0018      	movs	r0, r3
 800264a:	f002 fb41 	bl	8004cd0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800264e:	193b      	adds	r3, r7, r4
 8002650:	220a      	movs	r2, #10
 8002652:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002654:	193b      	adds	r3, r7, r4
 8002656:	2280      	movs	r2, #128	; 0x80
 8002658:	0052      	lsls	r2, r2, #1
 800265a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800265c:	0021      	movs	r1, r4
 800265e:	187b      	adds	r3, r7, r1
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002664:	187b      	adds	r3, r7, r1
 8002666:	2240      	movs	r2, #64	; 0x40
 8002668:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800266a:	187b      	adds	r3, r7, r1
 800266c:	2201      	movs	r2, #1
 800266e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002670:	187b      	adds	r3, r7, r1
 8002672:	2202      	movs	r2, #2
 8002674:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002676:	187b      	adds	r3, r7, r1
 8002678:	2202      	movs	r2, #2
 800267a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800267c:	187b      	adds	r3, r7, r1
 800267e:	2210      	movs	r2, #16
 8002680:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002682:	187b      	adds	r3, r7, r1
 8002684:	2210      	movs	r2, #16
 8002686:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002688:	187b      	adds	r3, r7, r1
 800268a:	2280      	movs	r2, #128	; 0x80
 800268c:	0292      	lsls	r2, r2, #10
 800268e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002690:	187b      	adds	r3, r7, r1
 8002692:	2280      	movs	r2, #128	; 0x80
 8002694:	0592      	lsls	r2, r2, #22
 8002696:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002698:	187b      	adds	r3, r7, r1
 800269a:	0018      	movs	r0, r3
 800269c:	f002 fb58 	bl	8004d50 <HAL_RCC_OscConfig>
 80026a0:	1e03      	subs	r3, r0, #0
 80026a2:	d001      	beq.n	80026a8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80026a4:	f000 fb72 	bl	8002d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026a8:	1d3b      	adds	r3, r7, #4
 80026aa:	2207      	movs	r2, #7
 80026ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026ae:	1d3b      	adds	r3, r7, #4
 80026b0:	2202      	movs	r2, #2
 80026b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	2200      	movs	r2, #0
 80026be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	2102      	movs	r1, #2
 80026c4:	0018      	movs	r0, r3
 80026c6:	f002 fe53 	bl	8005370 <HAL_RCC_ClockConfig>
 80026ca:	1e03      	subs	r3, r0, #0
 80026cc:	d001      	beq.n	80026d2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80026ce:	f000 fb5d 	bl	8002d8c <Error_Handler>
  }
}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	46bd      	mov	sp, r7
 80026d6:	b013      	add	sp, #76	; 0x4c
 80026d8:	bd90      	pop	{r4, r7, pc}
	...

080026dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80026e2:	1d3b      	adds	r3, r7, #4
 80026e4:	0018      	movs	r0, r3
 80026e6:	230c      	movs	r3, #12
 80026e8:	001a      	movs	r2, r3
 80026ea:	2100      	movs	r1, #0
 80026ec:	f003 f92e 	bl	800594c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80026f0:	4b5e      	ldr	r3, [pc, #376]	; (800286c <MX_ADC1_Init+0x190>)
 80026f2:	4a5f      	ldr	r2, [pc, #380]	; (8002870 <MX_ADC1_Init+0x194>)
 80026f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80026f6:	4b5d      	ldr	r3, [pc, #372]	; (800286c <MX_ADC1_Init+0x190>)
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	05d2      	lsls	r2, r2, #23
 80026fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026fe:	4b5b      	ldr	r3, [pc, #364]	; (800286c <MX_ADC1_Init+0x190>)
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002704:	4b59      	ldr	r3, [pc, #356]	; (800286c <MX_ADC1_Init+0x190>)
 8002706:	2200      	movs	r2, #0
 8002708:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800270a:	4b58      	ldr	r3, [pc, #352]	; (800286c <MX_ADC1_Init+0x190>)
 800270c:	2280      	movs	r2, #128	; 0x80
 800270e:	0392      	lsls	r2, r2, #14
 8002710:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002712:	4b56      	ldr	r3, [pc, #344]	; (800286c <MX_ADC1_Init+0x190>)
 8002714:	2204      	movs	r2, #4
 8002716:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002718:	4b54      	ldr	r3, [pc, #336]	; (800286c <MX_ADC1_Init+0x190>)
 800271a:	2200      	movs	r2, #0
 800271c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800271e:	4b53      	ldr	r3, [pc, #332]	; (800286c <MX_ADC1_Init+0x190>)
 8002720:	2200      	movs	r2, #0
 8002722:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002724:	4b51      	ldr	r3, [pc, #324]	; (800286c <MX_ADC1_Init+0x190>)
 8002726:	2200      	movs	r2, #0
 8002728:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 7;
 800272a:	4b50      	ldr	r3, [pc, #320]	; (800286c <MX_ADC1_Init+0x190>)
 800272c:	2207      	movs	r2, #7
 800272e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002730:	4b4e      	ldr	r3, [pc, #312]	; (800286c <MX_ADC1_Init+0x190>)
 8002732:	2220      	movs	r2, #32
 8002734:	2100      	movs	r1, #0
 8002736:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002738:	4b4c      	ldr	r3, [pc, #304]	; (800286c <MX_ADC1_Init+0x190>)
 800273a:	2200      	movs	r2, #0
 800273c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800273e:	4b4b      	ldr	r3, [pc, #300]	; (800286c <MX_ADC1_Init+0x190>)
 8002740:	2200      	movs	r2, #0
 8002742:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002744:	4b49      	ldr	r3, [pc, #292]	; (800286c <MX_ADC1_Init+0x190>)
 8002746:	222c      	movs	r2, #44	; 0x2c
 8002748:	2100      	movs	r1, #0
 800274a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800274c:	4b47      	ldr	r3, [pc, #284]	; (800286c <MX_ADC1_Init+0x190>)
 800274e:	2200      	movs	r2, #0
 8002750:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002752:	4b46      	ldr	r3, [pc, #280]	; (800286c <MX_ADC1_Init+0x190>)
 8002754:	2200      	movs	r2, #0
 8002756:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002758:	4b44      	ldr	r3, [pc, #272]	; (800286c <MX_ADC1_Init+0x190>)
 800275a:	2200      	movs	r2, #0
 800275c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800275e:	4b43      	ldr	r3, [pc, #268]	; (800286c <MX_ADC1_Init+0x190>)
 8002760:	223c      	movs	r2, #60	; 0x3c
 8002762:	2100      	movs	r1, #0
 8002764:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002766:	4b41      	ldr	r3, [pc, #260]	; (800286c <MX_ADC1_Init+0x190>)
 8002768:	2200      	movs	r2, #0
 800276a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800276c:	4b3f      	ldr	r3, [pc, #252]	; (800286c <MX_ADC1_Init+0x190>)
 800276e:	0018      	movs	r0, r3
 8002770:	f001 faf0 	bl	8003d54 <HAL_ADC_Init>
 8002774:	1e03      	subs	r3, r0, #0
 8002776:	d001      	beq.n	800277c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8002778:	f000 fb08 	bl	8002d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	2200      	movs	r2, #0
 8002786:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800278e:	1d3a      	adds	r2, r7, #4
 8002790:	4b36      	ldr	r3, [pc, #216]	; (800286c <MX_ADC1_Init+0x190>)
 8002792:	0011      	movs	r1, r2
 8002794:	0018      	movs	r0, r3
 8002796:	f001 fc85 	bl	80040a4 <HAL_ADC_ConfigChannel>
 800279a:	1e03      	subs	r3, r0, #0
 800279c:	d001      	beq.n	80027a2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800279e:	f000 faf5 	bl	8002d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80027a2:	1d3b      	adds	r3, r7, #4
 80027a4:	4a33      	ldr	r2, [pc, #204]	; (8002874 <MX_ADC1_Init+0x198>)
 80027a6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80027a8:	1d3b      	adds	r3, r7, #4
 80027aa:	2204      	movs	r2, #4
 80027ac:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027ae:	1d3a      	adds	r2, r7, #4
 80027b0:	4b2e      	ldr	r3, [pc, #184]	; (800286c <MX_ADC1_Init+0x190>)
 80027b2:	0011      	movs	r1, r2
 80027b4:	0018      	movs	r0, r3
 80027b6:	f001 fc75 	bl	80040a4 <HAL_ADC_ConfigChannel>
 80027ba:	1e03      	subs	r3, r0, #0
 80027bc:	d001      	beq.n	80027c2 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80027be:	f000 fae5 	bl	8002d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	4a2c      	ldr	r2, [pc, #176]	; (8002878 <MX_ADC1_Init+0x19c>)
 80027c6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	2208      	movs	r2, #8
 80027cc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027ce:	1d3a      	adds	r2, r7, #4
 80027d0:	4b26      	ldr	r3, [pc, #152]	; (800286c <MX_ADC1_Init+0x190>)
 80027d2:	0011      	movs	r1, r2
 80027d4:	0018      	movs	r0, r3
 80027d6:	f001 fc65 	bl	80040a4 <HAL_ADC_ConfigChannel>
 80027da:	1e03      	subs	r3, r0, #0
 80027dc:	d001      	beq.n	80027e2 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80027de:	f000 fad5 	bl	8002d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80027e2:	1d3b      	adds	r3, r7, #4
 80027e4:	4a25      	ldr	r2, [pc, #148]	; (800287c <MX_ADC1_Init+0x1a0>)
 80027e6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80027e8:	1d3b      	adds	r3, r7, #4
 80027ea:	220c      	movs	r2, #12
 80027ec:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027ee:	1d3a      	adds	r2, r7, #4
 80027f0:	4b1e      	ldr	r3, [pc, #120]	; (800286c <MX_ADC1_Init+0x190>)
 80027f2:	0011      	movs	r1, r2
 80027f4:	0018      	movs	r0, r3
 80027f6:	f001 fc55 	bl	80040a4 <HAL_ADC_ConfigChannel>
 80027fa:	1e03      	subs	r3, r0, #0
 80027fc:	d001      	beq.n	8002802 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80027fe:	f000 fac5 	bl	8002d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	4a1e      	ldr	r2, [pc, #120]	; (8002880 <MX_ADC1_Init+0x1a4>)
 8002806:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	2210      	movs	r2, #16
 800280c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800280e:	1d3a      	adds	r2, r7, #4
 8002810:	4b16      	ldr	r3, [pc, #88]	; (800286c <MX_ADC1_Init+0x190>)
 8002812:	0011      	movs	r1, r2
 8002814:	0018      	movs	r0, r3
 8002816:	f001 fc45 	bl	80040a4 <HAL_ADC_ConfigChannel>
 800281a:	1e03      	subs	r3, r0, #0
 800281c:	d001      	beq.n	8002822 <MX_ADC1_Init+0x146>
  {
    Error_Handler();
 800281e:	f000 fab5 	bl	8002d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	4a17      	ldr	r2, [pc, #92]	; (8002884 <MX_ADC1_Init+0x1a8>)
 8002826:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002828:	1d3b      	adds	r3, r7, #4
 800282a:	2214      	movs	r2, #20
 800282c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800282e:	1d3a      	adds	r2, r7, #4
 8002830:	4b0e      	ldr	r3, [pc, #56]	; (800286c <MX_ADC1_Init+0x190>)
 8002832:	0011      	movs	r1, r2
 8002834:	0018      	movs	r0, r3
 8002836:	f001 fc35 	bl	80040a4 <HAL_ADC_ConfigChannel>
 800283a:	1e03      	subs	r3, r0, #0
 800283c:	d001      	beq.n	8002842 <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 800283e:	f000 faa5 	bl	8002d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002842:	1d3b      	adds	r3, r7, #4
 8002844:	4a10      	ldr	r2, [pc, #64]	; (8002888 <MX_ADC1_Init+0x1ac>)
 8002846:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	2218      	movs	r2, #24
 800284c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800284e:	1d3a      	adds	r2, r7, #4
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <MX_ADC1_Init+0x190>)
 8002852:	0011      	movs	r1, r2
 8002854:	0018      	movs	r0, r3
 8002856:	f001 fc25 	bl	80040a4 <HAL_ADC_ConfigChannel>
 800285a:	1e03      	subs	r3, r0, #0
 800285c:	d001      	beq.n	8002862 <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 800285e:	f000 fa95 	bl	8002d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	46bd      	mov	sp, r7
 8002866:	b004      	add	sp, #16
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	2000008c 	.word	0x2000008c
 8002870:	40012400 	.word	0x40012400
 8002874:	04000002 	.word	0x04000002
 8002878:	08000004 	.word	0x08000004
 800287c:	10000010 	.word	0x10000010
 8002880:	14000020 	.word	0x14000020
 8002884:	18000040 	.word	0x18000040
 8002888:	b0001000 	.word	0xb0001000

0800288c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <MX_IWDG_Init+0x34>)
 8002892:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <MX_IWDG_Init+0x38>)
 8002894:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <MX_IWDG_Init+0x34>)
 8002898:	2200      	movs	r2, #0
 800289a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800289c:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <MX_IWDG_Init+0x34>)
 800289e:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <MX_IWDG_Init+0x3c>)
 80028a0:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80028a2:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <MX_IWDG_Init+0x34>)
 80028a4:	4a08      	ldr	r2, [pc, #32]	; (80028c8 <MX_IWDG_Init+0x3c>)
 80028a6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <MX_IWDG_Init+0x34>)
 80028aa:	0018      	movs	r0, r3
 80028ac:	f002 f9be 	bl	8004c2c <HAL_IWDG_Init>
 80028b0:	1e03      	subs	r3, r0, #0
 80028b2:	d001      	beq.n	80028b8 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80028b4:	f000 fa6a 	bl	8002d8c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80028b8:	46c0      	nop			; (mov r8, r8)
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	2000014c 	.word	0x2000014c
 80028c4:	40003000 	.word	0x40003000
 80028c8:	00000fff 	.word	0x00000fff

080028cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <MX_DMA_Init+0x38>)
 80028d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028d6:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <MX_DMA_Init+0x38>)
 80028d8:	2101      	movs	r1, #1
 80028da:	430a      	orrs	r2, r1
 80028dc:	639a      	str	r2, [r3, #56]	; 0x38
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <MX_DMA_Init+0x38>)
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	2201      	movs	r2, #1
 80028e4:	4013      	ands	r3, r2
 80028e6:	607b      	str	r3, [r7, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80028ea:	2200      	movs	r2, #0
 80028ec:	2100      	movs	r1, #0
 80028ee:	2009      	movs	r0, #9
 80028f0:	f001 fe5c 	bl	80045ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80028f4:	2009      	movs	r0, #9
 80028f6:	f001 fe6e 	bl	80045d6 <HAL_NVIC_EnableIRQ>

}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b002      	add	sp, #8
 8002900:	bd80      	pop	{r7, pc}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	40021000 	.word	0x40021000

08002908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002908:	b590      	push	{r4, r7, lr}
 800290a:	b089      	sub	sp, #36	; 0x24
 800290c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290e:	240c      	movs	r4, #12
 8002910:	193b      	adds	r3, r7, r4
 8002912:	0018      	movs	r0, r3
 8002914:	2314      	movs	r3, #20
 8002916:	001a      	movs	r2, r3
 8002918:	2100      	movs	r1, #0
 800291a:	f003 f817 	bl	800594c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800291e:	4b58      	ldr	r3, [pc, #352]	; (8002a80 <MX_GPIO_Init+0x178>)
 8002920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002922:	4b57      	ldr	r3, [pc, #348]	; (8002a80 <MX_GPIO_Init+0x178>)
 8002924:	2102      	movs	r1, #2
 8002926:	430a      	orrs	r2, r1
 8002928:	635a      	str	r2, [r3, #52]	; 0x34
 800292a:	4b55      	ldr	r3, [pc, #340]	; (8002a80 <MX_GPIO_Init+0x178>)
 800292c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292e:	2202      	movs	r2, #2
 8002930:	4013      	ands	r3, r2
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002936:	4b52      	ldr	r3, [pc, #328]	; (8002a80 <MX_GPIO_Init+0x178>)
 8002938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800293a:	4b51      	ldr	r3, [pc, #324]	; (8002a80 <MX_GPIO_Init+0x178>)
 800293c:	2104      	movs	r1, #4
 800293e:	430a      	orrs	r2, r1
 8002940:	635a      	str	r2, [r3, #52]	; 0x34
 8002942:	4b4f      	ldr	r3, [pc, #316]	; (8002a80 <MX_GPIO_Init+0x178>)
 8002944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002946:	2204      	movs	r2, #4
 8002948:	4013      	ands	r3, r2
 800294a:	607b      	str	r3, [r7, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	4b4c      	ldr	r3, [pc, #304]	; (8002a80 <MX_GPIO_Init+0x178>)
 8002950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002952:	4b4b      	ldr	r3, [pc, #300]	; (8002a80 <MX_GPIO_Init+0x178>)
 8002954:	2101      	movs	r1, #1
 8002956:	430a      	orrs	r2, r1
 8002958:	635a      	str	r2, [r3, #52]	; 0x34
 800295a:	4b49      	ldr	r3, [pc, #292]	; (8002a80 <MX_GPIO_Init+0x178>)
 800295c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295e:	2201      	movs	r2, #1
 8002960:	4013      	ands	r3, r2
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA_HAB_Pin|LE_ATT_Pin|TEMP_HIGH_Pin|TEMP_OK_Pin
 8002966:	4947      	ldr	r1, [pc, #284]	; (8002a84 <MX_GPIO_Init+0x17c>)
 8002968:	23a0      	movs	r3, #160	; 0xa0
 800296a:	05db      	lsls	r3, r3, #23
 800296c:	2200      	movs	r2, #0
 800296e:	0018      	movs	r0, r3
 8002970:	f002 f93e 	bl	8004bf0 <HAL_GPIO_WritePin>
                          |CURR_H_Pin|CURR_N_Pin|CURR_L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_ATT_Pin|DATA_ATT_Pin|DE_485_Pin, GPIO_PIN_RESET);
 8002974:	4b44      	ldr	r3, [pc, #272]	; (8002a88 <MX_GPIO_Init+0x180>)
 8002976:	2200      	movs	r2, #0
 8002978:	2123      	movs	r1, #35	; 0x23
 800297a:	0018      	movs	r0, r3
 800297c:	f002 f938 	bl	8004bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002980:	4b42      	ldr	r3, [pc, #264]	; (8002a8c <MX_GPIO_Init+0x184>)
 8002982:	2200      	movs	r2, #0
 8002984:	2140      	movs	r1, #64	; 0x40
 8002986:	0018      	movs	r0, r3
 8002988:	f002 f932 	bl	8004bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800298c:	193b      	adds	r3, r7, r4
 800298e:	22c0      	movs	r2, #192	; 0xc0
 8002990:	0092      	lsls	r2, r2, #2
 8002992:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002994:	193b      	adds	r3, r7, r4
 8002996:	2212      	movs	r2, #18
 8002998:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	193b      	adds	r3, r7, r4
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a0:	193b      	adds	r3, r7, r4
 80029a2:	2200      	movs	r2, #0
 80029a4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80029a6:	193b      	adds	r3, r7, r4
 80029a8:	2206      	movs	r2, #6
 80029aa:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ac:	193b      	adds	r3, r7, r4
 80029ae:	4a36      	ldr	r2, [pc, #216]	; (8002a88 <MX_GPIO_Init+0x180>)
 80029b0:	0019      	movs	r1, r3
 80029b2:	0010      	movs	r0, r2
 80029b4:	f001 ffb8 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_INT_Pin */
  GPIO_InitStruct.Pin = TEMP_INT_Pin;
 80029b8:	0021      	movs	r1, r4
 80029ba:	187b      	adds	r3, r7, r1
 80029bc:	2280      	movs	r2, #128	; 0x80
 80029be:	01d2      	lsls	r2, r2, #7
 80029c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c2:	000c      	movs	r4, r1
 80029c4:	193b      	adds	r3, r7, r4
 80029c6:	2200      	movs	r2, #0
 80029c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	193b      	adds	r3, r7, r4
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TEMP_INT_GPIO_Port, &GPIO_InitStruct);
 80029d0:	193b      	adds	r3, r7, r4
 80029d2:	4a2e      	ldr	r2, [pc, #184]	; (8002a8c <MX_GPIO_Init+0x184>)
 80029d4:	0019      	movs	r1, r3
 80029d6:	0010      	movs	r0, r2
 80029d8:	f001 ffa6 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA_HAB_Pin LE_ATT_Pin TEMP_HIGH_Pin TEMP_OK_Pin
                           CURR_H_Pin CURR_N_Pin CURR_L_Pin */
  GPIO_InitStruct.Pin = PA_HAB_Pin|LE_ATT_Pin|TEMP_HIGH_Pin|TEMP_OK_Pin
 80029dc:	193b      	adds	r3, r7, r4
 80029de:	4a29      	ldr	r2, [pc, #164]	; (8002a84 <MX_GPIO_Init+0x17c>)
 80029e0:	601a      	str	r2, [r3, #0]
                          |CURR_H_Pin|CURR_N_Pin|CURR_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e2:	193b      	adds	r3, r7, r4
 80029e4:	2201      	movs	r2, #1
 80029e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	193b      	adds	r3, r7, r4
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ee:	193b      	adds	r3, r7, r4
 80029f0:	2200      	movs	r2, #0
 80029f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f4:	193a      	adds	r2, r7, r4
 80029f6:	23a0      	movs	r3, #160	; 0xa0
 80029f8:	05db      	lsls	r3, r3, #23
 80029fa:	0011      	movs	r1, r2
 80029fc:	0018      	movs	r0, r3
 80029fe:	f001 ff93 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_ATT_Pin DATA_ATT_Pin DE_485_Pin */
  GPIO_InitStruct.Pin = CLK_ATT_Pin|DATA_ATT_Pin|DE_485_Pin;
 8002a02:	193b      	adds	r3, r7, r4
 8002a04:	2223      	movs	r2, #35	; 0x23
 8002a06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a08:	193b      	adds	r3, r7, r4
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	193b      	adds	r3, r7, r4
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a14:	193b      	adds	r3, r7, r4
 8002a16:	2200      	movs	r2, #0
 8002a18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1a:	193b      	adds	r3, r7, r4
 8002a1c:	4a1a      	ldr	r2, [pc, #104]	; (8002a88 <MX_GPIO_Init+0x180>)
 8002a1e:	0019      	movs	r1, r3
 8002a20:	0010      	movs	r0, r2
 8002a22:	f001 ff81 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a26:	193b      	adds	r3, r7, r4
 8002a28:	2240      	movs	r2, #64	; 0x40
 8002a2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a2c:	193b      	adds	r3, r7, r4
 8002a2e:	2201      	movs	r2, #1
 8002a30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	193b      	adds	r3, r7, r4
 8002a34:	2200      	movs	r2, #0
 8002a36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a38:	193b      	adds	r3, r7, r4
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a3e:	193b      	adds	r3, r7, r4
 8002a40:	4a12      	ldr	r2, [pc, #72]	; (8002a8c <MX_GPIO_Init+0x184>)
 8002a42:	0019      	movs	r1, r3
 8002a44:	0010      	movs	r0, r2
 8002a46:	f001 ff6f 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a4a:	0021      	movs	r1, r4
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	22c0      	movs	r2, #192	; 0xc0
 8002a50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	2202      	movs	r2, #2
 8002a56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5e:	187b      	adds	r3, r7, r1
 8002a60:	2200      	movs	r2, #0
 8002a62:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	2200      	movs	r2, #0
 8002a68:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6a:	187b      	adds	r3, r7, r1
 8002a6c:	4a06      	ldr	r2, [pc, #24]	; (8002a88 <MX_GPIO_Init+0x180>)
 8002a6e:	0019      	movs	r1, r3
 8002a70:	0010      	movs	r0, r2
 8002a72:	f001 ff59 	bl	8004928 <HAL_GPIO_Init>

}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b009      	add	sp, #36	; 0x24
 8002a7c:	bd90      	pop	{r4, r7, pc}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	40021000 	.word	0x40021000
 8002a84:	00001f88 	.word	0x00001f88
 8002a88:	50000400 	.word	0x50000400
 8002a8c:	50000800 	.word	0x50000800

08002a90 <get_db_gain>:

/* USER CODE BEGIN 4 */

uint8_t get_db_gain(uint16_t adc_gain) {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	0002      	movs	r2, r0
 8002a98:	1dbb      	adds	r3, r7, #6
 8002a9a:	801a      	strh	r2, [r3, #0]

	if (adc_gain >= 3781)
 8002a9c:	1dbb      	adds	r3, r7, #6
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	4a9e      	ldr	r2, [pc, #632]	; (8002d1c <get_db_gain+0x28c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <get_db_gain+0x1a>
		return 45;
 8002aa6:	232d      	movs	r3, #45	; 0x2d
 8002aa8:	e133      	b.n	8002d12 <get_db_gain+0x282>
	else if (adc_gain < 3781 && adc_gain >= 1515)
 8002aaa:	1dbb      	adds	r3, r7, #6
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	4a9b      	ldr	r2, [pc, #620]	; (8002d1c <get_db_gain+0x28c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d81a      	bhi.n	8002aea <get_db_gain+0x5a>
 8002ab4:	1dbb      	adds	r3, r7, #6
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	4a99      	ldr	r2, [pc, #612]	; (8002d20 <get_db_gain+0x290>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d915      	bls.n	8002aea <get_db_gain+0x5a>
		return 0.0022f * adc_gain + 36.6571f;
 8002abe:	1dbb      	adds	r3, r7, #6
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f7fe fb5e 	bl	8001184 <__aeabi_i2f>
 8002ac8:	1c03      	adds	r3, r0, #0
 8002aca:	4996      	ldr	r1, [pc, #600]	; (8002d24 <get_db_gain+0x294>)
 8002acc:	1c18      	adds	r0, r3, #0
 8002ace:	f7fe f84f 	bl	8000b70 <__aeabi_fmul>
 8002ad2:	1c03      	adds	r3, r0, #0
 8002ad4:	4994      	ldr	r1, [pc, #592]	; (8002d28 <get_db_gain+0x298>)
 8002ad6:	1c18      	adds	r0, r3, #0
 8002ad8:	f7fd fce4 	bl	80004a4 <__aeabi_fadd>
 8002adc:	1c03      	adds	r3, r0, #0
 8002ade:	1c18      	adds	r0, r3, #0
 8002ae0:	f7fd fcc8 	bl	8000474 <__aeabi_f2uiz>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	e113      	b.n	8002d12 <get_db_gain+0x282>
	else if (adc_gain < 1515 && adc_gain >= 1188)
 8002aea:	1dbb      	adds	r3, r7, #6
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	4a8c      	ldr	r2, [pc, #560]	; (8002d20 <get_db_gain+0x290>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d81a      	bhi.n	8002b2a <get_db_gain+0x9a>
 8002af4:	1dbb      	adds	r3, r7, #6
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	4a8c      	ldr	r2, [pc, #560]	; (8002d2c <get_db_gain+0x29c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d915      	bls.n	8002b2a <get_db_gain+0x9a>
		return (0.0153f * adc_gain + 16.8349f);
 8002afe:	1dbb      	adds	r3, r7, #6
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	0018      	movs	r0, r3
 8002b04:	f7fe fb3e 	bl	8001184 <__aeabi_i2f>
 8002b08:	1c03      	adds	r3, r0, #0
 8002b0a:	4989      	ldr	r1, [pc, #548]	; (8002d30 <get_db_gain+0x2a0>)
 8002b0c:	1c18      	adds	r0, r3, #0
 8002b0e:	f7fe f82f 	bl	8000b70 <__aeabi_fmul>
 8002b12:	1c03      	adds	r3, r0, #0
 8002b14:	4987      	ldr	r1, [pc, #540]	; (8002d34 <get_db_gain+0x2a4>)
 8002b16:	1c18      	adds	r0, r3, #0
 8002b18:	f7fd fcc4 	bl	80004a4 <__aeabi_fadd>
 8002b1c:	1c03      	adds	r3, r0, #0
 8002b1e:	1c18      	adds	r0, r3, #0
 8002b20:	f7fd fca8 	bl	8000474 <__aeabi_f2uiz>
 8002b24:	0003      	movs	r3, r0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	e0f3      	b.n	8002d12 <get_db_gain+0x282>
	else if (adc_gain < 1188 && adc_gain >= 1005)
 8002b2a:	1dbb      	adds	r3, r7, #6
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	4a7f      	ldr	r2, [pc, #508]	; (8002d2c <get_db_gain+0x29c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d81b      	bhi.n	8002b6c <get_db_gain+0xdc>
 8002b34:	1dbb      	adds	r3, r7, #6
 8002b36:	881a      	ldrh	r2, [r3, #0]
 8002b38:	23fb      	movs	r3, #251	; 0xfb
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d915      	bls.n	8002b6c <get_db_gain+0xdc>
		return (0.0273f * adc_gain + 2.540f);
 8002b40:	1dbb      	adds	r3, r7, #6
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	0018      	movs	r0, r3
 8002b46:	f7fe fb1d 	bl	8001184 <__aeabi_i2f>
 8002b4a:	1c03      	adds	r3, r0, #0
 8002b4c:	497a      	ldr	r1, [pc, #488]	; (8002d38 <get_db_gain+0x2a8>)
 8002b4e:	1c18      	adds	r0, r3, #0
 8002b50:	f7fe f80e 	bl	8000b70 <__aeabi_fmul>
 8002b54:	1c03      	adds	r3, r0, #0
 8002b56:	4979      	ldr	r1, [pc, #484]	; (8002d3c <get_db_gain+0x2ac>)
 8002b58:	1c18      	adds	r0, r3, #0
 8002b5a:	f7fd fca3 	bl	80004a4 <__aeabi_fadd>
 8002b5e:	1c03      	adds	r3, r0, #0
 8002b60:	1c18      	adds	r0, r3, #0
 8002b62:	f7fd fc87 	bl	8000474 <__aeabi_f2uiz>
 8002b66:	0003      	movs	r3, r0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	e0d2      	b.n	8002d12 <get_db_gain+0x282>
	else if (adc_gain < 1005 && adc_gain >= 897)
 8002b6c:	1dbb      	adds	r3, r7, #6
 8002b6e:	881a      	ldrh	r2, [r3, #0]
 8002b70:	23fb      	movs	r3, #251	; 0xfb
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d81b      	bhi.n	8002bb0 <get_db_gain+0x120>
 8002b78:	1dbb      	adds	r3, r7, #6
 8002b7a:	881a      	ldrh	r2, [r3, #0]
 8002b7c:	23e0      	movs	r3, #224	; 0xe0
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d915      	bls.n	8002bb0 <get_db_gain+0x120>
		return (0.0463f * adc_gain - 16.5278f);
 8002b84:	1dbb      	adds	r3, r7, #6
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f7fe fafb 	bl	8001184 <__aeabi_i2f>
 8002b8e:	1c03      	adds	r3, r0, #0
 8002b90:	496b      	ldr	r1, [pc, #428]	; (8002d40 <get_db_gain+0x2b0>)
 8002b92:	1c18      	adds	r0, r3, #0
 8002b94:	f7fd ffec 	bl	8000b70 <__aeabi_fmul>
 8002b98:	1c03      	adds	r3, r0, #0
 8002b9a:	496a      	ldr	r1, [pc, #424]	; (8002d44 <get_db_gain+0x2b4>)
 8002b9c:	1c18      	adds	r0, r3, #0
 8002b9e:	f7fe f90d 	bl	8000dbc <__aeabi_fsub>
 8002ba2:	1c03      	adds	r3, r0, #0
 8002ba4:	1c18      	adds	r0, r3, #0
 8002ba6:	f7fd fc65 	bl	8000474 <__aeabi_f2uiz>
 8002baa:	0003      	movs	r3, r0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	e0b0      	b.n	8002d12 <get_db_gain+0x282>
	else if (adc_gain < 897 && adc_gain >= 825)
 8002bb0:	1dbb      	adds	r3, r7, #6
 8002bb2:	881a      	ldrh	r2, [r3, #0]
 8002bb4:	23e0      	movs	r3, #224	; 0xe0
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d81b      	bhi.n	8002bf4 <get_db_gain+0x164>
 8002bbc:	1dbb      	adds	r3, r7, #6
 8002bbe:	881a      	ldrh	r2, [r3, #0]
 8002bc0:	23ce      	movs	r3, #206	; 0xce
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d915      	bls.n	8002bf4 <get_db_gain+0x164>
		return (0.0694f * adc_gain - 37.2917f);
 8002bc8:	1dbb      	adds	r3, r7, #6
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f7fe fad9 	bl	8001184 <__aeabi_i2f>
 8002bd2:	1c03      	adds	r3, r0, #0
 8002bd4:	495c      	ldr	r1, [pc, #368]	; (8002d48 <get_db_gain+0x2b8>)
 8002bd6:	1c18      	adds	r0, r3, #0
 8002bd8:	f7fd ffca 	bl	8000b70 <__aeabi_fmul>
 8002bdc:	1c03      	adds	r3, r0, #0
 8002bde:	495b      	ldr	r1, [pc, #364]	; (8002d4c <get_db_gain+0x2bc>)
 8002be0:	1c18      	adds	r0, r3, #0
 8002be2:	f7fe f8eb 	bl	8000dbc <__aeabi_fsub>
 8002be6:	1c03      	adds	r3, r0, #0
 8002be8:	1c18      	adds	r0, r3, #0
 8002bea:	f7fd fc43 	bl	8000474 <__aeabi_f2uiz>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	e08e      	b.n	8002d12 <get_db_gain+0x282>
	else if (adc_gain < 825 && adc_gain >= 776)
 8002bf4:	1dbb      	adds	r3, r7, #6
 8002bf6:	881a      	ldrh	r2, [r3, #0]
 8002bf8:	23ce      	movs	r3, #206	; 0xce
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d81b      	bhi.n	8002c38 <get_db_gain+0x1a8>
 8002c00:	1dbb      	adds	r3, r7, #6
 8002c02:	881a      	ldrh	r2, [r3, #0]
 8002c04:	23c2      	movs	r3, #194	; 0xc2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d315      	bcc.n	8002c38 <get_db_gain+0x1a8>
		return (0.1020f * adc_gain - 64.1837f);
 8002c0c:	1dbb      	adds	r3, r7, #6
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7fe fab7 	bl	8001184 <__aeabi_i2f>
 8002c16:	1c03      	adds	r3, r0, #0
 8002c18:	494d      	ldr	r1, [pc, #308]	; (8002d50 <get_db_gain+0x2c0>)
 8002c1a:	1c18      	adds	r0, r3, #0
 8002c1c:	f7fd ffa8 	bl	8000b70 <__aeabi_fmul>
 8002c20:	1c03      	adds	r3, r0, #0
 8002c22:	494c      	ldr	r1, [pc, #304]	; (8002d54 <get_db_gain+0x2c4>)
 8002c24:	1c18      	adds	r0, r3, #0
 8002c26:	f7fe f8c9 	bl	8000dbc <__aeabi_fsub>
 8002c2a:	1c03      	adds	r3, r0, #0
 8002c2c:	1c18      	adds	r0, r3, #0
 8002c2e:	f7fd fc21 	bl	8000474 <__aeabi_f2uiz>
 8002c32:	0003      	movs	r3, r0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	e06c      	b.n	8002d12 <get_db_gain+0x282>
	else if (adc_gain < 776 && adc_gain >= 746)
 8002c38:	1dbb      	adds	r3, r7, #6
 8002c3a:	881a      	ldrh	r2, [r3, #0]
 8002c3c:	23c2      	movs	r3, #194	; 0xc2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d21a      	bcs.n	8002c7a <get_db_gain+0x1ea>
 8002c44:	1dbb      	adds	r3, r7, #6
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	4a43      	ldr	r2, [pc, #268]	; (8002d58 <get_db_gain+0x2c8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d915      	bls.n	8002c7a <get_db_gain+0x1ea>
		return (0.1667f * adc_gain - 114.333f);
 8002c4e:	1dbb      	adds	r3, r7, #6
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	0018      	movs	r0, r3
 8002c54:	f7fe fa96 	bl	8001184 <__aeabi_i2f>
 8002c58:	1c03      	adds	r3, r0, #0
 8002c5a:	4940      	ldr	r1, [pc, #256]	; (8002d5c <get_db_gain+0x2cc>)
 8002c5c:	1c18      	adds	r0, r3, #0
 8002c5e:	f7fd ff87 	bl	8000b70 <__aeabi_fmul>
 8002c62:	1c03      	adds	r3, r0, #0
 8002c64:	493e      	ldr	r1, [pc, #248]	; (8002d60 <get_db_gain+0x2d0>)
 8002c66:	1c18      	adds	r0, r3, #0
 8002c68:	f7fe f8a8 	bl	8000dbc <__aeabi_fsub>
 8002c6c:	1c03      	adds	r3, r0, #0
 8002c6e:	1c18      	adds	r0, r3, #0
 8002c70:	f7fd fc00 	bl	8000474 <__aeabi_f2uiz>
 8002c74:	0003      	movs	r3, r0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	e04b      	b.n	8002d12 <get_db_gain+0x282>
	else if (adc_gain < 746 && adc_gain >= 733)
 8002c7a:	1dbb      	adds	r3, r7, #6
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	4a36      	ldr	r2, [pc, #216]	; (8002d58 <get_db_gain+0x2c8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d81b      	bhi.n	8002cbc <get_db_gain+0x22c>
 8002c84:	1dbb      	adds	r3, r7, #6
 8002c86:	881a      	ldrh	r2, [r3, #0]
 8002c88:	23b7      	movs	r3, #183	; 0xb7
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d915      	bls.n	8002cbc <get_db_gain+0x22c>
		return (0.3846f * adc_gain - 276.9231f);
 8002c90:	1dbb      	adds	r3, r7, #6
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	0018      	movs	r0, r3
 8002c96:	f7fe fa75 	bl	8001184 <__aeabi_i2f>
 8002c9a:	1c03      	adds	r3, r0, #0
 8002c9c:	4931      	ldr	r1, [pc, #196]	; (8002d64 <get_db_gain+0x2d4>)
 8002c9e:	1c18      	adds	r0, r3, #0
 8002ca0:	f7fd ff66 	bl	8000b70 <__aeabi_fmul>
 8002ca4:	1c03      	adds	r3, r0, #0
 8002ca6:	4930      	ldr	r1, [pc, #192]	; (8002d68 <get_db_gain+0x2d8>)
 8002ca8:	1c18      	adds	r0, r3, #0
 8002caa:	f7fe f887 	bl	8000dbc <__aeabi_fsub>
 8002cae:	1c03      	adds	r3, r0, #0
 8002cb0:	1c18      	adds	r0, r3, #0
 8002cb2:	f7fd fbdf 	bl	8000474 <__aeabi_f2uiz>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	e02a      	b.n	8002d12 <get_db_gain+0x282>
	else if (adc_gain < 733 && adc_gain >= 725)
 8002cbc:	1dbb      	adds	r3, r7, #6
 8002cbe:	881a      	ldrh	r2, [r3, #0]
 8002cc0:	23b7      	movs	r3, #183	; 0xb7
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d81b      	bhi.n	8002d00 <get_db_gain+0x270>
 8002cc8:	1dbb      	adds	r3, r7, #6
 8002cca:	881a      	ldrh	r2, [r3, #0]
 8002ccc:	23b5      	movs	r3, #181	; 0xb5
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d915      	bls.n	8002d00 <get_db_gain+0x270>
		return (0.625f * adc_gain - 453.125f);
 8002cd4:	1dbb      	adds	r3, r7, #6
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f7fe fa53 	bl	8001184 <__aeabi_i2f>
 8002cde:	1c03      	adds	r3, r0, #0
 8002ce0:	4922      	ldr	r1, [pc, #136]	; (8002d6c <get_db_gain+0x2dc>)
 8002ce2:	1c18      	adds	r0, r3, #0
 8002ce4:	f7fd ff44 	bl	8000b70 <__aeabi_fmul>
 8002ce8:	1c03      	adds	r3, r0, #0
 8002cea:	4921      	ldr	r1, [pc, #132]	; (8002d70 <get_db_gain+0x2e0>)
 8002cec:	1c18      	adds	r0, r3, #0
 8002cee:	f7fe f865 	bl	8000dbc <__aeabi_fsub>
 8002cf2:	1c03      	adds	r3, r0, #0
 8002cf4:	1c18      	adds	r0, r3, #0
 8002cf6:	f7fd fbbd 	bl	8000474 <__aeabi_f2uiz>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	e008      	b.n	8002d12 <get_db_gain+0x282>
	else if (adc_gain < 725)
 8002d00:	1dbb      	adds	r3, r7, #6
 8002d02:	881a      	ldrh	r2, [r3, #0]
 8002d04:	23b5      	movs	r3, #181	; 0xb5
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d801      	bhi.n	8002d10 <get_db_gain+0x280>
		return 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	e000      	b.n	8002d12 <get_db_gain+0x282>
	return 0;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	0018      	movs	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b002      	add	sp, #8
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	00000ec4 	.word	0x00000ec4
 8002d20:	000005ea 	.word	0x000005ea
 8002d24:	3b102de0 	.word	0x3b102de0
 8002d28:	4212a0df 	.word	0x4212a0df
 8002d2c:	000004a3 	.word	0x000004a3
 8002d30:	3c7aacda 	.word	0x3c7aacda
 8002d34:	4186ade0 	.word	0x4186ade0
 8002d38:	3cdfa440 	.word	0x3cdfa440
 8002d3c:	40228f5c 	.word	0x40228f5c
 8002d40:	3d3da512 	.word	0x3d3da512
 8002d44:	418438ef 	.word	0x418438ef
 8002d48:	3d8e2196 	.word	0x3d8e2196
 8002d4c:	42152ab3 	.word	0x42152ab3
 8002d50:	3dd0e560 	.word	0x3dd0e560
 8002d54:	42805e0e 	.word	0x42805e0e
 8002d58:	000002e9 	.word	0x000002e9
 8002d5c:	3e2ab368 	.word	0x3e2ab368
 8002d60:	42e4aa7f 	.word	0x42e4aa7f
 8002d64:	3ec4ea4b 	.word	0x3ec4ea4b
 8002d68:	438a7628 	.word	0x438a7628
 8002d6c:	3f200000 	.word	0x3f200000
 8002d70:	43e29000 	.word	0x43e29000

08002d74 <USART1_IRQHandler>:
	if (adc_counter >= MEDIA_NUM)
		adc_counter = 0;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, ADC_CHANNEL_NUM);
}

void USART1_IRQHandler(void) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
	uart1_read_to_frame(&uart1);
 8002d78:	4b03      	ldr	r3, [pc, #12]	; (8002d88 <USART1_IRQHandler+0x14>)
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f000 fd28 	bl	80037d0 <uart1_read_to_frame>
}
 8002d80:	46c0      	nop			; (mov r8, r8)
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	20000168 	.word	0x20000168

08002d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d90:	b672      	cpsid	i
}
 8002d92:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002d94:	e7fe      	b.n	8002d94 <Error_Handler+0x8>
	...

08002d98 <max4003_get_dbm>:
 *  Created on: Sep 29, 2022
 *      Author: sigmadev
 */
#include "max4003.h"

uint8_t max4003_get_dbm( MAX4003_t *mx,uint16_t value) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	000a      	movs	r2, r1
 8002da2:	1cbb      	adds	r3, r7, #2
 8002da4:	801a      	strh	r2, [r3, #0]
	float m;
	float b;
	 m = (float) ( MAX4003_DBM_MAX -  MAX4003_DBM_MIN)
			/ (float) (mx->max - mx->min);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	001a      	movs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	885b      	ldrh	r3, [r3, #2]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	0018      	movs	r0, r3
 8002db4:	f7fe f9e6 	bl	8001184 <__aeabi_i2f>
 8002db8:	1c03      	adds	r3, r0, #0
	 m = (float) ( MAX4003_DBM_MAX -  MAX4003_DBM_MIN)
 8002dba:	1c19      	adds	r1, r3, #0
 8002dbc:	481f      	ldr	r0, [pc, #124]	; (8002e3c <max4003_get_dbm+0xa4>)
 8002dbe:	f7fd fd0f 	bl	80007e0 <__aeabi_fdiv>
 8002dc2:	1c03      	adds	r3, r0, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
	 b =  MAX4003_DBM_MAX -mx->max * m;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f7fe f9da 	bl	8001184 <__aeabi_i2f>
 8002dd0:	1c03      	adds	r3, r0, #0
 8002dd2:	68f9      	ldr	r1, [r7, #12]
 8002dd4:	1c18      	adds	r0, r3, #0
 8002dd6:	f7fd fecb 	bl	8000b70 <__aeabi_fmul>
 8002dda:	1c03      	adds	r3, r0, #0
 8002ddc:	1c19      	adds	r1, r3, #0
 8002dde:	2000      	movs	r0, #0
 8002de0:	f7fd ffec 	bl	8000dbc <__aeabi_fsub>
 8002de4:	1c03      	adds	r3, r0, #0
 8002de6:	60bb      	str	r3, [r7, #8]

	if (value > mx->max) {
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	1cba      	adds	r2, r7, #2
 8002dee:	8812      	ldrh	r2, [r2, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d901      	bls.n	8002df8 <max4003_get_dbm+0x60>
		return  MAX4003_DBM_MAX;
 8002df4:	2300      	movs	r3, #0
 8002df6:	e01d      	b.n	8002e34 <max4003_get_dbm+0x9c>
	} else if (value < mx->min) {
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	885b      	ldrh	r3, [r3, #2]
 8002dfc:	1cba      	adds	r2, r7, #2
 8002dfe:	8812      	ldrh	r2, [r2, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d201      	bcs.n	8002e08 <max4003_get_dbm+0x70>
		return  MAX4003_DBM_MIN;
 8002e04:	23e2      	movs	r3, #226	; 0xe2
 8002e06:	e015      	b.n	8002e34 <max4003_get_dbm+0x9c>
	}
	return (int8_t) (m * (float) value + b);
 8002e08:	1cbb      	adds	r3, r7, #2
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f7fe fa07 	bl	8001220 <__aeabi_ui2f>
 8002e12:	1c03      	adds	r3, r0, #0
 8002e14:	68f9      	ldr	r1, [r7, #12]
 8002e16:	1c18      	adds	r0, r3, #0
 8002e18:	f7fd feaa 	bl	8000b70 <__aeabi_fmul>
 8002e1c:	1c03      	adds	r3, r0, #0
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	1c18      	adds	r0, r3, #0
 8002e22:	f7fd fb3f 	bl	80004a4 <__aeabi_fadd>
 8002e26:	1c03      	adds	r3, r0, #0
 8002e28:	1c18      	adds	r0, r3, #0
 8002e2a:	f7fe f98b 	bl	8001144 <__aeabi_f2iz>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	b25b      	sxtb	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
}
 8002e34:	0018      	movs	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b004      	add	sp, #16
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	41f00000 	.word	0x41f00000

08002e40 <module_init>:
 *      Author: sigmadev
 */

#include <module.h>

void  module_init(Module_t* module ,Function_t funcion, Id_t id){
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	0008      	movs	r0, r1
 8002e4a:	0011      	movs	r1, r2
 8002e4c:	1cfb      	adds	r3, r7, #3
 8002e4e:	1c02      	adds	r2, r0, #0
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	1cbb      	adds	r3, r7, #2
 8002e54:	1c0a      	adds	r2, r1, #0
 8002e56:	701a      	strb	r2, [r3, #0]
module->function = funcion;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	1cfa      	adds	r2, r7, #3
 8002e5c:	7812      	ldrb	r2, [r2, #0]
 8002e5e:	745a      	strb	r2, [r3, #17]
module->id = id;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	1cba      	adds	r2, r7, #2
 8002e64:	7812      	ldrb	r2, [r2, #0]
 8002e66:	741a      	strb	r2, [r3, #16]
module->att = 0;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
module->gain =   0;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	705a      	strb	r2, [r3, #1]
module->pin = 0;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	715a      	strb	r2, [r3, #5]
module->pout = 0;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	709a      	strb	r2, [r3, #2]
module->temperature = 0;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]
module->state = true;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	71da      	strb	r2, [r3, #7]
}
 8002e8c:	46c0      	nop			; (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b002      	add	sp, #8
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <module_vswr_calc>:

float module_vswr_calc(int8_t pf, int8_t pr){
 8002e94:	b590      	push	{r4, r7, lr}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	0002      	movs	r2, r0
 8002e9c:	1dfb      	adds	r3, r7, #7
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	1dbb      	adds	r3, r7, #6
 8002ea2:	1c0a      	adds	r2, r1, #0
 8002ea4:	701a      	strb	r2, [r3, #0]
	float den;
	float num;
	float factor;
	float result;

	factor = (float) pf/ (float) pr;
 8002ea6:	1dfb      	adds	r3, r7, #7
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	b25b      	sxtb	r3, r3
 8002eac:	0018      	movs	r0, r3
 8002eae:	f7fe f969 	bl	8001184 <__aeabi_i2f>
 8002eb2:	1c04      	adds	r4, r0, #0
 8002eb4:	1dbb      	adds	r3, r7, #6
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	b25b      	sxtb	r3, r3
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f7fe f962 	bl	8001184 <__aeabi_i2f>
 8002ec0:	1c03      	adds	r3, r0, #0
 8002ec2:	1c19      	adds	r1, r3, #0
 8002ec4:	1c20      	adds	r0, r4, #0
 8002ec6:	f7fd fc8b 	bl	80007e0 <__aeabi_fdiv>
 8002eca:	1c03      	adds	r3, r0, #0
 8002ecc:	617b      	str	r3, [r7, #20]
	den  = 1.0f + sqrtf(factor);
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	1c18      	adds	r0, r3, #0
 8002ed2:	f003 f9bd 	bl	8006250 <sqrtf>
 8002ed6:	1c03      	adds	r3, r0, #0
 8002ed8:	21fe      	movs	r1, #254	; 0xfe
 8002eda:	0589      	lsls	r1, r1, #22
 8002edc:	1c18      	adds	r0, r3, #0
 8002ede:	f7fd fae1 	bl	80004a4 <__aeabi_fadd>
 8002ee2:	1c03      	adds	r3, r0, #0
 8002ee4:	613b      	str	r3, [r7, #16]
	num = 1.0f - sqrtf(factor);
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	1c18      	adds	r0, r3, #0
 8002eea:	f003 f9b1 	bl	8006250 <sqrtf>
 8002eee:	1c03      	adds	r3, r0, #0
 8002ef0:	1c19      	adds	r1, r3, #0
 8002ef2:	20fe      	movs	r0, #254	; 0xfe
 8002ef4:	0580      	lsls	r0, r0, #22
 8002ef6:	f7fd ff61 	bl	8000dbc <__aeabi_fsub>
 8002efa:	1c03      	adds	r3, r0, #0
 8002efc:	60fb      	str	r3, [r7, #12]
	result = den / num;
 8002efe:	68f9      	ldr	r1, [r7, #12]
 8002f00:	6938      	ldr	r0, [r7, #16]
 8002f02:	f7fd fc6d 	bl	80007e0 <__aeabi_fdiv>
 8002f06:	1c03      	adds	r3, r0, #0
 8002f08:	60bb      	str	r3, [r7, #8]
	return result;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
}
 8002f0c:	1c18      	adds	r0, r3, #0
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b007      	add	sp, #28
 8002f12:	bd90      	pop	{r4, r7, pc}

08002f14 <rs485_init>:
 *  Created on: Sep 28, 2022
 *      Author: sigmadev
 */
#include "rs485.h"

void rs485_init(RS485_t *r) {
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
	r->len = 0;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	705a      	strb	r2, [r3, #1]
	r->status = NO_DATA;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2207      	movs	r2, #7
 8002f26:	721a      	strb	r2, [r3, #8]
	r->cmd = NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b002      	add	sp, #8
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <rs485_check_frame>:
Rs485_status_t rs485_check_frame(RS485_t *r, UART1_t *u) {
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	6039      	str	r1, [r7, #0]

	if (u->rx_count > (3 + 1 + 2)){
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	7a1b      	ldrb	r3, [r3, #8]
 8002f44:	2b06      	cmp	r3, #6
 8002f46:	d915      	bls.n	8002f74 <rs485_check_frame+0x3e>
		if (u->rx_buffer[0] == LTEL_START_MARK)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	227e      	movs	r2, #126	; 0x7e
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d10d      	bne.n	8002f70 <rs485_check_frame+0x3a>
			if(u->rx_buffer[u->rx_count-1] == LTEL_END_MARK)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	7a1b      	ldrb	r3, [r3, #8]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	18d3      	adds	r3, r2, r3
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	227f      	movs	r2, #127	; 0x7f
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d101      	bne.n	8002f6c <rs485_check_frame+0x36>
				return VALID_FRAME;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e004      	b.n	8002f76 <rs485_check_frame+0x40>
			else
				return START_READING;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e002      	b.n	8002f76 <rs485_check_frame+0x40>
		else
			return START_READING;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <rs485_check_frame+0x40>
	}
	return  WAITING;
 8002f74:	2308      	movs	r3, #8
}
 8002f76:	0018      	movs	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	b002      	add	sp, #8
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <rs485_check_valid_module>:


Rs485_status_t  rs485_check_valid_module(UART1_t *uart1){
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
if (uart1->rx_buffer[1] == POWER_AMPLIFIER) {
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b09      	cmp	r3, #9
 8002f90:	d11e      	bne.n	8002fd0 <rs485_check_valid_module+0x52>
			if (uart1->rx_buffer[2] == ID8) {
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3302      	adds	r3, #2
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d116      	bne.n	8002fcc <rs485_check_valid_module+0x4e>
				for (int i = 3; i  < uart1->rx_count; i++)
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	e00c      	b.n	8002fbe <rs485_check_valid_module+0x40>
					if (uart1->rx_buffer[i] == LTEL_END_MARK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	18d3      	adds	r3, r2, r3
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	227f      	movs	r2, #127	; 0x7f
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d101      	bne.n	8002fb8 <rs485_check_valid_module+0x3a>
						return   DATA_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e00e      	b.n	8002fd6 <rs485_check_valid_module+0x58>
				for (int i = 3; i  < uart1->rx_count; i++)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	7a1b      	ldrb	r3, [r3, #8]
 8002fc2:	001a      	movs	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	dbec      	blt.n	8002fa4 <rs485_check_valid_module+0x26>
 8002fca:	e003      	b.n	8002fd4 <rs485_check_valid_module+0x56>
			} else
				return   WRONG_MODULE_ID;
 8002fcc:	2305      	movs	r3, #5
 8002fce:	e002      	b.n	8002fd6 <rs485_check_valid_module+0x58>
		} else
			return  NO_VALID_MODULE;
 8002fd0:	2304      	movs	r3, #4
 8002fd2:	e000      	b.n	8002fd6 <rs485_check_valid_module+0x58>
return NO_VALID_MODULE;
 8002fd4:	2304      	movs	r3, #4
}
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b004      	add	sp, #16
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <rs485_set_query_frame>:

void rs485_set_query_frame(RS485_t *r, Module_t *module) {
 8002fde:	b590      	push	{r4, r7, lr}
 8002fe0:	b085      	sub	sp, #20
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	6039      	str	r1, [r7, #0]

	uint8_t crc_frame[2];
	uint16_t crc;
	r->frame[0] = LTEL_START_MARK;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	227e      	movs	r2, #126	; 0x7e
 8002fee:	701a      	strb	r2, [r3, #0]
	r->frame[1] = module->function;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	7c52      	ldrb	r2, [r2, #17]
 8002ffa:	701a      	strb	r2, [r3, #0]
	r->frame[2] = module->id;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	3302      	adds	r3, #2
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	7c12      	ldrb	r2, [r2, #16]
 8003006:	701a      	strb	r2, [r3, #0]
	r->frame[3] = r->cmd;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	3303      	adds	r3, #3
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	7812      	ldrb	r2, [r2, #0]
 8003012:	701a      	strb	r2, [r3, #0]

	if (module->function == LOW_NOISE_AMPLIFIER) {
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	7c5b      	ldrb	r3, [r3, #17]
 8003018:	2b08      	cmp	r3, #8
 800301a:	d000      	beq.n	800301e <rs485_set_query_frame+0x40>
 800301c:	e084      	b.n	8003128 <rs485_set_query_frame+0x14a>
		switch (r->cmd) {
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b11      	cmp	r3, #17
 8003024:	d002      	beq.n	800302c <rs485_set_query_frame+0x4e>
 8003026:	2b12      	cmp	r3, #18
 8003028:	d02a      	beq.n	8003080 <rs485_set_query_frame+0xa2>
 800302a:	e056      	b.n	80030da <rs485_set_query_frame+0xfc>
		case QUERY_PARAMETER_LTEL:
			r->frame[4] = 0x00;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	3304      	adds	r3, #4
 8003032:	2200      	movs	r2, #0
 8003034:	701a      	strb	r2, [r3, #0]
			r->frame[5] = 0x05;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	3305      	adds	r3, #5
 800303c:	2205      	movs	r2, #5
 800303e:	701a      	strb	r2, [r3, #0]
			r->frame[6] = 0x00;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	3306      	adds	r3, #6
 8003046:	2200      	movs	r2, #0
 8003048:	701a      	strb	r2, [r3, #0]
			r->frame[7] = module->att;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	3307      	adds	r3, #7
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	7812      	ldrb	r2, [r2, #0]
 8003054:	701a      	strb	r2, [r3, #0]
			r->frame[8] = module->gain;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	3308      	adds	r3, #8
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	7852      	ldrb	r2, [r2, #1]
 8003060:	701a      	strb	r2, [r3, #0]
			r->frame[9] = module->pout;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2202      	movs	r2, #2
 8003066:	569a      	ldrsb	r2, [r3, r2]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	3309      	adds	r3, #9
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	701a      	strb	r2, [r3, #0]
			r->frame[10] = module->voltage;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	330a      	adds	r3, #10
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	7912      	ldrb	r2, [r2, #4]
 800307c:	701a      	strb	r2, [r3, #0]
			break;
 800307e:	e030      	b.n	80030e2 <rs485_set_query_frame+0x104>
		case QUERY_PARAMETER_SIGMA:
			r->frame[4] = 0x06;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	3304      	adds	r3, #4
 8003086:	2206      	movs	r2, #6
 8003088:	701a      	strb	r2, [r3, #0]
			r->frame[5] = module->pout;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2202      	movs	r2, #2
 800308e:	569a      	ldrsb	r2, [r3, r2]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	3305      	adds	r3, #5
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]
			r->frame[6] = module->att;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	3306      	adds	r3, #6
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	7812      	ldrb	r2, [r2, #0]
 80030a4:	701a      	strb	r2, [r3, #0]
			r->frame[7] = module->gain;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	3307      	adds	r3, #7
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	7852      	ldrb	r2, [r2, #1]
 80030b0:	701a      	strb	r2, [r3, #0]
			r->frame[8] = module->current;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	3308      	adds	r3, #8
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	7992      	ldrb	r2, [r2, #6]
 80030bc:	701a      	strb	r2, [r3, #0]
			r->frame[9] = module->voltage;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	3309      	adds	r3, #9
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	7912      	ldrb	r2, [r2, #4]
 80030c8:	701a      	strb	r2, [r3, #0]
			r->frame[10] = module->pin;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2205      	movs	r2, #5
 80030ce:	569a      	ldrsb	r2, [r3, r2]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	330a      	adds	r3, #10
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]
		default:
			r->frame[0] = 0;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	701a      	strb	r2, [r3, #0]
		}
		crc = crc_get(&(r->frame[1]), 10);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	3301      	adds	r3, #1
 80030e8:	210a      	movs	r1, #10
 80030ea:	0018      	movs	r0, r3
 80030ec:	f000 fbfe 	bl	80038ec <crc_get>
 80030f0:	0003      	movs	r3, r0
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	200a      	movs	r0, #10
 80030f6:	183b      	adds	r3, r7, r0
 80030f8:	801a      	strh	r2, [r3, #0]
		memcpy(crc_frame, &crc, 2);
 80030fa:	210c      	movs	r1, #12
 80030fc:	187b      	adds	r3, r7, r1
 80030fe:	183a      	adds	r2, r7, r0
 8003100:	8812      	ldrh	r2, [r2, #0]
 8003102:	801a      	strh	r2, [r3, #0]
		r->frame[11] = crc_frame[0];
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	330b      	adds	r3, #11
 800310a:	187a      	adds	r2, r7, r1
 800310c:	7812      	ldrb	r2, [r2, #0]
 800310e:	701a      	strb	r2, [r3, #0]
		r->frame[12] = crc_frame[1];
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	330c      	adds	r3, #12
 8003116:	187a      	adds	r2, r7, r1
 8003118:	7852      	ldrb	r2, [r2, #1]
 800311a:	701a      	strb	r2, [r3, #0]
		r->frame[13] = LTEL_END_MARK;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	330d      	adds	r3, #13
 8003122:	227f      	movs	r2, #127	; 0x7f
 8003124:	701a      	strb	r2, [r3, #0]
		memcpy(crc_frame, &crc, 2);
		r->frame[13 + 1] = crc_frame[0];
		r->frame[13 + 2] = crc_frame[1];
		r->frame[13 + 3] = LTEL_END_MARK;
	}
}
 8003126:	e0c4      	b.n	80032b2 <rs485_set_query_frame+0x2d4>
	} else if (module->function == POWER_AMPLIFIER) {
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	7c5b      	ldrb	r3, [r3, #17]
 800312c:	2b09      	cmp	r3, #9
 800312e:	d000      	beq.n	8003132 <rs485_set_query_frame+0x154>
 8003130:	e0bf      	b.n	80032b2 <rs485_set_query_frame+0x2d4>
		switch (r->cmd) {
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b11      	cmp	r3, #17
 8003138:	d002      	beq.n	8003140 <rs485_set_query_frame+0x162>
 800313a:	2b12      	cmp	r3, #18
 800313c:	d04a      	beq.n	80031d4 <rs485_set_query_frame+0x1f6>
 800313e:	e092      	b.n	8003266 <rs485_set_query_frame+0x288>
			r->frame[4] = 0x00;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	3304      	adds	r3, #4
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
			r->frame[5] = 0x08;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	3305      	adds	r3, #5
 8003150:	2208      	movs	r2, #8
 8003152:	701a      	strb	r2, [r3, #0]
			r->frame[6] = module->state;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	79da      	ldrb	r2, [r3, #7]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	3306      	adds	r3, #6
 800315e:	701a      	strb	r2, [r3, #0]
			r->frame[7] = 0x00;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	3307      	adds	r3, #7
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
			r->frame[8] = module->temperature;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	3308      	adds	r3, #8
 8003174:	001c      	movs	r4, r3
 8003176:	1c10      	adds	r0, r2, #0
 8003178:	f7fd f97c 	bl	8000474 <__aeabi_f2uiz>
 800317c:	0003      	movs	r3, r0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	7023      	strb	r3, [r4, #0]
			r->frame[9] = module->gain;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	3309      	adds	r3, #9
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	7852      	ldrb	r2, [r2, #1]
 800318c:	701a      	strb	r2, [r3, #0]
			r->frame[10] = module->vswr;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	330a      	adds	r3, #10
 8003198:	001c      	movs	r4, r3
 800319a:	1c10      	adds	r0, r2, #0
 800319c:	f7fd f96a 	bl	8000474 <__aeabi_f2uiz>
 80031a0:	0003      	movs	r3, r0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	7023      	strb	r3, [r4, #0]
			r->frame[11] = module->att;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	330b      	adds	r3, #11
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	7812      	ldrb	r2, [r2, #0]
 80031b0:	701a      	strb	r2, [r3, #0]
			r->frame[12] = module->pout;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2202      	movs	r2, #2
 80031b6:	569a      	ldrsb	r2, [r3, r2]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	330c      	adds	r3, #12
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]
			r->frame[13] = module->pin;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2205      	movs	r2, #5
 80031c6:	569a      	ldrsb	r2, [r3, r2]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	330d      	adds	r3, #13
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	701a      	strb	r2, [r3, #0]
			break;
 80031d2:	e04c      	b.n	800326e <rs485_set_query_frame+0x290>
			r->frame[4] = 0x00;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	3304      	adds	r3, #4
 80031da:	2200      	movs	r2, #0
 80031dc:	701a      	strb	r2, [r3, #0]
			r->frame[5] = 0x08;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	3305      	adds	r3, #5
 80031e4:	2208      	movs	r2, #8
 80031e6:	701a      	strb	r2, [r3, #0]
			r->frame[6] = module->state;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	79da      	ldrb	r2, [r3, #7]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	3306      	adds	r3, #6
 80031f2:	701a      	strb	r2, [r3, #0]
			r->frame[7] = 0x00;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	3307      	adds	r3, #7
 80031fa:	2200      	movs	r2, #0
 80031fc:	701a      	strb	r2, [r3, #0]
			r->frame[8] = module->temperature;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	3308      	adds	r3, #8
 8003208:	001c      	movs	r4, r3
 800320a:	1c10      	adds	r0, r2, #0
 800320c:	f7fd f932 	bl	8000474 <__aeabi_f2uiz>
 8003210:	0003      	movs	r3, r0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	7023      	strb	r3, [r4, #0]
			r->frame[9] = module->gain;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	3309      	adds	r3, #9
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	7852      	ldrb	r2, [r2, #1]
 8003220:	701a      	strb	r2, [r3, #0]
			r->frame[10] = module->vswr;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	330a      	adds	r3, #10
 800322c:	001c      	movs	r4, r3
 800322e:	1c10      	adds	r0, r2, #0
 8003230:	f7fd f920 	bl	8000474 <__aeabi_f2uiz>
 8003234:	0003      	movs	r3, r0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	7023      	strb	r3, [r4, #0]
			r->frame[11] = module->att;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	330b      	adds	r3, #11
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	7812      	ldrb	r2, [r2, #0]
 8003244:	701a      	strb	r2, [r3, #0]
			r->frame[12] = module->pout;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2202      	movs	r2, #2
 800324a:	569a      	ldrsb	r2, [r3, r2]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	330c      	adds	r3, #12
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]
			r->frame[13] = module->pin;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2205      	movs	r2, #5
 800325a:	569a      	ldrsb	r2, [r3, r2]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	330d      	adds	r3, #13
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]
			r->frame[0] = 0;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]
		crc = crc_get(&(r->frame[1]), 10);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	3301      	adds	r3, #1
 8003274:	210a      	movs	r1, #10
 8003276:	0018      	movs	r0, r3
 8003278:	f000 fb38 	bl	80038ec <crc_get>
 800327c:	0003      	movs	r3, r0
 800327e:	b29a      	uxth	r2, r3
 8003280:	200a      	movs	r0, #10
 8003282:	183b      	adds	r3, r7, r0
 8003284:	801a      	strh	r2, [r3, #0]
		memcpy(crc_frame, &crc, 2);
 8003286:	210c      	movs	r1, #12
 8003288:	187b      	adds	r3, r7, r1
 800328a:	183a      	adds	r2, r7, r0
 800328c:	8812      	ldrh	r2, [r2, #0]
 800328e:	801a      	strh	r2, [r3, #0]
		r->frame[13 + 1] = crc_frame[0];
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	330e      	adds	r3, #14
 8003296:	187a      	adds	r2, r7, r1
 8003298:	7812      	ldrb	r2, [r2, #0]
 800329a:	701a      	strb	r2, [r3, #0]
		r->frame[13 + 2] = crc_frame[1];
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	330f      	adds	r3, #15
 80032a2:	187a      	adds	r2, r7, r1
 80032a4:	7852      	ldrb	r2, [r2, #1]
 80032a6:	701a      	strb	r2, [r3, #0]
		r->frame[13 + 3] = LTEL_END_MARK;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	3310      	adds	r3, #16
 80032ae:	227f      	movs	r2, #127	; 0x7f
 80032b0:	701a      	strb	r2, [r3, #0]
}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b005      	add	sp, #20
 80032b8:	bd90      	pop	{r4, r7, pc}
	...

080032bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c2:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <HAL_MspInit+0x44>)
 80032c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c6:	4b0e      	ldr	r3, [pc, #56]	; (8003300 <HAL_MspInit+0x44>)
 80032c8:	2101      	movs	r1, #1
 80032ca:	430a      	orrs	r2, r1
 80032cc:	641a      	str	r2, [r3, #64]	; 0x40
 80032ce:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <HAL_MspInit+0x44>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	2201      	movs	r2, #1
 80032d4:	4013      	ands	r3, r2
 80032d6:	607b      	str	r3, [r7, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_MspInit+0x44>)
 80032dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032de:	4b08      	ldr	r3, [pc, #32]	; (8003300 <HAL_MspInit+0x44>)
 80032e0:	2180      	movs	r1, #128	; 0x80
 80032e2:	0549      	lsls	r1, r1, #21
 80032e4:	430a      	orrs	r2, r1
 80032e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <HAL_MspInit+0x44>)
 80032ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	055b      	lsls	r3, r3, #21
 80032f0:	4013      	ands	r3, r2
 80032f2:	603b      	str	r3, [r7, #0]
 80032f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b002      	add	sp, #8
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	40021000 	.word	0x40021000

08003304 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003304:	b590      	push	{r4, r7, lr}
 8003306:	b091      	sub	sp, #68	; 0x44
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330c:	232c      	movs	r3, #44	; 0x2c
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	0018      	movs	r0, r3
 8003312:	2314      	movs	r3, #20
 8003314:	001a      	movs	r2, r3
 8003316:	2100      	movs	r1, #0
 8003318:	f002 fb18 	bl	800594c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800331c:	2414      	movs	r4, #20
 800331e:	193b      	adds	r3, r7, r4
 8003320:	0018      	movs	r0, r3
 8003322:	2318      	movs	r3, #24
 8003324:	001a      	movs	r2, r3
 8003326:	2100      	movs	r1, #0
 8003328:	f002 fb10 	bl	800594c <memset>
  if(hadc->Instance==ADC1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a43      	ldr	r2, [pc, #268]	; (8003440 <HAL_ADC_MspInit+0x13c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d000      	beq.n	8003338 <HAL_ADC_MspInit+0x34>
 8003336:	e07f      	b.n	8003438 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003338:	193b      	adds	r3, r7, r4
 800333a:	2280      	movs	r2, #128	; 0x80
 800333c:	01d2      	lsls	r2, r2, #7
 800333e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003340:	193b      	adds	r3, r7, r4
 8003342:	2200      	movs	r2, #0
 8003344:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003346:	193b      	adds	r3, r7, r4
 8003348:	0018      	movs	r0, r3
 800334a:	f002 f99b 	bl	8005684 <HAL_RCCEx_PeriphCLKConfig>
 800334e:	1e03      	subs	r3, r0, #0
 8003350:	d001      	beq.n	8003356 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8003352:	f7ff fd1b 	bl	8002d8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003356:	4b3b      	ldr	r3, [pc, #236]	; (8003444 <HAL_ADC_MspInit+0x140>)
 8003358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800335a:	4b3a      	ldr	r3, [pc, #232]	; (8003444 <HAL_ADC_MspInit+0x140>)
 800335c:	2180      	movs	r1, #128	; 0x80
 800335e:	0349      	lsls	r1, r1, #13
 8003360:	430a      	orrs	r2, r1
 8003362:	641a      	str	r2, [r3, #64]	; 0x40
 8003364:	4b37      	ldr	r3, [pc, #220]	; (8003444 <HAL_ADC_MspInit+0x140>)
 8003366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003368:	2380      	movs	r3, #128	; 0x80
 800336a:	035b      	lsls	r3, r3, #13
 800336c:	4013      	ands	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003372:	4b34      	ldr	r3, [pc, #208]	; (8003444 <HAL_ADC_MspInit+0x140>)
 8003374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003376:	4b33      	ldr	r3, [pc, #204]	; (8003444 <HAL_ADC_MspInit+0x140>)
 8003378:	2101      	movs	r1, #1
 800337a:	430a      	orrs	r2, r1
 800337c:	635a      	str	r2, [r3, #52]	; 0x34
 800337e:	4b31      	ldr	r3, [pc, #196]	; (8003444 <HAL_ADC_MspInit+0x140>)
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003382:	2201      	movs	r2, #1
 8003384:	4013      	ands	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800338a:	4b2e      	ldr	r3, [pc, #184]	; (8003444 <HAL_ADC_MspInit+0x140>)
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	4b2d      	ldr	r3, [pc, #180]	; (8003444 <HAL_ADC_MspInit+0x140>)
 8003390:	2102      	movs	r1, #2
 8003392:	430a      	orrs	r2, r1
 8003394:	635a      	str	r2, [r3, #52]	; 0x34
 8003396:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <HAL_ADC_MspInit+0x140>)
 8003398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339a:	2202      	movs	r2, #2
 800339c:	4013      	ands	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = AGC_LEVEL_Pin|CURR_Pin|V_IN_SAMPLE_Pin|SWR_Pin
 80033a2:	242c      	movs	r4, #44	; 0x2c
 80033a4:	193b      	adds	r3, r7, r4
 80033a6:	2277      	movs	r2, #119	; 0x77
 80033a8:	601a      	str	r2, [r3, #0]
                          |P_OUT_Pin|P_IN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033aa:	193b      	adds	r3, r7, r4
 80033ac:	2203      	movs	r2, #3
 80033ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b0:	193b      	adds	r3, r7, r4
 80033b2:	2200      	movs	r2, #0
 80033b4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b6:	193a      	adds	r2, r7, r4
 80033b8:	23a0      	movs	r3, #160	; 0xa0
 80033ba:	05db      	lsls	r3, r3, #23
 80033bc:	0011      	movs	r1, r2
 80033be:	0018      	movs	r0, r3
 80033c0:	f001 fab2 	bl	8004928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = T_SN_IN_Pin;
 80033c4:	193b      	adds	r3, r7, r4
 80033c6:	2204      	movs	r2, #4
 80033c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033ca:	193b      	adds	r3, r7, r4
 80033cc:	2203      	movs	r2, #3
 80033ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d0:	193b      	adds	r3, r7, r4
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(T_SN_IN_GPIO_Port, &GPIO_InitStruct);
 80033d6:	193b      	adds	r3, r7, r4
 80033d8:	4a1b      	ldr	r2, [pc, #108]	; (8003448 <HAL_ADC_MspInit+0x144>)
 80033da:	0019      	movs	r1, r3
 80033dc:	0010      	movs	r0, r2
 80033de:	f001 faa3 	bl	8004928 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80033e2:	4b1a      	ldr	r3, [pc, #104]	; (800344c <HAL_ADC_MspInit+0x148>)
 80033e4:	4a1a      	ldr	r2, [pc, #104]	; (8003450 <HAL_ADC_MspInit+0x14c>)
 80033e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80033e8:	4b18      	ldr	r3, [pc, #96]	; (800344c <HAL_ADC_MspInit+0x148>)
 80033ea:	2205      	movs	r2, #5
 80033ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033ee:	4b17      	ldr	r3, [pc, #92]	; (800344c <HAL_ADC_MspInit+0x148>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033f4:	4b15      	ldr	r3, [pc, #84]	; (800344c <HAL_ADC_MspInit+0x148>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80033fa:	4b14      	ldr	r3, [pc, #80]	; (800344c <HAL_ADC_MspInit+0x148>)
 80033fc:	2280      	movs	r2, #128	; 0x80
 80033fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003400:	4b12      	ldr	r3, [pc, #72]	; (800344c <HAL_ADC_MspInit+0x148>)
 8003402:	2280      	movs	r2, #128	; 0x80
 8003404:	0052      	lsls	r2, r2, #1
 8003406:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003408:	4b10      	ldr	r3, [pc, #64]	; (800344c <HAL_ADC_MspInit+0x148>)
 800340a:	2280      	movs	r2, #128	; 0x80
 800340c:	00d2      	lsls	r2, r2, #3
 800340e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003410:	4b0e      	ldr	r3, [pc, #56]	; (800344c <HAL_ADC_MspInit+0x148>)
 8003412:	2200      	movs	r2, #0
 8003414:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <HAL_ADC_MspInit+0x148>)
 8003418:	2200      	movs	r2, #0
 800341a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_ADC_MspInit+0x148>)
 800341e:	0018      	movs	r0, r3
 8003420:	f001 f8f6 	bl	8004610 <HAL_DMA_Init>
 8003424:	1e03      	subs	r3, r0, #0
 8003426:	d001      	beq.n	800342c <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8003428:	f7ff fcb0 	bl	8002d8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a07      	ldr	r2, [pc, #28]	; (800344c <HAL_ADC_MspInit+0x148>)
 8003430:	651a      	str	r2, [r3, #80]	; 0x50
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <HAL_ADC_MspInit+0x148>)
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003438:	46c0      	nop			; (mov r8, r8)
 800343a:	46bd      	mov	sp, r7
 800343c:	b011      	add	sp, #68	; 0x44
 800343e:	bd90      	pop	{r4, r7, pc}
 8003440:	40012400 	.word	0x40012400
 8003444:	40021000 	.word	0x40021000
 8003448:	50000400 	.word	0x50000400
 800344c:	200000f0 	.word	0x200000f0
 8003450:	40020008 	.word	0x40020008

08003454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003458:	e7fe      	b.n	8003458 <NMI_Handler+0x4>

0800345a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800345e:	e7fe      	b.n	800345e <HardFault_Handler+0x4>

08003460 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003464:	46c0      	nop			; (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003478:	f000 fb2e 	bl	8003ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003488:	4b03      	ldr	r3, [pc, #12]	; (8003498 <DMA1_Channel1_IRQHandler+0x14>)
 800348a:	0018      	movs	r0, r3
 800348c:	f001 f94a 	bl	8004724 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003490:	46c0      	nop			; (mov r8, r8)
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	200000f0 	.word	0x200000f0

0800349c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034a4:	4a14      	ldr	r2, [pc, #80]	; (80034f8 <_sbrk+0x5c>)
 80034a6:	4b15      	ldr	r3, [pc, #84]	; (80034fc <_sbrk+0x60>)
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034b0:	4b13      	ldr	r3, [pc, #76]	; (8003500 <_sbrk+0x64>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d102      	bne.n	80034be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034b8:	4b11      	ldr	r3, [pc, #68]	; (8003500 <_sbrk+0x64>)
 80034ba:	4a12      	ldr	r2, [pc, #72]	; (8003504 <_sbrk+0x68>)
 80034bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034be:	4b10      	ldr	r3, [pc, #64]	; (8003500 <_sbrk+0x64>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	18d3      	adds	r3, r2, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d207      	bcs.n	80034dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034cc:	f002 fa00 	bl	80058d0 <__errno>
 80034d0:	0003      	movs	r3, r0
 80034d2:	220c      	movs	r2, #12
 80034d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034d6:	2301      	movs	r3, #1
 80034d8:	425b      	negs	r3, r3
 80034da:	e009      	b.n	80034f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034dc:	4b08      	ldr	r3, [pc, #32]	; (8003500 <_sbrk+0x64>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034e2:	4b07      	ldr	r3, [pc, #28]	; (8003500 <_sbrk+0x64>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	18d2      	adds	r2, r2, r3
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <_sbrk+0x64>)
 80034ec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80034ee:	68fb      	ldr	r3, [r7, #12]
}
 80034f0:	0018      	movs	r0, r3
 80034f2:	46bd      	mov	sp, r7
 80034f4:	b006      	add	sp, #24
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20002000 	.word	0x20002000
 80034fc:	00000400 	.word	0x00000400
 8003500:	20000178 	.word	0x20000178
 8003504:	20000190 	.word	0x20000190

08003508 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800350c:	46c0      	nop			; (mov r8, r8)
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	0002      	movs	r2, r0
 800351c:	1dfb      	adds	r3, r7, #7
 800351e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003520:	1dfb      	adds	r3, r7, #7
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b7f      	cmp	r3, #127	; 0x7f
 8003526:	d809      	bhi.n	800353c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003528:	1dfb      	adds	r3, r7, #7
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	001a      	movs	r2, r3
 800352e:	231f      	movs	r3, #31
 8003530:	401a      	ands	r2, r3
 8003532:	4b04      	ldr	r3, [pc, #16]	; (8003544 <__NVIC_EnableIRQ+0x30>)
 8003534:	2101      	movs	r1, #1
 8003536:	4091      	lsls	r1, r2
 8003538:	000a      	movs	r2, r1
 800353a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800353c:	46c0      	nop			; (mov r8, r8)
 800353e:	46bd      	mov	sp, r7
 8003540:	b002      	add	sp, #8
 8003542:	bd80      	pop	{r7, pc}
 8003544:	e000e100 	.word	0xe000e100

08003548 <uart1_clean_by_timeout>:
 *      Author: sigmadev
 */

#include <uart1.h>

uint8_t  uart1_clean_by_timeout(UART1_t* uart1,const char* str){
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
		if (HAL_GetTick() - uart1->timeout > SECONDS(5)) {
 8003552:	f000 fad3 	bl	8003afc <HAL_GetTick>
 8003556:	0002      	movs	r2, r0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	4a0d      	ldr	r2, [pc, #52]	; (8003594 <uart1_clean_by_timeout+0x4c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d912      	bls.n	800358a <uart1_clean_by_timeout+0x42>
			uart1_send_str(str);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	0018      	movs	r0, r3
 8003568:	f000 f952 	bl	8003810 <uart1_send_str>
			uart1_send_str("-TIMEOUT\r\n");
 800356c:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <uart1_clean_by_timeout+0x50>)
 800356e:	0018      	movs	r0, r3
 8003570:	f000 f94e 	bl	8003810 <uart1_send_str>
			uart1_clean_buffer(uart1);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	0018      	movs	r0, r3
 8003578:	f000 f994 	bl	80038a4 <uart1_clean_buffer>
			uart1->timeout = HAL_GetTick();
 800357c:	f000 fabe 	bl	8003afc <HAL_GetTick>
 8003580:	0002      	movs	r2, r0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	60da      	str	r2, [r3, #12]
			return 1;
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <uart1_clean_by_timeout+0x44>
		}
		return 0;
 800358a:	2300      	movs	r3, #0
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b002      	add	sp, #8
 8003592:	bd80      	pop	{r7, pc}
 8003594:	00001388 	.word	0x00001388
 8003598:	0800649c 	.word	0x0800649c

0800359c <uart1_gpio_init>:

void uart1_gpio_init() {
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
	/**USART1 GPIO Configuration
	 PB6     ------> USART1_TX
	 PB7     ------> USART1_RX
	 */

	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE6_0);
 80035a0:	4b26      	ldr	r3, [pc, #152]	; (800363c <uart1_gpio_init+0xa0>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4b25      	ldr	r3, [pc, #148]	; (800363c <uart1_gpio_init+0xa0>)
 80035a6:	4926      	ldr	r1, [pc, #152]	; (8003640 <uart1_gpio_init+0xa4>)
 80035a8:	400a      	ands	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE6_1);
 80035ac:	4b23      	ldr	r3, [pc, #140]	; (800363c <uart1_gpio_init+0xa0>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	4b22      	ldr	r3, [pc, #136]	; (800363c <uart1_gpio_init+0xa0>)
 80035b2:	2180      	movs	r1, #128	; 0x80
 80035b4:	0189      	lsls	r1, r1, #6
 80035b6:	430a      	orrs	r2, r1
 80035b8:	601a      	str	r2, [r3, #0]

	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE7_0);
 80035ba:	4b20      	ldr	r3, [pc, #128]	; (800363c <uart1_gpio_init+0xa0>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	4b1f      	ldr	r3, [pc, #124]	; (800363c <uart1_gpio_init+0xa0>)
 80035c0:	4920      	ldr	r1, [pc, #128]	; (8003644 <uart1_gpio_init+0xa8>)
 80035c2:	400a      	ands	r2, r1
 80035c4:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE7_1);
 80035c6:	4b1d      	ldr	r3, [pc, #116]	; (800363c <uart1_gpio_init+0xa0>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	4b1c      	ldr	r3, [pc, #112]	; (800363c <uart1_gpio_init+0xa0>)
 80035cc:	2180      	movs	r1, #128	; 0x80
 80035ce:	0209      	lsls	r1, r1, #8
 80035d0:	430a      	orrs	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]

	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6_0);
 80035d4:	4b19      	ldr	r3, [pc, #100]	; (800363c <uart1_gpio_init+0xa0>)
 80035d6:	6a1a      	ldr	r2, [r3, #32]
 80035d8:	4b18      	ldr	r3, [pc, #96]	; (800363c <uart1_gpio_init+0xa0>)
 80035da:	491b      	ldr	r1, [pc, #108]	; (8003648 <uart1_gpio_init+0xac>)
 80035dc:	400a      	ands	r2, r1
 80035de:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6_1);
 80035e0:	4b16      	ldr	r3, [pc, #88]	; (800363c <uart1_gpio_init+0xa0>)
 80035e2:	6a1a      	ldr	r2, [r3, #32]
 80035e4:	4b15      	ldr	r3, [pc, #84]	; (800363c <uart1_gpio_init+0xa0>)
 80035e6:	4919      	ldr	r1, [pc, #100]	; (800364c <uart1_gpio_init+0xb0>)
 80035e8:	400a      	ands	r2, r1
 80035ea:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6_2);
 80035ec:	4b13      	ldr	r3, [pc, #76]	; (800363c <uart1_gpio_init+0xa0>)
 80035ee:	6a1a      	ldr	r2, [r3, #32]
 80035f0:	4b12      	ldr	r3, [pc, #72]	; (800363c <uart1_gpio_init+0xa0>)
 80035f2:	4917      	ldr	r1, [pc, #92]	; (8003650 <uart1_gpio_init+0xb4>)
 80035f4:	400a      	ands	r2, r1
 80035f6:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL6_3);
 80035f8:	4b10      	ldr	r3, [pc, #64]	; (800363c <uart1_gpio_init+0xa0>)
 80035fa:	6a1a      	ldr	r2, [r3, #32]
 80035fc:	4b0f      	ldr	r3, [pc, #60]	; (800363c <uart1_gpio_init+0xa0>)
 80035fe:	4915      	ldr	r1, [pc, #84]	; (8003654 <uart1_gpio_init+0xb8>)
 8003600:	400a      	ands	r2, r1
 8003602:	621a      	str	r2, [r3, #32]

	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7_0);
 8003604:	4b0d      	ldr	r3, [pc, #52]	; (800363c <uart1_gpio_init+0xa0>)
 8003606:	6a1a      	ldr	r2, [r3, #32]
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <uart1_gpio_init+0xa0>)
 800360a:	4913      	ldr	r1, [pc, #76]	; (8003658 <uart1_gpio_init+0xbc>)
 800360c:	400a      	ands	r2, r1
 800360e:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7_1);
 8003610:	4b0a      	ldr	r3, [pc, #40]	; (800363c <uart1_gpio_init+0xa0>)
 8003612:	6a1a      	ldr	r2, [r3, #32]
 8003614:	4b09      	ldr	r3, [pc, #36]	; (800363c <uart1_gpio_init+0xa0>)
 8003616:	4911      	ldr	r1, [pc, #68]	; (800365c <uart1_gpio_init+0xc0>)
 8003618:	400a      	ands	r2, r1
 800361a:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7_2);
 800361c:	4b07      	ldr	r3, [pc, #28]	; (800363c <uart1_gpio_init+0xa0>)
 800361e:	6a1a      	ldr	r2, [r3, #32]
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <uart1_gpio_init+0xa0>)
 8003622:	490f      	ldr	r1, [pc, #60]	; (8003660 <uart1_gpio_init+0xc4>)
 8003624:	400a      	ands	r2, r1
 8003626:	621a      	str	r2, [r3, #32]
	CLEAR_BIT(GPIOB->AFR[0], GPIO_AFRL_AFSEL7_3);
 8003628:	4b04      	ldr	r3, [pc, #16]	; (800363c <uart1_gpio_init+0xa0>)
 800362a:	6a1a      	ldr	r2, [r3, #32]
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <uart1_gpio_init+0xa0>)
 800362e:	0052      	lsls	r2, r2, #1
 8003630:	0852      	lsrs	r2, r2, #1
 8003632:	621a      	str	r2, [r3, #32]
}
 8003634:	46c0      	nop			; (mov r8, r8)
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	50000400 	.word	0x50000400
 8003640:	ffffefff 	.word	0xffffefff
 8003644:	ffffbfff 	.word	0xffffbfff
 8003648:	feffffff 	.word	0xfeffffff
 800364c:	fdffffff 	.word	0xfdffffff
 8003650:	fbffffff 	.word	0xfbffffff
 8003654:	f7ffffff 	.word	0xf7ffffff
 8003658:	efffffff 	.word	0xefffffff
 800365c:	dfffffff 	.word	0xdfffffff
 8003660:	bfffffff 	.word	0xbfffffff

08003664 <uart1_init>:

void uart1_init(uint32_t pclk, uint32_t baud_rate, UART1_t *u) {
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
	uint32_t br_value = 0;
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]

	uart1_gpio_init();
 8003674:	f7ff ff92 	bl	800359c <uart1_gpio_init>

	/*enable clock access to USART1 */
	SET_BIT(RCC->APBENR2, RCC_APBENR2_USART1EN);
 8003678:	4b25      	ldr	r3, [pc, #148]	; (8003710 <uart1_init+0xac>)
 800367a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800367c:	4b24      	ldr	r3, [pc, #144]	; (8003710 <uart1_init+0xac>)
 800367e:	2180      	movs	r1, #128	; 0x80
 8003680:	01c9      	lsls	r1, r1, #7
 8003682:	430a      	orrs	r2, r1
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
	if (pclk == 16000000) {
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	4a22      	ldr	r2, [pc, #136]	; (8003714 <uart1_init+0xb0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d10b      	bne.n	80036a6 <uart1_init+0x42>
		/*set HSI 16 CLK */
		CLEAR_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_0);
 800368e:	4b20      	ldr	r3, [pc, #128]	; (8003710 <uart1_init+0xac>)
 8003690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003692:	4b1f      	ldr	r3, [pc, #124]	; (8003710 <uart1_init+0xac>)
 8003694:	2101      	movs	r1, #1
 8003696:	438a      	bics	r2, r1
 8003698:	655a      	str	r2, [r3, #84]	; 0x54
		SET_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_1);
 800369a:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <uart1_init+0xac>)
 800369c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800369e:	4b1c      	ldr	r3, [pc, #112]	; (8003710 <uart1_init+0xac>)
 80036a0:	2102      	movs	r1, #2
 80036a2:	430a      	orrs	r2, r1
 80036a4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	//MODIFY_REG(USART1->PRESC,USART_PRESC_PRESCALER,0x0010);
	/* set baud rate */
	br_value = (pclk) / baud_rate;
 80036a6:	68b9      	ldr	r1, [r7, #8]
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f7fc fd33 	bl	8000114 <__udivsi3>
 80036ae:	0003      	movs	r3, r0
 80036b0:	617b      	str	r3, [r7, #20]
	USART1->BRR = (uint16_t) br_value;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	4b18      	ldr	r3, [pc, #96]	; (8003718 <uart1_init+0xb4>)
 80036b8:	60da      	str	r2, [r3, #12]
	/* transmitter enable*/
	USART1->CR1 = USART_CR1_TE | USART_CR1_RE;
 80036ba:	4b17      	ldr	r3, [pc, #92]	; (8003718 <uart1_init+0xb4>)
 80036bc:	220c      	movs	r2, #12
 80036be:	601a      	str	r2, [r3, #0]

	u->rx_buffer = (uint8_t*) malloc(RX_BUFFLEN);
 80036c0:	2019      	movs	r0, #25
 80036c2:	f002 f92f 	bl	8005924 <malloc>
 80036c6:	0003      	movs	r3, r0
 80036c8:	001a      	movs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	601a      	str	r2, [r3, #0]
	u->tx_buffer = (uint8_t*) malloc(TX_BUFFLEN);
 80036ce:	2064      	movs	r0, #100	; 0x64
 80036d0:	f002 f928 	bl	8005924 <malloc>
 80036d4:	0003      	movs	r3, r0
 80036d6:	001a      	movs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	605a      	str	r2, [r3, #4]
	u->rx_count = 0;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	721a      	strb	r2, [r3, #8]

	uart1_clean_buffer(u);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	0018      	movs	r0, r3
 80036e6:	f000 f8dd 	bl	80038a4 <uart1_clean_buffer>

	/* enable FIFO */
	//SET_BIT(USART1->CR2, USART_CR1_FIFOEN);
	/* Enable interrupt */
	SET_BIT(USART1->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80036ea:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <uart1_init+0xb4>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <uart1_init+0xb4>)
 80036f0:	2120      	movs	r1, #32
 80036f2:	430a      	orrs	r2, r1
 80036f4:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART1_IRQn);
 80036f6:	201b      	movs	r0, #27
 80036f8:	f7ff ff0c 	bl	8003514 <__NVIC_EnableIRQ>
	SET_BIT(USART1->CR1, USART_CR1_UE);
 80036fc:	4b06      	ldr	r3, [pc, #24]	; (8003718 <uart1_init+0xb4>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <uart1_init+0xb4>)
 8003702:	2101      	movs	r1, #1
 8003704:	430a      	orrs	r2, r1
 8003706:	601a      	str	r2, [r3, #0]
}
 8003708:	46c0      	nop			; (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	b006      	add	sp, #24
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40021000 	.word	0x40021000
 8003714:	00f42400 	.word	0x00f42400
 8003718:	40013800 	.word	0x40013800

0800371c <uart1_write>:
	/* set the destination buffer */
	/*set the source buffer */

}

void uart1_write(char ch) {
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	0002      	movs	r2, r0
 8003724:	1dfb      	adds	r3, r7, #7
 8003726:	701a      	strb	r2, [r3, #0]
	SET_BIT(GPIOB->ODR, GPIO_ODR_OD5);
 8003728:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <uart1_write+0x4c>)
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <uart1_write+0x4c>)
 800372e:	2120      	movs	r1, #32
 8003730:	430a      	orrs	r2, r1
 8003732:	615a      	str	r2, [r3, #20]

	while (!READ_BIT(USART1->ISR, USART_ISR_TXE_TXFNF))
 8003734:	46c0      	nop			; (mov r8, r8)
 8003736:	4b0d      	ldr	r3, [pc, #52]	; (800376c <uart1_write+0x50>)
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	2280      	movs	r2, #128	; 0x80
 800373c:	4013      	ands	r3, r2
 800373e:	d0fa      	beq.n	8003736 <uart1_write+0x1a>
		;
	USART1->TDR = (uint8_t) (ch & 0xFFU);
 8003740:	4b0a      	ldr	r3, [pc, #40]	; (800376c <uart1_write+0x50>)
 8003742:	1dfa      	adds	r2, r7, #7
 8003744:	7812      	ldrb	r2, [r2, #0]
 8003746:	629a      	str	r2, [r3, #40]	; 0x28

	while (!READ_BIT(USART1->ISR, USART_ISR_TC))
 8003748:	46c0      	nop			; (mov r8, r8)
 800374a:	4b08      	ldr	r3, [pc, #32]	; (800376c <uart1_write+0x50>)
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	2240      	movs	r2, #64	; 0x40
 8003750:	4013      	ands	r3, r2
 8003752:	d0fa      	beq.n	800374a <uart1_write+0x2e>
		;

	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_OD5);
 8003754:	4b04      	ldr	r3, [pc, #16]	; (8003768 <uart1_write+0x4c>)
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	4b03      	ldr	r3, [pc, #12]	; (8003768 <uart1_write+0x4c>)
 800375a:	2120      	movs	r1, #32
 800375c:	438a      	bics	r2, r1
 800375e:	615a      	str	r2, [r3, #20]
}
 8003760:	46c0      	nop			; (mov r8, r8)
 8003762:	46bd      	mov	sp, r7
 8003764:	b002      	add	sp, #8
 8003766:	bd80      	pop	{r7, pc}
 8003768:	50000400 	.word	0x50000400
 800376c:	40013800 	.word	0x40013800

08003770 <uart1_1byte_read>:
		}
		data[0] = USART1->RDR;
	}
}

uint8_t uart1_1byte_read(void) {
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
	bool override = READ_BIT(USART1->ISR, USART_ISR_ORE);
 8003776:	4b15      	ldr	r3, [pc, #84]	; (80037cc <uart1_1byte_read+0x5c>)
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	2208      	movs	r2, #8
 800377c:	401a      	ands	r2, r3
 800377e:	1dfb      	adds	r3, r7, #7
 8003780:	1e51      	subs	r1, r2, #1
 8003782:	418a      	sbcs	r2, r1
 8003784:	701a      	strb	r2, [r3, #0]
	bool data_present = READ_BIT(USART1->ISR, USART_ISR_RXNE_RXFNE);
 8003786:	4b11      	ldr	r3, [pc, #68]	; (80037cc <uart1_1byte_read+0x5c>)
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	2220      	movs	r2, #32
 800378c:	401a      	ands	r2, r3
 800378e:	1dbb      	adds	r3, r7, #6
 8003790:	1e51      	subs	r1, r2, #1
 8003792:	418a      	sbcs	r2, r1
 8003794:	701a      	strb	r2, [r3, #0]
//	bool busy = READ_BIT(USART1->ISR, USART_ISR_BUSY);
	if ((data_present || override)) {
 8003796:	1dbb      	adds	r3, r7, #6
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d103      	bne.n	80037a6 <uart1_1byte_read+0x36>
 800379e:	1dfb      	adds	r3, r7, #7
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00d      	beq.n	80037c2 <uart1_1byte_read+0x52>
		if (override)
 80037a6:	1dfb      	adds	r3, r7, #7
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d005      	beq.n	80037ba <uart1_1byte_read+0x4a>
			SET_BIT(USART1->ICR, USART_ICR_ORECF);
 80037ae:	4b07      	ldr	r3, [pc, #28]	; (80037cc <uart1_1byte_read+0x5c>)
 80037b0:	6a1a      	ldr	r2, [r3, #32]
 80037b2:	4b06      	ldr	r3, [pc, #24]	; (80037cc <uart1_1byte_read+0x5c>)
 80037b4:	2108      	movs	r1, #8
 80037b6:	430a      	orrs	r2, r1
 80037b8:	621a      	str	r2, [r3, #32]
		return USART1->RDR;
 80037ba:	4b04      	ldr	r3, [pc, #16]	; (80037cc <uart1_1byte_read+0x5c>)
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	e000      	b.n	80037c4 <uart1_1byte_read+0x54>
	} else
		return '\0';
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	0018      	movs	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b002      	add	sp, #8
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40013800 	.word	0x40013800

080037d0 <uart1_read_to_frame>:

void  uart1_read_to_frame(UART1_t *u) {
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	if (u->rx_count >= RX_BUFFLEN) {
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	7a1b      	ldrb	r3, [r3, #8]
 80037dc:	2b18      	cmp	r3, #24
 80037de:	d906      	bls.n	80037ee <uart1_read_to_frame+0x1e>
		uart1_clean_buffer(u);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	0018      	movs	r0, r3
 80037e4:	f000 f85e 	bl	80038a4 <uart1_clean_buffer>
		u->rx_count = 0;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	721a      	strb	r2, [r3, #8]
	}
	u->rx_buffer[u->rx_count++] = uart1_1byte_read();
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	7a1b      	ldrb	r3, [r3, #8]
 80037f6:	1c59      	adds	r1, r3, #1
 80037f8:	b2c8      	uxtb	r0, r1
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	7208      	strb	r0, [r1, #8]
 80037fe:	18d4      	adds	r4, r2, r3
 8003800:	f7ff ffb6 	bl	8003770 <uart1_1byte_read>
 8003804:	0003      	movs	r3, r0
 8003806:	7023      	strb	r3, [r4, #0]
}
 8003808:	46c0      	nop			; (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	b003      	add	sp, #12
 800380e:	bd90      	pop	{r4, r7, pc}

08003810 <uart1_send_str>:

void uart1_send_str(char *str) {
 8003810:	b590      	push	{r4, r7, lr}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; str[i] != '\0'; i++)
 8003818:	230f      	movs	r3, #15
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	e00d      	b.n	800383e <uart1_send_str+0x2e>
		uart1_write(str[i]);
 8003822:	240f      	movs	r4, #15
 8003824:	193b      	adds	r3, r7, r4
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	18d3      	adds	r3, r2, r3
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	0018      	movs	r0, r3
 8003830:	f7ff ff74 	bl	800371c <uart1_write>
	for (i = 0; str[i] != '\0'; i++)
 8003834:	193b      	adds	r3, r7, r4
 8003836:	781a      	ldrb	r2, [r3, #0]
 8003838:	193b      	adds	r3, r7, r4
 800383a:	3201      	adds	r2, #1
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	230f      	movs	r3, #15
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	18d3      	adds	r3, r2, r3
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1e9      	bne.n	8003822 <uart1_send_str+0x12>
}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	46c0      	nop			; (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	b005      	add	sp, #20
 8003856:	bd90      	pop	{r4, r7, pc}

08003858 <uart1_send_frame>:

void uart1_send_frame(char *str, uint8_t len) {
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	000a      	movs	r2, r1
 8003862:	1cfb      	adds	r3, r7, #3
 8003864:	701a      	strb	r2, [r3, #0]

	if (len > 0) {
 8003866:	1cfb      	adds	r3, r7, #3
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d016      	beq.n	800389c <uart1_send_frame+0x44>
		for (int i = 0; i < len; i++){
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	e00e      	b.n	8003892 <uart1_send_frame+0x3a>
			uart1_write(str[i]);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	18d3      	adds	r3, r2, r3
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	0018      	movs	r0, r3
 800387e:	f7ff ff4d 	bl	800371c <uart1_write>
			str[i] = (char) '\0';
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	18d3      	adds	r3, r2, r3
 8003888:	2200      	movs	r2, #0
 800388a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len; i++){
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	3301      	adds	r3, #1
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	1cfb      	adds	r3, r7, #3
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	429a      	cmp	r2, r3
 800389a:	dbeb      	blt.n	8003874 <uart1_send_frame+0x1c>
		}
	}
}
 800389c:	46c0      	nop			; (mov r8, r8)
 800389e:	46bd      	mov	sp, r7
 80038a0:	b004      	add	sp, #16
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <uart1_clean_buffer>:

void uart1_clean_buffer(UART1_t *u) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	u->rx_count = 0;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	721a      	strb	r2, [r3, #8]
	if (TX_BUFFLEN > RX_BUFFLEN) {
		for (int i = 0; i < TX_BUFFLEN; i++) {
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	e011      	b.n	80038dc <uart1_clean_buffer+0x38>
			if (i < RX_BUFFLEN)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b18      	cmp	r3, #24
 80038bc:	dc05      	bgt.n	80038ca <uart1_clean_buffer+0x26>
				u->rx_buffer[i] = 0x00;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	18d3      	adds	r3, r2, r3
 80038c6:	2200      	movs	r2, #0
 80038c8:	701a      	strb	r2, [r3, #0]
			u->tx_buffer[i] = 0x00;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	18d3      	adds	r3, r2, r3
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < TX_BUFFLEN; i++) {
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	3301      	adds	r3, #1
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b63      	cmp	r3, #99	; 0x63
 80038e0:	ddea      	ble.n	80038b8 <uart1_clean_buffer+0x14>
			if (i < TX_BUFFLEN)
				u->tx_buffer[i] = 0x00;
			u->rx_buffer[i] = 0x00;
		}
	}
}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	46c0      	nop			; (mov r8, r8)
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b004      	add	sp, #16
 80038ea:	bd80      	pop	{r7, pc}

080038ec <crc_get>:
#include "utils.h"

uint16_t crc_get(uint8_t* buffer, uint8_t buff_len) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	000a      	movs	r2, r1
 80038f6:	1cfb      	adds	r3, r7, #3
 80038f8:	701a      	strb	r2, [r3, #0]
	uint8_t b;
	uint8_t i;
	uint16_t generator = 0x1021; //divisor is 16bit
 80038fa:	230a      	movs	r3, #10
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	4a2b      	ldr	r2, [pc, #172]	; (80039ac <crc_get+0xc0>)
 8003900:	801a      	strh	r2, [r3, #0]
	uint16_t crc = 0;			 // CRC value is 16bit
 8003902:	230c      	movs	r3, #12
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	2200      	movs	r2, #0
 8003908:	801a      	strh	r2, [r3, #0]

	for (b = 0; b < buff_len; b++) {
 800390a:	230f      	movs	r3, #15
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	2200      	movs	r2, #0
 8003910:	701a      	strb	r2, [r3, #0]
 8003912:	e03d      	b.n	8003990 <crc_get+0xa4>
		crc ^= ((uint16_t) (buffer[b] << 8)); // move byte into MSB of 16bit CRC
 8003914:	230f      	movs	r3, #15
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	18d3      	adds	r3, r2, r3
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	b29b      	uxth	r3, r3
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	b299      	uxth	r1, r3
 8003926:	220c      	movs	r2, #12
 8003928:	18bb      	adds	r3, r7, r2
 800392a:	18ba      	adds	r2, r7, r2
 800392c:	8812      	ldrh	r2, [r2, #0]
 800392e:	404a      	eors	r2, r1
 8003930:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 8; i++) {
 8003932:	230e      	movs	r3, #14
 8003934:	18fb      	adds	r3, r7, r3
 8003936:	2200      	movs	r2, #0
 8003938:	701a      	strb	r2, [r3, #0]
 800393a:	e01e      	b.n	800397a <crc_get+0x8e>
			if ((crc & 0x8000) != 0) // test for MSB = bit 15
 800393c:	210c      	movs	r1, #12
 800393e:	187b      	adds	r3, r7, r1
 8003940:	2200      	movs	r2, #0
 8003942:	5e9b      	ldrsh	r3, [r3, r2]
 8003944:	2b00      	cmp	r3, #0
 8003946:	da0c      	bge.n	8003962 <crc_get+0x76>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 8003948:	187b      	adds	r3, r7, r1
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	b21a      	sxth	r2, r3
 8003950:	230a      	movs	r3, #10
 8003952:	18fb      	adds	r3, r7, r3
 8003954:	2000      	movs	r0, #0
 8003956:	5e1b      	ldrsh	r3, [r3, r0]
 8003958:	4053      	eors	r3, r2
 800395a:	b21a      	sxth	r2, r3
 800395c:	187b      	adds	r3, r7, r1
 800395e:	801a      	strh	r2, [r3, #0]
 8003960:	e005      	b.n	800396e <crc_get+0x82>
			else
				crc <<= 1;
 8003962:	230c      	movs	r3, #12
 8003964:	18fa      	adds	r2, r7, r3
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	18db      	adds	r3, r3, r3
 800396c:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
 800396e:	210e      	movs	r1, #14
 8003970:	187b      	adds	r3, r7, r1
 8003972:	781a      	ldrb	r2, [r3, #0]
 8003974:	187b      	adds	r3, r7, r1
 8003976:	3201      	adds	r2, #1
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	230e      	movs	r3, #14
 800397c:	18fb      	adds	r3, r7, r3
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b07      	cmp	r3, #7
 8003982:	d9db      	bls.n	800393c <crc_get+0x50>
	for (b = 0; b < buff_len; b++) {
 8003984:	210f      	movs	r1, #15
 8003986:	187b      	adds	r3, r7, r1
 8003988:	781a      	ldrb	r2, [r3, #0]
 800398a:	187b      	adds	r3, r7, r1
 800398c:	3201      	adds	r2, #1
 800398e:	701a      	strb	r2, [r3, #0]
 8003990:	230f      	movs	r3, #15
 8003992:	18fa      	adds	r2, r7, r3
 8003994:	1cfb      	adds	r3, r7, #3
 8003996:	7812      	ldrb	r2, [r2, #0]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d3ba      	bcc.n	8003914 <crc_get+0x28>
		}
	}
	return crc;
 800399e:	230c      	movs	r3, #12
 80039a0:	18fb      	adds	r3, r7, r3
 80039a2:	881b      	ldrh	r3, [r3, #0]
}
 80039a4:	0018      	movs	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	b004      	add	sp, #16
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	00001021 	.word	0x00001021

080039b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80039b0:	480d      	ldr	r0, [pc, #52]	; (80039e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80039b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80039b4:	f7ff fda8 	bl	8003508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039b8:	480c      	ldr	r0, [pc, #48]	; (80039ec <LoopForever+0x6>)
  ldr r1, =_edata
 80039ba:	490d      	ldr	r1, [pc, #52]	; (80039f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80039bc:	4a0d      	ldr	r2, [pc, #52]	; (80039f4 <LoopForever+0xe>)
  movs r3, #0
 80039be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039c0:	e002      	b.n	80039c8 <LoopCopyDataInit>

080039c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039c6:	3304      	adds	r3, #4

080039c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039cc:	d3f9      	bcc.n	80039c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039ce:	4a0a      	ldr	r2, [pc, #40]	; (80039f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80039d0:	4c0a      	ldr	r4, [pc, #40]	; (80039fc <LoopForever+0x16>)
  movs r3, #0
 80039d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039d4:	e001      	b.n	80039da <LoopFillZerobss>

080039d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039d8:	3204      	adds	r2, #4

080039da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039dc:	d3fb      	bcc.n	80039d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80039de:	f001 ff7d 	bl	80058dc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80039e2:	f7fe fa81 	bl	8001ee8 <main>

080039e6 <LoopForever>:

LoopForever:
  b LoopForever
 80039e6:	e7fe      	b.n	80039e6 <LoopForever>
  ldr   r0, =_estack
 80039e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80039ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039f0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80039f4:	08006660 	.word	0x08006660
  ldr r2, =_sbss
 80039f8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80039fc:	20000190 	.word	0x20000190

08003a00 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a00:	e7fe      	b.n	8003a00 <ADC1_IRQHandler>
	...

08003a04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a0a:	1dfb      	adds	r3, r7, #7
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <HAL_Init+0x3c>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <HAL_Init+0x3c>)
 8003a16:	2180      	movs	r1, #128	; 0x80
 8003a18:	0049      	lsls	r1, r1, #1
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a1e:	2003      	movs	r0, #3
 8003a20:	f000 f810 	bl	8003a44 <HAL_InitTick>
 8003a24:	1e03      	subs	r3, r0, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003a28:	1dfb      	adds	r3, r7, #7
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	701a      	strb	r2, [r3, #0]
 8003a2e:	e001      	b.n	8003a34 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003a30:	f7ff fc44 	bl	80032bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a34:	1dfb      	adds	r3, r7, #7
 8003a36:	781b      	ldrb	r3, [r3, #0]
}
 8003a38:	0018      	movs	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	b002      	add	sp, #8
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40022000 	.word	0x40022000

08003a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a44:	b590      	push	{r4, r7, lr}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a4c:	230f      	movs	r3, #15
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	2200      	movs	r2, #0
 8003a52:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003a54:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <HAL_InitTick+0x88>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d02b      	beq.n	8003ab4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003a5c:	4b1c      	ldr	r3, [pc, #112]	; (8003ad0 <HAL_InitTick+0x8c>)
 8003a5e:	681c      	ldr	r4, [r3, #0]
 8003a60:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <HAL_InitTick+0x88>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	0019      	movs	r1, r3
 8003a66:	23fa      	movs	r3, #250	; 0xfa
 8003a68:	0098      	lsls	r0, r3, #2
 8003a6a:	f7fc fb53 	bl	8000114 <__udivsi3>
 8003a6e:	0003      	movs	r3, r0
 8003a70:	0019      	movs	r1, r3
 8003a72:	0020      	movs	r0, r4
 8003a74:	f7fc fb4e 	bl	8000114 <__udivsi3>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f000 fdbb 	bl	80045f6 <HAL_SYSTICK_Config>
 8003a80:	1e03      	subs	r3, r0, #0
 8003a82:	d112      	bne.n	8003aaa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d80a      	bhi.n	8003aa0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	425b      	negs	r3, r3
 8003a90:	2200      	movs	r2, #0
 8003a92:	0018      	movs	r0, r3
 8003a94:	f000 fd8a 	bl	80045ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a98:	4b0e      	ldr	r3, [pc, #56]	; (8003ad4 <HAL_InitTick+0x90>)
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	e00d      	b.n	8003abc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003aa0:	230f      	movs	r3, #15
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	701a      	strb	r2, [r3, #0]
 8003aa8:	e008      	b.n	8003abc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003aaa:	230f      	movs	r3, #15
 8003aac:	18fb      	adds	r3, r7, r3
 8003aae:	2201      	movs	r2, #1
 8003ab0:	701a      	strb	r2, [r3, #0]
 8003ab2:	e003      	b.n	8003abc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ab4:	230f      	movs	r3, #15
 8003ab6:	18fb      	adds	r3, r7, r3
 8003ab8:	2201      	movs	r2, #1
 8003aba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003abc:	230f      	movs	r3, #15
 8003abe:	18fb      	adds	r3, r7, r3
 8003ac0:	781b      	ldrb	r3, [r3, #0]
}
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	b005      	add	sp, #20
 8003ac8:	bd90      	pop	{r4, r7, pc}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	20000008 	.word	0x20000008
 8003ad0:	20000000 	.word	0x20000000
 8003ad4:	20000004 	.word	0x20000004

08003ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <HAL_IncTick+0x1c>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	001a      	movs	r2, r3
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_IncTick+0x20>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	18d2      	adds	r2, r2, r3
 8003ae8:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <HAL_IncTick+0x20>)
 8003aea:	601a      	str	r2, [r3, #0]
}
 8003aec:	46c0      	nop			; (mov r8, r8)
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	20000008 	.word	0x20000008
 8003af8:	2000017c 	.word	0x2000017c

08003afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  return uwTick;
 8003b00:	4b02      	ldr	r3, [pc, #8]	; (8003b0c <HAL_GetTick+0x10>)
 8003b02:	681b      	ldr	r3, [r3, #0]
}
 8003b04:	0018      	movs	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	2000017c 	.word	0x2000017c

08003b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b18:	f7ff fff0 	bl	8003afc <HAL_GetTick>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3301      	adds	r3, #1
 8003b28:	d005      	beq.n	8003b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b2a:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <HAL_Delay+0x44>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	001a      	movs	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	189b      	adds	r3, r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	f7ff ffe0 	bl	8003afc <HAL_GetTick>
 8003b3c:	0002      	movs	r2, r0
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d8f7      	bhi.n	8003b38 <HAL_Delay+0x28>
  {
  }
}
 8003b48:	46c0      	nop			; (mov r8, r8)
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b004      	add	sp, #16
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	20000008 	.word	0x20000008

08003b58 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a05      	ldr	r2, [pc, #20]	; (8003b7c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003b68:	401a      	ands	r2, r3
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	601a      	str	r2, [r3, #0]
}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b002      	add	sp, #8
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	fe3fffff 	.word	0xfe3fffff

08003b80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	23e0      	movs	r3, #224	; 0xe0
 8003b8e:	045b      	lsls	r3, r3, #17
 8003b90:	4013      	ands	r3, r2
}
 8003b92:	0018      	movs	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b002      	add	sp, #8
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	2104      	movs	r1, #4
 8003bae:	400a      	ands	r2, r1
 8003bb0:	2107      	movs	r1, #7
 8003bb2:	4091      	lsls	r1, r2
 8003bb4:	000a      	movs	r2, r1
 8003bb6:	43d2      	mvns	r2, r2
 8003bb8:	401a      	ands	r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2104      	movs	r1, #4
 8003bbe:	400b      	ands	r3, r1
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	4099      	lsls	r1, r3
 8003bc4:	000b      	movs	r3, r1
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003bcc:	46c0      	nop			; (mov r8, r8)
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b004      	add	sp, #16
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	2104      	movs	r1, #4
 8003be6:	400a      	ands	r2, r1
 8003be8:	2107      	movs	r1, #7
 8003bea:	4091      	lsls	r1, r2
 8003bec:	000a      	movs	r2, r1
 8003bee:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2104      	movs	r1, #4
 8003bf4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003bf6:	40da      	lsrs	r2, r3
 8003bf8:	0013      	movs	r3, r2
}
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b002      	add	sp, #8
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	211f      	movs	r1, #31
 8003c16:	400a      	ands	r2, r1
 8003c18:	210f      	movs	r1, #15
 8003c1a:	4091      	lsls	r1, r2
 8003c1c:	000a      	movs	r2, r1
 8003c1e:	43d2      	mvns	r2, r2
 8003c20:	401a      	ands	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	0e9b      	lsrs	r3, r3, #26
 8003c26:	210f      	movs	r1, #15
 8003c28:	4019      	ands	r1, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	201f      	movs	r0, #31
 8003c2e:	4003      	ands	r3, r0
 8003c30:	4099      	lsls	r1, r3
 8003c32:	000b      	movs	r3, r1
 8003c34:	431a      	orrs	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b004      	add	sp, #16
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	035b      	lsls	r3, r3, #13
 8003c54:	0b5b      	lsrs	r3, r3, #13
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c5c:	46c0      	nop			; (mov r8, r8)
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	b002      	add	sp, #8
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	0352      	lsls	r2, r2, #13
 8003c76:	0b52      	lsrs	r2, r2, #13
 8003c78:	43d2      	mvns	r2, r2
 8003c7a:	401a      	ands	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b002      	add	sp, #8
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	0212      	lsls	r2, r2, #8
 8003c9c:	43d2      	mvns	r2, r2
 8003c9e:	401a      	ands	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	400b      	ands	r3, r1
 8003ca8:	4904      	ldr	r1, [pc, #16]	; (8003cbc <LL_ADC_SetChannelSamplingTime+0x34>)
 8003caa:	400b      	ands	r3, r1
 8003cac:	431a      	orrs	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	b004      	add	sp, #16
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	07ffff00 	.word	0x07ffff00

08003cc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	4a05      	ldr	r2, [pc, #20]	; (8003ce4 <LL_ADC_EnableInternalRegulator+0x24>)
 8003cce:	4013      	ands	r3, r2
 8003cd0:	2280      	movs	r2, #128	; 0x80
 8003cd2:	0552      	lsls	r2, r2, #21
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b002      	add	sp, #8
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	6fffffe8 	.word	0x6fffffe8

08003ce8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	2380      	movs	r3, #128	; 0x80
 8003cf6:	055b      	lsls	r3, r3, #21
 8003cf8:	401a      	ands	r2, r3
 8003cfa:	2380      	movs	r3, #128	; 0x80
 8003cfc:	055b      	lsls	r3, r3, #21
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d101      	bne.n	8003d06 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	0018      	movs	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b002      	add	sp, #8
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <LL_ADC_IsEnabled+0x18>
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <LL_ADC_IsEnabled+0x1a>
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b002      	add	sp, #8
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2204      	movs	r2, #4
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d101      	bne.n	8003d4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b002      	add	sp, #8
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d5c:	231f      	movs	r3, #31
 8003d5e:	18fb      	adds	r3, r7, r3
 8003d60:	2200      	movs	r2, #0
 8003d62:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e17f      	b.n	800407a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10a      	bne.n	8003d98 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	0018      	movs	r0, r3
 8003d86:	f7ff fabd 	bl	8003304 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2254      	movs	r2, #84	; 0x54
 8003d94:	2100      	movs	r1, #0
 8003d96:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f7ff ffa3 	bl	8003ce8 <LL_ADC_IsInternalRegulatorEnabled>
 8003da2:	1e03      	subs	r3, r0, #0
 8003da4:	d115      	bne.n	8003dd2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	0018      	movs	r0, r3
 8003dac:	f7ff ff88 	bl	8003cc0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003db0:	4bb4      	ldr	r3, [pc, #720]	; (8004084 <HAL_ADC_Init+0x330>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	49b4      	ldr	r1, [pc, #720]	; (8004088 <HAL_ADC_Init+0x334>)
 8003db6:	0018      	movs	r0, r3
 8003db8:	f7fc f9ac 	bl	8000114 <__udivsi3>
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003dc4:	e002      	b.n	8003dcc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f9      	bne.n	8003dc6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f7ff ff86 	bl	8003ce8 <LL_ADC_IsInternalRegulatorEnabled>
 8003ddc:	1e03      	subs	r3, r0, #0
 8003dde:	d10f      	bne.n	8003e00 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de4:	2210      	movs	r2, #16
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df0:	2201      	movs	r2, #1
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003df8:	231f      	movs	r3, #31
 8003dfa:	18fb      	adds	r3, r7, r3
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	0018      	movs	r0, r3
 8003e06:	f7ff ff94 	bl	8003d32 <LL_ADC_REG_IsConversionOngoing>
 8003e0a:	0003      	movs	r3, r0
 8003e0c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e12:	2210      	movs	r2, #16
 8003e14:	4013      	ands	r3, r2
 8003e16:	d000      	beq.n	8003e1a <HAL_ADC_Init+0xc6>
 8003e18:	e122      	b.n	8004060 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d000      	beq.n	8003e22 <HAL_ADC_Init+0xce>
 8003e20:	e11e      	b.n	8004060 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e26:	4a99      	ldr	r2, [pc, #612]	; (800408c <HAL_ADC_Init+0x338>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	0018      	movs	r0, r3
 8003e38:	f7ff ff6a 	bl	8003d10 <LL_ADC_IsEnabled>
 8003e3c:	1e03      	subs	r3, r0, #0
 8003e3e:	d000      	beq.n	8003e42 <HAL_ADC_Init+0xee>
 8003e40:	e0ad      	b.n	8003f9e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	7e1b      	ldrb	r3, [r3, #24]
 8003e4a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003e4c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	7e5b      	ldrb	r3, [r3, #25]
 8003e52:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003e54:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	7e9b      	ldrb	r3, [r3, #26]
 8003e5a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003e5c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <HAL_ADC_Init+0x118>
 8003e66:	2380      	movs	r3, #128	; 0x80
 8003e68:	015b      	lsls	r3, r3, #5
 8003e6a:	e000      	b.n	8003e6e <HAL_ADC_Init+0x11a>
 8003e6c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003e6e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003e74:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	da04      	bge.n	8003e88 <HAL_ADC_Init+0x134>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	085b      	lsrs	r3, r3, #1
 8003e86:	e001      	b.n	8003e8c <HAL_ADC_Init+0x138>
 8003e88:	2380      	movs	r3, #128	; 0x80
 8003e8a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8003e8c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	212c      	movs	r1, #44	; 0x2c
 8003e92:	5c5b      	ldrb	r3, [r3, r1]
 8003e94:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003e96:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	5c9b      	ldrb	r3, [r3, r2]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d115      	bne.n	8003ed4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	7e9b      	ldrb	r3, [r3, #26]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d105      	bne.n	8003ebc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	2280      	movs	r2, #128	; 0x80
 8003eb4:	0252      	lsls	r2, r2, #9
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
 8003eba:	e00b      	b.n	8003ed4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ecc:	2201      	movs	r2, #1
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ee0:	23e0      	movs	r3, #224	; 0xe0
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003eea:	4313      	orrs	r3, r2
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	4a65      	ldr	r2, [pc, #404]	; (8004090 <HAL_ADC_Init+0x33c>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	0019      	movs	r1, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	0f9b      	lsrs	r3, r3, #30
 8003f0e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f14:	4313      	orrs	r3, r2
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	223c      	movs	r2, #60	; 0x3c
 8003f20:	5c9b      	ldrb	r3, [r3, r2]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d111      	bne.n	8003f4a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	0f9b      	lsrs	r3, r3, #30
 8003f2c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f32:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003f38:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003f3e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	2201      	movs	r2, #1
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	4a50      	ldr	r2, [pc, #320]	; (8004094 <HAL_ADC_Init+0x340>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	0019      	movs	r1, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	23c0      	movs	r3, #192	; 0xc0
 8003f66:	061b      	lsls	r3, r3, #24
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d018      	beq.n	8003f9e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	05db      	lsls	r3, r3, #23
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d012      	beq.n	8003f9e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003f7c:	2380      	movs	r3, #128	; 0x80
 8003f7e:	061b      	lsls	r3, r3, #24
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d00c      	beq.n	8003f9e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003f84:	4b44      	ldr	r3, [pc, #272]	; (8004098 <HAL_ADC_Init+0x344>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a44      	ldr	r2, [pc, #272]	; (800409c <HAL_ADC_Init+0x348>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	0019      	movs	r1, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	23f0      	movs	r3, #240	; 0xf0
 8003f94:	039b      	lsls	r3, r3, #14
 8003f96:	401a      	ands	r2, r3
 8003f98:	4b3f      	ldr	r3, [pc, #252]	; (8004098 <HAL_ADC_Init+0x344>)
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa6:	001a      	movs	r2, r3
 8003fa8:	2100      	movs	r1, #0
 8003faa:	f7ff fdf6 	bl	8003b9a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb6:	493a      	ldr	r1, [pc, #232]	; (80040a0 <HAL_ADC_Init+0x34c>)
 8003fb8:	001a      	movs	r2, r3
 8003fba:	f7ff fdee 	bl	8003b9a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2110      	movs	r1, #16
 8003fd2:	4249      	negs	r1, r1
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	629a      	str	r2, [r3, #40]	; 0x28
 8003fd8:	e018      	b.n	800400c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691a      	ldr	r2, [r3, #16]
 8003fde:	2380      	movs	r3, #128	; 0x80
 8003fe0:	039b      	lsls	r3, r3, #14
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d112      	bne.n	800400c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	221c      	movs	r2, #28
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2210      	movs	r2, #16
 8003ffa:	4252      	negs	r2, r2
 8003ffc:	409a      	lsls	r2, r3
 8003ffe:	0011      	movs	r1, r2
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2100      	movs	r1, #0
 8004012:	0018      	movs	r0, r3
 8004014:	f7ff fdde 	bl	8003bd4 <LL_ADC_GetSamplingTimeCommonChannels>
 8004018:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800401e:	429a      	cmp	r2, r3
 8004020:	d10b      	bne.n	800403a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402c:	2203      	movs	r2, #3
 800402e:	4393      	bics	r3, r2
 8004030:	2201      	movs	r2, #1
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004038:	e01c      	b.n	8004074 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403e:	2212      	movs	r2, #18
 8004040:	4393      	bics	r3, r2
 8004042:	2210      	movs	r2, #16
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404e:	2201      	movs	r2, #1
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8004056:	231f      	movs	r3, #31
 8004058:	18fb      	adds	r3, r7, r3
 800405a:	2201      	movs	r2, #1
 800405c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800405e:	e009      	b.n	8004074 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004064:	2210      	movs	r2, #16
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800406c:	231f      	movs	r3, #31
 800406e:	18fb      	adds	r3, r7, r3
 8004070:	2201      	movs	r2, #1
 8004072:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004074:	231f      	movs	r3, #31
 8004076:	18fb      	adds	r3, r7, r3
 8004078:	781b      	ldrb	r3, [r3, #0]
}
 800407a:	0018      	movs	r0, r3
 800407c:	46bd      	mov	sp, r7
 800407e:	b008      	add	sp, #32
 8004080:	bd80      	pop	{r7, pc}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	20000000 	.word	0x20000000
 8004088:	00030d40 	.word	0x00030d40
 800408c:	fffffefd 	.word	0xfffffefd
 8004090:	fffe0201 	.word	0xfffe0201
 8004094:	1ffffc02 	.word	0x1ffffc02
 8004098:	40012708 	.word	0x40012708
 800409c:	ffc3ffff 	.word	0xffc3ffff
 80040a0:	07ffff04 	.word	0x07ffff04

080040a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040ae:	2317      	movs	r3, #23
 80040b0:	18fb      	adds	r3, r7, r3
 80040b2:	2200      	movs	r2, #0
 80040b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2254      	movs	r2, #84	; 0x54
 80040be:	5c9b      	ldrb	r3, [r3, r2]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x24>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e1c0      	b.n	800444a <HAL_ADC_ConfigChannel+0x3a6>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2254      	movs	r2, #84	; 0x54
 80040cc:	2101      	movs	r1, #1
 80040ce:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7ff fe2c 	bl	8003d32 <LL_ADC_REG_IsConversionOngoing>
 80040da:	1e03      	subs	r3, r0, #0
 80040dc:	d000      	beq.n	80040e0 <HAL_ADC_ConfigChannel+0x3c>
 80040de:	e1a3      	b.n	8004428 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d100      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x46>
 80040e8:	e143      	b.n	8004372 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	2380      	movs	r3, #128	; 0x80
 80040f0:	061b      	lsls	r3, r3, #24
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d004      	beq.n	8004100 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80040fa:	4ac1      	ldr	r2, [pc, #772]	; (8004400 <HAL_ADC_ConfigChannel+0x35c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d108      	bne.n	8004112 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	0019      	movs	r1, r3
 800410a:	0010      	movs	r0, r2
 800410c:	f7ff fd99 	bl	8003c42 <LL_ADC_REG_SetSequencerChAdd>
 8004110:	e0c9      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	211f      	movs	r1, #31
 800411c:	400b      	ands	r3, r1
 800411e:	210f      	movs	r1, #15
 8004120:	4099      	lsls	r1, r3
 8004122:	000b      	movs	r3, r1
 8004124:	43db      	mvns	r3, r3
 8004126:	4013      	ands	r3, r2
 8004128:	0019      	movs	r1, r3
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	035b      	lsls	r3, r3, #13
 8004130:	0b5b      	lsrs	r3, r3, #13
 8004132:	d105      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x9c>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	0e9b      	lsrs	r3, r3, #26
 800413a:	221f      	movs	r2, #31
 800413c:	4013      	ands	r3, r2
 800413e:	e098      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1ce>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2201      	movs	r2, #1
 8004146:	4013      	ands	r3, r2
 8004148:	d000      	beq.n	800414c <HAL_ADC_ConfigChannel+0xa8>
 800414a:	e091      	b.n	8004270 <HAL_ADC_ConfigChannel+0x1cc>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2202      	movs	r2, #2
 8004152:	4013      	ands	r3, r2
 8004154:	d000      	beq.n	8004158 <HAL_ADC_ConfigChannel+0xb4>
 8004156:	e089      	b.n	800426c <HAL_ADC_ConfigChannel+0x1c8>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2204      	movs	r2, #4
 800415e:	4013      	ands	r3, r2
 8004160:	d000      	beq.n	8004164 <HAL_ADC_ConfigChannel+0xc0>
 8004162:	e081      	b.n	8004268 <HAL_ADC_ConfigChannel+0x1c4>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2208      	movs	r2, #8
 800416a:	4013      	ands	r3, r2
 800416c:	d000      	beq.n	8004170 <HAL_ADC_ConfigChannel+0xcc>
 800416e:	e079      	b.n	8004264 <HAL_ADC_ConfigChannel+0x1c0>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2210      	movs	r2, #16
 8004176:	4013      	ands	r3, r2
 8004178:	d000      	beq.n	800417c <HAL_ADC_ConfigChannel+0xd8>
 800417a:	e071      	b.n	8004260 <HAL_ADC_ConfigChannel+0x1bc>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2220      	movs	r2, #32
 8004182:	4013      	ands	r3, r2
 8004184:	d000      	beq.n	8004188 <HAL_ADC_ConfigChannel+0xe4>
 8004186:	e069      	b.n	800425c <HAL_ADC_ConfigChannel+0x1b8>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2240      	movs	r2, #64	; 0x40
 800418e:	4013      	ands	r3, r2
 8004190:	d000      	beq.n	8004194 <HAL_ADC_ConfigChannel+0xf0>
 8004192:	e061      	b.n	8004258 <HAL_ADC_ConfigChannel+0x1b4>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2280      	movs	r2, #128	; 0x80
 800419a:	4013      	ands	r3, r2
 800419c:	d000      	beq.n	80041a0 <HAL_ADC_ConfigChannel+0xfc>
 800419e:	e059      	b.n	8004254 <HAL_ADC_ConfigChannel+0x1b0>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	2380      	movs	r3, #128	; 0x80
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	4013      	ands	r3, r2
 80041aa:	d151      	bne.n	8004250 <HAL_ADC_ConfigChannel+0x1ac>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	2380      	movs	r3, #128	; 0x80
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4013      	ands	r3, r2
 80041b6:	d149      	bne.n	800424c <HAL_ADC_ConfigChannel+0x1a8>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	2380      	movs	r3, #128	; 0x80
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	4013      	ands	r3, r2
 80041c2:	d141      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x1a4>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	4013      	ands	r3, r2
 80041ce:	d139      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x1a0>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	2380      	movs	r3, #128	; 0x80
 80041d6:	015b      	lsls	r3, r3, #5
 80041d8:	4013      	ands	r3, r2
 80041da:	d131      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x19c>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	2380      	movs	r3, #128	; 0x80
 80041e2:	019b      	lsls	r3, r3, #6
 80041e4:	4013      	ands	r3, r2
 80041e6:	d129      	bne.n	800423c <HAL_ADC_ConfigChannel+0x198>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	2380      	movs	r3, #128	; 0x80
 80041ee:	01db      	lsls	r3, r3, #7
 80041f0:	4013      	ands	r3, r2
 80041f2:	d121      	bne.n	8004238 <HAL_ADC_ConfigChannel+0x194>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	2380      	movs	r3, #128	; 0x80
 80041fa:	021b      	lsls	r3, r3, #8
 80041fc:	4013      	ands	r3, r2
 80041fe:	d119      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x190>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	2380      	movs	r3, #128	; 0x80
 8004206:	025b      	lsls	r3, r3, #9
 8004208:	4013      	ands	r3, r2
 800420a:	d111      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x18c>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	2380      	movs	r3, #128	; 0x80
 8004212:	029b      	lsls	r3, r3, #10
 8004214:	4013      	ands	r3, r2
 8004216:	d109      	bne.n	800422c <HAL_ADC_ConfigChannel+0x188>
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	02db      	lsls	r3, r3, #11
 8004220:	4013      	ands	r3, r2
 8004222:	d001      	beq.n	8004228 <HAL_ADC_ConfigChannel+0x184>
 8004224:	2312      	movs	r3, #18
 8004226:	e024      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1ce>
 8004228:	2300      	movs	r3, #0
 800422a:	e022      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1ce>
 800422c:	2311      	movs	r3, #17
 800422e:	e020      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1ce>
 8004230:	2310      	movs	r3, #16
 8004232:	e01e      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1ce>
 8004234:	230f      	movs	r3, #15
 8004236:	e01c      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1ce>
 8004238:	230e      	movs	r3, #14
 800423a:	e01a      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1ce>
 800423c:	230d      	movs	r3, #13
 800423e:	e018      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1ce>
 8004240:	230c      	movs	r3, #12
 8004242:	e016      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1ce>
 8004244:	230b      	movs	r3, #11
 8004246:	e014      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1ce>
 8004248:	230a      	movs	r3, #10
 800424a:	e012      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1ce>
 800424c:	2309      	movs	r3, #9
 800424e:	e010      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1ce>
 8004250:	2308      	movs	r3, #8
 8004252:	e00e      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1ce>
 8004254:	2307      	movs	r3, #7
 8004256:	e00c      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1ce>
 8004258:	2306      	movs	r3, #6
 800425a:	e00a      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1ce>
 800425c:	2305      	movs	r3, #5
 800425e:	e008      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1ce>
 8004260:	2304      	movs	r3, #4
 8004262:	e006      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1ce>
 8004264:	2303      	movs	r3, #3
 8004266:	e004      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1ce>
 8004268:	2302      	movs	r3, #2
 800426a:	e002      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1ce>
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1ce>
 8004270:	2300      	movs	r3, #0
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	6852      	ldr	r2, [r2, #4]
 8004276:	201f      	movs	r0, #31
 8004278:	4002      	ands	r2, r0
 800427a:	4093      	lsls	r3, r2
 800427c:	000a      	movs	r2, r1
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	089b      	lsrs	r3, r3, #2
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	429a      	cmp	r2, r3
 8004292:	d808      	bhi.n	80042a6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6818      	ldr	r0, [r3, #0]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	6859      	ldr	r1, [r3, #4]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	001a      	movs	r2, r3
 80042a2:	f7ff fcae 	bl	8003c02 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	6819      	ldr	r1, [r3, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	001a      	movs	r2, r3
 80042b4:	f7ff fce8 	bl	8003c88 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	db00      	blt.n	80042c2 <HAL_ADC_ConfigChannel+0x21e>
 80042c0:	e0bc      	b.n	800443c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042c2:	4b50      	ldr	r3, [pc, #320]	; (8004404 <HAL_ADC_ConfigChannel+0x360>)
 80042c4:	0018      	movs	r0, r3
 80042c6:	f7ff fc5b 	bl	8003b80 <LL_ADC_GetCommonPathInternalCh>
 80042ca:	0003      	movs	r3, r0
 80042cc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a4d      	ldr	r2, [pc, #308]	; (8004408 <HAL_ADC_ConfigChannel+0x364>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d122      	bne.n	800431e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	2380      	movs	r3, #128	; 0x80
 80042dc:	041b      	lsls	r3, r3, #16
 80042de:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80042e0:	d11d      	bne.n	800431e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	2280      	movs	r2, #128	; 0x80
 80042e6:	0412      	lsls	r2, r2, #16
 80042e8:	4313      	orrs	r3, r2
 80042ea:	4a46      	ldr	r2, [pc, #280]	; (8004404 <HAL_ADC_ConfigChannel+0x360>)
 80042ec:	0019      	movs	r1, r3
 80042ee:	0010      	movs	r0, r2
 80042f0:	f7ff fc32 	bl	8003b58 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042f4:	4b45      	ldr	r3, [pc, #276]	; (800440c <HAL_ADC_ConfigChannel+0x368>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4945      	ldr	r1, [pc, #276]	; (8004410 <HAL_ADC_ConfigChannel+0x36c>)
 80042fa:	0018      	movs	r0, r3
 80042fc:	f7fb ff0a 	bl	8000114 <__udivsi3>
 8004300:	0003      	movs	r3, r0
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	0013      	movs	r3, r2
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	189b      	adds	r3, r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800430e:	e002      	b.n	8004316 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3b01      	subs	r3, #1
 8004314:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f9      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800431c:	e08e      	b.n	800443c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a3c      	ldr	r2, [pc, #240]	; (8004414 <HAL_ADC_ConfigChannel+0x370>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d10e      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	2380      	movs	r3, #128	; 0x80
 800432c:	045b      	lsls	r3, r3, #17
 800432e:	4013      	ands	r3, r2
 8004330:	d109      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	2280      	movs	r2, #128	; 0x80
 8004336:	0452      	lsls	r2, r2, #17
 8004338:	4313      	orrs	r3, r2
 800433a:	4a32      	ldr	r2, [pc, #200]	; (8004404 <HAL_ADC_ConfigChannel+0x360>)
 800433c:	0019      	movs	r1, r3
 800433e:	0010      	movs	r0, r2
 8004340:	f7ff fc0a 	bl	8003b58 <LL_ADC_SetCommonPathInternalCh>
 8004344:	e07a      	b.n	800443c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a33      	ldr	r2, [pc, #204]	; (8004418 <HAL_ADC_ConfigChannel+0x374>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d000      	beq.n	8004352 <HAL_ADC_ConfigChannel+0x2ae>
 8004350:	e074      	b.n	800443c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	03db      	lsls	r3, r3, #15
 8004358:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800435a:	d000      	beq.n	800435e <HAL_ADC_ConfigChannel+0x2ba>
 800435c:	e06e      	b.n	800443c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	2280      	movs	r2, #128	; 0x80
 8004362:	03d2      	lsls	r2, r2, #15
 8004364:	4313      	orrs	r3, r2
 8004366:	4a27      	ldr	r2, [pc, #156]	; (8004404 <HAL_ADC_ConfigChannel+0x360>)
 8004368:	0019      	movs	r1, r3
 800436a:	0010      	movs	r0, r2
 800436c:	f7ff fbf4 	bl	8003b58 <LL_ADC_SetCommonPathInternalCh>
 8004370:	e064      	b.n	800443c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691a      	ldr	r2, [r3, #16]
 8004376:	2380      	movs	r3, #128	; 0x80
 8004378:	061b      	lsls	r3, r3, #24
 800437a:	429a      	cmp	r2, r3
 800437c:	d004      	beq.n	8004388 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004382:	4a1f      	ldr	r2, [pc, #124]	; (8004400 <HAL_ADC_ConfigChannel+0x35c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d107      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	0019      	movs	r1, r3
 8004392:	0010      	movs	r0, r2
 8004394:	f7ff fc66 	bl	8003c64 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	da4d      	bge.n	800443c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043a0:	4b18      	ldr	r3, [pc, #96]	; (8004404 <HAL_ADC_ConfigChannel+0x360>)
 80043a2:	0018      	movs	r0, r3
 80043a4:	f7ff fbec 	bl	8003b80 <LL_ADC_GetCommonPathInternalCh>
 80043a8:	0003      	movs	r3, r0
 80043aa:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a15      	ldr	r2, [pc, #84]	; (8004408 <HAL_ADC_ConfigChannel+0x364>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d108      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	4a18      	ldr	r2, [pc, #96]	; (800441c <HAL_ADC_ConfigChannel+0x378>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	4a11      	ldr	r2, [pc, #68]	; (8004404 <HAL_ADC_ConfigChannel+0x360>)
 80043be:	0019      	movs	r1, r3
 80043c0:	0010      	movs	r0, r2
 80043c2:	f7ff fbc9 	bl	8003b58 <LL_ADC_SetCommonPathInternalCh>
 80043c6:	e039      	b.n	800443c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a11      	ldr	r2, [pc, #68]	; (8004414 <HAL_ADC_ConfigChannel+0x370>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d108      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4a12      	ldr	r2, [pc, #72]	; (8004420 <HAL_ADC_ConfigChannel+0x37c>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	4a0a      	ldr	r2, [pc, #40]	; (8004404 <HAL_ADC_ConfigChannel+0x360>)
 80043da:	0019      	movs	r1, r3
 80043dc:	0010      	movs	r0, r2
 80043de:	f7ff fbbb 	bl	8003b58 <LL_ADC_SetCommonPathInternalCh>
 80043e2:	e02b      	b.n	800443c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a0b      	ldr	r2, [pc, #44]	; (8004418 <HAL_ADC_ConfigChannel+0x374>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d126      	bne.n	800443c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	4a0c      	ldr	r2, [pc, #48]	; (8004424 <HAL_ADC_ConfigChannel+0x380>)
 80043f2:	4013      	ands	r3, r2
 80043f4:	4a03      	ldr	r2, [pc, #12]	; (8004404 <HAL_ADC_ConfigChannel+0x360>)
 80043f6:	0019      	movs	r1, r3
 80043f8:	0010      	movs	r0, r2
 80043fa:	f7ff fbad 	bl	8003b58 <LL_ADC_SetCommonPathInternalCh>
 80043fe:	e01d      	b.n	800443c <HAL_ADC_ConfigChannel+0x398>
 8004400:	80000004 	.word	0x80000004
 8004404:	40012708 	.word	0x40012708
 8004408:	b0001000 	.word	0xb0001000
 800440c:	20000000 	.word	0x20000000
 8004410:	00030d40 	.word	0x00030d40
 8004414:	b8004000 	.word	0xb8004000
 8004418:	b4002000 	.word	0xb4002000
 800441c:	ff7fffff 	.word	0xff7fffff
 8004420:	feffffff 	.word	0xfeffffff
 8004424:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442c:	2220      	movs	r2, #32
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004434:	2317      	movs	r3, #23
 8004436:	18fb      	adds	r3, r7, r3
 8004438:	2201      	movs	r2, #1
 800443a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2254      	movs	r2, #84	; 0x54
 8004440:	2100      	movs	r1, #0
 8004442:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004444:	2317      	movs	r3, #23
 8004446:	18fb      	adds	r3, r7, r3
 8004448:	781b      	ldrb	r3, [r3, #0]
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b006      	add	sp, #24
 8004450:	bd80      	pop	{r7, pc}
 8004452:	46c0      	nop			; (mov r8, r8)

08004454 <__NVIC_EnableIRQ>:
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	0002      	movs	r2, r0
 800445c:	1dfb      	adds	r3, r7, #7
 800445e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004460:	1dfb      	adds	r3, r7, #7
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b7f      	cmp	r3, #127	; 0x7f
 8004466:	d809      	bhi.n	800447c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004468:	1dfb      	adds	r3, r7, #7
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	001a      	movs	r2, r3
 800446e:	231f      	movs	r3, #31
 8004470:	401a      	ands	r2, r3
 8004472:	4b04      	ldr	r3, [pc, #16]	; (8004484 <__NVIC_EnableIRQ+0x30>)
 8004474:	2101      	movs	r1, #1
 8004476:	4091      	lsls	r1, r2
 8004478:	000a      	movs	r2, r1
 800447a:	601a      	str	r2, [r3, #0]
}
 800447c:	46c0      	nop			; (mov r8, r8)
 800447e:	46bd      	mov	sp, r7
 8004480:	b002      	add	sp, #8
 8004482:	bd80      	pop	{r7, pc}
 8004484:	e000e100 	.word	0xe000e100

08004488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004488:	b590      	push	{r4, r7, lr}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	0002      	movs	r2, r0
 8004490:	6039      	str	r1, [r7, #0]
 8004492:	1dfb      	adds	r3, r7, #7
 8004494:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004496:	1dfb      	adds	r3, r7, #7
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b7f      	cmp	r3, #127	; 0x7f
 800449c:	d828      	bhi.n	80044f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800449e:	4a2f      	ldr	r2, [pc, #188]	; (800455c <__NVIC_SetPriority+0xd4>)
 80044a0:	1dfb      	adds	r3, r7, #7
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	b25b      	sxtb	r3, r3
 80044a6:	089b      	lsrs	r3, r3, #2
 80044a8:	33c0      	adds	r3, #192	; 0xc0
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	589b      	ldr	r3, [r3, r2]
 80044ae:	1dfa      	adds	r2, r7, #7
 80044b0:	7812      	ldrb	r2, [r2, #0]
 80044b2:	0011      	movs	r1, r2
 80044b4:	2203      	movs	r2, #3
 80044b6:	400a      	ands	r2, r1
 80044b8:	00d2      	lsls	r2, r2, #3
 80044ba:	21ff      	movs	r1, #255	; 0xff
 80044bc:	4091      	lsls	r1, r2
 80044be:	000a      	movs	r2, r1
 80044c0:	43d2      	mvns	r2, r2
 80044c2:	401a      	ands	r2, r3
 80044c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	019b      	lsls	r3, r3, #6
 80044ca:	22ff      	movs	r2, #255	; 0xff
 80044cc:	401a      	ands	r2, r3
 80044ce:	1dfb      	adds	r3, r7, #7
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	0018      	movs	r0, r3
 80044d4:	2303      	movs	r3, #3
 80044d6:	4003      	ands	r3, r0
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044dc:	481f      	ldr	r0, [pc, #124]	; (800455c <__NVIC_SetPriority+0xd4>)
 80044de:	1dfb      	adds	r3, r7, #7
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	b25b      	sxtb	r3, r3
 80044e4:	089b      	lsrs	r3, r3, #2
 80044e6:	430a      	orrs	r2, r1
 80044e8:	33c0      	adds	r3, #192	; 0xc0
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80044ee:	e031      	b.n	8004554 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044f0:	4a1b      	ldr	r2, [pc, #108]	; (8004560 <__NVIC_SetPriority+0xd8>)
 80044f2:	1dfb      	adds	r3, r7, #7
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	0019      	movs	r1, r3
 80044f8:	230f      	movs	r3, #15
 80044fa:	400b      	ands	r3, r1
 80044fc:	3b08      	subs	r3, #8
 80044fe:	089b      	lsrs	r3, r3, #2
 8004500:	3306      	adds	r3, #6
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	18d3      	adds	r3, r2, r3
 8004506:	3304      	adds	r3, #4
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	1dfa      	adds	r2, r7, #7
 800450c:	7812      	ldrb	r2, [r2, #0]
 800450e:	0011      	movs	r1, r2
 8004510:	2203      	movs	r2, #3
 8004512:	400a      	ands	r2, r1
 8004514:	00d2      	lsls	r2, r2, #3
 8004516:	21ff      	movs	r1, #255	; 0xff
 8004518:	4091      	lsls	r1, r2
 800451a:	000a      	movs	r2, r1
 800451c:	43d2      	mvns	r2, r2
 800451e:	401a      	ands	r2, r3
 8004520:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	019b      	lsls	r3, r3, #6
 8004526:	22ff      	movs	r2, #255	; 0xff
 8004528:	401a      	ands	r2, r3
 800452a:	1dfb      	adds	r3, r7, #7
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	0018      	movs	r0, r3
 8004530:	2303      	movs	r3, #3
 8004532:	4003      	ands	r3, r0
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004538:	4809      	ldr	r0, [pc, #36]	; (8004560 <__NVIC_SetPriority+0xd8>)
 800453a:	1dfb      	adds	r3, r7, #7
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	001c      	movs	r4, r3
 8004540:	230f      	movs	r3, #15
 8004542:	4023      	ands	r3, r4
 8004544:	3b08      	subs	r3, #8
 8004546:	089b      	lsrs	r3, r3, #2
 8004548:	430a      	orrs	r2, r1
 800454a:	3306      	adds	r3, #6
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	18c3      	adds	r3, r0, r3
 8004550:	3304      	adds	r3, #4
 8004552:	601a      	str	r2, [r3, #0]
}
 8004554:	46c0      	nop			; (mov r8, r8)
 8004556:	46bd      	mov	sp, r7
 8004558:	b003      	add	sp, #12
 800455a:	bd90      	pop	{r4, r7, pc}
 800455c:	e000e100 	.word	0xe000e100
 8004560:	e000ed00 	.word	0xe000ed00

08004564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	1e5a      	subs	r2, r3, #1
 8004570:	2380      	movs	r3, #128	; 0x80
 8004572:	045b      	lsls	r3, r3, #17
 8004574:	429a      	cmp	r2, r3
 8004576:	d301      	bcc.n	800457c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004578:	2301      	movs	r3, #1
 800457a:	e010      	b.n	800459e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800457c:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <SysTick_Config+0x44>)
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	3a01      	subs	r2, #1
 8004582:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004584:	2301      	movs	r3, #1
 8004586:	425b      	negs	r3, r3
 8004588:	2103      	movs	r1, #3
 800458a:	0018      	movs	r0, r3
 800458c:	f7ff ff7c 	bl	8004488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004590:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <SysTick_Config+0x44>)
 8004592:	2200      	movs	r2, #0
 8004594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004596:	4b04      	ldr	r3, [pc, #16]	; (80045a8 <SysTick_Config+0x44>)
 8004598:	2207      	movs	r2, #7
 800459a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800459c:	2300      	movs	r3, #0
}
 800459e:	0018      	movs	r0, r3
 80045a0:	46bd      	mov	sp, r7
 80045a2:	b002      	add	sp, #8
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	e000e010 	.word	0xe000e010

080045ac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	210f      	movs	r1, #15
 80045b8:	187b      	adds	r3, r7, r1
 80045ba:	1c02      	adds	r2, r0, #0
 80045bc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	187b      	adds	r3, r7, r1
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	b25b      	sxtb	r3, r3
 80045c6:	0011      	movs	r1, r2
 80045c8:	0018      	movs	r0, r3
 80045ca:	f7ff ff5d 	bl	8004488 <__NVIC_SetPriority>
}
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	46bd      	mov	sp, r7
 80045d2:	b004      	add	sp, #16
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b082      	sub	sp, #8
 80045da:	af00      	add	r7, sp, #0
 80045dc:	0002      	movs	r2, r0
 80045de:	1dfb      	adds	r3, r7, #7
 80045e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045e2:	1dfb      	adds	r3, r7, #7
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	b25b      	sxtb	r3, r3
 80045e8:	0018      	movs	r0, r3
 80045ea:	f7ff ff33 	bl	8004454 <__NVIC_EnableIRQ>
}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	46bd      	mov	sp, r7
 80045f2:	b002      	add	sp, #8
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b082      	sub	sp, #8
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	0018      	movs	r0, r3
 8004602:	f7ff ffaf 	bl	8004564 <SysTick_Config>
 8004606:	0003      	movs	r3, r0
}
 8004608:	0018      	movs	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	b002      	add	sp, #8
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e077      	b.n	8004712 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a3d      	ldr	r2, [pc, #244]	; (800471c <HAL_DMA_Init+0x10c>)
 8004628:	4694      	mov	ip, r2
 800462a:	4463      	add	r3, ip
 800462c:	2114      	movs	r1, #20
 800462e:	0018      	movs	r0, r3
 8004630:	f7fb fd70 	bl	8000114 <__udivsi3>
 8004634:	0003      	movs	r3, r0
 8004636:	009a      	lsls	r2, r3, #2
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2225      	movs	r2, #37	; 0x25
 8004640:	2102      	movs	r1, #2
 8004642:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4934      	ldr	r1, [pc, #208]	; (8004720 <HAL_DMA_Init+0x110>)
 8004650:	400a      	ands	r2, r1
 8004652:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6819      	ldr	r1, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689a      	ldr	r2, [r3, #8]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	0018      	movs	r0, r3
 800468e:	f000 f8fb 	bl	8004888 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	2380      	movs	r3, #128	; 0x80
 8004698:	01db      	lsls	r3, r3, #7
 800469a:	429a      	cmp	r2, r3
 800469c:	d102      	bne.n	80046a4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ac:	213f      	movs	r1, #63	; 0x3f
 80046ae:	400a      	ands	r2, r1
 80046b0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80046ba:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d011      	beq.n	80046e8 <HAL_DMA_Init+0xd8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d80d      	bhi.n	80046e8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	0018      	movs	r0, r3
 80046d0:	f000 f906 	bl	80048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80046e4:	605a      	str	r2, [r3, #4]
 80046e6:	e008      	b.n	80046fa <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2225      	movs	r2, #37	; 0x25
 8004704:	2101      	movs	r1, #1
 8004706:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2224      	movs	r2, #36	; 0x24
 800470c:	2100      	movs	r1, #0
 800470e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	0018      	movs	r0, r3
 8004714:	46bd      	mov	sp, r7
 8004716:	b002      	add	sp, #8
 8004718:	bd80      	pop	{r7, pc}
 800471a:	46c0      	nop			; (mov r8, r8)
 800471c:	bffdfff8 	.word	0xbffdfff8
 8004720:	ffff800f 	.word	0xffff800f

08004724 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800472c:	4b55      	ldr	r3, [pc, #340]	; (8004884 <HAL_DMA_IRQHandler+0x160>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	221c      	movs	r2, #28
 8004740:	4013      	ands	r3, r2
 8004742:	2204      	movs	r2, #4
 8004744:	409a      	lsls	r2, r3
 8004746:	0013      	movs	r3, r2
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	4013      	ands	r3, r2
 800474c:	d027      	beq.n	800479e <HAL_DMA_IRQHandler+0x7a>
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2204      	movs	r2, #4
 8004752:	4013      	ands	r3, r2
 8004754:	d023      	beq.n	800479e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2220      	movs	r2, #32
 800475e:	4013      	ands	r3, r2
 8004760:	d107      	bne.n	8004772 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2104      	movs	r1, #4
 800476e:	438a      	bics	r2, r1
 8004770:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004772:	4b44      	ldr	r3, [pc, #272]	; (8004884 <HAL_DMA_IRQHandler+0x160>)
 8004774:	6859      	ldr	r1, [r3, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	221c      	movs	r2, #28
 800477c:	4013      	ands	r3, r2
 800477e:	2204      	movs	r2, #4
 8004780:	409a      	lsls	r2, r3
 8004782:	4b40      	ldr	r3, [pc, #256]	; (8004884 <HAL_DMA_IRQHandler+0x160>)
 8004784:	430a      	orrs	r2, r1
 8004786:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	2b00      	cmp	r3, #0
 800478e:	d100      	bne.n	8004792 <HAL_DMA_IRQHandler+0x6e>
 8004790:	e073      	b.n	800487a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	0010      	movs	r0, r2
 800479a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800479c:	e06d      	b.n	800487a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	221c      	movs	r2, #28
 80047a4:	4013      	ands	r3, r2
 80047a6:	2202      	movs	r2, #2
 80047a8:	409a      	lsls	r2, r3
 80047aa:	0013      	movs	r3, r2
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4013      	ands	r3, r2
 80047b0:	d02e      	beq.n	8004810 <HAL_DMA_IRQHandler+0xec>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2202      	movs	r2, #2
 80047b6:	4013      	ands	r3, r2
 80047b8:	d02a      	beq.n	8004810 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2220      	movs	r2, #32
 80047c2:	4013      	ands	r3, r2
 80047c4:	d10b      	bne.n	80047de <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	210a      	movs	r1, #10
 80047d2:	438a      	bics	r2, r1
 80047d4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2225      	movs	r2, #37	; 0x25
 80047da:	2101      	movs	r1, #1
 80047dc:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80047de:	4b29      	ldr	r3, [pc, #164]	; (8004884 <HAL_DMA_IRQHandler+0x160>)
 80047e0:	6859      	ldr	r1, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	221c      	movs	r2, #28
 80047e8:	4013      	ands	r3, r2
 80047ea:	2202      	movs	r2, #2
 80047ec:	409a      	lsls	r2, r3
 80047ee:	4b25      	ldr	r3, [pc, #148]	; (8004884 <HAL_DMA_IRQHandler+0x160>)
 80047f0:	430a      	orrs	r2, r1
 80047f2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2224      	movs	r2, #36	; 0x24
 80047f8:	2100      	movs	r1, #0
 80047fa:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d03a      	beq.n	800487a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	0010      	movs	r0, r2
 800480c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800480e:	e034      	b.n	800487a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	221c      	movs	r2, #28
 8004816:	4013      	ands	r3, r2
 8004818:	2208      	movs	r2, #8
 800481a:	409a      	lsls	r2, r3
 800481c:	0013      	movs	r3, r2
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4013      	ands	r3, r2
 8004822:	d02b      	beq.n	800487c <HAL_DMA_IRQHandler+0x158>
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2208      	movs	r2, #8
 8004828:	4013      	ands	r3, r2
 800482a:	d027      	beq.n	800487c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	210e      	movs	r1, #14
 8004838:	438a      	bics	r2, r1
 800483a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800483c:	4b11      	ldr	r3, [pc, #68]	; (8004884 <HAL_DMA_IRQHandler+0x160>)
 800483e:	6859      	ldr	r1, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	221c      	movs	r2, #28
 8004846:	4013      	ands	r3, r2
 8004848:	2201      	movs	r2, #1
 800484a:	409a      	lsls	r2, r3
 800484c:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <HAL_DMA_IRQHandler+0x160>)
 800484e:	430a      	orrs	r2, r1
 8004850:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2225      	movs	r2, #37	; 0x25
 800485c:	2101      	movs	r1, #1
 800485e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2224      	movs	r2, #36	; 0x24
 8004864:	2100      	movs	r1, #0
 8004866:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	0010      	movs	r0, r2
 8004878:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	46c0      	nop			; (mov r8, r8)
}
 800487e:	46bd      	mov	sp, r7
 8004880:	b004      	add	sp, #16
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40020000 	.word	0x40020000

08004888 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	089b      	lsrs	r3, r3, #2
 8004896:	4a10      	ldr	r2, [pc, #64]	; (80048d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004898:	4694      	mov	ip, r2
 800489a:	4463      	add	r3, ip
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	001a      	movs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	001a      	movs	r2, r3
 80048aa:	23ff      	movs	r3, #255	; 0xff
 80048ac:	4013      	ands	r3, r2
 80048ae:	3b08      	subs	r3, #8
 80048b0:	2114      	movs	r1, #20
 80048b2:	0018      	movs	r0, r3
 80048b4:	f7fb fc2e 	bl	8000114 <__udivsi3>
 80048b8:	0003      	movs	r3, r0
 80048ba:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a07      	ldr	r2, [pc, #28]	; (80048dc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80048c0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	221f      	movs	r2, #31
 80048c6:	4013      	ands	r3, r2
 80048c8:	2201      	movs	r2, #1
 80048ca:	409a      	lsls	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80048d0:	46c0      	nop			; (mov r8, r8)
 80048d2:	46bd      	mov	sp, r7
 80048d4:	b004      	add	sp, #16
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	10008200 	.word	0x10008200
 80048dc:	40020880 	.word	0x40020880

080048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	223f      	movs	r2, #63	; 0x3f
 80048ee:	4013      	ands	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4a0a      	ldr	r2, [pc, #40]	; (8004920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80048f6:	4694      	mov	ip, r2
 80048f8:	4463      	add	r3, ip
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	001a      	movs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a07      	ldr	r2, [pc, #28]	; (8004924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004906:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	3b01      	subs	r3, #1
 800490c:	2203      	movs	r2, #3
 800490e:	4013      	ands	r3, r2
 8004910:	2201      	movs	r2, #1
 8004912:	409a      	lsls	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	659a      	str	r2, [r3, #88]	; 0x58
}
 8004918:	46c0      	nop			; (mov r8, r8)
 800491a:	46bd      	mov	sp, r7
 800491c:	b004      	add	sp, #16
 800491e:	bd80      	pop	{r7, pc}
 8004920:	1000823f 	.word	0x1000823f
 8004924:	40020940 	.word	0x40020940

08004928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004936:	e147      	b.n	8004bc8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2101      	movs	r1, #1
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	4091      	lsls	r1, r2
 8004942:	000a      	movs	r2, r1
 8004944:	4013      	ands	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d100      	bne.n	8004950 <HAL_GPIO_Init+0x28>
 800494e:	e138      	b.n	8004bc2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2203      	movs	r2, #3
 8004956:	4013      	ands	r3, r2
 8004958:	2b01      	cmp	r3, #1
 800495a:	d005      	beq.n	8004968 <HAL_GPIO_Init+0x40>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2203      	movs	r2, #3
 8004962:	4013      	ands	r3, r2
 8004964:	2b02      	cmp	r3, #2
 8004966:	d130      	bne.n	80049ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	2203      	movs	r2, #3
 8004974:	409a      	lsls	r2, r3
 8004976:	0013      	movs	r3, r2
 8004978:	43da      	mvns	r2, r3
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	4013      	ands	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	409a      	lsls	r2, r3
 800498a:	0013      	movs	r3, r2
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800499e:	2201      	movs	r2, #1
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	409a      	lsls	r2, r3
 80049a4:	0013      	movs	r3, r2
 80049a6:	43da      	mvns	r2, r3
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	4013      	ands	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	091b      	lsrs	r3, r3, #4
 80049b4:	2201      	movs	r2, #1
 80049b6:	401a      	ands	r2, r3
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	409a      	lsls	r2, r3
 80049bc:	0013      	movs	r3, r2
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2203      	movs	r2, #3
 80049d0:	4013      	ands	r3, r2
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d017      	beq.n	8004a06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	2203      	movs	r2, #3
 80049e2:	409a      	lsls	r2, r3
 80049e4:	0013      	movs	r3, r2
 80049e6:	43da      	mvns	r2, r3
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	4013      	ands	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	409a      	lsls	r2, r3
 80049f8:	0013      	movs	r3, r2
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2203      	movs	r2, #3
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d123      	bne.n	8004a5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	08da      	lsrs	r2, r3, #3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3208      	adds	r2, #8
 8004a1a:	0092      	lsls	r2, r2, #2
 8004a1c:	58d3      	ldr	r3, [r2, r3]
 8004a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2207      	movs	r2, #7
 8004a24:	4013      	ands	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	220f      	movs	r2, #15
 8004a2a:	409a      	lsls	r2, r3
 8004a2c:	0013      	movs	r3, r2
 8004a2e:	43da      	mvns	r2, r3
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4013      	ands	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2107      	movs	r1, #7
 8004a3e:	400b      	ands	r3, r1
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	409a      	lsls	r2, r3
 8004a44:	0013      	movs	r3, r2
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	08da      	lsrs	r2, r3, #3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3208      	adds	r2, #8
 8004a54:	0092      	lsls	r2, r2, #2
 8004a56:	6939      	ldr	r1, [r7, #16]
 8004a58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	2203      	movs	r2, #3
 8004a66:	409a      	lsls	r2, r3
 8004a68:	0013      	movs	r3, r2
 8004a6a:	43da      	mvns	r2, r3
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2203      	movs	r2, #3
 8004a78:	401a      	ands	r2, r3
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	409a      	lsls	r2, r3
 8004a80:	0013      	movs	r3, r2
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	23c0      	movs	r3, #192	; 0xc0
 8004a94:	029b      	lsls	r3, r3, #10
 8004a96:	4013      	ands	r3, r2
 8004a98:	d100      	bne.n	8004a9c <HAL_GPIO_Init+0x174>
 8004a9a:	e092      	b.n	8004bc2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004a9c:	4a50      	ldr	r2, [pc, #320]	; (8004be0 <HAL_GPIO_Init+0x2b8>)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	089b      	lsrs	r3, r3, #2
 8004aa2:	3318      	adds	r3, #24
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	589b      	ldr	r3, [r3, r2]
 8004aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2203      	movs	r2, #3
 8004aae:	4013      	ands	r3, r2
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	220f      	movs	r2, #15
 8004ab4:	409a      	lsls	r2, r3
 8004ab6:	0013      	movs	r3, r2
 8004ab8:	43da      	mvns	r2, r3
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	4013      	ands	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	23a0      	movs	r3, #160	; 0xa0
 8004ac4:	05db      	lsls	r3, r3, #23
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d013      	beq.n	8004af2 <HAL_GPIO_Init+0x1ca>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a45      	ldr	r2, [pc, #276]	; (8004be4 <HAL_GPIO_Init+0x2bc>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00d      	beq.n	8004aee <HAL_GPIO_Init+0x1c6>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a44      	ldr	r2, [pc, #272]	; (8004be8 <HAL_GPIO_Init+0x2c0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d007      	beq.n	8004aea <HAL_GPIO_Init+0x1c2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a43      	ldr	r2, [pc, #268]	; (8004bec <HAL_GPIO_Init+0x2c4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d101      	bne.n	8004ae6 <HAL_GPIO_Init+0x1be>
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e006      	b.n	8004af4 <HAL_GPIO_Init+0x1cc>
 8004ae6:	2305      	movs	r3, #5
 8004ae8:	e004      	b.n	8004af4 <HAL_GPIO_Init+0x1cc>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e002      	b.n	8004af4 <HAL_GPIO_Init+0x1cc>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <HAL_GPIO_Init+0x1cc>
 8004af2:	2300      	movs	r3, #0
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	2103      	movs	r1, #3
 8004af8:	400a      	ands	r2, r1
 8004afa:	00d2      	lsls	r2, r2, #3
 8004afc:	4093      	lsls	r3, r2
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004b04:	4936      	ldr	r1, [pc, #216]	; (8004be0 <HAL_GPIO_Init+0x2b8>)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	089b      	lsrs	r3, r3, #2
 8004b0a:	3318      	adds	r3, #24
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b12:	4b33      	ldr	r3, [pc, #204]	; (8004be0 <HAL_GPIO_Init+0x2b8>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	43da      	mvns	r2, r3
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	2380      	movs	r3, #128	; 0x80
 8004b28:	035b      	lsls	r3, r3, #13
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b36:	4b2a      	ldr	r3, [pc, #168]	; (8004be0 <HAL_GPIO_Init+0x2b8>)
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004b3c:	4b28      	ldr	r3, [pc, #160]	; (8004be0 <HAL_GPIO_Init+0x2b8>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	43da      	mvns	r2, r3
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	2380      	movs	r3, #128	; 0x80
 8004b52:	039b      	lsls	r3, r3, #14
 8004b54:	4013      	ands	r3, r2
 8004b56:	d003      	beq.n	8004b60 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b60:	4b1f      	ldr	r3, [pc, #124]	; (8004be0 <HAL_GPIO_Init+0x2b8>)
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004b66:	4a1e      	ldr	r2, [pc, #120]	; (8004be0 <HAL_GPIO_Init+0x2b8>)
 8004b68:	2384      	movs	r3, #132	; 0x84
 8004b6a:	58d3      	ldr	r3, [r2, r3]
 8004b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	43da      	mvns	r2, r3
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	4013      	ands	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	2380      	movs	r3, #128	; 0x80
 8004b7e:	029b      	lsls	r3, r3, #10
 8004b80:	4013      	ands	r3, r2
 8004b82:	d003      	beq.n	8004b8c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b8c:	4914      	ldr	r1, [pc, #80]	; (8004be0 <HAL_GPIO_Init+0x2b8>)
 8004b8e:	2284      	movs	r2, #132	; 0x84
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004b94:	4a12      	ldr	r2, [pc, #72]	; (8004be0 <HAL_GPIO_Init+0x2b8>)
 8004b96:	2380      	movs	r3, #128	; 0x80
 8004b98:	58d3      	ldr	r3, [r2, r3]
 8004b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	43da      	mvns	r2, r3
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	2380      	movs	r3, #128	; 0x80
 8004bac:	025b      	lsls	r3, r3, #9
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d003      	beq.n	8004bba <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004bba:	4909      	ldr	r1, [pc, #36]	; (8004be0 <HAL_GPIO_Init+0x2b8>)
 8004bbc:	2280      	movs	r2, #128	; 0x80
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	40da      	lsrs	r2, r3
 8004bd0:	1e13      	subs	r3, r2, #0
 8004bd2:	d000      	beq.n	8004bd6 <HAL_GPIO_Init+0x2ae>
 8004bd4:	e6b0      	b.n	8004938 <HAL_GPIO_Init+0x10>
  }
}
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	46c0      	nop			; (mov r8, r8)
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b006      	add	sp, #24
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40021800 	.word	0x40021800
 8004be4:	50000400 	.word	0x50000400
 8004be8:	50000800 	.word	0x50000800
 8004bec:	50000c00 	.word	0x50000c00

08004bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	0008      	movs	r0, r1
 8004bfa:	0011      	movs	r1, r2
 8004bfc:	1cbb      	adds	r3, r7, #2
 8004bfe:	1c02      	adds	r2, r0, #0
 8004c00:	801a      	strh	r2, [r3, #0]
 8004c02:	1c7b      	adds	r3, r7, #1
 8004c04:	1c0a      	adds	r2, r1, #0
 8004c06:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c08:	1c7b      	adds	r3, r7, #1
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d004      	beq.n	8004c1a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c10:	1cbb      	adds	r3, r7, #2
 8004c12:	881a      	ldrh	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c18:	e003      	b.n	8004c22 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c1a:	1cbb      	adds	r3, r7, #2
 8004c1c:	881a      	ldrh	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	46bd      	mov	sp, r7
 8004c26:	b002      	add	sp, #8
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e03d      	b.n	8004cba <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a20      	ldr	r2, [pc, #128]	; (8004cc4 <HAL_IWDG_Init+0x98>)
 8004c44:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1f      	ldr	r2, [pc, #124]	; (8004cc8 <HAL_IWDG_Init+0x9c>)
 8004c4c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6852      	ldr	r2, [r2, #4]
 8004c56:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6892      	ldr	r2, [r2, #8]
 8004c60:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004c62:	f7fe ff4b 	bl	8003afc <HAL_GetTick>
 8004c66:	0003      	movs	r3, r0
 8004c68:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004c6a:	e00e      	b.n	8004c8a <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004c6c:	f7fe ff46 	bl	8003afc <HAL_GetTick>
 8004c70:	0002      	movs	r2, r0
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b31      	cmp	r3, #49	; 0x31
 8004c78:	d907      	bls.n	8004c8a <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	2207      	movs	r2, #7
 8004c82:	4013      	ands	r3, r2
 8004c84:	d001      	beq.n	8004c8a <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e017      	b.n	8004cba <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	2207      	movs	r2, #7
 8004c92:	4013      	ands	r3, r2
 8004c94:	d1ea      	bne.n	8004c6c <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d005      	beq.n	8004cb0 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	68d2      	ldr	r2, [r2, #12]
 8004cac:	611a      	str	r2, [r3, #16]
 8004cae:	e003      	b.n	8004cb8 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a05      	ldr	r2, [pc, #20]	; (8004ccc <HAL_IWDG_Init+0xa0>)
 8004cb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	0018      	movs	r0, r3
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b004      	add	sp, #16
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	0000cccc 	.word	0x0000cccc
 8004cc8:	00005555 	.word	0x00005555
 8004ccc:	0000aaaa 	.word	0x0000aaaa

08004cd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004cd8:	4b19      	ldr	r3, [pc, #100]	; (8004d40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a19      	ldr	r2, [pc, #100]	; (8004d44 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004cde:	4013      	ands	r3, r2
 8004ce0:	0019      	movs	r1, r3
 8004ce2:	4b17      	ldr	r3, [pc, #92]	; (8004d40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	2380      	movs	r3, #128	; 0x80
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d11f      	bne.n	8004d34 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004cf4:	4b14      	ldr	r3, [pc, #80]	; (8004d48 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	0013      	movs	r3, r2
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	189b      	adds	r3, r3, r2
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	4912      	ldr	r1, [pc, #72]	; (8004d4c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004d02:	0018      	movs	r0, r3
 8004d04:	f7fb fa06 	bl	8000114 <__udivsi3>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d0e:	e008      	b.n	8004d22 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	e001      	b.n	8004d22 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e009      	b.n	8004d36 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d22:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004d24:	695a      	ldr	r2, [r3, #20]
 8004d26:	2380      	movs	r3, #128	; 0x80
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	401a      	ands	r2, r3
 8004d2c:	2380      	movs	r3, #128	; 0x80
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d0ed      	beq.n	8004d10 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	0018      	movs	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	b004      	add	sp, #16
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	40007000 	.word	0x40007000
 8004d44:	fffff9ff 	.word	0xfffff9ff
 8004d48:	20000000 	.word	0x20000000
 8004d4c:	000f4240 	.word	0x000f4240

08004d50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e2f3      	b.n	800534a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2201      	movs	r2, #1
 8004d68:	4013      	ands	r3, r2
 8004d6a:	d100      	bne.n	8004d6e <HAL_RCC_OscConfig+0x1e>
 8004d6c:	e07c      	b.n	8004e68 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d6e:	4bc3      	ldr	r3, [pc, #780]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	2238      	movs	r2, #56	; 0x38
 8004d74:	4013      	ands	r3, r2
 8004d76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d78:	4bc0      	ldr	r3, [pc, #768]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	2203      	movs	r2, #3
 8004d7e:	4013      	ands	r3, r2
 8004d80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	2b10      	cmp	r3, #16
 8004d86:	d102      	bne.n	8004d8e <HAL_RCC_OscConfig+0x3e>
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d002      	beq.n	8004d94 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d10b      	bne.n	8004dac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d94:	4bb9      	ldr	r3, [pc, #740]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	2380      	movs	r3, #128	; 0x80
 8004d9a:	029b      	lsls	r3, r3, #10
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	d062      	beq.n	8004e66 <HAL_RCC_OscConfig+0x116>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d15e      	bne.n	8004e66 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e2ce      	b.n	800534a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	2380      	movs	r3, #128	; 0x80
 8004db2:	025b      	lsls	r3, r3, #9
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d107      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x78>
 8004db8:	4bb0      	ldr	r3, [pc, #704]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	4baf      	ldr	r3, [pc, #700]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004dbe:	2180      	movs	r1, #128	; 0x80
 8004dc0:	0249      	lsls	r1, r1, #9
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	e020      	b.n	8004e0a <HAL_RCC_OscConfig+0xba>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	23a0      	movs	r3, #160	; 0xa0
 8004dce:	02db      	lsls	r3, r3, #11
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d10e      	bne.n	8004df2 <HAL_RCC_OscConfig+0xa2>
 8004dd4:	4ba9      	ldr	r3, [pc, #676]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	4ba8      	ldr	r3, [pc, #672]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004dda:	2180      	movs	r1, #128	; 0x80
 8004ddc:	02c9      	lsls	r1, r1, #11
 8004dde:	430a      	orrs	r2, r1
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	4ba6      	ldr	r3, [pc, #664]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	4ba5      	ldr	r3, [pc, #660]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004de8:	2180      	movs	r1, #128	; 0x80
 8004dea:	0249      	lsls	r1, r1, #9
 8004dec:	430a      	orrs	r2, r1
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	e00b      	b.n	8004e0a <HAL_RCC_OscConfig+0xba>
 8004df2:	4ba2      	ldr	r3, [pc, #648]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	4ba1      	ldr	r3, [pc, #644]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004df8:	49a1      	ldr	r1, [pc, #644]	; (8005080 <HAL_RCC_OscConfig+0x330>)
 8004dfa:	400a      	ands	r2, r1
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	4b9f      	ldr	r3, [pc, #636]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	4b9e      	ldr	r3, [pc, #632]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004e04:	499f      	ldr	r1, [pc, #636]	; (8005084 <HAL_RCC_OscConfig+0x334>)
 8004e06:	400a      	ands	r2, r1
 8004e08:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d014      	beq.n	8004e3c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e12:	f7fe fe73 	bl	8003afc <HAL_GetTick>
 8004e16:	0003      	movs	r3, r0
 8004e18:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e1c:	f7fe fe6e 	bl	8003afc <HAL_GetTick>
 8004e20:	0002      	movs	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b64      	cmp	r3, #100	; 0x64
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e28d      	b.n	800534a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e2e:	4b93      	ldr	r3, [pc, #588]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	2380      	movs	r3, #128	; 0x80
 8004e34:	029b      	lsls	r3, r3, #10
 8004e36:	4013      	ands	r3, r2
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0xcc>
 8004e3a:	e015      	b.n	8004e68 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3c:	f7fe fe5e 	bl	8003afc <HAL_GetTick>
 8004e40:	0003      	movs	r3, r0
 8004e42:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e44:	e008      	b.n	8004e58 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e46:	f7fe fe59 	bl	8003afc <HAL_GetTick>
 8004e4a:	0002      	movs	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b64      	cmp	r3, #100	; 0x64
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e278      	b.n	800534a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e58:	4b88      	ldr	r3, [pc, #544]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	2380      	movs	r3, #128	; 0x80
 8004e5e:	029b      	lsls	r3, r3, #10
 8004e60:	4013      	ands	r3, r2
 8004e62:	d1f0      	bne.n	8004e46 <HAL_RCC_OscConfig+0xf6>
 8004e64:	e000      	b.n	8004e68 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e66:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	4013      	ands	r3, r2
 8004e70:	d100      	bne.n	8004e74 <HAL_RCC_OscConfig+0x124>
 8004e72:	e099      	b.n	8004fa8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e74:	4b81      	ldr	r3, [pc, #516]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2238      	movs	r2, #56	; 0x38
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e7e:	4b7f      	ldr	r3, [pc, #508]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	2203      	movs	r2, #3
 8004e84:	4013      	ands	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2b10      	cmp	r3, #16
 8004e8c:	d102      	bne.n	8004e94 <HAL_RCC_OscConfig+0x144>
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d002      	beq.n	8004e9a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d135      	bne.n	8004f06 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e9a:	4b78      	ldr	r3, [pc, #480]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	2380      	movs	r3, #128	; 0x80
 8004ea0:	00db      	lsls	r3, r3, #3
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d005      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x162>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e24b      	b.n	800534a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb2:	4b72      	ldr	r3, [pc, #456]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	4a74      	ldr	r2, [pc, #464]	; (8005088 <HAL_RCC_OscConfig+0x338>)
 8004eb8:	4013      	ands	r3, r2
 8004eba:	0019      	movs	r1, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	021a      	lsls	r2, r3, #8
 8004ec2:	4b6e      	ldr	r3, [pc, #440]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d112      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004ece:	4b6b      	ldr	r3, [pc, #428]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a6e      	ldr	r2, [pc, #440]	; (800508c <HAL_RCC_OscConfig+0x33c>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	0019      	movs	r1, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691a      	ldr	r2, [r3, #16]
 8004edc:	4b67      	ldr	r3, [pc, #412]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004ee2:	4b66      	ldr	r3, [pc, #408]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	0adb      	lsrs	r3, r3, #11
 8004ee8:	2207      	movs	r2, #7
 8004eea:	4013      	ands	r3, r2
 8004eec:	4a68      	ldr	r2, [pc, #416]	; (8005090 <HAL_RCC_OscConfig+0x340>)
 8004eee:	40da      	lsrs	r2, r3
 8004ef0:	4b68      	ldr	r3, [pc, #416]	; (8005094 <HAL_RCC_OscConfig+0x344>)
 8004ef2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ef4:	4b68      	ldr	r3, [pc, #416]	; (8005098 <HAL_RCC_OscConfig+0x348>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f7fe fda3 	bl	8003a44 <HAL_InitTick>
 8004efe:	1e03      	subs	r3, r0, #0
 8004f00:	d051      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e221      	b.n	800534a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d030      	beq.n	8004f70 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004f0e:	4b5b      	ldr	r3, [pc, #364]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a5e      	ldr	r2, [pc, #376]	; (800508c <HAL_RCC_OscConfig+0x33c>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	0019      	movs	r1, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	4b57      	ldr	r3, [pc, #348]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004f22:	4b56      	ldr	r3, [pc, #344]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	4b55      	ldr	r3, [pc, #340]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004f28:	2180      	movs	r1, #128	; 0x80
 8004f2a:	0049      	lsls	r1, r1, #1
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f30:	f7fe fde4 	bl	8003afc <HAL_GetTick>
 8004f34:	0003      	movs	r3, r0
 8004f36:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f3a:	f7fe fddf 	bl	8003afc <HAL_GetTick>
 8004f3e:	0002      	movs	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e1fe      	b.n	800534a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f4c:	4b4b      	ldr	r3, [pc, #300]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	2380      	movs	r3, #128	; 0x80
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	4013      	ands	r3, r2
 8004f56:	d0f0      	beq.n	8004f3a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f58:	4b48      	ldr	r3, [pc, #288]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	4a4a      	ldr	r2, [pc, #296]	; (8005088 <HAL_RCC_OscConfig+0x338>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	0019      	movs	r1, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	021a      	lsls	r2, r3, #8
 8004f68:	4b44      	ldr	r3, [pc, #272]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
 8004f6e:	e01b      	b.n	8004fa8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004f70:	4b42      	ldr	r3, [pc, #264]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	4b41      	ldr	r3, [pc, #260]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004f76:	4949      	ldr	r1, [pc, #292]	; (800509c <HAL_RCC_OscConfig+0x34c>)
 8004f78:	400a      	ands	r2, r1
 8004f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7c:	f7fe fdbe 	bl	8003afc <HAL_GetTick>
 8004f80:	0003      	movs	r3, r0
 8004f82:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f84:	e008      	b.n	8004f98 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f86:	f7fe fdb9 	bl	8003afc <HAL_GetTick>
 8004f8a:	0002      	movs	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e1d8      	b.n	800534a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f98:	4b38      	ldr	r3, [pc, #224]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	2380      	movs	r3, #128	; 0x80
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d1f0      	bne.n	8004f86 <HAL_RCC_OscConfig+0x236>
 8004fa4:	e000      	b.n	8004fa8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fa6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2208      	movs	r2, #8
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d047      	beq.n	8005042 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004fb2:	4b32      	ldr	r3, [pc, #200]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2238      	movs	r2, #56	; 0x38
 8004fb8:	4013      	ands	r3, r2
 8004fba:	2b18      	cmp	r3, #24
 8004fbc:	d10a      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004fbe:	4b2f      	ldr	r3, [pc, #188]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	d03c      	beq.n	8005042 <HAL_RCC_OscConfig+0x2f2>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d138      	bne.n	8005042 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e1ba      	b.n	800534a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d019      	beq.n	8005010 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004fdc:	4b27      	ldr	r3, [pc, #156]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004fde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004fe0:	4b26      	ldr	r3, [pc, #152]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe8:	f7fe fd88 	bl	8003afc <HAL_GetTick>
 8004fec:	0003      	movs	r3, r0
 8004fee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ff2:	f7fe fd83 	bl	8003afc <HAL_GetTick>
 8004ff6:	0002      	movs	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e1a2      	b.n	800534a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005004:	4b1d      	ldr	r3, [pc, #116]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8005006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005008:	2202      	movs	r2, #2
 800500a:	4013      	ands	r3, r2
 800500c:	d0f1      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x2a2>
 800500e:	e018      	b.n	8005042 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005010:	4b1a      	ldr	r3, [pc, #104]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8005012:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005014:	4b19      	ldr	r3, [pc, #100]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8005016:	2101      	movs	r1, #1
 8005018:	438a      	bics	r2, r1
 800501a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fe fd6e 	bl	8003afc <HAL_GetTick>
 8005020:	0003      	movs	r3, r0
 8005022:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005026:	f7fe fd69 	bl	8003afc <HAL_GetTick>
 800502a:	0002      	movs	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e188      	b.n	800534a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005038:	4b10      	ldr	r3, [pc, #64]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 800503a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800503c:	2202      	movs	r2, #2
 800503e:	4013      	ands	r3, r2
 8005040:	d1f1      	bne.n	8005026 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2204      	movs	r2, #4
 8005048:	4013      	ands	r3, r2
 800504a:	d100      	bne.n	800504e <HAL_RCC_OscConfig+0x2fe>
 800504c:	e0c6      	b.n	80051dc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800504e:	231f      	movs	r3, #31
 8005050:	18fb      	adds	r3, r7, r3
 8005052:	2200      	movs	r2, #0
 8005054:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005056:	4b09      	ldr	r3, [pc, #36]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	2238      	movs	r2, #56	; 0x38
 800505c:	4013      	ands	r3, r2
 800505e:	2b20      	cmp	r3, #32
 8005060:	d11e      	bne.n	80050a0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005062:	4b06      	ldr	r3, [pc, #24]	; (800507c <HAL_RCC_OscConfig+0x32c>)
 8005064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005066:	2202      	movs	r2, #2
 8005068:	4013      	ands	r3, r2
 800506a:	d100      	bne.n	800506e <HAL_RCC_OscConfig+0x31e>
 800506c:	e0b6      	b.n	80051dc <HAL_RCC_OscConfig+0x48c>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d000      	beq.n	8005078 <HAL_RCC_OscConfig+0x328>
 8005076:	e0b1      	b.n	80051dc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e166      	b.n	800534a <HAL_RCC_OscConfig+0x5fa>
 800507c:	40021000 	.word	0x40021000
 8005080:	fffeffff 	.word	0xfffeffff
 8005084:	fffbffff 	.word	0xfffbffff
 8005088:	ffff80ff 	.word	0xffff80ff
 800508c:	ffffc7ff 	.word	0xffffc7ff
 8005090:	00f42400 	.word	0x00f42400
 8005094:	20000000 	.word	0x20000000
 8005098:	20000004 	.word	0x20000004
 800509c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050a0:	4bac      	ldr	r3, [pc, #688]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 80050a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050a4:	2380      	movs	r3, #128	; 0x80
 80050a6:	055b      	lsls	r3, r3, #21
 80050a8:	4013      	ands	r3, r2
 80050aa:	d101      	bne.n	80050b0 <HAL_RCC_OscConfig+0x360>
 80050ac:	2301      	movs	r3, #1
 80050ae:	e000      	b.n	80050b2 <HAL_RCC_OscConfig+0x362>
 80050b0:	2300      	movs	r3, #0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d011      	beq.n	80050da <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80050b6:	4ba7      	ldr	r3, [pc, #668]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 80050b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050ba:	4ba6      	ldr	r3, [pc, #664]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 80050bc:	2180      	movs	r1, #128	; 0x80
 80050be:	0549      	lsls	r1, r1, #21
 80050c0:	430a      	orrs	r2, r1
 80050c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80050c4:	4ba3      	ldr	r3, [pc, #652]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 80050c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050c8:	2380      	movs	r3, #128	; 0x80
 80050ca:	055b      	lsls	r3, r3, #21
 80050cc:	4013      	ands	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80050d2:	231f      	movs	r3, #31
 80050d4:	18fb      	adds	r3, r7, r3
 80050d6:	2201      	movs	r2, #1
 80050d8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050da:	4b9f      	ldr	r3, [pc, #636]	; (8005358 <HAL_RCC_OscConfig+0x608>)
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	2380      	movs	r3, #128	; 0x80
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	4013      	ands	r3, r2
 80050e4:	d11a      	bne.n	800511c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050e6:	4b9c      	ldr	r3, [pc, #624]	; (8005358 <HAL_RCC_OscConfig+0x608>)
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4b9b      	ldr	r3, [pc, #620]	; (8005358 <HAL_RCC_OscConfig+0x608>)
 80050ec:	2180      	movs	r1, #128	; 0x80
 80050ee:	0049      	lsls	r1, r1, #1
 80050f0:	430a      	orrs	r2, r1
 80050f2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80050f4:	f7fe fd02 	bl	8003afc <HAL_GetTick>
 80050f8:	0003      	movs	r3, r0
 80050fa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050fe:	f7fe fcfd 	bl	8003afc <HAL_GetTick>
 8005102:	0002      	movs	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e11c      	b.n	800534a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005110:	4b91      	ldr	r3, [pc, #580]	; (8005358 <HAL_RCC_OscConfig+0x608>)
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	2380      	movs	r3, #128	; 0x80
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	4013      	ands	r3, r2
 800511a:	d0f0      	beq.n	80050fe <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d106      	bne.n	8005132 <HAL_RCC_OscConfig+0x3e2>
 8005124:	4b8b      	ldr	r3, [pc, #556]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 8005126:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005128:	4b8a      	ldr	r3, [pc, #552]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 800512a:	2101      	movs	r1, #1
 800512c:	430a      	orrs	r2, r1
 800512e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005130:	e01c      	b.n	800516c <HAL_RCC_OscConfig+0x41c>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	2b05      	cmp	r3, #5
 8005138:	d10c      	bne.n	8005154 <HAL_RCC_OscConfig+0x404>
 800513a:	4b86      	ldr	r3, [pc, #536]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 800513c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800513e:	4b85      	ldr	r3, [pc, #532]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 8005140:	2104      	movs	r1, #4
 8005142:	430a      	orrs	r2, r1
 8005144:	65da      	str	r2, [r3, #92]	; 0x5c
 8005146:	4b83      	ldr	r3, [pc, #524]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 8005148:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800514a:	4b82      	ldr	r3, [pc, #520]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 800514c:	2101      	movs	r1, #1
 800514e:	430a      	orrs	r2, r1
 8005150:	65da      	str	r2, [r3, #92]	; 0x5c
 8005152:	e00b      	b.n	800516c <HAL_RCC_OscConfig+0x41c>
 8005154:	4b7f      	ldr	r3, [pc, #508]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 8005156:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005158:	4b7e      	ldr	r3, [pc, #504]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 800515a:	2101      	movs	r1, #1
 800515c:	438a      	bics	r2, r1
 800515e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005160:	4b7c      	ldr	r3, [pc, #496]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 8005162:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005164:	4b7b      	ldr	r3, [pc, #492]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 8005166:	2104      	movs	r1, #4
 8005168:	438a      	bics	r2, r1
 800516a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d014      	beq.n	800519e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005174:	f7fe fcc2 	bl	8003afc <HAL_GetTick>
 8005178:	0003      	movs	r3, r0
 800517a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800517c:	e009      	b.n	8005192 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517e:	f7fe fcbd 	bl	8003afc <HAL_GetTick>
 8005182:	0002      	movs	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	4a74      	ldr	r2, [pc, #464]	; (800535c <HAL_RCC_OscConfig+0x60c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e0db      	b.n	800534a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005192:	4b70      	ldr	r3, [pc, #448]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 8005194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005196:	2202      	movs	r2, #2
 8005198:	4013      	ands	r3, r2
 800519a:	d0f0      	beq.n	800517e <HAL_RCC_OscConfig+0x42e>
 800519c:	e013      	b.n	80051c6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519e:	f7fe fcad 	bl	8003afc <HAL_GetTick>
 80051a2:	0003      	movs	r3, r0
 80051a4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051a6:	e009      	b.n	80051bc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a8:	f7fe fca8 	bl	8003afc <HAL_GetTick>
 80051ac:	0002      	movs	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	4a6a      	ldr	r2, [pc, #424]	; (800535c <HAL_RCC_OscConfig+0x60c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e0c6      	b.n	800534a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051bc:	4b65      	ldr	r3, [pc, #404]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 80051be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c0:	2202      	movs	r2, #2
 80051c2:	4013      	ands	r3, r2
 80051c4:	d1f0      	bne.n	80051a8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80051c6:	231f      	movs	r3, #31
 80051c8:	18fb      	adds	r3, r7, r3
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d105      	bne.n	80051dc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80051d0:	4b60      	ldr	r3, [pc, #384]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 80051d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051d4:	4b5f      	ldr	r3, [pc, #380]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 80051d6:	4962      	ldr	r1, [pc, #392]	; (8005360 <HAL_RCC_OscConfig+0x610>)
 80051d8:	400a      	ands	r2, r1
 80051da:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d100      	bne.n	80051e6 <HAL_RCC_OscConfig+0x496>
 80051e4:	e0b0      	b.n	8005348 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051e6:	4b5b      	ldr	r3, [pc, #364]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	2238      	movs	r2, #56	; 0x38
 80051ec:	4013      	ands	r3, r2
 80051ee:	2b10      	cmp	r3, #16
 80051f0:	d100      	bne.n	80051f4 <HAL_RCC_OscConfig+0x4a4>
 80051f2:	e078      	b.n	80052e6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d153      	bne.n	80052a4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051fc:	4b55      	ldr	r3, [pc, #340]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	4b54      	ldr	r3, [pc, #336]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 8005202:	4958      	ldr	r1, [pc, #352]	; (8005364 <HAL_RCC_OscConfig+0x614>)
 8005204:	400a      	ands	r2, r1
 8005206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005208:	f7fe fc78 	bl	8003afc <HAL_GetTick>
 800520c:	0003      	movs	r3, r0
 800520e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005210:	e008      	b.n	8005224 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005212:	f7fe fc73 	bl	8003afc <HAL_GetTick>
 8005216:	0002      	movs	r2, r0
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e092      	b.n	800534a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005224:	4b4b      	ldr	r3, [pc, #300]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	2380      	movs	r3, #128	; 0x80
 800522a:	049b      	lsls	r3, r3, #18
 800522c:	4013      	ands	r3, r2
 800522e:	d1f0      	bne.n	8005212 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005230:	4b48      	ldr	r3, [pc, #288]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	4a4c      	ldr	r2, [pc, #304]	; (8005368 <HAL_RCC_OscConfig+0x618>)
 8005236:	4013      	ands	r3, r2
 8005238:	0019      	movs	r1, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1a      	ldr	r2, [r3, #32]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005248:	021b      	lsls	r3, r3, #8
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	431a      	orrs	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005256:	431a      	orrs	r2, r3
 8005258:	4b3e      	ldr	r3, [pc, #248]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 800525a:	430a      	orrs	r2, r1
 800525c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800525e:	4b3d      	ldr	r3, [pc, #244]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	4b3c      	ldr	r3, [pc, #240]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 8005264:	2180      	movs	r1, #128	; 0x80
 8005266:	0449      	lsls	r1, r1, #17
 8005268:	430a      	orrs	r2, r1
 800526a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800526c:	4b39      	ldr	r3, [pc, #228]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	4b38      	ldr	r3, [pc, #224]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 8005272:	2180      	movs	r1, #128	; 0x80
 8005274:	0549      	lsls	r1, r1, #21
 8005276:	430a      	orrs	r2, r1
 8005278:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527a:	f7fe fc3f 	bl	8003afc <HAL_GetTick>
 800527e:	0003      	movs	r3, r0
 8005280:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005284:	f7fe fc3a 	bl	8003afc <HAL_GetTick>
 8005288:	0002      	movs	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e059      	b.n	800534a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005296:	4b2f      	ldr	r3, [pc, #188]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	2380      	movs	r3, #128	; 0x80
 800529c:	049b      	lsls	r3, r3, #18
 800529e:	4013      	ands	r3, r2
 80052a0:	d0f0      	beq.n	8005284 <HAL_RCC_OscConfig+0x534>
 80052a2:	e051      	b.n	8005348 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052a4:	4b2b      	ldr	r3, [pc, #172]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	4b2a      	ldr	r3, [pc, #168]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 80052aa:	492e      	ldr	r1, [pc, #184]	; (8005364 <HAL_RCC_OscConfig+0x614>)
 80052ac:	400a      	ands	r2, r1
 80052ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b0:	f7fe fc24 	bl	8003afc <HAL_GetTick>
 80052b4:	0003      	movs	r3, r0
 80052b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052b8:	e008      	b.n	80052cc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ba:	f7fe fc1f 	bl	8003afc <HAL_GetTick>
 80052be:	0002      	movs	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e03e      	b.n	800534a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052cc:	4b21      	ldr	r3, [pc, #132]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	2380      	movs	r3, #128	; 0x80
 80052d2:	049b      	lsls	r3, r3, #18
 80052d4:	4013      	ands	r3, r2
 80052d6:	d1f0      	bne.n	80052ba <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80052d8:	4b1e      	ldr	r3, [pc, #120]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 80052da:	68da      	ldr	r2, [r3, #12]
 80052dc:	4b1d      	ldr	r3, [pc, #116]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 80052de:	4923      	ldr	r1, [pc, #140]	; (800536c <HAL_RCC_OscConfig+0x61c>)
 80052e0:	400a      	ands	r2, r1
 80052e2:	60da      	str	r2, [r3, #12]
 80052e4:	e030      	b.n	8005348 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e02b      	b.n	800534a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80052f2:	4b18      	ldr	r3, [pc, #96]	; (8005354 <HAL_RCC_OscConfig+0x604>)
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2203      	movs	r2, #3
 80052fc:	401a      	ands	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	429a      	cmp	r2, r3
 8005304:	d11e      	bne.n	8005344 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2270      	movs	r2, #112	; 0x70
 800530a:	401a      	ands	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005310:	429a      	cmp	r2, r3
 8005312:	d117      	bne.n	8005344 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	23fe      	movs	r3, #254	; 0xfe
 8005318:	01db      	lsls	r3, r3, #7
 800531a:	401a      	ands	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005322:	429a      	cmp	r2, r3
 8005324:	d10e      	bne.n	8005344 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	23f8      	movs	r3, #248	; 0xf8
 800532a:	039b      	lsls	r3, r3, #14
 800532c:	401a      	ands	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005332:	429a      	cmp	r2, r3
 8005334:	d106      	bne.n	8005344 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	0f5b      	lsrs	r3, r3, #29
 800533a:	075a      	lsls	r2, r3, #29
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005340:	429a      	cmp	r2, r3
 8005342:	d001      	beq.n	8005348 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	0018      	movs	r0, r3
 800534c:	46bd      	mov	sp, r7
 800534e:	b008      	add	sp, #32
 8005350:	bd80      	pop	{r7, pc}
 8005352:	46c0      	nop			; (mov r8, r8)
 8005354:	40021000 	.word	0x40021000
 8005358:	40007000 	.word	0x40007000
 800535c:	00001388 	.word	0x00001388
 8005360:	efffffff 	.word	0xefffffff
 8005364:	feffffff 	.word	0xfeffffff
 8005368:	1fc1808c 	.word	0x1fc1808c
 800536c:	effefffc 	.word	0xeffefffc

08005370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e0e9      	b.n	8005558 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005384:	4b76      	ldr	r3, [pc, #472]	; (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2207      	movs	r2, #7
 800538a:	4013      	ands	r3, r2
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d91e      	bls.n	80053d0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005392:	4b73      	ldr	r3, [pc, #460]	; (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2207      	movs	r2, #7
 8005398:	4393      	bics	r3, r2
 800539a:	0019      	movs	r1, r3
 800539c:	4b70      	ldr	r3, [pc, #448]	; (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80053a4:	f7fe fbaa 	bl	8003afc <HAL_GetTick>
 80053a8:	0003      	movs	r3, r0
 80053aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80053ac:	e009      	b.n	80053c2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053ae:	f7fe fba5 	bl	8003afc <HAL_GetTick>
 80053b2:	0002      	movs	r2, r0
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	4a6a      	ldr	r2, [pc, #424]	; (8005564 <HAL_RCC_ClockConfig+0x1f4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e0ca      	b.n	8005558 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80053c2:	4b67      	ldr	r3, [pc, #412]	; (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2207      	movs	r2, #7
 80053c8:	4013      	ands	r3, r2
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d1ee      	bne.n	80053ae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2202      	movs	r2, #2
 80053d6:	4013      	ands	r3, r2
 80053d8:	d015      	beq.n	8005406 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2204      	movs	r2, #4
 80053e0:	4013      	ands	r3, r2
 80053e2:	d006      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80053e4:	4b60      	ldr	r3, [pc, #384]	; (8005568 <HAL_RCC_ClockConfig+0x1f8>)
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	4b5f      	ldr	r3, [pc, #380]	; (8005568 <HAL_RCC_ClockConfig+0x1f8>)
 80053ea:	21e0      	movs	r1, #224	; 0xe0
 80053ec:	01c9      	lsls	r1, r1, #7
 80053ee:	430a      	orrs	r2, r1
 80053f0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f2:	4b5d      	ldr	r3, [pc, #372]	; (8005568 <HAL_RCC_ClockConfig+0x1f8>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	4a5d      	ldr	r2, [pc, #372]	; (800556c <HAL_RCC_ClockConfig+0x1fc>)
 80053f8:	4013      	ands	r3, r2
 80053fa:	0019      	movs	r1, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	4b59      	ldr	r3, [pc, #356]	; (8005568 <HAL_RCC_ClockConfig+0x1f8>)
 8005402:	430a      	orrs	r2, r1
 8005404:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2201      	movs	r2, #1
 800540c:	4013      	ands	r3, r2
 800540e:	d057      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d107      	bne.n	8005428 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005418:	4b53      	ldr	r3, [pc, #332]	; (8005568 <HAL_RCC_ClockConfig+0x1f8>)
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	2380      	movs	r3, #128	; 0x80
 800541e:	029b      	lsls	r3, r3, #10
 8005420:	4013      	ands	r3, r2
 8005422:	d12b      	bne.n	800547c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e097      	b.n	8005558 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	2b02      	cmp	r3, #2
 800542e:	d107      	bne.n	8005440 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005430:	4b4d      	ldr	r3, [pc, #308]	; (8005568 <HAL_RCC_ClockConfig+0x1f8>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	2380      	movs	r3, #128	; 0x80
 8005436:	049b      	lsls	r3, r3, #18
 8005438:	4013      	ands	r3, r2
 800543a:	d11f      	bne.n	800547c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e08b      	b.n	8005558 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d107      	bne.n	8005458 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005448:	4b47      	ldr	r3, [pc, #284]	; (8005568 <HAL_RCC_ClockConfig+0x1f8>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	2380      	movs	r3, #128	; 0x80
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	4013      	ands	r3, r2
 8005452:	d113      	bne.n	800547c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e07f      	b.n	8005558 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2b03      	cmp	r3, #3
 800545e:	d106      	bne.n	800546e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005460:	4b41      	ldr	r3, [pc, #260]	; (8005568 <HAL_RCC_ClockConfig+0x1f8>)
 8005462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005464:	2202      	movs	r2, #2
 8005466:	4013      	ands	r3, r2
 8005468:	d108      	bne.n	800547c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e074      	b.n	8005558 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800546e:	4b3e      	ldr	r3, [pc, #248]	; (8005568 <HAL_RCC_ClockConfig+0x1f8>)
 8005470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005472:	2202      	movs	r2, #2
 8005474:	4013      	ands	r3, r2
 8005476:	d101      	bne.n	800547c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e06d      	b.n	8005558 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800547c:	4b3a      	ldr	r3, [pc, #232]	; (8005568 <HAL_RCC_ClockConfig+0x1f8>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	2207      	movs	r2, #7
 8005482:	4393      	bics	r3, r2
 8005484:	0019      	movs	r1, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	4b37      	ldr	r3, [pc, #220]	; (8005568 <HAL_RCC_ClockConfig+0x1f8>)
 800548c:	430a      	orrs	r2, r1
 800548e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005490:	f7fe fb34 	bl	8003afc <HAL_GetTick>
 8005494:	0003      	movs	r3, r0
 8005496:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005498:	e009      	b.n	80054ae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800549a:	f7fe fb2f 	bl	8003afc <HAL_GetTick>
 800549e:	0002      	movs	r2, r0
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	4a2f      	ldr	r2, [pc, #188]	; (8005564 <HAL_RCC_ClockConfig+0x1f4>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e054      	b.n	8005558 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ae:	4b2e      	ldr	r3, [pc, #184]	; (8005568 <HAL_RCC_ClockConfig+0x1f8>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	2238      	movs	r2, #56	; 0x38
 80054b4:	401a      	ands	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	429a      	cmp	r2, r3
 80054be:	d1ec      	bne.n	800549a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054c0:	4b27      	ldr	r3, [pc, #156]	; (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2207      	movs	r2, #7
 80054c6:	4013      	ands	r3, r2
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d21e      	bcs.n	800550c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ce:	4b24      	ldr	r3, [pc, #144]	; (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2207      	movs	r2, #7
 80054d4:	4393      	bics	r3, r2
 80054d6:	0019      	movs	r1, r3
 80054d8:	4b21      	ldr	r3, [pc, #132]	; (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80054e0:	f7fe fb0c 	bl	8003afc <HAL_GetTick>
 80054e4:	0003      	movs	r3, r0
 80054e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80054e8:	e009      	b.n	80054fe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ea:	f7fe fb07 	bl	8003afc <HAL_GetTick>
 80054ee:	0002      	movs	r2, r0
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	4a1b      	ldr	r2, [pc, #108]	; (8005564 <HAL_RCC_ClockConfig+0x1f4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e02c      	b.n	8005558 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80054fe:	4b18      	ldr	r3, [pc, #96]	; (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2207      	movs	r2, #7
 8005504:	4013      	ands	r3, r2
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	d1ee      	bne.n	80054ea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2204      	movs	r2, #4
 8005512:	4013      	ands	r3, r2
 8005514:	d009      	beq.n	800552a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005516:	4b14      	ldr	r3, [pc, #80]	; (8005568 <HAL_RCC_ClockConfig+0x1f8>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	4a15      	ldr	r2, [pc, #84]	; (8005570 <HAL_RCC_ClockConfig+0x200>)
 800551c:	4013      	ands	r3, r2
 800551e:	0019      	movs	r1, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	4b10      	ldr	r3, [pc, #64]	; (8005568 <HAL_RCC_ClockConfig+0x1f8>)
 8005526:	430a      	orrs	r2, r1
 8005528:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800552a:	f000 f829 	bl	8005580 <HAL_RCC_GetSysClockFreq>
 800552e:	0001      	movs	r1, r0
 8005530:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <HAL_RCC_ClockConfig+0x1f8>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	0a1b      	lsrs	r3, r3, #8
 8005536:	220f      	movs	r2, #15
 8005538:	401a      	ands	r2, r3
 800553a:	4b0e      	ldr	r3, [pc, #56]	; (8005574 <HAL_RCC_ClockConfig+0x204>)
 800553c:	0092      	lsls	r2, r2, #2
 800553e:	58d3      	ldr	r3, [r2, r3]
 8005540:	221f      	movs	r2, #31
 8005542:	4013      	ands	r3, r2
 8005544:	000a      	movs	r2, r1
 8005546:	40da      	lsrs	r2, r3
 8005548:	4b0b      	ldr	r3, [pc, #44]	; (8005578 <HAL_RCC_ClockConfig+0x208>)
 800554a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800554c:	4b0b      	ldr	r3, [pc, #44]	; (800557c <HAL_RCC_ClockConfig+0x20c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	0018      	movs	r0, r3
 8005552:	f7fe fa77 	bl	8003a44 <HAL_InitTick>
 8005556:	0003      	movs	r3, r0
}
 8005558:	0018      	movs	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	b004      	add	sp, #16
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40022000 	.word	0x40022000
 8005564:	00001388 	.word	0x00001388
 8005568:	40021000 	.word	0x40021000
 800556c:	fffff0ff 	.word	0xfffff0ff
 8005570:	ffff8fff 	.word	0xffff8fff
 8005574:	080065e4 	.word	0x080065e4
 8005578:	20000000 	.word	0x20000000
 800557c:	20000004 	.word	0x20000004

08005580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005586:	4b3c      	ldr	r3, [pc, #240]	; (8005678 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	2238      	movs	r2, #56	; 0x38
 800558c:	4013      	ands	r3, r2
 800558e:	d10f      	bne.n	80055b0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005590:	4b39      	ldr	r3, [pc, #228]	; (8005678 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	0adb      	lsrs	r3, r3, #11
 8005596:	2207      	movs	r2, #7
 8005598:	4013      	ands	r3, r2
 800559a:	2201      	movs	r2, #1
 800559c:	409a      	lsls	r2, r3
 800559e:	0013      	movs	r3, r2
 80055a0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80055a2:	6839      	ldr	r1, [r7, #0]
 80055a4:	4835      	ldr	r0, [pc, #212]	; (800567c <HAL_RCC_GetSysClockFreq+0xfc>)
 80055a6:	f7fa fdb5 	bl	8000114 <__udivsi3>
 80055aa:	0003      	movs	r3, r0
 80055ac:	613b      	str	r3, [r7, #16]
 80055ae:	e05d      	b.n	800566c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055b0:	4b31      	ldr	r3, [pc, #196]	; (8005678 <HAL_RCC_GetSysClockFreq+0xf8>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	2238      	movs	r2, #56	; 0x38
 80055b6:	4013      	ands	r3, r2
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d102      	bne.n	80055c2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055bc:	4b30      	ldr	r3, [pc, #192]	; (8005680 <HAL_RCC_GetSysClockFreq+0x100>)
 80055be:	613b      	str	r3, [r7, #16]
 80055c0:	e054      	b.n	800566c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055c2:	4b2d      	ldr	r3, [pc, #180]	; (8005678 <HAL_RCC_GetSysClockFreq+0xf8>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	2238      	movs	r2, #56	; 0x38
 80055c8:	4013      	ands	r3, r2
 80055ca:	2b10      	cmp	r3, #16
 80055cc:	d138      	bne.n	8005640 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80055ce:	4b2a      	ldr	r3, [pc, #168]	; (8005678 <HAL_RCC_GetSysClockFreq+0xf8>)
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	2203      	movs	r2, #3
 80055d4:	4013      	ands	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055d8:	4b27      	ldr	r3, [pc, #156]	; (8005678 <HAL_RCC_GetSysClockFreq+0xf8>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	091b      	lsrs	r3, r3, #4
 80055de:	2207      	movs	r2, #7
 80055e0:	4013      	ands	r3, r2
 80055e2:	3301      	adds	r3, #1
 80055e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2b03      	cmp	r3, #3
 80055ea:	d10d      	bne.n	8005608 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055ec:	68b9      	ldr	r1, [r7, #8]
 80055ee:	4824      	ldr	r0, [pc, #144]	; (8005680 <HAL_RCC_GetSysClockFreq+0x100>)
 80055f0:	f7fa fd90 	bl	8000114 <__udivsi3>
 80055f4:	0003      	movs	r3, r0
 80055f6:	0019      	movs	r1, r3
 80055f8:	4b1f      	ldr	r3, [pc, #124]	; (8005678 <HAL_RCC_GetSysClockFreq+0xf8>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	0a1b      	lsrs	r3, r3, #8
 80055fe:	227f      	movs	r2, #127	; 0x7f
 8005600:	4013      	ands	r3, r2
 8005602:	434b      	muls	r3, r1
 8005604:	617b      	str	r3, [r7, #20]
        break;
 8005606:	e00d      	b.n	8005624 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005608:	68b9      	ldr	r1, [r7, #8]
 800560a:	481c      	ldr	r0, [pc, #112]	; (800567c <HAL_RCC_GetSysClockFreq+0xfc>)
 800560c:	f7fa fd82 	bl	8000114 <__udivsi3>
 8005610:	0003      	movs	r3, r0
 8005612:	0019      	movs	r1, r3
 8005614:	4b18      	ldr	r3, [pc, #96]	; (8005678 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	0a1b      	lsrs	r3, r3, #8
 800561a:	227f      	movs	r2, #127	; 0x7f
 800561c:	4013      	ands	r3, r2
 800561e:	434b      	muls	r3, r1
 8005620:	617b      	str	r3, [r7, #20]
        break;
 8005622:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005624:	4b14      	ldr	r3, [pc, #80]	; (8005678 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	0f5b      	lsrs	r3, r3, #29
 800562a:	2207      	movs	r2, #7
 800562c:	4013      	ands	r3, r2
 800562e:	3301      	adds	r3, #1
 8005630:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	6978      	ldr	r0, [r7, #20]
 8005636:	f7fa fd6d 	bl	8000114 <__udivsi3>
 800563a:	0003      	movs	r3, r0
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	e015      	b.n	800566c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005640:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2238      	movs	r2, #56	; 0x38
 8005646:	4013      	ands	r3, r2
 8005648:	2b20      	cmp	r3, #32
 800564a:	d103      	bne.n	8005654 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800564c:	2380      	movs	r3, #128	; 0x80
 800564e:	021b      	lsls	r3, r3, #8
 8005650:	613b      	str	r3, [r7, #16]
 8005652:	e00b      	b.n	800566c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005654:	4b08      	ldr	r3, [pc, #32]	; (8005678 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	2238      	movs	r2, #56	; 0x38
 800565a:	4013      	ands	r3, r2
 800565c:	2b18      	cmp	r3, #24
 800565e:	d103      	bne.n	8005668 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005660:	23fa      	movs	r3, #250	; 0xfa
 8005662:	01db      	lsls	r3, r3, #7
 8005664:	613b      	str	r3, [r7, #16]
 8005666:	e001      	b.n	800566c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800566c:	693b      	ldr	r3, [r7, #16]
}
 800566e:	0018      	movs	r0, r3
 8005670:	46bd      	mov	sp, r7
 8005672:	b006      	add	sp, #24
 8005674:	bd80      	pop	{r7, pc}
 8005676:	46c0      	nop			; (mov r8, r8)
 8005678:	40021000 	.word	0x40021000
 800567c:	00f42400 	.word	0x00f42400
 8005680:	007a1200 	.word	0x007a1200

08005684 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800568c:	2313      	movs	r3, #19
 800568e:	18fb      	adds	r3, r7, r3
 8005690:	2200      	movs	r2, #0
 8005692:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005694:	2312      	movs	r3, #18
 8005696:	18fb      	adds	r3, r7, r3
 8005698:	2200      	movs	r2, #0
 800569a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	2380      	movs	r3, #128	; 0x80
 80056a2:	029b      	lsls	r3, r3, #10
 80056a4:	4013      	ands	r3, r2
 80056a6:	d100      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80056a8:	e0a3      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056aa:	2011      	movs	r0, #17
 80056ac:	183b      	adds	r3, r7, r0
 80056ae:	2200      	movs	r2, #0
 80056b0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056b2:	4b7f      	ldr	r3, [pc, #508]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80056b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056b6:	2380      	movs	r3, #128	; 0x80
 80056b8:	055b      	lsls	r3, r3, #21
 80056ba:	4013      	ands	r3, r2
 80056bc:	d110      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056be:	4b7c      	ldr	r3, [pc, #496]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80056c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056c2:	4b7b      	ldr	r3, [pc, #492]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80056c4:	2180      	movs	r1, #128	; 0x80
 80056c6:	0549      	lsls	r1, r1, #21
 80056c8:	430a      	orrs	r2, r1
 80056ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80056cc:	4b78      	ldr	r3, [pc, #480]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80056ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056d0:	2380      	movs	r3, #128	; 0x80
 80056d2:	055b      	lsls	r3, r3, #21
 80056d4:	4013      	ands	r3, r2
 80056d6:	60bb      	str	r3, [r7, #8]
 80056d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056da:	183b      	adds	r3, r7, r0
 80056dc:	2201      	movs	r2, #1
 80056de:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056e0:	4b74      	ldr	r3, [pc, #464]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	4b73      	ldr	r3, [pc, #460]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80056e6:	2180      	movs	r1, #128	; 0x80
 80056e8:	0049      	lsls	r1, r1, #1
 80056ea:	430a      	orrs	r2, r1
 80056ec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056ee:	f7fe fa05 	bl	8003afc <HAL_GetTick>
 80056f2:	0003      	movs	r3, r0
 80056f4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056f6:	e00b      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056f8:	f7fe fa00 	bl	8003afc <HAL_GetTick>
 80056fc:	0002      	movs	r2, r0
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d904      	bls.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005706:	2313      	movs	r3, #19
 8005708:	18fb      	adds	r3, r7, r3
 800570a:	2203      	movs	r2, #3
 800570c:	701a      	strb	r2, [r3, #0]
        break;
 800570e:	e005      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005710:	4b68      	ldr	r3, [pc, #416]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	2380      	movs	r3, #128	; 0x80
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	4013      	ands	r3, r2
 800571a:	d0ed      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800571c:	2313      	movs	r3, #19
 800571e:	18fb      	adds	r3, r7, r3
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d154      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005726:	4b62      	ldr	r3, [pc, #392]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005728:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800572a:	23c0      	movs	r3, #192	; 0xc0
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4013      	ands	r3, r2
 8005730:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d019      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	429a      	cmp	r2, r3
 8005740:	d014      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005742:	4b5b      	ldr	r3, [pc, #364]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005746:	4a5c      	ldr	r2, [pc, #368]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005748:	4013      	ands	r3, r2
 800574a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800574c:	4b58      	ldr	r3, [pc, #352]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800574e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005750:	4b57      	ldr	r3, [pc, #348]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005752:	2180      	movs	r1, #128	; 0x80
 8005754:	0249      	lsls	r1, r1, #9
 8005756:	430a      	orrs	r2, r1
 8005758:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800575a:	4b55      	ldr	r3, [pc, #340]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800575c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800575e:	4b54      	ldr	r3, [pc, #336]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005760:	4956      	ldr	r1, [pc, #344]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8005762:	400a      	ands	r2, r1
 8005764:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005766:	4b52      	ldr	r3, [pc, #328]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2201      	movs	r2, #1
 8005770:	4013      	ands	r3, r2
 8005772:	d016      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005774:	f7fe f9c2 	bl	8003afc <HAL_GetTick>
 8005778:	0003      	movs	r3, r0
 800577a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800577c:	e00c      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800577e:	f7fe f9bd 	bl	8003afc <HAL_GetTick>
 8005782:	0002      	movs	r2, r0
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	4a4d      	ldr	r2, [pc, #308]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d904      	bls.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800578e:	2313      	movs	r3, #19
 8005790:	18fb      	adds	r3, r7, r3
 8005792:	2203      	movs	r2, #3
 8005794:	701a      	strb	r2, [r3, #0]
            break;
 8005796:	e004      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005798:	4b45      	ldr	r3, [pc, #276]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800579a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800579c:	2202      	movs	r2, #2
 800579e:	4013      	ands	r3, r2
 80057a0:	d0ed      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80057a2:	2313      	movs	r3, #19
 80057a4:	18fb      	adds	r3, r7, r3
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10a      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057ac:	4b40      	ldr	r3, [pc, #256]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80057ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b0:	4a41      	ldr	r2, [pc, #260]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	0019      	movs	r1, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	695a      	ldr	r2, [r3, #20]
 80057ba:	4b3d      	ldr	r3, [pc, #244]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80057bc:	430a      	orrs	r2, r1
 80057be:	65da      	str	r2, [r3, #92]	; 0x5c
 80057c0:	e00c      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057c2:	2312      	movs	r3, #18
 80057c4:	18fb      	adds	r3, r7, r3
 80057c6:	2213      	movs	r2, #19
 80057c8:	18ba      	adds	r2, r7, r2
 80057ca:	7812      	ldrb	r2, [r2, #0]
 80057cc:	701a      	strb	r2, [r3, #0]
 80057ce:	e005      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d0:	2312      	movs	r3, #18
 80057d2:	18fb      	adds	r3, r7, r3
 80057d4:	2213      	movs	r2, #19
 80057d6:	18ba      	adds	r2, r7, r2
 80057d8:	7812      	ldrb	r2, [r2, #0]
 80057da:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057dc:	2311      	movs	r3, #17
 80057de:	18fb      	adds	r3, r7, r3
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d105      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057e6:	4b32      	ldr	r3, [pc, #200]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80057e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057ea:	4b31      	ldr	r3, [pc, #196]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80057ec:	4935      	ldr	r1, [pc, #212]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057ee:	400a      	ands	r2, r1
 80057f0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2201      	movs	r2, #1
 80057f8:	4013      	ands	r3, r2
 80057fa:	d009      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057fc:	4b2c      	ldr	r3, [pc, #176]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80057fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005800:	2203      	movs	r2, #3
 8005802:	4393      	bics	r3, r2
 8005804:	0019      	movs	r1, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	4b29      	ldr	r3, [pc, #164]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800580c:	430a      	orrs	r2, r1
 800580e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2220      	movs	r2, #32
 8005816:	4013      	ands	r3, r2
 8005818:	d009      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800581a:	4b25      	ldr	r3, [pc, #148]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800581c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581e:	4a2a      	ldr	r2, [pc, #168]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005820:	4013      	ands	r3, r2
 8005822:	0019      	movs	r1, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	4b21      	ldr	r3, [pc, #132]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800582a:	430a      	orrs	r2, r1
 800582c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	2380      	movs	r3, #128	; 0x80
 8005834:	01db      	lsls	r3, r3, #7
 8005836:	4013      	ands	r3, r2
 8005838:	d015      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800583a:	4b1d      	ldr	r3, [pc, #116]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800583c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	0899      	lsrs	r1, r3, #2
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691a      	ldr	r2, [r3, #16]
 8005846:	4b1a      	ldr	r3, [pc, #104]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005848:	430a      	orrs	r2, r1
 800584a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	2380      	movs	r3, #128	; 0x80
 8005852:	05db      	lsls	r3, r3, #23
 8005854:	429a      	cmp	r2, r3
 8005856:	d106      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005858:	4b15      	ldr	r3, [pc, #84]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800585a:	68da      	ldr	r2, [r3, #12]
 800585c:	4b14      	ldr	r3, [pc, #80]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800585e:	2180      	movs	r1, #128	; 0x80
 8005860:	0249      	lsls	r1, r1, #9
 8005862:	430a      	orrs	r2, r1
 8005864:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	2380      	movs	r3, #128	; 0x80
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	4013      	ands	r3, r2
 8005870:	d016      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005872:	4b0f      	ldr	r3, [pc, #60]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005876:	4a15      	ldr	r2, [pc, #84]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005878:	4013      	ands	r3, r2
 800587a:	0019      	movs	r1, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005882:	430a      	orrs	r2, r1
 8005884:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	2380      	movs	r3, #128	; 0x80
 800588c:	01db      	lsls	r3, r3, #7
 800588e:	429a      	cmp	r2, r3
 8005890:	d106      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005892:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	4b06      	ldr	r3, [pc, #24]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005898:	2180      	movs	r1, #128	; 0x80
 800589a:	0249      	lsls	r1, r1, #9
 800589c:	430a      	orrs	r2, r1
 800589e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80058a0:	2312      	movs	r3, #18
 80058a2:	18fb      	adds	r3, r7, r3
 80058a4:	781b      	ldrb	r3, [r3, #0]
}
 80058a6:	0018      	movs	r0, r3
 80058a8:	46bd      	mov	sp, r7
 80058aa:	b006      	add	sp, #24
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	40021000 	.word	0x40021000
 80058b4:	40007000 	.word	0x40007000
 80058b8:	fffffcff 	.word	0xfffffcff
 80058bc:	fffeffff 	.word	0xfffeffff
 80058c0:	00001388 	.word	0x00001388
 80058c4:	efffffff 	.word	0xefffffff
 80058c8:	ffffcfff 	.word	0xffffcfff
 80058cc:	ffff3fff 	.word	0xffff3fff

080058d0 <__errno>:
 80058d0:	4b01      	ldr	r3, [pc, #4]	; (80058d8 <__errno+0x8>)
 80058d2:	6818      	ldr	r0, [r3, #0]
 80058d4:	4770      	bx	lr
 80058d6:	46c0      	nop			; (mov r8, r8)
 80058d8:	2000000c 	.word	0x2000000c

080058dc <__libc_init_array>:
 80058dc:	b570      	push	{r4, r5, r6, lr}
 80058de:	2600      	movs	r6, #0
 80058e0:	4d0c      	ldr	r5, [pc, #48]	; (8005914 <__libc_init_array+0x38>)
 80058e2:	4c0d      	ldr	r4, [pc, #52]	; (8005918 <__libc_init_array+0x3c>)
 80058e4:	1b64      	subs	r4, r4, r5
 80058e6:	10a4      	asrs	r4, r4, #2
 80058e8:	42a6      	cmp	r6, r4
 80058ea:	d109      	bne.n	8005900 <__libc_init_array+0x24>
 80058ec:	2600      	movs	r6, #0
 80058ee:	f000 fd23 	bl	8006338 <_init>
 80058f2:	4d0a      	ldr	r5, [pc, #40]	; (800591c <__libc_init_array+0x40>)
 80058f4:	4c0a      	ldr	r4, [pc, #40]	; (8005920 <__libc_init_array+0x44>)
 80058f6:	1b64      	subs	r4, r4, r5
 80058f8:	10a4      	asrs	r4, r4, #2
 80058fa:	42a6      	cmp	r6, r4
 80058fc:	d105      	bne.n	800590a <__libc_init_array+0x2e>
 80058fe:	bd70      	pop	{r4, r5, r6, pc}
 8005900:	00b3      	lsls	r3, r6, #2
 8005902:	58eb      	ldr	r3, [r5, r3]
 8005904:	4798      	blx	r3
 8005906:	3601      	adds	r6, #1
 8005908:	e7ee      	b.n	80058e8 <__libc_init_array+0xc>
 800590a:	00b3      	lsls	r3, r6, #2
 800590c:	58eb      	ldr	r3, [r5, r3]
 800590e:	4798      	blx	r3
 8005910:	3601      	adds	r6, #1
 8005912:	e7f2      	b.n	80058fa <__libc_init_array+0x1e>
 8005914:	08006658 	.word	0x08006658
 8005918:	08006658 	.word	0x08006658
 800591c:	08006658 	.word	0x08006658
 8005920:	0800665c 	.word	0x0800665c

08005924 <malloc>:
 8005924:	b510      	push	{r4, lr}
 8005926:	4b03      	ldr	r3, [pc, #12]	; (8005934 <malloc+0x10>)
 8005928:	0001      	movs	r1, r0
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	f000 f882 	bl	8005a34 <_malloc_r>
 8005930:	bd10      	pop	{r4, pc}
 8005932:	46c0      	nop			; (mov r8, r8)
 8005934:	2000000c 	.word	0x2000000c

08005938 <free>:
 8005938:	b510      	push	{r4, lr}
 800593a:	4b03      	ldr	r3, [pc, #12]	; (8005948 <free+0x10>)
 800593c:	0001      	movs	r1, r0
 800593e:	6818      	ldr	r0, [r3, #0]
 8005940:	f000 f80c 	bl	800595c <_free_r>
 8005944:	bd10      	pop	{r4, pc}
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	2000000c 	.word	0x2000000c

0800594c <memset>:
 800594c:	0003      	movs	r3, r0
 800594e:	1882      	adds	r2, r0, r2
 8005950:	4293      	cmp	r3, r2
 8005952:	d100      	bne.n	8005956 <memset+0xa>
 8005954:	4770      	bx	lr
 8005956:	7019      	strb	r1, [r3, #0]
 8005958:	3301      	adds	r3, #1
 800595a:	e7f9      	b.n	8005950 <memset+0x4>

0800595c <_free_r>:
 800595c:	b570      	push	{r4, r5, r6, lr}
 800595e:	0005      	movs	r5, r0
 8005960:	2900      	cmp	r1, #0
 8005962:	d010      	beq.n	8005986 <_free_r+0x2a>
 8005964:	1f0c      	subs	r4, r1, #4
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	da00      	bge.n	800596e <_free_r+0x12>
 800596c:	18e4      	adds	r4, r4, r3
 800596e:	0028      	movs	r0, r5
 8005970:	f000 f91a 	bl	8005ba8 <__malloc_lock>
 8005974:	4a1d      	ldr	r2, [pc, #116]	; (80059ec <_free_r+0x90>)
 8005976:	6813      	ldr	r3, [r2, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d105      	bne.n	8005988 <_free_r+0x2c>
 800597c:	6063      	str	r3, [r4, #4]
 800597e:	6014      	str	r4, [r2, #0]
 8005980:	0028      	movs	r0, r5
 8005982:	f000 f919 	bl	8005bb8 <__malloc_unlock>
 8005986:	bd70      	pop	{r4, r5, r6, pc}
 8005988:	42a3      	cmp	r3, r4
 800598a:	d908      	bls.n	800599e <_free_r+0x42>
 800598c:	6821      	ldr	r1, [r4, #0]
 800598e:	1860      	adds	r0, r4, r1
 8005990:	4283      	cmp	r3, r0
 8005992:	d1f3      	bne.n	800597c <_free_r+0x20>
 8005994:	6818      	ldr	r0, [r3, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	1841      	adds	r1, r0, r1
 800599a:	6021      	str	r1, [r4, #0]
 800599c:	e7ee      	b.n	800597c <_free_r+0x20>
 800599e:	001a      	movs	r2, r3
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <_free_r+0x4e>
 80059a6:	42a3      	cmp	r3, r4
 80059a8:	d9f9      	bls.n	800599e <_free_r+0x42>
 80059aa:	6811      	ldr	r1, [r2, #0]
 80059ac:	1850      	adds	r0, r2, r1
 80059ae:	42a0      	cmp	r0, r4
 80059b0:	d10b      	bne.n	80059ca <_free_r+0x6e>
 80059b2:	6820      	ldr	r0, [r4, #0]
 80059b4:	1809      	adds	r1, r1, r0
 80059b6:	1850      	adds	r0, r2, r1
 80059b8:	6011      	str	r1, [r2, #0]
 80059ba:	4283      	cmp	r3, r0
 80059bc:	d1e0      	bne.n	8005980 <_free_r+0x24>
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	1841      	adds	r1, r0, r1
 80059c4:	6011      	str	r1, [r2, #0]
 80059c6:	6053      	str	r3, [r2, #4]
 80059c8:	e7da      	b.n	8005980 <_free_r+0x24>
 80059ca:	42a0      	cmp	r0, r4
 80059cc:	d902      	bls.n	80059d4 <_free_r+0x78>
 80059ce:	230c      	movs	r3, #12
 80059d0:	602b      	str	r3, [r5, #0]
 80059d2:	e7d5      	b.n	8005980 <_free_r+0x24>
 80059d4:	6821      	ldr	r1, [r4, #0]
 80059d6:	1860      	adds	r0, r4, r1
 80059d8:	4283      	cmp	r3, r0
 80059da:	d103      	bne.n	80059e4 <_free_r+0x88>
 80059dc:	6818      	ldr	r0, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	1841      	adds	r1, r0, r1
 80059e2:	6021      	str	r1, [r4, #0]
 80059e4:	6063      	str	r3, [r4, #4]
 80059e6:	6054      	str	r4, [r2, #4]
 80059e8:	e7ca      	b.n	8005980 <_free_r+0x24>
 80059ea:	46c0      	nop			; (mov r8, r8)
 80059ec:	20000180 	.word	0x20000180

080059f0 <sbrk_aligned>:
 80059f0:	b570      	push	{r4, r5, r6, lr}
 80059f2:	4e0f      	ldr	r6, [pc, #60]	; (8005a30 <sbrk_aligned+0x40>)
 80059f4:	000d      	movs	r5, r1
 80059f6:	6831      	ldr	r1, [r6, #0]
 80059f8:	0004      	movs	r4, r0
 80059fa:	2900      	cmp	r1, #0
 80059fc:	d102      	bne.n	8005a04 <sbrk_aligned+0x14>
 80059fe:	f000 f88f 	bl	8005b20 <_sbrk_r>
 8005a02:	6030      	str	r0, [r6, #0]
 8005a04:	0029      	movs	r1, r5
 8005a06:	0020      	movs	r0, r4
 8005a08:	f000 f88a 	bl	8005b20 <_sbrk_r>
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	d00a      	beq.n	8005a26 <sbrk_aligned+0x36>
 8005a10:	2303      	movs	r3, #3
 8005a12:	1cc5      	adds	r5, r0, #3
 8005a14:	439d      	bics	r5, r3
 8005a16:	42a8      	cmp	r0, r5
 8005a18:	d007      	beq.n	8005a2a <sbrk_aligned+0x3a>
 8005a1a:	1a29      	subs	r1, r5, r0
 8005a1c:	0020      	movs	r0, r4
 8005a1e:	f000 f87f 	bl	8005b20 <_sbrk_r>
 8005a22:	1c43      	adds	r3, r0, #1
 8005a24:	d101      	bne.n	8005a2a <sbrk_aligned+0x3a>
 8005a26:	2501      	movs	r5, #1
 8005a28:	426d      	negs	r5, r5
 8005a2a:	0028      	movs	r0, r5
 8005a2c:	bd70      	pop	{r4, r5, r6, pc}
 8005a2e:	46c0      	nop			; (mov r8, r8)
 8005a30:	20000184 	.word	0x20000184

08005a34 <_malloc_r>:
 8005a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a36:	2203      	movs	r2, #3
 8005a38:	1ccb      	adds	r3, r1, #3
 8005a3a:	4393      	bics	r3, r2
 8005a3c:	3308      	adds	r3, #8
 8005a3e:	0006      	movs	r6, r0
 8005a40:	001f      	movs	r7, r3
 8005a42:	2b0c      	cmp	r3, #12
 8005a44:	d232      	bcs.n	8005aac <_malloc_r+0x78>
 8005a46:	270c      	movs	r7, #12
 8005a48:	42b9      	cmp	r1, r7
 8005a4a:	d831      	bhi.n	8005ab0 <_malloc_r+0x7c>
 8005a4c:	0030      	movs	r0, r6
 8005a4e:	f000 f8ab 	bl	8005ba8 <__malloc_lock>
 8005a52:	4d32      	ldr	r5, [pc, #200]	; (8005b1c <_malloc_r+0xe8>)
 8005a54:	682b      	ldr	r3, [r5, #0]
 8005a56:	001c      	movs	r4, r3
 8005a58:	2c00      	cmp	r4, #0
 8005a5a:	d12e      	bne.n	8005aba <_malloc_r+0x86>
 8005a5c:	0039      	movs	r1, r7
 8005a5e:	0030      	movs	r0, r6
 8005a60:	f7ff ffc6 	bl	80059f0 <sbrk_aligned>
 8005a64:	0004      	movs	r4, r0
 8005a66:	1c43      	adds	r3, r0, #1
 8005a68:	d11e      	bne.n	8005aa8 <_malloc_r+0x74>
 8005a6a:	682c      	ldr	r4, [r5, #0]
 8005a6c:	0025      	movs	r5, r4
 8005a6e:	2d00      	cmp	r5, #0
 8005a70:	d14a      	bne.n	8005b08 <_malloc_r+0xd4>
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	0029      	movs	r1, r5
 8005a76:	18e3      	adds	r3, r4, r3
 8005a78:	0030      	movs	r0, r6
 8005a7a:	9301      	str	r3, [sp, #4]
 8005a7c:	f000 f850 	bl	8005b20 <_sbrk_r>
 8005a80:	9b01      	ldr	r3, [sp, #4]
 8005a82:	4283      	cmp	r3, r0
 8005a84:	d143      	bne.n	8005b0e <_malloc_r+0xda>
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	3703      	adds	r7, #3
 8005a8a:	1aff      	subs	r7, r7, r3
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	439f      	bics	r7, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	2f0c      	cmp	r7, #12
 8005a94:	d200      	bcs.n	8005a98 <_malloc_r+0x64>
 8005a96:	270c      	movs	r7, #12
 8005a98:	0039      	movs	r1, r7
 8005a9a:	0030      	movs	r0, r6
 8005a9c:	f7ff ffa8 	bl	80059f0 <sbrk_aligned>
 8005aa0:	1c43      	adds	r3, r0, #1
 8005aa2:	d034      	beq.n	8005b0e <_malloc_r+0xda>
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	19df      	adds	r7, r3, r7
 8005aa8:	6027      	str	r7, [r4, #0]
 8005aaa:	e013      	b.n	8005ad4 <_malloc_r+0xa0>
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	dacb      	bge.n	8005a48 <_malloc_r+0x14>
 8005ab0:	230c      	movs	r3, #12
 8005ab2:	2500      	movs	r5, #0
 8005ab4:	6033      	str	r3, [r6, #0]
 8005ab6:	0028      	movs	r0, r5
 8005ab8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005aba:	6822      	ldr	r2, [r4, #0]
 8005abc:	1bd1      	subs	r1, r2, r7
 8005abe:	d420      	bmi.n	8005b02 <_malloc_r+0xce>
 8005ac0:	290b      	cmp	r1, #11
 8005ac2:	d917      	bls.n	8005af4 <_malloc_r+0xc0>
 8005ac4:	19e2      	adds	r2, r4, r7
 8005ac6:	6027      	str	r7, [r4, #0]
 8005ac8:	42a3      	cmp	r3, r4
 8005aca:	d111      	bne.n	8005af0 <_malloc_r+0xbc>
 8005acc:	602a      	str	r2, [r5, #0]
 8005ace:	6863      	ldr	r3, [r4, #4]
 8005ad0:	6011      	str	r1, [r2, #0]
 8005ad2:	6053      	str	r3, [r2, #4]
 8005ad4:	0030      	movs	r0, r6
 8005ad6:	0025      	movs	r5, r4
 8005ad8:	f000 f86e 	bl	8005bb8 <__malloc_unlock>
 8005adc:	2207      	movs	r2, #7
 8005ade:	350b      	adds	r5, #11
 8005ae0:	1d23      	adds	r3, r4, #4
 8005ae2:	4395      	bics	r5, r2
 8005ae4:	1aea      	subs	r2, r5, r3
 8005ae6:	429d      	cmp	r5, r3
 8005ae8:	d0e5      	beq.n	8005ab6 <_malloc_r+0x82>
 8005aea:	1b5b      	subs	r3, r3, r5
 8005aec:	50a3      	str	r3, [r4, r2]
 8005aee:	e7e2      	b.n	8005ab6 <_malloc_r+0x82>
 8005af0:	605a      	str	r2, [r3, #4]
 8005af2:	e7ec      	b.n	8005ace <_malloc_r+0x9a>
 8005af4:	6862      	ldr	r2, [r4, #4]
 8005af6:	42a3      	cmp	r3, r4
 8005af8:	d101      	bne.n	8005afe <_malloc_r+0xca>
 8005afa:	602a      	str	r2, [r5, #0]
 8005afc:	e7ea      	b.n	8005ad4 <_malloc_r+0xa0>
 8005afe:	605a      	str	r2, [r3, #4]
 8005b00:	e7e8      	b.n	8005ad4 <_malloc_r+0xa0>
 8005b02:	0023      	movs	r3, r4
 8005b04:	6864      	ldr	r4, [r4, #4]
 8005b06:	e7a7      	b.n	8005a58 <_malloc_r+0x24>
 8005b08:	002c      	movs	r4, r5
 8005b0a:	686d      	ldr	r5, [r5, #4]
 8005b0c:	e7af      	b.n	8005a6e <_malloc_r+0x3a>
 8005b0e:	230c      	movs	r3, #12
 8005b10:	0030      	movs	r0, r6
 8005b12:	6033      	str	r3, [r6, #0]
 8005b14:	f000 f850 	bl	8005bb8 <__malloc_unlock>
 8005b18:	e7cd      	b.n	8005ab6 <_malloc_r+0x82>
 8005b1a:	46c0      	nop			; (mov r8, r8)
 8005b1c:	20000180 	.word	0x20000180

08005b20 <_sbrk_r>:
 8005b20:	2300      	movs	r3, #0
 8005b22:	b570      	push	{r4, r5, r6, lr}
 8005b24:	4d06      	ldr	r5, [pc, #24]	; (8005b40 <_sbrk_r+0x20>)
 8005b26:	0004      	movs	r4, r0
 8005b28:	0008      	movs	r0, r1
 8005b2a:	602b      	str	r3, [r5, #0]
 8005b2c:	f7fd fcb6 	bl	800349c <_sbrk>
 8005b30:	1c43      	adds	r3, r0, #1
 8005b32:	d103      	bne.n	8005b3c <_sbrk_r+0x1c>
 8005b34:	682b      	ldr	r3, [r5, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d000      	beq.n	8005b3c <_sbrk_r+0x1c>
 8005b3a:	6023      	str	r3, [r4, #0]
 8005b3c:	bd70      	pop	{r4, r5, r6, pc}
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	20000188 	.word	0x20000188

08005b44 <siprintf>:
 8005b44:	b40e      	push	{r1, r2, r3}
 8005b46:	b500      	push	{lr}
 8005b48:	490b      	ldr	r1, [pc, #44]	; (8005b78 <siprintf+0x34>)
 8005b4a:	b09c      	sub	sp, #112	; 0x70
 8005b4c:	ab1d      	add	r3, sp, #116	; 0x74
 8005b4e:	9002      	str	r0, [sp, #8]
 8005b50:	9006      	str	r0, [sp, #24]
 8005b52:	9107      	str	r1, [sp, #28]
 8005b54:	9104      	str	r1, [sp, #16]
 8005b56:	4809      	ldr	r0, [pc, #36]	; (8005b7c <siprintf+0x38>)
 8005b58:	4909      	ldr	r1, [pc, #36]	; (8005b80 <siprintf+0x3c>)
 8005b5a:	cb04      	ldmia	r3!, {r2}
 8005b5c:	9105      	str	r1, [sp, #20]
 8005b5e:	6800      	ldr	r0, [r0, #0]
 8005b60:	a902      	add	r1, sp, #8
 8005b62:	9301      	str	r3, [sp, #4]
 8005b64:	f000 f892 	bl	8005c8c <_svfiprintf_r>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	9a02      	ldr	r2, [sp, #8]
 8005b6c:	7013      	strb	r3, [r2, #0]
 8005b6e:	b01c      	add	sp, #112	; 0x70
 8005b70:	bc08      	pop	{r3}
 8005b72:	b003      	add	sp, #12
 8005b74:	4718      	bx	r3
 8005b76:	46c0      	nop			; (mov r8, r8)
 8005b78:	7fffffff 	.word	0x7fffffff
 8005b7c:	2000000c 	.word	0x2000000c
 8005b80:	ffff0208 	.word	0xffff0208

08005b84 <strncmp>:
 8005b84:	b530      	push	{r4, r5, lr}
 8005b86:	0005      	movs	r5, r0
 8005b88:	1e10      	subs	r0, r2, #0
 8005b8a:	d008      	beq.n	8005b9e <strncmp+0x1a>
 8005b8c:	2400      	movs	r4, #0
 8005b8e:	3a01      	subs	r2, #1
 8005b90:	5d2b      	ldrb	r3, [r5, r4]
 8005b92:	5d08      	ldrb	r0, [r1, r4]
 8005b94:	4283      	cmp	r3, r0
 8005b96:	d101      	bne.n	8005b9c <strncmp+0x18>
 8005b98:	4294      	cmp	r4, r2
 8005b9a:	d101      	bne.n	8005ba0 <strncmp+0x1c>
 8005b9c:	1a18      	subs	r0, r3, r0
 8005b9e:	bd30      	pop	{r4, r5, pc}
 8005ba0:	3401      	adds	r4, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f4      	bne.n	8005b90 <strncmp+0xc>
 8005ba6:	e7f9      	b.n	8005b9c <strncmp+0x18>

08005ba8 <__malloc_lock>:
 8005ba8:	b510      	push	{r4, lr}
 8005baa:	4802      	ldr	r0, [pc, #8]	; (8005bb4 <__malloc_lock+0xc>)
 8005bac:	f000 faf0 	bl	8006190 <__retarget_lock_acquire_recursive>
 8005bb0:	bd10      	pop	{r4, pc}
 8005bb2:	46c0      	nop			; (mov r8, r8)
 8005bb4:	2000018c 	.word	0x2000018c

08005bb8 <__malloc_unlock>:
 8005bb8:	b510      	push	{r4, lr}
 8005bba:	4802      	ldr	r0, [pc, #8]	; (8005bc4 <__malloc_unlock+0xc>)
 8005bbc:	f000 fae9 	bl	8006192 <__retarget_lock_release_recursive>
 8005bc0:	bd10      	pop	{r4, pc}
 8005bc2:	46c0      	nop			; (mov r8, r8)
 8005bc4:	2000018c 	.word	0x2000018c

08005bc8 <__ssputs_r>:
 8005bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bca:	688e      	ldr	r6, [r1, #8]
 8005bcc:	b085      	sub	sp, #20
 8005bce:	0007      	movs	r7, r0
 8005bd0:	000c      	movs	r4, r1
 8005bd2:	9203      	str	r2, [sp, #12]
 8005bd4:	9301      	str	r3, [sp, #4]
 8005bd6:	429e      	cmp	r6, r3
 8005bd8:	d83c      	bhi.n	8005c54 <__ssputs_r+0x8c>
 8005bda:	2390      	movs	r3, #144	; 0x90
 8005bdc:	898a      	ldrh	r2, [r1, #12]
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	421a      	tst	r2, r3
 8005be2:	d034      	beq.n	8005c4e <__ssputs_r+0x86>
 8005be4:	6909      	ldr	r1, [r1, #16]
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	6960      	ldr	r0, [r4, #20]
 8005bea:	1a5b      	subs	r3, r3, r1
 8005bec:	9302      	str	r3, [sp, #8]
 8005bee:	2303      	movs	r3, #3
 8005bf0:	4343      	muls	r3, r0
 8005bf2:	0fdd      	lsrs	r5, r3, #31
 8005bf4:	18ed      	adds	r5, r5, r3
 8005bf6:	9b01      	ldr	r3, [sp, #4]
 8005bf8:	9802      	ldr	r0, [sp, #8]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	181b      	adds	r3, r3, r0
 8005bfe:	106d      	asrs	r5, r5, #1
 8005c00:	42ab      	cmp	r3, r5
 8005c02:	d900      	bls.n	8005c06 <__ssputs_r+0x3e>
 8005c04:	001d      	movs	r5, r3
 8005c06:	0553      	lsls	r3, r2, #21
 8005c08:	d532      	bpl.n	8005c70 <__ssputs_r+0xa8>
 8005c0a:	0029      	movs	r1, r5
 8005c0c:	0038      	movs	r0, r7
 8005c0e:	f7ff ff11 	bl	8005a34 <_malloc_r>
 8005c12:	1e06      	subs	r6, r0, #0
 8005c14:	d109      	bne.n	8005c2a <__ssputs_r+0x62>
 8005c16:	230c      	movs	r3, #12
 8005c18:	603b      	str	r3, [r7, #0]
 8005c1a:	2340      	movs	r3, #64	; 0x40
 8005c1c:	2001      	movs	r0, #1
 8005c1e:	89a2      	ldrh	r2, [r4, #12]
 8005c20:	4240      	negs	r0, r0
 8005c22:	4313      	orrs	r3, r2
 8005c24:	81a3      	strh	r3, [r4, #12]
 8005c26:	b005      	add	sp, #20
 8005c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c2a:	9a02      	ldr	r2, [sp, #8]
 8005c2c:	6921      	ldr	r1, [r4, #16]
 8005c2e:	f000 fabc 	bl	80061aa <memcpy>
 8005c32:	89a3      	ldrh	r3, [r4, #12]
 8005c34:	4a14      	ldr	r2, [pc, #80]	; (8005c88 <__ssputs_r+0xc0>)
 8005c36:	401a      	ands	r2, r3
 8005c38:	2380      	movs	r3, #128	; 0x80
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	81a3      	strh	r3, [r4, #12]
 8005c3e:	9b02      	ldr	r3, [sp, #8]
 8005c40:	6126      	str	r6, [r4, #16]
 8005c42:	18f6      	adds	r6, r6, r3
 8005c44:	6026      	str	r6, [r4, #0]
 8005c46:	6165      	str	r5, [r4, #20]
 8005c48:	9e01      	ldr	r6, [sp, #4]
 8005c4a:	1aed      	subs	r5, r5, r3
 8005c4c:	60a5      	str	r5, [r4, #8]
 8005c4e:	9b01      	ldr	r3, [sp, #4]
 8005c50:	429e      	cmp	r6, r3
 8005c52:	d900      	bls.n	8005c56 <__ssputs_r+0x8e>
 8005c54:	9e01      	ldr	r6, [sp, #4]
 8005c56:	0032      	movs	r2, r6
 8005c58:	9903      	ldr	r1, [sp, #12]
 8005c5a:	6820      	ldr	r0, [r4, #0]
 8005c5c:	f000 faae 	bl	80061bc <memmove>
 8005c60:	68a3      	ldr	r3, [r4, #8]
 8005c62:	2000      	movs	r0, #0
 8005c64:	1b9b      	subs	r3, r3, r6
 8005c66:	60a3      	str	r3, [r4, #8]
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	199e      	adds	r6, r3, r6
 8005c6c:	6026      	str	r6, [r4, #0]
 8005c6e:	e7da      	b.n	8005c26 <__ssputs_r+0x5e>
 8005c70:	002a      	movs	r2, r5
 8005c72:	0038      	movs	r0, r7
 8005c74:	f000 fab5 	bl	80061e2 <_realloc_r>
 8005c78:	1e06      	subs	r6, r0, #0
 8005c7a:	d1e0      	bne.n	8005c3e <__ssputs_r+0x76>
 8005c7c:	0038      	movs	r0, r7
 8005c7e:	6921      	ldr	r1, [r4, #16]
 8005c80:	f7ff fe6c 	bl	800595c <_free_r>
 8005c84:	e7c7      	b.n	8005c16 <__ssputs_r+0x4e>
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	fffffb7f 	.word	0xfffffb7f

08005c8c <_svfiprintf_r>:
 8005c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c8e:	b0a1      	sub	sp, #132	; 0x84
 8005c90:	9003      	str	r0, [sp, #12]
 8005c92:	001d      	movs	r5, r3
 8005c94:	898b      	ldrh	r3, [r1, #12]
 8005c96:	000f      	movs	r7, r1
 8005c98:	0016      	movs	r6, r2
 8005c9a:	061b      	lsls	r3, r3, #24
 8005c9c:	d511      	bpl.n	8005cc2 <_svfiprintf_r+0x36>
 8005c9e:	690b      	ldr	r3, [r1, #16]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10e      	bne.n	8005cc2 <_svfiprintf_r+0x36>
 8005ca4:	2140      	movs	r1, #64	; 0x40
 8005ca6:	f7ff fec5 	bl	8005a34 <_malloc_r>
 8005caa:	6038      	str	r0, [r7, #0]
 8005cac:	6138      	str	r0, [r7, #16]
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	d105      	bne.n	8005cbe <_svfiprintf_r+0x32>
 8005cb2:	230c      	movs	r3, #12
 8005cb4:	9a03      	ldr	r2, [sp, #12]
 8005cb6:	3801      	subs	r0, #1
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	b021      	add	sp, #132	; 0x84
 8005cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cbe:	2340      	movs	r3, #64	; 0x40
 8005cc0:	617b      	str	r3, [r7, #20]
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	ac08      	add	r4, sp, #32
 8005cc6:	6163      	str	r3, [r4, #20]
 8005cc8:	3320      	adds	r3, #32
 8005cca:	7663      	strb	r3, [r4, #25]
 8005ccc:	3310      	adds	r3, #16
 8005cce:	76a3      	strb	r3, [r4, #26]
 8005cd0:	9507      	str	r5, [sp, #28]
 8005cd2:	0035      	movs	r5, r6
 8005cd4:	782b      	ldrb	r3, [r5, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <_svfiprintf_r+0x52>
 8005cda:	2b25      	cmp	r3, #37	; 0x25
 8005cdc:	d147      	bne.n	8005d6e <_svfiprintf_r+0xe2>
 8005cde:	1bab      	subs	r3, r5, r6
 8005ce0:	9305      	str	r3, [sp, #20]
 8005ce2:	42b5      	cmp	r5, r6
 8005ce4:	d00c      	beq.n	8005d00 <_svfiprintf_r+0x74>
 8005ce6:	0032      	movs	r2, r6
 8005ce8:	0039      	movs	r1, r7
 8005cea:	9803      	ldr	r0, [sp, #12]
 8005cec:	f7ff ff6c 	bl	8005bc8 <__ssputs_r>
 8005cf0:	1c43      	adds	r3, r0, #1
 8005cf2:	d100      	bne.n	8005cf6 <_svfiprintf_r+0x6a>
 8005cf4:	e0ae      	b.n	8005e54 <_svfiprintf_r+0x1c8>
 8005cf6:	6962      	ldr	r2, [r4, #20]
 8005cf8:	9b05      	ldr	r3, [sp, #20]
 8005cfa:	4694      	mov	ip, r2
 8005cfc:	4463      	add	r3, ip
 8005cfe:	6163      	str	r3, [r4, #20]
 8005d00:	782b      	ldrb	r3, [r5, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d100      	bne.n	8005d08 <_svfiprintf_r+0x7c>
 8005d06:	e0a5      	b.n	8005e54 <_svfiprintf_r+0x1c8>
 8005d08:	2201      	movs	r2, #1
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	4252      	negs	r2, r2
 8005d0e:	6062      	str	r2, [r4, #4]
 8005d10:	a904      	add	r1, sp, #16
 8005d12:	3254      	adds	r2, #84	; 0x54
 8005d14:	1852      	adds	r2, r2, r1
 8005d16:	1c6e      	adds	r6, r5, #1
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	60e3      	str	r3, [r4, #12]
 8005d1c:	60a3      	str	r3, [r4, #8]
 8005d1e:	7013      	strb	r3, [r2, #0]
 8005d20:	65a3      	str	r3, [r4, #88]	; 0x58
 8005d22:	2205      	movs	r2, #5
 8005d24:	7831      	ldrb	r1, [r6, #0]
 8005d26:	4854      	ldr	r0, [pc, #336]	; (8005e78 <_svfiprintf_r+0x1ec>)
 8005d28:	f000 fa34 	bl	8006194 <memchr>
 8005d2c:	1c75      	adds	r5, r6, #1
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d11f      	bne.n	8005d72 <_svfiprintf_r+0xe6>
 8005d32:	6822      	ldr	r2, [r4, #0]
 8005d34:	06d3      	lsls	r3, r2, #27
 8005d36:	d504      	bpl.n	8005d42 <_svfiprintf_r+0xb6>
 8005d38:	2353      	movs	r3, #83	; 0x53
 8005d3a:	a904      	add	r1, sp, #16
 8005d3c:	185b      	adds	r3, r3, r1
 8005d3e:	2120      	movs	r1, #32
 8005d40:	7019      	strb	r1, [r3, #0]
 8005d42:	0713      	lsls	r3, r2, #28
 8005d44:	d504      	bpl.n	8005d50 <_svfiprintf_r+0xc4>
 8005d46:	2353      	movs	r3, #83	; 0x53
 8005d48:	a904      	add	r1, sp, #16
 8005d4a:	185b      	adds	r3, r3, r1
 8005d4c:	212b      	movs	r1, #43	; 0x2b
 8005d4e:	7019      	strb	r1, [r3, #0]
 8005d50:	7833      	ldrb	r3, [r6, #0]
 8005d52:	2b2a      	cmp	r3, #42	; 0x2a
 8005d54:	d016      	beq.n	8005d84 <_svfiprintf_r+0xf8>
 8005d56:	0035      	movs	r5, r6
 8005d58:	2100      	movs	r1, #0
 8005d5a:	200a      	movs	r0, #10
 8005d5c:	68e3      	ldr	r3, [r4, #12]
 8005d5e:	782a      	ldrb	r2, [r5, #0]
 8005d60:	1c6e      	adds	r6, r5, #1
 8005d62:	3a30      	subs	r2, #48	; 0x30
 8005d64:	2a09      	cmp	r2, #9
 8005d66:	d94e      	bls.n	8005e06 <_svfiprintf_r+0x17a>
 8005d68:	2900      	cmp	r1, #0
 8005d6a:	d111      	bne.n	8005d90 <_svfiprintf_r+0x104>
 8005d6c:	e017      	b.n	8005d9e <_svfiprintf_r+0x112>
 8005d6e:	3501      	adds	r5, #1
 8005d70:	e7b0      	b.n	8005cd4 <_svfiprintf_r+0x48>
 8005d72:	4b41      	ldr	r3, [pc, #260]	; (8005e78 <_svfiprintf_r+0x1ec>)
 8005d74:	6822      	ldr	r2, [r4, #0]
 8005d76:	1ac0      	subs	r0, r0, r3
 8005d78:	2301      	movs	r3, #1
 8005d7a:	4083      	lsls	r3, r0
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	002e      	movs	r6, r5
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	e7ce      	b.n	8005d22 <_svfiprintf_r+0x96>
 8005d84:	9b07      	ldr	r3, [sp, #28]
 8005d86:	1d19      	adds	r1, r3, #4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	9107      	str	r1, [sp, #28]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	db01      	blt.n	8005d94 <_svfiprintf_r+0x108>
 8005d90:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d92:	e004      	b.n	8005d9e <_svfiprintf_r+0x112>
 8005d94:	425b      	negs	r3, r3
 8005d96:	60e3      	str	r3, [r4, #12]
 8005d98:	2302      	movs	r3, #2
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	782b      	ldrb	r3, [r5, #0]
 8005da0:	2b2e      	cmp	r3, #46	; 0x2e
 8005da2:	d10a      	bne.n	8005dba <_svfiprintf_r+0x12e>
 8005da4:	786b      	ldrb	r3, [r5, #1]
 8005da6:	2b2a      	cmp	r3, #42	; 0x2a
 8005da8:	d135      	bne.n	8005e16 <_svfiprintf_r+0x18a>
 8005daa:	9b07      	ldr	r3, [sp, #28]
 8005dac:	3502      	adds	r5, #2
 8005dae:	1d1a      	adds	r2, r3, #4
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	9207      	str	r2, [sp, #28]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	db2b      	blt.n	8005e10 <_svfiprintf_r+0x184>
 8005db8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dba:	4e30      	ldr	r6, [pc, #192]	; (8005e7c <_svfiprintf_r+0x1f0>)
 8005dbc:	2203      	movs	r2, #3
 8005dbe:	0030      	movs	r0, r6
 8005dc0:	7829      	ldrb	r1, [r5, #0]
 8005dc2:	f000 f9e7 	bl	8006194 <memchr>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d006      	beq.n	8005dd8 <_svfiprintf_r+0x14c>
 8005dca:	2340      	movs	r3, #64	; 0x40
 8005dcc:	1b80      	subs	r0, r0, r6
 8005dce:	4083      	lsls	r3, r0
 8005dd0:	6822      	ldr	r2, [r4, #0]
 8005dd2:	3501      	adds	r5, #1
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	6023      	str	r3, [r4, #0]
 8005dd8:	7829      	ldrb	r1, [r5, #0]
 8005dda:	2206      	movs	r2, #6
 8005ddc:	4828      	ldr	r0, [pc, #160]	; (8005e80 <_svfiprintf_r+0x1f4>)
 8005dde:	1c6e      	adds	r6, r5, #1
 8005de0:	7621      	strb	r1, [r4, #24]
 8005de2:	f000 f9d7 	bl	8006194 <memchr>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d03c      	beq.n	8005e64 <_svfiprintf_r+0x1d8>
 8005dea:	4b26      	ldr	r3, [pc, #152]	; (8005e84 <_svfiprintf_r+0x1f8>)
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d125      	bne.n	8005e3c <_svfiprintf_r+0x1b0>
 8005df0:	2207      	movs	r2, #7
 8005df2:	9b07      	ldr	r3, [sp, #28]
 8005df4:	3307      	adds	r3, #7
 8005df6:	4393      	bics	r3, r2
 8005df8:	3308      	adds	r3, #8
 8005dfa:	9307      	str	r3, [sp, #28]
 8005dfc:	6963      	ldr	r3, [r4, #20]
 8005dfe:	9a04      	ldr	r2, [sp, #16]
 8005e00:	189b      	adds	r3, r3, r2
 8005e02:	6163      	str	r3, [r4, #20]
 8005e04:	e765      	b.n	8005cd2 <_svfiprintf_r+0x46>
 8005e06:	4343      	muls	r3, r0
 8005e08:	0035      	movs	r5, r6
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	189b      	adds	r3, r3, r2
 8005e0e:	e7a6      	b.n	8005d5e <_svfiprintf_r+0xd2>
 8005e10:	2301      	movs	r3, #1
 8005e12:	425b      	negs	r3, r3
 8005e14:	e7d0      	b.n	8005db8 <_svfiprintf_r+0x12c>
 8005e16:	2300      	movs	r3, #0
 8005e18:	200a      	movs	r0, #10
 8005e1a:	001a      	movs	r2, r3
 8005e1c:	3501      	adds	r5, #1
 8005e1e:	6063      	str	r3, [r4, #4]
 8005e20:	7829      	ldrb	r1, [r5, #0]
 8005e22:	1c6e      	adds	r6, r5, #1
 8005e24:	3930      	subs	r1, #48	; 0x30
 8005e26:	2909      	cmp	r1, #9
 8005e28:	d903      	bls.n	8005e32 <_svfiprintf_r+0x1a6>
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0c5      	beq.n	8005dba <_svfiprintf_r+0x12e>
 8005e2e:	9209      	str	r2, [sp, #36]	; 0x24
 8005e30:	e7c3      	b.n	8005dba <_svfiprintf_r+0x12e>
 8005e32:	4342      	muls	r2, r0
 8005e34:	0035      	movs	r5, r6
 8005e36:	2301      	movs	r3, #1
 8005e38:	1852      	adds	r2, r2, r1
 8005e3a:	e7f1      	b.n	8005e20 <_svfiprintf_r+0x194>
 8005e3c:	ab07      	add	r3, sp, #28
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	003a      	movs	r2, r7
 8005e42:	0021      	movs	r1, r4
 8005e44:	4b10      	ldr	r3, [pc, #64]	; (8005e88 <_svfiprintf_r+0x1fc>)
 8005e46:	9803      	ldr	r0, [sp, #12]
 8005e48:	e000      	b.n	8005e4c <_svfiprintf_r+0x1c0>
 8005e4a:	bf00      	nop
 8005e4c:	9004      	str	r0, [sp, #16]
 8005e4e:	9b04      	ldr	r3, [sp, #16]
 8005e50:	3301      	adds	r3, #1
 8005e52:	d1d3      	bne.n	8005dfc <_svfiprintf_r+0x170>
 8005e54:	89bb      	ldrh	r3, [r7, #12]
 8005e56:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005e58:	065b      	lsls	r3, r3, #25
 8005e5a:	d400      	bmi.n	8005e5e <_svfiprintf_r+0x1d2>
 8005e5c:	e72d      	b.n	8005cba <_svfiprintf_r+0x2e>
 8005e5e:	2001      	movs	r0, #1
 8005e60:	4240      	negs	r0, r0
 8005e62:	e72a      	b.n	8005cba <_svfiprintf_r+0x2e>
 8005e64:	ab07      	add	r3, sp, #28
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	003a      	movs	r2, r7
 8005e6a:	0021      	movs	r1, r4
 8005e6c:	4b06      	ldr	r3, [pc, #24]	; (8005e88 <_svfiprintf_r+0x1fc>)
 8005e6e:	9803      	ldr	r0, [sp, #12]
 8005e70:	f000 f87c 	bl	8005f6c <_printf_i>
 8005e74:	e7ea      	b.n	8005e4c <_svfiprintf_r+0x1c0>
 8005e76:	46c0      	nop			; (mov r8, r8)
 8005e78:	08006624 	.word	0x08006624
 8005e7c:	0800662a 	.word	0x0800662a
 8005e80:	0800662e 	.word	0x0800662e
 8005e84:	00000000 	.word	0x00000000
 8005e88:	08005bc9 	.word	0x08005bc9

08005e8c <_printf_common>:
 8005e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e8e:	0015      	movs	r5, r2
 8005e90:	9301      	str	r3, [sp, #4]
 8005e92:	688a      	ldr	r2, [r1, #8]
 8005e94:	690b      	ldr	r3, [r1, #16]
 8005e96:	000c      	movs	r4, r1
 8005e98:	9000      	str	r0, [sp, #0]
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	da00      	bge.n	8005ea0 <_printf_common+0x14>
 8005e9e:	0013      	movs	r3, r2
 8005ea0:	0022      	movs	r2, r4
 8005ea2:	602b      	str	r3, [r5, #0]
 8005ea4:	3243      	adds	r2, #67	; 0x43
 8005ea6:	7812      	ldrb	r2, [r2, #0]
 8005ea8:	2a00      	cmp	r2, #0
 8005eaa:	d001      	beq.n	8005eb0 <_printf_common+0x24>
 8005eac:	3301      	adds	r3, #1
 8005eae:	602b      	str	r3, [r5, #0]
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	069b      	lsls	r3, r3, #26
 8005eb4:	d502      	bpl.n	8005ebc <_printf_common+0x30>
 8005eb6:	682b      	ldr	r3, [r5, #0]
 8005eb8:	3302      	adds	r3, #2
 8005eba:	602b      	str	r3, [r5, #0]
 8005ebc:	6822      	ldr	r2, [r4, #0]
 8005ebe:	2306      	movs	r3, #6
 8005ec0:	0017      	movs	r7, r2
 8005ec2:	401f      	ands	r7, r3
 8005ec4:	421a      	tst	r2, r3
 8005ec6:	d027      	beq.n	8005f18 <_printf_common+0x8c>
 8005ec8:	0023      	movs	r3, r4
 8005eca:	3343      	adds	r3, #67	; 0x43
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	1e5a      	subs	r2, r3, #1
 8005ed0:	4193      	sbcs	r3, r2
 8005ed2:	6822      	ldr	r2, [r4, #0]
 8005ed4:	0692      	lsls	r2, r2, #26
 8005ed6:	d430      	bmi.n	8005f3a <_printf_common+0xae>
 8005ed8:	0022      	movs	r2, r4
 8005eda:	9901      	ldr	r1, [sp, #4]
 8005edc:	9800      	ldr	r0, [sp, #0]
 8005ede:	9e08      	ldr	r6, [sp, #32]
 8005ee0:	3243      	adds	r2, #67	; 0x43
 8005ee2:	47b0      	blx	r6
 8005ee4:	1c43      	adds	r3, r0, #1
 8005ee6:	d025      	beq.n	8005f34 <_printf_common+0xa8>
 8005ee8:	2306      	movs	r3, #6
 8005eea:	6820      	ldr	r0, [r4, #0]
 8005eec:	682a      	ldr	r2, [r5, #0]
 8005eee:	68e1      	ldr	r1, [r4, #12]
 8005ef0:	2500      	movs	r5, #0
 8005ef2:	4003      	ands	r3, r0
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	d103      	bne.n	8005f00 <_printf_common+0x74>
 8005ef8:	1a8d      	subs	r5, r1, r2
 8005efa:	43eb      	mvns	r3, r5
 8005efc:	17db      	asrs	r3, r3, #31
 8005efe:	401d      	ands	r5, r3
 8005f00:	68a3      	ldr	r3, [r4, #8]
 8005f02:	6922      	ldr	r2, [r4, #16]
 8005f04:	4293      	cmp	r3, r2
 8005f06:	dd01      	ble.n	8005f0c <_printf_common+0x80>
 8005f08:	1a9b      	subs	r3, r3, r2
 8005f0a:	18ed      	adds	r5, r5, r3
 8005f0c:	2700      	movs	r7, #0
 8005f0e:	42bd      	cmp	r5, r7
 8005f10:	d120      	bne.n	8005f54 <_printf_common+0xc8>
 8005f12:	2000      	movs	r0, #0
 8005f14:	e010      	b.n	8005f38 <_printf_common+0xac>
 8005f16:	3701      	adds	r7, #1
 8005f18:	68e3      	ldr	r3, [r4, #12]
 8005f1a:	682a      	ldr	r2, [r5, #0]
 8005f1c:	1a9b      	subs	r3, r3, r2
 8005f1e:	42bb      	cmp	r3, r7
 8005f20:	ddd2      	ble.n	8005ec8 <_printf_common+0x3c>
 8005f22:	0022      	movs	r2, r4
 8005f24:	2301      	movs	r3, #1
 8005f26:	9901      	ldr	r1, [sp, #4]
 8005f28:	9800      	ldr	r0, [sp, #0]
 8005f2a:	9e08      	ldr	r6, [sp, #32]
 8005f2c:	3219      	adds	r2, #25
 8005f2e:	47b0      	blx	r6
 8005f30:	1c43      	adds	r3, r0, #1
 8005f32:	d1f0      	bne.n	8005f16 <_printf_common+0x8a>
 8005f34:	2001      	movs	r0, #1
 8005f36:	4240      	negs	r0, r0
 8005f38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f3a:	2030      	movs	r0, #48	; 0x30
 8005f3c:	18e1      	adds	r1, r4, r3
 8005f3e:	3143      	adds	r1, #67	; 0x43
 8005f40:	7008      	strb	r0, [r1, #0]
 8005f42:	0021      	movs	r1, r4
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	3145      	adds	r1, #69	; 0x45
 8005f48:	7809      	ldrb	r1, [r1, #0]
 8005f4a:	18a2      	adds	r2, r4, r2
 8005f4c:	3243      	adds	r2, #67	; 0x43
 8005f4e:	3302      	adds	r3, #2
 8005f50:	7011      	strb	r1, [r2, #0]
 8005f52:	e7c1      	b.n	8005ed8 <_printf_common+0x4c>
 8005f54:	0022      	movs	r2, r4
 8005f56:	2301      	movs	r3, #1
 8005f58:	9901      	ldr	r1, [sp, #4]
 8005f5a:	9800      	ldr	r0, [sp, #0]
 8005f5c:	9e08      	ldr	r6, [sp, #32]
 8005f5e:	321a      	adds	r2, #26
 8005f60:	47b0      	blx	r6
 8005f62:	1c43      	adds	r3, r0, #1
 8005f64:	d0e6      	beq.n	8005f34 <_printf_common+0xa8>
 8005f66:	3701      	adds	r7, #1
 8005f68:	e7d1      	b.n	8005f0e <_printf_common+0x82>
	...

08005f6c <_printf_i>:
 8005f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f6e:	b08b      	sub	sp, #44	; 0x2c
 8005f70:	9206      	str	r2, [sp, #24]
 8005f72:	000a      	movs	r2, r1
 8005f74:	3243      	adds	r2, #67	; 0x43
 8005f76:	9307      	str	r3, [sp, #28]
 8005f78:	9005      	str	r0, [sp, #20]
 8005f7a:	9204      	str	r2, [sp, #16]
 8005f7c:	7e0a      	ldrb	r2, [r1, #24]
 8005f7e:	000c      	movs	r4, r1
 8005f80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f82:	2a78      	cmp	r2, #120	; 0x78
 8005f84:	d807      	bhi.n	8005f96 <_printf_i+0x2a>
 8005f86:	2a62      	cmp	r2, #98	; 0x62
 8005f88:	d809      	bhi.n	8005f9e <_printf_i+0x32>
 8005f8a:	2a00      	cmp	r2, #0
 8005f8c:	d100      	bne.n	8005f90 <_printf_i+0x24>
 8005f8e:	e0c1      	b.n	8006114 <_printf_i+0x1a8>
 8005f90:	2a58      	cmp	r2, #88	; 0x58
 8005f92:	d100      	bne.n	8005f96 <_printf_i+0x2a>
 8005f94:	e08c      	b.n	80060b0 <_printf_i+0x144>
 8005f96:	0026      	movs	r6, r4
 8005f98:	3642      	adds	r6, #66	; 0x42
 8005f9a:	7032      	strb	r2, [r6, #0]
 8005f9c:	e022      	b.n	8005fe4 <_printf_i+0x78>
 8005f9e:	0010      	movs	r0, r2
 8005fa0:	3863      	subs	r0, #99	; 0x63
 8005fa2:	2815      	cmp	r0, #21
 8005fa4:	d8f7      	bhi.n	8005f96 <_printf_i+0x2a>
 8005fa6:	f7fa f8ab 	bl	8000100 <__gnu_thumb1_case_shi>
 8005faa:	0016      	.short	0x0016
 8005fac:	fff6001f 	.word	0xfff6001f
 8005fb0:	fff6fff6 	.word	0xfff6fff6
 8005fb4:	001ffff6 	.word	0x001ffff6
 8005fb8:	fff6fff6 	.word	0xfff6fff6
 8005fbc:	fff6fff6 	.word	0xfff6fff6
 8005fc0:	003600a8 	.word	0x003600a8
 8005fc4:	fff6009a 	.word	0xfff6009a
 8005fc8:	00b9fff6 	.word	0x00b9fff6
 8005fcc:	0036fff6 	.word	0x0036fff6
 8005fd0:	fff6fff6 	.word	0xfff6fff6
 8005fd4:	009e      	.short	0x009e
 8005fd6:	0026      	movs	r6, r4
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	3642      	adds	r6, #66	; 0x42
 8005fdc:	1d11      	adds	r1, r2, #4
 8005fde:	6019      	str	r1, [r3, #0]
 8005fe0:	6813      	ldr	r3, [r2, #0]
 8005fe2:	7033      	strb	r3, [r6, #0]
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e0a7      	b.n	8006138 <_printf_i+0x1cc>
 8005fe8:	6808      	ldr	r0, [r1, #0]
 8005fea:	6819      	ldr	r1, [r3, #0]
 8005fec:	1d0a      	adds	r2, r1, #4
 8005fee:	0605      	lsls	r5, r0, #24
 8005ff0:	d50b      	bpl.n	800600a <_printf_i+0x9e>
 8005ff2:	680d      	ldr	r5, [r1, #0]
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	2d00      	cmp	r5, #0
 8005ff8:	da03      	bge.n	8006002 <_printf_i+0x96>
 8005ffa:	232d      	movs	r3, #45	; 0x2d
 8005ffc:	9a04      	ldr	r2, [sp, #16]
 8005ffe:	426d      	negs	r5, r5
 8006000:	7013      	strb	r3, [r2, #0]
 8006002:	4b61      	ldr	r3, [pc, #388]	; (8006188 <_printf_i+0x21c>)
 8006004:	270a      	movs	r7, #10
 8006006:	9303      	str	r3, [sp, #12]
 8006008:	e01b      	b.n	8006042 <_printf_i+0xd6>
 800600a:	680d      	ldr	r5, [r1, #0]
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	0641      	lsls	r1, r0, #25
 8006010:	d5f1      	bpl.n	8005ff6 <_printf_i+0x8a>
 8006012:	b22d      	sxth	r5, r5
 8006014:	e7ef      	b.n	8005ff6 <_printf_i+0x8a>
 8006016:	680d      	ldr	r5, [r1, #0]
 8006018:	6819      	ldr	r1, [r3, #0]
 800601a:	1d08      	adds	r0, r1, #4
 800601c:	6018      	str	r0, [r3, #0]
 800601e:	062e      	lsls	r6, r5, #24
 8006020:	d501      	bpl.n	8006026 <_printf_i+0xba>
 8006022:	680d      	ldr	r5, [r1, #0]
 8006024:	e003      	b.n	800602e <_printf_i+0xc2>
 8006026:	066d      	lsls	r5, r5, #25
 8006028:	d5fb      	bpl.n	8006022 <_printf_i+0xb6>
 800602a:	680d      	ldr	r5, [r1, #0]
 800602c:	b2ad      	uxth	r5, r5
 800602e:	4b56      	ldr	r3, [pc, #344]	; (8006188 <_printf_i+0x21c>)
 8006030:	2708      	movs	r7, #8
 8006032:	9303      	str	r3, [sp, #12]
 8006034:	2a6f      	cmp	r2, #111	; 0x6f
 8006036:	d000      	beq.n	800603a <_printf_i+0xce>
 8006038:	3702      	adds	r7, #2
 800603a:	0023      	movs	r3, r4
 800603c:	2200      	movs	r2, #0
 800603e:	3343      	adds	r3, #67	; 0x43
 8006040:	701a      	strb	r2, [r3, #0]
 8006042:	6863      	ldr	r3, [r4, #4]
 8006044:	60a3      	str	r3, [r4, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	db03      	blt.n	8006052 <_printf_i+0xe6>
 800604a:	2204      	movs	r2, #4
 800604c:	6821      	ldr	r1, [r4, #0]
 800604e:	4391      	bics	r1, r2
 8006050:	6021      	str	r1, [r4, #0]
 8006052:	2d00      	cmp	r5, #0
 8006054:	d102      	bne.n	800605c <_printf_i+0xf0>
 8006056:	9e04      	ldr	r6, [sp, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00c      	beq.n	8006076 <_printf_i+0x10a>
 800605c:	9e04      	ldr	r6, [sp, #16]
 800605e:	0028      	movs	r0, r5
 8006060:	0039      	movs	r1, r7
 8006062:	f7fa f8dd 	bl	8000220 <__aeabi_uidivmod>
 8006066:	9b03      	ldr	r3, [sp, #12]
 8006068:	3e01      	subs	r6, #1
 800606a:	5c5b      	ldrb	r3, [r3, r1]
 800606c:	7033      	strb	r3, [r6, #0]
 800606e:	002b      	movs	r3, r5
 8006070:	0005      	movs	r5, r0
 8006072:	429f      	cmp	r7, r3
 8006074:	d9f3      	bls.n	800605e <_printf_i+0xf2>
 8006076:	2f08      	cmp	r7, #8
 8006078:	d109      	bne.n	800608e <_printf_i+0x122>
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	07db      	lsls	r3, r3, #31
 800607e:	d506      	bpl.n	800608e <_printf_i+0x122>
 8006080:	6863      	ldr	r3, [r4, #4]
 8006082:	6922      	ldr	r2, [r4, #16]
 8006084:	4293      	cmp	r3, r2
 8006086:	dc02      	bgt.n	800608e <_printf_i+0x122>
 8006088:	2330      	movs	r3, #48	; 0x30
 800608a:	3e01      	subs	r6, #1
 800608c:	7033      	strb	r3, [r6, #0]
 800608e:	9b04      	ldr	r3, [sp, #16]
 8006090:	1b9b      	subs	r3, r3, r6
 8006092:	6123      	str	r3, [r4, #16]
 8006094:	9b07      	ldr	r3, [sp, #28]
 8006096:	0021      	movs	r1, r4
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	9805      	ldr	r0, [sp, #20]
 800609c:	9b06      	ldr	r3, [sp, #24]
 800609e:	aa09      	add	r2, sp, #36	; 0x24
 80060a0:	f7ff fef4 	bl	8005e8c <_printf_common>
 80060a4:	1c43      	adds	r3, r0, #1
 80060a6:	d14c      	bne.n	8006142 <_printf_i+0x1d6>
 80060a8:	2001      	movs	r0, #1
 80060aa:	4240      	negs	r0, r0
 80060ac:	b00b      	add	sp, #44	; 0x2c
 80060ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060b0:	3145      	adds	r1, #69	; 0x45
 80060b2:	700a      	strb	r2, [r1, #0]
 80060b4:	4a34      	ldr	r2, [pc, #208]	; (8006188 <_printf_i+0x21c>)
 80060b6:	9203      	str	r2, [sp, #12]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	6821      	ldr	r1, [r4, #0]
 80060bc:	ca20      	ldmia	r2!, {r5}
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	0608      	lsls	r0, r1, #24
 80060c2:	d516      	bpl.n	80060f2 <_printf_i+0x186>
 80060c4:	07cb      	lsls	r3, r1, #31
 80060c6:	d502      	bpl.n	80060ce <_printf_i+0x162>
 80060c8:	2320      	movs	r3, #32
 80060ca:	4319      	orrs	r1, r3
 80060cc:	6021      	str	r1, [r4, #0]
 80060ce:	2710      	movs	r7, #16
 80060d0:	2d00      	cmp	r5, #0
 80060d2:	d1b2      	bne.n	800603a <_printf_i+0xce>
 80060d4:	2320      	movs	r3, #32
 80060d6:	6822      	ldr	r2, [r4, #0]
 80060d8:	439a      	bics	r2, r3
 80060da:	6022      	str	r2, [r4, #0]
 80060dc:	e7ad      	b.n	800603a <_printf_i+0xce>
 80060de:	2220      	movs	r2, #32
 80060e0:	6809      	ldr	r1, [r1, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	6022      	str	r2, [r4, #0]
 80060e6:	0022      	movs	r2, r4
 80060e8:	2178      	movs	r1, #120	; 0x78
 80060ea:	3245      	adds	r2, #69	; 0x45
 80060ec:	7011      	strb	r1, [r2, #0]
 80060ee:	4a27      	ldr	r2, [pc, #156]	; (800618c <_printf_i+0x220>)
 80060f0:	e7e1      	b.n	80060b6 <_printf_i+0x14a>
 80060f2:	0648      	lsls	r0, r1, #25
 80060f4:	d5e6      	bpl.n	80060c4 <_printf_i+0x158>
 80060f6:	b2ad      	uxth	r5, r5
 80060f8:	e7e4      	b.n	80060c4 <_printf_i+0x158>
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	680d      	ldr	r5, [r1, #0]
 80060fe:	1d10      	adds	r0, r2, #4
 8006100:	6949      	ldr	r1, [r1, #20]
 8006102:	6018      	str	r0, [r3, #0]
 8006104:	6813      	ldr	r3, [r2, #0]
 8006106:	062e      	lsls	r6, r5, #24
 8006108:	d501      	bpl.n	800610e <_printf_i+0x1a2>
 800610a:	6019      	str	r1, [r3, #0]
 800610c:	e002      	b.n	8006114 <_printf_i+0x1a8>
 800610e:	066d      	lsls	r5, r5, #25
 8006110:	d5fb      	bpl.n	800610a <_printf_i+0x19e>
 8006112:	8019      	strh	r1, [r3, #0]
 8006114:	2300      	movs	r3, #0
 8006116:	9e04      	ldr	r6, [sp, #16]
 8006118:	6123      	str	r3, [r4, #16]
 800611a:	e7bb      	b.n	8006094 <_printf_i+0x128>
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	1d11      	adds	r1, r2, #4
 8006120:	6019      	str	r1, [r3, #0]
 8006122:	6816      	ldr	r6, [r2, #0]
 8006124:	2100      	movs	r1, #0
 8006126:	0030      	movs	r0, r6
 8006128:	6862      	ldr	r2, [r4, #4]
 800612a:	f000 f833 	bl	8006194 <memchr>
 800612e:	2800      	cmp	r0, #0
 8006130:	d001      	beq.n	8006136 <_printf_i+0x1ca>
 8006132:	1b80      	subs	r0, r0, r6
 8006134:	6060      	str	r0, [r4, #4]
 8006136:	6863      	ldr	r3, [r4, #4]
 8006138:	6123      	str	r3, [r4, #16]
 800613a:	2300      	movs	r3, #0
 800613c:	9a04      	ldr	r2, [sp, #16]
 800613e:	7013      	strb	r3, [r2, #0]
 8006140:	e7a8      	b.n	8006094 <_printf_i+0x128>
 8006142:	6923      	ldr	r3, [r4, #16]
 8006144:	0032      	movs	r2, r6
 8006146:	9906      	ldr	r1, [sp, #24]
 8006148:	9805      	ldr	r0, [sp, #20]
 800614a:	9d07      	ldr	r5, [sp, #28]
 800614c:	47a8      	blx	r5
 800614e:	1c43      	adds	r3, r0, #1
 8006150:	d0aa      	beq.n	80060a8 <_printf_i+0x13c>
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	079b      	lsls	r3, r3, #30
 8006156:	d415      	bmi.n	8006184 <_printf_i+0x218>
 8006158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800615a:	68e0      	ldr	r0, [r4, #12]
 800615c:	4298      	cmp	r0, r3
 800615e:	daa5      	bge.n	80060ac <_printf_i+0x140>
 8006160:	0018      	movs	r0, r3
 8006162:	e7a3      	b.n	80060ac <_printf_i+0x140>
 8006164:	0022      	movs	r2, r4
 8006166:	2301      	movs	r3, #1
 8006168:	9906      	ldr	r1, [sp, #24]
 800616a:	9805      	ldr	r0, [sp, #20]
 800616c:	9e07      	ldr	r6, [sp, #28]
 800616e:	3219      	adds	r2, #25
 8006170:	47b0      	blx	r6
 8006172:	1c43      	adds	r3, r0, #1
 8006174:	d098      	beq.n	80060a8 <_printf_i+0x13c>
 8006176:	3501      	adds	r5, #1
 8006178:	68e3      	ldr	r3, [r4, #12]
 800617a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800617c:	1a9b      	subs	r3, r3, r2
 800617e:	42ab      	cmp	r3, r5
 8006180:	dcf0      	bgt.n	8006164 <_printf_i+0x1f8>
 8006182:	e7e9      	b.n	8006158 <_printf_i+0x1ec>
 8006184:	2500      	movs	r5, #0
 8006186:	e7f7      	b.n	8006178 <_printf_i+0x20c>
 8006188:	08006635 	.word	0x08006635
 800618c:	08006646 	.word	0x08006646

08006190 <__retarget_lock_acquire_recursive>:
 8006190:	4770      	bx	lr

08006192 <__retarget_lock_release_recursive>:
 8006192:	4770      	bx	lr

08006194 <memchr>:
 8006194:	b2c9      	uxtb	r1, r1
 8006196:	1882      	adds	r2, r0, r2
 8006198:	4290      	cmp	r0, r2
 800619a:	d101      	bne.n	80061a0 <memchr+0xc>
 800619c:	2000      	movs	r0, #0
 800619e:	4770      	bx	lr
 80061a0:	7803      	ldrb	r3, [r0, #0]
 80061a2:	428b      	cmp	r3, r1
 80061a4:	d0fb      	beq.n	800619e <memchr+0xa>
 80061a6:	3001      	adds	r0, #1
 80061a8:	e7f6      	b.n	8006198 <memchr+0x4>

080061aa <memcpy>:
 80061aa:	2300      	movs	r3, #0
 80061ac:	b510      	push	{r4, lr}
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d100      	bne.n	80061b4 <memcpy+0xa>
 80061b2:	bd10      	pop	{r4, pc}
 80061b4:	5ccc      	ldrb	r4, [r1, r3]
 80061b6:	54c4      	strb	r4, [r0, r3]
 80061b8:	3301      	adds	r3, #1
 80061ba:	e7f8      	b.n	80061ae <memcpy+0x4>

080061bc <memmove>:
 80061bc:	b510      	push	{r4, lr}
 80061be:	4288      	cmp	r0, r1
 80061c0:	d902      	bls.n	80061c8 <memmove+0xc>
 80061c2:	188b      	adds	r3, r1, r2
 80061c4:	4298      	cmp	r0, r3
 80061c6:	d303      	bcc.n	80061d0 <memmove+0x14>
 80061c8:	2300      	movs	r3, #0
 80061ca:	e007      	b.n	80061dc <memmove+0x20>
 80061cc:	5c8b      	ldrb	r3, [r1, r2]
 80061ce:	5483      	strb	r3, [r0, r2]
 80061d0:	3a01      	subs	r2, #1
 80061d2:	d2fb      	bcs.n	80061cc <memmove+0x10>
 80061d4:	bd10      	pop	{r4, pc}
 80061d6:	5ccc      	ldrb	r4, [r1, r3]
 80061d8:	54c4      	strb	r4, [r0, r3]
 80061da:	3301      	adds	r3, #1
 80061dc:	429a      	cmp	r2, r3
 80061de:	d1fa      	bne.n	80061d6 <memmove+0x1a>
 80061e0:	e7f8      	b.n	80061d4 <memmove+0x18>

080061e2 <_realloc_r>:
 80061e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061e4:	0007      	movs	r7, r0
 80061e6:	000e      	movs	r6, r1
 80061e8:	0014      	movs	r4, r2
 80061ea:	2900      	cmp	r1, #0
 80061ec:	d105      	bne.n	80061fa <_realloc_r+0x18>
 80061ee:	0011      	movs	r1, r2
 80061f0:	f7ff fc20 	bl	8005a34 <_malloc_r>
 80061f4:	0005      	movs	r5, r0
 80061f6:	0028      	movs	r0, r5
 80061f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061fa:	2a00      	cmp	r2, #0
 80061fc:	d103      	bne.n	8006206 <_realloc_r+0x24>
 80061fe:	f7ff fbad 	bl	800595c <_free_r>
 8006202:	0025      	movs	r5, r4
 8006204:	e7f7      	b.n	80061f6 <_realloc_r+0x14>
 8006206:	f000 f81b 	bl	8006240 <_malloc_usable_size_r>
 800620a:	9001      	str	r0, [sp, #4]
 800620c:	4284      	cmp	r4, r0
 800620e:	d803      	bhi.n	8006218 <_realloc_r+0x36>
 8006210:	0035      	movs	r5, r6
 8006212:	0843      	lsrs	r3, r0, #1
 8006214:	42a3      	cmp	r3, r4
 8006216:	d3ee      	bcc.n	80061f6 <_realloc_r+0x14>
 8006218:	0021      	movs	r1, r4
 800621a:	0038      	movs	r0, r7
 800621c:	f7ff fc0a 	bl	8005a34 <_malloc_r>
 8006220:	1e05      	subs	r5, r0, #0
 8006222:	d0e8      	beq.n	80061f6 <_realloc_r+0x14>
 8006224:	9b01      	ldr	r3, [sp, #4]
 8006226:	0022      	movs	r2, r4
 8006228:	429c      	cmp	r4, r3
 800622a:	d900      	bls.n	800622e <_realloc_r+0x4c>
 800622c:	001a      	movs	r2, r3
 800622e:	0031      	movs	r1, r6
 8006230:	0028      	movs	r0, r5
 8006232:	f7ff ffba 	bl	80061aa <memcpy>
 8006236:	0031      	movs	r1, r6
 8006238:	0038      	movs	r0, r7
 800623a:	f7ff fb8f 	bl	800595c <_free_r>
 800623e:	e7da      	b.n	80061f6 <_realloc_r+0x14>

08006240 <_malloc_usable_size_r>:
 8006240:	1f0b      	subs	r3, r1, #4
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	1f18      	subs	r0, r3, #4
 8006246:	2b00      	cmp	r3, #0
 8006248:	da01      	bge.n	800624e <_malloc_usable_size_r+0xe>
 800624a:	580b      	ldr	r3, [r1, r0]
 800624c:	18c0      	adds	r0, r0, r3
 800624e:	4770      	bx	lr

08006250 <sqrtf>:
 8006250:	b570      	push	{r4, r5, r6, lr}
 8006252:	1c05      	adds	r5, r0, #0
 8006254:	f000 f818 	bl	8006288 <__ieee754_sqrtf>
 8006258:	1c29      	adds	r1, r5, #0
 800625a:	1c04      	adds	r4, r0, #0
 800625c:	1c28      	adds	r0, r5, #0
 800625e:	f7fa ff5b 	bl	8001118 <__aeabi_fcmpun>
 8006262:	2800      	cmp	r0, #0
 8006264:	d10e      	bne.n	8006284 <sqrtf+0x34>
 8006266:	2100      	movs	r1, #0
 8006268:	1c28      	adds	r0, r5, #0
 800626a:	f7fa f8db 	bl	8000424 <__aeabi_fcmplt>
 800626e:	2800      	cmp	r0, #0
 8006270:	d008      	beq.n	8006284 <sqrtf+0x34>
 8006272:	f7ff fb2d 	bl	80058d0 <__errno>
 8006276:	2321      	movs	r3, #33	; 0x21
 8006278:	2100      	movs	r1, #0
 800627a:	6003      	str	r3, [r0, #0]
 800627c:	1c08      	adds	r0, r1, #0
 800627e:	f7fa faaf 	bl	80007e0 <__aeabi_fdiv>
 8006282:	1c04      	adds	r4, r0, #0
 8006284:	1c20      	adds	r0, r4, #0
 8006286:	bd70      	pop	{r4, r5, r6, pc}

08006288 <__ieee754_sqrtf>:
 8006288:	0042      	lsls	r2, r0, #1
 800628a:	0003      	movs	r3, r0
 800628c:	b570      	push	{r4, r5, r6, lr}
 800628e:	1c04      	adds	r4, r0, #0
 8006290:	20ff      	movs	r0, #255	; 0xff
 8006292:	0852      	lsrs	r2, r2, #1
 8006294:	05c0      	lsls	r0, r0, #23
 8006296:	4282      	cmp	r2, r0
 8006298:	d30a      	bcc.n	80062b0 <__ieee754_sqrtf+0x28>
 800629a:	1c21      	adds	r1, r4, #0
 800629c:	1c20      	adds	r0, r4, #0
 800629e:	f7fa fc67 	bl	8000b70 <__aeabi_fmul>
 80062a2:	1c01      	adds	r1, r0, #0
 80062a4:	1c20      	adds	r0, r4, #0
 80062a6:	f7fa f8fd 	bl	80004a4 <__aeabi_fadd>
 80062aa:	1c04      	adds	r4, r0, #0
 80062ac:	1c20      	adds	r0, r4, #0
 80062ae:	bd70      	pop	{r4, r5, r6, pc}
 80062b0:	2a00      	cmp	r2, #0
 80062b2:	d0fb      	beq.n	80062ac <__ieee754_sqrtf+0x24>
 80062b4:	2c00      	cmp	r4, #0
 80062b6:	da07      	bge.n	80062c8 <__ieee754_sqrtf+0x40>
 80062b8:	1c21      	adds	r1, r4, #0
 80062ba:	1c20      	adds	r0, r4, #0
 80062bc:	f7fa fd7e 	bl	8000dbc <__aeabi_fsub>
 80062c0:	1c01      	adds	r1, r0, #0
 80062c2:	f7fa fa8d 	bl	80007e0 <__aeabi_fdiv>
 80062c6:	e7f0      	b.n	80062aa <__ieee754_sqrtf+0x22>
 80062c8:	0022      	movs	r2, r4
 80062ca:	15e1      	asrs	r1, r4, #23
 80062cc:	4002      	ands	r2, r0
 80062ce:	4204      	tst	r4, r0
 80062d0:	d02e      	beq.n	8006330 <__ieee754_sqrtf+0xa8>
 80062d2:	2280      	movs	r2, #128	; 0x80
 80062d4:	000c      	movs	r4, r1
 80062d6:	025b      	lsls	r3, r3, #9
 80062d8:	0a5b      	lsrs	r3, r3, #9
 80062da:	0412      	lsls	r2, r2, #16
 80062dc:	3c7f      	subs	r4, #127	; 0x7f
 80062de:	4313      	orrs	r3, r2
 80062e0:	07ca      	lsls	r2, r1, #31
 80062e2:	d400      	bmi.n	80062e6 <__ieee754_sqrtf+0x5e>
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	2200      	movs	r2, #0
 80062e8:	2180      	movs	r1, #128	; 0x80
 80062ea:	2019      	movs	r0, #25
 80062ec:	0016      	movs	r6, r2
 80062ee:	1064      	asrs	r4, r4, #1
 80062f0:	005b      	lsls	r3, r3, #1
 80062f2:	0449      	lsls	r1, r1, #17
 80062f4:	1875      	adds	r5, r6, r1
 80062f6:	429d      	cmp	r5, r3
 80062f8:	dc02      	bgt.n	8006300 <__ieee754_sqrtf+0x78>
 80062fa:	186e      	adds	r6, r5, r1
 80062fc:	1b5b      	subs	r3, r3, r5
 80062fe:	1852      	adds	r2, r2, r1
 8006300:	3801      	subs	r0, #1
 8006302:	005b      	lsls	r3, r3, #1
 8006304:	0849      	lsrs	r1, r1, #1
 8006306:	2800      	cmp	r0, #0
 8006308:	d1f4      	bne.n	80062f4 <__ieee754_sqrtf+0x6c>
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <__ieee754_sqrtf+0x8c>
 800630e:	2301      	movs	r3, #1
 8006310:	3201      	adds	r2, #1
 8006312:	439a      	bics	r2, r3
 8006314:	23fc      	movs	r3, #252	; 0xfc
 8006316:	1052      	asrs	r2, r2, #1
 8006318:	059b      	lsls	r3, r3, #22
 800631a:	18d2      	adds	r2, r2, r3
 800631c:	05e4      	lsls	r4, r4, #23
 800631e:	18a4      	adds	r4, r4, r2
 8006320:	e7c4      	b.n	80062ac <__ieee754_sqrtf+0x24>
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	3201      	adds	r2, #1
 8006326:	4203      	tst	r3, r0
 8006328:	d0fb      	beq.n	8006322 <__ieee754_sqrtf+0x9a>
 800632a:	3a01      	subs	r2, #1
 800632c:	1a89      	subs	r1, r1, r2
 800632e:	e7d0      	b.n	80062d2 <__ieee754_sqrtf+0x4a>
 8006330:	2080      	movs	r0, #128	; 0x80
 8006332:	0400      	lsls	r0, r0, #16
 8006334:	e7f7      	b.n	8006326 <__ieee754_sqrtf+0x9e>
	...

08006338 <_init>:
 8006338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633a:	46c0      	nop			; (mov r8, r8)
 800633c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800633e:	bc08      	pop	{r3}
 8006340:	469e      	mov	lr, r3
 8006342:	4770      	bx	lr

08006344 <_fini>:
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006346:	46c0      	nop			; (mov r8, r8)
 8006348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800634a:	bc08      	pop	{r3}
 800634c:	469e      	mov	lr, r3
 800634e:	4770      	bx	lr

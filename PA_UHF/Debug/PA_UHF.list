
PA_UHF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033e8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080034a0  080034a0  000134a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034e0  080034e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080034e0  080034e0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034e0  080034e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034e0  080034e0  000134e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034e4  080034e4  000134e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  080034f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080034f4  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087ed  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db0  00000000  00000000  00028821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  0002a5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000750  00000000  00000000  0002ae10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000026dc  00000000  00000000  0002b560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f9f  00000000  00000000  0002dc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008585c  00000000  00000000  00037bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bd437  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ca4  00000000  00000000  000bd488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003488 	.word	0x08003488

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08003488 	.word	0x08003488

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_cfrcmple>:
 8000218:	4684      	mov	ip, r0
 800021a:	0008      	movs	r0, r1
 800021c:	4661      	mov	r1, ip
 800021e:	e7ff      	b.n	8000220 <__aeabi_cfcmpeq>

08000220 <__aeabi_cfcmpeq>:
 8000220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000222:	f000 f8b7 	bl	8000394 <__lesf2>
 8000226:	2800      	cmp	r0, #0
 8000228:	d401      	bmi.n	800022e <__aeabi_cfcmpeq+0xe>
 800022a:	2100      	movs	r1, #0
 800022c:	42c8      	cmn	r0, r1
 800022e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000230 <__aeabi_fcmpeq>:
 8000230:	b510      	push	{r4, lr}
 8000232:	f000 f843 	bl	80002bc <__eqsf2>
 8000236:	4240      	negs	r0, r0
 8000238:	3001      	adds	r0, #1
 800023a:	bd10      	pop	{r4, pc}

0800023c <__aeabi_fcmplt>:
 800023c:	b510      	push	{r4, lr}
 800023e:	f000 f8a9 	bl	8000394 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	db01      	blt.n	800024a <__aeabi_fcmplt+0xe>
 8000246:	2000      	movs	r0, #0
 8000248:	bd10      	pop	{r4, pc}
 800024a:	2001      	movs	r0, #1
 800024c:	bd10      	pop	{r4, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_fcmple>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 f89f 	bl	8000394 <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	dd01      	ble.n	800025e <__aeabi_fcmple+0xe>
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_fcmpgt>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 f84f 	bl	8000308 <__gesf2>
 800026a:	2800      	cmp	r0, #0
 800026c:	dc01      	bgt.n	8000272 <__aeabi_fcmpgt+0xe>
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	2001      	movs	r0, #1
 8000274:	bd10      	pop	{r4, pc}
 8000276:	46c0      	nop			; (mov r8, r8)

08000278 <__aeabi_fcmpge>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f000 f845 	bl	8000308 <__gesf2>
 800027e:	2800      	cmp	r0, #0
 8000280:	da01      	bge.n	8000286 <__aeabi_fcmpge+0xe>
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	2001      	movs	r0, #1
 8000288:	bd10      	pop	{r4, pc}
 800028a:	46c0      	nop			; (mov r8, r8)

0800028c <__aeabi_f2uiz>:
 800028c:	219e      	movs	r1, #158	; 0x9e
 800028e:	b510      	push	{r4, lr}
 8000290:	05c9      	lsls	r1, r1, #23
 8000292:	1c04      	adds	r4, r0, #0
 8000294:	f7ff fff0 	bl	8000278 <__aeabi_fcmpge>
 8000298:	2800      	cmp	r0, #0
 800029a:	d103      	bne.n	80002a4 <__aeabi_f2uiz+0x18>
 800029c:	1c20      	adds	r0, r4, #0
 800029e:	f000 fa6b 	bl	8000778 <__aeabi_f2iz>
 80002a2:	bd10      	pop	{r4, pc}
 80002a4:	219e      	movs	r1, #158	; 0x9e
 80002a6:	1c20      	adds	r0, r4, #0
 80002a8:	05c9      	lsls	r1, r1, #23
 80002aa:	f000 f8b7 	bl	800041c <__aeabi_fsub>
 80002ae:	f000 fa63 	bl	8000778 <__aeabi_f2iz>
 80002b2:	2380      	movs	r3, #128	; 0x80
 80002b4:	061b      	lsls	r3, r3, #24
 80002b6:	469c      	mov	ip, r3
 80002b8:	4460      	add	r0, ip
 80002ba:	e7f2      	b.n	80002a2 <__aeabi_f2uiz+0x16>

080002bc <__eqsf2>:
 80002bc:	b570      	push	{r4, r5, r6, lr}
 80002be:	0042      	lsls	r2, r0, #1
 80002c0:	0245      	lsls	r5, r0, #9
 80002c2:	024e      	lsls	r6, r1, #9
 80002c4:	004c      	lsls	r4, r1, #1
 80002c6:	0fc3      	lsrs	r3, r0, #31
 80002c8:	0a6d      	lsrs	r5, r5, #9
 80002ca:	2001      	movs	r0, #1
 80002cc:	0e12      	lsrs	r2, r2, #24
 80002ce:	0a76      	lsrs	r6, r6, #9
 80002d0:	0e24      	lsrs	r4, r4, #24
 80002d2:	0fc9      	lsrs	r1, r1, #31
 80002d4:	2aff      	cmp	r2, #255	; 0xff
 80002d6:	d006      	beq.n	80002e6 <__eqsf2+0x2a>
 80002d8:	2cff      	cmp	r4, #255	; 0xff
 80002da:	d003      	beq.n	80002e4 <__eqsf2+0x28>
 80002dc:	42a2      	cmp	r2, r4
 80002de:	d101      	bne.n	80002e4 <__eqsf2+0x28>
 80002e0:	42b5      	cmp	r5, r6
 80002e2:	d006      	beq.n	80002f2 <__eqsf2+0x36>
 80002e4:	bd70      	pop	{r4, r5, r6, pc}
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d1fc      	bne.n	80002e4 <__eqsf2+0x28>
 80002ea:	2cff      	cmp	r4, #255	; 0xff
 80002ec:	d1fa      	bne.n	80002e4 <__eqsf2+0x28>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d1f8      	bne.n	80002e4 <__eqsf2+0x28>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d006      	beq.n	8000304 <__eqsf2+0x48>
 80002f6:	2001      	movs	r0, #1
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	d1f3      	bne.n	80002e4 <__eqsf2+0x28>
 80002fc:	0028      	movs	r0, r5
 80002fe:	1e43      	subs	r3, r0, #1
 8000300:	4198      	sbcs	r0, r3
 8000302:	e7ef      	b.n	80002e4 <__eqsf2+0x28>
 8000304:	2000      	movs	r0, #0
 8000306:	e7ed      	b.n	80002e4 <__eqsf2+0x28>

08000308 <__gesf2>:
 8000308:	b570      	push	{r4, r5, r6, lr}
 800030a:	0042      	lsls	r2, r0, #1
 800030c:	0245      	lsls	r5, r0, #9
 800030e:	024e      	lsls	r6, r1, #9
 8000310:	004c      	lsls	r4, r1, #1
 8000312:	0fc3      	lsrs	r3, r0, #31
 8000314:	0a6d      	lsrs	r5, r5, #9
 8000316:	0e12      	lsrs	r2, r2, #24
 8000318:	0a76      	lsrs	r6, r6, #9
 800031a:	0e24      	lsrs	r4, r4, #24
 800031c:	0fc8      	lsrs	r0, r1, #31
 800031e:	2aff      	cmp	r2, #255	; 0xff
 8000320:	d01b      	beq.n	800035a <__gesf2+0x52>
 8000322:	2cff      	cmp	r4, #255	; 0xff
 8000324:	d00e      	beq.n	8000344 <__gesf2+0x3c>
 8000326:	2a00      	cmp	r2, #0
 8000328:	d11b      	bne.n	8000362 <__gesf2+0x5a>
 800032a:	2c00      	cmp	r4, #0
 800032c:	d101      	bne.n	8000332 <__gesf2+0x2a>
 800032e:	2e00      	cmp	r6, #0
 8000330:	d01c      	beq.n	800036c <__gesf2+0x64>
 8000332:	2d00      	cmp	r5, #0
 8000334:	d00c      	beq.n	8000350 <__gesf2+0x48>
 8000336:	4283      	cmp	r3, r0
 8000338:	d01c      	beq.n	8000374 <__gesf2+0x6c>
 800033a:	2102      	movs	r1, #2
 800033c:	1e58      	subs	r0, r3, #1
 800033e:	4008      	ands	r0, r1
 8000340:	3801      	subs	r0, #1
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	2e00      	cmp	r6, #0
 8000346:	d122      	bne.n	800038e <__gesf2+0x86>
 8000348:	2a00      	cmp	r2, #0
 800034a:	d1f4      	bne.n	8000336 <__gesf2+0x2e>
 800034c:	2d00      	cmp	r5, #0
 800034e:	d1f2      	bne.n	8000336 <__gesf2+0x2e>
 8000350:	2800      	cmp	r0, #0
 8000352:	d1f6      	bne.n	8000342 <__gesf2+0x3a>
 8000354:	2001      	movs	r0, #1
 8000356:	4240      	negs	r0, r0
 8000358:	e7f3      	b.n	8000342 <__gesf2+0x3a>
 800035a:	2d00      	cmp	r5, #0
 800035c:	d117      	bne.n	800038e <__gesf2+0x86>
 800035e:	2cff      	cmp	r4, #255	; 0xff
 8000360:	d0f0      	beq.n	8000344 <__gesf2+0x3c>
 8000362:	2c00      	cmp	r4, #0
 8000364:	d1e7      	bne.n	8000336 <__gesf2+0x2e>
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1e5      	bne.n	8000336 <__gesf2+0x2e>
 800036a:	e7e6      	b.n	800033a <__gesf2+0x32>
 800036c:	2000      	movs	r0, #0
 800036e:	2d00      	cmp	r5, #0
 8000370:	d0e7      	beq.n	8000342 <__gesf2+0x3a>
 8000372:	e7e2      	b.n	800033a <__gesf2+0x32>
 8000374:	42a2      	cmp	r2, r4
 8000376:	dc05      	bgt.n	8000384 <__gesf2+0x7c>
 8000378:	dbea      	blt.n	8000350 <__gesf2+0x48>
 800037a:	42b5      	cmp	r5, r6
 800037c:	d802      	bhi.n	8000384 <__gesf2+0x7c>
 800037e:	d3e7      	bcc.n	8000350 <__gesf2+0x48>
 8000380:	2000      	movs	r0, #0
 8000382:	e7de      	b.n	8000342 <__gesf2+0x3a>
 8000384:	4243      	negs	r3, r0
 8000386:	4158      	adcs	r0, r3
 8000388:	0040      	lsls	r0, r0, #1
 800038a:	3801      	subs	r0, #1
 800038c:	e7d9      	b.n	8000342 <__gesf2+0x3a>
 800038e:	2002      	movs	r0, #2
 8000390:	4240      	negs	r0, r0
 8000392:	e7d6      	b.n	8000342 <__gesf2+0x3a>

08000394 <__lesf2>:
 8000394:	b570      	push	{r4, r5, r6, lr}
 8000396:	0042      	lsls	r2, r0, #1
 8000398:	0245      	lsls	r5, r0, #9
 800039a:	024e      	lsls	r6, r1, #9
 800039c:	004c      	lsls	r4, r1, #1
 800039e:	0fc3      	lsrs	r3, r0, #31
 80003a0:	0a6d      	lsrs	r5, r5, #9
 80003a2:	0e12      	lsrs	r2, r2, #24
 80003a4:	0a76      	lsrs	r6, r6, #9
 80003a6:	0e24      	lsrs	r4, r4, #24
 80003a8:	0fc8      	lsrs	r0, r1, #31
 80003aa:	2aff      	cmp	r2, #255	; 0xff
 80003ac:	d00b      	beq.n	80003c6 <__lesf2+0x32>
 80003ae:	2cff      	cmp	r4, #255	; 0xff
 80003b0:	d00d      	beq.n	80003ce <__lesf2+0x3a>
 80003b2:	2a00      	cmp	r2, #0
 80003b4:	d11f      	bne.n	80003f6 <__lesf2+0x62>
 80003b6:	2c00      	cmp	r4, #0
 80003b8:	d116      	bne.n	80003e8 <__lesf2+0x54>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d114      	bne.n	80003e8 <__lesf2+0x54>
 80003be:	2000      	movs	r0, #0
 80003c0:	2d00      	cmp	r5, #0
 80003c2:	d010      	beq.n	80003e6 <__lesf2+0x52>
 80003c4:	e009      	b.n	80003da <__lesf2+0x46>
 80003c6:	2d00      	cmp	r5, #0
 80003c8:	d10c      	bne.n	80003e4 <__lesf2+0x50>
 80003ca:	2cff      	cmp	r4, #255	; 0xff
 80003cc:	d113      	bne.n	80003f6 <__lesf2+0x62>
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d108      	bne.n	80003e4 <__lesf2+0x50>
 80003d2:	2a00      	cmp	r2, #0
 80003d4:	d008      	beq.n	80003e8 <__lesf2+0x54>
 80003d6:	4283      	cmp	r3, r0
 80003d8:	d012      	beq.n	8000400 <__lesf2+0x6c>
 80003da:	2102      	movs	r1, #2
 80003dc:	1e58      	subs	r0, r3, #1
 80003de:	4008      	ands	r0, r1
 80003e0:	3801      	subs	r0, #1
 80003e2:	e000      	b.n	80003e6 <__lesf2+0x52>
 80003e4:	2002      	movs	r0, #2
 80003e6:	bd70      	pop	{r4, r5, r6, pc}
 80003e8:	2d00      	cmp	r5, #0
 80003ea:	d1f4      	bne.n	80003d6 <__lesf2+0x42>
 80003ec:	2800      	cmp	r0, #0
 80003ee:	d1fa      	bne.n	80003e6 <__lesf2+0x52>
 80003f0:	2001      	movs	r0, #1
 80003f2:	4240      	negs	r0, r0
 80003f4:	e7f7      	b.n	80003e6 <__lesf2+0x52>
 80003f6:	2c00      	cmp	r4, #0
 80003f8:	d1ed      	bne.n	80003d6 <__lesf2+0x42>
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d1eb      	bne.n	80003d6 <__lesf2+0x42>
 80003fe:	e7ec      	b.n	80003da <__lesf2+0x46>
 8000400:	42a2      	cmp	r2, r4
 8000402:	dc05      	bgt.n	8000410 <__lesf2+0x7c>
 8000404:	dbf2      	blt.n	80003ec <__lesf2+0x58>
 8000406:	42b5      	cmp	r5, r6
 8000408:	d802      	bhi.n	8000410 <__lesf2+0x7c>
 800040a:	d3ef      	bcc.n	80003ec <__lesf2+0x58>
 800040c:	2000      	movs	r0, #0
 800040e:	e7ea      	b.n	80003e6 <__lesf2+0x52>
 8000410:	4243      	negs	r3, r0
 8000412:	4158      	adcs	r0, r3
 8000414:	0040      	lsls	r0, r0, #1
 8000416:	3801      	subs	r0, #1
 8000418:	e7e5      	b.n	80003e6 <__lesf2+0x52>
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <__aeabi_fsub>:
 800041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041e:	46ce      	mov	lr, r9
 8000420:	4647      	mov	r7, r8
 8000422:	0243      	lsls	r3, r0, #9
 8000424:	0a5b      	lsrs	r3, r3, #9
 8000426:	024e      	lsls	r6, r1, #9
 8000428:	00da      	lsls	r2, r3, #3
 800042a:	4694      	mov	ip, r2
 800042c:	0a72      	lsrs	r2, r6, #9
 800042e:	4691      	mov	r9, r2
 8000430:	0045      	lsls	r5, r0, #1
 8000432:	004a      	lsls	r2, r1, #1
 8000434:	b580      	push	{r7, lr}
 8000436:	0e2d      	lsrs	r5, r5, #24
 8000438:	001f      	movs	r7, r3
 800043a:	0fc4      	lsrs	r4, r0, #31
 800043c:	0e12      	lsrs	r2, r2, #24
 800043e:	0fc9      	lsrs	r1, r1, #31
 8000440:	09b6      	lsrs	r6, r6, #6
 8000442:	2aff      	cmp	r2, #255	; 0xff
 8000444:	d05b      	beq.n	80004fe <__aeabi_fsub+0xe2>
 8000446:	2001      	movs	r0, #1
 8000448:	4041      	eors	r1, r0
 800044a:	428c      	cmp	r4, r1
 800044c:	d039      	beq.n	80004c2 <__aeabi_fsub+0xa6>
 800044e:	1aa8      	subs	r0, r5, r2
 8000450:	2800      	cmp	r0, #0
 8000452:	dd5a      	ble.n	800050a <__aeabi_fsub+0xee>
 8000454:	2a00      	cmp	r2, #0
 8000456:	d06a      	beq.n	800052e <__aeabi_fsub+0x112>
 8000458:	2dff      	cmp	r5, #255	; 0xff
 800045a:	d100      	bne.n	800045e <__aeabi_fsub+0x42>
 800045c:	e0d9      	b.n	8000612 <__aeabi_fsub+0x1f6>
 800045e:	2280      	movs	r2, #128	; 0x80
 8000460:	04d2      	lsls	r2, r2, #19
 8000462:	4316      	orrs	r6, r2
 8000464:	281b      	cmp	r0, #27
 8000466:	dc00      	bgt.n	800046a <__aeabi_fsub+0x4e>
 8000468:	e0e9      	b.n	800063e <__aeabi_fsub+0x222>
 800046a:	2001      	movs	r0, #1
 800046c:	4663      	mov	r3, ip
 800046e:	1a18      	subs	r0, r3, r0
 8000470:	0143      	lsls	r3, r0, #5
 8000472:	d400      	bmi.n	8000476 <__aeabi_fsub+0x5a>
 8000474:	e0b4      	b.n	80005e0 <__aeabi_fsub+0x1c4>
 8000476:	0180      	lsls	r0, r0, #6
 8000478:	0987      	lsrs	r7, r0, #6
 800047a:	0038      	movs	r0, r7
 800047c:	f000 f99c 	bl	80007b8 <__clzsi2>
 8000480:	3805      	subs	r0, #5
 8000482:	4087      	lsls	r7, r0
 8000484:	4285      	cmp	r5, r0
 8000486:	dc00      	bgt.n	800048a <__aeabi_fsub+0x6e>
 8000488:	e0cc      	b.n	8000624 <__aeabi_fsub+0x208>
 800048a:	1a2d      	subs	r5, r5, r0
 800048c:	48b5      	ldr	r0, [pc, #724]	; (8000764 <__aeabi_fsub+0x348>)
 800048e:	4038      	ands	r0, r7
 8000490:	0743      	lsls	r3, r0, #29
 8000492:	d004      	beq.n	800049e <__aeabi_fsub+0x82>
 8000494:	230f      	movs	r3, #15
 8000496:	4003      	ands	r3, r0
 8000498:	2b04      	cmp	r3, #4
 800049a:	d000      	beq.n	800049e <__aeabi_fsub+0x82>
 800049c:	3004      	adds	r0, #4
 800049e:	0143      	lsls	r3, r0, #5
 80004a0:	d400      	bmi.n	80004a4 <__aeabi_fsub+0x88>
 80004a2:	e0a0      	b.n	80005e6 <__aeabi_fsub+0x1ca>
 80004a4:	1c6a      	adds	r2, r5, #1
 80004a6:	2dfe      	cmp	r5, #254	; 0xfe
 80004a8:	d100      	bne.n	80004ac <__aeabi_fsub+0x90>
 80004aa:	e08d      	b.n	80005c8 <__aeabi_fsub+0x1ac>
 80004ac:	0180      	lsls	r0, r0, #6
 80004ae:	0a47      	lsrs	r7, r0, #9
 80004b0:	b2d2      	uxtb	r2, r2
 80004b2:	05d0      	lsls	r0, r2, #23
 80004b4:	4338      	orrs	r0, r7
 80004b6:	07e4      	lsls	r4, r4, #31
 80004b8:	4320      	orrs	r0, r4
 80004ba:	bcc0      	pop	{r6, r7}
 80004bc:	46b9      	mov	r9, r7
 80004be:	46b0      	mov	r8, r6
 80004c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004c2:	1aa8      	subs	r0, r5, r2
 80004c4:	4680      	mov	r8, r0
 80004c6:	2800      	cmp	r0, #0
 80004c8:	dd45      	ble.n	8000556 <__aeabi_fsub+0x13a>
 80004ca:	2a00      	cmp	r2, #0
 80004cc:	d070      	beq.n	80005b0 <__aeabi_fsub+0x194>
 80004ce:	2dff      	cmp	r5, #255	; 0xff
 80004d0:	d100      	bne.n	80004d4 <__aeabi_fsub+0xb8>
 80004d2:	e09e      	b.n	8000612 <__aeabi_fsub+0x1f6>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	04db      	lsls	r3, r3, #19
 80004d8:	431e      	orrs	r6, r3
 80004da:	4643      	mov	r3, r8
 80004dc:	2b1b      	cmp	r3, #27
 80004de:	dc00      	bgt.n	80004e2 <__aeabi_fsub+0xc6>
 80004e0:	e0d2      	b.n	8000688 <__aeabi_fsub+0x26c>
 80004e2:	2001      	movs	r0, #1
 80004e4:	4460      	add	r0, ip
 80004e6:	0143      	lsls	r3, r0, #5
 80004e8:	d57a      	bpl.n	80005e0 <__aeabi_fsub+0x1c4>
 80004ea:	3501      	adds	r5, #1
 80004ec:	2dff      	cmp	r5, #255	; 0xff
 80004ee:	d06b      	beq.n	80005c8 <__aeabi_fsub+0x1ac>
 80004f0:	2301      	movs	r3, #1
 80004f2:	4a9d      	ldr	r2, [pc, #628]	; (8000768 <__aeabi_fsub+0x34c>)
 80004f4:	4003      	ands	r3, r0
 80004f6:	0840      	lsrs	r0, r0, #1
 80004f8:	4010      	ands	r0, r2
 80004fa:	4318      	orrs	r0, r3
 80004fc:	e7c8      	b.n	8000490 <__aeabi_fsub+0x74>
 80004fe:	2e00      	cmp	r6, #0
 8000500:	d020      	beq.n	8000544 <__aeabi_fsub+0x128>
 8000502:	428c      	cmp	r4, r1
 8000504:	d023      	beq.n	800054e <__aeabi_fsub+0x132>
 8000506:	0028      	movs	r0, r5
 8000508:	38ff      	subs	r0, #255	; 0xff
 800050a:	2800      	cmp	r0, #0
 800050c:	d039      	beq.n	8000582 <__aeabi_fsub+0x166>
 800050e:	1b57      	subs	r7, r2, r5
 8000510:	2d00      	cmp	r5, #0
 8000512:	d000      	beq.n	8000516 <__aeabi_fsub+0xfa>
 8000514:	e09d      	b.n	8000652 <__aeabi_fsub+0x236>
 8000516:	4663      	mov	r3, ip
 8000518:	2b00      	cmp	r3, #0
 800051a:	d100      	bne.n	800051e <__aeabi_fsub+0x102>
 800051c:	e0db      	b.n	80006d6 <__aeabi_fsub+0x2ba>
 800051e:	1e7b      	subs	r3, r7, #1
 8000520:	2f01      	cmp	r7, #1
 8000522:	d100      	bne.n	8000526 <__aeabi_fsub+0x10a>
 8000524:	e10d      	b.n	8000742 <__aeabi_fsub+0x326>
 8000526:	2fff      	cmp	r7, #255	; 0xff
 8000528:	d071      	beq.n	800060e <__aeabi_fsub+0x1f2>
 800052a:	001f      	movs	r7, r3
 800052c:	e098      	b.n	8000660 <__aeabi_fsub+0x244>
 800052e:	2e00      	cmp	r6, #0
 8000530:	d100      	bne.n	8000534 <__aeabi_fsub+0x118>
 8000532:	e0a7      	b.n	8000684 <__aeabi_fsub+0x268>
 8000534:	1e42      	subs	r2, r0, #1
 8000536:	2801      	cmp	r0, #1
 8000538:	d100      	bne.n	800053c <__aeabi_fsub+0x120>
 800053a:	e0e6      	b.n	800070a <__aeabi_fsub+0x2ee>
 800053c:	28ff      	cmp	r0, #255	; 0xff
 800053e:	d068      	beq.n	8000612 <__aeabi_fsub+0x1f6>
 8000540:	0010      	movs	r0, r2
 8000542:	e78f      	b.n	8000464 <__aeabi_fsub+0x48>
 8000544:	2001      	movs	r0, #1
 8000546:	4041      	eors	r1, r0
 8000548:	42a1      	cmp	r1, r4
 800054a:	d000      	beq.n	800054e <__aeabi_fsub+0x132>
 800054c:	e77f      	b.n	800044e <__aeabi_fsub+0x32>
 800054e:	20ff      	movs	r0, #255	; 0xff
 8000550:	4240      	negs	r0, r0
 8000552:	4680      	mov	r8, r0
 8000554:	44a8      	add	r8, r5
 8000556:	4640      	mov	r0, r8
 8000558:	2800      	cmp	r0, #0
 800055a:	d038      	beq.n	80005ce <__aeabi_fsub+0x1b2>
 800055c:	1b51      	subs	r1, r2, r5
 800055e:	2d00      	cmp	r5, #0
 8000560:	d100      	bne.n	8000564 <__aeabi_fsub+0x148>
 8000562:	e0ae      	b.n	80006c2 <__aeabi_fsub+0x2a6>
 8000564:	2aff      	cmp	r2, #255	; 0xff
 8000566:	d100      	bne.n	800056a <__aeabi_fsub+0x14e>
 8000568:	e0df      	b.n	800072a <__aeabi_fsub+0x30e>
 800056a:	2380      	movs	r3, #128	; 0x80
 800056c:	4660      	mov	r0, ip
 800056e:	04db      	lsls	r3, r3, #19
 8000570:	4318      	orrs	r0, r3
 8000572:	4684      	mov	ip, r0
 8000574:	291b      	cmp	r1, #27
 8000576:	dc00      	bgt.n	800057a <__aeabi_fsub+0x15e>
 8000578:	e0d9      	b.n	800072e <__aeabi_fsub+0x312>
 800057a:	2001      	movs	r0, #1
 800057c:	0015      	movs	r5, r2
 800057e:	1980      	adds	r0, r0, r6
 8000580:	e7b1      	b.n	80004e6 <__aeabi_fsub+0xca>
 8000582:	20fe      	movs	r0, #254	; 0xfe
 8000584:	1c6a      	adds	r2, r5, #1
 8000586:	4210      	tst	r0, r2
 8000588:	d171      	bne.n	800066e <__aeabi_fsub+0x252>
 800058a:	2d00      	cmp	r5, #0
 800058c:	d000      	beq.n	8000590 <__aeabi_fsub+0x174>
 800058e:	e0a6      	b.n	80006de <__aeabi_fsub+0x2c2>
 8000590:	4663      	mov	r3, ip
 8000592:	2b00      	cmp	r3, #0
 8000594:	d100      	bne.n	8000598 <__aeabi_fsub+0x17c>
 8000596:	e0d9      	b.n	800074c <__aeabi_fsub+0x330>
 8000598:	2200      	movs	r2, #0
 800059a:	2e00      	cmp	r6, #0
 800059c:	d100      	bne.n	80005a0 <__aeabi_fsub+0x184>
 800059e:	e788      	b.n	80004b2 <__aeabi_fsub+0x96>
 80005a0:	1b98      	subs	r0, r3, r6
 80005a2:	0143      	lsls	r3, r0, #5
 80005a4:	d400      	bmi.n	80005a8 <__aeabi_fsub+0x18c>
 80005a6:	e0e1      	b.n	800076c <__aeabi_fsub+0x350>
 80005a8:	4663      	mov	r3, ip
 80005aa:	000c      	movs	r4, r1
 80005ac:	1af0      	subs	r0, r6, r3
 80005ae:	e76f      	b.n	8000490 <__aeabi_fsub+0x74>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d100      	bne.n	80005b6 <__aeabi_fsub+0x19a>
 80005b4:	e0b7      	b.n	8000726 <__aeabi_fsub+0x30a>
 80005b6:	0002      	movs	r2, r0
 80005b8:	3a01      	subs	r2, #1
 80005ba:	2801      	cmp	r0, #1
 80005bc:	d100      	bne.n	80005c0 <__aeabi_fsub+0x1a4>
 80005be:	e09c      	b.n	80006fa <__aeabi_fsub+0x2de>
 80005c0:	28ff      	cmp	r0, #255	; 0xff
 80005c2:	d026      	beq.n	8000612 <__aeabi_fsub+0x1f6>
 80005c4:	4690      	mov	r8, r2
 80005c6:	e788      	b.n	80004da <__aeabi_fsub+0xbe>
 80005c8:	22ff      	movs	r2, #255	; 0xff
 80005ca:	2700      	movs	r7, #0
 80005cc:	e771      	b.n	80004b2 <__aeabi_fsub+0x96>
 80005ce:	20fe      	movs	r0, #254	; 0xfe
 80005d0:	1c6a      	adds	r2, r5, #1
 80005d2:	4210      	tst	r0, r2
 80005d4:	d064      	beq.n	80006a0 <__aeabi_fsub+0x284>
 80005d6:	2aff      	cmp	r2, #255	; 0xff
 80005d8:	d0f6      	beq.n	80005c8 <__aeabi_fsub+0x1ac>
 80005da:	0015      	movs	r5, r2
 80005dc:	4466      	add	r6, ip
 80005de:	0870      	lsrs	r0, r6, #1
 80005e0:	0743      	lsls	r3, r0, #29
 80005e2:	d000      	beq.n	80005e6 <__aeabi_fsub+0x1ca>
 80005e4:	e756      	b.n	8000494 <__aeabi_fsub+0x78>
 80005e6:	08c3      	lsrs	r3, r0, #3
 80005e8:	2dff      	cmp	r5, #255	; 0xff
 80005ea:	d012      	beq.n	8000612 <__aeabi_fsub+0x1f6>
 80005ec:	025b      	lsls	r3, r3, #9
 80005ee:	0a5f      	lsrs	r7, r3, #9
 80005f0:	b2ea      	uxtb	r2, r5
 80005f2:	e75e      	b.n	80004b2 <__aeabi_fsub+0x96>
 80005f4:	4662      	mov	r2, ip
 80005f6:	2a00      	cmp	r2, #0
 80005f8:	d100      	bne.n	80005fc <__aeabi_fsub+0x1e0>
 80005fa:	e096      	b.n	800072a <__aeabi_fsub+0x30e>
 80005fc:	2e00      	cmp	r6, #0
 80005fe:	d008      	beq.n	8000612 <__aeabi_fsub+0x1f6>
 8000600:	2280      	movs	r2, #128	; 0x80
 8000602:	03d2      	lsls	r2, r2, #15
 8000604:	4213      	tst	r3, r2
 8000606:	d004      	beq.n	8000612 <__aeabi_fsub+0x1f6>
 8000608:	4648      	mov	r0, r9
 800060a:	4210      	tst	r0, r2
 800060c:	d101      	bne.n	8000612 <__aeabi_fsub+0x1f6>
 800060e:	000c      	movs	r4, r1
 8000610:	464b      	mov	r3, r9
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0d8      	beq.n	80005c8 <__aeabi_fsub+0x1ac>
 8000616:	2780      	movs	r7, #128	; 0x80
 8000618:	03ff      	lsls	r7, r7, #15
 800061a:	431f      	orrs	r7, r3
 800061c:	027f      	lsls	r7, r7, #9
 800061e:	22ff      	movs	r2, #255	; 0xff
 8000620:	0a7f      	lsrs	r7, r7, #9
 8000622:	e746      	b.n	80004b2 <__aeabi_fsub+0x96>
 8000624:	2320      	movs	r3, #32
 8000626:	003a      	movs	r2, r7
 8000628:	1b45      	subs	r5, r0, r5
 800062a:	0038      	movs	r0, r7
 800062c:	3501      	adds	r5, #1
 800062e:	40ea      	lsrs	r2, r5
 8000630:	1b5d      	subs	r5, r3, r5
 8000632:	40a8      	lsls	r0, r5
 8000634:	1e43      	subs	r3, r0, #1
 8000636:	4198      	sbcs	r0, r3
 8000638:	2500      	movs	r5, #0
 800063a:	4310      	orrs	r0, r2
 800063c:	e728      	b.n	8000490 <__aeabi_fsub+0x74>
 800063e:	2320      	movs	r3, #32
 8000640:	1a1b      	subs	r3, r3, r0
 8000642:	0032      	movs	r2, r6
 8000644:	409e      	lsls	r6, r3
 8000646:	40c2      	lsrs	r2, r0
 8000648:	0030      	movs	r0, r6
 800064a:	1e43      	subs	r3, r0, #1
 800064c:	4198      	sbcs	r0, r3
 800064e:	4310      	orrs	r0, r2
 8000650:	e70c      	b.n	800046c <__aeabi_fsub+0x50>
 8000652:	2aff      	cmp	r2, #255	; 0xff
 8000654:	d0db      	beq.n	800060e <__aeabi_fsub+0x1f2>
 8000656:	2380      	movs	r3, #128	; 0x80
 8000658:	4660      	mov	r0, ip
 800065a:	04db      	lsls	r3, r3, #19
 800065c:	4318      	orrs	r0, r3
 800065e:	4684      	mov	ip, r0
 8000660:	2f1b      	cmp	r7, #27
 8000662:	dd56      	ble.n	8000712 <__aeabi_fsub+0x2f6>
 8000664:	2001      	movs	r0, #1
 8000666:	000c      	movs	r4, r1
 8000668:	0015      	movs	r5, r2
 800066a:	1a30      	subs	r0, r6, r0
 800066c:	e700      	b.n	8000470 <__aeabi_fsub+0x54>
 800066e:	4663      	mov	r3, ip
 8000670:	1b9f      	subs	r7, r3, r6
 8000672:	017b      	lsls	r3, r7, #5
 8000674:	d43d      	bmi.n	80006f2 <__aeabi_fsub+0x2d6>
 8000676:	2f00      	cmp	r7, #0
 8000678:	d000      	beq.n	800067c <__aeabi_fsub+0x260>
 800067a:	e6fe      	b.n	800047a <__aeabi_fsub+0x5e>
 800067c:	2400      	movs	r4, #0
 800067e:	2200      	movs	r2, #0
 8000680:	2700      	movs	r7, #0
 8000682:	e716      	b.n	80004b2 <__aeabi_fsub+0x96>
 8000684:	0005      	movs	r5, r0
 8000686:	e7af      	b.n	80005e8 <__aeabi_fsub+0x1cc>
 8000688:	0032      	movs	r2, r6
 800068a:	4643      	mov	r3, r8
 800068c:	4641      	mov	r1, r8
 800068e:	40da      	lsrs	r2, r3
 8000690:	2320      	movs	r3, #32
 8000692:	1a5b      	subs	r3, r3, r1
 8000694:	409e      	lsls	r6, r3
 8000696:	0030      	movs	r0, r6
 8000698:	1e43      	subs	r3, r0, #1
 800069a:	4198      	sbcs	r0, r3
 800069c:	4310      	orrs	r0, r2
 800069e:	e721      	b.n	80004e4 <__aeabi_fsub+0xc8>
 80006a0:	2d00      	cmp	r5, #0
 80006a2:	d1a7      	bne.n	80005f4 <__aeabi_fsub+0x1d8>
 80006a4:	4663      	mov	r3, ip
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d059      	beq.n	800075e <__aeabi_fsub+0x342>
 80006aa:	2200      	movs	r2, #0
 80006ac:	2e00      	cmp	r6, #0
 80006ae:	d100      	bne.n	80006b2 <__aeabi_fsub+0x296>
 80006b0:	e6ff      	b.n	80004b2 <__aeabi_fsub+0x96>
 80006b2:	0030      	movs	r0, r6
 80006b4:	4460      	add	r0, ip
 80006b6:	0143      	lsls	r3, r0, #5
 80006b8:	d592      	bpl.n	80005e0 <__aeabi_fsub+0x1c4>
 80006ba:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <__aeabi_fsub+0x348>)
 80006bc:	3501      	adds	r5, #1
 80006be:	4018      	ands	r0, r3
 80006c0:	e78e      	b.n	80005e0 <__aeabi_fsub+0x1c4>
 80006c2:	4663      	mov	r3, ip
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d047      	beq.n	8000758 <__aeabi_fsub+0x33c>
 80006c8:	1e4b      	subs	r3, r1, #1
 80006ca:	2901      	cmp	r1, #1
 80006cc:	d015      	beq.n	80006fa <__aeabi_fsub+0x2de>
 80006ce:	29ff      	cmp	r1, #255	; 0xff
 80006d0:	d02b      	beq.n	800072a <__aeabi_fsub+0x30e>
 80006d2:	0019      	movs	r1, r3
 80006d4:	e74e      	b.n	8000574 <__aeabi_fsub+0x158>
 80006d6:	000c      	movs	r4, r1
 80006d8:	464b      	mov	r3, r9
 80006da:	003d      	movs	r5, r7
 80006dc:	e784      	b.n	80005e8 <__aeabi_fsub+0x1cc>
 80006de:	4662      	mov	r2, ip
 80006e0:	2a00      	cmp	r2, #0
 80006e2:	d18b      	bne.n	80005fc <__aeabi_fsub+0x1e0>
 80006e4:	2e00      	cmp	r6, #0
 80006e6:	d192      	bne.n	800060e <__aeabi_fsub+0x1f2>
 80006e8:	2780      	movs	r7, #128	; 0x80
 80006ea:	2400      	movs	r4, #0
 80006ec:	22ff      	movs	r2, #255	; 0xff
 80006ee:	03ff      	lsls	r7, r7, #15
 80006f0:	e6df      	b.n	80004b2 <__aeabi_fsub+0x96>
 80006f2:	4663      	mov	r3, ip
 80006f4:	000c      	movs	r4, r1
 80006f6:	1af7      	subs	r7, r6, r3
 80006f8:	e6bf      	b.n	800047a <__aeabi_fsub+0x5e>
 80006fa:	0030      	movs	r0, r6
 80006fc:	4460      	add	r0, ip
 80006fe:	2501      	movs	r5, #1
 8000700:	0143      	lsls	r3, r0, #5
 8000702:	d400      	bmi.n	8000706 <__aeabi_fsub+0x2ea>
 8000704:	e76c      	b.n	80005e0 <__aeabi_fsub+0x1c4>
 8000706:	2502      	movs	r5, #2
 8000708:	e6f2      	b.n	80004f0 <__aeabi_fsub+0xd4>
 800070a:	4663      	mov	r3, ip
 800070c:	2501      	movs	r5, #1
 800070e:	1b98      	subs	r0, r3, r6
 8000710:	e6ae      	b.n	8000470 <__aeabi_fsub+0x54>
 8000712:	2320      	movs	r3, #32
 8000714:	4664      	mov	r4, ip
 8000716:	4660      	mov	r0, ip
 8000718:	40fc      	lsrs	r4, r7
 800071a:	1bdf      	subs	r7, r3, r7
 800071c:	40b8      	lsls	r0, r7
 800071e:	1e43      	subs	r3, r0, #1
 8000720:	4198      	sbcs	r0, r3
 8000722:	4320      	orrs	r0, r4
 8000724:	e79f      	b.n	8000666 <__aeabi_fsub+0x24a>
 8000726:	0005      	movs	r5, r0
 8000728:	e75e      	b.n	80005e8 <__aeabi_fsub+0x1cc>
 800072a:	464b      	mov	r3, r9
 800072c:	e771      	b.n	8000612 <__aeabi_fsub+0x1f6>
 800072e:	2320      	movs	r3, #32
 8000730:	4665      	mov	r5, ip
 8000732:	4660      	mov	r0, ip
 8000734:	40cd      	lsrs	r5, r1
 8000736:	1a59      	subs	r1, r3, r1
 8000738:	4088      	lsls	r0, r1
 800073a:	1e43      	subs	r3, r0, #1
 800073c:	4198      	sbcs	r0, r3
 800073e:	4328      	orrs	r0, r5
 8000740:	e71c      	b.n	800057c <__aeabi_fsub+0x160>
 8000742:	4663      	mov	r3, ip
 8000744:	000c      	movs	r4, r1
 8000746:	2501      	movs	r5, #1
 8000748:	1af0      	subs	r0, r6, r3
 800074a:	e691      	b.n	8000470 <__aeabi_fsub+0x54>
 800074c:	2e00      	cmp	r6, #0
 800074e:	d095      	beq.n	800067c <__aeabi_fsub+0x260>
 8000750:	000c      	movs	r4, r1
 8000752:	464f      	mov	r7, r9
 8000754:	2200      	movs	r2, #0
 8000756:	e6ac      	b.n	80004b2 <__aeabi_fsub+0x96>
 8000758:	464b      	mov	r3, r9
 800075a:	000d      	movs	r5, r1
 800075c:	e744      	b.n	80005e8 <__aeabi_fsub+0x1cc>
 800075e:	464f      	mov	r7, r9
 8000760:	2200      	movs	r2, #0
 8000762:	e6a6      	b.n	80004b2 <__aeabi_fsub+0x96>
 8000764:	fbffffff 	.word	0xfbffffff
 8000768:	7dffffff 	.word	0x7dffffff
 800076c:	2800      	cmp	r0, #0
 800076e:	d000      	beq.n	8000772 <__aeabi_fsub+0x356>
 8000770:	e736      	b.n	80005e0 <__aeabi_fsub+0x1c4>
 8000772:	2400      	movs	r4, #0
 8000774:	2700      	movs	r7, #0
 8000776:	e69c      	b.n	80004b2 <__aeabi_fsub+0x96>

08000778 <__aeabi_f2iz>:
 8000778:	0241      	lsls	r1, r0, #9
 800077a:	0042      	lsls	r2, r0, #1
 800077c:	0fc3      	lsrs	r3, r0, #31
 800077e:	0a49      	lsrs	r1, r1, #9
 8000780:	2000      	movs	r0, #0
 8000782:	0e12      	lsrs	r2, r2, #24
 8000784:	2a7e      	cmp	r2, #126	; 0x7e
 8000786:	dd03      	ble.n	8000790 <__aeabi_f2iz+0x18>
 8000788:	2a9d      	cmp	r2, #157	; 0x9d
 800078a:	dd02      	ble.n	8000792 <__aeabi_f2iz+0x1a>
 800078c:	4a09      	ldr	r2, [pc, #36]	; (80007b4 <__aeabi_f2iz+0x3c>)
 800078e:	1898      	adds	r0, r3, r2
 8000790:	4770      	bx	lr
 8000792:	2080      	movs	r0, #128	; 0x80
 8000794:	0400      	lsls	r0, r0, #16
 8000796:	4301      	orrs	r1, r0
 8000798:	2a95      	cmp	r2, #149	; 0x95
 800079a:	dc07      	bgt.n	80007ac <__aeabi_f2iz+0x34>
 800079c:	2096      	movs	r0, #150	; 0x96
 800079e:	1a82      	subs	r2, r0, r2
 80007a0:	40d1      	lsrs	r1, r2
 80007a2:	4248      	negs	r0, r1
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1f3      	bne.n	8000790 <__aeabi_f2iz+0x18>
 80007a8:	0008      	movs	r0, r1
 80007aa:	e7f1      	b.n	8000790 <__aeabi_f2iz+0x18>
 80007ac:	3a96      	subs	r2, #150	; 0x96
 80007ae:	4091      	lsls	r1, r2
 80007b0:	e7f7      	b.n	80007a2 <__aeabi_f2iz+0x2a>
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	7fffffff 	.word	0x7fffffff

080007b8 <__clzsi2>:
 80007b8:	211c      	movs	r1, #28
 80007ba:	2301      	movs	r3, #1
 80007bc:	041b      	lsls	r3, r3, #16
 80007be:	4298      	cmp	r0, r3
 80007c0:	d301      	bcc.n	80007c6 <__clzsi2+0xe>
 80007c2:	0c00      	lsrs	r0, r0, #16
 80007c4:	3910      	subs	r1, #16
 80007c6:	0a1b      	lsrs	r3, r3, #8
 80007c8:	4298      	cmp	r0, r3
 80007ca:	d301      	bcc.n	80007d0 <__clzsi2+0x18>
 80007cc:	0a00      	lsrs	r0, r0, #8
 80007ce:	3908      	subs	r1, #8
 80007d0:	091b      	lsrs	r3, r3, #4
 80007d2:	4298      	cmp	r0, r3
 80007d4:	d301      	bcc.n	80007da <__clzsi2+0x22>
 80007d6:	0900      	lsrs	r0, r0, #4
 80007d8:	3904      	subs	r1, #4
 80007da:	a202      	add	r2, pc, #8	; (adr r2, 80007e4 <__clzsi2+0x2c>)
 80007dc:	5c10      	ldrb	r0, [r2, r0]
 80007de:	1840      	adds	r0, r0, r1
 80007e0:	4770      	bx	lr
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	02020304 	.word	0x02020304
 80007e8:	01010101 	.word	0x01010101
	...

080007f4 <led_init>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void led_init(LED_t *led) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]

	/*CURRENT LOW LED PA12  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE12_0);
 80007fc:	23a0      	movs	r3, #160	; 0xa0
 80007fe:	05db      	lsls	r3, r3, #23
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	23a0      	movs	r3, #160	; 0xa0
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	2180      	movs	r1, #128	; 0x80
 8000808:	0449      	lsls	r1, r1, #17
 800080a:	430a      	orrs	r2, r1
 800080c:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE12_1);
 800080e:	23a0      	movs	r3, #160	; 0xa0
 8000810:	05db      	lsls	r3, r3, #23
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	23a0      	movs	r3, #160	; 0xa0
 8000816:	05db      	lsls	r3, r3, #23
 8000818:	492d      	ldr	r1, [pc, #180]	; (80008d0 <led_init+0xdc>)
 800081a:	400a      	ands	r2, r1
 800081c:	601a      	str	r2, [r3, #0]

	/*CURRENT NORMAL LED PA11  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE11_0);
 800081e:	23a0      	movs	r3, #160	; 0xa0
 8000820:	05db      	lsls	r3, r3, #23
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	23a0      	movs	r3, #160	; 0xa0
 8000826:	05db      	lsls	r3, r3, #23
 8000828:	2180      	movs	r1, #128	; 0x80
 800082a:	03c9      	lsls	r1, r1, #15
 800082c:	430a      	orrs	r2, r1
 800082e:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE11_1);
 8000830:	23a0      	movs	r3, #160	; 0xa0
 8000832:	05db      	lsls	r3, r3, #23
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	23a0      	movs	r3, #160	; 0xa0
 8000838:	05db      	lsls	r3, r3, #23
 800083a:	4926      	ldr	r1, [pc, #152]	; (80008d4 <led_init+0xe0>)
 800083c:	400a      	ands	r2, r1
 800083e:	601a      	str	r2, [r3, #0]

	/*CURRENT HIGH  LED PA10  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE10_0);
 8000840:	23a0      	movs	r3, #160	; 0xa0
 8000842:	05db      	lsls	r3, r3, #23
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	23a0      	movs	r3, #160	; 0xa0
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	2180      	movs	r1, #128	; 0x80
 800084c:	0349      	lsls	r1, r1, #13
 800084e:	430a      	orrs	r2, r1
 8000850:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE10_1);
 8000852:	23a0      	movs	r3, #160	; 0xa0
 8000854:	05db      	lsls	r3, r3, #23
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	23a0      	movs	r3, #160	; 0xa0
 800085a:	05db      	lsls	r3, r3, #23
 800085c:	491e      	ldr	r1, [pc, #120]	; (80008d8 <led_init+0xe4>)
 800085e:	400a      	ands	r2, r1
 8000860:	601a      	str	r2, [r3, #0]

	/*SYS_RP LED PC6  as output */
	SET_BIT(GPIOC->MODER, GPIO_MODER_MODE6_0);
 8000862:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <led_init+0xe8>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <led_init+0xe8>)
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	0149      	lsls	r1, r1, #5
 800086c:	430a      	orrs	r2, r1
 800086e:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOC->MODER, GPIO_MODER_MODE6_1);
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <led_init+0xe8>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b19      	ldr	r3, [pc, #100]	; (80008dc <led_init+0xe8>)
 8000876:	491a      	ldr	r1, [pc, #104]	; (80008e0 <led_init+0xec>)
 8000878:	400a      	ands	r2, r1
 800087a:	601a      	str	r2, [r3, #0]

	/* TEMPERATURE OK  LED PA9  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE9_0);
 800087c:	23a0      	movs	r3, #160	; 0xa0
 800087e:	05db      	lsls	r3, r3, #23
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	23a0      	movs	r3, #160	; 0xa0
 8000884:	05db      	lsls	r3, r3, #23
 8000886:	2180      	movs	r1, #128	; 0x80
 8000888:	02c9      	lsls	r1, r1, #11
 800088a:	430a      	orrs	r2, r1
 800088c:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE9_1);
 800088e:	23a0      	movs	r3, #160	; 0xa0
 8000890:	05db      	lsls	r3, r3, #23
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	23a0      	movs	r3, #160	; 0xa0
 8000896:	05db      	lsls	r3, r3, #23
 8000898:	4912      	ldr	r1, [pc, #72]	; (80008e4 <led_init+0xf0>)
 800089a:	400a      	ands	r2, r1
 800089c:	601a      	str	r2, [r3, #0]

	/* TEMPERATURE HIGH LED PA8  as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE8_0);
 800089e:	23a0      	movs	r3, #160	; 0xa0
 80008a0:	05db      	lsls	r3, r3, #23
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	23a0      	movs	r3, #160	; 0xa0
 80008a6:	05db      	lsls	r3, r3, #23
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	0249      	lsls	r1, r1, #9
 80008ac:	430a      	orrs	r2, r1
 80008ae:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE8_1);
 80008b0:	23a0      	movs	r3, #160	; 0xa0
 80008b2:	05db      	lsls	r3, r3, #23
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	23a0      	movs	r3, #160	; 0xa0
 80008b8:	05db      	lsls	r3, r3, #23
 80008ba:	490b      	ldr	r1, [pc, #44]	; (80008e8 <led_init+0xf4>)
 80008bc:	400a      	ands	r2, r1
 80008be:	601a      	str	r2, [r3, #0]

	led_reset(led);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 f812 	bl	80008ec <led_reset>

}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b002      	add	sp, #8
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	fdffffff 	.word	0xfdffffff
 80008d4:	ff7fffff 	.word	0xff7fffff
 80008d8:	ffdfffff 	.word	0xffdfffff
 80008dc:	50000800 	.word	0x50000800
 80008e0:	ffffdfff 	.word	0xffffdfff
 80008e4:	fff7ffff 	.word	0xfff7ffff
 80008e8:	fffdffff 	.word	0xfffdffff

080008ec <led_reset>:
		else
			sys_rp_led_on();
	}

}
void led_reset(LED_t *l) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	l->ch_counter = 0;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
	l->cl_counter = 0;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
	l->cn_counter = 0;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
	l->ka_counter = HAL_GetTick();
 8000906:	f000 fc7b 	bl	8001200 <HAL_GetTick>
 800090a:	0002      	movs	r2, r0
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	601a      	str	r2, [r3, #0]
	l->sysrp_counter = 0;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
	l->th_counter = 0;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
	l->tok_counter = 0;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
	current_low_led_on();
 8000922:	23a0      	movs	r3, #160	; 0xa0
 8000924:	05db      	lsls	r3, r3, #23
 8000926:	695a      	ldr	r2, [r3, #20]
 8000928:	23a0      	movs	r3, #160	; 0xa0
 800092a:	05db      	lsls	r3, r3, #23
 800092c:	4916      	ldr	r1, [pc, #88]	; (8000988 <led_reset+0x9c>)
 800092e:	400a      	ands	r2, r1
 8000930:	615a      	str	r2, [r3, #20]
	current_normal_led_on();
 8000932:	23a0      	movs	r3, #160	; 0xa0
 8000934:	05db      	lsls	r3, r3, #23
 8000936:	695a      	ldr	r2, [r3, #20]
 8000938:	23a0      	movs	r3, #160	; 0xa0
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	4913      	ldr	r1, [pc, #76]	; (800098c <led_reset+0xa0>)
 800093e:	400a      	ands	r2, r1
 8000940:	615a      	str	r2, [r3, #20]
	current_high_led_on();
 8000942:	23a0      	movs	r3, #160	; 0xa0
 8000944:	05db      	lsls	r3, r3, #23
 8000946:	695a      	ldr	r2, [r3, #20]
 8000948:	23a0      	movs	r3, #160	; 0xa0
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	4910      	ldr	r1, [pc, #64]	; (8000990 <led_reset+0xa4>)
 800094e:	400a      	ands	r2, r1
 8000950:	615a      	str	r2, [r3, #20]
	sys_rp_led_on();
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <led_reset+0xa8>)
 8000954:	695a      	ldr	r2, [r3, #20]
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <led_reset+0xa8>)
 8000958:	2140      	movs	r1, #64	; 0x40
 800095a:	438a      	bics	r2, r1
 800095c:	615a      	str	r2, [r3, #20]
	temperature_ok_led_on();
 800095e:	23a0      	movs	r3, #160	; 0xa0
 8000960:	05db      	lsls	r3, r3, #23
 8000962:	695a      	ldr	r2, [r3, #20]
 8000964:	23a0      	movs	r3, #160	; 0xa0
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	490b      	ldr	r1, [pc, #44]	; (8000998 <led_reset+0xac>)
 800096a:	400a      	ands	r2, r1
 800096c:	615a      	str	r2, [r3, #20]
	temperature_high_led_on();
 800096e:	23a0      	movs	r3, #160	; 0xa0
 8000970:	05db      	lsls	r3, r3, #23
 8000972:	695a      	ldr	r2, [r3, #20]
 8000974:	23a0      	movs	r3, #160	; 0xa0
 8000976:	05db      	lsls	r3, r3, #23
 8000978:	4908      	ldr	r1, [pc, #32]	; (800099c <led_reset+0xb0>)
 800097a:	400a      	ands	r2, r1
 800097c:	615a      	str	r2, [r3, #20]
}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b002      	add	sp, #8
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	ffffefff 	.word	0xffffefff
 800098c:	fffff7ff 	.word	0xfffff7ff
 8000990:	fffffbff 	.word	0xfffffbff
 8000994:	50000800 	.word	0x50000800
 8000998:	fffffdff 	.word	0xfffffdff
 800099c:	fffffeff 	.word	0xfffffeff

080009a0 <led_temperature_update>:
		current_normal_led_off();
		current_low_led_on();
	}
}

uint8_t led_temperature_update(uint8_t temperature) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	0002      	movs	r2, r0
 80009a8:	1dfb      	adds	r3, r7, #7
 80009aa:	701a      	strb	r2, [r3, #0]

	if (temperature > LED_MAX_TEMPERATURE) {
 80009ac:	1dfb      	adds	r3, r7, #7
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b4b      	cmp	r3, #75	; 0x4b
 80009b2:	d912      	bls.n	80009da <led_temperature_update+0x3a>
		temperature_ok_led_off();
 80009b4:	23a0      	movs	r3, #160	; 0xa0
 80009b6:	05db      	lsls	r3, r3, #23
 80009b8:	695a      	ldr	r2, [r3, #20]
 80009ba:	23a0      	movs	r3, #160	; 0xa0
 80009bc:	05db      	lsls	r3, r3, #23
 80009be:	2180      	movs	r1, #128	; 0x80
 80009c0:	0089      	lsls	r1, r1, #2
 80009c2:	430a      	orrs	r2, r1
 80009c4:	615a      	str	r2, [r3, #20]
		temperature_high_led_on();
 80009c6:	23a0      	movs	r3, #160	; 0xa0
 80009c8:	05db      	lsls	r3, r3, #23
 80009ca:	695a      	ldr	r2, [r3, #20]
 80009cc:	23a0      	movs	r3, #160	; 0xa0
 80009ce:	05db      	lsls	r3, r3, #23
 80009d0:	490d      	ldr	r1, [pc, #52]	; (8000a08 <led_temperature_update+0x68>)
 80009d2:	400a      	ands	r2, r1
 80009d4:	615a      	str	r2, [r3, #20]
		return 1;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e011      	b.n	80009fe <led_temperature_update+0x5e>
	} else {
		temperature_ok_led_on();
 80009da:	23a0      	movs	r3, #160	; 0xa0
 80009dc:	05db      	lsls	r3, r3, #23
 80009de:	695a      	ldr	r2, [r3, #20]
 80009e0:	23a0      	movs	r3, #160	; 0xa0
 80009e2:	05db      	lsls	r3, r3, #23
 80009e4:	4909      	ldr	r1, [pc, #36]	; (8000a0c <led_temperature_update+0x6c>)
 80009e6:	400a      	ands	r2, r1
 80009e8:	615a      	str	r2, [r3, #20]
		temperature_high_led_off();
 80009ea:	23a0      	movs	r3, #160	; 0xa0
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	695a      	ldr	r2, [r3, #20]
 80009f0:	23a0      	movs	r3, #160	; 0xa0
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	2180      	movs	r1, #128	; 0x80
 80009f6:	0049      	lsls	r1, r1, #1
 80009f8:	430a      	orrs	r2, r1
 80009fa:	615a      	str	r2, [r3, #20]
		return 0;
 80009fc:	2300      	movs	r3, #0
	}
}
 80009fe:	0018      	movs	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b002      	add	sp, #8
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	fffffeff 	.word	0xfffffeff
 8000a0c:	fffffdff 	.word	0xfffffdff

08000a10 <TIM3_IRQHandler>:
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_IWDG_Init(void);
/* USER CODE BEGIN PFP */

void TIM3_IRQHandler(void) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	CLEAR_BIT(TIM3->SR, TIM_SR_UIF);
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <TIM3_IRQHandler+0x30>)
 8000a16:	691a      	ldr	r2, [r3, #16]
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <TIM3_IRQHandler+0x30>)
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	438a      	bics	r2, r1
 8000a1e:	611a      	str	r2, [r3, #16]
	pa_ptr->calc_en = true;
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <TIM3_IRQHandler+0x34>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2201      	movs	r2, #1
 8000a26:	769a      	strb	r2, [r3, #26]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_ptr->dma, CH_NUM);
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <TIM3_IRQHandler+0x38>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	0019      	movs	r1, r3
 8000a2e:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <TIM3_IRQHandler+0x3c>)
 8000a30:	2207      	movs	r2, #7
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 fede 	bl	80017f4 <HAL_ADC_Start_DMA>
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	40000400 	.word	0x40000400
 8000a44:	200000e8 	.word	0x200000e8
 8000a48:	200000f0 	.word	0x200000f0
 8000a4c:	20000028 	.word	0x20000028

08000a50 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	adc_ptr->is_dma_ready = true;
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <HAL_ADC_ConvCpltCallback+0x1c>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	2352      	movs	r3, #82	; 0x52
 8000a5e:	33ff      	adds	r3, #255	; 0xff
 8000a60:	2101      	movs	r1, #1
 8000a62:	54d1      	strb	r1, [r2, r3]
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200000f0 	.word	0x200000f0

08000a70 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	uart1_read_to_frame(uart1_ptr);
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <USART1_IRQHandler+0x14>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f000 fad7 	bl	800102c <uart1_read_to_frame>
}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200000ec 	.word	0x200000ec

08000a88 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b0f2      	sub	sp, #456	; 0x1c8
 8000a8c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a8e:	f000 fb3b 	bl	8001108 <HAL_Init>

	/* USER CODE BEGIN Init */

	/* enable clock access ro GPIOA and GPIOB */
	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOAEN);
 8000a92:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <main+0x9c>)
 8000a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a96:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <main+0x9c>)
 8000a98:	2101      	movs	r1, #1
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	635a      	str	r2, [r3, #52]	; 0x34
	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN);
 8000a9e:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <main+0x9c>)
 8000aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aa2:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <main+0x9c>)
 8000aa4:	2102      	movs	r1, #2
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	635a      	str	r2, [r3, #52]	; 0x34
	SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOCEN);
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <main+0x9c>)
 8000aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aae:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <main+0x9c>)
 8000ab0:	2104      	movs	r1, #4
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	635a      	str	r2, [r3, #52]	; 0x34

	/* PA15 as output */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE15_0);
 8000ab6:	23a0      	movs	r3, #160	; 0xa0
 8000ab8:	05db      	lsls	r3, r3, #23
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	23a0      	movs	r3, #160	; 0xa0
 8000abe:	05db      	lsls	r3, r3, #23
 8000ac0:	2180      	movs	r1, #128	; 0x80
 8000ac2:	05c9      	lsls	r1, r1, #23
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE15_1);
 8000ac8:	23a0      	movs	r3, #160	; 0xa0
 8000aca:	05db      	lsls	r3, r3, #23
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	23a0      	movs	r3, #160	; 0xa0
 8000ad0:	05db      	lsls	r3, r3, #23
 8000ad2:	0052      	lsls	r2, r2, #1
 8000ad4:	0852      	lsrs	r2, r2, #1
 8000ad6:	601a      	str	r2, [r3, #0]

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ad8:	f000 f82c 	bl	8000b34 <SystemClock_Config>
	LED_t led;
	uint8_t rcv_buff[2];
	uint8_t send_buff[2];
	UART1_t uart1;
	ADC_t adc;
	adc_ptr = &adc;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <main+0xa0>)
 8000ade:	1d3a      	adds	r2, r7, #4
 8000ae0:	601a      	str	r2, [r3, #0]
	pa_ptr = &pa;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <main+0xa4>)
 8000ae4:	22d6      	movs	r2, #214	; 0xd6
 8000ae6:	0052      	lsls	r2, r2, #1
 8000ae8:	18ba      	adds	r2, r7, r2
 8000aea:	601a      	str	r2, [r3, #0]
	uart1_ptr = &uart1;
 8000aec:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <main+0xa8>)
 8000aee:	22ac      	movs	r2, #172	; 0xac
 8000af0:	0052      	lsls	r2, r2, #1
 8000af2:	18ba      	adds	r2, r7, r2
 8000af4:	601a      	str	r2, [r3, #0]

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
//	MX_GPIO_Init();
	MX_DMA_Init();
 8000af6:	f000 f94f 	bl	8000d98 <MX_DMA_Init>
	MX_ADC1_Init();
 8000afa:	f000 f879 	bl	8000bf0 <MX_ADC1_Init>
	led_init(&led);
 8000afe:	23b8      	movs	r3, #184	; 0xb8
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	0018      	movs	r0, r3
 8000b06:	f7ff fe75 	bl	80007f4 <led_init>
		module_pa_state_update(&pa);

		led_current_update(pa.current);
		led_enable_kalive(&led);
		*/
		led_temperature_update(pa.temperature);
 8000b0a:	23d6      	movs	r3, #214	; 0xd6
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	18fb      	adds	r3, r7, r3
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	1c18      	adds	r0, r3, #0
 8000b14:	f7ff fbba 	bl	800028c <__aeabi_f2uiz>
 8000b18:	0003      	movs	r3, r0
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff ff3f 	bl	80009a0 <led_temperature_update>
 8000b22:	e7f2      	b.n	8000b0a <main+0x82>
 8000b24:	40021000 	.word	0x40021000
 8000b28:	200000f0 	.word	0x200000f0
 8000b2c:	200000e8 	.word	0x200000e8
 8000b30:	200000ec 	.word	0x200000ec

08000b34 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b093      	sub	sp, #76	; 0x4c
 8000b38:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b3a:	2414      	movs	r4, #20
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	0018      	movs	r0, r3
 8000b40:	2334      	movs	r3, #52	; 0x34
 8000b42:	001a      	movs	r2, r3
 8000b44:	2100      	movs	r1, #0
 8000b46:	f002 fc97 	bl	8003478 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	2310      	movs	r3, #16
 8000b50:	001a      	movs	r2, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	f002 fc90 	bl	8003478 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f001 fe67 	bl	8002830 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	220a      	movs	r2, #10
 8000b66:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	2280      	movs	r2, #128	; 0x80
 8000b6c:	0052      	lsls	r2, r2, #1
 8000b6e:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000b70:	0021      	movs	r1, r4
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2240      	movs	r2, #64	; 0x40
 8000b7c:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2201      	movs	r2, #1
 8000b82:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2202      	movs	r2, #2
 8000b88:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2210      	movs	r2, #16
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLN = 16;
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2210      	movs	r2, #16
 8000b9a:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2280      	movs	r2, #128	; 0x80
 8000ba0:	0292      	lsls	r2, r2, #10
 8000ba2:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2280      	movs	r2, #128	; 0x80
 8000ba8:	0592      	lsls	r2, r2, #22
 8000baa:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f001 fe7e 	bl	80028b0 <HAL_RCC_OscConfig>
 8000bb4:	1e03      	subs	r3, r0, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x88>
		Error_Handler();
 8000bb8:	f000 f90c 	bl	8000dd4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2207      	movs	r2, #7
 8000bc0:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	2102      	movs	r1, #2
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f002 f979 	bl	8002ed0 <HAL_RCC_ClockConfig>
 8000bde:	1e03      	subs	r3, r0, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0xb2>
		Error_Handler();
 8000be2:	f000 f8f7 	bl	8000dd4 <Error_Handler>
	}
}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b013      	add	sp, #76	; 0x4c
 8000bec:	bd90      	pop	{r4, r7, pc}
	...

08000bf0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	230c      	movs	r3, #12
 8000bfc:	001a      	movs	r2, r3
 8000bfe:	2100      	movs	r1, #0
 8000c00:	f002 fc3a 	bl	8003478 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000c04:	4b5c      	ldr	r3, [pc, #368]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000c06:	4a5d      	ldr	r2, [pc, #372]	; (8000d7c <MX_ADC1_Init+0x18c>)
 8000c08:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c0a:	4b5b      	ldr	r3, [pc, #364]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	05d2      	lsls	r2, r2, #23
 8000c10:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c12:	4b59      	ldr	r3, [pc, #356]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c18:	4b57      	ldr	r3, [pc, #348]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c1e:	4b56      	ldr	r3, [pc, #344]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000c20:	2280      	movs	r2, #128	; 0x80
 8000c22:	0392      	lsls	r2, r2, #14
 8000c24:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c26:	4b54      	ldr	r3, [pc, #336]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000c28:	2204      	movs	r2, #4
 8000c2a:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c2c:	4b52      	ldr	r3, [pc, #328]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000c32:	4b51      	ldr	r3, [pc, #324]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000c38:	4b4f      	ldr	r3, [pc, #316]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 7;
 8000c3e:	4b4e      	ldr	r3, [pc, #312]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000c40:	2207      	movs	r2, #7
 8000c42:	61da      	str	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c44:	4b4c      	ldr	r3, [pc, #304]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c4a:	4b4b      	ldr	r3, [pc, #300]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c50:	4b49      	ldr	r3, [pc, #292]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000c52:	222c      	movs	r2, #44	; 0x2c
 8000c54:	2100      	movs	r1, #0
 8000c56:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c58:	4b47      	ldr	r3, [pc, #284]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000c5e:	4b46      	ldr	r3, [pc, #280]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000c60:	2207      	movs	r2, #7
 8000c62:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000c64:	4b44      	ldr	r3, [pc, #272]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000c66:	2207      	movs	r2, #7
 8000c68:	639a      	str	r2, [r3, #56]	; 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 8000c6a:	4b43      	ldr	r3, [pc, #268]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000c6c:	223c      	movs	r2, #60	; 0x3c
 8000c6e:	2100      	movs	r1, #0
 8000c70:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000c72:	4b41      	ldr	r3, [pc, #260]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000c78:	4b3f      	ldr	r3, [pc, #252]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 fc12 	bl	80014a4 <HAL_ADC_Init>
 8000c80:	1e03      	subs	r3, r0, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC1_Init+0x98>
		Error_Handler();
 8000c84:	f000 f8a6 	bl	8000dd4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000c9a:	1d3a      	adds	r2, r7, #4
 8000c9c:	4b36      	ldr	r3, [pc, #216]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000c9e:	0011      	movs	r1, r2
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f000 fe45 	bl	8001930 <HAL_ADC_ConfigChannel>
 8000ca6:	1e03      	subs	r3, r0, #0
 8000ca8:	d001      	beq.n	8000cae <MX_ADC1_Init+0xbe>
		Error_Handler();
 8000caa:	f000 f893 	bl	8000dd4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	4a33      	ldr	r2, [pc, #204]	; (8000d80 <MX_ADC1_Init+0x190>)
 8000cb2:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000cba:	1d3a      	adds	r2, r7, #4
 8000cbc:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000cbe:	0011      	movs	r1, r2
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f000 fe35 	bl	8001930 <HAL_ADC_ConfigChannel>
 8000cc6:	1e03      	subs	r3, r0, #0
 8000cc8:	d001      	beq.n	8000cce <MX_ADC1_Init+0xde>
		Error_Handler();
 8000cca:	f000 f883 	bl	8000dd4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	4a2c      	ldr	r2, [pc, #176]	; (8000d84 <MX_ADC1_Init+0x194>)
 8000cd2:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2208      	movs	r2, #8
 8000cd8:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000cda:	1d3a      	adds	r2, r7, #4
 8000cdc:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000cde:	0011      	movs	r1, r2
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f000 fe25 	bl	8001930 <HAL_ADC_ConfigChannel>
 8000ce6:	1e03      	subs	r3, r0, #0
 8000ce8:	d001      	beq.n	8000cee <MX_ADC1_Init+0xfe>
		Error_Handler();
 8000cea:	f000 f873 	bl	8000dd4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4a25      	ldr	r2, [pc, #148]	; (8000d88 <MX_ADC1_Init+0x198>)
 8000cf2:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000cfa:	1d3a      	adds	r2, r7, #4
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000cfe:	0011      	movs	r1, r2
 8000d00:	0018      	movs	r0, r3
 8000d02:	f000 fe15 	bl	8001930 <HAL_ADC_ConfigChannel>
 8000d06:	1e03      	subs	r3, r0, #0
 8000d08:	d001      	beq.n	8000d0e <MX_ADC1_Init+0x11e>
		Error_Handler();
 8000d0a:	f000 f863 	bl	8000dd4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	4a1e      	ldr	r2, [pc, #120]	; (8000d8c <MX_ADC1_Init+0x19c>)
 8000d12:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_5;
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2210      	movs	r2, #16
 8000d18:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d1a:	1d3a      	adds	r2, r7, #4
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000d1e:	0011      	movs	r1, r2
 8000d20:	0018      	movs	r0, r3
 8000d22:	f000 fe05 	bl	8001930 <HAL_ADC_ConfigChannel>
 8000d26:	1e03      	subs	r3, r0, #0
 8000d28:	d001      	beq.n	8000d2e <MX_ADC1_Init+0x13e>
		Error_Handler();
 8000d2a:	f000 f853 	bl	8000dd4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <MX_ADC1_Init+0x1a0>)
 8000d32:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_6;
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	2214      	movs	r2, #20
 8000d38:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d3a:	1d3a      	adds	r2, r7, #4
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000d3e:	0011      	movs	r1, r2
 8000d40:	0018      	movs	r0, r3
 8000d42:	f000 fdf5 	bl	8001930 <HAL_ADC_ConfigChannel>
 8000d46:	1e03      	subs	r3, r0, #0
 8000d48:	d001      	beq.n	8000d4e <MX_ADC1_Init+0x15e>
		Error_Handler();
 8000d4a:	f000 f843 	bl	8000dd4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	4a10      	ldr	r2, [pc, #64]	; (8000d94 <MX_ADC1_Init+0x1a4>)
 8000d52:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_7;
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2218      	movs	r2, #24
 8000d58:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d5a:	1d3a      	adds	r2, r7, #4
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_ADC1_Init+0x188>)
 8000d5e:	0011      	movs	r1, r2
 8000d60:	0018      	movs	r0, r3
 8000d62:	f000 fde5 	bl	8001930 <HAL_ADC_ConfigChannel>
 8000d66:	1e03      	subs	r3, r0, #0
 8000d68:	d001      	beq.n	8000d6e <MX_ADC1_Init+0x17e>
		Error_Handler();
 8000d6a:	f000 f833 	bl	8000dd4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b004      	add	sp, #16
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	20000028 	.word	0x20000028
 8000d7c:	40012400 	.word	0x40012400
 8000d80:	04000002 	.word	0x04000002
 8000d84:	08000004 	.word	0x08000004
 8000d88:	10000010 	.word	0x10000010
 8000d8c:	14000020 	.word	0x14000020
 8000d90:	18000040 	.word	0x18000040
 8000d94:	b0001000 	.word	0xb0001000

08000d98 <MX_DMA_Init>:
}

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_DMA_Init+0x38>)
 8000da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_DMA_Init+0x38>)
 8000da4:	2101      	movs	r1, #1
 8000da6:	430a      	orrs	r2, r1
 8000da8:	639a      	str	r2, [r3, #56]	; 0x38
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_DMA_Init+0x38>)
 8000dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dae:	2201      	movs	r2, #1
 8000db0:	4013      	ands	r3, r2
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	2009      	movs	r0, #9
 8000dbc:	f001 f950 	bl	8002060 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dc0:	2009      	movs	r0, #9
 8000dc2:	f001 f962 	bl	800208a <HAL_NVIC_EnableIRQ>

}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	b002      	add	sp, #8
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
}
 8000dda:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ddc:	e7fe      	b.n	8000ddc <Error_Handler+0x8>
	...

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_MspInit+0x44>)
 8000de8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_MspInit+0x44>)
 8000dec:	2101      	movs	r1, #1
 8000dee:	430a      	orrs	r2, r1
 8000df0:	641a      	str	r2, [r3, #64]	; 0x40
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_MspInit+0x44>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	2201      	movs	r2, #1
 8000df8:	4013      	ands	r3, r2
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_MspInit+0x44>)
 8000e00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_MspInit+0x44>)
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	0549      	lsls	r1, r1, #21
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <HAL_MspInit+0x44>)
 8000e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	055b      	lsls	r3, r3, #21
 8000e14:	4013      	ands	r3, r2
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b002      	add	sp, #8
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b091      	sub	sp, #68	; 0x44
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	232c      	movs	r3, #44	; 0x2c
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	0018      	movs	r0, r3
 8000e36:	2314      	movs	r3, #20
 8000e38:	001a      	movs	r2, r3
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	f002 fb1c 	bl	8003478 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e40:	2414      	movs	r4, #20
 8000e42:	193b      	adds	r3, r7, r4
 8000e44:	0018      	movs	r0, r3
 8000e46:	2318      	movs	r3, #24
 8000e48:	001a      	movs	r2, r3
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	f002 fb14 	bl	8003478 <memset>
  if(hadc->Instance==ADC1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a43      	ldr	r2, [pc, #268]	; (8000f64 <HAL_ADC_MspInit+0x13c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d000      	beq.n	8000e5c <HAL_ADC_MspInit+0x34>
 8000e5a:	e07f      	b.n	8000f5c <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e5c:	193b      	adds	r3, r7, r4
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	01d2      	lsls	r2, r2, #7
 8000e62:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e6a:	193b      	adds	r3, r7, r4
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f002 f9b9 	bl	80031e4 <HAL_RCCEx_PeriphCLKConfig>
 8000e72:	1e03      	subs	r3, r0, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000e76:	f7ff ffad 	bl	8000dd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e7a:	4b3b      	ldr	r3, [pc, #236]	; (8000f68 <HAL_ADC_MspInit+0x140>)
 8000e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e7e:	4b3a      	ldr	r3, [pc, #232]	; (8000f68 <HAL_ADC_MspInit+0x140>)
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	0349      	lsls	r1, r1, #13
 8000e84:	430a      	orrs	r2, r1
 8000e86:	641a      	str	r2, [r3, #64]	; 0x40
 8000e88:	4b37      	ldr	r3, [pc, #220]	; (8000f68 <HAL_ADC_MspInit+0x140>)
 8000e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	035b      	lsls	r3, r3, #13
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b34      	ldr	r3, [pc, #208]	; (8000f68 <HAL_ADC_MspInit+0x140>)
 8000e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e9a:	4b33      	ldr	r3, [pc, #204]	; (8000f68 <HAL_ADC_MspInit+0x140>)
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ea2:	4b31      	ldr	r3, [pc, #196]	; (8000f68 <HAL_ADC_MspInit+0x140>)
 8000ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	4b2e      	ldr	r3, [pc, #184]	; (8000f68 <HAL_ADC_MspInit+0x140>)
 8000eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eb2:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <HAL_ADC_MspInit+0x140>)
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	635a      	str	r2, [r3, #52]	; 0x34
 8000eba:	4b2b      	ldr	r3, [pc, #172]	; (8000f68 <HAL_ADC_MspInit+0x140>)
 8000ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = AGC_LEVEL_Pin|CURR_Pin|V_IN_SAMPLE_Pin|SWR_Pin
 8000ec6:	242c      	movs	r4, #44	; 0x2c
 8000ec8:	193b      	adds	r3, r7, r4
 8000eca:	2277      	movs	r2, #119	; 0x77
 8000ecc:	601a      	str	r2, [r3, #0]
                          |P_OUT_Pin|P_IN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ece:	193b      	adds	r3, r7, r4
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	193b      	adds	r3, r7, r4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	193a      	adds	r2, r7, r4
 8000edc:	23a0      	movs	r3, #160	; 0xa0
 8000ede:	05db      	lsls	r3, r3, #23
 8000ee0:	0011      	movs	r1, r2
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f001 fb40 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = T_SN_IN_Pin;
 8000ee8:	193b      	adds	r3, r7, r4
 8000eea:	2204      	movs	r2, #4
 8000eec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	193b      	adds	r3, r7, r4
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(T_SN_IN_GPIO_Port, &GPIO_InitStruct);
 8000efa:	193b      	adds	r3, r7, r4
 8000efc:	4a1b      	ldr	r2, [pc, #108]	; (8000f6c <HAL_ADC_MspInit+0x144>)
 8000efe:	0019      	movs	r1, r3
 8000f00:	0010      	movs	r0, r2
 8000f02:	f001 fb31 	bl	8002568 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000f08:	4a1a      	ldr	r2, [pc, #104]	; (8000f74 <HAL_ADC_MspInit+0x14c>)
 8000f0a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000f0e:	2205      	movs	r2, #5
 8000f10:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000f20:	2280      	movs	r2, #128	; 0x80
 8000f22:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000f26:	2280      	movs	r2, #128	; 0x80
 8000f28:	0052      	lsls	r2, r2, #1
 8000f2a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f2c:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	00d2      	lsls	r2, r2, #3
 8000f32:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000f42:	0018      	movs	r0, r3
 8000f44:	f001 f8be 	bl	80020c4 <HAL_DMA_Init>
 8000f48:	1e03      	subs	r3, r0, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8000f4c:	f7ff ff42 	bl	8000dd4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000f54:	651a      	str	r2, [r3, #80]	; 0x50
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_ADC_MspInit+0x148>)
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b011      	add	sp, #68	; 0x44
 8000f62:	bd90      	pop	{r4, r7, pc}
 8000f64:	40012400 	.word	0x40012400
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	50000400 	.word	0x50000400
 8000f70:	2000008c 	.word	0x2000008c
 8000f74:	40020008 	.word	0x40020008

08000f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <NMI_Handler+0x4>

08000f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <HardFault_Handler+0x4>

08000f84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9c:	f000 f91e 	bl	80011dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <DMA1_Channel1_IRQHandler+0x14>)
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f001 f998 	bl	80022e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	2000008c 	.word	0x2000008c

08000fc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc4:	46c0      	nop			; (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <uart1_1byte_read>:
		}
		data[0] = USART1->RDR;
	}
}

uint8_t uart1_1byte_read(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
	bool override = READ_BIT(USART1->ISR, USART_ISR_ORE);
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <uart1_1byte_read+0x5c>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	2208      	movs	r2, #8
 8000fd8:	401a      	ands	r2, r3
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	1e51      	subs	r1, r2, #1
 8000fde:	418a      	sbcs	r2, r1
 8000fe0:	701a      	strb	r2, [r3, #0]
	bool data_present = READ_BIT(USART1->ISR, USART_ISR_RXNE_RXFNE);
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <uart1_1byte_read+0x5c>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	2220      	movs	r2, #32
 8000fe8:	401a      	ands	r2, r3
 8000fea:	1dbb      	adds	r3, r7, #6
 8000fec:	1e51      	subs	r1, r2, #1
 8000fee:	418a      	sbcs	r2, r1
 8000ff0:	701a      	strb	r2, [r3, #0]
//	bool busy = READ_BIT(USART1->ISR, USART_ISR_BUSY);
	if ((data_present || override)) {
 8000ff2:	1dbb      	adds	r3, r7, #6
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d103      	bne.n	8001002 <uart1_1byte_read+0x36>
 8000ffa:	1dfb      	adds	r3, r7, #7
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00d      	beq.n	800101e <uart1_1byte_read+0x52>
		if (override)
 8001002:	1dfb      	adds	r3, r7, #7
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d005      	beq.n	8001016 <uart1_1byte_read+0x4a>
			SET_BIT(USART1->ICR, USART_ICR_ORECF);
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <uart1_1byte_read+0x5c>)
 800100c:	6a1a      	ldr	r2, [r3, #32]
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <uart1_1byte_read+0x5c>)
 8001010:	2108      	movs	r1, #8
 8001012:	430a      	orrs	r2, r1
 8001014:	621a      	str	r2, [r3, #32]
		return USART1->RDR;
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <uart1_1byte_read+0x5c>)
 8001018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101a:	b2db      	uxtb	r3, r3
 800101c:	e000      	b.n	8001020 <uart1_1byte_read+0x54>
	} else
		return '\0';
 800101e:	2300      	movs	r3, #0
}
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	b002      	add	sp, #8
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40013800 	.word	0x40013800

0800102c <uart1_read_to_frame>:

void  uart1_read_to_frame(UART1_t *u) {
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	if (u->rx_count >= RX_BUFFLEN) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7a1b      	ldrb	r3, [r3, #8]
 8001038:	2b18      	cmp	r3, #24
 800103a:	d906      	bls.n	800104a <uart1_read_to_frame+0x1e>
		uart1_clean_buffer(u);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	0018      	movs	r0, r3
 8001040:	f000 f814 	bl	800106c <uart1_clean_buffer>
		u->rx_count = 0;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	721a      	strb	r2, [r3, #8]
	}
	u->rx_buffer[u->rx_count++] = uart1_1byte_read();
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	7a1b      	ldrb	r3, [r3, #8]
 8001052:	1c59      	adds	r1, r3, #1
 8001054:	b2c8      	uxtb	r0, r1
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	7208      	strb	r0, [r1, #8]
 800105a:	18d4      	adds	r4, r2, r3
 800105c:	f7ff ffb6 	bl	8000fcc <uart1_1byte_read>
 8001060:	0003      	movs	r3, r0
 8001062:	7023      	strb	r3, [r4, #0]
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b003      	add	sp, #12
 800106a:	bd90      	pop	{r4, r7, pc}

0800106c <uart1_clean_buffer>:
			str[i] = (char) '\0';
		}
	}
}

void uart1_clean_buffer(UART1_t *u) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	u->rx_count = 0;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	721a      	strb	r2, [r3, #8]
	if (TX_BUFFLEN > RX_BUFFLEN) {
		for (int i = 0; i < TX_BUFFLEN; i++) {
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	e011      	b.n	80010a4 <uart1_clean_buffer+0x38>
			if (i < RX_BUFFLEN)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b18      	cmp	r3, #24
 8001084:	dc05      	bgt.n	8001092 <uart1_clean_buffer+0x26>
				u->rx_buffer[i] = 0x00;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	18d3      	adds	r3, r2, r3
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
			u->tx_buffer[i] = 0x00;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	18d3      	adds	r3, r2, r3
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < TX_BUFFLEN; i++) {
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3301      	adds	r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b63      	cmp	r3, #99	; 0x63
 80010a8:	ddea      	ble.n	8001080 <uart1_clean_buffer+0x14>
			if (i < TX_BUFFLEN)
				u->tx_buffer[i] = 0x00;
			u->rx_buffer[i] = 0x00;
		}
	}
}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b004      	add	sp, #16
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010b8:	f7ff ff82 	bl	8000fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010bc:	480c      	ldr	r0, [pc, #48]	; (80010f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80010be:	490d      	ldr	r1, [pc, #52]	; (80010f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <LoopForever+0xe>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d4:	4c0a      	ldr	r4, [pc, #40]	; (8001100 <LoopForever+0x16>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010e2:	f002 f9a5 	bl	8003430 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010e6:	f7ff fccf 	bl	8000a88 <main>

080010ea <LoopForever>:

LoopForever:
  b LoopForever
 80010ea:	e7fe      	b.n	80010ea <LoopForever>
  ldr   r0, =_estack
 80010ec:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80010f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010f8:	080034e8 	.word	0x080034e8
  ldr r2, =_sbss
 80010fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001100:	200000f8 	.word	0x200000f8

08001104 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC1_IRQHandler>
	...

08001108 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800110e:	1dfb      	adds	r3, r7, #7
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <HAL_Init+0x3c>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <HAL_Init+0x3c>)
 800111a:	2180      	movs	r1, #128	; 0x80
 800111c:	0049      	lsls	r1, r1, #1
 800111e:	430a      	orrs	r2, r1
 8001120:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001122:	2003      	movs	r0, #3
 8001124:	f000 f810 	bl	8001148 <HAL_InitTick>
 8001128:	1e03      	subs	r3, r0, #0
 800112a:	d003      	beq.n	8001134 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800112c:	1dfb      	adds	r3, r7, #7
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
 8001132:	e001      	b.n	8001138 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001134:	f7ff fe54 	bl	8000de0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	781b      	ldrb	r3, [r3, #0]
}
 800113c:	0018      	movs	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	b002      	add	sp, #8
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40022000 	.word	0x40022000

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001150:	230f      	movs	r3, #15
 8001152:	18fb      	adds	r3, r7, r3
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_InitTick+0x88>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d02b      	beq.n	80011b8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <HAL_InitTick+0x8c>)
 8001162:	681c      	ldr	r4, [r3, #0]
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <HAL_InitTick+0x88>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	0019      	movs	r1, r3
 800116a:	23fa      	movs	r3, #250	; 0xfa
 800116c:	0098      	lsls	r0, r3, #2
 800116e:	f7fe ffc7 	bl	8000100 <__udivsi3>
 8001172:	0003      	movs	r3, r0
 8001174:	0019      	movs	r1, r3
 8001176:	0020      	movs	r0, r4
 8001178:	f7fe ffc2 	bl	8000100 <__udivsi3>
 800117c:	0003      	movs	r3, r0
 800117e:	0018      	movs	r0, r3
 8001180:	f000 ff93 	bl	80020aa <HAL_SYSTICK_Config>
 8001184:	1e03      	subs	r3, r0, #0
 8001186:	d112      	bne.n	80011ae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b03      	cmp	r3, #3
 800118c:	d80a      	bhi.n	80011a4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	2301      	movs	r3, #1
 8001192:	425b      	negs	r3, r3
 8001194:	2200      	movs	r2, #0
 8001196:	0018      	movs	r0, r3
 8001198:	f000 ff62 	bl	8002060 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_InitTick+0x90>)
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e00d      	b.n	80011c0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011a4:	230f      	movs	r3, #15
 80011a6:	18fb      	adds	r3, r7, r3
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e008      	b.n	80011c0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ae:	230f      	movs	r3, #15
 80011b0:	18fb      	adds	r3, r7, r3
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
 80011b6:	e003      	b.n	80011c0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011b8:	230f      	movs	r3, #15
 80011ba:	18fb      	adds	r3, r7, r3
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011c0:	230f      	movs	r3, #15
 80011c2:	18fb      	adds	r3, r7, r3
 80011c4:	781b      	ldrb	r3, [r3, #0]
}
 80011c6:	0018      	movs	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b005      	add	sp, #20
 80011cc:	bd90      	pop	{r4, r7, pc}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000004 	.word	0x20000004

080011dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <HAL_IncTick+0x1c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	001a      	movs	r2, r3
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <HAL_IncTick+0x20>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	18d2      	adds	r2, r2, r3
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <HAL_IncTick+0x20>)
 80011ee:	601a      	str	r2, [r3, #0]
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	20000008 	.word	0x20000008
 80011fc:	200000f4 	.word	0x200000f4

08001200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;
 8001204:	4b02      	ldr	r3, [pc, #8]	; (8001210 <HAL_GetTick+0x10>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	0018      	movs	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	200000f4 	.word	0x200000f4

08001214 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a05      	ldr	r2, [pc, #20]	; (8001238 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001224:	401a      	ands	r2, r3
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	431a      	orrs	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	601a      	str	r2, [r3, #0]
}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	b002      	add	sp, #8
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	fe3fffff 	.word	0xfe3fffff

0800123c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	23e0      	movs	r3, #224	; 0xe0
 800124a:	045b      	lsls	r3, r3, #17
 800124c:	4013      	ands	r3, r2
}
 800124e:	0018      	movs	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	b002      	add	sp, #8
 8001254:	bd80      	pop	{r7, pc}

08001256 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b084      	sub	sp, #16
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	2104      	movs	r1, #4
 800126a:	400a      	ands	r2, r1
 800126c:	2107      	movs	r1, #7
 800126e:	4091      	lsls	r1, r2
 8001270:	000a      	movs	r2, r1
 8001272:	43d2      	mvns	r2, r2
 8001274:	401a      	ands	r2, r3
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	2104      	movs	r1, #4
 800127a:	400b      	ands	r3, r1
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4099      	lsls	r1, r3
 8001280:	000b      	movs	r3, r1
 8001282:	431a      	orrs	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	b004      	add	sp, #16
 800128e:	bd80      	pop	{r7, pc}

08001290 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	2104      	movs	r1, #4
 80012a2:	400a      	ands	r2, r1
 80012a4:	2107      	movs	r1, #7
 80012a6:	4091      	lsls	r1, r2
 80012a8:	000a      	movs	r2, r1
 80012aa:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	2104      	movs	r1, #4
 80012b0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80012b2:	40da      	lsrs	r2, r3
 80012b4:	0013      	movs	r3, r2
}
 80012b6:	0018      	movs	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b002      	add	sp, #8
 80012bc:	bd80      	pop	{r7, pc}

080012be <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	23c0      	movs	r3, #192	; 0xc0
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	4013      	ands	r3, r2
 80012d0:	d101      	bne.n	80012d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	0018      	movs	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	b002      	add	sp, #8
 80012de:	bd80      	pop	{r7, pc}

080012e0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	211f      	movs	r1, #31
 80012f4:	400a      	ands	r2, r1
 80012f6:	210f      	movs	r1, #15
 80012f8:	4091      	lsls	r1, r2
 80012fa:	000a      	movs	r2, r1
 80012fc:	43d2      	mvns	r2, r2
 80012fe:	401a      	ands	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	0e9b      	lsrs	r3, r3, #26
 8001304:	210f      	movs	r1, #15
 8001306:	4019      	ands	r1, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	201f      	movs	r0, #31
 800130c:	4003      	ands	r3, r0
 800130e:	4099      	lsls	r1, r3
 8001310:	000b      	movs	r3, r1
 8001312:	431a      	orrs	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	b004      	add	sp, #16
 800131e:	bd80      	pop	{r7, pc}

08001320 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	035b      	lsls	r3, r3, #13
 8001332:	0b5b      	lsrs	r3, r3, #13
 8001334:	431a      	orrs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	629a      	str	r2, [r3, #40]	; 0x28
}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b002      	add	sp, #8
 8001340:	bd80      	pop	{r7, pc}

08001342 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	0352      	lsls	r2, r2, #13
 8001354:	0b52      	lsrs	r2, r2, #13
 8001356:	43d2      	mvns	r2, r2
 8001358:	401a      	ands	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	b002      	add	sp, #8
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	695b      	ldr	r3, [r3, #20]
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	0212      	lsls	r2, r2, #8
 800137c:	43d2      	mvns	r2, r2
 800137e:	401a      	ands	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	400b      	ands	r3, r1
 8001388:	4904      	ldr	r1, [pc, #16]	; (800139c <LL_ADC_SetChannelSamplingTime+0x34>)
 800138a:	400b      	ands	r3, r1
 800138c:	431a      	orrs	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	46bd      	mov	sp, r7
 8001396:	b004      	add	sp, #16
 8001398:	bd80      	pop	{r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	07ffff00 	.word	0x07ffff00

080013a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <LL_ADC_EnableInternalRegulator+0x24>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	2280      	movs	r2, #128	; 0x80
 80013b2:	0552      	lsls	r2, r2, #21
 80013b4:	431a      	orrs	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	46bd      	mov	sp, r7
 80013be:	b002      	add	sp, #8
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	6fffffe8 	.word	0x6fffffe8

080013c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	055b      	lsls	r3, r3, #21
 80013d8:	401a      	ands	r2, r3
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	055b      	lsls	r3, r3, #21
 80013de:	429a      	cmp	r2, r3
 80013e0:	d101      	bne.n	80013e6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	0018      	movs	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b002      	add	sp, #8
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <LL_ADC_Enable+0x20>)
 80013fe:	4013      	ands	r3, r2
 8001400:	2201      	movs	r2, #1
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001408:	46c0      	nop			; (mov r8, r8)
 800140a:	46bd      	mov	sp, r7
 800140c:	b002      	add	sp, #8
 800140e:	bd80      	pop	{r7, pc}
 8001410:	7fffffe8 	.word	0x7fffffe8

08001414 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <LL_ADC_Disable+0x20>)
 8001422:	4013      	ands	r3, r2
 8001424:	2202      	movs	r2, #2
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	b002      	add	sp, #8
 8001432:	bd80      	pop	{r7, pc}
 8001434:	7fffffe8 	.word	0x7fffffe8

08001438 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2201      	movs	r2, #1
 8001446:	4013      	ands	r3, r2
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <LL_ADC_IsEnabled+0x18>
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <LL_ADC_IsEnabled+0x1a>
 8001450:	2300      	movs	r3, #0
}
 8001452:	0018      	movs	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	b002      	add	sp, #8
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	4a04      	ldr	r2, [pc, #16]	; (800147c <LL_ADC_REG_StartConversion+0x20>)
 800146a:	4013      	ands	r3, r2
 800146c:	2204      	movs	r2, #4
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b002      	add	sp, #8
 800147a:	bd80      	pop	{r7, pc}
 800147c:	7fffffe8 	.word	0x7fffffe8

08001480 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2204      	movs	r2, #4
 800148e:	4013      	ands	r3, r2
 8001490:	2b04      	cmp	r3, #4
 8001492:	d101      	bne.n	8001498 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001494:	2301      	movs	r3, #1
 8001496:	e000      	b.n	800149a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001498:	2300      	movs	r3, #0
}
 800149a:	0018      	movs	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	b002      	add	sp, #8
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ac:	231f      	movs	r3, #31
 80014ae:	18fb      	adds	r3, r7, r3
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e17f      	b.n	80017ca <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10a      	bne.n	80014e8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	0018      	movs	r0, r3
 80014d6:	f7ff fca7 	bl	8000e28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2254      	movs	r2, #84	; 0x54
 80014e4:	2100      	movs	r1, #0
 80014e6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	0018      	movs	r0, r3
 80014ee:	f7ff ff6b 	bl	80013c8 <LL_ADC_IsInternalRegulatorEnabled>
 80014f2:	1e03      	subs	r3, r0, #0
 80014f4:	d115      	bne.n	8001522 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	0018      	movs	r0, r3
 80014fc:	f7ff ff50 	bl	80013a0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001500:	4bb4      	ldr	r3, [pc, #720]	; (80017d4 <HAL_ADC_Init+0x330>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	49b4      	ldr	r1, [pc, #720]	; (80017d8 <HAL_ADC_Init+0x334>)
 8001506:	0018      	movs	r0, r3
 8001508:	f7fe fdfa 	bl	8000100 <__udivsi3>
 800150c:	0003      	movs	r3, r0
 800150e:	3301      	adds	r3, #1
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001514:	e002      	b.n	800151c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3b01      	subs	r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f9      	bne.n	8001516 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	0018      	movs	r0, r3
 8001528:	f7ff ff4e 	bl	80013c8 <LL_ADC_IsInternalRegulatorEnabled>
 800152c:	1e03      	subs	r3, r0, #0
 800152e:	d10f      	bne.n	8001550 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001534:	2210      	movs	r2, #16
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001540:	2201      	movs	r2, #1
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001548:	231f      	movs	r3, #31
 800154a:	18fb      	adds	r3, r7, r3
 800154c:	2201      	movs	r2, #1
 800154e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	0018      	movs	r0, r3
 8001556:	f7ff ff93 	bl	8001480 <LL_ADC_REG_IsConversionOngoing>
 800155a:	0003      	movs	r3, r0
 800155c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001562:	2210      	movs	r2, #16
 8001564:	4013      	ands	r3, r2
 8001566:	d000      	beq.n	800156a <HAL_ADC_Init+0xc6>
 8001568:	e122      	b.n	80017b0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d000      	beq.n	8001572 <HAL_ADC_Init+0xce>
 8001570:	e11e      	b.n	80017b0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001576:	4a99      	ldr	r2, [pc, #612]	; (80017dc <HAL_ADC_Init+0x338>)
 8001578:	4013      	ands	r3, r2
 800157a:	2202      	movs	r2, #2
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	0018      	movs	r0, r3
 8001588:	f7ff ff56 	bl	8001438 <LL_ADC_IsEnabled>
 800158c:	1e03      	subs	r3, r0, #0
 800158e:	d000      	beq.n	8001592 <HAL_ADC_Init+0xee>
 8001590:	e0ad      	b.n	80016ee <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7e1b      	ldrb	r3, [r3, #24]
 800159a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800159c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7e5b      	ldrb	r3, [r3, #25]
 80015a2:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80015a4:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	7e9b      	ldrb	r3, [r3, #26]
 80015aa:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80015ac:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <HAL_ADC_Init+0x118>
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	015b      	lsls	r3, r3, #5
 80015ba:	e000      	b.n	80015be <HAL_ADC_Init+0x11a>
 80015bc:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80015be:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80015c4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da04      	bge.n	80015d8 <HAL_ADC_Init+0x134>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	085b      	lsrs	r3, r3, #1
 80015d6:	e001      	b.n	80015dc <HAL_ADC_Init+0x138>
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80015dc:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	212c      	movs	r1, #44	; 0x2c
 80015e2:	5c5b      	ldrb	r3, [r3, r1]
 80015e4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80015e6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2220      	movs	r2, #32
 80015f2:	5c9b      	ldrb	r3, [r3, r2]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d115      	bne.n	8001624 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7e9b      	ldrb	r3, [r3, #26]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d105      	bne.n	800160c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2280      	movs	r2, #128	; 0x80
 8001604:	0252      	lsls	r2, r2, #9
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
 800160a:	e00b      	b.n	8001624 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001610:	2220      	movs	r2, #32
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161c:	2201      	movs	r2, #1
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00a      	beq.n	8001642 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001630:	23e0      	movs	r3, #224	; 0xe0
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800163a:	4313      	orrs	r3, r2
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4a65      	ldr	r2, [pc, #404]	; (80017e0 <HAL_ADC_Init+0x33c>)
 800164a:	4013      	ands	r3, r2
 800164c:	0019      	movs	r1, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	430a      	orrs	r2, r1
 8001656:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	0f9b      	lsrs	r3, r3, #30
 800165e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001664:	4313      	orrs	r3, r2
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	4313      	orrs	r3, r2
 800166a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	223c      	movs	r2, #60	; 0x3c
 8001670:	5c9b      	ldrb	r3, [r3, r2]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d111      	bne.n	800169a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	0f9b      	lsrs	r3, r3, #30
 800167c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001682:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001688:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800168e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	4313      	orrs	r3, r2
 8001694:	2201      	movs	r2, #1
 8001696:	4313      	orrs	r3, r2
 8001698:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	4a50      	ldr	r2, [pc, #320]	; (80017e4 <HAL_ADC_Init+0x340>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	0019      	movs	r1, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	23c0      	movs	r3, #192	; 0xc0
 80016b6:	061b      	lsls	r3, r3, #24
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d018      	beq.n	80016ee <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	05db      	lsls	r3, r3, #23
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d012      	beq.n	80016ee <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	061b      	lsls	r3, r3, #24
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d00c      	beq.n	80016ee <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80016d4:	4b44      	ldr	r3, [pc, #272]	; (80017e8 <HAL_ADC_Init+0x344>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a44      	ldr	r2, [pc, #272]	; (80017ec <HAL_ADC_Init+0x348>)
 80016da:	4013      	ands	r3, r2
 80016dc:	0019      	movs	r1, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	23f0      	movs	r3, #240	; 0xf0
 80016e4:	039b      	lsls	r3, r3, #14
 80016e6:	401a      	ands	r2, r3
 80016e8:	4b3f      	ldr	r3, [pc, #252]	; (80017e8 <HAL_ADC_Init+0x344>)
 80016ea:	430a      	orrs	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f6:	001a      	movs	r2, r3
 80016f8:	2100      	movs	r1, #0
 80016fa:	f7ff fdac 	bl	8001256 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001706:	493a      	ldr	r1, [pc, #232]	; (80017f0 <HAL_ADC_Init+0x34c>)
 8001708:	001a      	movs	r2, r3
 800170a:	f7ff fda4 	bl	8001256 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d109      	bne.n	800172a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2110      	movs	r1, #16
 8001722:	4249      	negs	r1, r1
 8001724:	430a      	orrs	r2, r1
 8001726:	629a      	str	r2, [r3, #40]	; 0x28
 8001728:	e018      	b.n	800175c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691a      	ldr	r2, [r3, #16]
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	039b      	lsls	r3, r3, #14
 8001732:	429a      	cmp	r2, r3
 8001734:	d112      	bne.n	800175c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	3b01      	subs	r3, #1
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	221c      	movs	r2, #28
 8001746:	4013      	ands	r3, r2
 8001748:	2210      	movs	r2, #16
 800174a:	4252      	negs	r2, r2
 800174c:	409a      	lsls	r2, r3
 800174e:	0011      	movs	r1, r2
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2100      	movs	r1, #0
 8001762:	0018      	movs	r0, r3
 8001764:	f7ff fd94 	bl	8001290 <LL_ADC_GetSamplingTimeCommonChannels>
 8001768:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800176e:	429a      	cmp	r2, r3
 8001770:	d10b      	bne.n	800178a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	2203      	movs	r2, #3
 800177e:	4393      	bics	r3, r2
 8001780:	2201      	movs	r2, #1
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001788:	e01c      	b.n	80017c4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178e:	2212      	movs	r2, #18
 8001790:	4393      	bics	r3, r2
 8001792:	2210      	movs	r2, #16
 8001794:	431a      	orrs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179e:	2201      	movs	r2, #1
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80017a6:	231f      	movs	r3, #31
 80017a8:	18fb      	adds	r3, r7, r3
 80017aa:	2201      	movs	r2, #1
 80017ac:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017ae:	e009      	b.n	80017c4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b4:	2210      	movs	r2, #16
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017bc:	231f      	movs	r3, #31
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80017c4:	231f      	movs	r3, #31
 80017c6:	18fb      	adds	r3, r7, r3
 80017c8:	781b      	ldrb	r3, [r3, #0]
}
 80017ca:	0018      	movs	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b008      	add	sp, #32
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	20000000 	.word	0x20000000
 80017d8:	00030d40 	.word	0x00030d40
 80017dc:	fffffefd 	.word	0xfffffefd
 80017e0:	fffe0201 	.word	0xfffe0201
 80017e4:	1ffffc02 	.word	0x1ffffc02
 80017e8:	40012708 	.word	0x40012708
 80017ec:	ffc3ffff 	.word	0xffc3ffff
 80017f0:	07ffff04 	.word	0x07ffff04

080017f4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80017f4:	b5b0      	push	{r4, r5, r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	0018      	movs	r0, r3
 8001806:	f7ff fe3b 	bl	8001480 <LL_ADC_REG_IsConversionOngoing>
 800180a:	1e03      	subs	r3, r0, #0
 800180c:	d16c      	bne.n	80018e8 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2254      	movs	r2, #84	; 0x54
 8001812:	5c9b      	ldrb	r3, [r3, r2]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_ADC_Start_DMA+0x28>
 8001818:	2302      	movs	r3, #2
 800181a:	e06c      	b.n	80018f6 <HAL_ADC_Start_DMA+0x102>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2254      	movs	r2, #84	; 0x54
 8001820:	2101      	movs	r1, #1
 8001822:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	2201      	movs	r2, #1
 800182c:	4013      	ands	r3, r2
 800182e:	d113      	bne.n	8001858 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0018      	movs	r0, r3
 8001836:	f7ff fdff 	bl	8001438 <LL_ADC_IsEnabled>
 800183a:	1e03      	subs	r3, r0, #0
 800183c:	d004      	beq.n	8001848 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	0018      	movs	r0, r3
 8001844:	f7ff fde6 	bl	8001414 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2101      	movs	r1, #1
 8001854:	430a      	orrs	r2, r1
 8001856:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001858:	2517      	movs	r5, #23
 800185a:	197c      	adds	r4, r7, r5
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	0018      	movs	r0, r3
 8001860:	f000 fa3e 	bl	8001ce0 <ADC_Enable>
 8001864:	0003      	movs	r3, r0
 8001866:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001868:	002c      	movs	r4, r5
 800186a:	193b      	adds	r3, r7, r4
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d13e      	bne.n	80018f0 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001876:	4a22      	ldr	r2, [pc, #136]	; (8001900 <HAL_ADC_Start_DMA+0x10c>)
 8001878:	4013      	ands	r3, r2
 800187a:	2280      	movs	r2, #128	; 0x80
 800187c:	0052      	lsls	r2, r2, #1
 800187e:	431a      	orrs	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800188e:	4a1d      	ldr	r2, [pc, #116]	; (8001904 <HAL_ADC_Start_DMA+0x110>)
 8001890:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001896:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <HAL_ADC_Start_DMA+0x114>)
 8001898:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800189e:	4a1b      	ldr	r2, [pc, #108]	; (800190c <HAL_ADC_Start_DMA+0x118>)
 80018a0:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	221c      	movs	r2, #28
 80018a8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2254      	movs	r2, #84	; 0x54
 80018ae:	2100      	movs	r1, #0
 80018b0:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2110      	movs	r1, #16
 80018be:	430a      	orrs	r2, r1
 80018c0:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	3340      	adds	r3, #64	; 0x40
 80018cc:	0019      	movs	r1, r3
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	193c      	adds	r4, r7, r4
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f000 fc80 	bl	80021d8 <HAL_DMA_Start_IT>
 80018d8:	0003      	movs	r3, r0
 80018da:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	0018      	movs	r0, r3
 80018e2:	f7ff fdbb 	bl	800145c <LL_ADC_REG_StartConversion>
 80018e6:	e003      	b.n	80018f0 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018e8:	2317      	movs	r3, #23
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	2202      	movs	r2, #2
 80018ee:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80018f0:	2317      	movs	r3, #23
 80018f2:	18fb      	adds	r3, r7, r3
 80018f4:	781b      	ldrb	r3, [r3, #0]
}
 80018f6:	0018      	movs	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b006      	add	sp, #24
 80018fc:	bdb0      	pop	{r4, r5, r7, pc}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	fffff0fe 	.word	0xfffff0fe
 8001904:	08001ded 	.word	0x08001ded
 8001908:	08001eb5 	.word	0x08001eb5
 800190c:	08001ed3 	.word	0x08001ed3

08001910 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001918:	46c0      	nop			; (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	b002      	add	sp, #8
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001928:	46c0      	nop			; (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	b002      	add	sp, #8
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800193a:	2317      	movs	r3, #23
 800193c:	18fb      	adds	r3, r7, r3
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2254      	movs	r2, #84	; 0x54
 800194a:	5c9b      	ldrb	r3, [r3, r2]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x24>
 8001950:	2302      	movs	r3, #2
 8001952:	e1c0      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x3a6>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2254      	movs	r2, #84	; 0x54
 8001958:	2101      	movs	r1, #1
 800195a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	0018      	movs	r0, r3
 8001962:	f7ff fd8d 	bl	8001480 <LL_ADC_REG_IsConversionOngoing>
 8001966:	1e03      	subs	r3, r0, #0
 8001968:	d000      	beq.n	800196c <HAL_ADC_ConfigChannel+0x3c>
 800196a:	e1a3      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d100      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x46>
 8001974:	e143      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691a      	ldr	r2, [r3, #16]
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	061b      	lsls	r3, r3, #24
 800197e:	429a      	cmp	r2, r3
 8001980:	d004      	beq.n	800198c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001986:	4ac1      	ldr	r2, [pc, #772]	; (8001c8c <HAL_ADC_ConfigChannel+0x35c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d108      	bne.n	800199e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	0019      	movs	r1, r3
 8001996:	0010      	movs	r0, r2
 8001998:	f7ff fcc2 	bl	8001320 <LL_ADC_REG_SetSequencerChAdd>
 800199c:	e0c9      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	211f      	movs	r1, #31
 80019a8:	400b      	ands	r3, r1
 80019aa:	210f      	movs	r1, #15
 80019ac:	4099      	lsls	r1, r3
 80019ae:	000b      	movs	r3, r1
 80019b0:	43db      	mvns	r3, r3
 80019b2:	4013      	ands	r3, r2
 80019b4:	0019      	movs	r1, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	035b      	lsls	r3, r3, #13
 80019bc:	0b5b      	lsrs	r3, r3, #13
 80019be:	d105      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x9c>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	0e9b      	lsrs	r3, r3, #26
 80019c6:	221f      	movs	r2, #31
 80019c8:	4013      	ands	r3, r2
 80019ca:	e098      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1ce>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2201      	movs	r2, #1
 80019d2:	4013      	ands	r3, r2
 80019d4:	d000      	beq.n	80019d8 <HAL_ADC_ConfigChannel+0xa8>
 80019d6:	e091      	b.n	8001afc <HAL_ADC_ConfigChannel+0x1cc>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2202      	movs	r2, #2
 80019de:	4013      	ands	r3, r2
 80019e0:	d000      	beq.n	80019e4 <HAL_ADC_ConfigChannel+0xb4>
 80019e2:	e089      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x1c8>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2204      	movs	r2, #4
 80019ea:	4013      	ands	r3, r2
 80019ec:	d000      	beq.n	80019f0 <HAL_ADC_ConfigChannel+0xc0>
 80019ee:	e081      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x1c4>
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2208      	movs	r2, #8
 80019f6:	4013      	ands	r3, r2
 80019f8:	d000      	beq.n	80019fc <HAL_ADC_ConfigChannel+0xcc>
 80019fa:	e079      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x1c0>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2210      	movs	r2, #16
 8001a02:	4013      	ands	r3, r2
 8001a04:	d000      	beq.n	8001a08 <HAL_ADC_ConfigChannel+0xd8>
 8001a06:	e071      	b.n	8001aec <HAL_ADC_ConfigChannel+0x1bc>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d000      	beq.n	8001a14 <HAL_ADC_ConfigChannel+0xe4>
 8001a12:	e069      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x1b8>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2240      	movs	r2, #64	; 0x40
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d000      	beq.n	8001a20 <HAL_ADC_ConfigChannel+0xf0>
 8001a1e:	e061      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x1b4>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2280      	movs	r2, #128	; 0x80
 8001a26:	4013      	ands	r3, r2
 8001a28:	d000      	beq.n	8001a2c <HAL_ADC_ConfigChannel+0xfc>
 8001a2a:	e059      	b.n	8001ae0 <HAL_ADC_ConfigChannel+0x1b0>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4013      	ands	r3, r2
 8001a36:	d151      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x1ac>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4013      	ands	r3, r2
 8001a42:	d149      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x1a8>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d141      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x1a4>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d139      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x1a0>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	015b      	lsls	r3, r3, #5
 8001a64:	4013      	ands	r3, r2
 8001a66:	d131      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x19c>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	019b      	lsls	r3, r3, #6
 8001a70:	4013      	ands	r3, r2
 8001a72:	d129      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x198>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	01db      	lsls	r3, r3, #7
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d121      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x194>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d119      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x190>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	025b      	lsls	r3, r3, #9
 8001a94:	4013      	ands	r3, r2
 8001a96:	d111      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x18c>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	029b      	lsls	r3, r3, #10
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d109      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x188>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	02db      	lsls	r3, r3, #11
 8001aac:	4013      	ands	r3, r2
 8001aae:	d001      	beq.n	8001ab4 <HAL_ADC_ConfigChannel+0x184>
 8001ab0:	2312      	movs	r3, #18
 8001ab2:	e024      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1ce>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e022      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1ce>
 8001ab8:	2311      	movs	r3, #17
 8001aba:	e020      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1ce>
 8001abc:	2310      	movs	r3, #16
 8001abe:	e01e      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1ce>
 8001ac0:	230f      	movs	r3, #15
 8001ac2:	e01c      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1ce>
 8001ac4:	230e      	movs	r3, #14
 8001ac6:	e01a      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1ce>
 8001ac8:	230d      	movs	r3, #13
 8001aca:	e018      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1ce>
 8001acc:	230c      	movs	r3, #12
 8001ace:	e016      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1ce>
 8001ad0:	230b      	movs	r3, #11
 8001ad2:	e014      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1ce>
 8001ad4:	230a      	movs	r3, #10
 8001ad6:	e012      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1ce>
 8001ad8:	2309      	movs	r3, #9
 8001ada:	e010      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1ce>
 8001adc:	2308      	movs	r3, #8
 8001ade:	e00e      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1ce>
 8001ae0:	2307      	movs	r3, #7
 8001ae2:	e00c      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1ce>
 8001ae4:	2306      	movs	r3, #6
 8001ae6:	e00a      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1ce>
 8001ae8:	2305      	movs	r3, #5
 8001aea:	e008      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1ce>
 8001aec:	2304      	movs	r3, #4
 8001aee:	e006      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1ce>
 8001af0:	2303      	movs	r3, #3
 8001af2:	e004      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1ce>
 8001af4:	2302      	movs	r3, #2
 8001af6:	e002      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1ce>
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <HAL_ADC_ConfigChannel+0x1ce>
 8001afc:	2300      	movs	r3, #0
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	6852      	ldr	r2, [r2, #4]
 8001b02:	201f      	movs	r0, #31
 8001b04:	4002      	ands	r2, r0
 8001b06:	4093      	lsls	r3, r2
 8001b08:	000a      	movs	r2, r1
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	089b      	lsrs	r3, r3, #2
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d808      	bhi.n	8001b32 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	6859      	ldr	r1, [r3, #4]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	001a      	movs	r2, r3
 8001b2e:	f7ff fbd7 	bl	80012e0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	6819      	ldr	r1, [r3, #0]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	001a      	movs	r2, r3
 8001b40:	f7ff fc12 	bl	8001368 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	db00      	blt.n	8001b4e <HAL_ADC_ConfigChannel+0x21e>
 8001b4c:	e0bc      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b4e:	4b50      	ldr	r3, [pc, #320]	; (8001c90 <HAL_ADC_ConfigChannel+0x360>)
 8001b50:	0018      	movs	r0, r3
 8001b52:	f7ff fb73 	bl	800123c <LL_ADC_GetCommonPathInternalCh>
 8001b56:	0003      	movs	r3, r0
 8001b58:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a4d      	ldr	r2, [pc, #308]	; (8001c94 <HAL_ADC_ConfigChannel+0x364>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d122      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	041b      	lsls	r3, r3, #16
 8001b6a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b6c:	d11d      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	2280      	movs	r2, #128	; 0x80
 8001b72:	0412      	lsls	r2, r2, #16
 8001b74:	4313      	orrs	r3, r2
 8001b76:	4a46      	ldr	r2, [pc, #280]	; (8001c90 <HAL_ADC_ConfigChannel+0x360>)
 8001b78:	0019      	movs	r1, r3
 8001b7a:	0010      	movs	r0, r2
 8001b7c:	f7ff fb4a 	bl	8001214 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b80:	4b45      	ldr	r3, [pc, #276]	; (8001c98 <HAL_ADC_ConfigChannel+0x368>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4945      	ldr	r1, [pc, #276]	; (8001c9c <HAL_ADC_ConfigChannel+0x36c>)
 8001b86:	0018      	movs	r0, r3
 8001b88:	f7fe faba 	bl	8000100 <__udivsi3>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	0013      	movs	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	189b      	adds	r3, r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b9a:	e002      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f9      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ba8:	e08e      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a3c      	ldr	r2, [pc, #240]	; (8001ca0 <HAL_ADC_ConfigChannel+0x370>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d10e      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	045b      	lsls	r3, r3, #17
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d109      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2280      	movs	r2, #128	; 0x80
 8001bc2:	0452      	lsls	r2, r2, #17
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	4a32      	ldr	r2, [pc, #200]	; (8001c90 <HAL_ADC_ConfigChannel+0x360>)
 8001bc8:	0019      	movs	r1, r3
 8001bca:	0010      	movs	r0, r2
 8001bcc:	f7ff fb22 	bl	8001214 <LL_ADC_SetCommonPathInternalCh>
 8001bd0:	e07a      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a33      	ldr	r2, [pc, #204]	; (8001ca4 <HAL_ADC_ConfigChannel+0x374>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d000      	beq.n	8001bde <HAL_ADC_ConfigChannel+0x2ae>
 8001bdc:	e074      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	03db      	lsls	r3, r3, #15
 8001be4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001be6:	d000      	beq.n	8001bea <HAL_ADC_ConfigChannel+0x2ba>
 8001be8:	e06e      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	2280      	movs	r2, #128	; 0x80
 8001bee:	03d2      	lsls	r2, r2, #15
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	4a27      	ldr	r2, [pc, #156]	; (8001c90 <HAL_ADC_ConfigChannel+0x360>)
 8001bf4:	0019      	movs	r1, r3
 8001bf6:	0010      	movs	r0, r2
 8001bf8:	f7ff fb0c 	bl	8001214 <LL_ADC_SetCommonPathInternalCh>
 8001bfc:	e064      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691a      	ldr	r2, [r3, #16]
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	061b      	lsls	r3, r3, #24
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d004      	beq.n	8001c14 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c0e:	4a1f      	ldr	r2, [pc, #124]	; (8001c8c <HAL_ADC_ConfigChannel+0x35c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d107      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	0010      	movs	r0, r2
 8001c20:	f7ff fb8f 	bl	8001342 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	da4d      	bge.n	8001cc8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c2c:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <HAL_ADC_ConfigChannel+0x360>)
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f7ff fb04 	bl	800123c <LL_ADC_GetCommonPathInternalCh>
 8001c34:	0003      	movs	r3, r0
 8001c36:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a15      	ldr	r2, [pc, #84]	; (8001c94 <HAL_ADC_ConfigChannel+0x364>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d108      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4a18      	ldr	r2, [pc, #96]	; (8001ca8 <HAL_ADC_ConfigChannel+0x378>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	4a11      	ldr	r2, [pc, #68]	; (8001c90 <HAL_ADC_ConfigChannel+0x360>)
 8001c4a:	0019      	movs	r1, r3
 8001c4c:	0010      	movs	r0, r2
 8001c4e:	f7ff fae1 	bl	8001214 <LL_ADC_SetCommonPathInternalCh>
 8001c52:	e039      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a11      	ldr	r2, [pc, #68]	; (8001ca0 <HAL_ADC_ConfigChannel+0x370>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d108      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4a12      	ldr	r2, [pc, #72]	; (8001cac <HAL_ADC_ConfigChannel+0x37c>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <HAL_ADC_ConfigChannel+0x360>)
 8001c66:	0019      	movs	r1, r3
 8001c68:	0010      	movs	r0, r2
 8001c6a:	f7ff fad3 	bl	8001214 <LL_ADC_SetCommonPathInternalCh>
 8001c6e:	e02b      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0b      	ldr	r2, [pc, #44]	; (8001ca4 <HAL_ADC_ConfigChannel+0x374>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d126      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4a0c      	ldr	r2, [pc, #48]	; (8001cb0 <HAL_ADC_ConfigChannel+0x380>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	4a03      	ldr	r2, [pc, #12]	; (8001c90 <HAL_ADC_ConfigChannel+0x360>)
 8001c82:	0019      	movs	r1, r3
 8001c84:	0010      	movs	r0, r2
 8001c86:	f7ff fac5 	bl	8001214 <LL_ADC_SetCommonPathInternalCh>
 8001c8a:	e01d      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x398>
 8001c8c:	80000004 	.word	0x80000004
 8001c90:	40012708 	.word	0x40012708
 8001c94:	b0001000 	.word	0xb0001000
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	00030d40 	.word	0x00030d40
 8001ca0:	b8004000 	.word	0xb8004000
 8001ca4:	b4002000 	.word	0xb4002000
 8001ca8:	ff7fffff 	.word	0xff7fffff
 8001cac:	feffffff 	.word	0xfeffffff
 8001cb0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb8:	2220      	movs	r2, #32
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cc0:	2317      	movs	r3, #23
 8001cc2:	18fb      	adds	r3, r7, r3
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2254      	movs	r2, #84	; 0x54
 8001ccc:	2100      	movs	r1, #0
 8001cce:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001cd0:	2317      	movs	r3, #23
 8001cd2:	18fb      	adds	r3, r7, r3
 8001cd4:	781b      	ldrb	r3, [r3, #0]
}
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b006      	add	sp, #24
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)

08001ce0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f7ff fba1 	bl	8001438 <LL_ADC_IsEnabled>
 8001cf6:	1e03      	subs	r3, r0, #0
 8001cf8:	d000      	beq.n	8001cfc <ADC_Enable+0x1c>
 8001cfa:	e069      	b.n	8001dd0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	4a36      	ldr	r2, [pc, #216]	; (8001ddc <ADC_Enable+0xfc>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	d00d      	beq.n	8001d24 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0c:	2210      	movs	r2, #16
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d18:	2201      	movs	r2, #1
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e056      	b.n	8001dd2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f7ff fb61 	bl	80013f0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	; (8001de0 <ADC_Enable+0x100>)
 8001d30:	0018      	movs	r0, r3
 8001d32:	f7ff fa83 	bl	800123c <LL_ADC_GetCommonPathInternalCh>
 8001d36:	0002      	movs	r2, r0
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	041b      	lsls	r3, r3, #16
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d00f      	beq.n	8001d60 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d40:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <ADC_Enable+0x104>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4928      	ldr	r1, [pc, #160]	; (8001de8 <ADC_Enable+0x108>)
 8001d46:	0018      	movs	r0, r3
 8001d48:	f7fe f9da 	bl	8000100 <__udivsi3>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8001d50:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001d52:	e002      	b.n	8001d5a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f9      	bne.n	8001d54 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	7e5b      	ldrb	r3, [r3, #25]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d033      	beq.n	8001dd0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001d68:	f7ff fa4a 	bl	8001200 <HAL_GetTick>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d70:	e027      	b.n	8001dc2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	0018      	movs	r0, r3
 8001d78:	f7ff fb5e 	bl	8001438 <LL_ADC_IsEnabled>
 8001d7c:	1e03      	subs	r3, r0, #0
 8001d7e:	d104      	bne.n	8001d8a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0018      	movs	r0, r3
 8001d86:	f7ff fb33 	bl	80013f0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d8a:	f7ff fa39 	bl	8001200 <HAL_GetTick>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d914      	bls.n	8001dc2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d00d      	beq.n	8001dc2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	2210      	movs	r2, #16
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db6:	2201      	movs	r2, #1
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e007      	b.n	8001dd2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d1d0      	bne.n	8001d72 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b004      	add	sp, #16
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	80000017 	.word	0x80000017
 8001de0:	40012708 	.word	0x40012708
 8001de4:	20000000 	.word	0x20000000
 8001de8:	00030d40 	.word	0x00030d40

08001dec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfe:	2250      	movs	r2, #80	; 0x50
 8001e00:	4013      	ands	r3, r2
 8001e02:	d141      	bne.n	8001e88 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e08:	2280      	movs	r2, #128	; 0x80
 8001e0a:	0092      	lsls	r2, r2, #2
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	0018      	movs	r0, r3
 8001e18:	f7ff fa51 	bl	80012be <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e1c:	1e03      	subs	r3, r0, #0
 8001e1e:	d02e      	beq.n	8001e7e <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	7e9b      	ldrb	r3, [r3, #26]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d12a      	bne.n	8001e7e <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2208      	movs	r2, #8
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d123      	bne.n	8001e7e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f7ff fb20 	bl	8001480 <LL_ADC_REG_IsConversionOngoing>
 8001e40:	1e03      	subs	r3, r0, #0
 8001e42:	d110      	bne.n	8001e66 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	210c      	movs	r1, #12
 8001e50:	438a      	bics	r2, r1
 8001e52:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	4a15      	ldr	r2, [pc, #84]	; (8001eb0 <ADC_DMAConvCplt+0xc4>)
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	659a      	str	r2, [r3, #88]	; 0x58
 8001e64:	e00b      	b.n	8001e7e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e76:	2201      	movs	r2, #1
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7fe fde5 	bl	8000a50 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e86:	e00f      	b.n	8001ea8 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8c:	2210      	movs	r2, #16
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d004      	beq.n	8001e9c <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7ff fd43 	bl	8001920 <HAL_ADC_ErrorCallback>
}
 8001e9a:	e005      	b.n	8001ea8 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	0010      	movs	r0, r2
 8001ea6:	4798      	blx	r3
}
 8001ea8:	46c0      	nop			; (mov r8, r8)
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b004      	add	sp, #16
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	fffffefe 	.word	0xfffffefe

08001eb4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f7ff fd23 	bl	8001910 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b004      	add	sp, #16
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee4:	2240      	movs	r2, #64	; 0x40
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	0018      	movs	r0, r3
 8001efc:	f7ff fd10 	bl	8001920 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f00:	46c0      	nop			; (mov r8, r8)
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b004      	add	sp, #16
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	0002      	movs	r2, r0
 8001f10:	1dfb      	adds	r3, r7, #7
 8001f12:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f14:	1dfb      	adds	r3, r7, #7
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b7f      	cmp	r3, #127	; 0x7f
 8001f1a:	d809      	bhi.n	8001f30 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1c:	1dfb      	adds	r3, r7, #7
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	001a      	movs	r2, r3
 8001f22:	231f      	movs	r3, #31
 8001f24:	401a      	ands	r2, r3
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <__NVIC_EnableIRQ+0x30>)
 8001f28:	2101      	movs	r1, #1
 8001f2a:	4091      	lsls	r1, r2
 8001f2c:	000a      	movs	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001f30:	46c0      	nop			; (mov r8, r8)
 8001f32:	46bd      	mov	sp, r7
 8001f34:	b002      	add	sp, #8
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	e000e100 	.word	0xe000e100

08001f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	0002      	movs	r2, r0
 8001f44:	6039      	str	r1, [r7, #0]
 8001f46:	1dfb      	adds	r3, r7, #7
 8001f48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f4a:	1dfb      	adds	r3, r7, #7
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b7f      	cmp	r3, #127	; 0x7f
 8001f50:	d828      	bhi.n	8001fa4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f52:	4a2f      	ldr	r2, [pc, #188]	; (8002010 <__NVIC_SetPriority+0xd4>)
 8001f54:	1dfb      	adds	r3, r7, #7
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	b25b      	sxtb	r3, r3
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	33c0      	adds	r3, #192	; 0xc0
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	589b      	ldr	r3, [r3, r2]
 8001f62:	1dfa      	adds	r2, r7, #7
 8001f64:	7812      	ldrb	r2, [r2, #0]
 8001f66:	0011      	movs	r1, r2
 8001f68:	2203      	movs	r2, #3
 8001f6a:	400a      	ands	r2, r1
 8001f6c:	00d2      	lsls	r2, r2, #3
 8001f6e:	21ff      	movs	r1, #255	; 0xff
 8001f70:	4091      	lsls	r1, r2
 8001f72:	000a      	movs	r2, r1
 8001f74:	43d2      	mvns	r2, r2
 8001f76:	401a      	ands	r2, r3
 8001f78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	019b      	lsls	r3, r3, #6
 8001f7e:	22ff      	movs	r2, #255	; 0xff
 8001f80:	401a      	ands	r2, r3
 8001f82:	1dfb      	adds	r3, r7, #7
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	0018      	movs	r0, r3
 8001f88:	2303      	movs	r3, #3
 8001f8a:	4003      	ands	r3, r0
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f90:	481f      	ldr	r0, [pc, #124]	; (8002010 <__NVIC_SetPriority+0xd4>)
 8001f92:	1dfb      	adds	r3, r7, #7
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	b25b      	sxtb	r3, r3
 8001f98:	089b      	lsrs	r3, r3, #2
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	33c0      	adds	r3, #192	; 0xc0
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fa2:	e031      	b.n	8002008 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fa4:	4a1b      	ldr	r2, [pc, #108]	; (8002014 <__NVIC_SetPriority+0xd8>)
 8001fa6:	1dfb      	adds	r3, r7, #7
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	0019      	movs	r1, r3
 8001fac:	230f      	movs	r3, #15
 8001fae:	400b      	ands	r3, r1
 8001fb0:	3b08      	subs	r3, #8
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3306      	adds	r3, #6
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	18d3      	adds	r3, r2, r3
 8001fba:	3304      	adds	r3, #4
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	1dfa      	adds	r2, r7, #7
 8001fc0:	7812      	ldrb	r2, [r2, #0]
 8001fc2:	0011      	movs	r1, r2
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	400a      	ands	r2, r1
 8001fc8:	00d2      	lsls	r2, r2, #3
 8001fca:	21ff      	movs	r1, #255	; 0xff
 8001fcc:	4091      	lsls	r1, r2
 8001fce:	000a      	movs	r2, r1
 8001fd0:	43d2      	mvns	r2, r2
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	019b      	lsls	r3, r3, #6
 8001fda:	22ff      	movs	r2, #255	; 0xff
 8001fdc:	401a      	ands	r2, r3
 8001fde:	1dfb      	adds	r3, r7, #7
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	4003      	ands	r3, r0
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fec:	4809      	ldr	r0, [pc, #36]	; (8002014 <__NVIC_SetPriority+0xd8>)
 8001fee:	1dfb      	adds	r3, r7, #7
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	001c      	movs	r4, r3
 8001ff4:	230f      	movs	r3, #15
 8001ff6:	4023      	ands	r3, r4
 8001ff8:	3b08      	subs	r3, #8
 8001ffa:	089b      	lsrs	r3, r3, #2
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	3306      	adds	r3, #6
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	18c3      	adds	r3, r0, r3
 8002004:	3304      	adds	r3, #4
 8002006:	601a      	str	r2, [r3, #0]
}
 8002008:	46c0      	nop			; (mov r8, r8)
 800200a:	46bd      	mov	sp, r7
 800200c:	b003      	add	sp, #12
 800200e:	bd90      	pop	{r4, r7, pc}
 8002010:	e000e100 	.word	0xe000e100
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	1e5a      	subs	r2, r3, #1
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	045b      	lsls	r3, r3, #17
 8002028:	429a      	cmp	r2, r3
 800202a:	d301      	bcc.n	8002030 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202c:	2301      	movs	r3, #1
 800202e:	e010      	b.n	8002052 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002030:	4b0a      	ldr	r3, [pc, #40]	; (800205c <SysTick_Config+0x44>)
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	3a01      	subs	r2, #1
 8002036:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002038:	2301      	movs	r3, #1
 800203a:	425b      	negs	r3, r3
 800203c:	2103      	movs	r1, #3
 800203e:	0018      	movs	r0, r3
 8002040:	f7ff ff7c 	bl	8001f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <SysTick_Config+0x44>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204a:	4b04      	ldr	r3, [pc, #16]	; (800205c <SysTick_Config+0x44>)
 800204c:	2207      	movs	r2, #7
 800204e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002050:	2300      	movs	r3, #0
}
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	b002      	add	sp, #8
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	e000e010 	.word	0xe000e010

08002060 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	210f      	movs	r1, #15
 800206c:	187b      	adds	r3, r7, r1
 800206e:	1c02      	adds	r2, r0, #0
 8002070:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	187b      	adds	r3, r7, r1
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	b25b      	sxtb	r3, r3
 800207a:	0011      	movs	r1, r2
 800207c:	0018      	movs	r0, r3
 800207e:	f7ff ff5d 	bl	8001f3c <__NVIC_SetPriority>
}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	46bd      	mov	sp, r7
 8002086:	b004      	add	sp, #16
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	0002      	movs	r2, r0
 8002092:	1dfb      	adds	r3, r7, #7
 8002094:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002096:	1dfb      	adds	r3, r7, #7
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	b25b      	sxtb	r3, r3
 800209c:	0018      	movs	r0, r3
 800209e:	f7ff ff33 	bl	8001f08 <__NVIC_EnableIRQ>
}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b002      	add	sp, #8
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	0018      	movs	r0, r3
 80020b6:	f7ff ffaf 	bl	8002018 <SysTick_Config>
 80020ba:	0003      	movs	r3, r0
}
 80020bc:	0018      	movs	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	b002      	add	sp, #8
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e077      	b.n	80021c6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a3d      	ldr	r2, [pc, #244]	; (80021d0 <HAL_DMA_Init+0x10c>)
 80020dc:	4694      	mov	ip, r2
 80020de:	4463      	add	r3, ip
 80020e0:	2114      	movs	r1, #20
 80020e2:	0018      	movs	r0, r3
 80020e4:	f7fe f80c 	bl	8000100 <__udivsi3>
 80020e8:	0003      	movs	r3, r0
 80020ea:	009a      	lsls	r2, r3, #2
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2225      	movs	r2, #37	; 0x25
 80020f4:	2102      	movs	r1, #2
 80020f6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4934      	ldr	r1, [pc, #208]	; (80021d4 <HAL_DMA_Init+0x110>)
 8002104:	400a      	ands	r2, r1
 8002106:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6819      	ldr	r1, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	0018      	movs	r0, r3
 8002142:	f000 f9c1 	bl	80024c8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	01db      	lsls	r3, r3, #7
 800214e:	429a      	cmp	r2, r3
 8002150:	d102      	bne.n	8002158 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002160:	213f      	movs	r1, #63	; 0x3f
 8002162:	400a      	ands	r2, r1
 8002164:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800216e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d011      	beq.n	800219c <HAL_DMA_Init+0xd8>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b04      	cmp	r3, #4
 800217e:	d80d      	bhi.n	800219c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	0018      	movs	r0, r3
 8002184:	f000 f9cc 	bl	8002520 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	e008      	b.n	80021ae <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2225      	movs	r2, #37	; 0x25
 80021b8:	2101      	movs	r1, #1
 80021ba:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2224      	movs	r2, #36	; 0x24
 80021c0:	2100      	movs	r1, #0
 80021c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	0018      	movs	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	b002      	add	sp, #8
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	bffdfff8 	.word	0xbffdfff8
 80021d4:	ffff800f 	.word	0xffff800f

080021d8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021e6:	2317      	movs	r3, #23
 80021e8:	18fb      	adds	r3, r7, r3
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2224      	movs	r2, #36	; 0x24
 80021f2:	5c9b      	ldrb	r3, [r3, r2]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d101      	bne.n	80021fc <HAL_DMA_Start_IT+0x24>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e06f      	b.n	80022dc <HAL_DMA_Start_IT+0x104>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2224      	movs	r2, #36	; 0x24
 8002200:	2101      	movs	r1, #1
 8002202:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2225      	movs	r2, #37	; 0x25
 8002208:	5c9b      	ldrb	r3, [r3, r2]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b01      	cmp	r3, #1
 800220e:	d157      	bne.n	80022c0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2225      	movs	r2, #37	; 0x25
 8002214:	2102      	movs	r1, #2
 8002216:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2101      	movs	r1, #1
 800222a:	438a      	bics	r2, r1
 800222c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	68b9      	ldr	r1, [r7, #8]
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 f907 	bl	8002448 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	2b00      	cmp	r3, #0
 8002240:	d008      	beq.n	8002254 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	210e      	movs	r1, #14
 800224e:	430a      	orrs	r2, r1
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	e00f      	b.n	8002274 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2104      	movs	r1, #4
 8002260:	438a      	bics	r2, r1
 8002262:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	210a      	movs	r1, #10
 8002270:	430a      	orrs	r2, r1
 8002272:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	025b      	lsls	r3, r3, #9
 800227e:	4013      	ands	r3, r2
 8002280:	d008      	beq.n	8002294 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228c:	2180      	movs	r1, #128	; 0x80
 800228e:	0049      	lsls	r1, r1, #1
 8002290:	430a      	orrs	r2, r1
 8002292:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a6:	2180      	movs	r1, #128	; 0x80
 80022a8:	0049      	lsls	r1, r1, #1
 80022aa:	430a      	orrs	r2, r1
 80022ac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2101      	movs	r1, #1
 80022ba:	430a      	orrs	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	e00a      	b.n	80022d6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2280      	movs	r2, #128	; 0x80
 80022c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2224      	movs	r2, #36	; 0x24
 80022ca:	2100      	movs	r1, #0
 80022cc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80022ce:	2317      	movs	r3, #23
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80022d6:	2317      	movs	r3, #23
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	781b      	ldrb	r3, [r3, #0]
}
 80022dc:	0018      	movs	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	b006      	add	sp, #24
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80022ec:	4b55      	ldr	r3, [pc, #340]	; (8002444 <HAL_DMA_IRQHandler+0x160>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	221c      	movs	r2, #28
 8002300:	4013      	ands	r3, r2
 8002302:	2204      	movs	r2, #4
 8002304:	409a      	lsls	r2, r3
 8002306:	0013      	movs	r3, r2
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4013      	ands	r3, r2
 800230c:	d027      	beq.n	800235e <HAL_DMA_IRQHandler+0x7a>
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2204      	movs	r2, #4
 8002312:	4013      	ands	r3, r2
 8002314:	d023      	beq.n	800235e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2220      	movs	r2, #32
 800231e:	4013      	ands	r3, r2
 8002320:	d107      	bne.n	8002332 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2104      	movs	r1, #4
 800232e:	438a      	bics	r2, r1
 8002330:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002332:	4b44      	ldr	r3, [pc, #272]	; (8002444 <HAL_DMA_IRQHandler+0x160>)
 8002334:	6859      	ldr	r1, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	221c      	movs	r2, #28
 800233c:	4013      	ands	r3, r2
 800233e:	2204      	movs	r2, #4
 8002340:	409a      	lsls	r2, r3
 8002342:	4b40      	ldr	r3, [pc, #256]	; (8002444 <HAL_DMA_IRQHandler+0x160>)
 8002344:	430a      	orrs	r2, r1
 8002346:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	2b00      	cmp	r3, #0
 800234e:	d100      	bne.n	8002352 <HAL_DMA_IRQHandler+0x6e>
 8002350:	e073      	b.n	800243a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	0010      	movs	r0, r2
 800235a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800235c:	e06d      	b.n	800243a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	221c      	movs	r2, #28
 8002364:	4013      	ands	r3, r2
 8002366:	2202      	movs	r2, #2
 8002368:	409a      	lsls	r2, r3
 800236a:	0013      	movs	r3, r2
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4013      	ands	r3, r2
 8002370:	d02e      	beq.n	80023d0 <HAL_DMA_IRQHandler+0xec>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2202      	movs	r2, #2
 8002376:	4013      	ands	r3, r2
 8002378:	d02a      	beq.n	80023d0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2220      	movs	r2, #32
 8002382:	4013      	ands	r3, r2
 8002384:	d10b      	bne.n	800239e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	210a      	movs	r1, #10
 8002392:	438a      	bics	r2, r1
 8002394:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2225      	movs	r2, #37	; 0x25
 800239a:	2101      	movs	r1, #1
 800239c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800239e:	4b29      	ldr	r3, [pc, #164]	; (8002444 <HAL_DMA_IRQHandler+0x160>)
 80023a0:	6859      	ldr	r1, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	221c      	movs	r2, #28
 80023a8:	4013      	ands	r3, r2
 80023aa:	2202      	movs	r2, #2
 80023ac:	409a      	lsls	r2, r3
 80023ae:	4b25      	ldr	r3, [pc, #148]	; (8002444 <HAL_DMA_IRQHandler+0x160>)
 80023b0:	430a      	orrs	r2, r1
 80023b2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2224      	movs	r2, #36	; 0x24
 80023b8:	2100      	movs	r1, #0
 80023ba:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d03a      	beq.n	800243a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	0010      	movs	r0, r2
 80023cc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80023ce:	e034      	b.n	800243a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	221c      	movs	r2, #28
 80023d6:	4013      	ands	r3, r2
 80023d8:	2208      	movs	r2, #8
 80023da:	409a      	lsls	r2, r3
 80023dc:	0013      	movs	r3, r2
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	4013      	ands	r3, r2
 80023e2:	d02b      	beq.n	800243c <HAL_DMA_IRQHandler+0x158>
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2208      	movs	r2, #8
 80023e8:	4013      	ands	r3, r2
 80023ea:	d027      	beq.n	800243c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	210e      	movs	r1, #14
 80023f8:	438a      	bics	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <HAL_DMA_IRQHandler+0x160>)
 80023fe:	6859      	ldr	r1, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	221c      	movs	r2, #28
 8002406:	4013      	ands	r3, r2
 8002408:	2201      	movs	r2, #1
 800240a:	409a      	lsls	r2, r3
 800240c:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <HAL_DMA_IRQHandler+0x160>)
 800240e:	430a      	orrs	r2, r1
 8002410:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2225      	movs	r2, #37	; 0x25
 800241c:	2101      	movs	r1, #1
 800241e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2224      	movs	r2, #36	; 0x24
 8002424:	2100      	movs	r1, #0
 8002426:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	0010      	movs	r0, r2
 8002438:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	46c0      	nop			; (mov r8, r8)
}
 800243e:	46bd      	mov	sp, r7
 8002440:	b004      	add	sp, #16
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40020000 	.word	0x40020000

08002448 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800245e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002464:	2b00      	cmp	r3, #0
 8002466:	d004      	beq.n	8002472 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002470:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002472:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <DMA_SetConfig+0x7c>)
 8002474:	6859      	ldr	r1, [r3, #4]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	221c      	movs	r2, #28
 800247c:	4013      	ands	r3, r2
 800247e:	2201      	movs	r2, #1
 8002480:	409a      	lsls	r2, r3
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <DMA_SetConfig+0x7c>)
 8002484:	430a      	orrs	r2, r1
 8002486:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b10      	cmp	r3, #16
 8002496:	d108      	bne.n	80024aa <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024a8:	e007      	b.n	80024ba <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	60da      	str	r2, [r3, #12]
}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	46bd      	mov	sp, r7
 80024be:	b004      	add	sp, #16
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	40020000 	.word	0x40020000

080024c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	089b      	lsrs	r3, r3, #2
 80024d6:	4a10      	ldr	r2, [pc, #64]	; (8002518 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80024d8:	4694      	mov	ip, r2
 80024da:	4463      	add	r3, ip
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	001a      	movs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	001a      	movs	r2, r3
 80024ea:	23ff      	movs	r3, #255	; 0xff
 80024ec:	4013      	ands	r3, r2
 80024ee:	3b08      	subs	r3, #8
 80024f0:	2114      	movs	r1, #20
 80024f2:	0018      	movs	r0, r3
 80024f4:	f7fd fe04 	bl	8000100 <__udivsi3>
 80024f8:	0003      	movs	r3, r0
 80024fa:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a07      	ldr	r2, [pc, #28]	; (800251c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002500:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	221f      	movs	r2, #31
 8002506:	4013      	ands	r3, r2
 8002508:	2201      	movs	r2, #1
 800250a:	409a      	lsls	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002510:	46c0      	nop			; (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	b004      	add	sp, #16
 8002516:	bd80      	pop	{r7, pc}
 8002518:	10008200 	.word	0x10008200
 800251c:	40020880 	.word	0x40020880

08002520 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	223f      	movs	r2, #63	; 0x3f
 800252e:	4013      	ands	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002536:	4694      	mov	ip, r2
 8002538:	4463      	add	r3, ip
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	001a      	movs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a07      	ldr	r2, [pc, #28]	; (8002564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002546:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	3b01      	subs	r3, #1
 800254c:	2203      	movs	r2, #3
 800254e:	4013      	ands	r3, r2
 8002550:	2201      	movs	r2, #1
 8002552:	409a      	lsls	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	46bd      	mov	sp, r7
 800255c:	b004      	add	sp, #16
 800255e:	bd80      	pop	{r7, pc}
 8002560:	1000823f 	.word	0x1000823f
 8002564:	40020940 	.word	0x40020940

08002568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002576:	e147      	b.n	8002808 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2101      	movs	r1, #1
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4091      	lsls	r1, r2
 8002582:	000a      	movs	r2, r1
 8002584:	4013      	ands	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d100      	bne.n	8002590 <HAL_GPIO_Init+0x28>
 800258e:	e138      	b.n	8002802 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2203      	movs	r2, #3
 8002596:	4013      	ands	r3, r2
 8002598:	2b01      	cmp	r3, #1
 800259a:	d005      	beq.n	80025a8 <HAL_GPIO_Init+0x40>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2203      	movs	r2, #3
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d130      	bne.n	800260a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	409a      	lsls	r2, r3
 80025b6:	0013      	movs	r3, r2
 80025b8:	43da      	mvns	r2, r3
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	409a      	lsls	r2, r3
 80025ca:	0013      	movs	r3, r2
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025de:	2201      	movs	r2, #1
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	409a      	lsls	r2, r3
 80025e4:	0013      	movs	r3, r2
 80025e6:	43da      	mvns	r2, r3
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4013      	ands	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	2201      	movs	r2, #1
 80025f6:	401a      	ands	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	409a      	lsls	r2, r3
 80025fc:	0013      	movs	r3, r2
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2203      	movs	r2, #3
 8002610:	4013      	ands	r3, r2
 8002612:	2b03      	cmp	r3, #3
 8002614:	d017      	beq.n	8002646 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	409a      	lsls	r2, r3
 8002624:	0013      	movs	r3, r2
 8002626:	43da      	mvns	r2, r3
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	409a      	lsls	r2, r3
 8002638:	0013      	movs	r3, r2
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2203      	movs	r2, #3
 800264c:	4013      	ands	r3, r2
 800264e:	2b02      	cmp	r3, #2
 8002650:	d123      	bne.n	800269a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	08da      	lsrs	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3208      	adds	r2, #8
 800265a:	0092      	lsls	r2, r2, #2
 800265c:	58d3      	ldr	r3, [r2, r3]
 800265e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	2207      	movs	r2, #7
 8002664:	4013      	ands	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	220f      	movs	r2, #15
 800266a:	409a      	lsls	r2, r3
 800266c:	0013      	movs	r3, r2
 800266e:	43da      	mvns	r2, r3
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2107      	movs	r1, #7
 800267e:	400b      	ands	r3, r1
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	409a      	lsls	r2, r3
 8002684:	0013      	movs	r3, r2
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	08da      	lsrs	r2, r3, #3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3208      	adds	r2, #8
 8002694:	0092      	lsls	r2, r2, #2
 8002696:	6939      	ldr	r1, [r7, #16]
 8002698:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	2203      	movs	r2, #3
 80026a6:	409a      	lsls	r2, r3
 80026a8:	0013      	movs	r3, r2
 80026aa:	43da      	mvns	r2, r3
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2203      	movs	r2, #3
 80026b8:	401a      	ands	r2, r3
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	409a      	lsls	r2, r3
 80026c0:	0013      	movs	r3, r2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	23c0      	movs	r3, #192	; 0xc0
 80026d4:	029b      	lsls	r3, r3, #10
 80026d6:	4013      	ands	r3, r2
 80026d8:	d100      	bne.n	80026dc <HAL_GPIO_Init+0x174>
 80026da:	e092      	b.n	8002802 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80026dc:	4a50      	ldr	r2, [pc, #320]	; (8002820 <HAL_GPIO_Init+0x2b8>)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	3318      	adds	r3, #24
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	589b      	ldr	r3, [r3, r2]
 80026e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2203      	movs	r2, #3
 80026ee:	4013      	ands	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	220f      	movs	r2, #15
 80026f4:	409a      	lsls	r2, r3
 80026f6:	0013      	movs	r3, r2
 80026f8:	43da      	mvns	r2, r3
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	23a0      	movs	r3, #160	; 0xa0
 8002704:	05db      	lsls	r3, r3, #23
 8002706:	429a      	cmp	r2, r3
 8002708:	d013      	beq.n	8002732 <HAL_GPIO_Init+0x1ca>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a45      	ldr	r2, [pc, #276]	; (8002824 <HAL_GPIO_Init+0x2bc>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00d      	beq.n	800272e <HAL_GPIO_Init+0x1c6>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a44      	ldr	r2, [pc, #272]	; (8002828 <HAL_GPIO_Init+0x2c0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d007      	beq.n	800272a <HAL_GPIO_Init+0x1c2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a43      	ldr	r2, [pc, #268]	; (800282c <HAL_GPIO_Init+0x2c4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d101      	bne.n	8002726 <HAL_GPIO_Init+0x1be>
 8002722:	2303      	movs	r3, #3
 8002724:	e006      	b.n	8002734 <HAL_GPIO_Init+0x1cc>
 8002726:	2305      	movs	r3, #5
 8002728:	e004      	b.n	8002734 <HAL_GPIO_Init+0x1cc>
 800272a:	2302      	movs	r3, #2
 800272c:	e002      	b.n	8002734 <HAL_GPIO_Init+0x1cc>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_GPIO_Init+0x1cc>
 8002732:	2300      	movs	r3, #0
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	2103      	movs	r1, #3
 8002738:	400a      	ands	r2, r1
 800273a:	00d2      	lsls	r2, r2, #3
 800273c:	4093      	lsls	r3, r2
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002744:	4936      	ldr	r1, [pc, #216]	; (8002820 <HAL_GPIO_Init+0x2b8>)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	089b      	lsrs	r3, r3, #2
 800274a:	3318      	adds	r3, #24
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002752:	4b33      	ldr	r3, [pc, #204]	; (8002820 <HAL_GPIO_Init+0x2b8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	43da      	mvns	r2, r3
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	035b      	lsls	r3, r3, #13
 800276a:	4013      	ands	r3, r2
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002776:	4b2a      	ldr	r3, [pc, #168]	; (8002820 <HAL_GPIO_Init+0x2b8>)
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800277c:	4b28      	ldr	r3, [pc, #160]	; (8002820 <HAL_GPIO_Init+0x2b8>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	43da      	mvns	r2, r3
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	039b      	lsls	r3, r3, #14
 8002794:	4013      	ands	r3, r2
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027a0:	4b1f      	ldr	r3, [pc, #124]	; (8002820 <HAL_GPIO_Init+0x2b8>)
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027a6:	4a1e      	ldr	r2, [pc, #120]	; (8002820 <HAL_GPIO_Init+0x2b8>)
 80027a8:	2384      	movs	r3, #132	; 0x84
 80027aa:	58d3      	ldr	r3, [r2, r3]
 80027ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	43da      	mvns	r2, r3
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4013      	ands	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	029b      	lsls	r3, r3, #10
 80027c0:	4013      	ands	r3, r2
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027cc:	4914      	ldr	r1, [pc, #80]	; (8002820 <HAL_GPIO_Init+0x2b8>)
 80027ce:	2284      	movs	r2, #132	; 0x84
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80027d4:	4a12      	ldr	r2, [pc, #72]	; (8002820 <HAL_GPIO_Init+0x2b8>)
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	58d3      	ldr	r3, [r2, r3]
 80027da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	43da      	mvns	r2, r3
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	025b      	lsls	r3, r3, #9
 80027ee:	4013      	ands	r3, r2
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027fa:	4909      	ldr	r1, [pc, #36]	; (8002820 <HAL_GPIO_Init+0x2b8>)
 80027fc:	2280      	movs	r2, #128	; 0x80
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	3301      	adds	r3, #1
 8002806:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	40da      	lsrs	r2, r3
 8002810:	1e13      	subs	r3, r2, #0
 8002812:	d000      	beq.n	8002816 <HAL_GPIO_Init+0x2ae>
 8002814:	e6b0      	b.n	8002578 <HAL_GPIO_Init+0x10>
  }
}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	46c0      	nop			; (mov r8, r8)
 800281a:	46bd      	mov	sp, r7
 800281c:	b006      	add	sp, #24
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40021800 	.word	0x40021800
 8002824:	50000400 	.word	0x50000400
 8002828:	50000800 	.word	0x50000800
 800282c:	50000c00 	.word	0x50000c00

08002830 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002838:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a19      	ldr	r2, [pc, #100]	; (80028a4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800283e:	4013      	ands	r3, r2
 8002840:	0019      	movs	r1, r3
 8002842:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	430a      	orrs	r2, r1
 8002848:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	429a      	cmp	r2, r3
 8002852:	d11f      	bne.n	8002894 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002854:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	0013      	movs	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	189b      	adds	r3, r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4912      	ldr	r1, [pc, #72]	; (80028ac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002862:	0018      	movs	r0, r3
 8002864:	f7fd fc4c 	bl	8000100 <__udivsi3>
 8002868:	0003      	movs	r3, r0
 800286a:	3301      	adds	r3, #1
 800286c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800286e:	e008      	b.n	8002882 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	3b01      	subs	r3, #1
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	e001      	b.n	8002882 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e009      	b.n	8002896 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002882:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002884:	695a      	ldr	r2, [r3, #20]
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	401a      	ands	r2, r3
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	429a      	cmp	r2, r3
 8002892:	d0ed      	beq.n	8002870 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	0018      	movs	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	b004      	add	sp, #16
 800289c:	bd80      	pop	{r7, pc}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	40007000 	.word	0x40007000
 80028a4:	fffff9ff 	.word	0xfffff9ff
 80028a8:	20000000 	.word	0x20000000
 80028ac:	000f4240 	.word	0x000f4240

080028b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e2f3      	b.n	8002eaa <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2201      	movs	r2, #1
 80028c8:	4013      	ands	r3, r2
 80028ca:	d100      	bne.n	80028ce <HAL_RCC_OscConfig+0x1e>
 80028cc:	e07c      	b.n	80029c8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ce:	4bc3      	ldr	r3, [pc, #780]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2238      	movs	r2, #56	; 0x38
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028d8:	4bc0      	ldr	r3, [pc, #768]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2203      	movs	r2, #3
 80028de:	4013      	ands	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	2b10      	cmp	r3, #16
 80028e6:	d102      	bne.n	80028ee <HAL_RCC_OscConfig+0x3e>
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d002      	beq.n	80028f4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d10b      	bne.n	800290c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f4:	4bb9      	ldr	r3, [pc, #740]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	029b      	lsls	r3, r3, #10
 80028fc:	4013      	ands	r3, r2
 80028fe:	d062      	beq.n	80029c6 <HAL_RCC_OscConfig+0x116>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d15e      	bne.n	80029c6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e2ce      	b.n	8002eaa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	025b      	lsls	r3, r3, #9
 8002914:	429a      	cmp	r2, r3
 8002916:	d107      	bne.n	8002928 <HAL_RCC_OscConfig+0x78>
 8002918:	4bb0      	ldr	r3, [pc, #704]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4baf      	ldr	r3, [pc, #700]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 800291e:	2180      	movs	r1, #128	; 0x80
 8002920:	0249      	lsls	r1, r1, #9
 8002922:	430a      	orrs	r2, r1
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	e020      	b.n	800296a <HAL_RCC_OscConfig+0xba>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	23a0      	movs	r3, #160	; 0xa0
 800292e:	02db      	lsls	r3, r3, #11
 8002930:	429a      	cmp	r2, r3
 8002932:	d10e      	bne.n	8002952 <HAL_RCC_OscConfig+0xa2>
 8002934:	4ba9      	ldr	r3, [pc, #676]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4ba8      	ldr	r3, [pc, #672]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 800293a:	2180      	movs	r1, #128	; 0x80
 800293c:	02c9      	lsls	r1, r1, #11
 800293e:	430a      	orrs	r2, r1
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	4ba6      	ldr	r3, [pc, #664]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	4ba5      	ldr	r3, [pc, #660]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002948:	2180      	movs	r1, #128	; 0x80
 800294a:	0249      	lsls	r1, r1, #9
 800294c:	430a      	orrs	r2, r1
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	e00b      	b.n	800296a <HAL_RCC_OscConfig+0xba>
 8002952:	4ba2      	ldr	r3, [pc, #648]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	4ba1      	ldr	r3, [pc, #644]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002958:	49a1      	ldr	r1, [pc, #644]	; (8002be0 <HAL_RCC_OscConfig+0x330>)
 800295a:	400a      	ands	r2, r1
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	4b9f      	ldr	r3, [pc, #636]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4b9e      	ldr	r3, [pc, #632]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002964:	499f      	ldr	r1, [pc, #636]	; (8002be4 <HAL_RCC_OscConfig+0x334>)
 8002966:	400a      	ands	r2, r1
 8002968:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d014      	beq.n	800299c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002972:	f7fe fc45 	bl	8001200 <HAL_GetTick>
 8002976:	0003      	movs	r3, r0
 8002978:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800297c:	f7fe fc40 	bl	8001200 <HAL_GetTick>
 8002980:	0002      	movs	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e28d      	b.n	8002eaa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800298e:	4b93      	ldr	r3, [pc, #588]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	029b      	lsls	r3, r3, #10
 8002996:	4013      	ands	r3, r2
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0xcc>
 800299a:	e015      	b.n	80029c8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe fc30 	bl	8001200 <HAL_GetTick>
 80029a0:	0003      	movs	r3, r0
 80029a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a6:	f7fe fc2b 	bl	8001200 <HAL_GetTick>
 80029aa:	0002      	movs	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b64      	cmp	r3, #100	; 0x64
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e278      	b.n	8002eaa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029b8:	4b88      	ldr	r3, [pc, #544]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	029b      	lsls	r3, r3, #10
 80029c0:	4013      	ands	r3, r2
 80029c2:	d1f0      	bne.n	80029a6 <HAL_RCC_OscConfig+0xf6>
 80029c4:	e000      	b.n	80029c8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2202      	movs	r2, #2
 80029ce:	4013      	ands	r3, r2
 80029d0:	d100      	bne.n	80029d4 <HAL_RCC_OscConfig+0x124>
 80029d2:	e099      	b.n	8002b08 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029d4:	4b81      	ldr	r3, [pc, #516]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2238      	movs	r2, #56	; 0x38
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029de:	4b7f      	ldr	r3, [pc, #508]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2203      	movs	r2, #3
 80029e4:	4013      	ands	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2b10      	cmp	r3, #16
 80029ec:	d102      	bne.n	80029f4 <HAL_RCC_OscConfig+0x144>
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d002      	beq.n	80029fa <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d135      	bne.n	8002a66 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029fa:	4b78      	ldr	r3, [pc, #480]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	2380      	movs	r3, #128	; 0x80
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4013      	ands	r3, r2
 8002a04:	d005      	beq.n	8002a12 <HAL_RCC_OscConfig+0x162>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e24b      	b.n	8002eaa <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a12:	4b72      	ldr	r3, [pc, #456]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	4a74      	ldr	r2, [pc, #464]	; (8002be8 <HAL_RCC_OscConfig+0x338>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	021a      	lsls	r2, r3, #8
 8002a22:	4b6e      	ldr	r3, [pc, #440]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002a24:	430a      	orrs	r2, r1
 8002a26:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d112      	bne.n	8002a54 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002a2e:	4b6b      	ldr	r3, [pc, #428]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a6e      	ldr	r2, [pc, #440]	; (8002bec <HAL_RCC_OscConfig+0x33c>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	0019      	movs	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	4b67      	ldr	r3, [pc, #412]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002a42:	4b66      	ldr	r3, [pc, #408]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	0adb      	lsrs	r3, r3, #11
 8002a48:	2207      	movs	r2, #7
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	4a68      	ldr	r2, [pc, #416]	; (8002bf0 <HAL_RCC_OscConfig+0x340>)
 8002a4e:	40da      	lsrs	r2, r3
 8002a50:	4b68      	ldr	r3, [pc, #416]	; (8002bf4 <HAL_RCC_OscConfig+0x344>)
 8002a52:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a54:	4b68      	ldr	r3, [pc, #416]	; (8002bf8 <HAL_RCC_OscConfig+0x348>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f7fe fb75 	bl	8001148 <HAL_InitTick>
 8002a5e:	1e03      	subs	r3, r0, #0
 8002a60:	d051      	beq.n	8002b06 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e221      	b.n	8002eaa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d030      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002a6e:	4b5b      	ldr	r3, [pc, #364]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a5e      	ldr	r2, [pc, #376]	; (8002bec <HAL_RCC_OscConfig+0x33c>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	0019      	movs	r1, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	4b57      	ldr	r3, [pc, #348]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002a82:	4b56      	ldr	r3, [pc, #344]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	4b55      	ldr	r3, [pc, #340]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002a88:	2180      	movs	r1, #128	; 0x80
 8002a8a:	0049      	lsls	r1, r1, #1
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7fe fbb6 	bl	8001200 <HAL_GetTick>
 8002a94:	0003      	movs	r3, r0
 8002a96:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a9a:	f7fe fbb1 	bl	8001200 <HAL_GetTick>
 8002a9e:	0002      	movs	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e1fe      	b.n	8002eaa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aac:	4b4b      	ldr	r3, [pc, #300]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	2380      	movs	r3, #128	; 0x80
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab8:	4b48      	ldr	r3, [pc, #288]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	4a4a      	ldr	r2, [pc, #296]	; (8002be8 <HAL_RCC_OscConfig+0x338>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	0019      	movs	r1, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	021a      	lsls	r2, r3, #8
 8002ac8:	4b44      	ldr	r3, [pc, #272]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002aca:	430a      	orrs	r2, r1
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	e01b      	b.n	8002b08 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002ad0:	4b42      	ldr	r3, [pc, #264]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002ad6:	4949      	ldr	r1, [pc, #292]	; (8002bfc <HAL_RCC_OscConfig+0x34c>)
 8002ad8:	400a      	ands	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe fb90 	bl	8001200 <HAL_GetTick>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae6:	f7fe fb8b 	bl	8001200 <HAL_GetTick>
 8002aea:	0002      	movs	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e1d8      	b.n	8002eaa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002af8:	4b38      	ldr	r3, [pc, #224]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4013      	ands	r3, r2
 8002b02:	d1f0      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x236>
 8002b04:	e000      	b.n	8002b08 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b06:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d047      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b12:	4b32      	ldr	r3, [pc, #200]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2238      	movs	r2, #56	; 0x38
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b18      	cmp	r3, #24
 8002b1c:	d10a      	bne.n	8002b34 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002b1e:	4b2f      	ldr	r3, [pc, #188]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b22:	2202      	movs	r2, #2
 8002b24:	4013      	ands	r3, r2
 8002b26:	d03c      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x2f2>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d138      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e1ba      	b.n	8002eaa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d019      	beq.n	8002b70 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002b3c:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002b3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b40:	4b26      	ldr	r3, [pc, #152]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002b42:	2101      	movs	r1, #1
 8002b44:	430a      	orrs	r2, r1
 8002b46:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fe fb5a 	bl	8001200 <HAL_GetTick>
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b52:	f7fe fb55 	bl	8001200 <HAL_GetTick>
 8002b56:	0002      	movs	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e1a2      	b.n	8002eaa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b64:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b68:	2202      	movs	r2, #2
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d0f1      	beq.n	8002b52 <HAL_RCC_OscConfig+0x2a2>
 8002b6e:	e018      	b.n	8002ba2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002b70:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002b72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b74:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002b76:	2101      	movs	r1, #1
 8002b78:	438a      	bics	r2, r1
 8002b7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fb40 	bl	8001200 <HAL_GetTick>
 8002b80:	0003      	movs	r3, r0
 8002b82:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b86:	f7fe fb3b 	bl	8001200 <HAL_GetTick>
 8002b8a:	0002      	movs	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e188      	b.n	8002eaa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b98:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d1f1      	bne.n	8002b86 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d100      	bne.n	8002bae <HAL_RCC_OscConfig+0x2fe>
 8002bac:	e0c6      	b.n	8002d3c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bae:	231f      	movs	r3, #31
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002bb6:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2238      	movs	r2, #56	; 0x38
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	d11e      	bne.n	8002c00 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002bc2:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_RCC_OscConfig+0x32c>)
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d100      	bne.n	8002bce <HAL_RCC_OscConfig+0x31e>
 8002bcc:	e0b6      	b.n	8002d3c <HAL_RCC_OscConfig+0x48c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d000      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x328>
 8002bd6:	e0b1      	b.n	8002d3c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e166      	b.n	8002eaa <HAL_RCC_OscConfig+0x5fa>
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	fffeffff 	.word	0xfffeffff
 8002be4:	fffbffff 	.word	0xfffbffff
 8002be8:	ffff80ff 	.word	0xffff80ff
 8002bec:	ffffc7ff 	.word	0xffffc7ff
 8002bf0:	00f42400 	.word	0x00f42400
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	20000004 	.word	0x20000004
 8002bfc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c00:	4bac      	ldr	r3, [pc, #688]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	055b      	lsls	r3, r3, #21
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_OscConfig+0x360>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <HAL_RCC_OscConfig+0x362>
 8002c10:	2300      	movs	r3, #0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d011      	beq.n	8002c3a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002c16:	4ba7      	ldr	r3, [pc, #668]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002c18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c1a:	4ba6      	ldr	r3, [pc, #664]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002c1c:	2180      	movs	r1, #128	; 0x80
 8002c1e:	0549      	lsls	r1, r1, #21
 8002c20:	430a      	orrs	r2, r1
 8002c22:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c24:	4ba3      	ldr	r3, [pc, #652]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002c26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	055b      	lsls	r3, r3, #21
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002c32:	231f      	movs	r3, #31
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	2201      	movs	r2, #1
 8002c38:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c3a:	4b9f      	ldr	r3, [pc, #636]	; (8002eb8 <HAL_RCC_OscConfig+0x608>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	4013      	ands	r3, r2
 8002c44:	d11a      	bne.n	8002c7c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c46:	4b9c      	ldr	r3, [pc, #624]	; (8002eb8 <HAL_RCC_OscConfig+0x608>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	4b9b      	ldr	r3, [pc, #620]	; (8002eb8 <HAL_RCC_OscConfig+0x608>)
 8002c4c:	2180      	movs	r1, #128	; 0x80
 8002c4e:	0049      	lsls	r1, r1, #1
 8002c50:	430a      	orrs	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002c54:	f7fe fad4 	bl	8001200 <HAL_GetTick>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5e:	f7fe facf 	bl	8001200 <HAL_GetTick>
 8002c62:	0002      	movs	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e11c      	b.n	8002eaa <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c70:	4b91      	ldr	r3, [pc, #580]	; (8002eb8 <HAL_RCC_OscConfig+0x608>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d106      	bne.n	8002c92 <HAL_RCC_OscConfig+0x3e2>
 8002c84:	4b8b      	ldr	r3, [pc, #556]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002c86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c88:	4b8a      	ldr	r3, [pc, #552]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c90:	e01c      	b.n	8002ccc <HAL_RCC_OscConfig+0x41c>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b05      	cmp	r3, #5
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x404>
 8002c9a:	4b86      	ldr	r3, [pc, #536]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002c9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c9e:	4b85      	ldr	r3, [pc, #532]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002ca0:	2104      	movs	r1, #4
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ca6:	4b83      	ldr	r3, [pc, #524]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002ca8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002caa:	4b82      	ldr	r3, [pc, #520]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002cac:	2101      	movs	r1, #1
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cb2:	e00b      	b.n	8002ccc <HAL_RCC_OscConfig+0x41c>
 8002cb4:	4b7f      	ldr	r3, [pc, #508]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002cb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cb8:	4b7e      	ldr	r3, [pc, #504]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002cba:	2101      	movs	r1, #1
 8002cbc:	438a      	bics	r2, r1
 8002cbe:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cc0:	4b7c      	ldr	r3, [pc, #496]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002cc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cc4:	4b7b      	ldr	r3, [pc, #492]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002cc6:	2104      	movs	r1, #4
 8002cc8:	438a      	bics	r2, r1
 8002cca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d014      	beq.n	8002cfe <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe fa94 	bl	8001200 <HAL_GetTick>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cdc:	e009      	b.n	8002cf2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7fe fa8f 	bl	8001200 <HAL_GetTick>
 8002ce2:	0002      	movs	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	4a74      	ldr	r2, [pc, #464]	; (8002ebc <HAL_RCC_OscConfig+0x60c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e0db      	b.n	8002eaa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf2:	4b70      	ldr	r3, [pc, #448]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x42e>
 8002cfc:	e013      	b.n	8002d26 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfe:	f7fe fa7f 	bl	8001200 <HAL_GetTick>
 8002d02:	0003      	movs	r3, r0
 8002d04:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d06:	e009      	b.n	8002d1c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d08:	f7fe fa7a 	bl	8001200 <HAL_GetTick>
 8002d0c:	0002      	movs	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	4a6a      	ldr	r2, [pc, #424]	; (8002ebc <HAL_RCC_OscConfig+0x60c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e0c6      	b.n	8002eaa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d1c:	4b65      	ldr	r3, [pc, #404]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d20:	2202      	movs	r2, #2
 8002d22:	4013      	ands	r3, r2
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002d26:	231f      	movs	r3, #31
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d105      	bne.n	8002d3c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002d30:	4b60      	ldr	r3, [pc, #384]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d34:	4b5f      	ldr	r3, [pc, #380]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002d36:	4962      	ldr	r1, [pc, #392]	; (8002ec0 <HAL_RCC_OscConfig+0x610>)
 8002d38:	400a      	ands	r2, r1
 8002d3a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d100      	bne.n	8002d46 <HAL_RCC_OscConfig+0x496>
 8002d44:	e0b0      	b.n	8002ea8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d46:	4b5b      	ldr	r3, [pc, #364]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2238      	movs	r2, #56	; 0x38
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b10      	cmp	r3, #16
 8002d50:	d100      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4a4>
 8002d52:	e078      	b.n	8002e46 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d153      	bne.n	8002e04 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5c:	4b55      	ldr	r3, [pc, #340]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4b54      	ldr	r3, [pc, #336]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002d62:	4958      	ldr	r1, [pc, #352]	; (8002ec4 <HAL_RCC_OscConfig+0x614>)
 8002d64:	400a      	ands	r2, r1
 8002d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fe fa4a 	bl	8001200 <HAL_GetTick>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d72:	f7fe fa45 	bl	8001200 <HAL_GetTick>
 8002d76:	0002      	movs	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e092      	b.n	8002eaa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d84:	4b4b      	ldr	r3, [pc, #300]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	049b      	lsls	r3, r3, #18
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d1f0      	bne.n	8002d72 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d90:	4b48      	ldr	r3, [pc, #288]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	4a4c      	ldr	r2, [pc, #304]	; (8002ec8 <HAL_RCC_OscConfig+0x618>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	0019      	movs	r1, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1a      	ldr	r2, [r3, #32]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	431a      	orrs	r2, r3
 8002db8:	4b3e      	ldr	r3, [pc, #248]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dbe:	4b3d      	ldr	r3, [pc, #244]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	4b3c      	ldr	r3, [pc, #240]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002dc4:	2180      	movs	r1, #128	; 0x80
 8002dc6:	0449      	lsls	r1, r1, #17
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002dcc:	4b39      	ldr	r3, [pc, #228]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	4b38      	ldr	r3, [pc, #224]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002dd2:	2180      	movs	r1, #128	; 0x80
 8002dd4:	0549      	lsls	r1, r1, #21
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dda:	f7fe fa11 	bl	8001200 <HAL_GetTick>
 8002dde:	0003      	movs	r3, r0
 8002de0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de4:	f7fe fa0c 	bl	8001200 <HAL_GetTick>
 8002de8:	0002      	movs	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e059      	b.n	8002eaa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df6:	4b2f      	ldr	r3, [pc, #188]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	049b      	lsls	r3, r3, #18
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0x534>
 8002e02:	e051      	b.n	8002ea8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e04:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4b2a      	ldr	r3, [pc, #168]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002e0a:	492e      	ldr	r1, [pc, #184]	; (8002ec4 <HAL_RCC_OscConfig+0x614>)
 8002e0c:	400a      	ands	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e10:	f7fe f9f6 	bl	8001200 <HAL_GetTick>
 8002e14:	0003      	movs	r3, r0
 8002e16:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7fe f9f1 	bl	8001200 <HAL_GetTick>
 8002e1e:	0002      	movs	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e03e      	b.n	8002eaa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e2c:	4b21      	ldr	r3, [pc, #132]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	2380      	movs	r3, #128	; 0x80
 8002e32:	049b      	lsls	r3, r3, #18
 8002e34:	4013      	ands	r3, r2
 8002e36:	d1f0      	bne.n	8002e1a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002e38:	4b1e      	ldr	r3, [pc, #120]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002e3e:	4923      	ldr	r1, [pc, #140]	; (8002ecc <HAL_RCC_OscConfig+0x61c>)
 8002e40:	400a      	ands	r2, r1
 8002e42:	60da      	str	r2, [r3, #12]
 8002e44:	e030      	b.n	8002ea8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e02b      	b.n	8002eaa <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002e52:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <HAL_RCC_OscConfig+0x604>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	401a      	ands	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d11e      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2270      	movs	r2, #112	; 0x70
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d117      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	23fe      	movs	r3, #254	; 0xfe
 8002e78:	01db      	lsls	r3, r3, #7
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e80:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d10e      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	23f8      	movs	r3, #248	; 0xf8
 8002e8a:	039b      	lsls	r3, r3, #14
 8002e8c:	401a      	ands	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d106      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	0f5b      	lsrs	r3, r3, #29
 8002e9a:	075a      	lsls	r2, r3, #29
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	0018      	movs	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b008      	add	sp, #32
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40007000 	.word	0x40007000
 8002ebc:	00001388 	.word	0x00001388
 8002ec0:	efffffff 	.word	0xefffffff
 8002ec4:	feffffff 	.word	0xfeffffff
 8002ec8:	1fc1808c 	.word	0x1fc1808c
 8002ecc:	effefffc 	.word	0xeffefffc

08002ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0e9      	b.n	80030b8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b76      	ldr	r3, [pc, #472]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2207      	movs	r2, #7
 8002eea:	4013      	ands	r3, r2
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d91e      	bls.n	8002f30 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b73      	ldr	r3, [pc, #460]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2207      	movs	r2, #7
 8002ef8:	4393      	bics	r3, r2
 8002efa:	0019      	movs	r1, r3
 8002efc:	4b70      	ldr	r3, [pc, #448]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f04:	f7fe f97c 	bl	8001200 <HAL_GetTick>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f0c:	e009      	b.n	8002f22 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f0e:	f7fe f977 	bl	8001200 <HAL_GetTick>
 8002f12:	0002      	movs	r2, r0
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	4a6a      	ldr	r2, [pc, #424]	; (80030c4 <HAL_RCC_ClockConfig+0x1f4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e0ca      	b.n	80030b8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f22:	4b67      	ldr	r3, [pc, #412]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2207      	movs	r2, #7
 8002f28:	4013      	ands	r3, r2
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d1ee      	bne.n	8002f0e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2202      	movs	r2, #2
 8002f36:	4013      	ands	r3, r2
 8002f38:	d015      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2204      	movs	r2, #4
 8002f40:	4013      	ands	r3, r2
 8002f42:	d006      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f44:	4b60      	ldr	r3, [pc, #384]	; (80030c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	4b5f      	ldr	r3, [pc, #380]	; (80030c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002f4a:	21e0      	movs	r1, #224	; 0xe0
 8002f4c:	01c9      	lsls	r1, r1, #7
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f52:	4b5d      	ldr	r3, [pc, #372]	; (80030c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	4a5d      	ldr	r2, [pc, #372]	; (80030cc <HAL_RCC_ClockConfig+0x1fc>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	0019      	movs	r1, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	4b59      	ldr	r3, [pc, #356]	; (80030c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002f62:	430a      	orrs	r2, r1
 8002f64:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d057      	beq.n	8003020 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d107      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f78:	4b53      	ldr	r3, [pc, #332]	; (80030c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	029b      	lsls	r3, r3, #10
 8002f80:	4013      	ands	r3, r2
 8002f82:	d12b      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e097      	b.n	80030b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d107      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f90:	4b4d      	ldr	r3, [pc, #308]	; (80030c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	049b      	lsls	r3, r3, #18
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d11f      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e08b      	b.n	80030b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d107      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fa8:	4b47      	ldr	r3, [pc, #284]	; (80030c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d113      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e07f      	b.n	80030b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d106      	bne.n	8002fce <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fc0:	4b41      	ldr	r3, [pc, #260]	; (80030c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d108      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e074      	b.n	80030b8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fce:	4b3e      	ldr	r3, [pc, #248]	; (80030c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e06d      	b.n	80030b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fdc:	4b3a      	ldr	r3, [pc, #232]	; (80030c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2207      	movs	r2, #7
 8002fe2:	4393      	bics	r3, r2
 8002fe4:	0019      	movs	r1, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	4b37      	ldr	r3, [pc, #220]	; (80030c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002fec:	430a      	orrs	r2, r1
 8002fee:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff0:	f7fe f906 	bl	8001200 <HAL_GetTick>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff8:	e009      	b.n	800300e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffa:	f7fe f901 	bl	8001200 <HAL_GetTick>
 8002ffe:	0002      	movs	r2, r0
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	4a2f      	ldr	r2, [pc, #188]	; (80030c4 <HAL_RCC_ClockConfig+0x1f4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d901      	bls.n	800300e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e054      	b.n	80030b8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300e:	4b2e      	ldr	r3, [pc, #184]	; (80030c8 <HAL_RCC_ClockConfig+0x1f8>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2238      	movs	r2, #56	; 0x38
 8003014:	401a      	ands	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	429a      	cmp	r2, r3
 800301e:	d1ec      	bne.n	8002ffa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003020:	4b27      	ldr	r3, [pc, #156]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2207      	movs	r2, #7
 8003026:	4013      	ands	r3, r2
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d21e      	bcs.n	800306c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302e:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2207      	movs	r2, #7
 8003034:	4393      	bics	r3, r2
 8003036:	0019      	movs	r1, r3
 8003038:	4b21      	ldr	r3, [pc, #132]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003040:	f7fe f8de 	bl	8001200 <HAL_GetTick>
 8003044:	0003      	movs	r3, r0
 8003046:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003048:	e009      	b.n	800305e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304a:	f7fe f8d9 	bl	8001200 <HAL_GetTick>
 800304e:	0002      	movs	r2, r0
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	4a1b      	ldr	r2, [pc, #108]	; (80030c4 <HAL_RCC_ClockConfig+0x1f4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e02c      	b.n	80030b8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800305e:	4b18      	ldr	r3, [pc, #96]	; (80030c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2207      	movs	r2, #7
 8003064:	4013      	ands	r3, r2
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d1ee      	bne.n	800304a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2204      	movs	r2, #4
 8003072:	4013      	ands	r3, r2
 8003074:	d009      	beq.n	800308a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003076:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <HAL_RCC_ClockConfig+0x1f8>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	4a15      	ldr	r2, [pc, #84]	; (80030d0 <HAL_RCC_ClockConfig+0x200>)
 800307c:	4013      	ands	r3, r2
 800307e:	0019      	movs	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <HAL_RCC_ClockConfig+0x1f8>)
 8003086:	430a      	orrs	r2, r1
 8003088:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800308a:	f000 f829 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 800308e:	0001      	movs	r1, r0
 8003090:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <HAL_RCC_ClockConfig+0x1f8>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	0a1b      	lsrs	r3, r3, #8
 8003096:	220f      	movs	r2, #15
 8003098:	401a      	ands	r2, r3
 800309a:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <HAL_RCC_ClockConfig+0x204>)
 800309c:	0092      	lsls	r2, r2, #2
 800309e:	58d3      	ldr	r3, [r2, r3]
 80030a0:	221f      	movs	r2, #31
 80030a2:	4013      	ands	r3, r2
 80030a4:	000a      	movs	r2, r1
 80030a6:	40da      	lsrs	r2, r3
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_RCC_ClockConfig+0x208>)
 80030aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80030ac:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <HAL_RCC_ClockConfig+0x20c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	0018      	movs	r0, r3
 80030b2:	f7fe f849 	bl	8001148 <HAL_InitTick>
 80030b6:	0003      	movs	r3, r0
}
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b004      	add	sp, #16
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40022000 	.word	0x40022000
 80030c4:	00001388 	.word	0x00001388
 80030c8:	40021000 	.word	0x40021000
 80030cc:	fffff0ff 	.word	0xfffff0ff
 80030d0:	ffff8fff 	.word	0xffff8fff
 80030d4:	080034a0 	.word	0x080034a0
 80030d8:	20000000 	.word	0x20000000
 80030dc:	20000004 	.word	0x20000004

080030e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030e6:	4b3c      	ldr	r3, [pc, #240]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2238      	movs	r2, #56	; 0x38
 80030ec:	4013      	ands	r3, r2
 80030ee:	d10f      	bne.n	8003110 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80030f0:	4b39      	ldr	r3, [pc, #228]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	0adb      	lsrs	r3, r3, #11
 80030f6:	2207      	movs	r2, #7
 80030f8:	4013      	ands	r3, r2
 80030fa:	2201      	movs	r2, #1
 80030fc:	409a      	lsls	r2, r3
 80030fe:	0013      	movs	r3, r2
 8003100:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003102:	6839      	ldr	r1, [r7, #0]
 8003104:	4835      	ldr	r0, [pc, #212]	; (80031dc <HAL_RCC_GetSysClockFreq+0xfc>)
 8003106:	f7fc fffb 	bl	8000100 <__udivsi3>
 800310a:	0003      	movs	r3, r0
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	e05d      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003110:	4b31      	ldr	r3, [pc, #196]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2238      	movs	r2, #56	; 0x38
 8003116:	4013      	ands	r3, r2
 8003118:	2b08      	cmp	r3, #8
 800311a:	d102      	bne.n	8003122 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800311c:	4b30      	ldr	r3, [pc, #192]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x100>)
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	e054      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003122:	4b2d      	ldr	r3, [pc, #180]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2238      	movs	r2, #56	; 0x38
 8003128:	4013      	ands	r3, r2
 800312a:	2b10      	cmp	r3, #16
 800312c:	d138      	bne.n	80031a0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800312e:	4b2a      	ldr	r3, [pc, #168]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2203      	movs	r2, #3
 8003134:	4013      	ands	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003138:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	2207      	movs	r2, #7
 8003140:	4013      	ands	r3, r2
 8003142:	3301      	adds	r3, #1
 8003144:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b03      	cmp	r3, #3
 800314a:	d10d      	bne.n	8003168 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	4824      	ldr	r0, [pc, #144]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x100>)
 8003150:	f7fc ffd6 	bl	8000100 <__udivsi3>
 8003154:	0003      	movs	r3, r0
 8003156:	0019      	movs	r1, r3
 8003158:	4b1f      	ldr	r3, [pc, #124]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	0a1b      	lsrs	r3, r3, #8
 800315e:	227f      	movs	r2, #127	; 0x7f
 8003160:	4013      	ands	r3, r2
 8003162:	434b      	muls	r3, r1
 8003164:	617b      	str	r3, [r7, #20]
        break;
 8003166:	e00d      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	481c      	ldr	r0, [pc, #112]	; (80031dc <HAL_RCC_GetSysClockFreq+0xfc>)
 800316c:	f7fc ffc8 	bl	8000100 <__udivsi3>
 8003170:	0003      	movs	r3, r0
 8003172:	0019      	movs	r1, r3
 8003174:	4b18      	ldr	r3, [pc, #96]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	0a1b      	lsrs	r3, r3, #8
 800317a:	227f      	movs	r2, #127	; 0x7f
 800317c:	4013      	ands	r3, r2
 800317e:	434b      	muls	r3, r1
 8003180:	617b      	str	r3, [r7, #20]
        break;
 8003182:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003184:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	0f5b      	lsrs	r3, r3, #29
 800318a:	2207      	movs	r2, #7
 800318c:	4013      	ands	r3, r2
 800318e:	3301      	adds	r3, #1
 8003190:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	6978      	ldr	r0, [r7, #20]
 8003196:	f7fc ffb3 	bl	8000100 <__udivsi3>
 800319a:	0003      	movs	r3, r0
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	e015      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80031a0:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2238      	movs	r2, #56	; 0x38
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b20      	cmp	r3, #32
 80031aa:	d103      	bne.n	80031b4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	e00b      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80031b4:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2238      	movs	r2, #56	; 0x38
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b18      	cmp	r3, #24
 80031be:	d103      	bne.n	80031c8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80031c0:	23fa      	movs	r3, #250	; 0xfa
 80031c2:	01db      	lsls	r3, r3, #7
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	e001      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80031cc:	693b      	ldr	r3, [r7, #16]
}
 80031ce:	0018      	movs	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b006      	add	sp, #24
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	40021000 	.word	0x40021000
 80031dc:	00f42400 	.word	0x00f42400
 80031e0:	007a1200 	.word	0x007a1200

080031e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80031ec:	2313      	movs	r3, #19
 80031ee:	18fb      	adds	r3, r7, r3
 80031f0:	2200      	movs	r2, #0
 80031f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031f4:	2312      	movs	r3, #18
 80031f6:	18fb      	adds	r3, r7, r3
 80031f8:	2200      	movs	r2, #0
 80031fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	029b      	lsls	r3, r3, #10
 8003204:	4013      	ands	r3, r2
 8003206:	d100      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003208:	e0a3      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800320a:	2011      	movs	r0, #17
 800320c:	183b      	adds	r3, r7, r0
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003212:	4b7f      	ldr	r3, [pc, #508]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003214:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	055b      	lsls	r3, r3, #21
 800321a:	4013      	ands	r3, r2
 800321c:	d110      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800321e:	4b7c      	ldr	r3, [pc, #496]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003222:	4b7b      	ldr	r3, [pc, #492]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	0549      	lsls	r1, r1, #21
 8003228:	430a      	orrs	r2, r1
 800322a:	63da      	str	r2, [r3, #60]	; 0x3c
 800322c:	4b78      	ldr	r3, [pc, #480]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800322e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	055b      	lsls	r3, r3, #21
 8003234:	4013      	ands	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800323a:	183b      	adds	r3, r7, r0
 800323c:	2201      	movs	r2, #1
 800323e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003240:	4b74      	ldr	r3, [pc, #464]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4b73      	ldr	r3, [pc, #460]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003246:	2180      	movs	r1, #128	; 0x80
 8003248:	0049      	lsls	r1, r1, #1
 800324a:	430a      	orrs	r2, r1
 800324c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800324e:	f7fd ffd7 	bl	8001200 <HAL_GetTick>
 8003252:	0003      	movs	r3, r0
 8003254:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003256:	e00b      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003258:	f7fd ffd2 	bl	8001200 <HAL_GetTick>
 800325c:	0002      	movs	r2, r0
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d904      	bls.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003266:	2313      	movs	r3, #19
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	2203      	movs	r2, #3
 800326c:	701a      	strb	r2, [r3, #0]
        break;
 800326e:	e005      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003270:	4b68      	ldr	r3, [pc, #416]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	4013      	ands	r3, r2
 800327a:	d0ed      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800327c:	2313      	movs	r3, #19
 800327e:	18fb      	adds	r3, r7, r3
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d154      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003286:	4b62      	ldr	r3, [pc, #392]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003288:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800328a:	23c0      	movs	r3, #192	; 0xc0
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4013      	ands	r3, r2
 8003290:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d019      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d014      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032a2:	4b5b      	ldr	r3, [pc, #364]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a6:	4a5c      	ldr	r2, [pc, #368]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032ac:	4b58      	ldr	r3, [pc, #352]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032b0:	4b57      	ldr	r3, [pc, #348]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032b2:	2180      	movs	r1, #128	; 0x80
 80032b4:	0249      	lsls	r1, r1, #9
 80032b6:	430a      	orrs	r2, r1
 80032b8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032ba:	4b55      	ldr	r3, [pc, #340]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032be:	4b54      	ldr	r3, [pc, #336]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032c0:	4956      	ldr	r1, [pc, #344]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80032c2:	400a      	ands	r2, r1
 80032c4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032c6:	4b52      	ldr	r3, [pc, #328]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2201      	movs	r2, #1
 80032d0:	4013      	ands	r3, r2
 80032d2:	d016      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fd ff94 	bl	8001200 <HAL_GetTick>
 80032d8:	0003      	movs	r3, r0
 80032da:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032dc:	e00c      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7fd ff8f 	bl	8001200 <HAL_GetTick>
 80032e2:	0002      	movs	r2, r0
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	4a4d      	ldr	r2, [pc, #308]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d904      	bls.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80032ee:	2313      	movs	r3, #19
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	2203      	movs	r2, #3
 80032f4:	701a      	strb	r2, [r3, #0]
            break;
 80032f6:	e004      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f8:	4b45      	ldr	r3, [pc, #276]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fc:	2202      	movs	r2, #2
 80032fe:	4013      	ands	r3, r2
 8003300:	d0ed      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003302:	2313      	movs	r3, #19
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10a      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800330c:	4b40      	ldr	r3, [pc, #256]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800330e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003310:	4a41      	ldr	r2, [pc, #260]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003312:	4013      	ands	r3, r2
 8003314:	0019      	movs	r1, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695a      	ldr	r2, [r3, #20]
 800331a:	4b3d      	ldr	r3, [pc, #244]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800331c:	430a      	orrs	r2, r1
 800331e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003320:	e00c      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003322:	2312      	movs	r3, #18
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	2213      	movs	r2, #19
 8003328:	18ba      	adds	r2, r7, r2
 800332a:	7812      	ldrb	r2, [r2, #0]
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	e005      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003330:	2312      	movs	r3, #18
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	2213      	movs	r2, #19
 8003336:	18ba      	adds	r2, r7, r2
 8003338:	7812      	ldrb	r2, [r2, #0]
 800333a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800333c:	2311      	movs	r3, #17
 800333e:	18fb      	adds	r3, r7, r3
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d105      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003346:	4b32      	ldr	r3, [pc, #200]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003348:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800334a:	4b31      	ldr	r3, [pc, #196]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800334c:	4935      	ldr	r1, [pc, #212]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800334e:	400a      	ands	r2, r1
 8003350:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2201      	movs	r2, #1
 8003358:	4013      	ands	r3, r2
 800335a:	d009      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800335c:	4b2c      	ldr	r3, [pc, #176]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800335e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003360:	2203      	movs	r2, #3
 8003362:	4393      	bics	r3, r2
 8003364:	0019      	movs	r1, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	4b29      	ldr	r3, [pc, #164]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800336c:	430a      	orrs	r2, r1
 800336e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2220      	movs	r2, #32
 8003376:	4013      	ands	r3, r2
 8003378:	d009      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800337a:	4b25      	ldr	r3, [pc, #148]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800337c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337e:	4a2a      	ldr	r2, [pc, #168]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003380:	4013      	ands	r3, r2
 8003382:	0019      	movs	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	4b21      	ldr	r3, [pc, #132]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800338a:	430a      	orrs	r2, r1
 800338c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	2380      	movs	r3, #128	; 0x80
 8003394:	01db      	lsls	r3, r3, #7
 8003396:	4013      	ands	r3, r2
 8003398:	d015      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800339a:	4b1d      	ldr	r3, [pc, #116]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800339c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	0899      	lsrs	r1, r3, #2
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	4b1a      	ldr	r3, [pc, #104]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033a8:	430a      	orrs	r2, r1
 80033aa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	2380      	movs	r3, #128	; 0x80
 80033b2:	05db      	lsls	r3, r3, #23
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d106      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80033b8:	4b15      	ldr	r3, [pc, #84]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	4b14      	ldr	r3, [pc, #80]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033be:	2180      	movs	r1, #128	; 0x80
 80033c0:	0249      	lsls	r1, r1, #9
 80033c2:	430a      	orrs	r2, r1
 80033c4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	4013      	ands	r3, r2
 80033d0:	d016      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80033d2:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d6:	4a15      	ldr	r2, [pc, #84]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033d8:	4013      	ands	r3, r2
 80033da:	0019      	movs	r1, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033e2:	430a      	orrs	r2, r1
 80033e4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	2380      	movs	r3, #128	; 0x80
 80033ec:	01db      	lsls	r3, r3, #7
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d106      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80033f2:	4b07      	ldr	r3, [pc, #28]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033f8:	2180      	movs	r1, #128	; 0x80
 80033fa:	0249      	lsls	r1, r1, #9
 80033fc:	430a      	orrs	r2, r1
 80033fe:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003400:	2312      	movs	r3, #18
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	781b      	ldrb	r3, [r3, #0]
}
 8003406:	0018      	movs	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	b006      	add	sp, #24
 800340c:	bd80      	pop	{r7, pc}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	40021000 	.word	0x40021000
 8003414:	40007000 	.word	0x40007000
 8003418:	fffffcff 	.word	0xfffffcff
 800341c:	fffeffff 	.word	0xfffeffff
 8003420:	00001388 	.word	0x00001388
 8003424:	efffffff 	.word	0xefffffff
 8003428:	ffffcfff 	.word	0xffffcfff
 800342c:	ffff3fff 	.word	0xffff3fff

08003430 <__libc_init_array>:
 8003430:	b570      	push	{r4, r5, r6, lr}
 8003432:	2600      	movs	r6, #0
 8003434:	4d0c      	ldr	r5, [pc, #48]	; (8003468 <__libc_init_array+0x38>)
 8003436:	4c0d      	ldr	r4, [pc, #52]	; (800346c <__libc_init_array+0x3c>)
 8003438:	1b64      	subs	r4, r4, r5
 800343a:	10a4      	asrs	r4, r4, #2
 800343c:	42a6      	cmp	r6, r4
 800343e:	d109      	bne.n	8003454 <__libc_init_array+0x24>
 8003440:	2600      	movs	r6, #0
 8003442:	f000 f821 	bl	8003488 <_init>
 8003446:	4d0a      	ldr	r5, [pc, #40]	; (8003470 <__libc_init_array+0x40>)
 8003448:	4c0a      	ldr	r4, [pc, #40]	; (8003474 <__libc_init_array+0x44>)
 800344a:	1b64      	subs	r4, r4, r5
 800344c:	10a4      	asrs	r4, r4, #2
 800344e:	42a6      	cmp	r6, r4
 8003450:	d105      	bne.n	800345e <__libc_init_array+0x2e>
 8003452:	bd70      	pop	{r4, r5, r6, pc}
 8003454:	00b3      	lsls	r3, r6, #2
 8003456:	58eb      	ldr	r3, [r5, r3]
 8003458:	4798      	blx	r3
 800345a:	3601      	adds	r6, #1
 800345c:	e7ee      	b.n	800343c <__libc_init_array+0xc>
 800345e:	00b3      	lsls	r3, r6, #2
 8003460:	58eb      	ldr	r3, [r5, r3]
 8003462:	4798      	blx	r3
 8003464:	3601      	adds	r6, #1
 8003466:	e7f2      	b.n	800344e <__libc_init_array+0x1e>
 8003468:	080034e0 	.word	0x080034e0
 800346c:	080034e0 	.word	0x080034e0
 8003470:	080034e0 	.word	0x080034e0
 8003474:	080034e4 	.word	0x080034e4

08003478 <memset>:
 8003478:	0003      	movs	r3, r0
 800347a:	1882      	adds	r2, r0, r2
 800347c:	4293      	cmp	r3, r2
 800347e:	d100      	bne.n	8003482 <memset+0xa>
 8003480:	4770      	bx	lr
 8003482:	7019      	strb	r1, [r3, #0]
 8003484:	3301      	adds	r3, #1
 8003486:	e7f9      	b.n	800347c <memset+0x4>

08003488 <_init>:
 8003488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348e:	bc08      	pop	{r3}
 8003490:	469e      	mov	lr, r3
 8003492:	4770      	bx	lr

08003494 <_fini>:
 8003494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800349a:	bc08      	pop	{r3}
 800349c:	469e      	mov	lr, r3
 800349e:	4770      	bx	lr
